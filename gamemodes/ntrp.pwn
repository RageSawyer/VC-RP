#pragma 	warning disable 	239
#pragma 	warning disable     214
#pragma 	warning disable     201
#pragma 	warning disable     208
#pragma 	warning disable     217
#pragma 	warning disable     213

#include 	<a_samp>            // Sürüm: 0.3.DL-R1
//#include    <nex-ac>            // Sürüm: **
#include 	<streamer> 			// Sürüm: 2.9.2
#include    <a_zones>           // Sürüm: 2008
#include    <GetVehicleName>    // Sürüm: **
#include 	<a_mysql> 			// Sürüm: R41-4 ~ https://githufb.co/pBlueG/SA-MP-MySQL/releases
#include 	<sscanf2> 			// Sürüm: 2.8.2
#include    <dini>              // Sürüm: 1.6
#include    <PAWN.cmd>          // Sürüm: ***
#include 	<foreach>           // Sürüm: 0.4.3
#include 	<YSI\y_iterate>		// Sürüm: 4.00.0001
#include    <mSelection>        // Sürüm: **f
#include    <md5>               // Sürüm: 1.0
#include 	<crashdetect>		// Sürüm: 4.19
#include    <PreviewModel>
#include    <AnimFix>
#include 	<easyDialog>
#include  	<progress2>
#include 	<LiveCam>
#include    <mapandreas>
#include    <TOTP>
#include 	<discord-connector>

/* * * * * * * * * * * * * * * * * * * * * * * */
#pragma 	tabsize 						0
#pragma 	dynamic 						20000000
#undef MAX_PLAYERS
#define MAX_PLAYERS 500

#define     ASILI_SILAHLAR_DURUMU			(true)

#define 	KEY_AIM 						132

#define dcam_UpdateRate   250
#define dcam_Distance     135.0

#define MDC_BASLIK          				"DATABASE - N.T.P.D"

#define ARSA_ALGORITMA                      6666 //6666 normal deðerdeydi

// at yarýþý


#define TimerTextDrawLocX 547
#define TimerTextDrawLocY 2
#define TimeOfHorseRaceHours 1
#define TimeOfHorseRaceMinutes 20
#define CashLowerBounds 100
#define CashHigherBounds 1500

#define IsNull(%1) \
((!(%1[0])) || (((%1[0]) == '\1') && (!(%1[1]))))

// silah sistemi

#define SILAH_OYUNCU_USTUNDE (0)
#define SILAH_YERDE (1)
#define SILAH_ARACTA (2)
#define SILAH_EVDE (3)
#define SILAH_POLIS_ZIMMETI (4)

// silah sistemi son

// para log sistemi

#define YONTEM_PARAVER	(1)
#define YONTEM_ARAC_SAT	(2)
#define YONTEM_ARAC_SISTEME_SAT	(3)
#define YONTEM_OFFLINE_TRANSFER	(4)
#define YONTEM_KASA_KOY	(5)
#define YONTEM_KASA_CEK	(6)
#define YONTEM_FIRMAKASA_CEK	(7)
#define YONTEM_FIRMAKASA_KOY	(8)
#define YONTEM_APARAVER	(9)
#define YONTEM_BANKA_PARACEK	(10)
#define YONTEM_BANKA_PARAYATIR	(11)


// player record type

#define IC_HAPIS (0)
#define OOC_HAPIS (1)

//

#define 	MAX_SUNUCU_RAPOR        		(100)
#define     MAX_SUNUCU_SORU                 (100)
#define 	MAX_TEZGAH                      (200)
#define     MAX_SEYYAR                      (300)
#define     MAX_TNOKTA                      (300)

#define     MAX_YANGIN                      (20)
#define     MAX_SPOR                        (8)

#define     MAX_EKIP                        (50)

#define     MAX_GISELER                 	(25)

#define     MAX_YERESYASI             		(500)
#define     MAX_TAMIRCI                 	(50)

#define     MAX_TELREHBER                   (21)

#define     MAX_GRAFITI                		(20) // sistem açýlacaðý zaman düzenlenebilir

#define     MAX_OYUNCU_ARAC                 (11)

#define     MAX_GATE                        (100)
#define 	MAX_KOGUS						(100)

#define     VERGI_BOLU                      (5) // fiyat / vergi_bolu
#define 	VERGI_MAX_BOLU					(10)
#define 	EV_VERGI_BOLU					(7500)
#define 	ISYERI_VERGI_BOLU				(6500)
#define     VERGI_SAAT                      (195) // bölünen vergi / vergi_saat = saatlik vergi$+
#define     VERGI_ORTA_SAAT                 (225)

#define     ISYERI_VERGI                    (23)

#define     AKSESUAR_FIYAT					(25)
#define  	MAX_AKSESUAR					(8)

#define     MAX_AKTOR                       (100)
#define     TOPALLAMA                       (false)

#define  	ASANSOR_OBJE					(18755)
#define     MAX_ASANSOR                	 	(100)

#define     ANTI_HILE                       (false)
#define 	MOTOR_CAN						(348.0)

#define     GATE_BILGISI                    (true)

#define		function%0(%1) forward%0(%1); 	public%0(%1)
#define 	HizKontrol(%0,%1,%2,%3,%4) 		floatround(floatsqroot(%4?(%0*%0+%1*%1+%2*%2):(%0*%0+%1*%1) ) *%3*1.6)

#define abs(%1) \
        (((%1) < 0) ? (-(%1)) : ((%1)))

native	IsValidVehicle(vehicleid);

#define TIME_DIF 2000 //Decreasing will make it more accurate, leave it like that, it's fine.

forward C_Paused(playerid);

// Sunucu Bilgileri
#define SUNUCU_ADI 	 		"Nitro Roleplay ~ #OnlyForAdmins"
#define SUNUCU_WEBSITE		"www.ntrp.com"
#define SUNUCU_SURUM		"Nitro: V0.0.1"
#define SUNUCU_MAP          "San Andreas"
#define SUNUCU_DIL          "Nitrolis"
#define SUNUCU_RCON         "test"

// MySQL Baðlantýlarý
#define SQL_BAGLANTI        (1) // 1 - local, 2 - vds

#define SQL_HOST			"localhost"
#define SQL_AD				"root"
#define SQL_SIFRE			""
#define SQL_DATABASE		"vcrp"

#define T_SQL_HOST			"test"
#define T_SQL_AD			"test"
#define T_SQL_SIFRE			"test"
#define T_SQL_DATABASE		"test"


// Renkler

#define RENK_KLASIK			(0x99C794FF)

#define ADMINBILDIRI        (0xE92C10FF)
#define RAPOR_CEVAP   		(0xF2F200FF)
#define RENK_VARSAYILAN		(0xFFFFFF00)
#define RENK_SERVER      	(0xAFAFAFFF)
#define RENK_VICE           (0x49B1FFFF)
#define RENK_TAN   			(0xFFDBA07D)
#define RENK_KARAKTER       (0x359D9BFF) // FF8C00
#define RENK_SOKAKTANSESLER (0x66A6CCFF)
#define RENK_IHBAR          (0x00CC00FF)
#define RENK_REKLAM         (0x00D900FF)
#define RENK_RAPOR			(0xF5DEB3FF)
#define RENK_PM				(0xFFBB00FF)
#define RENK_OLUSUM         (0x26C7DFFF)
#define RENK_TELSIZ       	(0x8D8DFF00)
#define RENK_TELSIZ2       	(0x5d6afcFF)
#define RENK_TELSIZ3       	(0x434ff6FF)
#define COLOR_WHITE         (0xFFFFFFAA)
#define COLOR_GOLD          (0xFFCC00AA)
#define RENK_SMS			(0xAFFF00FF)

#define RENK_DO             (0x79BFA3FF) // C24748
#define RENK_KIRMIZI        (0xB70000FF)
#define RENK_ACIKKIRMIZI   	(0xfa5555AA)
#define RENK_YETKILI        (0xd8cd9bFF)
#define RENK_BEYAZ          (0xFFFFFFFF)
#define RENK_SIYAH          (0x000000FF)
#define RENK_GRI            (0xAFAFAFFF)
#define RENK_PEMBE      	(0xBEA1D3FF)
#define RENK_VCFD           (0xd3567500)
#define RENK_ACIKSARI		(0xF5DEB3FF)
#define RENK_KAPALIMAVI		(0x1394BFFF)
#define RENK_TURUNCU		(0xFFA500FF)
#define RENK_SARI           (0xFFF700FF)
#define RENK_YESIL          (0x00CD00FF)
#define RENK_PDISBASI       (0x8D8DFF00)
#define RENK_APOLET         (0x8D8DFFFF)
#define RENK_FDAPOLET       (0xd35675FF)
#define	RENK_YAZI_1			(0xE6E6E6E6)
#define	RENK_YAZI_2			(0xC8C8C8C8)
#define	RENK_YAZI_3			(0xAAAAAAAA)
#define	RENK_YAZI_4			(0x8C8C8C8C)
#define	RENK_YAZI_5			(0x6E6E6E6E)
#define RENK_ACIKYESIL      (0x80A05CFF)
#define RENK_OZELSARI       (0xF0F000FF)
#define RENK_KAPALISARI     (0xE5C43EFF)
#define COLOR_RED           (0xfa5555AA)
#define RENK_MODIFIYE    	(0xFF6600FF)
#define RENK_OZELKIRMIZI    (0xFF6347FF)
#define RENK_FIRMA          (0xDC2222AA)
#define RENK_KOYUMAVI		(0xB0C4DEFF)
#define RENK_BASINSARI      (0xFFF70000)
#define RENK_AVUKAT			(0xB4B4B4FF)

#define COLOR_PRICE             100

// Yönetici renkleri
#define RENK_Y1     		(0x0DFF0000) // A48282
#define RENK_Y2     		(0x0DFF0000)
#define RENK_Y3     		(0x0DFF0000)
#define RENK_Y4     		(0x0DFF0000)
#define RENK_Y5     		(0x0DFF0000)
#define RENK_Y6     		(0xA4828200)
#define RENK_Y7     		(0x15467100)
#define RENK_Y8     		(0xB7000000) // FF6700

// defineler
#define SUNUCU_DOSYA					"sunucuayarlari.ini"
#define VARSAYILAN_ISYERI_ADI           "Vice"
#define KONUSMA_MESAFESI                (20.0)  //
#define MAKSIMUM_CEZA                   (15000) // Kesilebilecek en yüksek ceza.
#define KILISEINTERIOR					(44)
#define interiorid						(0)
#define levelexp            			(4)     // üst level ile çarpýlarak sayý.
#define EX_SPLITLENGTH					(120)
#define YARALI_SURE                     (180)   // Yaralanma süresi
#define ACLIK_SURE          			(4)		// azalma süresi, dakika cinsinden
#define SUSUZLUK_SURE       			(4)		// azalma süresi, dakika cinsinden
#define TAMIR_UCRET                     (250)   // Araç Tamir Ücreti hasar
#define TAMIR_SURE                      (10)    // Araç Tamir Süresi
#define EHLIYET_UCRET                   (75)    // Ehliyet testine girildiðinde kesilecek ücret.
#define MAKSIMUM_ODUN                   (3)     // Oyuncunun üzerinde bulundurabileceði maksimum odun.
#define MAKSIMUM_BAGAJ_SLOT             (4)
#define BAKIM_SURE                      (10)    // Bakým yapma süresi.
#define TOPLAMA_SURE                    (7)     // Uyuþturucu toplama süresi.
#define MAKSIMUM_PING                   (500)   // Oyuncunun ulaþabileceði maksimum ping.
#define SMS_UCRET                       (2)     // SMS gönderildiðinde kesilecek para.
#define ISYERI_SAATLIK_BOLU            	(3)   // Oyuncu payday aldýðýnda kasaya eklenecek para.
#define ISYERI_GELIR_SAAT               (2000)
#define BAGAJ_CANLIMIT                  (45)
#define SAZANSATIS						(35)
#define SOMBALIGISATIS					(45)
#define LEVREKSATIS						(55)
#define ORKINOSSATIS					(65)
#define INCISATIS						(75)
#define YEM_FIYAT   					(5)
#define TRUCKER_BIR_UCRET               (360)
#define TRUCKER_IKI_UCRET               (650)
#define TRUCKER_UC_BIR_UCRET            (1040)
#define TRUCKER_UC_IKI_UCRET            (1010)
#define TRUCKER_UC_UC_UCRET             (610)
#define TRUCKER_UC_DORT_UCRET           (750)


// otel sistemi

#define MAX_RESEPSIYON                  (6)        	// oluþturulabilecek maksimum resepsiyon
#define MAX_OTEL_ODA                    (1000)        	// bir resepsiyonun maksimum otel sayýsý
#define OTEL_KIRA_UCRET         		(100)      	// $
#define OTEL_KIRA_SURE          		(3600) 		// 60dk

#define OTEL_ODA_KIRALA                 (9990)
#define OTEL_ODA_KIRALA_X               (9991)
#define RESEPSIYON_DUZENLE              (9992)
#define RESEPSIYON_KASA                 (9993)
#define RESEPSIYON_KASA_CEK             (9994)
#define RESEPSIYON_KASA_YATIR           (9995)
#define OTEL_ODA_SURE_SECIM           	(9996)

/////////////////

#define MAX_BALIK   					(15)
#define MAX_TEKNE_BALIK   				(50)
#define MAX_YEM     					(20)
#define MAX_ARAC    					(1000)
#define MAX_CUVAL                       (70)
#define MAX_ESYA                        (80)
#define MAX_ITEM                        (24)
#define MAX_AGIRLIK                     (15.0)
#define MAX_BIRAKILANITEM               (1200)
#define MAX_FIRMA                       (40)
#define MAX_GARAJ                       (100)
#define MAX_ATELEFON                    (100)
#define MAX_KANAMA                      (500)
#define MAX_YAT                         (20)
#define MAX_CIFTLIK                     (100)
#define MAX_BOLGE						(100)
#define MAX_SHELLS 						(300)
#define MAX_WEED                    	(300)
#define MAX_KARAVAN                     (1000)
#define MAKSIMUM_HASAR					(10)
#define MAKSIMUM_UYUSTURUCU             (1000)
#define MAKSIMUM_EV                  	(500)
#define MAKSIMUM_ISYERI					(500)
#define MAKSIMUM_BINA       			(500)
#define MAKSIMUM_RAPOR					(1000)
#define MAKSIMUM_BIRLIK					(3000)
#define MAKSIMUM_ARAC                	(1000)
#define MAKSIMUM_OBJE                   (1000)
#define MAKSIMUM_ATM                    (500)
#define MAKSIMUM_TUTUKLAMANOKTASI       (25)
#define MAKSIMUM_MESLEK                 (50)
#define MAKSIMUM_BARIKAT                (50)
#define MAKSIMUM_BENZIN_POMPASI			(100)
#define MAKSIMUM_SORU   				(10)
#define MAX_REKLAM                      (100)

#define BIRLIK_UCRET        			(10000) // Birlik kurma ücreti.
#define BIRLIK_LEVEL        			(3)     // Birlik kurma leveli
#define BIRLIK_POLIS        			(1)
#define BIRLIK_MEDIKAL      			(2)
#define BIRLIK_DEVLET       			(3)
#define BIRLIK_HABERAJANSI  			(4)
#define BIRLIK_ONAYSIZ      			(5)
#define BIRLIK_ONAYLI       			(6)
#define BIRLIK_YARISCI					(7)
#define BIRLIK_AVUKAT					(8)
#define BIRLIK_GARDIYAN					(9)

#define KATEGORI_TUKETILEBILIR		(0)
#define KATEGORI_YIYECEK          	(1)
#define KATEGORI_GERECLER           (2)
#define KATEGORI_CRAFT              (3)
#define KATEGORI_ELEKTRONIK         (4)
#define KATEGORI_UYUSTURUCU_YAPIM   (5)
#define KATEGORI_SILAH              (6)

// Dialog ID'leri
#define BOS_MESAJ                      	(9999)

#define DIALOG_KAYIT 					(1)
#define DIALOG_GIRIS 					(2)
#define DIALOG_CINSIYET     			(3)
#define DIALOG_DOGUMYERI    			(4)
#define DIALOG_DOGUMTARIHI  			(5)
#define DIALOG_SUNUCU       			(6)
#define DIALOG_SUNUCU1     				(7)
#define DIALOG_SUNUCU2      			(8)
#define DIALOG_BIRLIK					(9)
#define DIALOG_BIRLIK_AYRIL 			(10)
#define DIALOG_BIRLIK_DAVET 			(11)
#define DIALOG_BIRLIK_DAVET1    		(12)
#define DIALOG_BIRLIK_KOV       		(13)
#define DIALOG_BIRLIK_RDUZENLE  		(14) // 15 kullanýlmayacak
#define DIALOG_BIRLIK_RUTBEVER  		(16)
#define DIALOG_BIRLIK_RUTBEVER1 		(17)
#define DIALOG_TEN_RENGI                (18)
#define DIALOG_POLIS_DOLAP              (19)
#define DIALOG_POLIS_EKIPMAN            (20)
#define DIALOG_DEVLET_DOLAP             (21)
#define DIALOG_HABERAJANSI_DOLAP        (22)
#define DIALOG_MEDIKAL_DOLAP            (23)
#define DIALOG_EV_SAHIP                 (24)
#define DIALOG_EV_KAPI                  (25)
#define DIALOG_MARKET                   (26)
#define DIALOG_RESTAURANT               (27)
#define DIALOG_GALERI                   (28)
//#define DIALOG_SATINAL_ONAY 			(29)
#define DIALOG_SEXSHOP                  (30)
#define DIALOG_GIYIM					(31)
#define DIALOG_EHLIYET_AYRIL            (32)
#define DIALOG_GIYIM_ONAY               (33)
#define DIALOG_ISYERI                   (34)
#define DIALOG_BANKA                    (35)
#define DIALOG_BANKA_PARACEK            (36)
#define DIALOG_BANKA_PARAYATIR          (37)
#define DIALOG_BANKA_TRANSFER           (38)
#define DIALOG_BANKA_TRANSFERY          (39)
#define DIALOG_TELEFON                  (40)
#define DIALOG_911_SECIM                (41)
#define DIALOG_911_LSPD                 (42)
#define DIALOG_911_LSPD_YER             (43)
//#define DIALOG_SATICI                   (44)
#define DIALOG_EVSAT                    (45)
#define DIALOG_ARACSAT                  (46)
#define DIALOG_ISYERISAT                (47)
#define DIALOG_ARAMA                    (48)
#define DIALOG_ARACANAHTAR              (49)
#define DIALOG_GOVASANSOR               (50)
#define DIALOG_GIRISUCRET               (51)
#define DIALOG_MESAJ                    (52)
#define DIALOG_MESAJ2                   (53)
#define DIALOG_EV_DEKOR                 (54)
#define DIALOG_USTARAMA                 (55)
#define DIALOG_UYUSTURUCULARIM          (56)
#define DIALOG_UYUSTURUCUVER            (57)
#define DIALOG_BIRLIKISLEM              (58)
#define DIALOG_BIRLIKKUR                (59)
#define DIALOG_911_LSFD                 (60)
#define DIALOG_911_LSFD_YER             (61)
#define DIALOG_GOZBAGLA                 (62)
#define DIALOG_EVANAHTAR                (63)
#define DIALOG_ISYERIKASA               (64)
#define DIALOG_ISYERIKASA_CEK           (65)
#define DIALOG_ISYERIKASA_YATIR         (66)
#define DIALOG_SIFREDEGISTIR            (67)
#define DIALOG_GOVKASA                  (68)
#define DIALOG_GOVPARACEK               (69)
#define DIALOG_GOVPARAYATIR             (70)
#define DIALOG_KIRA_UCRET               (71)
#define DIALOG_MDC                      (72)
#define DIALOG_MDC_SUC                  (73)
#define DIALOG_MDC_SUCEKLE              (74)
#define DIALOG_MDC_KISIARA              (75)
#define DIALOG_MDC_VATANDASLIK          (76)
#define DIALOG_MDC_TELEFON              (77)
#define DIALOG_MDC_CEZA                 (78)
#define DIALOG_GALERI_SATINAL			(79)
//#define DIALOG_FABRIKALAR               (80)
#define DIALOG_ARAC_BAGAJ               (81)
#define DIALOG_BIRLIK_DUYURU            (82)
//#define DIALOG_KAMYON_AYRIL             (83)
#define DIALOG_PDASANSOR                (84)
#define DIALOG_ORTAKEKLE                (85)
#define DIALOG_ORTAKONAY                (86)
#define DIALOG_ORTAK_AYRIL              (88)
#define DIALOG_KIRACI_AYRIL             (88)
#define DIALOG_DILSEC					(89)
#define DIALOG_ORTAK_CIKAR              (90)
#define DIALOG_MUZIK_DEGISTIR           (91)
//#define DIALOG_BIRIMDAVET               (92)
#define DIALOG_BENZIN_UCRET             (93)
#define DIALOG_ARANMAKAYITLARI          (94)
#define DIALOG_SUCKONTROL               (95)
#define DIALOG_CEZALAR                  (96)
#define DIALOG_ELKOY                    (97)
#define DIALOG_MDC_KISISORGULA2         (98)
#define DIALOG_BOOMBOX                  (99)
#define DIALOG_BOOMBOX_URL              (100)
#define DIALOG_CEZA_KISISEL             (101)
#define DIALOG_CEZA_KISISEL_ODE         (102)
#define DIALOG_ARACBAGAJ                (103)
#define DIALOG_BAGAJ_EKLE               (104)
#define		AKSESUAR						(105)
#define		AKSESUARSIL						(106)
#define		AKSESUARKONTROL					(107)
#define		AKSESUARSATINAL					(108)
#define		AKSESUARSATINAL2				(109)
#define		AKSESUARSATINAL3				(110)
#define		AKSESUARSATINALPLAT				(111)
#define     AKSESUARSATINALPLAT2			(112)
#define     AKSESUARSATINALPLAT3			(113)
#define     AKSESUARDUZENLE					(114)
#define     AKSESUARDUZENLE2				(115)
#define	    AKSESUARKEMIK					(116)
#define	    AKSESUARSATINALCOP				(117)
#define	    AKSESUARSATINALCOP2				(118)
#define	    AKSESUARSATINALCOP3				(119)
#define	    AKSESUAR_RENK					(120)
#define	   	AKSESUAR_RENK_II       			(121)

#define ISYERI_ISIM                       	(122)
#define ARACLARIM_MENU                  	(123)

#define DIALOG_GRAFITI                      (124)
#define DIALOG_GRF_YAZI                     (125)
#define DIALOG_GRF_FONT                     (126)

#define GRAFFITI_SIL                        (127)

#define DIALOG_YAT_RADYO                    (128)
#define DIALOG_YAT_SATINAL                  (129)
#define DIALOG_YAT_KASA                     (130)
#define DIALOG_YAT_KASA_KOY                 (131)
#define DIALOG_YAT_KASA_CIKAR               (132)
#define DIALOG_YAT_KASA_BILGI               (133)
#define DIALOG_MALZEMEDUKKANI               (134)
#define DIALOG_DOLAPKUR                     (135)
#define DIALOG_DOLAPSIFRE                   (136)
#define DIALOG_DOLAPISLEM                   (137)
#define DIALOG_DOLAP_EKLE                   (138)
#define DIALOG_DOLAPLARIM                   (139)
#define DIALOG_BAGAJKIR                     (140)
#define DIALOG_ANKESOR                      (141)
#define DIALOG_ANKESOR_ARA                  (142)
#define DIALOG_SILAH_GORUNTULE              (143)
#define DIALOG_KARAVAN_SATINAL              (144)
#define DIALOG_KARAVAN_KASA                 (145)
#define DIALOG_KARAVAN_KASA_KOY             (146)
#define DIALOG_KARAVAN_KASA_CIKAR           (147)
#define DIALOG_KARAVAN_KASA_BILGI           (148)
#define DIALOG_KARAVANLAR                   (149)
#define TAMIRCI_DIALOG                  	(150)
#define DIALOG_GARAJKUR                     (151)
#define DIALOG_GARAJDUZENLE                 (152)
#define DIALOG_GARAJSAHIP                   (153)
#define DIALOG_GARAJINT                     (154)
#define DIALOG_GARAJBIRLIK	                (155)
#define DIALOG_GARAJ_KASA                   (156)
#define DIALOG_GARAJ_KASA_KOY               (157)
#define DIALOG_GARAJ_KASA_CIKAR             (158)
#define DIALOG_GARAJ_KASA_BILGI             (159)

#define ANIMASYON_LISTESI               	(160)
#define ANIMASYON_LISTESI_X             	(161)
#define DIALOG_TELTARIH                     (162)
#define DIALOG_TELKONUM                     (163)
//#define DIALOG_NUMUNESORGU                  (164)
#define DIALOG_CEZA_ARAC                    (165)
#define DIALOG_CEZA_ARAC_ODE                (166)
#define ARACCEZA_MENU                       (167)

#define	AKTOR_SILAHCI                   	(168)
#define	AKTOR_SILAHCI_X             		(169)
#define	AKTOR_SILAHCI_Y                 	(170)
#define AKTOR_MERMICI                       (171)

#define DIALOG_POLIS_DEVRIYE                (172)
#define DIALOG_NPC_OLUSTUR                  (173)

#define DIALOG_FIRMA_KUR                    (180)
#define DIALOG_FIRMA_KUR_ISIM               (181)
#define DIALOG_FIRMA_KUR_ONAY               (182)
#define DIALOG_FIRMA_LIDER_ISLEM            (183)
#define DIALOG_FIRMA_LIDER_ISLEMX           (184)
#define DIALOG_FIRMA_LIDER_ISLEMY           (185)

#define DIALOG_FIRMA_LIDER                  (186)


#define DIALOG_FIRMA_NOT                    (188)
#define DIALOG_FIRMA_RUTBELER               (189)
#define DIALOG_FIRMA_RUTBE_YONET            (190)
#define DIALOG_FIRMA                        (191)
#define DIALOG_FIRMA_BILGI                  (192)
#define DIALOG_FIRMA_KASA                   (193)
#define DIALOG_FIRMA_KONTRATLAR             (194)
#define DIALOG_FIRMA_AYRIL                  (195)
#define DIALOG_FIRMA_BASVURU                (196)
#define DIALOG_FIRMA_SKINLER                (197)
#define DIALOG_FIRMA_SKIN_YONET             (198)
#define DIALOG_FIRMA_KASA_CIKAR             (199)
#define DIALOG_FIRMA_KASA_KOY               (200)
#define DIALOG_FIRMA_MAAS_AYARLA            (201)
#define DIALOG_FIRMA_ARAC                   (202)
#define DIALOG_FIRMA_ARAC_SATINAL           (203)
#define DIALOG_FIRMA_ARACR1                 (204)
#define DIALOG_FIRMA_ARACR2                 (205)
#define DIALOG_FIRMA_ARAC_SAT               (206)
#define DIALOG_CUVAL_BILGI                  (207)
#define DIALOG_FIRMA_KONTRATGOR             (208)
#define DIALOG_FIRMALAR                     (209)
#define DIALOG_MTERCIH                      (210)
#define DIALOG_REKLAM                       (211)
#define DIALOG_ASANSOR_KAT                  (212)
#define DIALOG_ENVANTER                     (213)
#define DIALOG_ENVANTER_SIGARA              (214)
#define	DIALOG_ENVANTER_CAKMAK              (215)
#define	DIALOG_ENVANTER_ICKI                (216)
#define DIALOG_ENVANTER_KOLAGAZOZ           (217)
#define DIALOG_ENVANTER_YIYECEK             (218)
#define DIALOG_ENVANTER_MAYMUNCUK           (219)
/*#define DIALOG_SORULAR  					(220)
#define DIALOG_SORU1    					(221)
#define DIALOG_SORU2    					(222)
#define DIALOG_SORU3    					(223)
#define DIALOG_SORU4    					(224)
#define DIALOG_SORU5    					(225)
#define DIALOG_SORU6    					(226)
#define DIALOG_SORU7    					(227)
#define DIALOG_SORU8    					(228)
#define DIALOG_SORU9    					(229)
#define DIALOG_SORU10   					(230)*/
#define DIALOG_FIRMA_MENU	                (231)
#define DIALOG_CUZDANUYGULAMA               (232)
#define DIALOG_REHBER                       (233)
#define DIALOG_ARAMASECIM                   (234)
#define DIALOG_HARITALARMENU                (235)
#define DIALOG_HARITAGPSLISTE		        (236)
#define DIALOG_HARITAGPS                    (237)
#define DIALOG_HARITAKONUMGONDERME          (238)
#define DIALOG_MUZIKLISTE                   (239)
#define DIALOG_MUZIKMENU                    (240)
#define DIALOG_MUZIKRADYOLISTE              (241)
#define DIALOG_ADMINPMUYARI                 (242)
#define DIALOG_YETENEKSIFIRLAONAY           (243)
//#define DIALOG_LABORATUVARSAT               (244)
//#define DIALOG_LABORATUVAR_KAPI             (245)
//#define DIALOG_LABKULLAN                    (246)
//#define DIALOG_LABBILGILER                  (247)
//#define DIALOG_LABDURUM                     (248)
//#define DIALOG_LABUYUSTURUCUPISIR           (249)
#define DIALOG_KARAKTER_SECIMEKRANI         (250)
#define DIALOG_KIYAFET_SLOT_BIR             (251)
#define DIALOG_KIYAFET_SLOT_IKI             (252)
#define DIALOG_KIYAFET_SLOT_UC              (253)
#define DIALOG_TRUCKER_SECIM                (254)
#define DIALOG_VICE_MARKET                  (255)
#define DIALOG_ISIM_DEGISIM                 (256)
#define DIALOG_PLAKA_DEGISIM                (257)
#define DIALOG_TELEFON_DEGISIM              (258)
#define DIALOG_ISIM_DEGISIM_ONAY            (259)
#define DIALOG_PLAKA_DEGISIM_ONAY           (260)
#define DIALOG_TELEFON_DEGISIM_ONAY         (261)
#define DIALOG_ENVANTER_CRAFT               (262)
#define DIALOG_CRAFT_LISTE                  (263)
#define DIALOG_BISIKLET_ALIM                (264)
#define DIALOG_BISIKLET_ALIM_ONAY           (265)
#define DIALOG_BISIKLET_RENK_BIR            (266)
#define DIALOG_BISIKLET_RENK_IKI            (267)
#define DIALOG_BESYPUANI_ALIM               (268)
#define DIALOG_ONYPUANI_ALIM                (269)
#define DIALOG_ONBESYPUANI_ALIM             (270)
#define DIALOG_YETENEKSIFIRLAMA_ONAY        (271)
#define DIALOG_ENVANTER_MASKE               (272)
#define DIALOG_ANIMASYON_INFO               (273)
#define DIALOG_ARAC_GELISTIR                (274)
#define DIALOG_ENVANTER_ESYA_SAT            (275)
#define DIALOG_CRAFTMALZEME                 (276)
#define DIALOG_PDPC_KISI_SORGULA            (277)
#define DIALOG_PAWNSHOP                     (278)
#define DIALOG_ARACMOD                      (280)
#define DIALOG_ARACMOD_ONAY                 (281)
#define DIALOG_BIRLIK_AMAC                  (282)
#define DIALOG_GALERI_ACIKLAMA              (283)
#define DIALOG_GALERI_RENK1                 (284)
#define DIALOG_GALERI_RENK2                 (285)
#define DIALOG_ARAC_SISTEME_SAT             (286)
#define DIALOG_BIRLIK_KISALTMA              (287)
#define DIALOG_444_SECIM                    (288)
#define DIALOG_TRAILER1                     (289)
#define DIALOG_TRAILER2                     (290)
#define DIALOG_TRAILER3                    	(291)
#define DIALOG_TRAILER4                    	(292)
#define DIALOG_ISYERI_SISTEM_ONAY           (293)
#define DIALOG_SELAMLAS						(294)
#define DIALOG_USTUNUARADIM					(295)
#define DIALOG_ELKOYDUM						(296)
#define DIALOG_UYUS_KULLAN                  (297)
#define DIALOG_SILAH_KULLAN                 (298)
#define ARAC_KIRALA_SURE					(299)
#define GATE_DIALOG                     	(300)
#define GATE_DIALOG_X                   	(301)
#define SAHIP_OLDUGUM_GATELER				(302)
#define GATELERIMIN_AYARLARI				(303)
#define GATELERIMI_DUZENLIYORUM				(304)
#define DIALOG_YAPILANDIRMA_ONAY            (305)
#define DIALOG_ARAC_ONAY                 	(306)
#define PDAKSESUARAL                        (307)
#define FDAKSESUARAL                        (308)
#define DIALOG_OZELAKSESUAR                 (309)
#define DIALOG_KAMERA_KULLAN                (310)
#define DIALOG_EV_SORGULA                   (311)
#define DIALOG_ISYERI_SORGULA               (312)
#define DIALOG_GIZLIDEPOBIR                 (313)
#define DIALOG_GIZLIDEPOIKI                 (314)
#define DIALOG_GIZLIDEPOUC                  (315)
#define DIALOG_AT_BAHIS                     (316)
#define DIALOG_AT_SECIM                     (317)
#define DIALOG_KIYAFET_POSET                (318)
#define ENVANTER_MERMI_SATINAL				(319)
#define DIALOG_YEDEK_ANAHTAR				(320)
#define DIALOG_PENSE                        (321)
#define DIALOG_DEODORANT_KULLAN             (322)
#define DIALOG_ARAC_RADYO                   (323)
#define DIALOG_TEKNE_SATINAL				(324)
#define DIALOG_TEKNE_SATINAL_ONAY			(325)
#define DIALOG_ARAC_RADYO_URL               (326)
#define DIALOG_ARACMODKALDIR                (327)
#define DIALOG_BALIKONAY           		    (328)
#define DIALOG_SILAHLISTE_ENVANTER          (329)

#define DIALOG_S_BIRLIK                     (330)
#define DIALOG_S_UYELER                     (331)
#define DIALOG_S_UYEISLEM                   (332)
#define DIALOG_S_UYEISLEMX                  (333)
#define DIALOG_SEYYAR_SATINAL               (334)
#define DIALOG_SEYYAR_SATINAL_ONAY          (335)
#define DIALOG_SEYYAR_KASA		            (336)
#define DIALOG_SEYYAR_SEKERLEME             (337)
#define DIALOG_SEYYAR_ICECEK                (338)
#define DIALOG_SEYYAR_BALIK                 (339)
#define DIALOG_SEYYAR_FASTFOOD              (340)
#define DIALOG_SEYYAR_SANS                  (341)
#define DIALOG_LOTO_BILET                   (342)
#define DIALOG_ENVANTER_LOTO                (343)
#define DIALOG_ENVANTER_YILBASI             (344)
#define DIALOG_TNOKTA_ISIM                  (346)
#define DIALOG_DOLAP_AYAR                   (348)
#define DIALOG_DOLAP_SIFREDEGIS             (349)
#define DIALOG_PDPC_PLAKASORGU              (354)
#define DIALOG_PDPC_ARANMAVERI              (355)
#define DIALOG_BANKA_MEVDUAT_CEK            (356)
#define DIALOG_BANKA_MEVDUAT_YATIR          (357)
#define DIALOG_BIRLIK_ARACLARI              (358)
#define DIALOG_MOBILYA_SATINAL				(359)
#define DIALOG_MOBILYA_LISTELE				(360)
#define DIALOG_CIFTLIK_EKIM					(361)
#define DIALOG_ARAC_EKINLER					(362)
#define DIALOG_TOHUM_KULLAN					(364)
#define DIALOG_MARI_KULLAN					(365)
#define DIALOG_KSODA_KULLAN					(366)
#define DIALOG_TRAPHOUSE					(367)
#define DIALOG_FIRMAARACSAT                 (368)
#define DIALOG_BOLGE_UYUS					(369)
#define DIALOG_KILOSEC						(370)
#define DIALOG_BOYSEC						(371)
#define DIALOG_GOZRENGISEC					(372)
#define DIALOG_SACRENGISEC					(373)
#define DIALOG_TEKIPMAN_SATINAL				(374)
#define DIALOG_TEKIPMAN_SATINAL_ONAY		(375)
#define DIALOG_KOKO_KULLAN					(376)
#define DIALOG_KOKB_KULLAN					(377)
#define DIALOG_KOVAN_SORGULA				(378)

#define PDPC_ISIMSORGU 						(379)
#define PDPC_PLAKASORGU 					(380)
#define PDPC_SICILSAYFA     				(381)
#define PDPC_NOSORGULA      				(382)
#define PDPC_BOLOKAYIT      				(383)
#define PDPC_BOLOOLUSTUR    				(384)
#define PDPC_BOLOKABULET    				(385)
#define PDPC_BOLOSIL        				(386)
#define PDPC_BOLOSAYFA      				(387)
#define PDPC_EVSORGULA      				(388)
#define PDPC_ISSORGULA      				(389)
#define PDPC_ARANANLAR      				(390)
#define PDPC_ARANANSUC     					(391)
#define PDPC_ARANANEKLE     				(392)

#define COLOR_WHETSTONE		(0x5b8c5a00)
#define COLOR_CIFTLIK		(0x008181AA)
#define COLOR_LIGHTRED      (0xFF6347FF)

// Kolay bilgi mesajlarý.
#define SunucuMesaji(%0,%1) \
SCM_Ex(%0, COLOR_WHETSTONE, "[SÝSTEM]{C8C8C8} "%1)

#define YardimMesaji(%0,%1) \
SCM_Ex(%0, COLOR_WHETSTONE, "[YARDIM]{C8C8C8} "%1)

#define HurdaciMesaji(%0,%1) \
SCM_Ex(%0, RENK_VICE, "[HURDACI]{C8C8C8} "%1)

#define CiftlikMesaji(%0,%1) \
SCM_Ex(%0, COLOR_CIFTLIK, "[ÇÝFTLÝK]{FFFFFF} "%1)

#define BilgiMesaji(%0,%1) \
SCM_Ex(%0, RENK_VICE, "[BÝLGÝ]{C8C8C8} "%1)

#define IpucuMesaji(%0,%1) \
SCM_Ex(%0, RENK_VICE, "[ÝPUCU]{C8C8C8} "%1)

#define tuccarMesaji(%0,%1) \
SCM_Ex(%0, RENK_VICE, "[CPT. Vice]{C8C8C8} "%1)

#define mermiciMesaji(%0,%1) \
SCM_Ex(%0, RENK_VICE, "[Tommy Guy]{C8C8C8} "%1)

#define siparisMesaji(%0,%1) \
SCM_Ex(%0, RENK_VICE, "[SÝPARÝÞ]{C8C8C8} "%1)

#define kullanimMesaji(%0,%1) \
SCM_Ex(%0, RENK_TURUNCU, "[KULLANIM]{FFFFFF} "%1)

#define hataMesaji(%0,%1) \
SCM_Ex(%0, COLOR_RED, "[HATA]{C8C8C8} "%1)

#define vcGuardMesaji(%0,%1) \
SCM_Ex(%0, COLOR_RED, "[GUARD]{C8C8C8} "%1)

#define AdminMesaji(%0,%1) \
SCM_Ex(%0, COLOR_WHETSTONE, "[!]{C8C8C8} "%1)

#define UyariMesaji(%0,%1) \
SCM_Ex(%0, RENK_TURUNCU, "[UYARI]{C8C8C8} "%1)

#define MobilyaMesaji(%0,%1) \
SCM_Ex(%0, RENK_DO, "[MOBILYA]:{C8C8C8} "%1)

#define DuyuruMesaji(%0,%1) \
SCM_Ex(%0, RENK_SERVER, "[DUYURU]{C8C8C8} "%1)

#define BirlikDuyuruMesaji(%0,%1) \
SCM_Ex(%0, RENK_SERVER, "[BIRLIK DUYURU]{C8C8C8} "%1)

#define WALK_DEFAULT    0
#define WALK_NORMAL     1
#define WALK_PED        2
#define WALK_GANGSTA    3
#define WALK_GANGSTA2   4
#define WALK_OLD        5
#define WALK_FAT_OLD    6
#define WALK_FAT        7
#define WALK_LADY      	8
#define WALK_LADY2      9
#define WALK_WHORE      10
#define WALK_WHORE2     11
#define WALK_DRUNK     	12
#define WALK_BLIND     	13

// forward
forward Tezgah_Yukle();
forward Tnokta_Yukle();
forward Seyyar_Yukle();
forward ReklamYayinla(reklamid);
forward vcguardtimer(playerid);
forward oyuncuaratasamabir(playerid);
forward karaktersecimi(playerid);
forward forumyasaklamaarat(playerid);
forward ipyasaklamaarat(playerid);
forward PDPCKisiSorgula(playerid);
forward PDPCPlakaSorgula(playerid);
forward premiumtelnodegisim(playerid, telno);
forward premiumisimdegisimi(playerid, isim[]);
forward premiumplakadegisimi(playerid, aracid, plaka[]);
forward isimarat(playerid, oyuncuid, isim[]);
forward yoneticiyasaklamaarat(playerid);
forward yoneticiipyasaklamaarat(playerid);
forward oyuncuarat(playerid);
forward sahiparat(playerid);
forward bisikletsahiparat(playerid);
forward sahipvebirlikarat(playerid);
forward GirisTest(playerid);
forward OyuncuYukle(playerid);
forward HesapYukle(playerid);
forward OnItemlerYuklendi(playerid);
forward Float:vericek_float(row, const field_name[]);
forward Float:AracHizKontrol(playerid);
forward levelsenk(playerid);
forward SunucuRestart();
forward kanamainterval(playerid);
//forward Karavanlarim(playerid);
forward IsyeriYaratildi(isyeriid);
forward BenzinPompasiYaratildi(pompaid);
forward BinaYaratildi(binaid);
forward ATMYaratildi(atmid);
forward UyusturucuYaratildi(uid);
forward BirlikYaratildi(birlikid);
forward MeslekYaratildi(meslekid);
forward TNoktasiYaratildi(tid);
forward Evleri_Yukle();
forward Yat_Yukle();
forward Garaj_Yukle();
forward Kan_Yukle();
forward Cuval_Yukle();
forward Yeritem_Yukle();
forward Kutu_Yukle();
forward Ankesor_Yukle();
forward Isyerlerini_Yukle();
forward Binalari_Yukle();
forward Atmleri_Yukle();
forward Meslekleri_Yukle();
forward Uyusturuculari_Yukle();
forward	TutuklamaNoktasi_Yukle();
forward Araclari_Yukle();
forward Firmaarac_Yukle();
forward Birlikleri_Yukle();
forward Objeleri_Yukle();
forward OyuncuYaratildi(playerid);
forward ObjeYaratildi(objeid);
forward KickTimer(playerid);
forward CozulmeTimer(playerid);
forward AracYaratildi(aracid);
forward araccalistir(playerid, aracid);
forward BayginlikBitir(playerid);
forward AnkesorYaratildi(id);
forward ankesorno(playerid, ano);
forward evisimarat(evid);
forward labsahipisimarat(labid);
forward evkiraciisimarat(evid);
forward isyeriisimarat(isyeriid);
forward isyeriortakisimarat(isyeriid);
forward oyuncucoz(oyuncuid);
forward biletsakla(oyuncuid);
forward bagajyenile(vehicleid);
forward eskivirtual(oyuncuid, dunya);
forward yukteslim(oyuncuid);
forward yukal(oyuncuid);
forward kullanilmayanaraclarispawnla(playerid);
forward hesapnoarat(playerid, hesapno);
forward vnoarat(playerid, vno);
forward telefonnoarat(playerid, telno);
forward aractamir(playerid, aracid, slot, ucret);
forward pdaractamir(playerid, aracid);
forward KapiKir_Ev(playerid, id);
forward KapiKir_Isyeri(playerid, id);
forward UyusturucuBakimYap(playerid, id);
forward UyusturucuTopla(playerid, id);
forward CevapTimer(playerid);
forward HapisDene(playerid, isim[], dakika, sebep[]);
forward ParaDene(playerid, isim[], miktar);
forward offlinebanla(playerid, isim[], sebep[]);
forward ParaKesDene(playerid, isim[], miktar);
forward Asansor(playerid, kat);
forward EtkiSifirla(playerid);
forward HileKontrol1(playerid);
forward benzinal(oyuncuid, aracid);
forward Float:AracCan(aracid);
forward CezaListele(oyuncuid, isim[]);
forward CezaArat(oyuncuid, aranan[]);
forward AracCezaArat(oyuncuid, plaka[]);
forward CezaOdeme(oyuncuid, odeme);
forward AracCezaOdeme(oyuncuid, odeme);
forward AranmaSorgula(oyuncu[], gosterilenid);
forward KisiSorgula(oyuncu[], gosterilenid, secenek);
forward AranmaKayitlari(oyuncuid);
forward skinduzelt(oyuncuid);

// ARGB = 0xFFhtml - Gümüþ xd

// at yarýþý

new Text:Horse1, Text:Horse2, Text:Horse3, Text:Horse4, Text:BG1, Text:BG2, Text:Start, Text:Finish, Text:Start2, Text:Finish2, HorseCD, Text:CDTextDraw, Text:HorseNum1, Text:HorseNum2, Text:HorseNum3, Text:HorseNum4, HorseAnimCount;
new Float:HorsePosX1, Float:HorsePosX2, Float:HorsePosX3, Float:HorsePosX4, HorseStop,Text:favtv_0,PlayerText:favtv_1[MAX_PLAYERS];
new MoneyBet[MAX_PLAYERS], BetOnHorse[MAX_PLAYERS], RaceStarted, Watching[MAX_PLAYERS], Prepared, Horsemsg, RecentlyFired[MAX_PLAYERS];

// at yarýþý son
new DCC_Channel:reklamkanali,
DCC_Channel:sokakkanali,
DCC_Channel:paralog,
DCC_Channel:bankatransfer,
DCC_Channel:evlog,
DCC_Channel:isyerilog,
DCC_Channel:uyuslog,
DCC_Channel:silahlog,
DCC_Channel:tarlalog,
DCC_Channel:araclog,
DCC_Channel:notlog,
DCC_Channel:komutkullan,
DCC_Channel:jaillog,
DCC_Channel:banlog,
DCC_Channel:girlog,
DCC_Channel:ciklog;


new g_Paused[MAX_PLAYERS];
new bool:g_Requesting[MAX_PLAYERS];
new bool:g_IsPaused[MAX_PLAYERS];
new PlayerBar:ciftlikprog[MAX_PLAYERS];
new Float:Doluluk[MAX_PLAYERS];
new ciftlikUpdater[MAX_PLAYERS];
new PlayerBar:bicimprog[MAX_PLAYERS];
new Text:tarim[9],PlayerText:tarim9[MAX_PLAYERS];
new Text:ciftlik_0,Text:ciftlik_1;
new PlayerText:bolge_1[MAX_PLAYERS];

// race tds
new PlayerText:yaristd_0[MAX_PLAYERS];
new PlayerText:yaristd_1[MAX_PLAYERS];
new PlayerText:yaristd_2[MAX_PLAYERS];
new PlayerText:yaristd_3[MAX_PLAYERS];
new PlayerText:yaristd_5[MAX_PLAYERS];
new PlayerText:yaristd_6[MAX_PLAYERS];
new PlayerText:yaristd_7[MAX_PLAYERS];
//
new InfoTimerVar[MAX_PLAYERS];
new Text:TD_AD_HeadBox;
new Text:TD_AD_BoxThree;
new PlayerText:TD_AD_TaxesValue[MAX_PLAYERS];
new PlayerText:TD_AD_Taxes[MAX_PLAYERS];
new PlayerText:TD_AD_PriceValue[MAX_PLAYERS];
new PlayerText:TD_AD_Price[MAX_PLAYERS];
new PlayerText:TD_Mid_Info[MAX_PLAYERS];
new PlayerText:TD_AD_SellerValue[MAX_PLAYERS];
new PlayerText:TD_AD_HousenumberStreet[MAX_PLAYERS];
new PlayerText:TD_AD_CityZip[MAX_PLAYERS];
new PlayerText:TD_AD_Headline[MAX_PLAYERS];
new Text:TD_AD_Seller;
new Text:DashCam[2],
PlayerText:pDashCam[MAX_PLAYERS];
new gDashCam[MAX_PLAYERS char];
new gDashCamAuto[MAX_PLAYERS char];
new gDashCamCheck[MAX_PLAYERS];
new PlayerText:characterSelect[MAX_PLAYERS][29];
new Text:bilet_0,Text:bilet_2;
new PlayerText:bilet_1[MAX_PLAYERS];
new ReklamTimer[MAX_REKLAM], KonusmaTimer[MAX_PLAYERS];
//new Text3D:pdrozet[MAX_PLAYERS];
new bool:SprunkKullanim[MAX_PLAYERS] = false;
new SonPM[MAX_PLAYERS];
new oyuncugiris[MAX_PLAYERS];
new Iterator: Gateler<MAX_GATE>;
new Iterator: Koguslar<MAX_KOGUS>;
new Iterator: FlasorArac<MAX_VEHICLES>;
new Iterator: Teleportlar<MAX_TNOKTA>;
new GateAraTimer[MAX_PLAYERS], renkDeger[MAX_PLAYERS];
new PlayerText:GateTextdraw[MAX_PLAYERS];
new GateDuzenliyorum[MAX_PLAYERS];
new KogusDuzenliyorum[MAX_PLAYERS];
enum tdRenk{hexKod[7]};
new bool:EhliyetCheckpoint_Son[MAX_PLAYERS] = false;
new TextdrawRenkleri[][tdRenk] = {{"8CF292"},{"9BE3E1"},{"ACD2AE"},{"D0F18D"},{"FED681"},{"E8A797"}};
//new SERVER_DOWNLOAD[] = "";
new SERVER_YUZDE = 50;
new VIP_YUZDE = 60;
new MESLEK_PAKET_YUZDE = 30;
new GISEKAPALI = 0;
new bool:GodMode[MAX_PLAYERS];

new sonkomut[MAX_PLAYERS];

new MDC_Bolo[MAX_PLAYERS][128];
new pdpc_sayfa[MAX_PLAYERS];
new SicilIsim_Cek[MAX_PLAYERS][MAX_PLAYER_NAME];
new MDC_GenelID[MAX_PLAYERS];
new PlayerText:MDC[48][MAX_PLAYERS];
new bool:MDC_Ekrani[MAX_PLAYERS];
new bool:MDC_IsimAranan[MAX_PLAYERS];
new MDC_IsimCeza[MAX_PLAYERS];
new MDC_PlakaCeza[MAX_PLAYERS];
new VCPD_KontrolStr[MAX_PLAYERS][MAX_PLAYER_NAME];

enum yetkiliidleri
{
yetkiliforumidsi,
yetkiliadi[32]
};
new YetkiliForumIDleri[][yetkiliidleri] = {
{1, "Manifesto"},{2, "Allen"},{3, "Celsius"},{6, "Flaviano"}
};

enum gData
{
	gateObje,
	gateObjeModel,
	gateInterior,
	gateVirtual,
	Float:gateAcikPos[6],
	Float:gateKapaliPos[6],
	gateSifre[256],
	Float:gateHiz,
	Float:gateUzaklik,
	bool:gateDurum,
	gateBirlik,
	gateSahip[MAX_PLAYER_NAME],
};
new gateData[MAX_GATE][gData];

enum KogusData
{
	kogusObje,
	kogusObjeModel,
	kogusInt,
	kogusVw,
	Float:kogusAcikPos[6],
	Float:kogusKapaliPos[6],
	Float:kogusUzaklik,
	bool:kogusDurum
};
new kogusData[MAX_KOGUS][KogusData];

new Float:RandomSPAWN[][4] =
{
	{1122.6987,-1462.4443,15.7969,357.8114},
	{1122.8516,-1455.3602,15.7969,357.8114},
	{1128.4946,-1455.0140,15.7969,357.8114},
	{1135.0988,-1454.9589,15.7969,357.8114},
	{1134.8446,-1460.0157,15.7969,177.8114},
	{1130.1179,-1460.4452,15.7969,86.7989},
	{1129.8384,-1449.0586,15.7969,358.7515},
	{1123.3682,-1448.1145,15.7969,358.7515},
	{1135.5027,-1446.7087,15.7969,304.7514}
};

enum weaponSettings
{
    Float:Position[6],
    Bone,
    Hidden
}
new WeaponSettings[MAX_PLAYERS][17][weaponSettings], WeaponTick[MAX_PLAYERS], EditingWeapon[MAX_PLAYERS];

enum yanginBilgi
{
	yanginobjesi[20],
	yanginsonmesi[20]
};
new yanginData[MAX_YANGIN][yanginBilgi];

enum teleportBilgi
{
	telID,
	telIsim[64],
	Float:telX,
	Float:telY,
	Float:telZ,
	Float:teldestX,
	Float:teldestY,
	Float:teldestZ,
	telVW,
	telInt,
	teldestVW,
	teldestInt
	//telPickup,
	//teldestPickup,
	//Text3D:telLabel,
	//Text3D:teldestLabel
};
new TeleportData[MAX_TNOKTA][teleportBilgi];

enum birlikamaccek
{
	amac_Tur[32],
	amac_Fiyat,
	amac_Level,
};

new BirlikAmaclari[][birlikamaccek] =
{
	{"Ýptal",       0,      0},
	{"Mafya", 		4000, 	5},
	{"Çete", 		3000, 	3},
	{"Þirket", 		4000, 	5},
	{"Legal", 		4000, 	3},
	{"Yarýþçý", 	3000, 	3}
};

enum ekipBilgi
{
	bool:ekipkullanimda,
	ekipkodu,
	ekipuyesibir[32],
	ekipuyesiiki[32]
};
new EkipBilgi[MAX_EKIP][ekipBilgi];

enum otelposint{Float:otelIntPOS[3], otelInterior};
new otelInt[][otelposint] =
{
	{{2259.5586,-1135.8401,1050.6328}, 10},	// 	1	yldz
	{{1843.4723,-2361.0505,2486.6169}, 10},	//  2	yldz
	{{721.6851,-1428.1256,1201.3190}, 10},	//  3	yldz
	{{721.6851,-1428.1256,1201.3190}, 10},	//  4	yldz
	{{296.5466,-1559.5627,71.4489}, 10}	//  5	yldz
};

enum rspenums
{
	rspSahip[MAX_PLAYER_NAME],
	Float:rspPos[3],
	rspKasa,
	Text3D:rspLabel,
	rspYildiz,
};
new resepsData[MAX_RESEPSIYON][rspenums];

enum otelodalari
{
	Float:oda_Pos[3],
	oda_Sahip[MAX_PLAYER_NAME],
	oda_Sure,
	oda_Fiyat,
	oda_Resepsiyon,
	Text3D:oda_Label,
	oda_Pickup,
	oda_disVW,
	oda_disInt,
	bool:oda_Kilit,
};
new otelOda[MAX_OTEL_ODA][otelodalari];

enum aksListeDataa{aksAD[32], aksHex, aksRenk};
new aksRenkListesi[][aksListeDataa] =
{
	{"Kýrmýzý", -65536, 0xFF0000FF},
	{"Koyu Kýrmýzý", -6029312, 0xA40000FF},
	{"Yeþil", -16711936, 0x80FF00FF},
	{"Koyu Yeþil", -16734720, 0x00A600FF},
	{"Pembe", -32513, 0xFF80FFFF},
	{"Turkuaz", -8323073, 0x80FFFFFF},
	{"Turuncu", -32768, 0xFF8000FF},
	{"Lacivert", -16744193, 0x0080FFFF},
	{"Mor", -8355585, 0x8080FFFF},
	{"Fuþya", -65408, 0xFF0080FF},
	{"Bej", -8722, 0xFFDDEEFF},
	{"Sarý", -256, 0xFFFF00FF},
	{"Koyu Sarý", -1384960, 0xEADE00FF},
	{"Gri", -4144960, 0xC0C0C0FF},
	{"Mavi", -9777153, 0x6ACFFFFF},
	{"Siyah", -16777216, 0x000000FF},
	{"Renk Sýfýrla", -1, 0xFFFFFFFF}
};

enum slhDatalar{slhSarjorTuru[32], slhModelID, slhIsim[128], slhFiyat, slhSaat, slhSarjorFiyat, slhSarjor, slhBilgisi[32], slhKapora};
new silahTCData[][slhDatalar] =
{
	//tür            modelid     modeladi            //fiyat     //saat      //þarjor fiyat      //mermi adet        //bilgi                    //kapora
	{"þarjor",       28,         "Mac-10",     	   	  18500,         22,        700,                 50,                 "çapsýz",				3000},
	{"kutu",         25,         "Shotgun",           18000,         24,        800,                 15,                 "aðýr",				4000},
	{"þarjor",       22,         "Pistol",            17500,         20,        750,                 17,                 "minik",				3000}
};

new mermiTCData[][slhDatalar] =
{
	//tür            modelid     modeladi            //fiyat     //saat      //þarjor fiyat      //mermi adet        //bilgi                    //kapora
	{"þarjor",       28,         "Mac-10",     	   	  18500,         22,        700,                 50,                 "çapsýz",				3000},
	{"kutu",         25,         "Shotgun",           18000,         24,        800,                 15,                 "aðýr",				4000},
	{"þarjor",       22,         "Pistol",            17500,         20,        750,                 17,                 "minik",				3000},
	{"þarjor",       24,         "Desert Eagle",      18500,         22,        800,                 30,                 "çapsýz",				3000},
	{"þarjor",       30,         "AK-47",      		  18500,         22,        900,                 120,                 "çapsýz",				3000}
};

enum pompData{Float:pompX,Float:pompY,Float:pompZ};
new PompaVeri[][pompData] =
{
	{-85.2422, -1165.0312, 2.6328},
	{-90.1406, -1176.6250, 2.6328},
	{-92.1016, -1161.7891, 2.9609},
	{-97.0703, -1173.7500, 3.0312},
	{1941.6562, -1767.2891, 14.1406},
	{1941.6562, -1771.3438, 14.1406},
	{1941.6562, -1774.3125, 14.1406},
	{1941.6562, -1778.4531, 14.1406},
	{-1327.0312, 2685.5938, 49.4531},
	{-1327.7969, 2680.1250, 49.4531},
	{-1328.5859, 2674.7109, 49.4531},
	{-1329.2031, 2669.2812, 49.4531},
	{-1464.9375, 1860.5625, 31.8203},
	{-1465.4766, 1868.2734, 31.8203},
	{-1477.6562, 1859.7344, 31.8203},
	{-1477.8516, 1867.3125, 31.8203},
	{-1600.6719, -2707.8047, 47.9297},
	{-1603.9922, -2712.2031, 47.9297},
	{-1607.3047, -2716.6016, 47.9297},
	{-1610.6172, -2721.0000, 47.9297},
	{-1665.5234, 416.9141, 6.3828},
	{-1669.9062, 412.5312, 6.3828},
	{-1672.1328, 423.5000, 6.3828},
	{-1675.2188, 407.1953, 6.3828},
	{-1676.5156, 419.1172, 6.3828},
	{-1679.3594, 403.0547, 6.3828},
	{-1681.8281, 413.7812, 6.3828},
	{-1685.9688, 409.6406, 6.3828},
	{-2241.7188, -2562.2891, 31.0625},
	{-2246.7031, -2559.7109, 31.0625},
	{-2410.8047, 970.8516, 44.4844},
	{-2410.8047, 976.1875, 44.4844},
	{-2410.8047, 981.5234, 44.4844},
	{1378.9609, 461.0391, 19.3281},
	{1380.6328, 460.2734, 19.3281},
	{1383.3984, 459.0703, 19.3281},
	{1385.0781, 458.2969, 19.3281},
	{603.4844, 1707.2344, 6.1797},
	{606.8984, 1702.2188, 6.1797},
	{610.2500, 1697.2656, 6.1797},
	{613.7188, 1692.2656, 6.1797},
	{617.1250, 1687.4531, 6.1797},
	{620.5312, 1682.4609, 6.1797},
	{624.0469, 1677.6016, 6.1797},
	{655.6641, -558.9297, 15.3594},
	{655.6641, -560.5469, 15.3594},
	{655.6641, -569.6016, 15.3594},
	{655.6641, -571.2109, 15.3594},
	{1590.3516, 2193.7109, 11.3125},
	{1590.3516, 2204.5000, 11.3125},
	{1596.1328, 2193.7109, 11.3125},
	{1596.1328, 2204.5000, 11.3125},
	{1602.0000, 2193.7109, 11.3125},
	{1602.0000, 2204.5000, 11.3125},
	{2109.0469, 914.7188, 11.2578},
	{2109.0469, 925.5078, 11.2578},
	{2114.9062, 914.7188, 11.2578},
	{2114.9062, 925.5078, 11.2578},
	{2120.8203, 914.7188, 11.2578},
	{2120.8203, 925.5078, 11.2578},
	{2141.6719, 2742.5234, 11.2734},
	{2141.6719, 2753.3203, 11.2734},
	{2147.5312, 2742.5234, 11.2734},
	{2147.5312, 2753.3203, 11.2734},
	{2153.3125, 2742.5234, 11.2734},
	{2153.3125, 2753.3203, 11.2734},
	{2196.8984, 2470.2500, 11.3125},
	{2196.8984, 2474.6875, 11.3125},
	{2196.8984, 2480.3281, 11.3125},
	{2207.6953, 2470.2500, 11.3125},
	{2207.6953, 2474.6875, 11.3125},
	{2207.6953, 2480.3281, 11.3125},
	{2634.6406, 1100.9453, 11.2500},
	{2634.6406, 1111.7500, 11.2500},
	{2639.8750, 1100.9609, 11.2500},
	{2639.8750, 1111.7500, 11.2500},
	{2645.2500, 1100.9609, 11.2500},
	{2645.2500, 1111.7500, 11.2500},
	{1008.4636,-937.1434,42.1797},
	{1005.8984,-937.5206,42.1797},
	{1002.0781,-938.0656,42.1797},
	{999.1211,-938.5269,42.1797},
	{1581.9663,100.6710,38.0858},
	{1574.8102,101.1339,38.1716},
	{168.0307,-2095.9326,-0.5887}
	
	
	
};

enum matLISTESI {
	modelID,
	TxdIsim[42],
	TextureIsim[42],
	Isim[42]
};

new MateryalIDleri[122][matLISTESI] = {
// {ID, txd, texture, isim},
	{0,"none","none", "Varsayýlan"},

	{4242,"seabed","des_dirt1", "Kum"},

	{3942, "bistro", "mp_snow", "Kar"},

	{3942, "bistro", "ahoodfence2", "Kaldýrým taþý"},

	{3908, "libertyfar", "Grass_128HV", "Çim"},

	{3903, "libertyhi", "Grass", "Çim 2"},

	{3953, "rczero_track", "waterclear256", "Temiz su"},

	{3933, "weemap", "rocktb128", "Gri kayalýklar"},

	{4242, "seabed", "des_dirt1", "Kirli kum"},

	{4242, "seabed", "sw_sand", "Kirli kum 2"},

	{16008, "des_n", "des_ripplsand", "Çöl tepeleri (Sahara)"},

	{13734, "hillcliff_lahills", "cobbles_kb_256", "Kaldýrým taþý 2 (LS deniz feneri)"},

	{16503, "desert", "des_redrock1", "Kýrmýzý kayalar (çöldeki)"},

	{16407, "des_airfieldhus", "btdeck256", "Tahta zemin (daha açýk)"},

	{16102, "des_cen", "sm_conc_hatch", "Sarý çizgiler (zeminde)"},

	{16021, "des_geyser", "shingles1", "Koyu gri renkte çatý"},

	{16016, "des_n", "ranchwall1", "Taþ dekorlu duvar (güzel görünüyor)"},

	{16571, "des_se1", "des_crackeddirt1", "Çatlamýþ zemin"},

	{18752, "Volcano","rocktb128", "Gri kayalar"},

	{18752, "Volcano","lavalake", "Lav"},

	{18752, "Volcano","redgravel", "Lavýn altýndaki zemin"},

	{16503, "desert","des_redrock1", "Kýzýl kayalar (çöldeki)"},

	{16407, "des_airfieldhus","btdeck256", "Tahta zemin 2 (daha açýk)"},

	{16102, "des_cen","sm_conc_hatch", "Sarý çizgiler (zeminde)"},

	{16021, "des_geyser","shingles1", "Koyu gri renkte çatý"},

	{16016, "des_n","ranchwall1", "Taþ dekorlu duvar (güzel görünüyor)"},

	{16571, "des_se1","des_crackeddirt1", "Çatlamýþ zemin"},

	{19128, "dancefloors","dancefloor1", "Dans zemini"},

	{2068, "cj_ammo_net","CJ_cammonet", "Kamuflaj"},

	{18646, "matcolours","white", "Beyaz"},

	{18646, "matcolours","red", "Kýrmýzý"},

	{18646, "matcolours", "blue", "Mavi"},

	{18646, "matcolours","orange", "Turuncu"},

	{18646, "matcolours","green", "Yeþil"},

	{964, "cj_crate_will","CJ_FLIGHT_CASE", "Metal plaka"},

	{967, "cj_barr_set_1","Stop2_64", "Dur tabelasý"},

	{7981, "vgsairport02","chevronYB_64", "Siyah-Sarý çizgiler"},

	{7981, "vgsairport02","redwhite_stripe", "Kýrmýzý-Beyaz çizgiler"},

	{7980, "vegasairprtland","gridchev_64HV", "Siyah-Sarý að"},

	{7980, "vegasairprtland","chevron64HVa", "Sarý-Beyaz çizgiler"},

	{6866, "vgncnstrct1","Circus_gls_05", "Kýrmýzý dikdörtgenler"},

	{1281, "benches","trafficcone", "Kýrmýzý-Beyaz çizgiler"},

	{6295, "lawland2","lightglass", "Büyük hasýr cam"},

	{6295, "lawland2","boardwalk2_la", "Tahta"},

	{12938, "sw_apartments","sw_policeline", "Polis çizgisi"},

	{16004, "des_teepee","des_wigwam", "Wigwam Otel - Duvar"},

	{16004, "des_teepee","des_wigwamdoor", "Wigwam Otel - Kapý"},

	{16004, "des_teepee","des_dustconc", "Tozlu beton"},

	{16005, "des_stownmain2","sanruf", "Gri çatý"},

	{16005, "des_stownmain2","des_redslats", "Kýrmýzý tahta"},

	{16005, "des_stownmain2","duskyred_64", "Açýk mor"},

	{16005, "des_stownmain2","des_ghotwood1", "Eski tahtalar"},

	{16005, "des_stownmain2","ws_green_wall1", "Duvar 1 (Yeþil)"},

	{16005, "des_stownmain2","alleydoor3", "Kapý 1 (Mavi)"},

	{16005, "des_stownmain2","newall4-4", "Duvar 2 (Normal)"},

	{16005, "vdes_stownmain2","crencouwall1", "Duvar 3 (Normal)"},

	{16005, "des_stownmain2", "black32", "Siyah renk"},

	{5016, "ground3_las", "ws_bigstones", "Cynder Bloklarý"},

	{5016, "ground3_las", "mural01_LA", "Jesus Saves"},

	{5033, "union_las", "lasunion98", "Camlý beyaz duvar"},

	{5033, "union_las", "ws_carparkwall2", "Sarý+Gri çapraz çizgiler"},

	{14526, "sweetsmain", "ab_kitchunit2", "Beyaz panel"},

	{14526, "sweetsmain", "GB_Pan01", "Restaurant duvarý"},

	{14444, "carter_block_2", "cd_wall1", "Siyah gece kulübü duvarý"},

	{14593, "papaerchaseoffice", "ab_hosWallUpr", "Beyaz duvar"},

	{15046, "svcunthoose", "sl_gallerywall1", "Beyaz kareli duvar/zemin"},

	{14383, "burg_1", "hospital_wall2", "Hastane duvarý"},

	{15058, "svvgmid", "ah_wpaper3", "Çiçekli duvar kaðýdý"},

	{14533, "pleas_dome", "ab_velvor", "Siyah gece kulübü zemini"},

	{14526, "sweetsmain", "ab_tile1", "Zemin fayansý"},

	{4011, "lanblokb", "sl_rotnbrik", "Kýrmýzý tuðla"},

	{12931, "sw_brewery", "sw_brewbrick01", "Gri tuðla"},

	{12951, "ce_bankalley2", "sw_brick04", "Beyaz tuðla"},

	{18282, "cw_truckstopcs_t", "cw2_logwall", "Tahta duvar"},

	{16475, "des_stownmots1", "des_redslats", "Kýrmýzý tahta"},

	{4014, "civic01_lan", "parking1plain", "Sade gri beton"},

	{10945, "skyscrap_sfse", "ws_carparkwall1", "Çizgili gri duvar"},

	{10086, "slapart01sfe", "sl_hirisergrnconc", "Yeþil duvar"},

	{7417, "vgnbball", "vgngewall1_256", "Gri tavan"},

	{8136, "vgsbikeschool", "ws_carparknew2", "Siyah perde"},

	{14672, "genintintsex", "la_carp3", "Beyaz perde"},

	{14847, "mp_policesf", "mp_cop_carpet", "Mavi perde"},

	{14707, "labig3int2", "HS2_3Wall9", "Kýrmýzý perde"},

	{16475, "des_stownmots1", "des_motelwall3", "Topraktan duvar"},

	{14771, "int_brothelint3", "GB_nastybar12", "Tahta duvar"},

	{14777, "int_casinoint3", "GB_midbar05", "Tahta zemin deseni"},

	{14709, "lamidint2", "mp_apt1_roomfloor", "Kýrmýzý tahta zemin"},

	{14789, "ab_sfgymmain", "gym_floor6", "Koyu tahta zemin"},

	{14709, "lamidint2", "mp_apt1_bathfloor1", "Tuvalet fayansý"},

	{14847, "mp_policesf", "mp_cop_marble", "Seramik mermer"},

	{18023, "genintintfastc", "CJ_PIZZA_WALL", "Pizza restaurant duvarý"},

	{14708, "labig1int2", "GB_restaursmll32", "Panolu kýrmýzý duvar"},

	{14709, "lamidint2", "mp_apt1_woodpanel", "Panolu beyaz duvar"},

	{18029, "genintintsmallrest", "GB_restaursmll05", "Taþ duvar"},

	{14417, "dr_gsnew", "mp_gs_libwall", "Panolu koyu kahverengi duvar"},

	{14789, "ab_sfgymmain", "ab_wood02", "Koyu gri tahta duvar"},

	{14847, "mp_policesf", "mp_cop_ceiling", "Beyaz seramik"},

	{14417, "dr_gsnew", "mp_cloth_subwall", "Açýk mavi duvar"},

	{14444, "carter_block_2", "mp_carter_smoothwall", "Kirli beyaz duvar"},

	{14444, "carter_block_2", "mp_carter_ceiling", "Kirli koyu gri duvar"},

	{15031, "lasmallsave", "ab_marble_checks", "Kareli zemin"},

	{10826, "subpen1_sfse", "ws_sub_pen_conc3", "Kirli yeþil duvar"},

	{18030, "gap", "mp_furn_floor", "Açýk tahta zemin"},

	{4014, "civic01_lan", "sl_laglasswall2", "Cam/Mavi fayans"},

	{18018, "genintintbarb", "GB_midbar07", "Panolu yeþil duvar"},

	{15042, "svsfsm", "GB_rapposter01", "Base5 Gangster posteri"},

	{15042, "svsfsm", "GB_rapposter03", "Base5 Gangster posteri2"},

	{14803, "bdupsnew", "Bdup2_wallpaperC", "Turuncu duvar"},

	{1823, "cj_tables", "CJ_WOOD6", "Tahta materyal"},

	{1775, "cj_commercial", "cj_sheetmetal2", "Metal"},

	{1726, "mrk_couches2", "kb_sofa5_256", "Koltuk materyali"},

	{4833, "airprtrunway_las", "ws_bluelino", "Mavi muþamba"},

	{4833, "airprtrunway_las", "greyground256", "Gri zemin"},

	{3440, "airportpillar", "metalic_64", "Metalik(64)"},

	{14652, "ab_trukstpa", "wood01", "Tahta(01)"},

	{16646, "a51_alpha", "waterdirty256", "Kirli su"},

	{16640, "a51", "wallgreyred128", "Duvar(gri-kýrmýzý)"},

	{14534, "ab_wooziea", "ab_tileDiamond", "Elmas Zemin"},

	{3925, "weemap", "skyclouds", "Bulut"},

	{19893, "LaptopSAMP1", "LaptopScreen1", "Laptop (LS Haritasý)"},

	{19893, "LaptopSAMP1", "LaptopScreen2", "Laptop (Konsol)"},

	{19893, "LaptopSAMP1", "LaptopScreen3", "Laptop (Polis)"}

};

enum mverienum {
	mobilyaTur,
	mobilyaID,
	mobilyaModel,
	mobilyaIsim[36],
	mobilyaFiyat
}

#define MOBILYA_TUR_DUVAR           (0)
#define MOBILYA_TUR_MOBILYALAR		(1)
#define MOBILYA_TUR_HOUSEHOLDITEMLERI	(2)
#define MOBILYA_TUR_DEKORATIF       (3)
#define MOBILYA_TUR_DEKORATIF_IKI	(4)
#define MOBILYA_TUR_BARITEMLERI 	(5)
#define MOBILYA_TUR_KAPILARVEPENCERELER 	(6)
#define MOBILYA_TUR_KIYAFETLER		(7)
#define MOBILYA_TUR_SHOPITEMLERI 	(8)
#define MOBILYA_TUR_CASINOITEMLERI	(9)
#define MOBILYA_TUR_MASAVESANDALYE	(10)
#define MOBILYA_TUR_VARILVEKOLILER 	(11)
#define MOBILYA_TUR_ARACOBJELERI	(12)
#define MOBILYA_TUR_OZEL			(13)
#define MOBILYA_TUR_YIYECEKVEICECEK	(14)
#define MOBILYA_TUR_AYDINLATMA		(15)
#define MOBILYA_TUR_VIP				(16)

new mobilyaveri[][mverienum] = {
	// duvar
	{MOBILYA_TUR_DUVAR, 0, 9131, "Kolon", 100},
	{MOBILYA_TUR_DUVAR, 1, 8175, "Beyazýmsý Duvar", 200},
	{MOBILYA_TUR_DUVAR, 2, 19426, "Küçük Duvar 1", 110},
	{MOBILYA_TUR_DUVAR, 3, 19427, "Küçük Duvar 2", 110},
	{MOBILYA_TUR_DUVAR, 4, 19428, "Küçük Duvar 3", 110},
	{MOBILYA_TUR_DUVAR, 5, 19429, "Küçük Duvar 4", 110},
	{MOBILYA_TUR_DUVAR, 6, 19430, "Küçük Duvar 5", 110},
	{MOBILYA_TUR_DUVAR, 7, 19431, "Küçük Duvar 6", 110},
	{MOBILYA_TUR_DUVAR, 8, 19432, "Küçük Duvar 7", 110},
	{MOBILYA_TUR_DUVAR, 9, 19433, "Küçük Duvar 8", 110},
	{MOBILYA_TUR_DUVAR, 10, 19434, "Küçük Duvar 9", 110},
	{MOBILYA_TUR_DUVAR, 11, 19435, "Küçük Duvar 10", 110},
	{MOBILYA_TUR_DUVAR, 12, 19436, "Küçük Duvar 11", 110},
	{MOBILYA_TUR_DUVAR, 13, 19437, "Küçük Duvar 12", 110},
	{MOBILYA_TUR_DUVAR, 14, 19438, "Küçük Duvar 13", 110},
	{MOBILYA_TUR_DUVAR, 15, 19439, "Küçük Duvar 14", 110},
	{MOBILYA_TUR_DUVAR, 16, 19440, "Küçük Duvar 15", 110},
	{MOBILYA_TUR_DUVAR, 17, 19441, "Küçük Duvar 16", 110},
	{MOBILYA_TUR_DUVAR, 18, 19442, "Küçük Duvar 17", 110},
	{MOBILYA_TUR_DUVAR, 19, 19443, "Küçük Duvar 18", 110},
	{MOBILYA_TUR_DUVAR, 20, 19444, "Küçük Duvar 19", 110},
	{MOBILYA_TUR_DUVAR, 21, 19353, "Orta Duvar 1", 155},
	{MOBILYA_TUR_DUVAR, 22, 19354, "Orta Duvar 2", 155},
	{MOBILYA_TUR_DUVAR, 23, 19355, "Orta Duvar 3", 155},
	{MOBILYA_TUR_DUVAR, 24, 19356, "Orta Duvar 4", 155},
	{MOBILYA_TUR_DUVAR, 25, 19357, "Orta Duvar 5", 155},
	{MOBILYA_TUR_DUVAR, 26, 19358, "Orta Duvar 6", 155},
	{MOBILYA_TUR_DUVAR, 27, 19359, "Orta Duvar 7", 155},
	{MOBILYA_TUR_DUVAR, 28, 19360, "Orta Duvar 8", 155},
	{MOBILYA_TUR_DUVAR, 29, 19361, "Orta Duvar 9", 155},
	{MOBILYA_TUR_DUVAR, 30, 19362, "Orta Duvar 10", 155},
	{MOBILYA_TUR_DUVAR, 31, 19363, "Orta Duvar 11", 155},
	{MOBILYA_TUR_DUVAR, 32, 19364, "Orta Duvar 12", 155},
	{MOBILYA_TUR_DUVAR, 33, 19365, "Orta Duvar 13", 155},
	{MOBILYA_TUR_DUVAR, 34, 19366, "Orta Duvar 14", 155},
	{MOBILYA_TUR_DUVAR, 35, 19367, "Orta Duvar 15", 155},
	{MOBILYA_TUR_DUVAR, 36, 19368, "Orta Duvar 16", 155},
	{MOBILYA_TUR_DUVAR, 37, 19369, "Orta Duvar 17", 155},
	{MOBILYA_TUR_DUVAR, 38, 19379, "Orta Duvar 18", 155},
	{MOBILYA_TUR_DUVAR, 39, 19371, "Orta Duvar 19", 155},
	{MOBILYA_TUR_DUVAR, 40, 19372, "Orta Duvar 20", 155},
	{MOBILYA_TUR_DUVAR, 41, 19373, "Orta Duvar 21", 155},
	{MOBILYA_TUR_DUVAR, 42, 19445, "Büyük Duvar 1", 202},
	{MOBILYA_TUR_DUVAR, 43, 19446, "Büyük Duvar 2", 202},
	{MOBILYA_TUR_DUVAR, 44, 19447, "Büyük Duvar 3", 202},
	{MOBILYA_TUR_DUVAR, 45, 19448, "Büyük Duvar 4", 202},
	{MOBILYA_TUR_DUVAR, 46, 19449, "Büyük Duvar 5", 202},
	{MOBILYA_TUR_DUVAR, 47, 19450, "Büyük Duvar 6", 202},
	{MOBILYA_TUR_DUVAR, 48, 19451, "Büyük Duvar 7", 202},
	{MOBILYA_TUR_DUVAR, 49, 19452, "Büyük Duvar 8", 202},
	{MOBILYA_TUR_DUVAR, 50, 19453, "Büyük Duvar 9", 202},
	{MOBILYA_TUR_DUVAR, 51, 19454, "Büyük Duvar 10", 202},
	{MOBILYA_TUR_DUVAR, 52, 19455, "Büyük Duvar 11", 202},
	{MOBILYA_TUR_DUVAR, 53, 19456, "Büyük Duvar 12", 202},
	{MOBILYA_TUR_DUVAR, 54, 19457, "Büyük Duvar 13", 202},
	{MOBILYA_TUR_DUVAR, 55, 19458, "Büyük Duvar 14", 202},
	{MOBILYA_TUR_DUVAR, 56, 19459, "Büyük Duvar 15", 202},
	{MOBILYA_TUR_DUVAR, 57, 19460, "Büyük Duvar 16", 202},
	{MOBILYA_TUR_DUVAR, 58, 19461, "Büyük Duvar 17", 202},
	{MOBILYA_TUR_DUVAR, 59, 19462, "Büyük Duvar 18", 202},
	{MOBILYA_TUR_DUVAR, 60, 19463, "Büyük Duvar 19", 202},
	{MOBILYA_TUR_DUVAR, 61, 19383, "Kapýlý Duvar 1", 120},
	{MOBILYA_TUR_DUVAR, 62, 19384, "Kapýlý Duvar 2", 120},
	{MOBILYA_TUR_DUVAR, 63, 19385, "Kapýlý Duvar 3", 120},
	{MOBILYA_TUR_DUVAR, 64, 19386, "Kapýlý Duvar 4", 120},
	{MOBILYA_TUR_DUVAR, 65, 19387, "Kapýlý Duvar 5", 120},
	{MOBILYA_TUR_DUVAR, 66, 19388, "Kapýlý Duvar 6", 120},
	{MOBILYA_TUR_DUVAR, 67, 19389, "Kapýlý Duvar 7", 120},
	{MOBILYA_TUR_DUVAR, 68, 19390, "Kapýlý Duvar 8", 120},
	{MOBILYA_TUR_DUVAR, 69, 19391, "Kapýlý Duvar 9", 120},
	{MOBILYA_TUR_DUVAR, 70, 19392, "Kapýlý Duvar 10", 120},
	{MOBILYA_TUR_DUVAR, 71, 19393, "Kapýlý Duvar 11", 120},
	{MOBILYA_TUR_DUVAR, 72, 19394, "Kapýlý Duvar 12", 120},
	{MOBILYA_TUR_DUVAR, 73, 19395, "Kapýlý Duvar 13", 120},
	{MOBILYA_TUR_DUVAR, 74, 19396, "Kapýlý Duvar 14", 120},
	{MOBILYA_TUR_DUVAR, 75, 19397, "Kapýlý Duvar 15", 120},
	{MOBILYA_TUR_DUVAR, 76, 19398, "Kapýlý Duvar 16", 120},
	{MOBILYA_TUR_DUVAR, 77, 19399, "Pencereli Duvar 1", 155},
	{MOBILYA_TUR_DUVAR, 78, 19400, "Pencereli Duvar 2", 155},
	{MOBILYA_TUR_DUVAR, 79, 19401, "Pencereli Duvar 3", 155},
	{MOBILYA_TUR_DUVAR, 80, 19402, "Pencereli Duvar 4", 155},
	{MOBILYA_TUR_DUVAR, 81, 19403, "Pencereli Duvar 5", 155},
	{MOBILYA_TUR_DUVAR, 82, 19404, "Pencereli Duvar 6", 155},
	{MOBILYA_TUR_DUVAR, 83, 19405, "Pencereli Duvar 7", 155},
	{MOBILYA_TUR_DUVAR, 84, 19406, "Pencereli Duvar 8", 155},
	{MOBILYA_TUR_DUVAR, 85, 19407, "Pencereli Duvar 9", 155},
	{MOBILYA_TUR_DUVAR, 86, 19408, "Pencereli Duvar 10", 155},
	{MOBILYA_TUR_DUVAR, 87, 19409, "Pencereli Duvar 11", 155},
	{MOBILYA_TUR_DUVAR, 88, 19410, "Pencereli Duvar 12", 155},
	{MOBILYA_TUR_DUVAR, 89, 19411, "Pencereli Duvar 13", 155},
	{MOBILYA_TUR_DUVAR, 90, 19412, "Pencereli Duvar 14", 155},
	{MOBILYA_TUR_DUVAR, 91, 19413, "Pencereli Duvar 15", 155},
	{MOBILYA_TUR_DUVAR, 92, 19414, "Pencereli Duvar 16", 155},
	{MOBILYA_TUR_DUVAR, 93, 19415, "Pencereli Duvar 17", 155},
	{MOBILYA_TUR_DUVAR, 94, 19416, "Pencereli Duvar 18", 155},
	{MOBILYA_TUR_DUVAR, 95, 11247, "U þeklinde kemer", 100},
	{MOBILYA_TUR_DUVAR, 96, 19381, "Dev Duvar 1", 100},
	{MOBILYA_TUR_DUVAR, 97, 19380, "Dev Duvar 2", 100},
	{MOBILYA_TUR_DUVAR, 98, 19379, "Dev Duvar 3", 155},
	{MOBILYA_TUR_DUVAR, 99, 14877, "Merdiven 1", 300},
	{MOBILYA_TUR_DUVAR, 100, 8615, "Merdiven 2", 300},
	{MOBILYA_TUR_DUVAR, 101, 1472, "Merdiven 3", 300},
	{MOBILYA_TUR_DUVAR, 102, 5820, "Merdiven 4", 500},
	{MOBILYA_TUR_DUVAR, 103, 8613, "Merdiven 5", 700},
	{MOBILYA_TUR_DUVAR, 104, 10244, "Ahþap Merdiven", 800},

	// aydýnlatmalar

	{MOBILYA_TUR_AYDINLATMA, 9, 18647, "Kýrmýzý Iþýk", 50},
	{MOBILYA_TUR_AYDINLATMA, 9, 18648, "Mavi Iþýk", 50},
	{MOBILYA_TUR_AYDINLATMA, 9, 18649, "Yeþil Iþýk", 50},
	{MOBILYA_TUR_AYDINLATMA, 9, 18650, "Sarý Iþýk", 50},
	{MOBILYA_TUR_AYDINLATMA, 9, 18651, "Mor Iþýk", 50},
	{MOBILYA_TUR_AYDINLATMA, 9, 18652, "Kýrmýzý Iþýk", 50},
	{MOBILYA_TUR_AYDINLATMA, 9, 19143, "Spot Sarý Iþýk", 100},
	{MOBILYA_TUR_AYDINLATMA, 9, 19144, "Spot Turuncu Iþýk", 100},
	{MOBILYA_TUR_AYDINLATMA, 9, 19145, "Spot Yeþil Iþýk", 100},
	{MOBILYA_TUR_AYDINLATMA, 9, 19146, "Spot Kýrmýzý Iþýk", 100},
	{MOBILYA_TUR_AYDINLATMA, 9, 19153, "Spot Mor Iþýk", 100},
	{MOBILYA_TUR_AYDINLATMA, 9, 19155, "Spot Pembe Iþýk", 100},
	{MOBILYA_TUR_AYDINLATMA, 9, 19146, "Spot Mavi Iþýk", 100},

	// Yiyecek ve içecekler

	{MOBILYA_TUR_YIYECEKVEICECEK, 9, 2221, "Donut Menü", 30},
	{MOBILYA_TUR_YIYECEKVEICECEK, 9, 2222, "Donut Menü 2", 30},
	{MOBILYA_TUR_YIYECEKVEICECEK, 9, 2223, "Donut Menü 3", 30},
	{MOBILYA_TUR_YIYECEKVEICECEK, 9, 2353, "Saðlýklý Menü", 20},
	{MOBILYA_TUR_YIYECEKVEICECEK, 9, 2354, "Saðlýklý Menü 2", 20},
	{MOBILYA_TUR_YIYECEKVEICECEK, 9, 2355, "Saðlýklý Menü 3", 20},
	{MOBILYA_TUR_YIYECEKVEICECEK, 9, 2453, "Üçlü Pizza", 100},
	{MOBILYA_TUR_YIYECEKVEICECEK, 9, 2702, "Pizza Dilimi", 5},
	{MOBILYA_TUR_YIYECEKVEICECEK, 9, 2703, "Hamburger", 8},
	{MOBILYA_TUR_YIYECEKVEICECEK, 9, 2768, "Paketlenmiþ Hamburger", 10},
	{MOBILYA_TUR_YIYECEKVEICECEK, 9, 2769, "Dürüm", 10},
	{MOBILYA_TUR_YIYECEKVEICECEK, 9, 2814, "Pizza Kutusu", 20},
	{MOBILYA_TUR_YIYECEKVEICECEK, 9, 2821, "Mýsýr Gevreði", 10},
	{MOBILYA_TUR_YIYECEKVEICECEK, 9, 2838, "Yarým Pizzalar", 12},
	{MOBILYA_TUR_YIYECEKVEICECEK, 9, 2840, "Yenilmiþ Burger Kutularý", 5},
	{MOBILYA_TUR_YIYECEKVEICECEK, 9, 2839, "Yenilmiþ Patates Kutularý", 12},
	{MOBILYA_TUR_YIYECEKVEICECEK, 9, 2647, "Gazoz Bardaðý", 6},
	{MOBILYA_TUR_YIYECEKVEICECEK, 9, 2663, "Paketlenmiþ Yiyecek", 15},
	{MOBILYA_TUR_YIYECEKVEICECEK, 9, 11722, "Ketçap", 5},
	{MOBILYA_TUR_YIYECEKVEICECEK, 9, 11723, "Hardal", 5},
	{MOBILYA_TUR_YIYECEKVEICECEK, 9, 11739, "Pasta", 10},
	{MOBILYA_TUR_YIYECEKVEICECEK, 9, 11740, "Pasta 2", 10},
	{MOBILYA_TUR_YIYECEKVEICECEK, 9, 11741, "Pasta 3", 10},
	{MOBILYA_TUR_YIYECEKVEICECEK, 9, 11742, "Dilim Pasta", 10},
	{MOBILYA_TUR_YIYECEKVEICECEK, 9, 19525, "Düðün Pastasý", 50},
	{MOBILYA_TUR_YIYECEKVEICECEK, 9, 19561, "Mýsýr Gevreði", 10},
	{MOBILYA_TUR_YIYECEKVEICECEK, 9, 19563, "Portakal Suyu", 10},
	{MOBILYA_TUR_YIYECEKVEICECEK, 9, 19564, "Elma Suyu", 10},
	{MOBILYA_TUR_YIYECEKVEICECEK, 9, 19567, "Dondurma Kutusu", 10},
	{MOBILYA_TUR_YIYECEKVEICECEK, 9, 19568, "Dondurma Kutusu 2", 10},
	{MOBILYA_TUR_YIYECEKVEICECEK, 9, 19569, "Paket Süt", 10},
	{MOBILYA_TUR_YIYECEKVEICECEK, 9, 19570, "Þiþe Süt", 10},
	{MOBILYA_TUR_YIYECEKVEICECEK, 9, 19572, "Alkol Kutusu", 50},
	{MOBILYA_TUR_YIYECEKVEICECEK, 9, 19573, "Paket Kömür", 20},
	{MOBILYA_TUR_YIYECEKVEICECEK, 9, 19574, "Portakal", 3},
	{MOBILYA_TUR_YIYECEKVEICECEK, 9, 19575, "Kýrmýzý Elma", 3},
	{MOBILYA_TUR_YIYECEKVEICECEK, 9, 19576, "Yeþil Elma", 3},
	{MOBILYA_TUR_YIYECEKVEICECEK, 9, 19578, "Muz", 3},
	{MOBILYA_TUR_YIYECEKVEICECEK, 9, 19579, "Ekmek", 5},
	{MOBILYA_TUR_YIYECEKVEICECEK, 9, 19580, "Pizza", 7},
	{MOBILYA_TUR_YIYECEKVEICECEK, 9, 19582, "Çið Biftek", 5},
	{MOBILYA_TUR_YIYECEKVEICECEK, 9, 19885, "Kahve", 10},
	{MOBILYA_TUR_YIYECEKVEICECEK, 9, 19847, "But", 5},
	{MOBILYA_TUR_YIYECEKVEICECEK, 9, 19883, "Ekmek Dilimi", 3},

	// VIP objeleri

	{MOBILYA_TUR_VIP, 9, 18728, "Meþale Kirmizi", 250},
	{MOBILYA_TUR_VIP, 9, 18738, "Fiskiye su", 150},
	{MOBILYA_TUR_VIP, 9, 18740, "Fiskiye", 250},
	{MOBILYA_TUR_VIP, 9, 18688, "Ateþ", 150},
	{MOBILYA_TUR_VIP, 9, 1977, "Makina", 150},
	{MOBILYA_TUR_VIP, 9, 2034, "Eskimis Silah", 50},
	{MOBILYA_TUR_VIP, 9, 2035, "Assault Rifle", 150},
	{MOBILYA_TUR_VIP, 9, 2036, "Sniper", 200},
	{MOBILYA_TUR_VIP, 9, 2044, "Hafif makine", 150},
	{MOBILYA_TUR_VIP, 9, 2045, "Demirli sopa", 50},
	{MOBILYA_TUR_VIP, 9, 1581, "ID kart", 50},
	{MOBILYA_TUR_VIP, 9, 2061, "2 7.62", 50},
	{MOBILYA_TUR_VIP, 9, 2710, "Rolex", 250},
	{MOBILYA_TUR_VIP, 9, 2769, "Durum acili", 5},
	{MOBILYA_TUR_VIP, 9, 2886, "Sifre sistemi", 150},
	{MOBILYA_TUR_VIP, 9, 3092, "Polis cesedi", 400},
	{MOBILYA_TUR_VIP, 9, 3524, "Alevli kuru kafa", 150},
	{MOBILYA_TUR_VIP, 9, 3525, "Mesalee", 50},
	{MOBILYA_TUR_VIP, 9, 6965, "Sus havuzu", 150},
	{MOBILYA_TUR_VIP, 9, 9833, "Buyuk heykel fiskiye", 500},
	{MOBILYA_TUR_VIP, 9, 19078, "Papagan", 400},
	{MOBILYA_TUR_VIP, 9, 19079, "Papagan2", 425},
	{MOBILYA_TUR_VIP, 9, 19086, "Dildo testere", 400},
	{MOBILYA_TUR_VIP, 9, 19836, "Kan", 30},
	{MOBILYA_TUR_VIP, 9, 3280, "Parmaklýk askeri", 100},
	{MOBILYA_TUR_VIP, 9, 19776, "Fbi kart", 100},
	{MOBILYA_TUR_VIP, 9, 2745, "Heykel dusunen adam", 1000},
	{MOBILYA_TUR_VIP, 9, 3471, "Heykel", 1000},
	{MOBILYA_TUR_VIP, 9, 3462, "Heykel gosterisli", 1500},
	{MOBILYA_TUR_VIP, 9, 18718, "Kaynak", 50},
	{MOBILYA_TUR_VIP, 9, 18713, "Sis duman", 50},
	{MOBILYA_TUR_VIP, 9, 18716, "Sis duman", 50},
	{MOBILYA_TUR_VIP, 9, 18720, "Kar", 50},
	{MOBILYA_TUR_VIP, 9, 18670, "Selektor", 50},
	{MOBILYA_TUR_VIP, 9, 18660, "Grafiti Seville", 50},
	{MOBILYA_TUR_VIP, 9, 18661, "Grafiti Varrio Aztecas", 50},
	{MOBILYA_TUR_VIP, 9, 18664, "Temple Drive", 50},
	{MOBILYA_TUR_VIP, 9, 19299, "obk", 50},
	{MOBILYA_TUR_VIP, 9, 3809, "Desenli lamba", 100},

	// Özel objeler

	{MOBILYA_TUR_OZEL, 9, 918, "Tüp", 45},
	{MOBILYA_TUR_OZEL, 9, 1217, "Varil", 50},
	{MOBILYA_TUR_OZEL, 9, 1558, "Kutu", 50},
	{MOBILYA_TUR_OZEL, 9, 1985, "Kum Torbasý", 500},
	{MOBILYA_TUR_OZEL, 9, 11712, "Haç Ýþareti", 30},
	{MOBILYA_TUR_OZEL, 9, 11750, "Kapalý Kelepçe", 30},
	{MOBILYA_TUR_OZEL, 9, 11749, "Açýk Kelepçe", 30},
	{MOBILYA_TUR_OZEL, 9, 18641, "El Feneri", 15},
	{MOBILYA_TUR_OZEL, 9, 18644, "Tornavida", 15},
	{MOBILYA_TUR_OZEL, 9, 18865, "Turuncu Telefon", 50},
	{MOBILYA_TUR_OZEL, 9, 18866, "Mavi Telefon", 50},
	{MOBILYA_TUR_OZEL, 9, 18868, "Siyah Telefon", 50},
	{MOBILYA_TUR_OZEL, 9, 18869, "Pembe Telefon", 50},
	{MOBILYA_TUR_OZEL, 9, 18870, "Kýrmýzý Telefon", 50},
	{MOBILYA_TUR_OZEL, 9, 18871, "Yeþil Telefon", 50},
	{MOBILYA_TUR_OZEL, 9, 18872, "Lacivert Telefon", 50},
	{MOBILYA_TUR_OZEL, 9, 18873, "Sarý Telefon", 50},
	{MOBILYA_TUR_OZEL, 9, 19078, "Papaðan", 70},
	{MOBILYA_TUR_OZEL, 9, 19128, "Küçük Disko Halýsý", 450},
	{MOBILYA_TUR_OZEL, 9, 19129, "Büyük Disko Halýsý", 650},
	{MOBILYA_TUR_OZEL, 9, 19159, "Disko Topu", 500},
	{MOBILYA_TUR_OZEL, 9, 19167, "Vice Haritasý", 100},
	{MOBILYA_TUR_OZEL, 9, 19317, "Gitar", 200},
	{MOBILYA_TUR_OZEL, 9, 19318, "Gitar 2", 200},
	{MOBILYA_TUR_OZEL, 9, 19319, "Gitar 3", 200},
	{MOBILYA_TUR_OZEL, 9, 19559, "Dað Çantasý", 90},
	{MOBILYA_TUR_OZEL, 9, 19590, "Japon Kýlýcý", 150},
	{MOBILYA_TUR_OZEL, 9, 19609, "Bateri", 300},
	{MOBILYA_TUR_OZEL, 9, 19793, "Odun", 15},
	{MOBILYA_TUR_OZEL, 9, 19317, "Gitar", 200},
	{MOBILYA_TUR_OZEL, 9, 19893, "Açýk Bilgisayar", 100},
	{MOBILYA_TUR_OZEL, 9, 19894, "Kapalý Bilgisayar", 100},

	// araç parçalarý

	{MOBILYA_TUR_ARACOBJELERI, 9, 1098, "Jant1", 50},
	{MOBILYA_TUR_ARACOBJELERI, 9, 1097, "Lastik", 20},
	{MOBILYA_TUR_ARACOBJELERI, 9, 1096, "Lastikjant", 70},
	{MOBILYA_TUR_ARACOBJELERI, 9, 1086, "Jant2", 120},
	{MOBILYA_TUR_ARACOBJELERI, 9, 1085, "Jant3", 120},
	{MOBILYA_TUR_ARACOBJELERI, 9, 1084, "Jant4", 120},
	{MOBILYA_TUR_ARACOBJELERI, 9, 1083, "Jant5", 120},
	{MOBILYA_TUR_ARACOBJELERI, 9, 1082, "Jant6", 120},
	{MOBILYA_TUR_ARACOBJELERI, 9, 1081, "Jant7", 120},
	{MOBILYA_TUR_ARACOBJELERI, 9, 1080, "Jant8", 120},
	{MOBILYA_TUR_ARACOBJELERI, 9, 1079, "Jant9", 120},
	{MOBILYA_TUR_ARACOBJELERI, 9, 1078, "Jant10", 120},
	{MOBILYA_TUR_ARACOBJELERI, 9, 1077, "Jant11", 120},
	{MOBILYA_TUR_ARACOBJELERI, 9, 1076, "Jant12", 120},
	{MOBILYA_TUR_ARACOBJELERI, 9, 1075, "Jant13", 120},
	{MOBILYA_TUR_ARACOBJELERI, 9, 1074, "Jant14", 120},
	{MOBILYA_TUR_ARACOBJELERI, 9, 1073, "Jant15", 120},
	{MOBILYA_TUR_ARACOBJELERI, 9, 1008, "Nitro2", 550},
	{MOBILYA_TUR_ARACOBJELERI, 9, 1009, "Nitro5", 700},
	{MOBILYA_TUR_ARACOBJELERI, 9, 1010, "Nitro10", 900},

	// varil ve koliler

	{MOBILYA_TUR_VARILVEKOLILER, 9, 922, "Koliler", 20},
	{MOBILYA_TUR_VARILVEKOLILER, 9, 923, "Iki koli", 20},
	{MOBILYA_TUR_VARILVEKOLILER, 9, 925, "Demir Alan", 60},
	{MOBILYA_TUR_VARILVEKOLILER, 9, 930, "Tupler", 150},
	{MOBILYA_TUR_VARILVEKOLILER, 9, 935, "Varil", 20},
	{MOBILYA_TUR_VARILVEKOLILER, 9, 931, "Demir AlanBos", 50},
	{MOBILYA_TUR_VARILVEKOLILER, 9, 942, "Rafta koliler", 50},
	{MOBILYA_TUR_VARILVEKOLILER, 9, 944, "Iki kutu", 40},
	{MOBILYA_TUR_VARILVEKOLILER, 9, 1271, "Kutu", 20},
	{MOBILYA_TUR_VARILVEKOLILER, 9, 1362, "Varil5", 20},
	{MOBILYA_TUR_VARILVEKOLILER, 9, 922, "Koliler", 20},
	{MOBILYA_TUR_VARILVEKOLILER, 9, 941, "Mermi kutusu", 20},
	{MOBILYA_TUR_VARILVEKOLILER, 9, 943, "Mermi kutusu2", 20},
	{MOBILYA_TUR_VARILVEKOLILER, 9, 2358, "Mermi sandik", 60},
	{MOBILYA_TUR_VARILVEKOLILER, 9, 2359, "Mermi acik sandik", 60},
	{MOBILYA_TUR_VARILVEKOLILER, 9, 2912, "Koli", 20},
	{MOBILYA_TUR_VARILVEKOLILER, 9, 2969, "Sandik", 20},
	{MOBILYA_TUR_VARILVEKOLILER, 9, 3046, "Patlayýcý dolu varil", 500},
	{MOBILYA_TUR_VARILVEKOLILER, 9, 3134, "Patlayici dolu varil2", 550},
	{MOBILYA_TUR_VARILVEKOLILER, 9, 3796, "Acik kutusandik", 100},
	{MOBILYA_TUR_VARILVEKOLILER, 9, 922, "Koliler", 20},
	{MOBILYA_TUR_VARILVEKOLILER, 9, 18260, "Kutulardolu", 250},

	// ev eþyalarý

	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 1208, "BULAÞIK MAKÝNESÝ", 120},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 1481, "BARBEKÜ MANGAL", 90},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 1518, "TELEVÝZYON", 100},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 1659, "FAN", 50},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 1661, "FAN 2", 50},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 1700, "YATAK ", 100},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 1701, "YATAK 2", 100},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 1717, "TELEVÝZYON 2", 100},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 1718, "DVD OYNATICI", 70},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 1719, "OYUN KONSOLU", 70},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 1736, "DOLDURULMUÞ KAFA", 100},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 1736, "KALORÝFER", 50},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 1745, "YATAK 3", 100},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 1747, "TELEVÝZYON 3", 100},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 1748, "TELEVÝZYON 4", 100},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 1749, "TELEVÝZYON 5", 100},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 1752, "TELEVÝZYON 6", 100},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 1771, "YATAK 4", 60},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 1778, "TEMÝZLÝK KOVASI", 20},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 1780, "MÝNÝ BUZDOLABI", 50},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 1781, "TELEVÝZYON 7", 100},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 1782, "DVD OYNATICI 2", 70},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 1783, "DVD OYNATICI 3", 70},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 1785, "DVD OYNATICI 4", 70},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 1786, "TELEVÝZYON 7", 100},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 1787, "DVD OYNATICI 5", 100},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 1789, "SERVÝS MASASI", 50},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 1792, "TELEVÝZYON 8", 100},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 1793, "YATAK 5", 40},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 1794, "YATAK 6", 60},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 1795, "YATAK 7", 60},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 1796, "YATAK 8", 60},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 1797, "YATAK 9", 60},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 1798, "YATAK 10", 60},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 1799, "YATAK 11", 70},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 1800, "YATAK 12", 40},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 1801, "YATAK 13", 60},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 1802, "YATAK 14", 60},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 1803, "YATAK 15", 60},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 1808, "SU SEBÝLÝ", 40},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 1809, "DVD OYNATICI 6", 70},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 1812, "YATAK 16", 40},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 1828, "KAPLAN KÜRKÜ", 50},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 1829, "PARA KASASI", 500},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 1839, "RADYO", 60},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 1840, "HOPARLÖR", 60},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2002, "SU SEBÝLÝ 2", 40},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2003, "KASA", 120},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2005, "KAÐIT PARA", 200},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2013, "MUTFAK DOLABI", 150},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2017, "MUTFAK FIRINI", 120},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2028, "OYUN KONSOLU 2", 70},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2090, "YATAK 17", 60},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2091, "TELEVÝZYON ÜNÝTESÝ", 100},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2093, "TELEVÝZYON ÜNÝTESÝ 2", 100},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2097, "KÜVET", 50},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2099, "MÜZÝK SETÝ", 70},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2100, "MÜZÝK SETÝ 2", 70},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2102, "KASET ÇALAR", 50},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2103, "MÜZÝK SETÝ 3", 70},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2104, "MÜZÝK SETÝ 4", 70},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2127, "BUZDOLABI ÜNÝTESÝ", 70},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2130, "MUTFAK TEZGAHI", 70},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2131, "MUTFAK DOLABI", 70},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2132, "MUTFAK TEZGAHI 2", 70},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2135, "OCAK", 70},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2136, "MUTFAK TEZGAHI 3", 70},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2144, "ÇEKMECE", 40},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2146, "SEDYE", 60},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2147, "MÝNÝ BUZDOLABI 2", 50},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2149, "MÝKRODALGA", 50},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2150, "MUTFAK LAVABOSU", 50},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2170, "OCAK 2", 70},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2186, "FOTOKOPÝ MAKÝNASI", 100},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2190, "MONÝTÖR", 100},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2192, "VANTÝLATÖR", 50},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2201, "YAZICI", 50},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2202, "YAZICI 2", 100},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2224, "WEBCAM", 40},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2226, "MÜZÝK ÇALAR", 40},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2229, "HOPARLÖR 2", 40},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2231, "HOPARLÖR 3", 60},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2232, "HOPARLÖR 4", 75},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2233, "HOPARLÖR 5", 40},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2294, "OCAK 3", 70},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2296, "TELEVÝZYON ÜNÝTESÝ 3", 100},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2297, "TELEVÝZYON ÜNÝTESÝ 4", 100},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2298, "YATAK 18", 80},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2299, "YATAK 19", 75},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2300, "YATAK 20", 75},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2301, "YATAK 21", 75},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2302, "YATAK 22", 65},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2312, "TELEVÝZYON 9", 100},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2316, "TELEVÝZYON 10", 100},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2322, "TELEVÝZYON 11", 100},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2331, "MASA", 50},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2332, "KASA 2", 600},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2333, "MASA 2", 50},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2336, "MUTFAK TEZGAHI 4", 70},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2337, "ÇAMAÞIR MAKÝNASI", 70},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2339, "MUTFAK DOLABI 2", 40},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2344, "TELEVÝZYON KUMANDASI", 20},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2361, "DERÝN DONDURUCU", 60},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2415, "FRÝTÖZ", 70},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2417, "MUTFAK FIRINI 2", 120},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2421, "MÝKRODALGA 2", 50},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2426, "MUTFAK FIRINI 3", 70},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2452, "BUZDOLABI", 190},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2514, "KLOZET", 60},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2515, "LAVABO", 60},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2516, "KÜVET 2", 70},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2517, "DUÞAKABÝN", 100},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2518, "LAVABO 2", 50},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2520, "DUÞAKABÝN 2", 70},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2521, "KLOZET 2", 50},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2522, "KÜVET 3", 70},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2523, "LAVABO 3", 80},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2524, "LAVABO 4", 80},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2525, "KLOZET 3", 70},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2526, "KÜVET 4", 70},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2527, "DUÞAKABÝN 3", 70},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2528, "KLOZET 4", 80},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2563, "YATAK 23", 140},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2564, "YATAK 24", 280},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2565, "YATAK 25", 340},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2566, "YATAK 26", 180},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2575, "YATAK 27", 150},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2595, "TELEVÝZYON 12", 100},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2596, "TELEVÝZYON 13", 100},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2603, "YATAK 28", 80},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2613, "ÇÖP KUTUSU", 20},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2627, "KOÞU BANDI", 150},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2628, "SPOR ALETÝ", 150},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2629, "SPOR ALETÝ 2", 150},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2630, "SPOR ALETÝ 3", 150},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2631, "HALI", 30},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2632, "HALI 2", 30},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2713, "TEMÝZLÝK KOVASI", 20},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2812, "YEMEK TABAÐI", 10},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2813, "KÝTAPLAR", 10},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2816, "KÝTAPLAR 2", 10},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2817, "HALI 3", 30},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2818, "HALI 4", 30},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2819, "KIYAFETLER", 20},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2820, "YEMEK TABAÐI 2", 25},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2822, "YEMEK TABAÐI 3", 25},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2824, "KÝTAPLAR 3", 10},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2826, "DERGÝ", 10},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2827, "DERGÝ 2", 10},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2828, "ÇERÇEVELÝ FOTOÐRAF", 10},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2829, "YEMEK TABAÐI 4", 25},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2830, "YEMEK TABAÐI 5", 25},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2831, "YEMEK TABAÐI 6", 25},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2832, "YEMEK TABAÐI 7", 25},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2833, "HALI 5", 30},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2835, "HALI 6", 15},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2836, "HALI 7", 30},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2841, "HALI 8", 30},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2842, "HALI 9", 30},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2847, "HALI 10", 30},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2848, "YEMEK TABAÐI 8", 25},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2849, "YEMEK TABAÐI 9", 25},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2850, "YEMEK TABAÐI 10", 25},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2851, "YEMEK TABAÐI 11", 25},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2852, "DERGÝ 3", 10},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2853, "KÝTAPLAR 4", 10},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2854, "KÝTAPLAR 5", 10},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 2855, "DERGÝ 4", 10},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 11705, "EV TELEFONU", 30},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 11706, "ÇÖP KUTUSU", 20},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 11707, "HAVLULUK", 5},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 11709, "LAVABO 5", 60},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 11715, "ÇATAL", 5},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 11716, "BIÇAK", 5},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 11718, "TENCERE", 15},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 11719, "TENCERE 2", 15},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 11721, "KALORÝFER 2", 50},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 11726, "LAMBA", 50},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 11727, "IÞIK", 25},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 11728, "TELEFON", 60},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 11733, "OYUNCAK AT", 120},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 11737, "PASPAS", 20},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 11743, "KAHVE MAKÝNASI", 150},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 11744, "YEMEK TABAÐI 12", 10},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 11745, "ÇANTA", 30},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 11746, "ANAHTAR", 5},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 11747, "BANDAJ", 10},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 11748, "BANDAJ 2", 10},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 14384, "MUTFAK DOLABI 3", 300},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 14446, "YATAK 29", 400},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 14480, "TUVALET", 250},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 14481, "DUÞ SETÝ", 80},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 14494, "DUÞ SETÝ 2", 80},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 14527, "FAN 3", 50},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 14532, "TELEVÝZYON STANDI", 50},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 14705, "VAZO", 50},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 14772, "TELEVÝZYON 14", 100},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 14806, "MÜZÝK SETÝ 4", 80},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 14861, "YATAK 30", 50},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 14866, "YATAK 31", 150},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 14880, "YATAK 32", 50},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 15035, "YATAK ODASI TAKIMI", 1000},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 15039, "YATAK ODASI TAKIMI 2", 700},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 18632, "OLTA", 50},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 18633, "MUSLUK", 40},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 18634, "LEVYE", 10},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 18635, "ÇEKÝÇ", 10},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 18635, "TIRMIK", 15},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 19172, "FOTOÐRAF", 50},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 19173, "FOTOÐRAF 2", 50},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 19174, "FOTOÐRAF 3", 50},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 19175, "FOTOÐRAF 4", 50},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 19176, "FOTOÐRAF 5", 50},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 19468, "BARDAK", 10},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 19581, "TAVA", 10},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 19583, "BIÇAK 2", 5},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 19584, "TENCERE 3", 15},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 19585, "TENCERE 4", 15},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 19586, "SPATULA", 10},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 19591, "YELPAZE", 10},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 19612, "AMFÝ", 40},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 19613, "AMFÝ 2", 40},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 19614, "AMFÝ 3", 40},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 19615, "AMFÝ 4", 40},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 19616, "AMFÝ 5", 40},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 19617, "ALBÜM", 50},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 19621, "YAÐ ÞÝÞESÝ", 25},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 19622, "TEMÝZLÝK FIRÇASI", 25},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 19623, "KAMERA", 75},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 19624, "ÇANTA 2", 50},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 19805, "YAZI TAHTASI", 70},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 19806, "LAMBA", 90},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 19807, "EV TELEFONU 2", 30},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 19808, "KLAVYE", 20},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 19813, "PRÝZ", 15},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 19814, "PRÝZ 2", 15},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 19813, "ALET STANDI", 50},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 19825, "SAAT", 15},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 19826, "PRÝZ 3", 15},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 19827, "PRÝZ 4", 15},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 19828, "PRÝZ 5", 15},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 19829, "PRÝZ 6", 15},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 19830, "BLENDER", 45},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 19831, "BARBEKÜ MANGAL 2", 90},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 19873, "RULO PEÇETE", 15},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 19874, "SABUN", 20},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 19878, "KAYKAY", 30},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 19896, "SÝGARA PAKETÝ", 10},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 19897, "SÝGARA PAKETÝ 2", 10},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 19918, "KUTU", 30},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 19920, "POS CÝHAZI", 30},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 19921, "ALET ÇANTASI", 30},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 19993, "KASE", 15},
	{MOBILYA_TUR_HOUSEHOLDITEMLERI, 9, 19998, "ZÝPPO", 30},

	// masa ve sandalyeler

	{MOBILYA_TUR_MASAVESANDALYE, 9, 643, "Bahçe masasý", 300},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 1256, "Taþ Bank", 150},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 1280, "Tahta Bank", 150},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 1281, "Þemsiyeli Bank", 150},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 1368, "Tuhaf Bank", 150},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 1432, "Pizzacý masasý", 150},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 1433, "Tahta Masa", 100},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 1516, "Tahta Masa 2", 100},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 1562, "Pilot Koltuðu", 500},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 1594, "Mavi masa", 150},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 1663, "Ofis Koltuðu", 75},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 1670, "Viski ve Puro", 50},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 1671, "Ofis Koltuðu 2", 75},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 1704, "Siyah koltuk", 150},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 1705, "Krem koltuk", 150},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 1708, "Siyah koltuk 2", 150},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 1711, "Eski koltuk", 125},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 1714, "Patron koltuðu", 150},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 1704, "Siyah koltuk", 150},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 1716, "iskemble", 50},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 1720, "Beyaz Sandalye", 150},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 1721, "Demir sandalye", 150},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 1723, "Siyah koltuk 3", 200},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 1726, "Siyah koltuk 4", 200},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 1727, "Siyah koltuk 5", 200},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 1728, "Eski Koltuk 2", 150},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 1735, "Antika Koltuk", 200},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 1739, "Deri Sandalye", 200},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 1746, "Deri oturak", 100},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 1805, "Tabure", 50},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 1806, "Ofis Sandalyesi", 100},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 1810, "Plastik Sandalye", 75},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 1824, "Casino Makinasý", 1500},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 1825, "Restaurant Masa", 150},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 1826, "Beyaz Masa", 200},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 1827, "Daire Cam Masa", 150},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 1896, "Casino Masasý", 1500},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 1954, "DJ Seti", 300},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 1963, "Beyaz Masa 2", 250},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 1968, "Yemek Masasý", 300},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 1969, "Yemek Masasý 2", 150},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 1998, "Bilgisayar Masasý", 300},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 1999, "Bilgisayar Masasý 2", 300},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 2008, "Bilgisayar Masasý 3", 300},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 2009, "Bilgisayar Masasý 4", 300},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 2027, "Restaurant Masasý", 300},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 2079, "Lüx Sandalye ", 200},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 2096, "Sallanan Sandalye", 150},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 2121, "Kýrmýzý Sandalye", 75},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 2125, "Kýrmýzý Tabure", 50},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 2165, "Çalýþma Masasý", 125},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 2166, "Çalýþma Masasý 2", 125},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 2169, "Çalýþma Masasý 3", 125},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 2171, "Çalýþma Masasý 4", 125},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 2172, "Ofis Masasý", 150},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 2173, "Ofis Masasý 2", 150},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 2174, "Ofis Masasý 3", 150},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 2181, "Ofis Masasý 4", 150},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 2182, "Ofis Masasý 5", 150},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 2184, "Lüx Ofis Masa", 200},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 2185, "Lüx Ofis Masa 2", 200},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 2205, "Güzel Masa", 150},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 2206, "Güzel Masa 2", 150},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 2313, "TV Ünitesi", 150},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 2314, "TV Ünitesi 2", 150},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 2314, "Büyük Masa", 200},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 2319, "Tahta Sehpa", 200},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 2343, "Berber Koltuðu", 100},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 2370, "Eskimsi Masa", 100},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 2592, "Bar masasý", 1000},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 2635, "Kare Masa", 100},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 2637, "Kare Masa 2", 100},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 2638, "Pizzacý Koltuðu", 250},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 2639, "Pizzacý Koltuðu 2", 125},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 2723, "Tabure 2", 75},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 2725, "Tek Masa", 75},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 2784, "Bar Masa 2", 1000},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 2799, "Çift Masasý", 150},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 2800, "Masaüstü Aksesuar", 50},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 2801, "Masaüstü Aksesuar2", 85},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 2802, "2 Sandalye ve Masa", 150},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 2807, "Tek Desenli Sandalye", 50},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 2808, "Ýkili koltuk", 100},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 3657, "Lab masasi", 400},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 11631, "Hazir Masa Tablo", 150},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 11682, "Tekli köþe koltuk L", 50},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 11683, "Tekli L koltuk", 50},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 11684, "Tekli köþe koltuk L", 50},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 11685, "Tekli L genis", 60},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 11690, "Yesil masa casino isi", 150},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 11691, "Yesil uzun masa casino isi", 200},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 11734, "Tekli sallanan koltuk", 100},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 19922, "Eski Kahverengi masa", 150},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 19994, "Tekli tahta sandalye", 40},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 19997, "Ufak masa tahta", 40},
	{MOBILYA_TUR_MASAVESANDALYE, 9, 19999, "Patron koltugu", 250},

	// bar nesneleri

	{MOBILYA_TUR_BARITEMLERI, 9, 1455, "Kahverengi Bardak", 20},
	{MOBILYA_TUR_BARITEMLERI, 9, 1484, "Beyaz Vodka", 70},
	{MOBILYA_TUR_BARITEMLERI, 9, 1485, "Sigara", 10},
	{MOBILYA_TUR_BARITEMLERI, 9, 1486, "Bira þiþesi", 20},
	{MOBILYA_TUR_BARITEMLERI, 9, 1517, "Bira þiþesi 2", 20},
	{MOBILYA_TUR_BARITEMLERI, 9, 1488, "Sabitlenmiþ Þiþe", 30},
	{MOBILYA_TUR_BARITEMLERI, 9, 1510, "Kül Tablasý", 10},
	{MOBILYA_TUR_BARITEMLERI, 9, 1511, "Sabitlenmiþ Vodka", 50},
	{MOBILYA_TUR_BARITEMLERI, 9, 1512, "Ýnce Bira", 50},
	{MOBILYA_TUR_BARITEMLERI, 9, 1520, "Beyaz Þarap Þiþesi", 70},
	{MOBILYA_TUR_BARITEMLERI, 9, 1541, "Ýçki Musluklarý", 120},
	{MOBILYA_TUR_BARITEMLERI, 9, 1520, "Bira Musluklarý", 110},
	{MOBILYA_TUR_BARITEMLERI, 9, 1544, "Hafif Bira Þiþesi", 15},
	{MOBILYA_TUR_BARITEMLERI, 9, 1545, "Gazoz Musluklarý", 120},
	{MOBILYA_TUR_BARITEMLERI, 9, 1546, "Gazoz Kutusu", 20},
	{MOBILYA_TUR_BARITEMLERI, 9, 1547, "Bardak Altlýðý", 10},
	{MOBILYA_TUR_BARITEMLERI, 9, 1548, "Bardak Altlýðý 2", 10},
	{MOBILYA_TUR_BARITEMLERI, 9, 1664, "Þarap Þiþesi", 70},
	{MOBILYA_TUR_BARITEMLERI, 9, 1665, "Kül Tablasý", 15},
	{MOBILYA_TUR_BARITEMLERI, 9, 1666, "Bira Bardaðý", 15},
	{MOBILYA_TUR_BARITEMLERI, 9, 1667, "Kadeh", 5},
	{MOBILYA_TUR_BARITEMLERI, 9, 1668, "Vodka Þiþesi", 70},
	{MOBILYA_TUR_BARITEMLERI, 9, 1732, "Müzik Otomatý", 200},
	{MOBILYA_TUR_BARITEMLERI, 9, 11686, "Bardesk", 1000},
	{MOBILYA_TUR_BARITEMLERI, 9, 16151, "Sandalyeli Bardesk", 1500},
	{MOBILYA_TUR_BARITEMLERI, 9, 19818, "Kadeh 2", 5},
	{MOBILYA_TUR_BARITEMLERI, 9, 19819, "Üçgen Kadeh", 5},
	{MOBILYA_TUR_BARITEMLERI, 9, 19820, "Alkol Þiþesi", 20},
	{MOBILYA_TUR_BARITEMLERI, 9, 19821, "Alkol Þiþesi 2", 20},
	{MOBILYA_TUR_BARITEMLERI, 9, 19822, "Alkol Þiþesi 3", 20},
	{MOBILYA_TUR_BARITEMLERI, 9, 19823, "Alkol Þiþesi 4", 20},
	{MOBILYA_TUR_BARITEMLERI, 9, 19824, "Alkol Þiþesi 5", 20},
	{MOBILYA_TUR_BARITEMLERI, 9, 14537, "Büyük Bar Kare", 550},
	{MOBILYA_TUR_BARITEMLERI, 9, 18090, "Alhambra Bar", 550},
	{MOBILYA_TUR_BARITEMLERI, 9, 14560, "Büyük Casino Bar", 550},

	// kapý ve pencereler

	{MOBILYA_TUR_KAPILARVEPENCERELER, 9, 977, "Apartman Kapýsý", 120},
	{MOBILYA_TUR_KAPILARVEPENCERELER, 9, 1491, "Tahta Kare Kapý", 100},
	{MOBILYA_TUR_KAPILARVEPENCERELER, 9, 1492, "Yeþil Kapý", 100},
	{MOBILYA_TUR_KAPILARVEPENCERELER, 9, 1493, "Tel Pencereli Kapý", 100},
	{MOBILYA_TUR_KAPILARVEPENCERELER, 9, 1494, "Eski kapý", 100},
	{MOBILYA_TUR_KAPILARVEPENCERELER, 9, 1495, "Telli Kapý", 100},
	{MOBILYA_TUR_KAPILARVEPENCERELER, 9, 1496, "Köy kapýsý", 100},
	{MOBILYA_TUR_KAPILARVEPENCERELER, 9, 1497, "Ahýr Kapýsý", 100},
	{MOBILYA_TUR_KAPILARVEPENCERELER, 9, 1498, "Beyaz Kapý", 100},
	{MOBILYA_TUR_KAPILARVEPENCERELER, 9, 1499, "Paslý Kapý", 100},
	{MOBILYA_TUR_KAPILARVEPENCERELER, 9, 1500, "Dükkan Kapýsý", 100},
	{MOBILYA_TUR_KAPILARVEPENCERELER, 9, 1501, "Tahta Telli Kapý", 100},
	{MOBILYA_TUR_KAPILARVEPENCERELER, 9, 1502, "Tahta Kapý", 100},
	{MOBILYA_TUR_KAPILARVEPENCERELER, 9, 1504, "Kýrmýzý Kapý", 100},
	{MOBILYA_TUR_KAPILARVEPENCERELER, 9, 1505, "Mavi Kapý", 100},
	{MOBILYA_TUR_KAPILARVEPENCERELER, 9, 1506, "Gri Kapý", 100},
	{MOBILYA_TUR_KAPILARVEPENCERELER, 9, 1507, "Sarý Kapý", 100},
	{MOBILYA_TUR_KAPILARVEPENCERELER, 9, 1508, "Ýkili Paslý Kapý", 100},
	{MOBILYA_TUR_KAPILARVEPENCERELER, 9, 1522, "Dükkan kapýsý 2", 100},
	{MOBILYA_TUR_KAPILARVEPENCERELER, 9, 1523, "Mutfak kapýsý", 100},
	{MOBILYA_TUR_KAPILARVEPENCERELER, 9, 1532, "Dükkan kapýsý 3", 100},
	{MOBILYA_TUR_KAPILARVEPENCERELER, 9, 1533, "Gri Kapý 2", 100},
	{MOBILYA_TUR_KAPILARVEPENCERELER, 9, 1535, "Otel Kapýsý", 100},
	{MOBILYA_TUR_KAPILARVEPENCERELER, 9, 1536, "Patron kapýsý", 100},
	{MOBILYA_TUR_KAPILARVEPENCERELER, 9, 1538, "Dükkan Kapýsý 4", 100},
	{MOBILYA_TUR_KAPILARVEPENCERELER, 9, 1556, "Mekan kapýsý", 100},
	{MOBILYA_TUR_KAPILARVEPENCERELER, 9, 1557, "Sarýþýn Kapý", 100},
	{MOBILYA_TUR_KAPILARVEPENCERELER, 9, 1560, "7/24 Kapý", 100},
	{MOBILYA_TUR_KAPILARVEPENCERELER, 9, 1566, "Patron Kapýsý 2", 100},
	{MOBILYA_TUR_KAPILARVEPENCERELER, 9, 1567, "Gardrop Kapýsý", 100},
	{MOBILYA_TUR_KAPILARVEPENCERELER, 9, 1569, "Dükkan Kapýsý 5", 100},
	{MOBILYA_TUR_KAPILARVEPENCERELER, 9, 1649, "Düz Cam", 150},
	{MOBILYA_TUR_KAPILARVEPENCERELER, 9, 1692, "Tavan Camý", 150},
	{MOBILYA_TUR_KAPILARVEPENCERELER, 9, 1593, "Tavan Camý 2", 150},
	{MOBILYA_TUR_KAPILARVEPENCERELER, 9, 2004, "Kasa kapýsý", 400},
	{MOBILYA_TUR_KAPILARVEPENCERELER, 9, 2558, "Perde 1", 50},
	{MOBILYA_TUR_KAPILARVEPENCERELER, 9, 2559, "Perde 2", 50},
	{MOBILYA_TUR_KAPILARVEPENCERELER, 9, 2560, "Perde 3", 50},
	{MOBILYA_TUR_KAPILARVEPENCERELER, 9, 2561, "Perde 4", 50},
	{MOBILYA_TUR_KAPILARVEPENCERELER, 9, 2559, "Perde 2", 50},
	{MOBILYA_TUR_KAPILARVEPENCERELER, 9, 3089, "Tahta Kapý 2", 100},
	{MOBILYA_TUR_KAPILARVEPENCERELER, 9, 19302, "Hücre kapýsý", 100},
	{MOBILYA_TUR_KAPILARVEPENCERELER, 9, 19303, "Hücre kapýsý 2", 100},
	{MOBILYA_TUR_KAPILARVEPENCERELER, 9, 19860, "Daire kapýsý", 100},
	{MOBILYA_TUR_KAPILARVEPENCERELER, 9, 19858, "Arka Kapý", 100},

	// kýyafetler

	{MOBILYA_TUR_KIYAFETLER, 9, 2372, "Tekli Boþ Askýlýk", 60},
	{MOBILYA_TUR_KIYAFETLER, 9, 2371, "Ýkili Boþ Askýlýk", 70},
	{MOBILYA_TUR_KIYAFETLER, 9, 2373, "Duvar Askýsý", 50},
	{MOBILYA_TUR_KIYAFETLER, 9, 2374, "Askýlý Gömlekler", 100},
	{MOBILYA_TUR_KIYAFETLER, 9, 2377, "Askýlý Siyah Pantolon", 100},
	{MOBILYA_TUR_KIYAFETLER, 9, 2378, "Askýlý Mavi Pantolon", 100},
	{MOBILYA_TUR_KIYAFETLER, 9, 2380, "Takým Elbise Askýsý", 150},
	{MOBILYA_TUR_KIYAFETLER, 9, 2381, "Askýlý Eþofmanlar", 100},
	{MOBILYA_TUR_KIYAFETLER, 9, 2383, "Askýlý Kazaklar", 100},
	{MOBILYA_TUR_KIYAFETLER, 9, 2384, "Katlanmýþ Gri Pantolon", 80},
	{MOBILYA_TUR_KIYAFETLER, 9, 2386, "Katlanmýþ Mavi Pantolon", 80},
	{MOBILYA_TUR_KIYAFETLER, 9, 2389, "Askýlý Sportif Ceketler", 100},
	{MOBILYA_TUR_KIYAFETLER, 9, 2390, "Askýlý Yeþil Eþofmanlar", 100},
	{MOBILYA_TUR_KIYAFETLER, 9, 2391, "Askýlý Gri Pantolonlar", 100},
	{MOBILYA_TUR_KIYAFETLER, 9, 2398, "Askýlý Mavi Eþofmanlar", 100},
	{MOBILYA_TUR_KIYAFETLER, 9, 2391, "Askýlý Kýrmýzý Eþofmanlar", 100},
	{MOBILYA_TUR_KIYAFETLER, 9, 2391, "Askýlý Beyaz Kazaklar", 100},
	{MOBILYA_TUR_KIYAFETLER, 9, 2407, "Siyah Manken", 70},
	{MOBILYA_TUR_KIYAFETLER, 9, 2411, "Beyaz Manken", 70},
	{MOBILYA_TUR_KIYAFETLER, 9, 2689, "Askýlý Hoodie", 80},
	{MOBILYA_TUR_KIYAFETLER, 9, 2689, "Askýlý Turuncu Hoodie", 80},
	{MOBILYA_TUR_KIYAFETLER, 9, 2706, "Askýlý Kýrmýzý Atlet", 60},
	{MOBILYA_TUR_KIYAFETLER, 9, 2705, "Askýlý Beyaz Atlet", 60},
	{MOBILYA_TUR_KIYAFETLER, 9, 2843, "Daðýnýk Kýyafetler", 40},
	{MOBILYA_TUR_KIYAFETLER, 9, 2844, "Daðýnýk Kýyafetler 2", 40},
	{MOBILYA_TUR_KIYAFETLER, 9, 2845, "Daðýnýk Kýyafetler 3", 40},
	{MOBILYA_TUR_KIYAFETLER, 9, 2846, "Daðýnýk Kýyafetler 4", 40},
	{MOBILYA_TUR_KIYAFETLER, 9, 11735, "Gri Kovboy Botu", 30},
	{MOBILYA_TUR_KIYAFETLER, 9, 18947, "Siyah Fötr Þapka", 100},
	{MOBILYA_TUR_KIYAFETLER, 9, 18949, "Yeþil Fötr Þapka", 100},
	{MOBILYA_TUR_KIYAFETLER, 9, 19022, "Güneþ Gözlüðü", 100},
	{MOBILYA_TUR_KIYAFETLER, 9, 19023, "Güneþ Gözlüðü 2", 100},
	{MOBILYA_TUR_KIYAFETLER, 9, 19421, "Kulaklýk", 100},
	{MOBILYA_TUR_KIYAFETLER, 9, 19422, "Kulaklýk 2", 100},
	{MOBILYA_TUR_KIYAFETLER, 9, 19423, "Kulaklýk 3", 100},
	{MOBILYA_TUR_KIYAFETLER, 9, 19528, "Cadý Þapkasý", 100},

	// dükkan eþyalarý

	{MOBILYA_TUR_SHOPITEMLERI, 9, 962, "Otomat", 400},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 1513, "Raf", 50},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 1514, "Yazar Kasa", 300},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 1583, "Hedef 1", 50},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 1584, "Hedef 2", 50},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 1585, "Hedef 3", 50},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 1586, "Hedef 4", 50},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 1613, "Yangýn Hortumu", 150},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 1515, "Yangýn Butonu", 150},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 1516, "Güvenlik Kamerasý 1", 250},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 1620, "Panjurlu Pencere", 100},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 1622, "Güvenlik Kamerasý 2", 400},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 1627, "Güvenlik Alarmý", 200},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 1842, "Küçük Reyon 1", 350},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 1843, "Küçük Reyon 2", 350},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 1845, "Küçük Reyon 3", 350},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 1847, "Büyük Reyon 1", 350},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 1849, "Büyük Reyon 2", 450},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 1850, "Satýþ Reyonu 1", 350},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 1885, "Alýþveriþ Sepeti 1", 50},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 1886, "Maðaza Kamerasý", 150},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 1887, "Yesil Reyon", 300},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 1888, "Mavi Reyon", 300},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 1889, "Sari Reyon", 300},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 1984, "Alýþveriþ Kasa", 1500},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 1987, "Satýþ Reyonu 2", 200},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 1997, "Hos Arabasý", 700},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2049, "Hedef 5", 50},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2050, "Hedef 6", 50},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2051, "Hedef 7", 50},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2056, "Hedef 8", 50},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2362, "Satýþ Reyonu 3", 350},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2365, "Alýþveriþ Sepeti 2", 50},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2366, "Elbise Reyon 1", 350},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2367, "Elbise Reyon 2", 350},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2368, "Elbise Reyon 3", 350},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2375, "Elbise Reyon 4", 350},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2376, "Elbise Reyon 5", 350},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2379, "Elbise Reyon 6", 350},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2385, "Elbise Reyon 7", 350},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2387, "Elbise Reyon 8", 350},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2403, "Elbise Reyon 9", 700},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2412, "Maðaza Dedektörü", 1000},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2413, "Satýþ Reyonu 4", 300},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2414, "Satýþ Reyonu 5", 300},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2422, "Yazar Kasa 2", 300},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2443, "Sprunk Dolabý", 500},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2417, "Satýþ Reyonu 6", 300},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2448, "Satýþ Reyonu 7", 300},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2449, "Satýþ Reyonu 8", 300},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2457, "Renkli Reyon", 700},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2458, "Camlý Reyon 1", 400},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2459, "Camlý Reyon 2", 400},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2460, "Camlý Reyon 3", 400},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2461, "Camlý Reyon 4", 400},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2484, "Maket Gemi", 30},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2485, "Maket Araba", 30},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2486, "Maket Ucak", 100},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2487, "Uçurtma", 50},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2488, "Oyuncak Ambalajý 1", 20},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2490, "Oyuncak Ambalajý 2", 20},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2492, "Oyuncak Ambalajý 3", 60},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2493, "Oyuncak Ambalajý 4", 60},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2497, "Pembe Uçurtma", 50},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2498, "Mavi Uçurtma", 50},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2500, "Sprunk Otomatý", 400},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2501, "Oyuncak Ambalajý 5", 100},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2540, "Raf Ürünleri 1", 200},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2541, "Raf Ürünleri 2", 200},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2542, "Raf Ürünleri 3", 200},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2543, "Raf Ürünleri 4", 200},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2544, "Boþ Raf 1", 100},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2546, "Boþ Raf 2", 100},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2577, "Porno Reyonu", 300},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2578, "Porno Kasetleri 1", 100},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2579, "Porno Kasetleri 2", 100},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2581, "Porno Kasetleri 3", 200},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2582, "Porno Kasetleri 4", 300},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2584, "Dildo Reyonu", 350},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2585, "Porno Dergileri", 100},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2586, "Dildo Reyonu 2", 400},	
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2579, "Porno Kasetleri 2", 100},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2589, "Büyük Dana Eti", 700},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2590, "Et Kancasý", 50},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2593, "Aský Rafý", 50},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2611, "Mantar Tablo 1", 100},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2593, "Mantar Tablo 2", 100},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2614, "Çift Bayrak", 70},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2616, "Mantar Tablo 3", 100},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2620, "Ayakkabý Rafý 1", 300},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2621, "Ayakkabý Rafý 2", 300},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2622, "Ayakkabý Rafý 3", 300},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2624, "Ayakkabý Reyonu 1", 500},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2625, "Ayakkabý Reyonu 2", 300},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2626, "Maðaza Kasasý", 300},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2652, "Ayakkabý Kutularý", 60},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2680, "Zincir Kilit", 10},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2698, "Ayakkabý Reyonu 3", 300},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2711, "Dövme Cihazý", 250},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2712, "Süpürge", 30},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2726, "Lamba", 50},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2749, "Deodorant 1", 50},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2750, "Fön Makinesi", 100},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2751, "Saç Kremi", 50},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2752, "Deodorant 2", 50},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2770, "Cluckin Bell Çöp", 10},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2804, "Kýrmýzý Et 1", 10},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2806, "Kýrmýzý Et 2", 10},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2913, "Halter", 100},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2915, "Dumbell 1", 50},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2916, "Dumbell 2", 25},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2923, "Soda Kasasý", 50},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2958, "Siyah Bira", 5},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2961, "Yangýn Alarmý 2", 50},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2964, "Bilardo Masasý 1", 400},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2965, "Bilardo Üçgeni", 10},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2966, "Telefon 1", 50},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2967, "Telefon 2", 50},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2983, "Demir Vana", 250},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2992, "Sarý Delik", 2},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2994, "Temizlik Aracý", 150},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2995, "Sarý Top", 5},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2996, "Mavi Top", 5},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2997, "Kýrmýzý Top", 5},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2998, "Siyah Top", 5},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 2999, "Turuncu Top", 5},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 3000, "Yeþil Top", 5},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 3001, "Bordo Top", 5},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 3002, "Sarý Top 2", 5},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 3003, "Beyaz Top", 5},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 3004, "Bilardo Sopasý", 50},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 3028, "Katana", 250},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 3039, "Mýsýr Reyonu", 400},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 3041, "Manav Reyonu 2", 100},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 3077, "Kara Tahta", 170},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 11245, "Amerikan Bayraðý", 100},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 14774, "Sineklik", 50},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 18070, "U Masa Büyük", 500},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 18885, "Otomat 2", 400},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 19526, "Oyun Makinesi", 500},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 19587, "Meyve Kasasý", 20},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 19636, "Domates", 50},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 19637, "Biber", 50},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 19638, "Portakal", 50},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 19639, "Boþ Kasa", 50},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 19640, "Raflar", 150},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 19899, "Alet Dolabý 1", 200},
	{MOBILYA_TUR_SHOPITEMLERI, 9, 19900, "Alet Dolabý 2", 200},

	// casino itemleri

	{MOBILYA_TUR_CASINOITEMLERI, 9, 1515, "Kumar Otomat 1", 450},
	{MOBILYA_TUR_CASINOITEMLERI, 9, 1830, "Kumar Otomat 2", 450},
	{MOBILYA_TUR_CASINOITEMLERI, 9, 1831, "Kumar Otomat 3", 450},
	{MOBILYA_TUR_CASINOITEMLERI, 9, 1832, "Kumar Otomat 4", 450},
	{MOBILYA_TUR_CASINOITEMLERI, 9, 1833, "Kumar Otomat 5", 450},
	{MOBILYA_TUR_CASINOITEMLERI, 9, 1834, "Kumar Otomat 6", 450},
	{MOBILYA_TUR_CASINOITEMLERI, 9, 1835, "Kumar Otomat 7", 450},
	{MOBILYA_TUR_CASINOITEMLERI, 9, 1836, "Kumar Otomat 8", 1250},
	{MOBILYA_TUR_CASINOITEMLERI, 9, 1837, "Kumar Otomat 9", 1250},
	{MOBILYA_TUR_CASINOITEMLERI, 9, 1838, "Kumar Otomat 10", 450},
	{MOBILYA_TUR_CASINOITEMLERI, 9, 1851, "Zar 1", 10},
	{MOBILYA_TUR_CASINOITEMLERI, 9, 1852, "Zar 2", 10},
	{MOBILYA_TUR_CASINOITEMLERI, 9, 1853, "Kumar Taþý 1", 10},
	{MOBILYA_TUR_CASINOITEMLERI, 9, 1854, "Kumar Taþý 1", 10},
	{MOBILYA_TUR_CASINOITEMLERI, 9, 1855, "Kumar Taþý 1", 10},
	{MOBILYA_TUR_CASINOITEMLERI, 9, 1856, "Kumar Taþý 1", 10},
	{MOBILYA_TUR_CASINOITEMLERI, 9, 1857, "Kumar Taþý 1", 10},
	{MOBILYA_TUR_CASINOITEMLERI, 9, 1877, "Kumar Taþlarý 1", 50},
	{MOBILYA_TUR_CASINOITEMLERI, 9, 1878, "Kumar Taþlarý 2", 10},
	{MOBILYA_TUR_CASINOITEMLERI, 9, 1879, "Kumar Taþlarý 3", 10},
	{MOBILYA_TUR_CASINOITEMLERI, 9, 1880, "Kumar Taþlarý 4", 10},
	{MOBILYA_TUR_CASINOITEMLERI, 9, 1881, "Kumar Taþlarý 5", 10},
	{MOBILYA_TUR_CASINOITEMLERI, 9, 1882, "Kumar Taþlarý 6", 10},
	{MOBILYA_TUR_CASINOITEMLERI, 9, 1895, "Dart", 300},
	{MOBILYA_TUR_CASINOITEMLERI, 9, 1978, "Rulet Masasý", 1000},
	{MOBILYA_TUR_CASINOITEMLERI, 9, 1979, "Rulet Tekeri", 300},
	{MOBILYA_TUR_CASINOITEMLERI, 9, 2188, "BlackJack Masasý", 1000},
	{MOBILYA_TUR_CASINOITEMLERI, 9, 2189, "Boþ Kumar Masasý", 300},
	{MOBILYA_TUR_CASINOITEMLERI, 9, 2325, "Kumar Slotu 1", 700},
	{MOBILYA_TUR_CASINOITEMLERI, 9, 2618, "Kumar Slotu 2", 700},
	{MOBILYA_TUR_CASINOITEMLERI, 9, 2640, "Kumar Slotu 3", 700},
	{MOBILYA_TUR_CASINOITEMLERI, 9, 2681, "Oyun Makinasý 1", 750},
	{MOBILYA_TUR_CASINOITEMLERI, 9, 2754, "At Yarýþý", 750},
	{MOBILYA_TUR_CASINOITEMLERI, 9, 2778, "Oyun Makinasý 2", 750},
	{MOBILYA_TUR_CASINOITEMLERI, 9, 2779, "Oyun Makinasý 3", 750},
	{MOBILYA_TUR_CASINOITEMLERI, 9, 2785, "Kumar Slotlarý 1", 2500},
	{MOBILYA_TUR_CASINOITEMLERI, 9, 3437, "Iþýklandýrma", 1500},
	{MOBILYA_TUR_CASINOITEMLERI, 9, 3440, "Destek Kolon 1", 250},
	{MOBILYA_TUR_CASINOITEMLERI, 9, 3441, "Destek Kolon 2", 300},
	{MOBILYA_TUR_CASINOITEMLERI, 9, 3494, "Destek Kolon 3", 300},
	{MOBILYA_TUR_CASINOITEMLERI, 9, 3498, "Tahta Kolon 1", 100},
	{MOBILYA_TUR_CASINOITEMLERI, 9, 3499, "Tahta Kolon 2", 200},
	{MOBILYA_TUR_CASINOITEMLERI, 9, 14582, "Büyük Kumarhane Bar", 3000},
	{MOBILYA_TUR_CASINOITEMLERI, 9, 19474, "Boþ Kumar Masa 2", 200},

	// mobilyalar

	{MOBILYA_TUR_MOBILYALAR, 9, 939, "Dolaplý Tezgah", 100},
	{MOBILYA_TUR_MOBILYALAR, 9, 937, "Bölmeli Tezgah", 100},
	{MOBILYA_TUR_MOBILYALAR, 9, 941, "Masa", 200},
	{MOBILYA_TUR_MOBILYALAR, 9, 946, "Basketbol Potasý", 200},
	{MOBILYA_TUR_MOBILYALAR, 9, 1255, "Tahta Þezlong", 150},
	{MOBILYA_TUR_MOBILYALAR, 9, 1416, "Dolap", 200},
	{MOBILYA_TUR_MOBILYALAR, 9, 1417, "Dolap 2", 250},
	{MOBILYA_TUR_MOBILYALAR, 9, 1421, "Boþ Kutular", 50},
	{MOBILYA_TUR_MOBILYALAR, 9, 1429, "Televziyon", 300},
	{MOBILYA_TUR_MOBILYALAR, 9, 1645, "Açýk Þezlong", 150},
	{MOBILYA_TUR_MOBILYALAR, 9, 1647, "Kapalý Þezlong", 150},
	{MOBILYA_TUR_MOBILYALAR, 9, 1645, "Pervane", 200},
	{MOBILYA_TUR_MOBILYALAR, 9, 1702, "Kahverengi Deri Koltuk", 500},
	{MOBILYA_TUR_MOBILYALAR, 9, 1703, "Deri Koltuk", 500},
	{MOBILYA_TUR_MOBILYALAR, 9, 1706, "Mor Koltuk", 300},
	{MOBILYA_TUR_MOBILYALAR, 9, 1707, "Turuncu Koltuk", 300},
	{MOBILYA_TUR_MOBILYALAR, 9, 1709, "Uzun Köþeli Koltuk", 700},
	{MOBILYA_TUR_MOBILYALAR, 9, 1710, "Uzun Eski Koltuk", 300},
	{MOBILYA_TUR_MOBILYALAR, 9, 1712, "Eski Koltuk", 300},
	{MOBILYA_TUR_MOBILYALAR, 9, 1713, "Siyah Deri Koltuk", 600},
	{MOBILYA_TUR_MOBILYALAR, 9, 1730, "Gösteriþli Dolap", 200},
	{MOBILYA_TUR_MOBILYALAR, 9, 1731, "Gece Lambasý", 100},
	{MOBILYA_TUR_MOBILYALAR, 9, 1734, "Yuvarlak Avize", 200},
	{MOBILYA_TUR_MOBILYALAR, 9, 1737, "Yemek Masasý", 300},
	{MOBILYA_TUR_MOBILYALAR, 9, 1740, "Komidin", 100},
	{MOBILYA_TUR_MOBILYALAR, 9, 1742, "Kitaplýk", 400},
	{MOBILYA_TUR_MOBILYALAR, 9, 1743, "Televizyon Masasý", 200},
	{MOBILYA_TUR_MOBILYALAR, 9, 1744, "Raf", 80},
	{MOBILYA_TUR_MOBILYALAR, 9, 1753, "Üçlü Deri Koltuk", 600},
	{MOBILYA_TUR_MOBILYALAR, 9, 1754, "Tekli Deri Koltuk", 300},
	{MOBILYA_TUR_MOBILYALAR, 9, 1755, "Tekli Kamuflajlý Koltuk", 200},
	{MOBILYA_TUR_MOBILYALAR, 9, 1760, "Üçlü Kamuflajlý Koltuk", 300},
	{MOBILYA_TUR_MOBILYALAR, 9, 1756, "Koltuk", 300},
	{MOBILYA_TUR_MOBILYALAR, 9, 1757, "Koltuk 2", 300},
	{MOBILYA_TUR_MOBILYALAR, 9, 1758, "Tekli Koltuk", 200},
	{MOBILYA_TUR_MOBILYALAR, 9, 1759, "Tekli Koltuk 2", 200},
	{MOBILYA_TUR_MOBILYALAR, 9, 1761, "Koltuk 3", 300},
	{MOBILYA_TUR_MOBILYALAR, 9, 1758, "Tekli Koltuk 3", 200},
	{MOBILYA_TUR_MOBILYALAR, 9, 1763, "Koltuk 4", 300},
	{MOBILYA_TUR_MOBILYALAR, 9, 1764, "Koltuk 5", 300},
	{MOBILYA_TUR_MOBILYALAR, 9, 1765, "Tekli Koltuk 4", 200},
	{MOBILYA_TUR_MOBILYALAR, 9, 1766, "Koltuk 6", 300},
	{MOBILYA_TUR_MOBILYALAR, 9, 1767, "Tekli Koltuk 5", 200},
	{MOBILYA_TUR_MOBILYALAR, 9, 1768, "Koltuk 7", 300},
	{MOBILYA_TUR_MOBILYALAR, 9, 1769, "Tekli Koltuk 6", 200},
	{MOBILYA_TUR_MOBILYALAR, 9, 1770, "Desenli Masa", 100},
	{MOBILYA_TUR_MOBILYALAR, 9, 1784, "DVD", 50},
	{MOBILYA_TUR_MOBILYALAR, 9, 1813, "Ufak Masa", 110},
	{MOBILYA_TUR_MOBILYALAR, 9, 1814, "Ufak Masa 2", 110},
	{MOBILYA_TUR_MOBILYALAR, 9, 1815, "Ufak Masa 3", 110},
	{MOBILYA_TUR_MOBILYALAR, 9, 1816, "Ufak Masa 4", 110},
	{MOBILYA_TUR_MOBILYALAR, 9, 1817, "Ufak Masa 5", 110},
	{MOBILYA_TUR_MOBILYALAR, 9, 1818, "Ufak Masa 6", 110},
	{MOBILYA_TUR_MOBILYALAR, 9, 1819, "Ufak Masa 7", 110},
	{MOBILYA_TUR_MOBILYALAR, 9, 1820, "Ufak Masa 8", 110},
	{MOBILYA_TUR_MOBILYALAR, 9, 1821, "Ufak Masa 9", 110},
	{MOBILYA_TUR_MOBILYALAR, 9, 1822, "Ufak Masa 10", 110},
	{MOBILYA_TUR_MOBILYALAR, 9, 1823, "Ufak Masa 11", 110},
	{MOBILYA_TUR_MOBILYALAR, 9, 1892, "Dedektör", 400},
	{MOBILYA_TUR_MOBILYALAR, 9, 1958, "DJ Mix", 100},
	{MOBILYA_TUR_MOBILYALAR, 9, 1960, "Plak", 20},
	{MOBILYA_TUR_MOBILYALAR, 9, 1961, "Plak 2", 20},
	{MOBILYA_TUR_MOBILYALAR, 9, 1962, "Plak 3", 20},
	{MOBILYA_TUR_MOBILYALAR, 9, 2000, "Demir Dolap", 300},
	{MOBILYA_TUR_MOBILYALAR, 9, 2007, "Ýkili Demir Dolap", 600},
	{MOBILYA_TUR_MOBILYALAR, 9, 2014, "Mutfak Dolabý", 100},
	{MOBILYA_TUR_MOBILYALAR, 9, 2015, "Mutfak Dolabý 2", 100},
	{MOBILYA_TUR_MOBILYALAR, 9, 2016, "Mutfak Dolabý 3", 100},
	{MOBILYA_TUR_MOBILYALAR, 9, 2018, "Mutfak Dolabý 4", 100},
	{MOBILYA_TUR_MOBILYALAR, 9, 2020, "Çekmece Dolap", 300},
	{MOBILYA_TUR_MOBILYALAR, 9, 2021, "Komidin 2", 100},
	{MOBILYA_TUR_MOBILYALAR, 9, 2023, "Abajur", 400},
	{MOBILYA_TUR_MOBILYALAR, 9, 2024, "Geniþ Çaplý Masa", 200},
	{MOBILYA_TUR_MOBILYALAR, 9, 2025, "Giysi Dolabý", 300},
	{MOBILYA_TUR_MOBILYALAR, 9, 2026, "Avize 2", 200},
	{MOBILYA_TUR_MOBILYALAR, 9, 2029, "Ufak Masa 12", 110},
	{MOBILYA_TUR_MOBILYALAR, 9, 2030, "Yuvarlak Masa", 110},
	{MOBILYA_TUR_MOBILYALAR, 9, 2031, "Masa 2", 200},
	{MOBILYA_TUR_MOBILYALAR, 9, 2032, "Masa 3", 200},
	{MOBILYA_TUR_MOBILYALAR, 9, 2046, "Antika Dolap", 500},
	{MOBILYA_TUR_MOBILYALAR, 9, 2063, "Demir Raflar", 900},
	{MOBILYA_TUR_MOBILYALAR, 9, 2065, "Demir Çekmeceler", 200},
	{MOBILYA_TUR_MOBILYALAR, 9, 2066, "Tahta Çekmeceler", 500},
	{MOBILYA_TUR_MOBILYALAR, 9, 2067, "Gri Çekmeceler", 200},
	{MOBILYA_TUR_MOBILYALAR, 9, 2069, "Abajur 2", 400},
	{MOBILYA_TUR_MOBILYALAR, 9, 2074, "Ampul", 200},
	{MOBILYA_TUR_MOBILYALAR, 9, 2075, "Florasan", 500},
	{MOBILYA_TUR_MOBILYALAR, 9, 2076, "Avize", 300},
	{MOBILYA_TUR_MOBILYALAR, 9, 2078, "Müzik Kutusu", 400},
	{MOBILYA_TUR_MOBILYALAR, 9, 2082, "Ufak Masa 13", 110},
	{MOBILYA_TUR_MOBILYALAR, 9, 2083, "Ufak Masa 14", 110},
	{MOBILYA_TUR_MOBILYALAR, 9, 2108, "Abajur 3", 400},
	{MOBILYA_TUR_MOBILYALAR, 9, 2106, "Ufak Abajur", 400},
	{MOBILYA_TUR_MOBILYALAR, 9, 2109, "Yuvarlak Masa 2", 200},
	{MOBILYA_TUR_MOBILYALAR, 9, 2110, "Masa 4", 200},
	{MOBILYA_TUR_MOBILYALAR, 9, 2111, "Yuvarlak Masa 3", 200},
	{MOBILYA_TUR_MOBILYALAR, 9, 2112, "Masa 5", 200},
	{MOBILYA_TUR_MOBILYALAR, 9, 2114, "Basket Topu", 20},
	{MOBILYA_TUR_MOBILYALAR, 9, 2128, "Mutfak Dolabý 5", 200},
	{MOBILYA_TUR_MOBILYALAR, 9, 2129, "Mutfak Dolabý 6", 200},
	{MOBILYA_TUR_MOBILYALAR, 9, 2133, "Mutfak Dolabý 7", 100},
	{MOBILYA_TUR_MOBILYALAR, 9, 2134, "Mutfak Dolabý 8", 100},
	{MOBILYA_TUR_MOBILYALAR, 9, 2137, "Mutfak Dolabý 9", 100},
	{MOBILYA_TUR_MOBILYALAR, 9, 2138, "Mutfak Dolabý 10", 100},
	{MOBILYA_TUR_MOBILYALAR, 9, 2139, "Mutfak Dolabý 11", 100},
	{MOBILYA_TUR_MOBILYALAR, 9, 2140, "Mutfak Dolabý 12", 100},
	{MOBILYA_TUR_MOBILYALAR, 9, 2141, "Mutfak Dolabý 13", 100},
	{MOBILYA_TUR_MOBILYALAR, 9, 2142, "Mutfak Dolabý 14", 100},
	{MOBILYA_TUR_MOBILYALAR, 9, 2143, "Mutfak Dolabý 15", 100},
	{MOBILYA_TUR_MOBILYALAR, 9, 2145, "Mutfak Dolabý 16", 100},
	{MOBILYA_TUR_MOBILYALAR, 9, 2148, "Mutfak Dolabý 17", 100},
	{MOBILYA_TUR_MOBILYALAR, 9, 2151, "Mutfak Dolabý 18", 100},
	{MOBILYA_TUR_MOBILYALAR, 9, 2152, "Mutfak Dolabý 19", 100},
	{MOBILYA_TUR_MOBILYALAR, 9, 2153, "Mutfak Dolabý 20", 100},
	{MOBILYA_TUR_MOBILYALAR, 9, 2154, "Mutfak Dolabý 21", 100},
	{MOBILYA_TUR_MOBILYALAR, 9, 2154, "Mutfak Dolabý 22", 100},
	{MOBILYA_TUR_MOBILYALAR, 9, 2155, "Mutfak Dolabý 23", 100},
	{MOBILYA_TUR_MOBILYALAR, 9, 2156, "Mutfak Dolabý 24", 100},
	{MOBILYA_TUR_MOBILYALAR, 9, 2157, "Mutfak Dolabý 25", 100},
	{MOBILYA_TUR_MOBILYALAR, 9, 2158, "Mutfak Dolabý 26", 100},
	{MOBILYA_TUR_MOBILYALAR, 9, 2159, "Mutfak Dolabý 27", 100},
	{MOBILYA_TUR_MOBILYALAR, 9, 2160, "Mutfak Dolabý 28", 100},
	{MOBILYA_TUR_MOBILYALAR, 9, 2161, "Dosyalý Dolap", 250},
	{MOBILYA_TUR_MOBILYALAR, 9, 2162, "Dosyalý Dolap 2", 250},
	{MOBILYA_TUR_MOBILYALAR, 9, 2163, "Kapaklý Dolap", 250},
	{MOBILYA_TUR_MOBILYALAR, 9, 2164, "Dosyalý Dolap 3", 250},
	{MOBILYA_TUR_MOBILYALAR, 9, 2167, "Kapaklý Dolap 2", 250},
	{MOBILYA_TUR_MOBILYALAR, 9, 2168, "Kýrmýzý Bölme", 100},
	{MOBILYA_TUR_MOBILYALAR, 9, 2187, "Mavi Bölme", 100},
	{MOBILYA_TUR_MOBILYALAR, 9, 2191, "Dosyalý Dolap 4", 250},
	{MOBILYA_TUR_MOBILYALAR, 9, 2196, "Masa Lambasý", 250},
	{MOBILYA_TUR_MOBILYALAR, 9, 2197, "Demir Dolap 2", 250},
	{MOBILYA_TUR_MOBILYALAR, 9, 2199, "Dosyalý Dolap 4", 250},
	{MOBILYA_TUR_MOBILYALAR, 9, 2200, "Kapaklý Dolap 3", 250},
	{MOBILYA_TUR_MOBILYALAR, 9, 2204, "Bölmeli Dolap", 500},
	{MOBILYA_TUR_MOBILYALAR, 9, 2208, "Ofis Masasý", 700},
	{MOBILYA_TUR_MOBILYALAR, 9, 2234, "Ufak Masa 15", 110},
	{MOBILYA_TUR_MOBILYALAR, 9, 2235, "Ufak Masa 16", 110},
	{MOBILYA_TUR_MOBILYALAR, 9, 2257, "Tablo", 200},
	{MOBILYA_TUR_MOBILYALAR, 9, 2256, "Tablo 2", 200},
	{MOBILYA_TUR_MOBILYALAR, 9, 2258, "Tablo 3", 200},
	{MOBILYA_TUR_MOBILYALAR, 9, 2267, "Tablo 4", 200},
	{MOBILYA_TUR_MOBILYALAR, 9, 2289, "Tablo 5", 200},
	{MOBILYA_TUR_MOBILYALAR, 9, 2270, "Ufak Tablo", 100},
	{MOBILYA_TUR_MOBILYALAR, 9, 2271, "Ufak Tablo 2", 100},
	{MOBILYA_TUR_MOBILYALAR, 9, 2272, "Ufak Tablo 3", 100},
	{MOBILYA_TUR_MOBILYALAR, 9, 2273, "Ufak Tablo 4", 100},
	{MOBILYA_TUR_MOBILYALAR, 9, 2287, "Ufak Tablo 5", 100},
	{MOBILYA_TUR_MOBILYALAR, 9, 2288, "Ufak Tablo 6", 100},
	{MOBILYA_TUR_MOBILYALAR, 9, 2279, "Ufak Tablo 7", 100},
	{MOBILYA_TUR_MOBILYALAR, 9, 2275, "Ufak Tablo 8", 100},
	{MOBILYA_TUR_MOBILYALAR, 9, 2462, "Çoklu Raf", 500},
	{MOBILYA_TUR_MOBILYALAR, 9, 2463, "Çoklu Raf 2", 500},
	{MOBILYA_TUR_MOBILYALAR, 9, 2475, "Çoklu Raf 3", 500},
	{MOBILYA_TUR_MOBILYALAR, 9, 2482, "Çoklu Raf 4", 500},
	{MOBILYA_TUR_MOBILYALAR, 9, 2530, "Buzdolabý", 800},
	{MOBILYA_TUR_MOBILYALAR, 9, 2532, "Buzdolabý 2", 800},
	{MOBILYA_TUR_MOBILYALAR, 9, 2562, "Çalýþma Masasý", 500},
	{MOBILYA_TUR_MOBILYALAR, 9, 2568, "Çalýþma Masasý 2", 500},
	{MOBILYA_TUR_MOBILYALAR, 9, 2569, "Çalýþma Masasý 3", 500},
	{MOBILYA_TUR_MOBILYALAR, 9, 2570, "Çalýþma Masasý 4", 500},
	{MOBILYA_TUR_MOBILYALAR, 9, 2604, "Çalýþma Masasý 5", 500},
	{MOBILYA_TUR_MOBILYALAR, 9, 2608, "Çalýþma Masasý 6", 500},
	{MOBILYA_TUR_MOBILYALAR, 9, 3017, "Kapalý Mimar Haritasý", 100},
	{MOBILYA_TUR_MOBILYALAR, 9, 3111, "Açýk Mimar Haritasý", 100},
	{MOBILYA_TUR_MOBILYALAR, 9, 2919, "Siyah Çanta", 100},
	{MOBILYA_TUR_MOBILYALAR, 9, 11725, "Þömine", 1000},
	{MOBILYA_TUR_MOBILYALAR, 9, 19786, "LCD Televizyon", 900},
	{MOBILYA_TUR_MOBILYALAR, 9, 19915, "Ocak", 500},
	{MOBILYA_TUR_MOBILYALAR, 9, 19916, "Buzdolabý 3", 800},
	{MOBILYA_TUR_MOBILYALAR, 9, 19924, "Aspiratör", 150},
	{MOBILYA_TUR_MOBILYALAR, 9, 19926, "Mutfak Dolabý 29", 200},
	{MOBILYA_TUR_MOBILYALAR, 9, 19927, "Mutfak Dolabý 30", 200},
	{MOBILYA_TUR_MOBILYALAR, 9, 19928, "Mutfak Dolabý 31", 200},
	{MOBILYA_TUR_MOBILYALAR, 9, 19929, "Mutfak Dolabý 32", 200},
	{MOBILYA_TUR_MOBILYALAR, 9, 14820, "DJ Seti", 300},
	{MOBILYA_TUR_MOBILYALAR, 9, 2737, "Yazý Tahtasý", 260},

	// dekoratif
	{MOBILYA_TUR_DEKORATIF, 0, 2323, "Dolap - 2323", 250},
	{MOBILYA_TUR_DEKORATIF, 1, 2328, "Dolap - 2328", 120},
	{MOBILYA_TUR_DEKORATIF, 2, 2424, "Dolap - 2424", 150},
	{MOBILYA_TUR_DEKORATIF, 3, 2423, "Dolap - 2423", 120},
	{MOBILYA_TUR_DEKORATIF, 4, 2441, "Dolap - 2441", 150},
	{MOBILYA_TUR_DEKORATIF, 5, 2442, "Dolap - 2442", 120},
	{MOBILYA_TUR_DEKORATIF, 6, 936, "Ahþap dolap", 100},
	{MOBILYA_TUR_DEKORATIF, 7, 937, "Ahþap Dolap 2 ", 100},
	{MOBILYA_TUR_DEKORATIF, 8, 1580, "Kýrmýzý Drug Paketi", 100},
	{MOBILYA_TUR_DEKORATIF, 9, 1576, "Turuncu Drug Paketi", 100},
	{MOBILYA_TUR_DEKORATIF, 10, 1577, "Sarý Drug Paketi", 100},
	{MOBILYA_TUR_DEKORATIF, 11, 1578, "Yeþil Drug Paketi", 100},
	{MOBILYA_TUR_DEKORATIF, 13, 1808, "Su Sebili", 200},
	{MOBILYA_TUR_DEKORATIF, 14, 1667, "Þampanya Kadehi", 10},
	{MOBILYA_TUR_DEKORATIF, 15, 1510, "Kül Tabaðý", 20},
	{MOBILYA_TUR_DEKORATIF, 16, 19896, "Sigara Paketi Kýrmýzý-Beyaz", 2},
	{MOBILYA_TUR_DEKORATIF, 17, 19897, "Sigara Paketi Mavi-Beyaz", 2},
	{MOBILYA_TUR_DEKORATIF, 18, 2814, "Pizza Kutusu", 3},
	{MOBILYA_TUR_DEKORATIF, 19, 2768, "Cluckin Bell' Burger", 5},
	{MOBILYA_TUR_DEKORATIF, 20, 2837, "Hamburger ve Paketler", 3},
	{MOBILYA_TUR_DEKORATIF, 21, 2838, "Pizza Kutularý", 3},
	{MOBILYA_TUR_DEKORATIF, 22, 2840, "Burgershot Çöpleri", 3},
	{MOBILYA_TUR_DEKORATIF, 23, 2866, "Yiyecek Boþlarý", 5},
	{MOBILYA_TUR_DEKORATIF, 24, 2821, "Yiyecek Kutusu", 3},
	{MOBILYA_TUR_DEKORATIF, 25, 2858, "Çin Yemeði Kutusu", 3},
	{MOBILYA_TUR_DEKORATIF, 26, 2821, "Yiyecek Kutusu 2", 3},
	{MOBILYA_TUR_DEKORATIF, 31, 19611, "Mikrofon Standý", 100},
	{MOBILYA_TUR_DEKORATIF, 32, 19617, "Gold Record", 2500},
	{MOBILYA_TUR_DEKORATIF, 33, 1665, "Kül Tabaðý ve Cigara", 30},
	{MOBILYA_TUR_DEKORATIF, 34, 19466, "Yarý Saydam Cam", 200},
	{MOBILYA_TUR_DEKORATIF, 35, 1649, "Siyah Kenarlý Cam", 200},
	{MOBILYA_TUR_DEKORATIF, 36, 2828, "Fotoðraflar", 25},
	{MOBILYA_TUR_DEKORATIF, 37, 2827, "Gazeteler", 25},
	{MOBILYA_TUR_DEKORATIF, 38, 2826, "Dergiler", 25},
	{MOBILYA_TUR_DEKORATIF, 39, 2825, "Çeþitli Kitaplar", 15},
	{MOBILYA_TUR_DEKORATIF, 40, 2894, "Kitap", 10},
	{MOBILYA_TUR_DEKORATIF, 41, 2725, "Tabure", 5},
	{MOBILYA_TUR_DEKORATIF, 42, 2751, "Paket", 5},
	{MOBILYA_TUR_DEKORATIF, 43, 2767, "Boþ Tepsi", 10},
	{MOBILYA_TUR_DEKORATIF, 44, 2221, "Çörek Tepsisi", 15},
	{MOBILYA_TUR_DEKORATIF, 45, 2222, "Çörek Tepsisi 2", 15},
	{MOBILYA_TUR_DEKORATIF, 46, 2223, "Çörek Tepsisi 3", 15},
	{MOBILYA_TUR_DEKORATIF, 47, 2212, "Tepsi", 15},
	{MOBILYA_TUR_DEKORATIF, 48, 2213, "Burgershot Tepsisi ", 15},
	{MOBILYA_TUR_DEKORATIF, 49, 2214, "Burgershot Tepsisi 2", 15},
	{MOBILYA_TUR_DEKORATIF, 50, 2218, "Pizza Tabaðý", 15},
	{MOBILYA_TUR_DEKORATIF, 51, 2219, "Pizza Tabaðý 2", 15},
	{MOBILYA_TUR_DEKORATIF, 52, 2220, "Pizza Tabaðý/Kapalý Kutu", 15},
	{MOBILYA_TUR_DEKORATIF, 53, 19473, "Fide Esrar", 100},
	{MOBILYA_TUR_DEKORATIF, 54, 19636, "Kýrmýzý Elma Kasasý", 20},
	{MOBILYA_TUR_DEKORATIF, 55, 19637, "Yeþil Elma Kasasý", 20},
	{MOBILYA_TUR_DEKORATIF, 56, 19638, "Turuncu Elma Kasasý", 20},
	{MOBILYA_TUR_DEKORATIF, 57, 19639, "Boþ Kasa", 10},
	{MOBILYA_TUR_DEKORATIF, 58, 2773, "Kýrmýzý Ýp", 50},
	{MOBILYA_TUR_DEKORATIF, 59, 1485, "Sigara", 50},
	{MOBILYA_TUR_DEKORATIF, 60, 1550, "Para-Sýrt Çantasý", 500},
	{MOBILYA_TUR_DEKORATIF, 61, 19471, "For Sale", 50},
	{MOBILYA_TUR_DEKORATIF, 62, 2558, "Kapalý Perdeler", 40},
	{MOBILYA_TUR_DEKORATIF, 63, 11245, "ABD Bayraðý", 130},
	{MOBILYA_TUR_DEKORATIF, 65, 19632, "Yanan Odunlar", 120},
	{MOBILYA_TUR_DEKORATIF, 66, 2435, "Trade Shop", 120},
	{MOBILYA_TUR_DEKORATIF, 67, 2434, "Kabin Köþesi", 120},
	{MOBILYA_TUR_DEKORATIF, 69, 625, "Aðaç 1", 5},
	{MOBILYA_TUR_DEKORATIF, 70, 630, "Aðaç 2", 5},
	{MOBILYA_TUR_DEKORATIF, 71, 644, "Aðaç 3", 5},
	{MOBILYA_TUR_DEKORATIF, 72, 1361, "Küçük Saksý", 50},
	{MOBILYA_TUR_DEKORATIF, 73, 2001, "Saksý Bitkisi 1", 5},
	{MOBILYA_TUR_DEKORATIF, 74, 2241, "Saksý Bitkisi 2", 5},
	{MOBILYA_TUR_DEKORATIF, 75, 2245, "Saksý Bitkisi 3", 5},
	{MOBILYA_TUR_DEKORATIF, 76, 2811, "Saksý Bitkisi 4", 5},
	{MOBILYA_TUR_DEKORATIF, 77, 2670, "Yer Atýklarý 1", 20},
	{MOBILYA_TUR_DEKORATIF, 78, 2671, "Yer Atýklarý 2", 20},
	{MOBILYA_TUR_DEKORATIF, 79, 2672, "Yer Atýklarý 3", 20},
	{MOBILYA_TUR_DEKORATIF, 80, 2673, "Yer Atýklarý 4", 20},
	{MOBILYA_TUR_DEKORATIF, 81, 2674, "Yer Atýklarý 5", 20},
	{MOBILYA_TUR_DEKORATIF, 82, 2675, "Yer Atýklarý 6", 20},
	{MOBILYA_TUR_DEKORATIF, 83, 2676, "Yer Atýklarý 7", 20},
	{MOBILYA_TUR_DEKORATIF, 84, 2677, "Yer Atýklarý 8", 20},
	{MOBILYA_TUR_DEKORATIF, 85, 2342, "Yer Atýklarý 9", 20},
	{MOBILYA_TUR_DEKORATIF, 86, 11686,  "Bar Önü", 2500},
	{MOBILYA_TUR_DEKORATIF, 88, 11725,  "Þömine 1", 1500},
	{MOBILYA_TUR_DEKORATIF, 89, 11724, "Þömine 2", 1500},
	{MOBILYA_TUR_DEKORATIF, 90, 997, "Bariyer", 500},
	{MOBILYA_TUR_DEKORATIF, 91, 3850, "Þeffaf Cam", 250},
	{MOBILYA_TUR_DEKORATIF, 92, 19624, "Valiz 5", 30},
	{MOBILYA_TUR_DEKORATIF, 93, 1738, "Kalorifer", 100},
	{MOBILYA_TUR_DEKORATIF, 94, 2146, "Sedye", 50},
	{MOBILYA_TUR_DEKORATIF, 95, 2609, " Eski Tür Kasa", 250},
	{MOBILYA_TUR_DEKORATIF, 96, 2919, "Siyah Çanta", 150},
	{MOBILYA_TUR_DEKORATIF, 97, 1665, "Sigara, küllük ve umutlar", 5},
	{MOBILYA_TUR_DEKORATIF, 98, 2891, "Paket", 20},
	{MOBILYA_TUR_DEKORATIF, 99, 19273, "Güvenlik Kontrol Sistemi  ", 150},
	{MOBILYA_TUR_DEKORATIF, 100, 2663, "Zarf", 5},
	{MOBILYA_TUR_DEKORATIF, 101, 2222, "Dedektifler için Çörek Paketi", 10},
	{MOBILYA_TUR_DEKORATIF, 107, 19619, "Kilitli Duvar", 1500},
	{MOBILYA_TUR_DEKORATIF, 108, 2645, "Pizza Menüsü/Poster", 200},
	{MOBILYA_TUR_DEKORATIF, 109, 2453, "Pizzalar", 100},
	{MOBILYA_TUR_DEKORATIF, 110, 2439, "Pizzastack Köþesi", 500},
	{MOBILYA_TUR_DEKORATIF, 111, 2451, "Pizza Ocaðý", 500},
	{MOBILYA_TUR_DEKORATIF, 112, 19054, "Paket 1", 10},
	{MOBILYA_TUR_DEKORATIF, 113, 19055, "Paket 2", 10},
	{MOBILYA_TUR_DEKORATIF, 114, 19056, "Paket 3", 10},
	{MOBILYA_TUR_DEKORATIF, 115, 19057, "Paket 4", 10},
	{MOBILYA_TUR_DEKORATIF, 116, 19058, "Paket 5", 10},
	{MOBILYA_TUR_DEKORATIF, 117, 19059, "Noel Topu 1", 10},
	{MOBILYA_TUR_DEKORATIF, 118, 19060, "Noel Topu 2", 10},
	{MOBILYA_TUR_DEKORATIF, 119, 19061, "Noel Topu 3", 10},
	{MOBILYA_TUR_DEKORATIF, 120, 19062, "Noel Topu 4", 10},
	{MOBILYA_TUR_DEKORATIF, 121, 19063, "Noel Topu 5", 10},
	{MOBILYA_TUR_DEKORATIF, 123, 1513, "Duvar Nesneleri Tutucu", 140},
	{MOBILYA_TUR_DEKORATIF, 124, 1481, "Barbekü 2", 300},
	{MOBILYA_TUR_DEKORATIF, 125, 3120, "Basketbol Topu", 50},
	{MOBILYA_TUR_DEKORATIF, 126, 2330, "Dolap", 140},
	{MOBILYA_TUR_DEKORATIF, 127, 1417, "Dolap 2", 140},
	{MOBILYA_TUR_DEKORATIF, 128, 2708, "Dolap 3", 140},
	{MOBILYA_TUR_DEKORATIF, 129, 2573, "Dolap 4", 500},
	{MOBILYA_TUR_DEKORATIF, 130, 2087, "Ahþap Þifonyer", 250},
	{MOBILYA_TUR_DEKORATIF, 131, 2020, "Dolap 2", 200},
	{MOBILYA_TUR_DEKORATIF, 132, 1743, "Dolap 3", 200},
	{MOBILYA_TUR_DEKORATIF, 133, 2385, "Market Dolabý",230},
	{MOBILYA_TUR_DEKORATIF, 134, 3497, "Ahþap Pano",340},
	{MOBILYA_TUR_DEKORATIF, 135, 2629, "Halter Sehpasý",590},
	{MOBILYA_TUR_DEKORATIF, 136, 2630, "Koþu Bisikleti",540},
	{MOBILYA_TUR_DEKORATIF, 137, 2964, "Bilardo Masasý", 580},
	{MOBILYA_TUR_DEKORATIF, 138, 14651, "Lüks Bilardo Masasý", 1350},
	{MOBILYA_TUR_DEKORATIF, 139, 1689, "Bar Masasý", 390},
	{MOBILYA_TUR_DEKORATIF, 140, 2027, "Bar Masasý 2", 390},
	{MOBILYA_TUR_DEKORATIF, 141, 2614, "Amerikan Bayraðý",135},
	{MOBILYA_TUR_DEKORATIF, 142, 2204, "Dolaplý Raf",535},
	{MOBILYA_TUR_DEKORATIF, 143, 1742, "Kütüphane 1",260},
	{MOBILYA_TUR_DEKORATIF, 144, 2161, "Kütüphane  2",250},
	{MOBILYA_TUR_DEKORATIF, 145, 1736, "Geyik",385},
	{MOBILYA_TUR_DEKORATIF, 146, 2833, "Halý 1",210},
	{MOBILYA_TUR_DEKORATIF, 147, 2834, "Halý 2",180},
	{MOBILYA_TUR_DEKORATIF, 148, 2835, "Halý 3",180},
	{MOBILYA_TUR_DEKORATIF, 149, 2836, "Halý 4",180},
	{MOBILYA_TUR_DEKORATIF, 150, 2841, "Halý 5",180},
	{MOBILYA_TUR_DEKORATIF, 152, 19816, "Oksijen tüpü", 200},
	{MOBILYA_TUR_DEKORATIF, 153, 1549, "Gri Çöp", 100},
	{MOBILYA_TUR_DEKORATIF, 154, 19831, "Barbue", 100},
	{MOBILYA_TUR_DEKORATIF, 155, 11729, "Kapalý dolap", 120},
	{MOBILYA_TUR_DEKORATIF, 156, 11730, "Açýk dolap", 120},
	{MOBILYA_TUR_DEKORATIF, 157, 11712, "Haç", 50},
	{MOBILYA_TUR_DEKORATIF, 158, 19623, "Fotoðraf Makinesi", 100},
	{MOBILYA_TUR_DEKORATIF, 159, 19339, "Odun", 200},
	{MOBILYA_TUR_DEKORATIF, 160, 1428, "Taþýnabilir merdiven", 100},
	{MOBILYA_TUR_DEKORATIF, 161, 1212, "Para deste", 10},
	{MOBILYA_TUR_DEKORATIF, 162, 1073, "Tekerlek", 40},
	{MOBILYA_TUR_DEKORATIF, 163, 19320, "Cadýlar Bayramý Kabak", 10},
	{MOBILYA_TUR_DEKORATIF, 164, 19076, "Yýlbaþý Aðacý", 50},
	{MOBILYA_TUR_DEKORATIF, 165, 14882, "Boru", 150},
	{MOBILYA_TUR_DEKORATIF, 166, 19088, "Halat 3", 20},
	{MOBILYA_TUR_DEKORATIF, 167, 19087, "Halat 2", 20},
	{MOBILYA_TUR_DEKORATIF, 168, 19089, "Halat 1", 20},
	{MOBILYA_TUR_DEKORATIF, 169, 1572, "Sepet 1", 20},
	{MOBILYA_TUR_DEKORATIF, 170, 1349, "Sepet 2", 20},
	{MOBILYA_TUR_DEKORATIF, 171, 1369, "Tekerlekli Sandalye", 20},
	{MOBILYA_TUR_DEKORATIF, 172, 334, "Cop", 500},
	{MOBILYA_TUR_DEKORATIF, 173, 2060, "Kum torbasý", 150},
	{MOBILYA_TUR_DEKORATIF, 174, 19468, "Kova", 50},
	{MOBILYA_TUR_DEKORATIF, 175, 19092, "Yeþil Süs", 50},
	{MOBILYA_TUR_DEKORATIF, 176, 3470, "Havalandýrma Sistemi", 2500},
	{MOBILYA_TUR_DEKORATIF, 177, 1579, "Mavi Ambalaj",  400},
	{MOBILYA_TUR_DEKORATIF, 178, 2057, "Paslý Tanker", 20},
	{MOBILYA_TUR_DEKORATIF, 179, 2057, "Demir Kutu", 100},
	{MOBILYA_TUR_DEKORATIF, 180, 1650, "Kýrmýzý Teneke", 100},
	{MOBILYA_TUR_DEKORATIF, 181, 1509, "Yeþil Þiþe 1", 100},
	{MOBILYA_TUR_DEKORATIF, 182, 1512, "Yeþil Þiþe 2", 100},
	{MOBILYA_TUR_DEKORATIF, 183, 1520, "Viski Þiþesi", 100},
	{MOBILYA_TUR_DEKORATIF, 184, 1543, "Bira Þiþesi", 100},
	{MOBILYA_TUR_DEKORATIF, 185, 1544, "Sarý Þiþe", 100},
	{MOBILYA_TUR_DEKORATIF, 186, 1546, "Karton Sprunk Baradðý", 50},
	{MOBILYA_TUR_DEKORATIF, 187, 1551, "Yeþil Þiþe 3", 100},
	{MOBILYA_TUR_DEKORATIF, 188, 16668, "Beyaz Þiþe", 100},
	{MOBILYA_TUR_DEKORATIF, 189, 16669, "Yeþil Þiþe 4", 100},
	{MOBILYA_TUR_DEKORATIF, 190, 19818, "Cam Bardak", 100},
	{MOBILYA_TUR_DEKORATIF, 191, 19819, "Kokteyl Bardaðý", 100},
	{MOBILYA_TUR_DEKORATIF, 192, 19835, "Kahve Bardaðý", 20},
	{MOBILYA_TUR_DEKORATIF, 193, 19820, "Alkol Þiþesi 1", 20},
	{MOBILYA_TUR_DEKORATIF, 194, 19821, "Alkol Þiþesi 2", 20},
	{MOBILYA_TUR_DEKORATIF, 195, 19822, "Alkol Þiþesi 3", 20},
	{MOBILYA_TUR_DEKORATIF, 196, 19823, "Alkol Þiþesi 4", 20},
	{MOBILYA_TUR_DEKORATIF, 197, 19824, "Alkol Þiþesi 5", 20},
	{MOBILYA_TUR_DEKORATIF, 198, 2875, "Zip", 200},
	{MOBILYA_TUR_DEKORATIF, 199, 2876, "Sport", 230},
	{MOBILYA_TUR_DEKORATIF, 200, 2879, "Ds", 210},
	{MOBILYA_TUR_DEKORATIF, 201, 2878, "Victim", 220},
	{MOBILYA_TUR_DEKORATIF, 202, 741, "Vazo 1", 50},
	{MOBILYA_TUR_DEKORATIF, 203, 742, "Vazo 2", 50},
	{MOBILYA_TUR_DEKORATIF, 204, 743, "Vazo 3", 50},
	{MOBILYA_TUR_DEKORATIF, 205, 741, "Vazo 4", 50},
	{MOBILYA_TUR_DEKORATIF, 206, 14705, "Vazo 5", 30},
	{MOBILYA_TUR_DEKORATIF, 207, 18659, "Graffiti Groove", 10},
	{MOBILYA_TUR_DEKORATIF, 208, 18660, "Graffiti Seville Families", 10},
	{MOBILYA_TUR_DEKORATIF, 209, 18661, "Graffiti varrio Aztecas", 10},
	{MOBILYA_TUR_DEKORATIF, 210, 18662, "Graffiti Kilo Tray Ballas", 10},
	{MOBILYA_TUR_DEKORATIF, 211, 18663, "Graffiti San Fierro Rifa", 10},
	{MOBILYA_TUR_DEKORATIF, 212, 18664, "Graffiti Temple Drive Ballas", 10},
	{MOBILYA_TUR_DEKORATIF, 213, 18665, "Graffiti Vagos", 10},
	{MOBILYA_TUR_DEKORATIF, 214, 18666, "Graffiti Front Yard Ballas", 10},
	{MOBILYA_TUR_DEKORATIF, 215, 18667, "Graffiti Rollin Heights Ballas", 10},
	{MOBILYA_TUR_DEKORATIF, 216, 1529, "Graffiti Ballas-Groove", 10},
	{MOBILYA_TUR_DEKORATIF, 217, 1530, "Graffiti Aztecas-Groove", 10},
	{MOBILYA_TUR_DEKORATIF, 218, 1531, "Graffiti Aztecas-Groove", 10},
	{MOBILYA_TUR_DEKORATIF_IKI, 219, 2695, "Rapçi Posteri", 40},
	{MOBILYA_TUR_DEKORATIF_IKI, 220, 2696, "Köpek Poster", 40},
	{MOBILYA_TUR_DEKORATIF_IKI, 221, 2691, "Poster con vari rapper", 40},
	{MOBILYA_TUR_DEKORATIF_IKI, 222, 2685, "Rap Poster", 10},
	{MOBILYA_TUR_DEKORATIF_IKI, 223, 2687, "Poster 1", 10},
	{MOBILYA_TUR_DEKORATIF_IKI, 224, 2684, "Poster 2", 10},
	{MOBILYA_TUR_DEKORATIF_IKI, 225, 2662, "BOBO Poster", 10},
	{MOBILYA_TUR_DEKORATIF_IKI, 226, 2615, "Poster 3", 60},
	{MOBILYA_TUR_DEKORATIF_IKI, 227, 2580, "XXX Posteri 1", 50},
	{MOBILYA_TUR_DEKORATIF_IKI, 228, 2587, "XXX Posteri 2", 50},
	{MOBILYA_TUR_DEKORATIF_IKI, 229, 2588, "XXX Posteri 3", 50},
	{MOBILYA_TUR_DEKORATIF_IKI, 230, 2667, "Menü 1", 30},
	{MOBILYA_TUR_DEKORATIF_IKI, 231, 2668, "Menü 2", 30},
	{MOBILYA_TUR_DEKORATIF_IKI, 232, 2666, "Menü 3", 30},
	{MOBILYA_TUR_DEKORATIF_IKI, 233, 2665, "Bütün Menü", 30},
	{MOBILYA_TUR_DEKORATIF_IKI, 234, 2599, "Sex Shop Tabela", 30},
	{MOBILYA_TUR_DEKORATIF_IKI, 235, 3035, "Çöp Kutusu 1", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 236, 1415, "Çöp Kutusu 2", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 237, 1439, "Çöp Kutusu 3", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 238, 1329, "Çöp Kutusu 4", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 239, 1330, "Çöp Kutusu 5", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 240, 1345, "Çöp Kutusu 6", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 241, 1333, "Çöp Kutusu 7", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 242, 1334, "Çöp Kutusu 8", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 243, 1344, "Çöp Kutusu 9", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 244, 1331, "Çöp Kutusu 10", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 245, 1332, "Çöp Kutusu 11", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 246, 1409, "Çöp Kutusu 12", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 247, 1328, "Çöp Kutusu 13", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 248, 2613, "Çöp Kutusu 14", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 249, 1337, "Çöp Kutusu 15", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 250, 1339, "Çöp Kutusu 16", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 251, 1328, "Çöp Kutusu 17", 30},
	{MOBILYA_TUR_DEKORATIF_IKI, 252, 1330, "Çöp Kutusu 18", 30},
	{MOBILYA_TUR_DEKORATIF_IKI, 253, 1329, "Çöp Kutusu 19", 30},
	{MOBILYA_TUR_DEKORATIF_IKI, 254, 19825, "Duvar Saati", 20},
	{MOBILYA_TUR_DEKORATIF_IKI, 255, 2391, "Bej Pantolon", 50},
	{MOBILYA_TUR_DEKORATIF_IKI, 256, 2819, "Giysiler 1", 50},
	{MOBILYA_TUR_DEKORATIF_IKI, 257, 2843, "Giysiler 2", 50},
	{MOBILYA_TUR_DEKORATIF_IKI, 258, 2844, "Gri, beyaz ve kýrmýzý kýyafetleri", 50},
	{MOBILYA_TUR_DEKORATIF_IKI, 259, 2845, "Mavi ve Sarý Elbiseler", 50},
	{MOBILYA_TUR_DEKORATIF_IKI, 260, 2846, "Beyaz ve Gri Giysiler", 50},
	{MOBILYA_TUR_DEKORATIF_IKI, 261, 2869, "Gri Sweatshirt", 50},
	{MOBILYA_TUR_DEKORATIF_IKI, 262, 2704, "Turuncu ve Siyah Sweatshirt", 50},
	{MOBILYA_TUR_DEKORATIF_IKI, 263, 2705, "7 Numara", 90},
	{MOBILYA_TUR_DEKORATIF_IKI, 264, 2706, "69 Numara", 90},
	{MOBILYA_TUR_DEKORATIF_IKI, 265, 2374, "Mavi", 50},
	{MOBILYA_TUR_DEKORATIF_IKI, 266, 2377, "Kot pantolon", 50},
	{MOBILYA_TUR_DEKORATIF_IKI, 267, 2378, "Kot pantolon", 50},
	{MOBILYA_TUR_DEKORATIF_IKI, 268, 2383, "Giysi", 50},
	{MOBILYA_TUR_DEKORATIF_IKI, 269, 2384, "Bej Kot Pantolonlar", 50},
	{MOBILYA_TUR_DEKORATIF_IKI, 270, 371, "Sýrt Çantasý", 50},
	{MOBILYA_TUR_DEKORATIF_IKI, 271, 2391, "Giysi 1", 200},
	{MOBILYA_TUR_DEKORATIF_IKI, 272, 2396, "Giysi 2", 200},
	{MOBILYA_TUR_DEKORATIF_IKI, 273, 2399, "Giysi 3", 200},
	{MOBILYA_TUR_DEKORATIF_IKI, 274, 11735, "Çizme", 50},
	{MOBILYA_TUR_DEKORATIF_IKI, 275, 18094, "Giysi Yýðýný", 150},
	{MOBILYA_TUR_DEKORATIF_IKI, 276, 2386, "Pantolon Yýðýný", 50},
	{MOBILYA_TUR_DEKORATIF_IKI, 277, 2411, "Ahþap Manken", 120},
	{MOBILYA_TUR_DEKORATIF_IKI, 278, 2407, "Plastik Manken", 120},
	{MOBILYA_TUR_DEKORATIF_IKI, 279, 2408, "Manken", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 280, 19064, "Noel Þapkasý 1", 20},
	{MOBILYA_TUR_DEKORATIF_IKI, 281, 19065, "Noel Þapkasý 2", 20},
	{MOBILYA_TUR_DEKORATIF_IKI, 282, 19066, "Noel Þapkasý 3", 20},
	{MOBILYA_TUR_DEKORATIF_IKI, 283, 19472, "Gaz Maskesi", 500},
	{MOBILYA_TUR_DEKORATIF_IKI, 284, 918, "Mavi Tüp 1", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 285, 925, "Kafesteki Variller", 200},
	{MOBILYA_TUR_DEKORATIF_IKI, 286, 930, "Altýlý Tüp 1", 150},
	{MOBILYA_TUR_DEKORATIF_IKI, 287, 1217, "Paslý Varil", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 288, 1218, "Atýk Varili", 300},
	{MOBILYA_TUR_DEKORATIF_IKI, 289, 1222, "Turunç Varil", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 290, 1225, "Patlayýcý Varil", 300},
	{MOBILYA_TUR_DEKORATIF_IKI, 291, 3632, "Kýrmýzý Varil", 250},
	{MOBILYA_TUR_DEKORATIF_IKI, 292, 3633, "Dörtlü Kýrmýzý Varil", 600},
	{MOBILYA_TUR_DEKORATIF_IKI, 293, 931, "Varil Kafesi", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 294, 1370, "Mavi Tüp 2", 40},
	{MOBILYA_TUR_DEKORATIF_IKI, 295, 1348, "Sekizli Tüp", 80},
	{MOBILYA_TUR_DEKORATIF_IKI, 296, 1639, "Tenis filesi", 250},
	{MOBILYA_TUR_DEKORATIF_IKI, 297, 1640, "Beyaz Yeþil Plaj Havlusu", 50},
	{MOBILYA_TUR_DEKORATIF_IKI, 298, 1641, "Turkuaz Plaj Havlusu", 50},
	{MOBILYA_TUR_DEKORATIF_IKI, 299, 1642, "Kýrmýzý Plaj Havlusu", 50},
	{MOBILYA_TUR_DEKORATIF_IKI, 300, 1644, "Güneþ Kremi", 20},
	{MOBILYA_TUR_DEKORATIF_IKI, 301, 1645, "Þezlong 1", 50},
	{MOBILYA_TUR_DEKORATIF_IKI, 302, 1646, "Þezlong 2", 50},
	{MOBILYA_TUR_DEKORATIF_IKI, 303, 1647, "Þezlong 3", 50},
	{MOBILYA_TUR_DEKORATIF_IKI, 304, 2404, "Surf Tahtasý 1", 125},
	{MOBILYA_TUR_DEKORATIF_IKI, 305, 2405, "Surf Tahtasý 2", 125},
	{MOBILYA_TUR_DEKORATIF_IKI, 306, 2406, "Surf Tahtasý 3", 125},
	{MOBILYA_TUR_DEKORATIF_IKI, 307, 2255, "Tablo 1", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 308, 2256, "Tablo 2", 120},
	{MOBILYA_TUR_DEKORATIF_IKI, 309, 2257, "Tablo 3", 200},
	{MOBILYA_TUR_DEKORATIF_IKI, 310, 2258, "Tablo 4", 300},
	{MOBILYA_TUR_DEKORATIF_IKI, 311, 2259, "Tablo 5", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 312, 2260, "Tablo 6", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 313, 2261, "Tablo 7", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 314, 2262, "Tablo 8", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 315, 2263, "Tablo 9", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 316, 2264, "Tablo 10", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 317, 2265, "Tablo 11", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 318, 2266, "Tablo 12", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 319, 2267, "Tablo 13", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 320, 2268, "Tablo 14", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 321, 2269, "Tablo 15", 210},
	{MOBILYA_TUR_DEKORATIF_IKI, 322, 2270, "Tablo 16", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 323, 2271, "Tablo 17", 110},
	{MOBILYA_TUR_DEKORATIF_IKI, 324, 2272, "Tablo 18", 200},
	{MOBILYA_TUR_DEKORATIF_IKI, 325, 2273 ,"Tablo 19", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 326, 2274, "Tablo 20", 106},
	{MOBILYA_TUR_DEKORATIF_IKI, 327, 2275, "Tablo 21", 111},
	{MOBILYA_TUR_DEKORATIF_IKI, 328, 2276, "Tablo 22", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 329, 2277, "Tablo 23", 106},
	{MOBILYA_TUR_DEKORATIF_IKI, 330, 2278, "Tablo 24", 130},
	{MOBILYA_TUR_DEKORATIF_IKI, 331, 2279, "Tablo 25", 120},
	{MOBILYA_TUR_DEKORATIF_IKI, 332, 2280, "Tablo 26", 110},
	{MOBILYA_TUR_DEKORATIF_IKI, 333, 2281, "Tablo 27", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 334, 2282, "Tablo 28", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 335, 2283, "Tablo 29", 110},
	{MOBILYA_TUR_DEKORATIF_IKI, 336, 2284, "Tablo 30", 300},
	{MOBILYA_TUR_DEKORATIF_IKI, 337, 2285, "Tablo 31", 700},
	{MOBILYA_TUR_DEKORATIF_IKI, 338, 2286, "Tablo 32", 110},
	{MOBILYA_TUR_DEKORATIF_IKI, 339, 2287, "Tablo 33", 400},
	{MOBILYA_TUR_DEKORATIF_IKI, 340, 2288, "Tablo 34", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 341, 2289, "Tablo 35", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 342, 3630, "12'li Kutu", 400},
	{MOBILYA_TUR_DEKORATIF_IKI, 343, 2972, "Mavi Kutu", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 344, 2973, "Fileli Kutu", 150},
	{MOBILYA_TUR_DEKORATIF_IKI, 345, 2795, "F Giriþi", 150},
	{MOBILYA_TUR_DEKORATIF_IKI, 346, 1264, "Çöp Torbasý", 20},
	{MOBILYA_TUR_DEKORATIF_IKI, 347, 1271, "Tahta Kutu", 30},
	{MOBILYA_TUR_DEKORATIF_IKI, 348, 2040, "Varil", 30},
	{MOBILYA_TUR_DEKORATIF_IKI, 349, 2328, "Tahta Kutular ve Koliler", 30},
	{MOBILYA_TUR_DEKORATIF_IKI, 350, 2654,  "Ayakkabý Kutularý (Para için)", 30},
	{MOBILYA_TUR_DEKORATIF_IKI, 351, 2969, "Tahta Kasa", 30},
	{MOBILYA_TUR_DEKORATIF_IKI, 352, 1558, "Paletli Koli", 30},
	{MOBILYA_TUR_DEKORATIF_IKI, 353, 1685, "Palet ve Tuðlalar", 30},
	{MOBILYA_TUR_DEKORATIF_IKI, 354, 2065, "Arþiv Dolabý 1", 50},
	{MOBILYA_TUR_DEKORATIF_IKI, 355, 2066, "Arþiv Dolabý 2", 50},
	{MOBILYA_TUR_DEKORATIF_IKI, 356, 2067, "Arþiv Dolabý 3", 50},
	{MOBILYA_TUR_DEKORATIF_IKI, 357, 939, "Raftaki Koliler 1", 120},
	{MOBILYA_TUR_DEKORATIF_IKI, 358, 942, "Raftaki Koliler 2", 120},
	{MOBILYA_TUR_DEKORATIF_IKI, 359, 1230, "Eðik Koli 1", 20},
	{MOBILYA_TUR_DEKORATIF_IKI, 360, 926, "Eðik Koli 2", 20},
	{MOBILYA_TUR_DEKORATIF_IKI, 361, 928, "Eðik Koli 3", 20},
	{MOBILYA_TUR_DEKORATIF_IKI, 362, 1220, "Koli 1", 20},
	{MOBILYA_TUR_DEKORATIF_IKI, 363, 1221, "Koli 2", 20},
	{MOBILYA_TUR_DEKORATIF_IKI, 364, 3761, "Raf ve Koliler", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 365, 2063, "Raflar", 80},
	{MOBILYA_TUR_DEKORATIF_IKI, 366, 2583, "Sex Shop Raflarý 1", 500},
	{MOBILYA_TUR_DEKORATIF_IKI, 367, 2581, "Sex Shop Raflarý 2", 500},
	{MOBILYA_TUR_DEKORATIF_IKI, 368, 1582, "Pizza Kutusu 1", 10},
	{MOBILYA_TUR_DEKORATIF_IKI, 369, 19571, "Pizza Kutusu 2", 10},
	{MOBILYA_TUR_DEKORATIF_IKI, 370, 19525, "Düðün Pastasý", 120},
	{MOBILYA_TUR_DEKORATIF_IKI, 371, 19563, "Portakal Suyu", 10},
	{MOBILYA_TUR_DEKORATIF_IKI, 372, 19564, "Elma Suyu", 10},
	{MOBILYA_TUR_DEKORATIF_IKI, 373, 19572, "Ýçki Altlýðý", 20},
	{MOBILYA_TUR_DEKORATIF_IKI, 374, 19574, "Portakal", 10},
	{MOBILYA_TUR_DEKORATIF_IKI, 375, 19575, "Kýrmýzý Elma", 10},
	{MOBILYA_TUR_DEKORATIF_IKI, 376, 19576, "Yeþil Ela", 10},
	{MOBILYA_TUR_DEKORATIF_IKI, 377, 19577, "Elma", 10},
	{MOBILYA_TUR_DEKORATIF_IKI, 378, 19578, "Muz", 10},
	{MOBILYA_TUR_DEKORATIF_IKI, 379, 19579, "Ekmek", 10},
	{MOBILYA_TUR_DEKORATIF_IKI, 380, 19561, "Mýsýr Gevreði", 10},
	{MOBILYA_TUR_DEKORATIF_IKI, 381, 19562, "Mýsýr Gevreði (Walt Jr)", 10},
	{MOBILYA_TUR_DEKORATIF_IKI, 382, 19569, "Taze Süt", 10},
	{MOBILYA_TUR_DEKORATIF_IKI, 383, 19570, "Günlük Süt", 10},
	{MOBILYA_TUR_DEKORATIF_IKI, 384, 19565, "Dondurma", 10},
	{MOBILYA_TUR_DEKORATIF_IKI, 385, 19566, "Balýk Pane", 10},
	{MOBILYA_TUR_DEKORATIF_IKI, 386, 11722, "Ketçap", 10},
	{MOBILYA_TUR_DEKORATIF_IKI, 387, 11723, "Hardal", 10},
	{MOBILYA_TUR_DEKORATIF_IKI, 388, 2332, "Çelik Kasa", 3500},
	{MOBILYA_TUR_DEKORATIF_IKI, 389, 18635, "Çekiç", 10},
	{MOBILYA_TUR_DEKORATIF_IKI, 390, 19631, "Balyoz", 50},
	{MOBILYA_TUR_DEKORATIF_IKI, 391, 18644, "Tornavida", 10},
	{MOBILYA_TUR_DEKORATIF_IKI, 392, 18633, "Ýngiliz Anahtarý 1", 10},
	{MOBILYA_TUR_DEKORATIF_IKI, 393, 19627, "Ýngiliz Anahtarý 2", 10},
	{MOBILYA_TUR_DEKORATIF_IKI, 394, 19622, "Süpürge", 20},
	{MOBILYA_TUR_DEKORATIF_IKI, 395, 19804, "Kilit", 5},
	{MOBILYA_TUR_DEKORATIF_IKI, 396, 2680, "Zincir", 20},
	{MOBILYA_TUR_DEKORATIF_IKI, 397, 11746, "Anahtar", 20},
	{MOBILYA_TUR_DEKORATIF_IKI, 398, 19904, "Ýþ Yeleði", 20},
	{MOBILYA_TUR_DEKORATIF_IKI, 399, 19621, "Motor Yaðý", 30},
	{MOBILYA_TUR_DEKORATIF_IKI, 400, 19872, "Tamirci aracý 1", 1500},
	{MOBILYA_TUR_DEKORATIF_IKI, 401, 19899, "Tamirci aracý 2", 200},
	{MOBILYA_TUR_DEKORATIF_IKI, 402, 19903, "Tamirci aracý 3", 500},
	{MOBILYA_TUR_DEKORATIF_IKI, 403, 19815, "Tamirci aracý 4", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 404, 1000,  "Spoiler", 200},
	{MOBILYA_TUR_DEKORATIF_IKI, 405, 1001,  "Spoiler 2", 200},
	{MOBILYA_TUR_DEKORATIF_IKI, 406, 1002,  "Spoiler 3", 200},
	{MOBILYA_TUR_DEKORATIF_IKI, 407, 1003,  "Spoiler 4", 200},
	{MOBILYA_TUR_DEKORATIF_IKI, 408, 1008,  "NOS 1", 200},
	{MOBILYA_TUR_DEKORATIF_IKI, 409, 1009,  "NOS 2", 500},
	{MOBILYA_TUR_DEKORATIF_IKI, 410, 1010, "NOS 3", 1000},
	{MOBILYA_TUR_DEKORATIF_IKI, 411, 1013, "Far", 200},
	{MOBILYA_TUR_DEKORATIF_IKI, 412, 1018, "Egzos 1", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 413, 1019, "Egzos 2", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 414, 1020, "Egzos 3", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 415, 929, "Makina 1", 250},
	{MOBILYA_TUR_DEKORATIF_IKI, 416, 934, "Makina 2", 250},
	{MOBILYA_TUR_DEKORATIF_IKI, 417, 14584 , "Makina 3", 400},
	{MOBILYA_TUR_DEKORATIF_IKI, 418, 920, "Makina 4", 250},
	{MOBILYA_TUR_DEKORATIF_IKI, 419, 1353, "Makina 5", 200},
	{MOBILYA_TUR_DEKORATIF_IKI, 420, 1635, "Makina 6", 210},
	{MOBILYA_TUR_DEKORATIF_IKI, 421, 9831, "Akvaryum 1", 1000},
	{MOBILYA_TUR_DEKORATIF_IKI, 422, 6964, "Akvaryum 2", 1000},
	{MOBILYA_TUR_DEKORATIF_IKI, 423, 16088, "Ýnþaat Giriþi", 50},
	{MOBILYA_TUR_DEKORATIF_IKI, 424, 14434, "Spotlight", 20},
	{MOBILYA_TUR_DEKORATIF_IKI, 425, 18688, "Ateþ 1", 200},
	{MOBILYA_TUR_DEKORATIF_IKI, 426, 18689, "Ateþ 2", 200},
	{MOBILYA_TUR_DEKORATIF_IKI, 427, 18690, "Ateþ 3", 200},
	{MOBILYA_TUR_DEKORATIF_IKI, 428, 18691, "Ateþ 4", 200},
	{MOBILYA_TUR_DEKORATIF_IKI, 429, 18692, "Ateþ 5", 200},
	{MOBILYA_TUR_DEKORATIF_IKI, 430, 18694, "Ateþ 6", 200},
	{MOBILYA_TUR_DEKORATIF_IKI, 431, 18695, "Ateþ 1", 200},
	{MOBILYA_TUR_DEKORATIF_IKI, 432, 18696, "Ateþ 2", 200},
	{MOBILYA_TUR_DEKORATIF_IKI, 433, 18697, "Ateþ 3", 200},
	{MOBILYA_TUR_DEKORATIF_IKI, 434, 18698, "Dekor", 200},
	{MOBILYA_TUR_DEKORATIF_IKI, 435, 18699, "Jetpack Gaz 1", 200},
	{MOBILYA_TUR_DEKORATIF_IKI, 436, 18700, "Jetpack Gaz 2", 200},
	{MOBILYA_TUR_DEKORATIF_IKI, 437, 18701, "Molotof Ateþi", 200},
	{MOBILYA_TUR_DEKORATIF_IKI, 438, 18702, "Jetpack Gaz 3", 200},
	{MOBILYA_TUR_DEKORATIF_IKI, 439, 18703, "Beyaz Araba Dumaný", 200},
	{MOBILYA_TUR_DEKORATIF_IKI, 440, 18704, "Beyaz Araba Dumaný 2", 200},
	{MOBILYA_TUR_DEKORATIF_IKI, 441, 18705, "Akan Su", 200},
	{MOBILYA_TUR_DEKORATIF_IKI, 442, 18672, "Çimento Karýþýmý", 200},
	{MOBILYA_TUR_DEKORATIF_IKI, 443, 18668, "Kýrmýzý Duman", 200},
	{MOBILYA_TUR_DEKORATIF_IKI, 444, 18682, "Patlama 1", 200},
	{MOBILYA_TUR_DEKORATIF_IKI, 445, 18683, "Patlama 2", 200},
	{MOBILYA_TUR_DEKORATIF_IKI, 446, 18684, "Patlama 3", 200},
	{MOBILYA_TUR_DEKORATIF_IKI, 447, 18685, "Patlama 4", 200},
	{MOBILYA_TUR_DEKORATIF_IKI, 448, 18686, "Patlama 5", 200},
	{MOBILYA_TUR_DEKORATIF_IKI, 449, 18725, "Beyaz Duman 2", 200},
	{MOBILYA_TUR_DEKORATIF_IKI, 450, 18726, "Siyah Duman 2", 200},
	{MOBILYA_TUR_DEKORATIF_IKI, 451, 18727, "Gri Duman 1", 200},
	{MOBILYA_TUR_DEKORATIF_IKI, 452, 18728, "Kýrmýzý Duman", 200},
	{MOBILYA_TUR_DEKORATIF_IKI, 453, 18729, "Spraycan", 200},
	{MOBILYA_TUR_DEKORATIF_IKI, 454, 18725, "Duman", 200},
	{MOBILYA_TUR_DEKORATIF_IKI, 455, 18715, "Kum 1", 200},
	{MOBILYA_TUR_DEKORATIF_IKI, 456, 18716, "Kum 2", 200},
	{MOBILYA_TUR_DEKORATIF_IKI, 457, 18693, "Alev 1", 200},
	{MOBILYA_TUR_DEKORATIF_IKI, 458, 18723, "Siyah Duman", 200},
	{MOBILYA_TUR_DEKORATIF_IKI, 459, 3865, "Þantiye Borusu 1", 300},
	{MOBILYA_TUR_DEKORATIF_IKI, 460, 3502, "Þantiye Borusu 2", 300},
	{MOBILYA_TUR_DEKORATIF_IKI, 461, 3066, "Yeþil Bezle Örtülü Kasalar", 250},
	{MOBILYA_TUR_DEKORATIF_IKI, 462, 3502, "Þantiye Borusu 3", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 463, 2960, "Demir Kiriþ", 300},
	{MOBILYA_TUR_DEKORATIF_IKI, 464, 19912, "Elektrikli Kapý", 200},
	{MOBILYA_TUR_DEKORATIF_IKI, 465, 998, "Elektrikli Kapý 2", 200},
	{MOBILYA_TUR_DEKORATIF_IKI, 466, 989, "Elektrikli Kapý 3", 200},
	{MOBILYA_TUR_DEKORATIF_IKI, 467, 5463, "Büyük Ýskele", 200},
	{MOBILYA_TUR_DEKORATIF_IKI, 468, 11495, "Liman Ýskelesi", 200},
	{MOBILYA_TUR_DEKORATIF_IKI, 469, 11693, "Geniþ Çim 1", 500},
	{MOBILYA_TUR_DEKORATIF_IKI, 470, 18863, "Geniþ Çim 2", 500},
	{MOBILYA_TUR_DEKORATIF_IKI, 471, 19003, "Geniþ Toprak", 400},
	{MOBILYA_TUR_DEKORATIF_IKI, 472, 19531, "Geniþ Toprak 3", 400},
	{MOBILYA_TUR_DEKORATIF_IKI, 473, 19530, "Geniþ Kum", 700},
	{MOBILYA_TUR_DEKORATIF_IKI, 474, 19593, "Büyük Saray", 1000},
	{MOBILYA_TUR_DEKORATIF_IKI, 475, 3584, "Harmony Oaks", 50},
	{MOBILYA_TUR_DEKORATIF_IKI, 476, 7017, "Parmaklýk", 50},
	{MOBILYA_TUR_DEKORATIF_IKI, 477, 3887, "Alçýlý Bina", 50},
	{MOBILYA_TUR_DEKORATIF_IKI, 478, 3270, "Bozuk", 3000},
	{MOBILYA_TUR_DEKORATIF_IKI, 479, 10757, "Uçak (Evet)", 10000},
	{MOBILYA_TUR_DEKORATIF_IKI, 480, 9618, "Ýskele", 500},
	{MOBILYA_TUR_DEKORATIF_IKI, 481, 1521, "Mavi Ýskele", 200},
	{MOBILYA_TUR_DEKORATIF_IKI, 482, 7089, "Ýskele", 2000},
	{MOBILYA_TUR_DEKORATIF_IKI, 483, 18720, "Su Sprayi 1", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 484, 18739, "Su Sprayi 2", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 485, 18742, "Su Sprayi 3", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 486, 18743, "Su Sprayi 4", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 487, 355, "AK-47", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 488, 356, "M4A1", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 489, 348, "Desert Eagle", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 490, 352, "MAC-10", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 491, 349, "Pompalý Tüfek", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 492, 344, "Molotof", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 493, 2710, "Saat Kutusu", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 494, 3082, "Kapsül", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 495, 1583, "Hedef 1", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 496, 1584, "Hedef 2", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 497, 1585, "Hedef 3", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 498, 1586, "Hedef 4", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 499, 3496, "Sepet 2", 500},
	{MOBILYA_TUR_DEKORATIF_IKI, 500, 2905, "Kopuk Bacak", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 501, 2906, "Kopmuþ Kol", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 502, 2907, "Cansýz Gövde", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 503, 2908, "Cansýz Parçalar", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 504, 11497, "Balýkçý Kulübesi", 10000},
	{MOBILYA_TUR_DEKORATIF_IKI, 505, 902, "Starfish", 1000},
	{MOBILYA_TUR_DEKORATIF_IKI, 506, 19474, "Poker Masasý", 5000},
	{MOBILYA_TUR_DEKORATIF_IKI, 507, 2785, "Beþli Slot", 15000},
	{MOBILYA_TUR_DEKORATIF_IKI, 508, 1835, "Tek Slot", 5000},
	{MOBILYA_TUR_DEKORATIF_IKI, 509, 2592, "Masa Geçidi", 5000},
	{MOBILYA_TUR_DEKORATIF_IKI, 510, 1895, "Wheel of Fortune", 5000},
	{MOBILYA_TUR_DEKORATIF_IKI, 511, 18632, "Büyük Olta", 1000},
	{MOBILYA_TUR_DEKORATIF_IKI, 512, 1599, "Sarý Balýk", 1000},
	{MOBILYA_TUR_DEKORATIF_IKI, 513, 1604, "Mavi Balýk", 1000},
	{MOBILYA_TUR_DEKORATIF_IKI, 514, 19630, "Manyhamsi", 1000},
	{MOBILYA_TUR_DEKORATIF_IKI, 515, 1601, "Baliklar", 1000},
	{MOBILYA_TUR_DEKORATIF_IKI, 516, 19787, "Plazma", 40},
	{MOBILYA_TUR_DEKORATIF_IKI, 517, 2737, "Mavi Pano", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 518, 3077, "Kara Tahta", 300},
	{MOBILYA_TUR_DEKORATIF_IKI, 519, 19805, "Beyaz Tahta", 100},
	{MOBILYA_TUR_DEKORATIF_IKI, 520, 18632, "Olta", 100}
};

new SnakeCamDurum[MAX_PLAYERS], tackleDurum[MAX_PLAYERS];

enum BirakilanItemEnum {
	itemid,
	Float:iX,
	Float:iY,
	Float:iZ,
	itemtip,
	itemmiktar,
	itemobje,
	itemvw,
	itemint,
	Text3D:txt3D
}
new BirakilanItemler[MAX_BIRAKILANITEM][BirakilanItemEnum];

enum asansorverileri
{
	asansorObje,
	asansorKat,
	Float:asansorPos_1[6],
	Float:asansorPos_2[6],
	Float:asansorPos_3[6],
	Float:asansorTus[3],
};
new AsansorData[MAX_ASANSOR][asansorverileri];

enum _:grafitiData
{
	_gIslemSil,
	_gSecim,
};
new GraffitiIslemleri[MAX_PLAYERS] = {_gIslemSil, ...};

enum tamir_data
{
	Float:tamirPos[4],
	Float:tamiricPos[4],
	Text3D:tamirLabel,
	tamirPickup,
	tamirFiyat,
};
new tamirciData[MAX_TAMIRCI][tamir_data];

enum seyyarEnum
{
	sID,
	Float:sX,
	Float:sY,
	Float:sZ,
	Float:srX,
	Float:srZ,
	Float:srY,
	sVw,
	sInt,
	sObje,
	sTur,
	sKasa,
	Text3D:sLabel,
	sSahip[MAX_PLAYER_NAME]
};
new SeyyarInfo[MAX_SEYYAR][seyyarEnum];

enum tezgahEnum
{
	tID,
	Float:tX,
	Float:tY,
	Float:tZ,
	Float:trX,
	Float:trZ,
	Float:trY,
	tVw,
	tInt,
	tObje,
	Text3D:tLabel,
	Text3D:tGeciciLabel,
	tSahip[MAX_PLAYER_NAME]
};
new TezgahInfo[MAX_TEZGAH][tezgahEnum];

enum kutuEnum
{
	kID,
	Float:kX,
	Float:kY,
	Float:kZ,
	kVw,
	kInt,
	kObje,
	Text3D:kLabel
};
new KutuInfo[MAX_ESYA][kutuEnum];

enum garajEnum {
	gID,
	Float:gX,
	Float:gY,
	Float:gZ,
	gVw,
	gInt,
	gSahip[MAX_PLAYER_NAME],
	gKapasite,
	gBirlik,
	gPickup,
	Text3D:gLabel,
	gKilit,
	gKasa
}
new GarajInfo[MAX_GARAJ][garajEnum];

enum firmaEnum {
	fID,
	fIsim[40],
	fNot[200],
	fLiderrutbe,
	fAlan,
	fKasa,
	fKontrat[4],
	fPickupb,
	Float:fiX,
	Float:fiY,
	Float:fiZ,
	fiVw,
	fiInt,
	fAlimlar,
	fMaas,
	fYayin,
	Text3D:fLabelb,
	fChat,
	fYayinAciklama[50],
	fKameraman
}
new FirmaInfo[MAX_FIRMA][firmaEnum];
new FirmaRutbe[MAX_FIRMA][30][30];
new FirmaSkin[MAX_FIRMA][30];

enum ankesorEnum {
	aID,
	Float:aX,
	Float:aY,
	Float:aZ,
	Float:arX,
	Float:arY,
	Float:arZ,
	aVw,
	aInt,
	aObje,
	Text3D:aLabel,
	aNumara,
	aCaliyor,
	aAktif,
	aArayan,
	aKisi
}
new AnkesorInfo[MAX_ATELEFON][ankesorEnum];

enum yatEnum {
	yID,
	Float:yX,
	Float:yY,
	Float:yZ,
	Float:yrX,
	Float:yrY,
	Float:yrZ,
	ySahip[MAX_PLAYER_NAME],
	yAktif,
	yAttach,
	yKullanimda,
	yRadyo,
	yIsim[40],
	yReis,
	yKasa,
	yPara,
	yObje
}
new YatInfo[MAX_YAT][yatEnum];

enum ciftlikEnum {
	cID,
	Float:cminX,
	Float:cminY,
	Float:cmaxX,
	Float:cmaxY,
	Float:cDonum,
	cSahip[MAX_PLAYER_NAME],
	cSahipID,
	cIsim[50],
	cAktif,
	bool:cIslem,
	cKasa,
	cUrun,
	cOlgunlasma,
	cPara,
	cZone,
	cArsa
}
new CiftlikInfo[MAX_CIFTLIK][ciftlikEnum];

enum shellInfo
{
	shellDropped,
    shellPlaced,
    shellTime,
    Text3D:ShellCasing,
	Float:shellX,
	Float:shellY,
	Float:shellZ,
	shellWorld,
	shellSerial
};
new ShellInfo[MAX_SHELLS][shellInfo];

enum weedInfo
{
    weedPlanted,
    weedTime,
    weedObject,
	Float:weedX,
	Float:weedY,
	Float:weedZ,
	weedType,
	weedWorld
};
new WeedInfo[MAX_WEED][weedInfo];

enum bolgeEnum {
	bID,
	Float:bminX,
	Float:bminY,
	Float:bmaxX,
	Float:bmaxY,
	bRenk,
	bBirlik,
	bAktif,
	bZone,
	bBolge
}
new BolgeInfo[MAX_BOLGE][bolgeEnum];

/*enum karavanEnum {
	kID,
	Float:kX,
	Float:kY,
	Float:kZ,
	Float:krX,
	Float:krY,
	Float:krZ,
	kSahip[MAX_PLAYER_NAME],
	kAktif,
	kBaglandi,
	kKasa,
	kKapi,
	kKapidurum,
	kObje
}
new KaravanInfo[MAX_KARAVAN][karavanEnum]; */

enum HoldingEnumAll
{
	holdingmodelid,
	holdingprice,
	holdingmodelname[24]
};

new KemikKisimlari[][] = {
	"-",
	"Omurga",
	"Kafa",
	"Sol üst kol",
	"Sað üst kol",
	"Sol el",
	"Sað el",
	"Sol uyluk",
	"Sað uyluk",
	"Sol ayak",
	"Sað ayak",
	"Sað baldýr",
	"Sol baldýr",
	"Sol ön kol",
	"Sað ön kol",
	"Sol omuz",
	"Sað omuz",
	"Boyun",
	"Çene"
};

enum fadeEnum {
	fID,
	fInt,
	Float:fadeX,
	Float:fadeY,
	Float:fadeZ,
	fVW,
	fUnfreeze,
	Float:fdAngle,
	fR,
	fG,
	fB,
	fA
}
new fade[MAX_PLAYERS][fadeEnum];

new HoldingObjectsAll[][HoldingEnumAll] = {
	{18656, 50, "Iþýk"},
	{18641, 50, "El Feneri"}
};

enum ptInfo
{
	ptModelID,
	ptRealID,
	ptKullanim,
	ptBone,
	Float:ptPosX,
	Float:ptPosY,
	Float:ptPosZ,
	Float:ptRotX,
	Float:ptRotY,
	Float:ptRotZ,
	Float:ptScaleX,
	Float:ptScaleY,
	Float:ptScaleZ,
	ptRenk
};
new oyuncakData[MAX_PLAYERS+1][MAX_AKSESUAR][ptInfo];

enum yrdkData
{
	yerdekiIsim[128],
	yerdekiSahip[MAX_PLAYER_NAME],
	yerdekiModel,
	yerdekiObje,
	Text3D:yerdekiLabel,
	Float:yerdekiPos[4]
};
new yerdekiData[MAX_YERESYASI][yrdkData];

enum rehberBilgi
{
	rehberID,
	bool:rehberkullanimda,
	rehberisim[32],
	rehbernumara
};
new RehberBilgi[MAX_PLAYERS][MAX_TELREHBER][rehberBilgi];

enum reklamBilgi
{
	reklamID,
	bool:reklamkullanimda,
	bool:reklamonaylandi,
	reklamsahip,
	reklamfirma,
	reklamvip,
	reklamyazi[150]
}
new ReklamBilgi[MAX_REKLAM][reklamBilgi];

enum aracmodInfo {
	cID,
	cIsim[ 40 ],
	cFiyat,
	cTip
};
#define MAX_PARCA  194
static const
cInfo[ MAX_PARCA ][ aracmodInfo ] = {
	{ 1000, "Pro Spoiler", 1500, CARMODTYPE_SPOILER },
	{ 1001, "Win Spoiler", 1500, CARMODTYPE_SPOILER },
	{ 1002, "Drag Spoiler", 1500, CARMODTYPE_SPOILER },
	{ 1003, "Alpha Spoiler", 1500, CARMODTYPE_SPOILER },
	{ 1004, "Champ Scoop Hood", 1000, CARMODTYPE_HOOD },
	{ 1005, "Fury Scoop Hood", 1000, CARMODTYPE_HOOD },
	{ 1006, "Roof Scoop Roof", 1000, CARMODTYPE_ROOF },
	{ 1007, "Right Sideskirt", 800, CARMODTYPE_SIDESKIRT },
	{ 1008, "5x Nitrous", 6000, CARMODTYPE_NITRO },
	{ 1009, "2x Nitrous", 3500, CARMODTYPE_NITRO },
	{ 1010, "10x Nitrous", 10000, CARMODTYPE_NITRO },
	{ 1011, "Race Scoop Hood", 1000, CARMODTYPE_HOOD },
	{ 1012, "Worx Scoop Hood", 1000, CARMODTYPE_HOOD },
	{ 1013, "Round Fog Lamp", 100, CARMODTYPE_LAMPS },
	{ 1014, "Champ Spoiler", 1500, CARMODTYPE_SPOILER },
	{ 1015, "Race Spoiler", 1500, CARMODTYPE_SPOILER },
	{ 1016, "Worx Spoiler", 1500, CARMODTYPE_SPOILER },
	{ 1017, "Left Sideskirt", 800, CARMODTYPE_SIDESKIRT },
	{ 1018, "Upswept Exhaust", 900, CARMODTYPE_EXHAUST },
	{ 1019, "Twin Exhaust", 900, CARMODTYPE_EXHAUST },
	{ 1020, "Large Exhaust", 900, CARMODTYPE_EXHAUST },
	{ 1021, "Medium Exhaust", 900, CARMODTYPE_EXHAUST },
	{ 1022, "Small Exhaust", 900, CARMODTYPE_EXHAUST },
	{ 1023, "Fury Spoiler", 1500, CARMODTYPE_SPOILER },
	{ 1024, "Square Fog Lamp", 50, CARMODTYPE_LAMPS },
	{ 1025, "Offroad Wheels", 1000, CARMODTYPE_WHEELS },
	{ 1026, "Right Alien Sideskirt", 800, CARMODTYPE_SIDESKIRT },
	{ 1027, "Left Alien Sideskirt", 800, CARMODTYPE_SIDESKIRT },
	{ 1028, "Alien Exhaust", 900, CARMODTYPE_EXHAUST },
	{ 1029, "X-Flow Exhaust", 900, CARMODTYPE_EXHAUST },
	{ 1030, "Left X-Flow Sideskirt", 800, CARMODTYPE_SIDESKIRT },
	{ 1031, "Right X-Flow Sideskirt", 800, CARMODTYPE_SIDESKIRT },
	{ 1032, "Alien Roof Vent", 120, CARMODTYPE_ROOF },
	{ 1033, "X-Flow Roof Vent", 790, CARMODTYPE_ROOF },
	{ 1034, "Alien Exhaust", 900, CARMODTYPE_EXHAUST },
	{ 1035, "X-Flow Roof Vent", 500, CARMODTYPE_ROOF },
	{ 1036, "Right Alien Sideskirt", 800, CARMODTYPE_SIDESKIRT },
	{ 1037, "X-Flow Exhaust", 900, CARMODTYPE_EXHAUST },
	{ 1038, "Alien Roof Vent", 390, CARMODTYPE_ROOF },
	{ 1039, "Left X-Flow Sideskirt", 800, CARMODTYPE_SIDESKIRT },
	{ 1040, "Left Alien Sideskirt", 800, CARMODTYPE_SIDESKIRT },
	{ 1041, "Right X-Flow Sideskirt", 800, CARMODTYPE_SIDESKIRT },
	{ 1042, "Right Chrome Sideskirt", 800, CARMODTYPE_SIDESKIRT },
	{ 1043, "Slamin Exhaust", 900, CARMODTYPE_EXHAUST },
	{ 1044, "Chrome Exhaust", 900, CARMODTYPE_EXHAUST },
	{ 1045, "X-Flow Exhaust", 900, CARMODTYPE_EXHAUST },
	{ 1046, "Alien Exhaust", 900, CARMODTYPE_EXHAUST },
	{ 1047, "Right Alien Sideskirt", 800, CARMODTYPE_SIDESKIRT },
	{ 1048, "Right X-Flow Sideskirt", 800, CARMODTYPE_SIDESKIRT },
	{ 1049, "Alien Spoiler", 1500, CARMODTYPE_SPOILER },
	{ 1050, "X-Flow Spoiler", 1500, CARMODTYPE_SPOILER },
	{ 1051, "Left Alien Sideskirt", 800, CARMODTYPE_SPOILER },
	{ 1052, "Left X-Flow Sideskirt", 800, CARMODTYPE_SPOILER },
	{ 1053, "X-Flow Roof", 1000, CARMODTYPE_ROOF },
	{ 1054, "Alien Roof", 1000, CARMODTYPE_ROOF },
	{ 1055, "Alien Roof", 1000, CARMODTYPE_ROOF },
	{ 1056, "Right Alien Sideskirt", 800, CARMODTYPE_SIDESKIRT },
	{ 1057, "Right X-Flow Sideskirt", 800, CARMODTYPE_SIDESKIRT },
	{ 1058, "Alien Spoiler", 1500, CARMODTYPE_SPOILER },
	{ 1059, "X-Flow Exhaust", 900, CARMODTYPE_EXHAUST },
	{ 1060, "X-Flow Spoiler", 1500, CARMODTYPE_SPOILER },
	{ 1061, "X-Flow Roof", 1000, CARMODTYPE_ROOF },
	{ 1062, "Left Alien Sideskirt", 800, CARMODTYPE_SIDESKIRT },
	{ 1063, "Left X-Flow Sideskirt", 800, CARMODTYPE_SIDESKIRT },
	{ 1064, "Alien Exhaust", 900, CARMODTYPE_EXHAUST },
	{ 1065, "Alien Exhaust", 900, CARMODTYPE_EXHAUST },
	{ 1066, "X-Flow Exhaust", 900, CARMODTYPE_EXHAUST },
	{ 1067, "Alien Roof", 1000, CARMODTYPE_ROOF },
	{ 1068, "X-Flow Roof", 1000, CARMODTYPE_ROOF },
	{ 1069, "Right Alien Sideskirt", 800, CARMODTYPE_SIDESKIRT },
	{ 1070, "Right X-Flow Sideskirt", 800, CARMODTYPE_SIDESKIRT },
	{ 1071, "Left Alien Sideskirt", 800, CARMODTYPE_SIDESKIRT },
	{ 1072, "Left X-Flow Sideskirt", 800, CARMODTYPE_SIDESKIRT },
	{ 1073, "Shadow Wheels", 1000, CARMODTYPE_WHEELS },
	{ 1074, "Mega Wheels", 1000, CARMODTYPE_WHEELS },
	{ 1075, "Rimshine Wheels", 1000, CARMODTYPE_WHEELS },
	{ 1076, "Wires Wheels", 1000, CARMODTYPE_WHEELS },
	{ 1077, "Classic Wheels", 1000, CARMODTYPE_WHEELS },
	{ 1078, "Twist Wheels", 1000, CARMODTYPE_WHEELS },
	{ 1079, "Cutter Wheels", 1000, CARMODTYPE_WHEELS },
	{ 1080, "Switch Wheels", 1000, CARMODTYPE_WHEELS },
	{ 1081, "Grove Wheels", 1000, CARMODTYPE_WHEELS },
	{ 1082, "Import Wheels", 1000, CARMODTYPE_WHEELS },
	{ 1083, "Dollar Wheels", 1000, CARMODTYPE_WHEELS },
	{ 1084, "Trance Wheels", 1000, CARMODTYPE_WHEELS },
	{ 1085, "Atomic Wheels", 1000, CARMODTYPE_WHEELS },
	{ 1086, "Stereo Wheels", 1000, CARMODTYPE_STEREO },
	{ 1087, "Hydraulics", 2000, CARMODTYPE_HYDRAULICS },
	{ 1088, "Alien Roof", 1000, CARMODTYPE_ROOF },
	{ 1089, "X-Flow Exhaust", 900, CARMODTYPE_EXHAUST },
	{ 1090, "Right Alien Sideskirt", 800, CARMODTYPE_SIDESKIRT },
	{ 1091, "X-Flow Roof", 1000, CARMODTYPE_ROOF },
	{ 1092, "Alien Exhaust", 900, CARMODTYPE_EXHAUST },
	{ 1093, "Right X-Flow Sideskirt", 800, CARMODTYPE_SIDESKIRT },
	{ 1094, "Left Alien Sideskirt", 800, CARMODTYPE_SIDESKIRT },
	{ 1095, "Right X-Flow Sideskirt", 800, CARMODTYPE_SIDESKIRT },
	{ 1096, "Ahab Wheels", 1000, CARMODTYPE_WHEELS },
	{ 1097, "Virtual Wheels", 1000, CARMODTYPE_WHEELS },
	{ 1098, "Access Wheels", 1000, CARMODTYPE_WHEELS },
	{ 1099, "Left Chrome Sideskirt", 800, CARMODTYPE_SIDESKIRT },
    { 1100, "Chrome Grill", 1610, -1 }, // Bullbar
    { 1101, "Left `Chrome Flames` Sideskirt", 800, CARMODTYPE_SIDESKIRT },
    { 1102, "Left `Chrome Strip` Sideskirt", 800, CARMODTYPE_SIDESKIRT },
    { 1103, "Covertible Roof", 3250, CARMODTYPE_ROOF },
    { 1104, "Chrome Exhaust", 900, CARMODTYPE_EXHAUST },
    { 1105, "Slamin Exhaust", 900, CARMODTYPE_EXHAUST },
    { 1106, "Right `Chrome Arches`", 780, CARMODTYPE_SIDESKIRT },
    { 1107, "Left `Chrome Strip` Sideskirt", 800, CARMODTYPE_SIDESKIRT },
    { 1108, "Right `Chrome Strip` Sideskirt", 800, CARMODTYPE_SIDESKIRT },
    { 1109, "Chrome", 1610, -1 }, // Bullbar
    { 1110, "Slamin", 1540, -1 }, // Bullbar
    { 1111, "Little Sign?", 100, -1 }, // sig
    { 1112, "Little Sign?", 100, -1 }, // sig
    { 1113, "Chrome Exhaust", 3340, CARMODTYPE_EXHAUST },
    { 1114, "Slamin Exhaust", 3250, CARMODTYPE_EXHAUST },
    { 1115, "Chrome", 2130, -1 }, // Bullbar
    { 1116, "Slamin", 2050, -1 }, // Bullbar
    { 1117, "Chrome Front Bumper", 2040, CARMODTYPE_FRONT_BUMPER },
    { 1118, "Right `Chrome Trim` Sideskirt", 780, CARMODTYPE_SIDESKIRT },
    { 1119, "Right `Wheelcovers` Sideskirt", 940, CARMODTYPE_SIDESKIRT },
    { 1120, "Left `Chrome Trim` Sideskirt", 780, CARMODTYPE_SIDESKIRT },
    { 1121, "Left `Wheelcovers` Sideskirt", 940, CARMODTYPE_SIDESKIRT },
    { 1122, "Right `Chrome Flames` Sideskirt", 780, CARMODTYPE_SIDESKIRT },
    { 1123, "Bullbar Chrome Bars", 860, -1 }, // Bullbar
    { 1124, "Left `Chrome Arches` Sideskirt", 780, CARMODTYPE_SIDESKIRT },
    { 1125, "Bullbar Chrome Lights", 1120, -1 }, // Bullbar
    { 1126, "Chrome Exhaust", 3340, CARMODTYPE_EXHAUST },
    { 1127, "Slamin Exhaust", 3250, CARMODTYPE_EXHAUST },
    { 1128, "Vinyl Hardtop", 3340, CARMODTYPE_ROOF },
    { 1129, "Chrome Exhaust", 1650, CARMODTYPE_EXHAUST },
    { 1130, "Hardtop Roof", 3380, CARMODTYPE_ROOF },
    { 1131, "Softtop Roof", 3290, CARMODTYPE_ROOF },
    { 1132, "Slamin Exhaust", 1590, CARMODTYPE_EXHAUST },
    { 1133, "Right `Chrome Strip` Sideskirt", 830, CARMODTYPE_SIDESKIRT },
    { 1134, "Right `Chrome Strip` Sideskirt", 800, CARMODTYPE_SIDESKIRT },
    { 1135, "Slamin Exhaust", 1500, CARMODTYPE_EXHAUST },
    { 1136, "Chrome Exhaust", 1000, CARMODTYPE_EXHAUST },
    { 1137, "Left `Chrome Strip` Sideskirt", 800, CARMODTYPE_SIDESKIRT },
    { 1138, "Alien Spoiler", 580, CARMODTYPE_SPOILER },
    { 1139, "X-Flow Spoiler", 470, CARMODTYPE_SPOILER },
    { 1140, "X-Flow Rear Bumper", 870, CARMODTYPE_REAR_BUMPER },
    { 1141, "Alien Rear Bumper", 980, CARMODTYPE_REAR_BUMPER },
    { 1142, "Left Oval Vents", 150, CARMODTYPE_VENT_LEFT },
    { 1143, "Right Oval Vents", 150, CARMODTYPE_VENT_RIGHT },
    { 1144, "Left Square Vents", 100, CARMODTYPE_VENT_LEFT },
    { 1145, "Right Square Vents", 100, CARMODTYPE_VENT_RIGHT },
    { 1146, "X-Flow Spoiler", 490, CARMODTYPE_SPOILER },
    { 1147, "Alien Spoiler", 600, CARMODTYPE_SPOILER },
    { 1148, "X-Flow Rear Bumper", 890, CARMODTYPE_REAR_BUMPER },
    { 1149, "Alien Rear Bumper", 1000, CARMODTYPE_REAR_BUMPER },
    { 1150, "Alien Rear Bumper", 1090, CARMODTYPE_REAR_BUMPER },
    { 1151, "X-Flow Rear Bumper", 840, CARMODTYPE_REAR_BUMPER },
    { 1152, "X-Flow Front Bumper", 910, CARMODTYPE_FRONT_BUMPER },
    { 1153, "Alien Front Bumper", 1200, CARMODTYPE_FRONT_BUMPER },
    { 1154, "Alien Rear Bumper", 1030, CARMODTYPE_REAR_BUMPER },
    { 1155, "Alien Front Bumper", 1030, CARMODTYPE_FRONT_BUMPER },
    { 1156, "X-Flow Rear Bumper", 920, CARMODTYPE_REAR_BUMPER },
    { 1157, "X-Flow Front Bumper", 930, CARMODTYPE_FRONT_BUMPER },
    { 1158, "X-Flow Spoiler", 550, CARMODTYPE_SPOILER },
    { 1159, "Alien Rear Bumper", 1050, CARMODTYPE_REAR_BUMPER },
    { 1160, "Alien Front Bumper", 1050, CARMODTYPE_FRONT_BUMPER },
    { 1161, "X-Flow Rear Bumper", 950, CARMODTYPE_REAR_BUMPER },
    { 1162, "Alien Spoiler", 650, CARMODTYPE_SPOILER },
    { 1163, "X-Flow Spoiler", 450, CARMODTYPE_SPOILER },
    { 1164, "Alien Spoiler", 550, CARMODTYPE_SPOILER },
    { 1165, "X-Flow Front Bumper", 850, CARMODTYPE_FRONT_BUMPER },
    { 1166, "Alien Front Bumper", 950, CARMODTYPE_FRONT_BUMPER },
    { 1167, "X-Flow Rear Bumper", 850, CARMODTYPE_REAR_BUMPER },
    { 1168, "Alien Rear Bumper", 950, CARMODTYPE_REAR_BUMPER },
    { 1169, "Alien Front Bumper", 970, CARMODTYPE_FRONT_BUMPER },
    { 1170, "X-Flow Front Bumper", 880, CARMODTYPE_FRONT_BUMPER },
    { 1171, "Alien Front Bumper", 990, CARMODTYPE_FRONT_BUMPER },
    { 1172, "X-Flow Front Bumper", 900, CARMODTYPE_FRONT_BUMPER },
    { 1173, "X-Flow Front Bumper", 950, CARMODTYPE_FRONT_BUMPER },
    { 1174, "Chrome Front Bumper", 1000, CARMODTYPE_FRONT_BUMPER },
    { 1175, "Slamin Front Bumper", 900, CARMODTYPE_FRONT_BUMPER },
    { 1176, "Chrome Rear Bumper", 2050, CARMODTYPE_REAR_BUMPER },
    { 1177, "Slamin Rear Bumper", 2150, CARMODTYPE_REAR_BUMPER },
    { 1178, "Slamin Rear Bumper", 2130, CARMODTYPE_REAR_BUMPER },
    { 1179, "Chrome Front Bumper", 2050, CARMODTYPE_FRONT_BUMPER },
    { 1180, "Chrome Rear Bumper", 2130, CARMODTYPE_REAR_BUMPER },
    { 1181, "Slamin Front Bumper", 2040, CARMODTYPE_FRONT_BUMPER },
    { 1182, "Chrome Front Bumper", 2150, CARMODTYPE_FRONT_BUMPER },
    { 1183, "Slamin Rear Bumper", 2040, CARMODTYPE_REAR_BUMPER },
    { 1184, "Chrome Rear Bumper", 2095, CARMODTYPE_REAR_BUMPER },
    { 1185, "Slamin Front Bumper", 2175, CARMODTYPE_FRONT_BUMPER },
    { 1186, "Slamin Rear Bumper", 2080, CARMODTYPE_REAR_BUMPER },
    { 1187, "Chrome Rear Bumper", 2200, CARMODTYPE_REAR_BUMPER },
    { 1188, "Slamin Front Bumper", 1040, CARMODTYPE_FRONT_BUMPER },
    { 1189, "Chrome Front Bumper", 940, CARMODTYPE_FRONT_BUMPER },
    { 1190, "Slamin Front Bumper", 1100, CARMODTYPE_FRONT_BUMPER },
    { 1191, "Chrome Front Bumper", 1100, CARMODTYPE_FRONT_BUMPER },
    { 1192, "Chrome Rear Bumper", 950, CARMODTYPE_REAR_BUMPER },
    { 1193, "Slamin Rear Bumper", 950, CARMODTYPE_REAR_BUMPER }
};


enum tpi {
	tID,
	tType,
	bool:tPaintjob,
	PJColor[ 2 ]
};
new TPInfo[ MAX_PLAYERS ][ tpi ];

new globalstring[ 128 ];

enum oyuncudata {
	oID,
	oIsim[32],
	oForumID,
	oKarakter,
	oKarakterDurum,
	oBalikTutmaTimer,
	oTelefonHoparlor,
	oBolge,
	oUmiktar,
	oBalikTutmaSinir,
	bool:oPDPC,
	oYarisID,
	oYarisDavet,
	oYarisTimer,
	oYarisKalanSure,
	oYarisCP,
	oYarisSiralama,
	oYarisKatilimci,
	oUcusLisansi,
	oSpecengel,
	oGozalti,
	oCiftlik,
	oEkin,
	oDogrulama,
	oMevduat,
	oGYMHak,
	snakeCamObje,
	oBagimlilik,
	oBagimlilikEtki,
	oKameraman,
	oBagimlilikTimer,
	oBagimlilikTimerEx,
	oBagimlilikDurum,
	oHileUyari,
	bool:oRadyoDinliyor,
	dialogSayfa,
	oBirikenKoku,
	oKonteynSatabilir,
	oRozet,
	oKokuDurum,
	bool:oBalikIzin,
	oTirGuzergah,
	bool:oSatisYapiyor,
	oPDEhliyetUyari,
	oAtYarisi,
	oAtBahis,
	oOynananAt,
	oBakilanRapor,
	oBakilanSoru,
	oOtelSaat,
	oAnahtarOnay,
	bool:oPenseOnay,
	oTruckerKod[16],
	bool:oTruckerKodiste,
	bool:oTruckerBasari,
	oAMesajKapat,
	oViceCoin,
	oVicePoint,
	oyuncuban,
	oikixpayday,
	ouyusturucutimer,
	oAracCalmaSiniri,
	goruntulenenMobilyaSQL,
	oyuncuboy,
	oyuncukilo,
	bool:oSSModu,
	mobilyaDuzenleniyor,
	duzenlenenMobilya,
	bool:oHUD,
	oSoruAtti,
	oSoruMesaji[256],
	oRaporAtti,
	oRaporMesaji[256],
	bool:oGizliIsim,
	bool:oCraft,
	bool:oIsimleriGizle,
	vicemarketyeniisim[24],
	vicemarketyeniplaka[12],
	vicemarketyenitelefon,
	oKiyafetDolabi[3],
	oPremiumSkin[3],
	oBesYetenekPuani,
	oOnYetenekPuani,
	oOnBesYetenekPuani,
	oIsimDegisimHakki,
	oOzelSkinAksesuar,
	oPlakaDegisimHakki,
	oTelefonDegisimHakki,
	oBankaHesapDegisimHakki,
	oDortXExp,
	oEkonomiPaketi,
	oCoolAracPaketi,
	oMobilyaPaketi,
	oMeslekPaketi,
	oMaskeHakki,
	oBisikletHakki,
	oYetenekSifirlamaHakki,
	oVIP,
	oSecilenBisiklet,
	oBisikletRenkBir,
	oBisikletRenkIki,
	oGYMPuan,
	oGYMAsama,
	oTruckerSeviye,
	oTruckerEXP,
	oKarakterSecimTimer,
	oKarakterYaratildi,
	bool:oGiris,
	bool:oIlkGiris,
	bool:oAdminDurum,
	bool:oAdminGizle,
	bool:oHelperIsbasi,
	pDakikaTimeri,
	oGirisTimer,
	oGirisTest,
	oKiyafet,
	oGeciciKiyafet,
	oAdmin,
	oYayinda,
	oYayinDavet,
	pMobilyaObje,
	pBirlikAID[21],
	pFirmaSecID[MAX_FIRMA],
	Float:pEnvanterAgirlik,
	oAdminNick[20],
	Float:oCan,
	Float:oZirh,
	Float:oPos[4],
	oPara,
	bool:oTaksiCagrisi,
	oTaksiCagriKonum[128],
	oVW,
	oInterior,
	oCinsiyet,
	oSeviye,
	oExp,
	bool:pATMMenu,
	oDakika,
	oMaasDakika,
	oCuval,
	oTezgah,
	oSeyyar,
	oKutu,
	oOynamaSaati,
	oGazMaskedurum,
	oKarMaskedurum,
	oHelper,
	oGazMaskeisim[64],
	oKarMaskeisim[64],
	oGoogleKod[17],
	oGoogleDurum,
	oGoogleIP[16],
	//OyuncuTimer,
	oMedyatercih,
	oDolap,
	//oSaniyeTimer,
	oDogumYeri[32],
	oDogumTarihi[32],
	oEskiRenk,
	oIzlenen,
	bool:pGiseOlustur,
	oBalik[5],
	oyemsayisi,
	balikexp,
	balikseviye,
	oAclik,
	oSusuzluk,
	oAclikSure,
	oSusuzlukSure,
	oBirlikSQLID,
	oBirlik,
	oBirlikRutbe,
	oBirlikDavetEden,
	oDuzenlenenRutbe,
	oMotorCalistir,
	oEditlenenObje,
	oEditlenenBarikat,
	oDuzenlemeTipi,
	oYaraliSure,
	oYaraliTimer,
	oTenRengi,
	oSonBinilenArac,
	PlayerText:oTextdraw[8],
	bool:oIsbasi,
	bool:oFirmaisbasi,
	oSilah[13],
	oMermi[13],
	oSiparis[2],
	oDonduruldu,
	oKelepceli,
	oForumAdi[24],
	bool:oEhliyet,
	oEhliyetTesti,
	oKibrit,
	bool:oCakmak,
	oOdun,
	bool:oPMDurum,
	bool:oPMIzlemeDurum,
	bool:oYarali,
	bool:oTaser,
	bool:oBeanbag,
	bool:oEtkisizHalde,
	bool:oDestek,
	bool:oJetpack,
	bool:oKampAtesi,
	oKampAtesiObje[2],
	oATMDuzenliyor,
	oHesapNumarasi,
	oBankaPara,
	oSigara,
	oSigaraDurum,
	oSigaraIciyor,
	oSigaraKalanHak,
	oTamirSure,
	oTelefon,
	pSurukle,
	pSurukleyen,
	pSurukleTimer,
	bool:oTelefonDurum,
	bool:oCevaplandi,
	oTelefonNumarasi,
	oArama,
	oAramaSure,
	oGubre,
	oSaksi,
	oLamba,
	oVantilator,
	oKulaklik,
	bool:oKulaklikTakiyor,
	bool:oMuzikDinliyor,
	oBakim,
	oTohum,
	oUyusturucu[3],
	oUyusturucuOnay,
	oSonGiris[36],
	oHapisSure[2],
	oyuncuKod[12],
	oVatandaslikNo,
	oRuhsat,
	oHapisID,
	bool:oGozBagli,
	oKonusmaAnimasyon,
	uDuzenliyor,
	bool:oKontrol,
	oMeslek,
	bool:oTaksiIsbasi,
	oEkstraDil,
	oUcuncuDil,
	oUcuncuDilHakki,
	oFirma,
	oFirmarutbe,
	oSu,
	oGazoz,
	oBira,
	oVodka,
	oViski,
	oKanama,
	oIcecek,
	oIcecekHak,
	oDuzenlenenPompa,
	oBoombox,
	oMuzikKutusu,
	bool:oPDgps,
	oAsansor,
	oEhliyetUyari,
	oBagaj,
	bool:pOOC,
	bool:pYayin,
	bool:pReklam,
	oDuzenlenenYazi,
	oDuzenlenenGrafiti,
	oGraffitiSure,
	oKonumKisi,
	oLiderlikYetenek,
	oSurusYetenek,
	oHirsizlikYetenek,
	oKimyaYetenek,
	oUretimYetenek,
	oGucYetenek,
	oDayaniklilik,
	oDayaniklilikEXP,
	oLiderlikYetenekEXP,
	oSurusYetenekEXP,
	oHirsizlikYetenekEXP,
	oKimyaYetenekEXP,
	oUretimYetenekEXP,
	oGucYetenekEXP,
	oYetenekPuani,
	pYayinID,
	pYayinIzlenenID
};

enum soruBilgi {
	sKullanimda,
	sTur,
	sSahip,
	sMesaj[128 char]
};

enum hasarBilgi {
	hasarVarmi,
	hasarBolge,
	Float:hasarDeger,
	hasarVeren,
	hasarSilah
};

enum evBilgi {
	evID,
	bool:evKullanimda,
	bool:evLamba,
	evAdres[128],
	Float:evPos[4],
	Float:evIcPos[4],
	evDisInt,
	evDisVW,
	evInterior,
	evVW,
	evPickup,
	evDurum,
	evSahip,
	evFiyat,
	evSahipIsim[32],
	evKiraciIsim[32],
	evDekor,
	evBakimSure,
	evAnahtar,
	evKiralik,
	evKiraci,
	evKiraUcret,
	evVergi,
	evKasa
};

enum npcBilgi
{
	npcSQL,
	bool:npcKullanim,
	npcAktor,
	npcSkin,
	npcAnimlib[50],
	npcAnimname[50],
	Float:npcPos[4],
	Text3D:npcLabel,
	npcTur,
	npcYazi[512]
};
new npcData[MAX_AKTOR][npcBilgi];

enum graffitiBilgi
{
	grfSahip[MAX_PLAYER_NAME],
	grfObje,
	grfYazi[128],
	grfFont[60],
	Float:grfPos[6]
};
new grfData[MAX_GRAFITI][graffitiBilgi];

enum isyeriBilgi {
	isyeriID,
	bool:isyeriKullanimda,
	isyeriAd[128],
	Float:isyeriPos[4],
	Float:isyeriIcPos[4],
	isyeriInterior,
	isyeriVW,
	isyeriBirlik,
	isyeriDisInt,
	isyeriDisVW,
	isyeriFiyat,
	isyeriSahip,
	isyeriDurum,
	isyeriPickup,
	isyeriSahipIsim[32],
	isyeriOrtakIsim[32],
	isyeriTur,
	isyeriKasa,
	iGirisUcret,
	isyeriOrtak,
	isyeriMuzik[128],
	isyeriVergi,
	isyeriUrun
};

enum binaBilgi {
	bID,
	bool:bKullanimda,
	bIsim[32],
	bModel,
	Float:bPos[4],
	Float:bIPos[4],
	Text3D:binaText,
	bPickup,
	bVW,
	bInterior,
	bDisVW,
	bDisInt,
	binaDurum,
	binaTur
};

enum birlikBilgi {
	birlikID,
	bool:birlikKullanimda,
	birlikAd[32],
	birlikkisaltma[9],
	birlikTur,
	birlikAmaci,
	birlikOnay,
	Float:bDolapPos[3],
	birlikMaksRutbe,
	bDolapInt,
	birlikaraci,
	birlikisyeri,
	bDolapVW,
	Text3D:bDolapText3D,
	bDolapPickup,
	oKanal,
	birlikR1[32],
	birlikR2[32],
	birlikR3[32],
	birlikR4[32],
	birlikR5[32],
	birlikR6[32],
	birlikR7[32],
	birlikR8[32],
	birlikR9[32],
	birlikR10[32],
	birlikR11[32],
	birlikR12[32],
	birlikR13[32],
	birlikR14[32],
	birlikR15[32],
	birlikR16[32],
	birlikR17[32],
	birlikR18[32],
	birlikR19[32],
	birlikR20[32],
	birlikLevel,
	birlikDuyuru[48]
};

enum aracBilgi {
	aracID,
	araccalintisure,
	aracSigorta,
	kilitseviye,
	alarmseviye,
	bool:aracRadyoDurum,
	aracRadyoURL[128 char],
	aracParca[14],
	aracKullanimda,
	aracModel,
	aracTur,
	aracPlaka[12],
	aracSahip,
	Float:aracPos[4],
	aracRenk1,
	aracRenk2,
	aracPaintjob,
	aracKilit,
	aracBirlik,
	aracFirma,
	aracKapasite,
	aracYarat,
	aracYazi[128],
	sirenDurum,
	sirenObje,
	aracAnahtar,
	aracKiralik,
	aKiraUcret,
	aKiraZaman,
	aracInt,
	aracWorld,
	aracMeslek,
	Text3D:aracText,
	Float:aracKM,
	Float:aracBenzin,
	aracFiyat,
	aracSlot[4],
	aracSlotVar[4],
	aracBagajcan,
	aracVergi,
	aracCeza,
	Float:aracCani,
	bool:aracDorseKullanim
};

enum atmBilgi {
	atmID,
	bool:atmKullanimda,
	Float:atmPos[4],
	atmInterior,
	atmWorld,
	atmObje,
	Text3D:atmText3D,
	atmPara
};

enum uyusturucuBilgi {
	uID,
	bool:uKullanimda,
	Float:uPos[4],
	uInterior,
	uWorld,
	Text3D:uText,
	uDakika,
	uGun,
	uEv,
	uDurum,
	uBakim,
	uObje
};

enum meslekBilgi {
	mID,
	bool:mKullanimda,
	Float:mPos[4],
	mInterior,
	mWorld,
	Text3D:mText,
	mPickup,
	mTur
};

enum tutuklamaNoktasi {
	tID,
	tKullanimda,
	Float:tPos[4],
	Float:hPos[4],
	tInterior,
	tWorld,
	hInterior,
	hWorld,
	tPickup,
	Text3D:tText
};

enum barikatBilgi {
	bool:barikatKullanimda,
	barikatModel,
	Float:barikatPos[6],
	Text3D:barikatText,
	barikatObje
}

enum benzinPompasi {
	pompaID,
	pompaKullanimda,
	pompaIsyeri,
	Float:pompaPos[4],
	pompaBenzin,
	pompaObje,
	Text3D:pompaText3D,
	pompaUcret
};

enum boomboxBilgi {
	boomboxKullanimda,
	Float:boomboxPos[3],
	boomboxInterior,
	boomboxWorld,
	boomboxObje,
	boomboxURL[128 char],
	Text3D:boomboxText3D
};

// Deðiken tanýmlamalarý.
new MySQL:g_SQL, bool:kayitdurum = true, restarttimer, bool:restart, bool:oockanal = false, bool:akanal = true, bool:sunucukilit = false, bool:techizatizni = false;
new erkekdolapsiyah = mS_INVALID_LISTID, erkekdolapbeyaz = mS_INVALID_LISTID, kadindolapbeyaz = mS_INVALID_LISTID, kadindolapsiyah = mS_INVALID_LISTID, erkeksiyahfakir = mS_INVALID_LISTID, erkekbeyazfakir = mS_INVALID_LISTID, uniformaerkeksiyah = mS_INVALID_LISTID, uniformaerkekbeyaz = mS_INVALID_LISTID, otokayit = 0;
new erkekbeyazorta = mS_INVALID_LISTID,erkekbeyazzengin = mS_INVALID_LISTID,erkeksiyahorta = mS_INVALID_LISTID,erkeksiyahzengin = mS_INVALID_LISTID;
new kadinbeyazorta = mS_INVALID_LISTID,kadinbeyazzengin = mS_INVALID_LISTID,kadinsiyahorta = mS_INVALID_LISTID,kadinsiyahzengin = mS_INVALID_LISTID;
new erkekvip = mS_INVALID_LISTID,kadinvip = mS_INVALID_LISTID,araclarliste = mS_INVALID_LISTID, coolaraclarliste = mS_INVALID_LISTID;
new fderkekbeyaz = mS_INVALID_LISTID, fderkeksiyah = mS_INVALID_LISTID, fdkadinbeyaz = mS_INVALID_LISTID, fdkadinsiyah = mS_INVALID_LISTID;
new erkekkayitbeyaz = mS_INVALID_LISTID, erkekkayitsiyah = mS_INVALID_LISTID, kadinkayitbeyaz = mS_INVALID_LISTID, kadinkayitsiyah = mS_INVALID_LISTID, bisikletler = mS_INVALID_LISTID;
new uniformakadinsiyah = mS_INVALID_LISTID, uniformakadinbeyaz = mS_INVALID_LISTID, barikatsec = mS_INVALID_LISTID, AracZaman[MAX_VEHICLES] = {0, ...}, Float:AracSonPos[MAX_VEHICLES][3];
new IcecekBeklemeSuresi[MAX_PLAYERS], BenzinTimer[MAX_PLAYERS], BenzinAliyor[MAX_PLAYERS], BenzinPompasi[MAKSIMUM_BENZIN_POMPASI][benzinPompasi], BenzinIsyeri[MAX_PLAYERS];
static oyuncuData[MAX_PLAYERS][oyuncudata], SoruBilgi[MAKSIMUM_SORU][soruBilgi], BinaBilgi[MAKSIMUM_BINA][binaBilgi], BirlikBilgi[MAKSIMUM_BIRLIK][birlikBilgi];
static AracBilgi[MAKSIMUM_ARAC][aracBilgi], EvBilgi[MAKSIMUM_EV][evBilgi];
static IsyeriBilgi[MAKSIMUM_ISYERI][isyeriBilgi], ATMBilgi[MAKSIMUM_ATM][atmBilgi], TutuklamaNoktasi[MAKSIMUM_TUTUKLAMANOKTASI][tutuklamaNoktasi];
static HavaAlaniKapi[2], bool:hdurum = false, bool:aracrespawn = false, arespawntimer, aractabeladurum[MAX_VEHICLES], UyusturucuBilgi[MAKSIMUM_UYUSTURUCU][uyusturucuBilgi];
static kadinbeyazfakir = mS_INVALID_LISTID, kadinsiyahfakir = mS_INVALID_LISTID;
static HasarBilgi[MAX_PLAYERS][MAKSIMUM_HASAR][hasarBilgi], PlayerText:siyahekran[MAX_PLAYERS], MeslekBilgi[MAKSIMUM_MESLEK][meslekBilgi];
static SonArac[MAX_PLAYERS], DegistirilenArac[MAX_PLAYERS], DegistirmeSuresi[MAX_PLAYERS], bool:OyuncuGiris[MAX_PLAYERS], OlumSayisi[MAX_PLAYERS], OlumSuresi[MAX_PLAYERS];
static PlayerText:GirisText[MAX_PLAYERS], Float:eskipos[MAX_PLAYERS][4], eskiworld[MAX_PLAYERS];
static eskiint[MAX_PLAYERS], bool:PaynSpray[4] = false, BarikatBilgi[MAKSIMUM_BARIKAT][barikatBilgi];
static BoomboxBilgi[MAX_PLAYERS][boomboxBilgi], bool: ilkharf = false, ElKoy[MAX_PLAYERS], bool:YuklemeTamamlandi[MAX_PLAYERS];
new pdgarajvw = 911;
new girilensifre[MAX_PLAYERS] = -1;
new bool:DorseYuku[MAX_VEHICLES] = false;
new PlayerText:AracModifye[ MAX_PLAYERS ][ 7 ];
new oyuncunungiyim[MAX_PLAYERS] = 0;
new Text3D:aracekipkodu[MAX_VEHICLES], bool:aracartikkodlu[MAX_VEHICLES] = false;
new Float:kilitY[MAX_PLAYERS] = 363.000000;
new PlayerText:TDEditor_PTD[MAX_PLAYERS][5];
new PlayerText:sagaltdraw[MAX_PLAYERS][5];
new PlayerText:yetenekdraw[MAX_PLAYERS][27];
new OyuncuKarakter[MAX_PLAYERS][4][MAX_PLAYER_NAME + 1];
new OyuncuKarakterSeviye[MAX_PLAYERS][4];
new OyuncuKarakterBoy[MAX_PLAYERS][4];
new OyuncuKarakterKilo[MAX_PLAYERS][4];
new OyuncuKarakterLokasyon[MAX_PLAYERS][4][36];
new OyuncuKarakterSkin[MAX_PLAYERS][4];
new bool:giristextdrawi[MAX_PLAYERS] = false;
new PlayerText:pikilit[5][MAX_PLAYERS];
new PlayerText:gym[14][MAX_PLAYERS];
new gymtimer[MAX_PLAYERS], gymtustimer[MAX_PLAYERS], gymtur[MAX_PLAYERS];
new Text:kasstat_0,
Text:kasstat_1,
Text:kasstat_2,
PlayerText:kasstat_3[MAX_PLAYERS],
PlayerText:kasstat_4[MAX_PLAYERS],
Text:kasstat_5,
Text:kasstat_6;
new Text:gym_0;
new Text:gym_1;
new tmpobj1[MAX_PLAYERS], tmpobj2[MAX_PLAYERS];
new bool:karaktersecimekrani[MAX_PLAYERS] = false;
new kilitinterval[MAX_PLAYERS], kilitsure[MAX_PLAYERS], alarmsure[MAX_PLAYERS];
new kilitkirtimer[MAX_PLAYERS], duzkontaktimer[MAX_PLAYERS];
new Text:kilit_0;
new truckerseviyebirde[MAX_PLAYERS] = 0;
new truckerseviyeikide[MAX_PLAYERS] = 0;
new truckerseviyeucte[MAX_PLAYERS] = 0;
new bool:IKIX_PAYDAY = false;
new bool:CPTViceVIPOnay = false;
new bool:IpOnayDurumu = false;
new bool:GoogleOnayDurumu = true;
new bool:SunshineSatisDurumu = false;
new SPOR_YAPAN_KISI = 0;
new firmalojistik = mS_INVALID_LISTID;
new firmamedya = mS_INVALID_LISTID;
new bool:KilidiKiriyorum[MAX_PLAYERS] = false;
new firmarent = mS_INVALID_LISTID;
new firmasilah = mS_INVALID_LISTID;
new firmataksi = mS_INVALID_LISTID;
new firmatamir = mS_INVALID_LISTID;
new TransportDriver[MAX_PLAYERS];
new TransportTime[MAX_PLAYERS];
new TransportCost[MAX_PLAYERS];
new TransportValue[MAX_PLAYERS];
new TransportDuty[MAX_PLAYERS];
new bool:oyuncumuzikmenusunde[MAX_PLAYERS] = false;
new bool:oyuncuseksenlerdinliyor[MAX_PLAYERS] = false;
new bool:oyuncuyetmislerdinliyor[MAX_PLAYERS] = false;
new bool:oyuncubageldinliyor[MAX_PLAYERS] = false;
new bool:oyuncuindiepopdinliyor[MAX_PLAYERS] = false;
new bool:oyuncuthetripdinliyor[MAX_PLAYERS] = false;
new bool:oyuncuvicenetanasayfada[MAX_PLAYERS] = false;
new bool:oyuncuvicenetbankada[MAX_PLAYERS] = false;
new bool:oyuncuvicenetsosyalde[MAX_PLAYERS] = false;
new bool:baliktutuyor[MAX_PLAYERS] = false;
new firmacuvalpickup, tahtapickup;
new secilenpin[MAX_PLAYERS];
new secilenok[MAX_PLAYERS];
new pinaktif[MAX_PLAYERS];
new konteyneryukle[MAX_PLAYERS];
new dorseyukle[MAX_PLAYERS];
new dorsesat[MAX_PLAYERS];
new konteynersat[MAX_PLAYERS];
new Konteyner[MAX_VEHICLES];
new Dorse[MAX_VEHICLES];
new bool:dorsetasiyor[MAX_PLAYERS] = false;
new bool:konteynertasiyor[MAX_PLAYERS] = false;
new cezaodemesebep[MAX_PLAYERS][96];
new Aksesuarlar = mS_INVALID_LISTID;
new ozelaksesuarlar = mS_INVALID_LISTID;
new pdaksesuarlar = mS_INVALID_LISTID;
new fdaksesuarlar = mS_INVALID_LISTID;
new secilenslot[MAX_PLAYERS];
new BilgiTextTimer[MAX_PLAYERS];
new KanamaTimer[MAX_PLAYERS];
new Text3D:KanamaLabeli[MAX_PLAYERS];
new Text3D:kulakliklabeli[MAX_PLAYERS];
new PlayerText:Bilgi[MAX_PLAYERS];
new gPlayerCamObj[MAX_PLAYERS];
new ankesortime[MAX_PLAYERS];
new PlayerText:TD_Fader = PlayerText:INVALID_TEXT_DRAW;
new AksesuarTimer[MAX_PLAYERS];
new Flasor[MAX_VEHICLES] = 0;
new FlasorStatu[MAX_VEHICLES];
new WalkStyle[MAX_PLAYERS];
new bool:HirsizDurum[MAX_PLAYERS] = false;
new walktime[MAX_PLAYERS];
new hirsiztime[MAX_PLAYERS];
new fadeTimerVar[MAX_PLAYERS];
new ytimerhiz = 70;
new PlayerText:IsyeriTextdraw[MAX_PLAYERS];
new IsBilgiTextTimer[MAX_PLAYERS];
new Text3D:AracBirimKOD[MAX_VEHICLES];
new PlayerText:HapisText[MAX_PLAYERS];
new SandalyeObjem[MAX_PLAYERS];
new TezgahObjesi[MAX_PLAYERS];
new CadirObjem[MAX_PLAYERS];
new AracSlotSQL[MAX_PLAYERS][MAX_OYUNCU_ARAC];
new RespawnDeger = 0;
new bool:RespawnTimer = false;
new gVar3000[3000];
new tamirTimer[MAX_PLAYERS];
new tamirkititimer[MAX_PLAYERS];
new HizLimit[MAX_VEHICLES];
new PlayerText:AracGosterge[6][MAX_PLAYERS];
new PlayerText:ATMTextDraw[9][MAX_PLAYERS];
new SunucuZaman = 12;
new SunucuWeather = 2;
new PlayerText:RenklerDraw[2][MAX_PLAYERS];
new bool:RenklerDurum[MAX_PLAYERS];
new PlayerText:TermalText[MAX_PLAYERS];
new bool:HeliKamerada[MAX_PLAYERS];
new HelikopterKamera[MAX_VEHICLES];
new pmatilanadmin[MAX_PLAYERS];
new admineatilanpm[MAX_PLAYERS];
new MDC_SucluSQL[MAX_PLAYERS][1000];

//Yat Textdrawlarý
new Text:textdraw_0;
new Text:textdraw_1;
new Text:textdraw_2;
new Text:textdraw_3;
new Text:textdraw_4;
new Text:textdraw_5;
new Text:textdraw_6;
new Text:textdraw_7;
new Text:textdraw_8;
new Text:textdraw_9;
new Text:textdraw_10;
new Text:textdraw_11;

//Telefonv2 Textdrawlarý

new Text:telefonyenidraw[39];

//iterator's
new Iterator:Araclar<MAX_VEHICLES>;
new Iterator:Grafitiler<MAX_GRAFITI>;
new Iterator:Yerdekiler<MAX_YERESYASI>;
new Iterator:Ankesorlu<MAX_ATELEFON>;
new Iterator:Tamirciler<MAX_TAMIRCI>;
new Iterator:Giseler<MAX_GISELER>;
new Iterator:Garajlar<MAX_GARAJ>;
new Iterator:Reklamlar<MAX_REKLAM>;
new Iterator:Kutu<MAX_ESYA>;
new Iterator:Firma<MAX_FIRMA>;
new Iterator:Asansorler<MAX_ASANSOR>;
new Iterator:Itemler<MAX_BIRAKILANITEM>;
new Iterator:Resepsiyonlar<MAX_RESEPSIYON>;
new Iterator:OtelOdalari<MAX_OTEL_ODA>;
new Iterator:Tezgah<MAX_TEZGAH>;
new Iterator:Seyyar<MAX_SEYYAR>;
new Iterator:Ekipler<MAX_EKIP>;
new Iterator:Birlikler<MAKSIMUM_BIRLIK>;

enum gise_data
{
	giseObje,
	giseSure,
	Text3D:giseLabel,
	giseUcret,
	Float:gisePos[6],
};
new giseData[MAX_GISELER][gise_data];

enum garajInteriorEnum {
	Float:intX,
	Float:intY,
	Float:intZ,
	Float:intA,
	gMaxKapasite
}

new gInteriorSpawn[][garajInteriorEnum] = {
{277.1996,-1637.2484,17.8593,259.6895,1}, //Küçük Garaj Araba Giriþ
{-469.6997,-538.3078,966.5652,179.4171,2} //Büyük Garaj Giriþ
};

enum envanterVeri
{
	bool:	i_aktif,
	bool:   i_kullanimda,
	bool:   i_craft,
	i_tip,
	i_var
}
new
EnvanterData[MAX_PLAYERS][envanterVeri][MAX_ITEM];

enum evEnvanterVeri
{
	bool:i_aktif,
	bool:i_kullanimda,
	i_tip,
	i_var
}
new EvEnvanterData[MAKSIMUM_EV][evEnvanterVeri][MAX_ITEM];

enum itemverileri {
	iid,
	iisim[60],
	iaciklama[120],
	iobje,
	itur,
	Float:igram
}

new ItemArray [] [itemverileri] =
{
	{1, "Sigara", "Bir dal sigara. Yakmak için çakmaða ihtiyacýn var.", 19625, KATEGORI_TUKETILEBILIR, 0.02},
	{2, "Kuba Purosu", "Bir küba purosu. Yakmak için çakmaða ihtiyacýn var.", 3044, KATEGORI_TUKETILEBILIR, 0.03},
	{3, "Cakmak", "Sigarayý, kamp ateþini ve molotofu yakmak için kullanýlabilir.", 19998, KATEGORI_GERECLER, 0.05},
	{4, "Bira", "Alkollü bir içecek.", 1950, KATEGORI_YIYECEK, 0.5},
	{5, "Viski", "Alkollü sert bir içki.", 19820, KATEGORI_YIYECEK, 0.7},
	{6, "Votka", "Alkollü sert bir içki.", 1517, KATEGORI_YIYECEK, 0.7},
	{7, "Tekila", "Alkollü sert bir içki.", 19823, KATEGORI_YIYECEK, 0.7},
	{8, "Soda", "Bir içecek. Canýnýzý %10 yükseltir.", 19570, KATEGORI_YIYECEK, 0.2},
	{9, "Corona", "Hispaniklerin bayýldýðý içecek.", 1544, KATEGORI_YIYECEK, 0.3},
	{10, "Sarap", "Klasik bir þiþe þarap.", 1669, KATEGORI_YIYECEK, 1.0},
	{11, "Sampanya", "Mutlu günlerde patlatýn!", 19822, KATEGORI_YIYECEK, 1.0},
	{12, "Kola", "Bir içecek. Canýnýzý %10 yükseltir.", 1951, KATEGORI_YIYECEK, 0.2},
	{13, "Gazoz", "Bir içecek. Canýnýzý %10 yükseltir.", 1543, KATEGORI_YIYECEK, 0.2},
	{14, "Akilli Telefon", "Akýllý telefon. Çekim gücü kuvvetli. Konum gönderebilir.", 18868, KATEGORI_ELEKTRONIK, 0.15},
	{15, "Uydu Telefonu", "Uydu telefonu, hemen hemen her yerde çeker.", 19942, KATEGORI_ELEKTRONIK, 0.35},
	{16, "Eski Telefon", "Büyükannenizin telefonu. Her yerde çekmiyor.", 18866, KATEGORI_ELEKTRONIK, 0.2},
	{17, "Cikolata", "Bir yiyecek. Canýnýzý %5 yükseltir.", 19883, KATEGORI_YIYECEK, 0.08},
	{18, "Patetes Cipsi", "Bir yiyecek. Canýnýzý %5 yükseltir.", 2821, KATEGORI_YIYECEK, 0.05},
	{19, "Italyan Pizza", "Bir içecek. Canýnýzý %30 yükseltir.", 2814, KATEGORI_YIYECEK, 0.5},
	{20, "Muz", "Bir yiyecek. Canýnýzý %10 yükseltir.", 19578, KATEGORI_YIYECEK, 0.1},
	{21, "Hazýr Noodle", "Bir yiyecek. Canýnýzý %20 yükseltir.", 2858, KATEGORI_YIYECEK, 0.25},
	{22, "Donut", "Bir yiyecek. Canýnýzý %10 yükseltir.", 2342, KATEGORI_YIYECEK, 0.1},
	{23, "Somon Baligi", "Bir yiyecek. Canýnýzý %50 yükseltir.", 19566, KATEGORI_YIYECEK, 0.5},
	{24, "Burger", "Leziz burger. Canýnýzý %15 yükseltir.", 2880, KATEGORI_YIYECEK, 0.5},
	{25, "Dugun Pastasi", "Özel günler için bir pasta.", 19525, KATEGORI_YIYECEK, 3.0},
	{26, "Bir Parca Bez", "Çeþitli tariflerde kullanýlabilir.", 2843, KATEGORI_CRAFT, 0.02},
	{27, "Bicak", "Keskin bir býçak.", 19583, KATEGORI_GERECLER, 0.2},
	{28, "Hediye Kutusu", "Hediye olarak birine verebilirsiniz.", 19055, KATEGORI_CRAFT, 1.0},
	{29, "Boombox", "Müzik dinlemek için kullanýlan eþya.", 2226, KATEGORI_ELEKTRONIK, 2.0},
	{30, "Kurek", "Bir kürek. Tarým ve toprak iþleri için kullanýlabilir.", 337, KATEGORI_GERECLER, 1.0},
	{31, "Alet Cantasi", "Bir tamircinin olmazsa olmazý.", 19921, KATEGORI_GERECLER, 2.0},
	{32, "Maymuncuk", "Araba ve mekan kilitlerini açmaya yarar. Kimseye yakalanmayýn.", 19804, KATEGORI_GERECLER, 0.2},
	{33, "Gunes Enerjili Batarya", "Güneþten gelen ýþýný enerjiye çeviren batarya. Bir çok elektronik alete uyumlu.", 1697, KATEGORI_ELEKTRONIK, 0.5},
	{34, "Marijuana", "Bir çeþit uyuþturucu. ", 3027, KATEGORI_TUKETILEBILIR, 0.02},
	{35, "Kokain", "Bir çeþit uyuþturucu. ", 1279, KATEGORI_TUKETILEBILIR, 0.02},
	{36, "Kristal Meth", "Bir çeþit uyuþturucu. ", 1579, KATEGORI_TUKETILEBILIR, 0.02},
	{37, "Eroin", "Bir çeþit uyuþturucu. ", 1576, KATEGORI_TUKETILEBILIR, 0.02},
	{38, "Ekstazi", "Bir çeþit uyuþturucu. ", 1577, KATEGORI_TUKETILEBILIR, 0.02},
	{39, "LSD", "Bir çeþit uyuþturucu. ", 1578, KATEGORI_TUKETILEBILIR, 0.02},
	{40, "Koka Yapragi", "Uyuþturucu yapýmýnda kullanýlabilir.", 2663, KATEGORI_CRAFT, 0.2},
	{41, "Sulfurik Asit 2", "Uyuþturucu yapýmýnda kullanýlabilir.", 2663, KATEGORI_CRAFT, 0.2},
	{42, "Karbonat", "Uyuþturucu yapýmýnda kullanýlabilir.", 2663, KATEGORI_CRAFT, 0.2},
	{43, "Kafein", "Uyuþturucu yapýmýnda kullanýlabilir.", 2663, KATEGORI_CRAFT, 0.2},
	{44, "Fosforik Asit", "Uyuþturucu yapýmýnda kullanýlabilir.", 2663, KATEGORI_CRAFT, 0.2},
	{45, "Seker", "Uyuþturucu yapýmýnda kullanýlabilir.", 2663, KATEGORI_CRAFT, 0.2},
	{46, "Saksi", "Kenevir tohumlarýný ekebileceðiniz kap. ", 2203, KATEGORI_CRAFT, 2.0},
	{47, "Vantilator", "Kenevir tohumlarýnn büyümesi için gereken ýsýyý veren eþya. ", 16779, KATEGORI_CRAFT, 0.5},
	{48, "Lamba", "Kenevir tohumlarýnn büyümesi için gereken ýþýðý saðlayan eþya. ", 2070, KATEGORI_CRAFT, 0.5},
	{49, "Govde", "Bir silah parçasý. ", 2040, KATEGORI_CRAFT, 0.25},
	{50, "Surgu", "Bir silah parçasý. ", 2040, KATEGORI_CRAFT, 0.25},
	{51, "Gerdel", "Bir silah parçasý. ", 11739, KATEGORI_CRAFT, 0.25},
	{52, "Kabza", "Bir silah parçasý. ", 2040, KATEGORI_CRAFT, 0.25},
	{53, "Namlu", "Bir silah parçasý. ", 2040, KATEGORI_CRAFT, 0.25},
	{54, "Hashas", "s", 1578, KATEGORI_TUKETILEBILIR, 0.02},
	{55, "Amfetamin", "s", 1580, KATEGORI_TUKETILEBILIR, 0.02},
	{56, "PCP", "s", 1577, KATEGORI_TUKETILEBILIR, 0.02},
	{57, "Ketamina", "s", 1575, KATEGORI_TUKETILEBILIR, 0.02},
	{58, "Meth", "s", 1579, KATEGORI_TUKETILEBILIR, 0.02},
	{59, "Crack", "s", 1577, KATEGORI_TUKETILEBILIR, 0.02},
	{60, "Purple Drank", "s", 1577, KATEGORI_TUKETILEBILIR, 0.02},
	{61, "Kenevir Tohumu", "s", 2060, KATEGORI_UYUSTURUCU_YAPIM, 0.01},
	{62, "Benzen", "s", 19570, KATEGORI_UYUSTURUCU_YAPIM, 0.01},
	{63, "Ciclopentilbromur", "s", 19570, KATEGORI_UYUSTURUCU_YAPIM, 0.01},
	{64, "Metaliamin", "s", 19570, KATEGORI_UYUSTURUCU_YAPIM, 0.01},
	{65, "Morfin", "s", 19570, KATEGORI_UYUSTURUCU_YAPIM, 0.01},
	{66, "Hidroklorik Asit", "s", 19570, KATEGORI_UYUSTURUCU_YAPIM, 0.01},
	{67, "Amonyak", "s", 19570, KATEGORI_UYUSTURUCU_YAPIM, 0.01},
	{68, "Phenly-2-Nitropropen", "s", 19570, KATEGORI_UYUSTURUCU_YAPIM, 0.01},
	{69, "Izopropil Alkol", "s", 19570, KATEGORI_UYUSTURUCU_YAPIM, 0.01},
	{70, "Ekolojik Asit", "s", 19570, KATEGORI_UYUSTURUCU_YAPIM, 0.01},
	{71, "Sodyum Hidroksit", "s", 19570, KATEGORI_UYUSTURUCU_YAPIM, 0.01},
	{72, "Sulfurik Asit", "s", 19570, KATEGORI_UYUSTURUCU_YAPIM, 0.01},
	{73, "Safrol", "s", 19570, KATEGORI_UYUSTURUCU_YAPIM, 0.01},
	{74, "Metilamin Hidroklorur", "s", 19570, KATEGORI_UYUSTURUCU_YAPIM, 0.01},
	{75, "Amonyum Klorur", "s", 19570, KATEGORI_UYUSTURUCU_YAPIM, 0.01},
	{76, "Dimetilamin Hidroklorur", "s", 19570, KATEGORI_UYUSTURUCU_YAPIM, 0.01},
	{77, "Keton", "s", 19570, KATEGORI_UYUSTURUCU_YAPIM, 0.01},
	{78, "Ergotamin", "s", 19570, KATEGORI_UYUSTURUCU_YAPIM, 0.01},
	{79, "Liserjik Asit", "s", 19570, KATEGORI_UYUSTURUCU_YAPIM, 0.01},
	{80, "Psodoefedrin", "s", 19570, KATEGORI_UYUSTURUCU_YAPIM, 0.01},
	{81, "Kirmizi Fosfor", "s", 19570, KATEGORI_UYUSTURUCU_YAPIM, 0.01},
	{82, "Kodein", "s", 19570, KATEGORI_UYUSTURUCU_YAPIM, 0.01},
	{83, "Prometazin", "s", 19570, KATEGORI_UYUSTURUCU_YAPIM, 0.01},
	{84, "Hidrotik Asit", "s", 19570, KATEGORI_UYUSTURUCU_YAPIM, 0.01},
	{85, "Striknin", "s", 19570, KATEGORI_UYUSTURUCU_YAPIM, 0.01},
	{86, "Kar Maskesi", "Yüzünüzü soðuktan korumak için güzel bir maske.", 19163, KATEGORI_GERECLER, 1.0},
	{87, "Metal Parca", "Bir þeyler üretmek için iþine yarayabilir.",  19941, KATEGORI_CRAFT, 0.7},
	{88, "Cekic", "Bir þeyler üretmek için iþine yarayabilir.",  18635, KATEGORI_CRAFT, 0.7},
	{89, "Isitici Tup", "Bir þeyler üretmek için iþine yarayabilir.",  19816, KATEGORI_CRAFT, 3.0},
	{90, "Tornavida", "Bir þeyler üretmek için iþine yarayabilir.",  18644, KATEGORI_CRAFT, 0.5},
	{91, "Metal Panel", "Bir þeyler üretmek için iþine yarayabilir.",  19845, KATEGORI_CRAFT, 0.7},
	{92, "Mil", "Bir þeyler üretmek için iþine yarayabilir.",  11739, KATEGORI_CRAFT, 0.3},
	{93, "Fisek Yatagi", "Bir silah parçasý. ", 327, KATEGORI_CRAFT, 0.25},
	{94, "Hatve", "Bir silah parçasý. ", 327, KATEGORI_CRAFT, 0.25},
	{95, "Surgu Takimi", "Bir silah parçasý. ", 328, KATEGORI_CRAFT, 0.25},
	{96, "Tetikleyici", "Bir þeyler üretmek için iþine yarayabilir.",  11716, KATEGORI_CRAFT, 0.3},
	{97, "Yayli Hazne", "Bir þeyler üretmek için iþine yarayabilir.",  328, KATEGORI_CRAFT, 0.3},
	{98, "Hassas Pin", "Bir þeyler üretmek için iþine yarayabilir.",  1876, KATEGORI_CRAFT, 0.3},
	{99, "Desert Eagle", "Bu silahý dikkatli kullansan iyi olur.",  348, KATEGORI_SILAH, 0.3},
	{100, "Colt-45", "Bu silahý dikkatli kullansan iyi olur.",  346, KATEGORI_SILAH, 0.3},
	{101, "AK-47", "Bu silahý dikkatli kullansan iyi olur.",  355, KATEGORI_SILAH, 0.3},
	{102, "Mac-10", "Bu silahý dikkatli kullansan iyi olur.",  352, KATEGORI_SILAH, 0.3},
	{103, "Shotgun", "Bu silahý dikkatli kullansan iyi olur.",  349, KATEGORI_SILAH, 0.3},
	{104, "Kamera", "Her türlü fotoðraf çekimi için iþini görür.",  367, KATEGORI_SILAH, 0.3},
	{105, "Benzin Bidonu", "Aracýna benzin yüklemesi yapabilirsin.", 1650, KATEGORI_TUKETILEBILIR, 0.3},
	{106, "Kiyafet Poseti", "Kiyafetlerini posete koyabilirsin.", 1210, KATEGORI_GERECLER, 0.3},
	{107, "Yedek Anahtar", "Yedek araba anahtari.", 19804, KATEGORI_GERECLER, 0.4},
	//{108, "Pense", "Pense isinize mutlaka yarar.", -2030, KATEGORI_GERECLER, 0.4},
	{108, "Pense", "Pense isinize mutlaka yarar.", 18644, KATEGORI_GERECLER, 0.4},
	{109, "Deodorant", "Kotu kokulardan kurtulmak icin birebir.", 19570, KATEGORI_TUKETILEBILIR, 0.8},
	{110, "Loto Bileti", "Loto bileti isinize mutlaka yarar.", 19776, KATEGORI_GERECLER, 0.4},
	{111, "Yilbasi Bileti", "Yilbasi bileti isinize mutlaka yarar.", 1581, KATEGORI_GERECLER, 0.4},
	{112, "Marijuana Tohumu", "Marijuana icin isinize mutlaka yarar.", 1279, KATEGORI_GERECLER, 0.4},
	{113, "Kimyasal Soda", "Donusum icin mutlaka isinize mutlaka yarar.", 2709, KATEGORI_GERECLER, 0.5},
	{114, "Uyusturucu Paketi", "Satmak icin isinize mutlaka yarar.", 1576, KATEGORI_GERECLER, 0.4},
	{115, "Koko Tohumu", "Kokain icin isinize mutlaka yarar.", 1279, KATEGORI_GERECLER, 0.4},
	{116, "Koko Bitkisi", "Kokain icin isinize mutlaka yarar.", 2901, KATEGORI_GERECLER, 0.4},
	{117, "Mermi Kovani", "Adli tip icin isinize mutlaka yarar.", 2061, KATEGORI_GERECLER, 0.4},
	{118, "Tamir Kiti", "Aracinizi tamir etmeye yarar.", 19921, KATEGORI_GERECLER, 0.7}
};

enum firmaturEnum {
	fTurID,
	fTurBedel
}

new fTurveri[][firmaturEnum] = {
	{0, 400000},//Hastane
	{1, 1000000},//Medya/Basýn
	{2, 1000000},//Lojistik
	{3, 500000},//Rent A Car & Galeri
	{4, 750000},//Tamirhane
	{5, 350000}//Hukuk
};

enum ekinEnum {
	ekinfiyat,
	ekinisim[20],
	ekinzaman
}
new ekinlerveri[][ekinEnum] = {
	{0, "Yok", 0},
	{10, "Arpa", 2},
	{15, "Buðday", 3},
    {20, "Mýsýr", 4},
    {25, "Þeker Pancarý", 5},
    {30, "Patates", 6},
    {35, "Ayçiçeði", 7},
    {40, "Kanola", 8}
	
};

enum piyasaEnum {
	piyasaisim[20],
	Float:piyasax,
	Float:piyasay,
	Float:piyasaz,
	urun1,
	urun2,
	urun3,
	urun4,
	urun5,
	urun6,
	urun7
}
new piyasaveri[][piyasaEnum] = {
	{"Linton Mills", -23.2975,-269.7049,5.4297, 80, 120, 128, 140, 192, 240, 252},
	{"Whitney Grain", 1201.4846,245.2734,19.5547, 88, 100, 160, 180, 200, 232, 260},
	{"Greenwich Mill", 1546.9772,29.8143,24.1406, 72, 128, 140, 154, 220, 252, 272},
	{"Carmell Corn", -265.9543,-2213.5620,29.0420, 80, 108, 172, 200, 204, 256, 280},
	{"Solarin Industries", 2666.9336,-1474.1478,30.5938, 68, 112, 148, 188, 228, 220, 292}
};

new seyyarveri[][] = {
	{3039, 1400, "Sekerleme"},
	{1342,1700, "Balik/Noodle"},
	{1340, 2000, "Fast Food"},
	{2577, 2000, "Sans Oyunlari"},
	{1775, 2000, "Icecek"}
};

new tekneveri[][] = {
	{473, 30000},
	{446, 250000},
	{452, 200000},
	{453, 45000},
	{484, 350000},
	{493, 300000}
};

new tekipmanveri[][] = {
	{531, 13000},
	{532, 20000},
	{610, 5000}
};

new ucakveri[][] = {
	{476, 400000},
	{469, 600000},
	{487, 1000000},
	{511, 500000},
	{512, 300000},
	{513, 600000},
	{519, 3000000},
	{593, 500000}
};

new faracveri[][] = {
	{482, 15000, 10},
	{498, 21000, 18},
	{499, 27000, 12},
	{578, 34000, 1},
	{515, 50000, 1},
	{426, 15000, 0},
	{488, 300000, 0},
	{582, 40000, 0},
	{466, 8000, 0},
	{492, 14000, 0},
	{445, 18000, 0},
	{507, 24000, 0},
	{428, 25000, 15},
	{438, 8000, 0},
	{420, 12000, 0},
	{418, 15000, 0},
	{525, 25000, 0},
	{416, 50000, 0},
	{544, 80000, 0},
	{407, 80000, 0},
	{417, 500000, 0},
	{409, 1000000, 0}
};

function MDC_IsimSorgula(playerid, inputtext[])
{
    Isim_CezaKontrol(playerid, inputtext); MDC_ArananKontrol(playerid, inputtext);
	format(VCPD_KontrolStr[playerid], 32, inputtext);
	////printf("%s", VCPD_KontrolStr[playerid]);
	new query[128], Cache:VeriCek;
	mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `oyuncular` WHERE `isim` = '%e'", inputtext);
	VeriCek = mysql_query(g_SQL, query);
	new rows = cache_num_rows();
	if(strlen(inputtext) < 1) rows = 0;//bug engel
	if(rows)
	{
	    PlayerTextDrawHide(playerid, MDC[5][playerid]);
    	MDC_EkranArac(playerid, false);
	    MDC_EkranIsim(playerid, true);
	    for(new i = 37; i < 39; i++) PlayerTextDrawHide(playerid, MDC[i][playerid]);
	    for(new i = 39; i < 47; i++) PlayerTextDrawHide(playerid, MDC[i][playerid]);

	    new gelenveri[128];
		format(gelenveri, sizeof(gelenveri), "AD_SOYAD:_%s", inputtext);
		PlayerTextDrawSetString(playerid, MDC[14][playerid], gelenveri);

		format(gelenveri, sizeof(gelenveri), "DOGUM_TARIHI:_%s", vericek_varchar(0, "dogumtarihi"));
		PlayerTextDrawSetString(playerid, MDC[15][playerid], gelenveri);

		format(gelenveri, sizeof(gelenveri), "TELEFON_NUMARASI:_%d", vericek_int(0, "TelefonNumarasi"));
		PlayerTextDrawSetString(playerid, MDC[16][playerid], gelenveri);

        format(gelenveri, sizeof(gelenveri), "ODENMEMIS_CEZA:_%s", NumaraFormati(MDC_IsimCeza[playerid]));
		PlayerTextDrawSetString(playerid, MDC[17][playerid], gelenveri);

		format(gelenveri, sizeof(gelenveri), "ARANANLAR:_%s", (MDC_IsimAranan[playerid] == true) ? ("~r~Evet") : ("Hayir"));
		PlayerTextDrawSetString(playerid, MDC[18][playerid], gelenveri);

		format(gelenveri, sizeof(gelenveri), "VATANDAS_NO:_%d", vericek_int(0, "VatandaslikNo"));
		PlayerTextDrawSetString(playerid, MDC[19][playerid], gelenveri);

		format(gelenveri, sizeof(gelenveri), "DOGUM_YERI:_%s", vericek_varchar(0, "DogumYeri"));
		PlayerTextDrawSetString(playerid, MDC[20][playerid], gelenveri);

		format(gelenveri, sizeof(gelenveri), "SURUCU_BELGESI:_%s", (vericek_int(0, "Ehliyet")) ? ("Var") : ("Yok"));
		PlayerTextDrawSetString(playerid, MDC[21][playerid], gelenveri);

		format(gelenveri, sizeof(gelenveri), "SILAH_RUHSATI:_%s", (vericek_int(0, "Ruhsat")) ? ("Var") : ("Yok"));
		PlayerTextDrawSetString(playerid, MDC[22][playerid], gelenveri);
	}
	else MDC_Diskalifiye(playerid), PlayerTextDrawShow(playerid, MDC[5][playerid]), PlayerTextDrawSetString(playerid, MDC[5][playerid], "Kisi bulunamadi");
	cache_delete(VeriCek);
	return 1;
}

function MDC_PlakaSorgula(playerid, inputtext[])
{
    Plaka_CezaKontrol(playerid, inputtext);
 	format(VCPD_KontrolStr[playerid], 32, inputtext);
    ////printf("%s", VCPD_KontrolStr[playerid]);
	new query[128], Cache:VeriCek;
	mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `araclar` WHERE `aracPlaka` = '%e'", inputtext);
	VeriCek = mysql_query(g_SQL, query);
	new rows = cache_num_rows();
	if(strlen(inputtext) < 1) rows = 0;//bug engel
	if(rows)
	{
		PlayerTextDrawHide(playerid, MDC[5][playerid]);
		MDC_EkranIsim(playerid, false);
 		MDC_EkranArac(playerid, true);

 		for(new i = 37; i < 39; i++) PlayerTextDrawHide(playerid, MDC[i][playerid]);
		for(new i = 39; i < 47; i++) PlayerTextDrawHide(playerid, MDC[i][playerid]);

	    new gelenveri[128];
	    //baþlaNKé
		format(gelenveri, sizeof(gelenveri), "ARAC_MODELI:_%s", GetVehicleName(vericek_int(0, "aracModel")));
		PlayerTextDrawSetString(playerid, MDC[25][playerid], gelenveri);

		format(gelenveri, sizeof(gelenveri), "ARAC_PLAKASI:_%s", vericek_varchar(0, "aracPlaka"));
		PlayerTextDrawSetString(playerid, MDC[26][playerid], gelenveri);

		format(gelenveri, sizeof(gelenveri), "SIGORTA_DURUMU:_%s", (vericek_int(0, "aracSigorta")) ? ("Var") : ("Yok"));
		PlayerTextDrawSetString(playerid, MDC[27][playerid], gelenveri);

		format(gelenveri, sizeof(gelenveri), "ODENMEMIS_CEZA:_%s", NumaraFormati(MDC_PlakaCeza[playerid]));
		PlayerTextDrawSetString(playerid, MDC[28][playerid], gelenveri);

		//preview baba
        PlayerTextDrawHide(playerid, MDC[29][playerid]);
		PlayerTextDrawSetPreviewModel(playerid, MDC[29][playerid], vericek_int(0, "aracModel"));
		PlayerTextDrawSetPreviewVehCol(playerid, MDC[29][playerid], vericek_int(0, "aracRenk1"), vericek_int(0, "aracRenk2"));
		PlayerTextDrawShow(playerid, MDC[29][playerid]);

		//deWamké
		format(gelenveri, sizeof(gelenveri), "ARAC_VERGISI:_%s", NumaraFormati(vericek_int(0, "aracVergi")));
		PlayerTextDrawSetString(playerid, MDC[30][playerid], gelenveri);

		format(gelenveri, sizeof(gelenveri), "ARAC_RENK:_%d |%d", vericek_int(0, "aracRenk1"), vericek_int(0, "aracRenk2"));
		PlayerTextDrawSetString(playerid, MDC[31][playerid], gelenveri);

		if(vericek_int(0, "aracSahip") > 0)
		{
			format(gelenveri, sizeof(gelenveri), "PLAKA_SAHIBI:_%s", MDC_SQLSahipBul(vericek_int(0, "aracSahip")));
		}
		else format(gelenveri, sizeof(gelenveri), "PLAKA_SAHIBI:_-");
		PlayerTextDrawSetString(playerid, MDC[24][playerid], gelenveri);
	}
	else MDC_Diskalifiye(playerid), PlayerTextDrawShow(playerid, MDC[5][playerid]), PlayerTextDrawSetString(playerid, MDC[5][playerid], "Arac bulunamadi");
	cache_delete(VeriCek);
	return 1;
}

function MDC_EvSorgula(playerid, kapino)
{
	new query[128], Cache:VeriCek;
	MDC_GenelID[playerid] = kapino;
	mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `evler` WHERE `evID` = '%d'", kapino);
	VeriCek = mysql_query(g_SQL, query);
	new rows = cache_num_rows();
	if(kapino <= 0) return cache_delete(VeriCek), 1;//bug engel
	if(rows)
	{
	    PlayerTextDrawHide(playerid, MDC[5][playerid]);
    	MDC_EkranArac(playerid, false);
	    MDC_EkranIsim(playerid, false);
	    for(new i = 37; i < 39; i++) PlayerTextDrawHide(playerid, MDC[i][playerid]);
		for(new i = 39; i < 42; i++) PlayerTextDrawShow(playerid, MDC[i][playerid]);
		for(new i = 42; i < 47; i++) PlayerTextDrawHide(playerid, MDC[i][playerid]);

		new gelenveri[128];
		format(gelenveri, sizeof(gelenveri), "EV_ADRESI:_%s", vericek_varchar(0, "Adres"));
		PlayerTextDrawSetString(playerid, MDC[40][playerid], gelenveri);

		if(vericek_int(0, "evSahip") > 0)
		{
			format(gelenveri, sizeof(gelenveri), "EV_SAHIBI:_%s", MDC_SQLSahipBul(vericek_int(0, "evSahip")));
		}
		else format(gelenveri, sizeof(gelenveri), "EV_SAHIBI:_-");
        PlayerTextDrawSetString(playerid, MDC[39][playerid], gelenveri);
	}
	else MDC_Diskalifiye(playerid), PlayerTextDrawShow(playerid, MDC[5][playerid]), PlayerTextDrawSetString(playerid, MDC[5][playerid], "Kapi numarasi gecersiz");
	cache_delete(VeriCek);
	return 1;
}

stock HurdaSattir(playerid, aracid)
{
	if(AracBilgi[aracid][aracSigorta] == 0)
	{
		AracBilgi[aracid][aracVergi] += 1500;
	}
	else
	{
		AracBilgi[aracid][aracSigorta]--;
	}
	AracBilgi[aracid][araccalintisure] = 12;
	Arac_Kaydet(aracid);
	Arac_Spawn(aracid);
	SunucuMesaji(playerid, "Çalýntý araç baþarýyla hurdaya çýkartýldý ve satýldý.");
	return 1;
}

stock CreateAllPlayerTextDraws(playerid)
{
	MDC[0][playerid] = CreatePlayerTextDraw(playerid, 320.000000, 100.000000, "_");
	PlayerTextDrawFont(playerid, MDC[0][playerid], 1);
	PlayerTextDrawLetterSize(playerid, MDC[0][playerid], 0.600000, 28.200006);
	PlayerTextDrawTextSize(playerid, MDC[0][playerid], 298.500000, 320.500000);
	PlayerTextDrawSetOutline(playerid, MDC[0][playerid], 1);
	PlayerTextDrawSetShadow(playerid, MDC[0][playerid], 0);
	PlayerTextDrawAlignment(playerid, MDC[0][playerid], 2);
	PlayerTextDrawColor(playerid, MDC[0][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, MDC[0][playerid], 255);
	PlayerTextDrawBoxColor(playerid, MDC[0][playerid], -741092383);
	PlayerTextDrawUseBox(playerid, MDC[0][playerid], 1);
	PlayerTextDrawSetProportional(playerid, MDC[0][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MDC[0][playerid], 0);

	MDC[1][playerid] = CreatePlayerTextDraw(playerid, 361.000000, 101.000000, "_");
	PlayerTextDrawFont(playerid, MDC[1][playerid], 1);
	PlayerTextDrawLetterSize(playerid, MDC[1][playerid], 0.574998, 27.949979);
	PlayerTextDrawTextSize(playerid, MDC[1][playerid], 298.500000, 236.500000);
	PlayerTextDrawSetOutline(playerid, MDC[1][playerid], 1);
	PlayerTextDrawSetShadow(playerid, MDC[1][playerid], 0);
	PlayerTextDrawAlignment(playerid, MDC[1][playerid], 2);
	PlayerTextDrawColor(playerid, MDC[1][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, MDC[1][playerid], 255);
	PlayerTextDrawBoxColor(playerid, MDC[1][playerid], 1296911841);
	PlayerTextDrawUseBox(playerid, MDC[1][playerid], 1);
	PlayerTextDrawSetProportional(playerid, MDC[1][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MDC[1][playerid], 0);

	MDC[2][playerid] = CreatePlayerTextDraw(playerid, 361.000000, 102.000000, "_");
	PlayerTextDrawFont(playerid, MDC[2][playerid], 1);
	PlayerTextDrawLetterSize(playerid, MDC[2][playerid], 0.574998, 27.699983);
	PlayerTextDrawTextSize(playerid, MDC[2][playerid], 298.500000, 235.000000);
	PlayerTextDrawSetOutline(playerid, MDC[2][playerid], 2);
	PlayerTextDrawSetShadow(playerid, MDC[2][playerid], 0);
	PlayerTextDrawAlignment(playerid, MDC[2][playerid], 2);
	PlayerTextDrawColor(playerid, MDC[2][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, MDC[2][playerid], 255);
	PlayerTextDrawBoxColor(playerid, MDC[2][playerid], -741092383);
	PlayerTextDrawUseBox(playerid, MDC[2][playerid], 1);
	PlayerTextDrawSetProportional(playerid, MDC[2][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MDC[2][playerid], 0);

	MDC[3][playerid] = CreatePlayerTextDraw(playerid, 361.000000, 102.000000, "DATABASE - V.C.P.D");
	PlayerTextDrawFont(playerid, MDC[3][playerid], 2);
	PlayerTextDrawLetterSize(playerid, MDC[3][playerid], 0.400000, 1.549998);
	PlayerTextDrawTextSize(playerid, MDC[3][playerid], 400.000000, 234.500000);
	PlayerTextDrawSetOutline(playerid, MDC[3][playerid], 0);
	PlayerTextDrawSetShadow(playerid, MDC[3][playerid], 0);
	PlayerTextDrawAlignment(playerid, MDC[3][playerid], 2);
	PlayerTextDrawColor(playerid, MDC[3][playerid], -1523963137);
	PlayerTextDrawBackgroundColor(playerid, MDC[3][playerid], 255);
	PlayerTextDrawBoxColor(playerid, MDC[3][playerid], 50);
	PlayerTextDrawUseBox(playerid, MDC[3][playerid], 1);
	PlayerTextDrawSetProportional(playerid, MDC[3][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MDC[3][playerid], 0);

	MDC[4][playerid] = CreatePlayerTextDraw(playerid, 255.000000, 136.000000, "mdl-3094:logo");
	PlayerTextDrawFont(playerid, MDC[4][playerid], 4);
	PlayerTextDrawLetterSize(playerid, MDC[4][playerid], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, MDC[4][playerid], 213.500000, 204.500000);
	PlayerTextDrawSetOutline(playerid, MDC[4][playerid], 1);
	PlayerTextDrawSetShadow(playerid, MDC[4][playerid], 0);
	PlayerTextDrawAlignment(playerid, MDC[4][playerid], 1);
	PlayerTextDrawColor(playerid, MDC[4][playerid], -239);
	PlayerTextDrawBackgroundColor(playerid, MDC[4][playerid], 255);
	PlayerTextDrawBoxColor(playerid, MDC[4][playerid], 50);
	PlayerTextDrawUseBox(playerid, MDC[4][playerid], 1);
	PlayerTextDrawSetProportional(playerid, MDC[4][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MDC[4][playerid], 0);

	MDC[5][playerid] = CreatePlayerTextDraw(playerid, 361.000000, 231.000000, "ISLEM YOK");
	PlayerTextDrawFont(playerid, MDC[5][playerid], 2);
	PlayerTextDrawLetterSize(playerid, MDC[5][playerid], 0.329165, 1.600000);
	PlayerTextDrawTextSize(playerid, MDC[5][playerid], 400.000000, 122.500000);
	PlayerTextDrawSetOutline(playerid, MDC[5][playerid], 1);
	PlayerTextDrawSetShadow(playerid, MDC[5][playerid], 0);
	PlayerTextDrawAlignment(playerid, MDC[5][playerid], 2);
	PlayerTextDrawColor(playerid, MDC[5][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, MDC[5][playerid], 255);
	PlayerTextDrawBoxColor(playerid, MDC[5][playerid], 50);
	PlayerTextDrawUseBox(playerid, MDC[5][playerid], 1);
	PlayerTextDrawSetProportional(playerid, MDC[5][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MDC[5][playerid], 0);

	MDC[6][playerid] = CreatePlayerTextDraw(playerid, 200.000000, 102.000000, "ISIM SORGULA");
	PlayerTextDrawFont(playerid, MDC[6][playerid], 2);
	PlayerTextDrawLetterSize(playerid, MDC[6][playerid], 0.154164, 1.000000);
	PlayerTextDrawTextSize(playerid, MDC[6][playerid], 10.000000, 78.000000);
	PlayerTextDrawSetOutline(playerid, MDC[6][playerid], 0);
	PlayerTextDrawSetShadow(playerid, MDC[6][playerid], 0);
	PlayerTextDrawAlignment(playerid, MDC[6][playerid], 2);
	PlayerTextDrawColor(playerid, MDC[6][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, MDC[6][playerid], 255);
	PlayerTextDrawBoxColor(playerid, MDC[6][playerid], 1296911726);
	PlayerTextDrawUseBox(playerid, MDC[6][playerid], 1);
	PlayerTextDrawSetProportional(playerid, MDC[6][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MDC[6][playerid], 1);

	MDC[7][playerid] = CreatePlayerTextDraw(playerid, 200.000000, 117.000000, "PLAKA SORGULA");
	PlayerTextDrawFont(playerid, MDC[7][playerid], 2);
	PlayerTextDrawLetterSize(playerid, MDC[7][playerid], 0.154164, 1.000000);
	PlayerTextDrawTextSize(playerid, MDC[7][playerid], 10.000000, 78.000000);
	PlayerTextDrawSetOutline(playerid, MDC[7][playerid], 0);
	PlayerTextDrawSetShadow(playerid, MDC[7][playerid], 0);
	PlayerTextDrawAlignment(playerid, MDC[7][playerid], 2);
	PlayerTextDrawColor(playerid, MDC[7][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, MDC[7][playerid], 255);
	PlayerTextDrawBoxColor(playerid, MDC[7][playerid], 50);
	PlayerTextDrawUseBox(playerid, MDC[7][playerid], 1);
	PlayerTextDrawSetProportional(playerid, MDC[7][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MDC[7][playerid], 1);

	MDC[8][playerid] = CreatePlayerTextDraw(playerid, 200.000000, 132.000000, "EV SORGULA");
	PlayerTextDrawFont(playerid, MDC[8][playerid], 2);
	PlayerTextDrawLetterSize(playerid, MDC[8][playerid], 0.154164, 1.000000);
	PlayerTextDrawTextSize(playerid, MDC[8][playerid], 10.000000, 78.000000);
	PlayerTextDrawSetOutline(playerid, MDC[8][playerid], 0);
	PlayerTextDrawSetShadow(playerid, MDC[8][playerid], 0);
	PlayerTextDrawAlignment(playerid, MDC[8][playerid], 2);
	PlayerTextDrawColor(playerid, MDC[8][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, MDC[8][playerid], 255);
	PlayerTextDrawBoxColor(playerid, MDC[8][playerid], 50);
	PlayerTextDrawUseBox(playerid, MDC[8][playerid], 1);
	PlayerTextDrawSetProportional(playerid, MDC[8][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MDC[8][playerid], 1);

	MDC[9][playerid] = CreatePlayerTextDraw(playerid, 200.000000, 147.000000, "ISYERI SORGULA");
	PlayerTextDrawFont(playerid, MDC[9][playerid], 2);
	PlayerTextDrawLetterSize(playerid, MDC[9][playerid], 0.154164, 1.000000);
	PlayerTextDrawTextSize(playerid, MDC[9][playerid], 10.000000, 78.000000);
	PlayerTextDrawSetOutline(playerid, MDC[9][playerid], 0);
	PlayerTextDrawSetShadow(playerid, MDC[9][playerid], 0);
	PlayerTextDrawAlignment(playerid, MDC[9][playerid], 2);
	PlayerTextDrawColor(playerid, MDC[9][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, MDC[9][playerid], 255);
	PlayerTextDrawBoxColor(playerid, MDC[9][playerid], 50);
	PlayerTextDrawUseBox(playerid, MDC[9][playerid], 1);
	PlayerTextDrawSetProportional(playerid, MDC[9][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MDC[9][playerid], 1);

	MDC[10][playerid] = CreatePlayerTextDraw(playerid, 200.000000, 313.000000, "ARANANLAR");
	PlayerTextDrawFont(playerid, MDC[10][playerid], 2);
	PlayerTextDrawLetterSize(playerid, MDC[10][playerid], 0.154164, 1.000000);
	PlayerTextDrawTextSize(playerid, MDC[10][playerid], 10.000000, 78.000000);
	PlayerTextDrawSetOutline(playerid, MDC[10][playerid], 0);
	PlayerTextDrawSetShadow(playerid, MDC[10][playerid], 0);
	PlayerTextDrawAlignment(playerid, MDC[10][playerid], 2);
	PlayerTextDrawColor(playerid, MDC[10][playerid], 255);
	PlayerTextDrawBackgroundColor(playerid, MDC[10][playerid], 255);
	PlayerTextDrawBoxColor(playerid, MDC[10][playerid], -8388478);
	PlayerTextDrawUseBox(playerid, MDC[10][playerid], 1);
	PlayerTextDrawSetProportional(playerid, MDC[10][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MDC[10][playerid], 1);

	MDC[11][playerid] = CreatePlayerTextDraw(playerid, 200.000000, 328.000000, "GISE KONTROL");
	PlayerTextDrawFont(playerid, MDC[11][playerid], 2);
	PlayerTextDrawLetterSize(playerid, MDC[11][playerid], 0.154164, 1.000000);
	PlayerTextDrawTextSize(playerid, MDC[11][playerid], 10.000000, 78.000000);
	PlayerTextDrawSetOutline(playerid, MDC[11][playerid], 0);
	PlayerTextDrawSetShadow(playerid, MDC[11][playerid], 0);
	PlayerTextDrawAlignment(playerid, MDC[11][playerid], 2);
	PlayerTextDrawColor(playerid, MDC[11][playerid], 255);
	PlayerTextDrawBackgroundColor(playerid, MDC[11][playerid], 255);
	PlayerTextDrawBoxColor(playerid, MDC[11][playerid], 9145218);
	PlayerTextDrawUseBox(playerid, MDC[11][playerid], 1);
	PlayerTextDrawSetProportional(playerid, MDC[11][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MDC[11][playerid], 1);

	MDC[12][playerid] = CreatePlayerTextDraw(playerid, 200.000000, 343.000000, "DESTEK EKIP");
	PlayerTextDrawFont(playerid, MDC[12][playerid], 2);
	PlayerTextDrawLetterSize(playerid, MDC[12][playerid], 0.154164, 1.000000);
	PlayerTextDrawTextSize(playerid, MDC[12][playerid], 10.000000, 78.000000);
	PlayerTextDrawSetOutline(playerid, MDC[12][playerid], 0);
	PlayerTextDrawSetShadow(playerid, MDC[12][playerid], 0);
	PlayerTextDrawAlignment(playerid, MDC[12][playerid], 2);
	PlayerTextDrawColor(playerid, MDC[12][playerid], 255);
	PlayerTextDrawBackgroundColor(playerid, MDC[12][playerid], 255);
	PlayerTextDrawBoxColor(playerid, MDC[12][playerid], -1962934142);
	PlayerTextDrawUseBox(playerid, MDC[12][playerid], 1);
	PlayerTextDrawSetProportional(playerid, MDC[12][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MDC[12][playerid], 1);

	MDC[13][playerid] = CreatePlayerTextDraw(playerid, 200.000000, 298.000000, "DASH-CAM");
	PlayerTextDrawFont(playerid, MDC[13][playerid], 2);
	PlayerTextDrawLetterSize(playerid, MDC[13][playerid], 0.154164, 1.000000);
	PlayerTextDrawTextSize(playerid, MDC[13][playerid], 10.000000, 78.000000);
	PlayerTextDrawSetOutline(playerid, MDC[13][playerid], 0);
	PlayerTextDrawSetShadow(playerid, MDC[13][playerid], 0);
	PlayerTextDrawAlignment(playerid, MDC[13][playerid], 2);
	PlayerTextDrawColor(playerid, MDC[13][playerid], 255);
	PlayerTextDrawBackgroundColor(playerid, MDC[13][playerid], 255);
	PlayerTextDrawBoxColor(playerid, MDC[13][playerid], 9109634);
	PlayerTextDrawUseBox(playerid, MDC[13][playerid], 1);
	PlayerTextDrawSetProportional(playerid, MDC[13][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MDC[13][playerid], 1);
	//isimsorgu
	MDC[14][playerid] = CreatePlayerTextDraw(playerid, 244.000000, 122.000000, "Ad_Soyad: Vice_Roleplay");
	PlayerTextDrawFont(playerid, MDC[14][playerid], 2);
	PlayerTextDrawLetterSize(playerid, MDC[14][playerid], 0.183329, 1.000000);
	PlayerTextDrawTextSize(playerid, MDC[14][playerid], 477.500000, 231.000000);
	PlayerTextDrawSetOutline(playerid, MDC[14][playerid], 0);
	PlayerTextDrawSetShadow(playerid, MDC[14][playerid], 0);
	PlayerTextDrawAlignment(playerid, MDC[14][playerid], 1);
	PlayerTextDrawColor(playerid, MDC[14][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, MDC[14][playerid], 255);
	PlayerTextDrawBoxColor(playerid, MDC[14][playerid], 50);
	PlayerTextDrawUseBox(playerid, MDC[14][playerid], 1);
	PlayerTextDrawSetProportional(playerid, MDC[14][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MDC[14][playerid], 0);

	MDC[15][playerid] = CreatePlayerTextDraw(playerid, 244.000000, 136.000000, "DOGUM_TARIHI: 05.10.1991");
	PlayerTextDrawFont(playerid, MDC[15][playerid], 2);
	PlayerTextDrawLetterSize(playerid, MDC[15][playerid], 0.183329, 1.000000);
	PlayerTextDrawTextSize(playerid, MDC[15][playerid], 477.500000, 231.000000);
	PlayerTextDrawSetOutline(playerid, MDC[15][playerid], 0);
	PlayerTextDrawSetShadow(playerid, MDC[15][playerid], 0);
	PlayerTextDrawAlignment(playerid, MDC[15][playerid], 1);
	PlayerTextDrawColor(playerid, MDC[15][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, MDC[15][playerid], 255);
	PlayerTextDrawBoxColor(playerid, MDC[15][playerid], 50);
	PlayerTextDrawUseBox(playerid, MDC[15][playerid], 1);
	PlayerTextDrawSetProportional(playerid, MDC[15][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MDC[15][playerid], 0);

	MDC[16][playerid] = CreatePlayerTextDraw(playerid, 244.000000, 150.000000, "TELEFON_NUMARASI: 6337333");
	PlayerTextDrawFont(playerid, MDC[16][playerid], 2);
	PlayerTextDrawLetterSize(playerid, MDC[16][playerid], 0.183329, 1.000000);
	PlayerTextDrawTextSize(playerid, MDC[16][playerid], 477.500000, 231.000000);
	PlayerTextDrawSetOutline(playerid, MDC[16][playerid], 0);
	PlayerTextDrawSetShadow(playerid, MDC[16][playerid], 0);
	PlayerTextDrawAlignment(playerid, MDC[16][playerid], 1);
	PlayerTextDrawColor(playerid, MDC[16][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, MDC[16][playerid], 255);
	PlayerTextDrawBoxColor(playerid, MDC[16][playerid], 50);
	PlayerTextDrawUseBox(playerid, MDC[16][playerid], 1);
	PlayerTextDrawSetProportional(playerid, MDC[16][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MDC[16][playerid], 0);

	MDC[17][playerid] = CreatePlayerTextDraw(playerid, 244.000000, 164.000000, "ODENMEMIS_CEZA: 10.000$");
	PlayerTextDrawFont(playerid, MDC[17][playerid], 2);
	PlayerTextDrawLetterSize(playerid, MDC[17][playerid], 0.183329, 1.000000);
	PlayerTextDrawTextSize(playerid, MDC[17][playerid], 477.500000, 231.000000);
	PlayerTextDrawSetOutline(playerid, MDC[17][playerid], 0);
	PlayerTextDrawSetShadow(playerid, MDC[17][playerid], 0);
	PlayerTextDrawAlignment(playerid, MDC[17][playerid], 1);
	PlayerTextDrawColor(playerid, MDC[17][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, MDC[17][playerid], 255);
	PlayerTextDrawBoxColor(playerid, MDC[17][playerid], 50);
	PlayerTextDrawUseBox(playerid, MDC[17][playerid], 1);
	PlayerTextDrawSetProportional(playerid, MDC[17][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MDC[17][playerid], 0);

	MDC[18][playerid] = CreatePlayerTextDraw(playerid, 244.000000, 178.000000, "ARANANLAR: HAYIR");
	PlayerTextDrawFont(playerid, MDC[18][playerid], 2);
	PlayerTextDrawLetterSize(playerid, MDC[18][playerid], 0.183329, 1.000000);
	PlayerTextDrawTextSize(playerid, MDC[18][playerid], 477.500000, 231.000000);
	PlayerTextDrawSetOutline(playerid, MDC[18][playerid], 0);
	PlayerTextDrawSetShadow(playerid, MDC[18][playerid], 0);
	PlayerTextDrawAlignment(playerid, MDC[18][playerid], 1);
	PlayerTextDrawColor(playerid, MDC[18][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, MDC[18][playerid], 255);
	PlayerTextDrawBoxColor(playerid, MDC[18][playerid], 50);
	PlayerTextDrawUseBox(playerid, MDC[18][playerid], 1);
	PlayerTextDrawSetProportional(playerid, MDC[18][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MDC[18][playerid], 0);

	MDC[19][playerid] = CreatePlayerTextDraw(playerid, 244.000000, 192.000000, "VATANDAS_NO: 123456789");
	PlayerTextDrawFont(playerid, MDC[19][playerid], 2);
	PlayerTextDrawLetterSize(playerid, MDC[19][playerid], 0.183329, 1.000000);
	PlayerTextDrawTextSize(playerid, MDC[19][playerid], 477.500000, 231.000000);
	PlayerTextDrawSetOutline(playerid, MDC[19][playerid], 0);
	PlayerTextDrawSetShadow(playerid, MDC[19][playerid], 0);
	PlayerTextDrawAlignment(playerid, MDC[19][playerid], 1);
	PlayerTextDrawColor(playerid, MDC[19][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, MDC[19][playerid], 255);
	PlayerTextDrawBoxColor(playerid, MDC[19][playerid], 50);
	PlayerTextDrawUseBox(playerid, MDC[19][playerid], 1);
	PlayerTextDrawSetProportional(playerid, MDC[19][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MDC[19][playerid], 0);

	MDC[20][playerid] = CreatePlayerTextDraw(playerid, 244.000000, 206.000000, "DOGUM_YERI: AMERIKA");
	PlayerTextDrawFont(playerid, MDC[20][playerid], 2);
	PlayerTextDrawLetterSize(playerid, MDC[20][playerid], 0.183329, 1.000000);
	PlayerTextDrawTextSize(playerid, MDC[20][playerid], 477.500000, 231.000000);
	PlayerTextDrawSetOutline(playerid, MDC[20][playerid], 0);
	PlayerTextDrawSetShadow(playerid, MDC[20][playerid], 0);
	PlayerTextDrawAlignment(playerid, MDC[20][playerid], 1);
	PlayerTextDrawColor(playerid, MDC[20][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, MDC[20][playerid], 255);
	PlayerTextDrawBoxColor(playerid, MDC[20][playerid], 50);
	PlayerTextDrawUseBox(playerid, MDC[20][playerid], 1);
	PlayerTextDrawSetProportional(playerid, MDC[20][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MDC[20][playerid], 0);

	MDC[21][playerid] = CreatePlayerTextDraw(playerid, 244.000000, 220.000000, "SURUCU_BELGESI: VAR");
	PlayerTextDrawFont(playerid, MDC[21][playerid], 2);
	PlayerTextDrawLetterSize(playerid, MDC[21][playerid], 0.183329, 1.000000);
	PlayerTextDrawTextSize(playerid, MDC[21][playerid], 477.500000, 231.000000);
	PlayerTextDrawSetOutline(playerid, MDC[21][playerid], 0);
	PlayerTextDrawSetShadow(playerid, MDC[21][playerid], 0);
	PlayerTextDrawAlignment(playerid, MDC[21][playerid], 1);
	PlayerTextDrawColor(playerid, MDC[21][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, MDC[21][playerid], 255);
	PlayerTextDrawBoxColor(playerid, MDC[21][playerid], 50);
	PlayerTextDrawUseBox(playerid, MDC[21][playerid], 1);
	PlayerTextDrawSetProportional(playerid, MDC[21][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MDC[21][playerid], 0);

	MDC[22][playerid] = CreatePlayerTextDraw(playerid, 244.000000, 234.000000, "SILAH_RUHSATI: VAR");
	PlayerTextDrawFont(playerid, MDC[22][playerid], 2);
	PlayerTextDrawLetterSize(playerid, MDC[22][playerid], 0.183329, 1.000000);
	PlayerTextDrawTextSize(playerid, MDC[22][playerid], 477.500000, 231.000000);
	PlayerTextDrawSetOutline(playerid, MDC[22][playerid], 0);
	PlayerTextDrawSetShadow(playerid, MDC[22][playerid], 0);
	PlayerTextDrawAlignment(playerid, MDC[22][playerid], 1);
	PlayerTextDrawColor(playerid, MDC[22][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, MDC[22][playerid], 255);
	PlayerTextDrawBoxColor(playerid, MDC[22][playerid], 50);
	PlayerTextDrawUseBox(playerid, MDC[22][playerid], 1);
	PlayerTextDrawSetProportional(playerid, MDC[22][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MDC[22][playerid], 0);

	MDC[23][playerid] = CreatePlayerTextDraw(playerid, 410.000000, 340.000000, "CEZA KAYITLARI");
	PlayerTextDrawFont(playerid, MDC[23][playerid], 2);
	PlayerTextDrawLetterSize(playerid, MDC[23][playerid], 0.154164, 1.000000);
	PlayerTextDrawTextSize(playerid, MDC[23][playerid], 10.000000, 78.000000);
	PlayerTextDrawSetOutline(playerid, MDC[23][playerid], 0);
	PlayerTextDrawSetShadow(playerid, MDC[23][playerid], 0);
	PlayerTextDrawAlignment(playerid, MDC[23][playerid], 2);
	PlayerTextDrawColor(playerid, MDC[23][playerid], 255);
	PlayerTextDrawBackgroundColor(playerid, MDC[23][playerid], 255);
	PlayerTextDrawBoxColor(playerid, MDC[23][playerid], 1433087874);
	PlayerTextDrawUseBox(playerid, MDC[23][playerid], 1);
	PlayerTextDrawSetProportional(playerid, MDC[23][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MDC[23][playerid], 1);

	//plakasorgu
	MDC[24][playerid] = CreatePlayerTextDraw(playerid, 244.000000, 122.000000, "Plaka Sahibi: Vice_Roleplay");
	PlayerTextDrawFont(playerid, MDC[24][playerid], 2);
	PlayerTextDrawLetterSize(playerid, MDC[24][playerid], 0.183329, 1.000000);
	PlayerTextDrawTextSize(playerid, MDC[24][playerid], 477.500000, 231.000000);
	PlayerTextDrawSetOutline(playerid, MDC[24][playerid], 0);
	PlayerTextDrawSetShadow(playerid, MDC[24][playerid], 0);
	PlayerTextDrawAlignment(playerid, MDC[24][playerid], 1);
	PlayerTextDrawColor(playerid, MDC[24][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, MDC[24][playerid], 255);
	PlayerTextDrawBoxColor(playerid, MDC[24][playerid], 50);
	PlayerTextDrawUseBox(playerid, MDC[24][playerid], 1);
	PlayerTextDrawSetProportional(playerid, MDC[24][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MDC[24][playerid], 0);

	MDC[25][playerid] = CreatePlayerTextDraw(playerid, 244.000000, 136.000000, "Arac Modeli: Sultan");
	PlayerTextDrawFont(playerid, MDC[25][playerid], 2);
	PlayerTextDrawLetterSize(playerid, MDC[25][playerid], 0.183329, 1.000000);
	PlayerTextDrawTextSize(playerid, MDC[25][playerid], 477.500000, 231.000000);
	PlayerTextDrawSetOutline(playerid, MDC[25][playerid], 0);
	PlayerTextDrawSetShadow(playerid, MDC[25][playerid], 0);
	PlayerTextDrawAlignment(playerid, MDC[25][playerid], 1);
	PlayerTextDrawColor(playerid, MDC[25][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, MDC[25][playerid], 255);
	PlayerTextDrawBoxColor(playerid, MDC[25][playerid], 50);
	PlayerTextDrawUseBox(playerid, MDC[25][playerid], 1);
	PlayerTextDrawSetProportional(playerid, MDC[25][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MDC[25][playerid], 0);

	MDC[26][playerid] = CreatePlayerTextDraw(playerid, 244.000000, 150.000000, "ARAC_PLAKASI: VICE 61");
	PlayerTextDrawFont(playerid, MDC[26][playerid], 2);
	PlayerTextDrawLetterSize(playerid, MDC[26][playerid], 0.183329, 1.000000);
	PlayerTextDrawTextSize(playerid, MDC[26][playerid], 477.500000, 231.000000);
	PlayerTextDrawSetOutline(playerid, MDC[26][playerid], 0);
	PlayerTextDrawSetShadow(playerid, MDC[26][playerid], 0);
	PlayerTextDrawAlignment(playerid, MDC[26][playerid], 1);
	PlayerTextDrawColor(playerid, MDC[26][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, MDC[26][playerid], 255);
	PlayerTextDrawBoxColor(playerid, MDC[26][playerid], 50);
	PlayerTextDrawUseBox(playerid, MDC[26][playerid], 1);
	PlayerTextDrawSetProportional(playerid, MDC[26][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MDC[26][playerid], 0);

	MDC[27][playerid] = CreatePlayerTextDraw(playerid, 244.000000, 164.000000, "Sigorta Durumu: Var");
	PlayerTextDrawFont(playerid, MDC[27][playerid], 2);
	PlayerTextDrawLetterSize(playerid, MDC[27][playerid], 0.183329, 1.000000);
	PlayerTextDrawTextSize(playerid, MDC[27][playerid], 477.500000, 231.000000);
	PlayerTextDrawSetOutline(playerid, MDC[27][playerid], 0);
	PlayerTextDrawSetShadow(playerid, MDC[27][playerid], 0);
	PlayerTextDrawAlignment(playerid, MDC[27][playerid], 1);
	PlayerTextDrawColor(playerid, MDC[27][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, MDC[27][playerid], 255);
	PlayerTextDrawBoxColor(playerid, MDC[27][playerid], 50);
	PlayerTextDrawUseBox(playerid, MDC[27][playerid], 1);
	PlayerTextDrawSetProportional(playerid, MDC[27][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MDC[27][playerid], 0);

	MDC[28][playerid] = CreatePlayerTextDraw(playerid, 244.000000, 178.000000, "ODENMEMIS_CEZA: 3.700$");
	PlayerTextDrawFont(playerid, MDC[28][playerid], 2);
	PlayerTextDrawLetterSize(playerid, MDC[28][playerid], 0.183329, 1.000000);
	PlayerTextDrawTextSize(playerid, MDC[28][playerid], 477.500000, 231.000000);
	PlayerTextDrawSetOutline(playerid, MDC[28][playerid], 0);
	PlayerTextDrawSetShadow(playerid, MDC[28][playerid], 0);
	PlayerTextDrawAlignment(playerid, MDC[28][playerid], 1);
	PlayerTextDrawColor(playerid, MDC[28][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, MDC[28][playerid], 255);
	PlayerTextDrawBoxColor(playerid, MDC[28][playerid], 50);
	PlayerTextDrawUseBox(playerid, MDC[28][playerid], 1);
	PlayerTextDrawSetProportional(playerid, MDC[28][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MDC[28][playerid], 0);

	MDC[29][playerid] = CreatePlayerTextDraw(playerid, 269.000000, 164.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, MDC[29][playerid], 5);
	PlayerTextDrawLetterSize(playerid, MDC[29][playerid], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, MDC[29][playerid], 157.500000, 232.000000);
	PlayerTextDrawSetOutline(playerid, MDC[29][playerid], 0);
	PlayerTextDrawSetShadow(playerid, MDC[29][playerid], 0);
	PlayerTextDrawAlignment(playerid, MDC[29][playerid], 1);
	PlayerTextDrawColor(playerid, MDC[29][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, MDC[29][playerid], 0);
	PlayerTextDrawBoxColor(playerid, MDC[29][playerid], 255);
	PlayerTextDrawUseBox(playerid, MDC[29][playerid], 0);
	PlayerTextDrawSetProportional(playerid, MDC[29][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MDC[29][playerid], 0);
	PlayerTextDrawSetPreviewModel(playerid, MDC[29][playerid], 560);
	PlayerTextDrawSetPreviewVehCol(playerid, MDC[29][playerid], 1, 1);
	PlayerTextDrawSetPreviewRot(playerid, MDC[29][playerid], -10.000000, 0.000000, 48.000000, 1.000000);

	MDC[30][playerid] = CreatePlayerTextDraw(playerid, 244.000000, 192.000000, "ARAC_VERGISI: 1.700$");
	PlayerTextDrawFont(playerid, MDC[30][playerid], 2);
	PlayerTextDrawLetterSize(playerid, MDC[30][playerid], 0.183329, 1.000000);
	PlayerTextDrawTextSize(playerid, MDC[30][playerid], 477.500000, 231.000000);
	PlayerTextDrawSetOutline(playerid, MDC[30][playerid], 0);
	PlayerTextDrawSetShadow(playerid, MDC[30][playerid], 0);
	PlayerTextDrawAlignment(playerid, MDC[30][playerid], 1);
	PlayerTextDrawColor(playerid, MDC[30][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, MDC[30][playerid], 255);
	PlayerTextDrawBoxColor(playerid, MDC[30][playerid], 50);
	PlayerTextDrawUseBox(playerid, MDC[30][playerid], 1);
	PlayerTextDrawSetProportional(playerid, MDC[30][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MDC[30][playerid], 0);

	MDC[31][playerid] = CreatePlayerTextDraw(playerid, 244.000000, 206.000000, "ARAC_RENK: 1 |1");
	PlayerTextDrawFont(playerid, MDC[31][playerid], 2);
	PlayerTextDrawLetterSize(playerid, MDC[31][playerid], 0.183329, 1.000000);
	PlayerTextDrawTextSize(playerid, MDC[31][playerid], 477.500000, 231.000000);
	PlayerTextDrawSetOutline(playerid, MDC[31][playerid], 0);
	PlayerTextDrawSetShadow(playerid, MDC[31][playerid], 0);
	PlayerTextDrawAlignment(playerid, MDC[31][playerid], 1);
	PlayerTextDrawColor(playerid, MDC[31][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, MDC[31][playerid], 255);
	PlayerTextDrawBoxColor(playerid, MDC[31][playerid], 50);
	PlayerTextDrawUseBox(playerid, MDC[31][playerid], 1);
	PlayerTextDrawSetProportional(playerid, MDC[31][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MDC[31][playerid], 0);

	MDC[32][playerid] = CreatePlayerTextDraw(playerid, 410.000000, 340.000000, "CEZA KAYITLARI");
	PlayerTextDrawFont(playerid, MDC[32][playerid], 2);
	PlayerTextDrawLetterSize(playerid, MDC[32][playerid], 0.154164, 1.000000);
	PlayerTextDrawTextSize(playerid, MDC[32][playerid], 10.000000, 78.000000);
	PlayerTextDrawSetOutline(playerid, MDC[32][playerid], 0);
	PlayerTextDrawSetShadow(playerid, MDC[32][playerid], 0);
	PlayerTextDrawAlignment(playerid, MDC[32][playerid], 2);
	PlayerTextDrawColor(playerid, MDC[32][playerid], 255);
	PlayerTextDrawBackgroundColor(playerid, MDC[32][playerid], 255);
	PlayerTextDrawBoxColor(playerid, MDC[32][playerid], 1433087874);
	PlayerTextDrawUseBox(playerid, MDC[32][playerid], 1);
	PlayerTextDrawSetProportional(playerid, MDC[32][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MDC[32][playerid], 1);

	MDC[33][playerid] = CreatePlayerTextDraw(playerid, 309.000000, 340.000000, "STATU DEGISTIR");
	PlayerTextDrawFont(playerid, MDC[33][playerid], 2);
	PlayerTextDrawLetterSize(playerid, MDC[33][playerid], 0.154164, 1.000000);
	PlayerTextDrawTextSize(playerid, MDC[33][playerid], 10.000000, 78.000000);
	PlayerTextDrawSetOutline(playerid, MDC[33][playerid], 0);
	PlayerTextDrawSetShadow(playerid, MDC[33][playerid], 0);
	PlayerTextDrawAlignment(playerid, MDC[33][playerid], 2);
	PlayerTextDrawColor(playerid, MDC[33][playerid], 255);
	PlayerTextDrawBackgroundColor(playerid, MDC[33][playerid], 255);
	PlayerTextDrawBoxColor(playerid, MDC[33][playerid], -8323198);
	PlayerTextDrawUseBox(playerid, MDC[33][playerid], 1);
	PlayerTextDrawSetProportional(playerid, MDC[33][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MDC[33][playerid], 1);

	MDC[34][playerid] = CreatePlayerTextDraw(playerid, 309.000000, 340.000000, "SICIL KAYITLARI");
	PlayerTextDrawFont(playerid, MDC[34][playerid], 2);
	PlayerTextDrawLetterSize(playerid, MDC[34][playerid], 0.154164, 1.000000);
	PlayerTextDrawTextSize(playerid, MDC[34][playerid], 10.000000, 78.000000);
	PlayerTextDrawSetOutline(playerid, MDC[34][playerid], 0);
	PlayerTextDrawSetShadow(playerid, MDC[34][playerid], 0);
	PlayerTextDrawAlignment(playerid, MDC[34][playerid], 2);
	PlayerTextDrawColor(playerid, MDC[34][playerid], 255);
	PlayerTextDrawBackgroundColor(playerid, MDC[34][playerid], 255);
	PlayerTextDrawBoxColor(playerid, MDC[34][playerid], -8323198);
	PlayerTextDrawUseBox(playerid, MDC[34][playerid], 1);
	PlayerTextDrawSetProportional(playerid, MDC[34][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MDC[34][playerid], 1);

	MDC[35][playerid] = CreatePlayerTextDraw(playerid, 244.000000, 220.000000, "ARANMA STATUSU: ARANMIYOR");
	PlayerTextDrawFont(playerid, MDC[35][playerid], 2);
	PlayerTextDrawLetterSize(playerid, MDC[35][playerid], 0.183329, 1.000000);
	PlayerTextDrawTextSize(playerid, MDC[35][playerid], 477.500000, 231.000000);
	PlayerTextDrawSetOutline(playerid, MDC[35][playerid], 0);
	PlayerTextDrawSetShadow(playerid, MDC[35][playerid], 0);
	PlayerTextDrawAlignment(playerid, MDC[35][playerid], 1);
	PlayerTextDrawColor(playerid, MDC[35][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, MDC[35][playerid], 255);
	PlayerTextDrawBoxColor(playerid, MDC[35][playerid], 50);
	PlayerTextDrawUseBox(playerid, MDC[35][playerid], 1);
	PlayerTextDrawSetProportional(playerid, MDC[35][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MDC[35][playerid], 0);

	MDC[36][playerid] = CreatePlayerTextDraw(playerid, 200.000000, 162.000000, "NUMARA SORGULA");
	PlayerTextDrawFont(playerid, MDC[36][playerid], 2);
	PlayerTextDrawLetterSize(playerid, MDC[36][playerid], 0.154164, 1.000000);
	PlayerTextDrawTextSize(playerid, MDC[36][playerid], 10.000000, 78.000000);
	PlayerTextDrawSetOutline(playerid, MDC[36][playerid], 0);
	PlayerTextDrawSetShadow(playerid, MDC[36][playerid], 0);
	PlayerTextDrawAlignment(playerid, MDC[36][playerid], 2);
	PlayerTextDrawColor(playerid, MDC[36][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, MDC[36][playerid], 255);
	PlayerTextDrawBoxColor(playerid, MDC[36][playerid], 50);
	PlayerTextDrawUseBox(playerid, MDC[36][playerid], 1);
	PlayerTextDrawSetProportional(playerid, MDC[36][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MDC[36][playerid], 1);

	MDC[37][playerid] = CreatePlayerTextDraw(playerid, 244.000000, 122.000000, "NUMARA_SAHIBI: Vice_Roleplay");
	PlayerTextDrawFont(playerid, MDC[37][playerid], 2);
	PlayerTextDrawLetterSize(playerid, MDC[37][playerid], 0.183329, 1.000000);
	PlayerTextDrawTextSize(playerid, MDC[37][playerid], 477.500000, 231.000000);
	PlayerTextDrawSetOutline(playerid, MDC[37][playerid], 0);
	PlayerTextDrawSetShadow(playerid, MDC[37][playerid], 0);
	PlayerTextDrawAlignment(playerid, MDC[37][playerid], 1);
	PlayerTextDrawColor(playerid, MDC[37][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, MDC[37][playerid], 255);
	PlayerTextDrawBoxColor(playerid, MDC[37][playerid], 50);
	PlayerTextDrawUseBox(playerid, MDC[37][playerid], 1);
	PlayerTextDrawSetProportional(playerid, MDC[37][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MDC[37][playerid], 0);

	MDC[38][playerid] = CreatePlayerTextDraw(playerid, 244.000000, 136.000000, "SINYAL_BOLGESI: Idlewood");
	PlayerTextDrawFont(playerid, MDC[38][playerid], 2);
	PlayerTextDrawLetterSize(playerid, MDC[38][playerid], 0.183329, 1.000000);
	PlayerTextDrawTextSize(playerid, MDC[38][playerid], 477.500000, 231.000000);
	PlayerTextDrawSetOutline(playerid, MDC[38][playerid], 0);
	PlayerTextDrawSetShadow(playerid, MDC[38][playerid], 0);
	PlayerTextDrawAlignment(playerid, MDC[38][playerid], 1);
	PlayerTextDrawColor(playerid, MDC[38][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, MDC[38][playerid], 255);
	PlayerTextDrawBoxColor(playerid, MDC[38][playerid], 50);
	PlayerTextDrawUseBox(playerid, MDC[38][playerid], 1);
	PlayerTextDrawSetProportional(playerid, MDC[38][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MDC[38][playerid], 0);

	MDC[39][playerid] = CreatePlayerTextDraw(playerid, 244.000000, 122.000000, "EV_SAHIBI: Vice_Roleplay");
	PlayerTextDrawFont(playerid, MDC[39][playerid], 2);
	PlayerTextDrawLetterSize(playerid, MDC[39][playerid], 0.183329, 1.000000);
	PlayerTextDrawTextSize(playerid, MDC[39][playerid], 477.500000, 231.000000);
	PlayerTextDrawSetOutline(playerid, MDC[39][playerid], 0);
	PlayerTextDrawSetShadow(playerid, MDC[39][playerid], 0);
	PlayerTextDrawAlignment(playerid, MDC[39][playerid], 1);
	PlayerTextDrawColor(playerid, MDC[39][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, MDC[39][playerid], 255);
	PlayerTextDrawBoxColor(playerid, MDC[39][playerid], 50);
	PlayerTextDrawUseBox(playerid, MDC[39][playerid], 1);
	PlayerTextDrawSetProportional(playerid, MDC[39][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MDC[39][playerid], 0);

	MDC[40][playerid] = CreatePlayerTextDraw(playerid, 244.000000, 136.000000, "EV_ADRESI: Idlewood");
	PlayerTextDrawFont(playerid, MDC[40][playerid], 2);
	PlayerTextDrawLetterSize(playerid, MDC[40][playerid], 0.183329, 1.000000);
	PlayerTextDrawTextSize(playerid, MDC[40][playerid], 477.500000, 231.000000);
	PlayerTextDrawSetOutline(playerid, MDC[40][playerid], 0);
	PlayerTextDrawSetShadow(playerid, MDC[40][playerid], 0);
	PlayerTextDrawAlignment(playerid, MDC[40][playerid], 1);
	PlayerTextDrawColor(playerid, MDC[40][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, MDC[40][playerid], 255);
	PlayerTextDrawBoxColor(playerid, MDC[40][playerid], 50);
	PlayerTextDrawUseBox(playerid, MDC[40][playerid], 1);
	PlayerTextDrawSetProportional(playerid, MDC[40][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MDC[40][playerid], 0);

	MDC[41][playerid] = CreatePlayerTextDraw(playerid, 309.000000, 340.000000, "KONUM ISARETLE");
	PlayerTextDrawFont(playerid, MDC[41][playerid], 2);
	PlayerTextDrawLetterSize(playerid, MDC[41][playerid], 0.154164, 1.000000);
	PlayerTextDrawTextSize(playerid, MDC[41][playerid], 10.000000, 78.000000);
	PlayerTextDrawSetOutline(playerid, MDC[41][playerid], 0);
	PlayerTextDrawSetShadow(playerid, MDC[41][playerid], 0);
	PlayerTextDrawAlignment(playerid, MDC[41][playerid], 2);
	PlayerTextDrawColor(playerid, MDC[41][playerid], 255);
	PlayerTextDrawBackgroundColor(playerid, MDC[41][playerid], 255);
	PlayerTextDrawBoxColor(playerid, MDC[41][playerid], -8323198);
	PlayerTextDrawUseBox(playerid, MDC[41][playerid], 1);
	PlayerTextDrawSetProportional(playerid, MDC[41][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MDC[41][playerid], 1);

	MDC[42][playerid] = CreatePlayerTextDraw(playerid, 244.000000, 122.000000, "ISYERI_SAHIBI: Nitro Roleplay");
	PlayerTextDrawFont(playerid, MDC[42][playerid], 2);
	PlayerTextDrawLetterSize(playerid, MDC[42][playerid], 0.183329, 1.000000);
	PlayerTextDrawTextSize(playerid, MDC[42][playerid], 477.500000, 231.000000);
	PlayerTextDrawSetOutline(playerid, MDC[42][playerid], 0);
	PlayerTextDrawSetShadow(playerid, MDC[42][playerid], 0);
	PlayerTextDrawAlignment(playerid, MDC[42][playerid], 1);
	PlayerTextDrawColor(playerid, MDC[42][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, MDC[42][playerid], 255);
	PlayerTextDrawBoxColor(playerid, MDC[42][playerid], 50);
	PlayerTextDrawUseBox(playerid, MDC[42][playerid], 1);
	PlayerTextDrawSetProportional(playerid, MDC[42][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MDC[42][playerid], 0);

	MDC[43][playerid] = CreatePlayerTextDraw(playerid, 244.000000, 136.000000, "ISYERI_ADRESI: Temple");
	PlayerTextDrawFont(playerid, MDC[43][playerid], 2);
	PlayerTextDrawLetterSize(playerid, MDC[43][playerid], 0.183329, 1.000000);
	PlayerTextDrawTextSize(playerid, MDC[43][playerid], 477.500000, 231.000000);
	PlayerTextDrawSetOutline(playerid, MDC[43][playerid], 0);
	PlayerTextDrawSetShadow(playerid, MDC[43][playerid], 0);
	PlayerTextDrawAlignment(playerid, MDC[43][playerid], 1);
	PlayerTextDrawColor(playerid, MDC[43][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, MDC[43][playerid], 255);
	PlayerTextDrawBoxColor(playerid, MDC[43][playerid], 50);
	PlayerTextDrawUseBox(playerid, MDC[43][playerid], 1);
	PlayerTextDrawSetProportional(playerid, MDC[43][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MDC[43][playerid], 0);

	MDC[44][playerid] = CreatePlayerTextDraw(playerid, 244.000000, 150.000000, "ISYERI_TURU: Diskotec");
	PlayerTextDrawFont(playerid, MDC[44][playerid], 2);
	PlayerTextDrawLetterSize(playerid, MDC[44][playerid], 0.183329, 1.000000);
	PlayerTextDrawTextSize(playerid, MDC[44][playerid], 477.500000, 231.000000);
	PlayerTextDrawSetOutline(playerid, MDC[44][playerid], 0);
	PlayerTextDrawSetShadow(playerid, MDC[44][playerid], 0);
	PlayerTextDrawAlignment(playerid, MDC[44][playerid], 1);
	PlayerTextDrawColor(playerid, MDC[44][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, MDC[44][playerid], 255);
	PlayerTextDrawBoxColor(playerid, MDC[44][playerid], 50);
	PlayerTextDrawUseBox(playerid, MDC[44][playerid], 1);
	PlayerTextDrawSetProportional(playerid, MDC[44][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MDC[44][playerid], 0);

	MDC[45][playerid] = CreatePlayerTextDraw(playerid, 244.000000, 164.000000, "VERGI_BORCU: $");
	PlayerTextDrawFont(playerid, MDC[45][playerid], 2);
	PlayerTextDrawLetterSize(playerid, MDC[45][playerid], 0.183329, 1.000000);
	PlayerTextDrawTextSize(playerid, MDC[45][playerid], 477.500000, 231.000000);
	PlayerTextDrawSetOutline(playerid, MDC[45][playerid], 0);
	PlayerTextDrawSetShadow(playerid, MDC[45][playerid], 0);
	PlayerTextDrawAlignment(playerid, MDC[45][playerid], 1);
	PlayerTextDrawColor(playerid, MDC[45][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, MDC[45][playerid], 255);
	PlayerTextDrawBoxColor(playerid, MDC[45][playerid], 50);
	PlayerTextDrawUseBox(playerid, MDC[45][playerid], 1);
	PlayerTextDrawSetProportional(playerid, MDC[45][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MDC[45][playerid], 0);

	MDC[46][playerid] = CreatePlayerTextDraw(playerid, 309.000000, 340.000000, "KONUM ISARETLE");
	PlayerTextDrawFont(playerid, MDC[46][playerid], 2);
	PlayerTextDrawLetterSize(playerid, MDC[46][playerid], 0.154164, 1.000000);
	PlayerTextDrawTextSize(playerid, MDC[46][playerid], 10.000000, 78.000000);
	PlayerTextDrawSetOutline(playerid, MDC[46][playerid], 0);
	PlayerTextDrawSetShadow(playerid, MDC[46][playerid], 0);
	PlayerTextDrawAlignment(playerid, MDC[46][playerid], 2);
	PlayerTextDrawColor(playerid, MDC[46][playerid], 255);
	PlayerTextDrawBackgroundColor(playerid, MDC[46][playerid], 255);
	PlayerTextDrawBoxColor(playerid, MDC[46][playerid], -8323198);
	PlayerTextDrawUseBox(playerid, MDC[46][playerid], 1);
	PlayerTextDrawSetProportional(playerid, MDC[46][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MDC[46][playerid], 1);

	MDC[47][playerid] = CreatePlayerTextDraw(playerid, 200.000000, 283.000000, "BOLO KAYITLARI");
	PlayerTextDrawFont(playerid, MDC[47][playerid], 2);
	PlayerTextDrawLetterSize(playerid, MDC[47][playerid], 0.154164, 1.000000);
	PlayerTextDrawTextSize(playerid, MDC[47][playerid], 10.000000, 78.000000);
	PlayerTextDrawSetOutline(playerid, MDC[47][playerid], 0);
	PlayerTextDrawSetShadow(playerid, MDC[47][playerid], 0);
	PlayerTextDrawAlignment(playerid, MDC[47][playerid], 2);
	PlayerTextDrawColor(playerid, MDC[47][playerid], 255);
	PlayerTextDrawBackgroundColor(playerid, MDC[47][playerid], 255);
	PlayerTextDrawBoxColor(playerid, MDC[47][playerid], -1724724094);
	PlayerTextDrawUseBox(playerid, MDC[47][playerid], 1);
	PlayerTextDrawSetProportional(playerid, MDC[47][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, MDC[47][playerid], 1);

	tarim9[playerid] = CreatePlayerTextDraw(playerid, 451.000000, 121.000000, "ld_beat:cross");
	PlayerTextDrawFont(playerid, tarim9[playerid], 4);
	PlayerTextDrawLetterSize(playerid, tarim9[playerid], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, tarim9[playerid], 17.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, tarim9[playerid], 1);
	PlayerTextDrawSetShadow(playerid, tarim9[playerid], 0);
	PlayerTextDrawAlignment(playerid, tarim9[playerid], 1);
	PlayerTextDrawColor(playerid, tarim9[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, tarim9[playerid], 255);
	PlayerTextDrawBoxColor(playerid, tarim9[playerid], 50);
	PlayerTextDrawUseBox(playerid, tarim9[playerid], 1);
	PlayerTextDrawSetProportional(playerid, tarim9[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, tarim9[playerid], 1);

		bolge_1[playerid] = CreatePlayerTextDraw(playerid, 67.000000, 427.000000, "LSPD");
	PlayerTextDrawFont(playerid, bolge_1[playerid], 1);
	PlayerTextDrawLetterSize(playerid, bolge_1[playerid], 0.166666, 0.899999);
	PlayerTextDrawTextSize(playerid, bolge_1[playerid], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, bolge_1[playerid], 1);
	PlayerTextDrawSetShadow(playerid, bolge_1[playerid], 0);
	PlayerTextDrawAlignment(playerid, bolge_1[playerid], 1);
	PlayerTextDrawColor(playerid, bolge_1[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, bolge_1[playerid], 255);
	PlayerTextDrawBoxColor(playerid, bolge_1[playerid], 0);
	PlayerTextDrawUseBox(playerid, bolge_1[playerid], 1);
	PlayerTextDrawSetProportional(playerid, bolge_1[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, bolge_1[playerid], 0);

		GateTextdraw[playerid] = CreatePlayerTextDraw(playerid, 122.000000, 370.000000, "");
	PlayerTextDrawFont(playerid, GateTextdraw[playerid], 2);
	PlayerTextDrawLetterSize(playerid, GateTextdraw[playerid], 0.233333, 1.300000);
	PlayerTextDrawTextSize(playerid, GateTextdraw[playerid], 731.000000, 57.000000);
	PlayerTextDrawSetOutline(playerid, GateTextdraw[playerid], 1);
	PlayerTextDrawSetShadow(playerid, GateTextdraw[playerid], 0);
	PlayerTextDrawAlignment(playerid, GateTextdraw[playerid], 1);
	PlayerTextDrawColor(playerid, GateTextdraw[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, GateTextdraw[playerid], 255);
	PlayerTextDrawBoxColor(playerid, GateTextdraw[playerid], 50);
	PlayerTextDrawUseBox(playerid, GateTextdraw[playerid], 0);
	PlayerTextDrawSetProportional(playerid, GateTextdraw[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, GateTextdraw[playerid], 0);

	bilet_1[playerid] = CreatePlayerTextDraw(playerid, 236.000000, 182.000000, "1234567");
	PlayerTextDrawFont(playerid, bilet_1[playerid], 0);
	PlayerTextDrawLetterSize(playerid, bilet_1[playerid], 0.754167, 3.000000);
	PlayerTextDrawTextSize(playerid, bilet_1[playerid], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, bilet_1[playerid], 1);
	PlayerTextDrawSetShadow(playerid, bilet_1[playerid], 0);
	PlayerTextDrawAlignment(playerid, bilet_1[playerid], 2);
	PlayerTextDrawColor(playerid, bilet_1[playerid], -8388353);
	PlayerTextDrawBackgroundColor(playerid, bilet_1[playerid], 255);
	PlayerTextDrawBoxColor(playerid, bilet_1[playerid], 0);
	PlayerTextDrawUseBox(playerid, bilet_1[playerid], 1);
	PlayerTextDrawSetProportional(playerid, bilet_1[playerid], 0);
	PlayerTextDrawSetSelectable(playerid, bilet_1[playerid], 0);

	pDashCam[playerid] = CreatePlayerTextDraw(playerid, 558.000000, 210.000000, "P N/A~n~S N/A kmph~n~D N/A m");
	PlayerTextDrawBackgroundColor(playerid, pDashCam[playerid], 255);
	PlayerTextDrawFont(playerid, pDashCam[playerid], 1);
	PlayerTextDrawLetterSize(playerid, pDashCam[playerid], 0.250000, 0.899999);
	PlayerTextDrawColor(playerid, pDashCam[playerid], -1);
	PlayerTextDrawSetOutline(playerid, pDashCam[playerid], 1);
	PlayerTextDrawSetProportional(playerid, pDashCam[playerid], 1);
	PlayerTextDrawSetShadow(playerid, pDashCam[playerid], 1);

	renkDeger[playerid] = 0; GateDuzenliyorum[playerid] = 0;
	KogusDuzenliyorum[playerid] = 0;
	IsyeriTextdraw[playerid] = CreatePlayerTextDraw(playerid, 206.000000, 354.000000, "\
		~b~~h~Nitro Roleplay~n~\
		~w~Sahip : Vice_Roleplay~n~\
		~w~Giris Ucreti : ~g~$10~n~\
		~w~Giris icin ~y~Y~w~ tusuna basiniz");

	TD_Fader = CreatePlayerTextDraw(playerid, 0.0, 0.0, "-");
	PlayerTextDrawTextSize(playerid, TD_Fader, 640, 480);
	PlayerTextDrawLetterSize(playerid, TD_Fader, 0.0, 50.0);
	PlayerTextDrawUseBox(playerid, TD_Fader, 1);

	PlayerTextDrawFont(playerid, IsyeriTextdraw[playerid], 2);
	PlayerTextDrawLetterSize(playerid, IsyeriTextdraw[playerid], 0.170833, 1.250000);
	PlayerTextDrawTextSize(playerid, IsyeriTextdraw[playerid], -61.000000, 477.500000);
	PlayerTextDrawSetOutline(playerid, IsyeriTextdraw[playerid], 0);
	PlayerTextDrawSetShadow(playerid, IsyeriTextdraw[playerid], 1);
	PlayerTextDrawAlignment(playerid, IsyeriTextdraw[playerid], 2);
	PlayerTextDrawColor(playerid, IsyeriTextdraw[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, IsyeriTextdraw[playerid], 255);
	PlayerTextDrawBoxColor(playerid, IsyeriTextdraw[playerid], 50);
	PlayerTextDrawUseBox(playerid, IsyeriTextdraw[playerid], 0);
	PlayerTextDrawSetProportional(playerid, IsyeriTextdraw[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, IsyeriTextdraw[playerid], 0);

	HapisText[playerid] = CreatePlayerTextDraw(playerid, 500.000000, 98.000000, "~b~~h~~h~Kalan Sure:~w~ 900 sn.");
	PlayerTextDrawFont(playerid, HapisText[playerid], 2);
	PlayerTextDrawLetterSize(playerid, HapisText[playerid], 0.166666, 0.950000);
	PlayerTextDrawTextSize(playerid, HapisText[playerid], 605.000000, 58.000000);
	PlayerTextDrawSetOutline(playerid, HapisText[playerid], 1);
	PlayerTextDrawSetShadow(playerid, HapisText[playerid], 0);
	PlayerTextDrawAlignment(playerid, HapisText[playerid], 1);
	PlayerTextDrawColor(playerid, HapisText[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, HapisText[playerid], 255);
	PlayerTextDrawBoxColor(playerid, HapisText[playerid], 50);
	PlayerTextDrawUseBox(playerid, HapisText[playerid], 1);
	PlayerTextDrawSetProportional(playerid, HapisText[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, HapisText[playerid], 0);

		characterSelect[playerid][0] = CreatePlayerTextDraw(playerid, -2.000000, 0.000000, "mdl-2012:cselect");
	PlayerTextDrawFont(playerid, characterSelect[playerid][0], 4);
	PlayerTextDrawLetterSize(playerid, characterSelect[playerid][0], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, characterSelect[playerid][0], 646.000000, 450.500000);
	PlayerTextDrawSetOutline(playerid, characterSelect[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, characterSelect[playerid][0], 0);
	PlayerTextDrawAlignment(playerid, characterSelect[playerid][0], 1);
	PlayerTextDrawColor(playerid, characterSelect[playerid][0], -1);
	PlayerTextDrawBackgroundColor(playerid, characterSelect[playerid][0], 255);
	PlayerTextDrawBoxColor(playerid, characterSelect[playerid][0], 50);
	PlayerTextDrawUseBox(playerid, characterSelect[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, characterSelect[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, characterSelect[playerid][0], 0);

	characterSelect[playerid][1] = CreatePlayerTextDraw(playerid, 48.000000, 89.000000, "SEVIYE:_100");
	PlayerTextDrawFont(playerid, characterSelect[playerid][1], 2);
	PlayerTextDrawLetterSize(playerid, characterSelect[playerid][1], 0.233333, 1.650000);
	PlayerTextDrawTextSize(playerid, characterSelect[playerid][1], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, characterSelect[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, characterSelect[playerid][1], 0);
	PlayerTextDrawAlignment(playerid, characterSelect[playerid][1], 1);
	PlayerTextDrawColor(playerid, characterSelect[playerid][1], -1);
	PlayerTextDrawBackgroundColor(playerid, characterSelect[playerid][1], 255);
	PlayerTextDrawBoxColor(playerid, characterSelect[playerid][1], 0);
	PlayerTextDrawUseBox(playerid, characterSelect[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, characterSelect[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, characterSelect[playerid][1], 0);

	characterSelect[playerid][2] = CreatePlayerTextDraw(playerid, 376.000000, 89.000000, "SEVIYE:_100");
	PlayerTextDrawFont(playerid, characterSelect[playerid][2], 2);
	PlayerTextDrawLetterSize(playerid, characterSelect[playerid][2], 0.233333, 1.650000);
	PlayerTextDrawTextSize(playerid, characterSelect[playerid][2], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, characterSelect[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, characterSelect[playerid][2], 0);
	PlayerTextDrawAlignment(playerid, characterSelect[playerid][2], 1);
	PlayerTextDrawColor(playerid, characterSelect[playerid][2], -1);
	PlayerTextDrawBackgroundColor(playerid, characterSelect[playerid][2], 255);
	PlayerTextDrawBoxColor(playerid, characterSelect[playerid][2], 0);
	PlayerTextDrawUseBox(playerid, characterSelect[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, characterSelect[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, characterSelect[playerid][2], 0);

	characterSelect[playerid][3] = CreatePlayerTextDraw(playerid, 48.000000, 257.000000, "SEVIYE:_100");
	PlayerTextDrawFont(playerid, characterSelect[playerid][3], 2);
	PlayerTextDrawLetterSize(playerid, characterSelect[playerid][3], 0.233333, 1.650000);
	PlayerTextDrawTextSize(playerid, characterSelect[playerid][3], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, characterSelect[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, characterSelect[playerid][3], 0);
	PlayerTextDrawAlignment(playerid, characterSelect[playerid][3], 1);
	PlayerTextDrawColor(playerid, characterSelect[playerid][3], -1);
	PlayerTextDrawBackgroundColor(playerid, characterSelect[playerid][3], 255);
	PlayerTextDrawBoxColor(playerid, characterSelect[playerid][3], 0);
	PlayerTextDrawUseBox(playerid, characterSelect[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, characterSelect[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, characterSelect[playerid][3], 0);

	characterSelect[playerid][4] = CreatePlayerTextDraw(playerid, 376.000000, 258.000000, "SEVIYE:_100");
	PlayerTextDrawFont(playerid, characterSelect[playerid][4], 2);
	PlayerTextDrawLetterSize(playerid, characterSelect[playerid][4], 0.233333, 1.650000);
	PlayerTextDrawTextSize(playerid, characterSelect[playerid][4], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, characterSelect[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, characterSelect[playerid][4], 0);
	PlayerTextDrawAlignment(playerid, characterSelect[playerid][4], 1);
	PlayerTextDrawColor(playerid, characterSelect[playerid][4], -1);
	PlayerTextDrawBackgroundColor(playerid, characterSelect[playerid][4], 255);
	PlayerTextDrawBoxColor(playerid, characterSelect[playerid][4], 0);
	PlayerTextDrawUseBox(playerid, characterSelect[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, characterSelect[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, characterSelect[playerid][4], 0);

	characterSelect[playerid][5] = CreatePlayerTextDraw(playerid, 78.000000, 109.000000, "Test_CelsiChar");
	PlayerTextDrawFont(playerid, characterSelect[playerid][5], 2);
	PlayerTextDrawLetterSize(playerid, characterSelect[playerid][5], 0.233333, 1.650000);
	PlayerTextDrawTextSize(playerid, characterSelect[playerid][5], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, characterSelect[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, characterSelect[playerid][5], 0);
	PlayerTextDrawAlignment(playerid, characterSelect[playerid][5], 1);
	PlayerTextDrawColor(playerid, characterSelect[playerid][5], -1);
	PlayerTextDrawBackgroundColor(playerid, characterSelect[playerid][5], 255);
	PlayerTextDrawBoxColor(playerid, characterSelect[playerid][5], 0);
	PlayerTextDrawUseBox(playerid, characterSelect[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, characterSelect[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, characterSelect[playerid][5], 0);

	characterSelect[playerid][6] = CreatePlayerTextDraw(playerid, 407.000000, 109.000000, "Test_CelsiChar");
	PlayerTextDrawFont(playerid, characterSelect[playerid][6], 2);
	PlayerTextDrawLetterSize(playerid, characterSelect[playerid][6], 0.233333, 1.650000);
	PlayerTextDrawTextSize(playerid, characterSelect[playerid][6], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, characterSelect[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, characterSelect[playerid][6], 0);
	PlayerTextDrawAlignment(playerid, characterSelect[playerid][6], 1);
	PlayerTextDrawColor(playerid, characterSelect[playerid][6], -1);
	PlayerTextDrawBackgroundColor(playerid, characterSelect[playerid][6], 255);
	PlayerTextDrawBoxColor(playerid, characterSelect[playerid][6], 0);
	PlayerTextDrawUseBox(playerid, characterSelect[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, characterSelect[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid, characterSelect[playerid][6], 0);

	characterSelect[playerid][7] = CreatePlayerTextDraw(playerid, 78.000000, 277.000000, "Test_CelsiChar");
	PlayerTextDrawFont(playerid, characterSelect[playerid][7], 2);
	PlayerTextDrawLetterSize(playerid, characterSelect[playerid][7], 0.233333, 1.650000);
	PlayerTextDrawTextSize(playerid, characterSelect[playerid][7], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, characterSelect[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, characterSelect[playerid][7], 0);
	PlayerTextDrawAlignment(playerid, characterSelect[playerid][7], 1);
	PlayerTextDrawColor(playerid, characterSelect[playerid][7], -1);
	PlayerTextDrawBackgroundColor(playerid, characterSelect[playerid][7], 255);
	PlayerTextDrawBoxColor(playerid, characterSelect[playerid][7], 0);
	PlayerTextDrawUseBox(playerid, characterSelect[playerid][7], 1);
	PlayerTextDrawSetProportional(playerid, characterSelect[playerid][7], 1);
	PlayerTextDrawSetSelectable(playerid, characterSelect[playerid][7], 0);

	characterSelect[playerid][8] = CreatePlayerTextDraw(playerid, 408.000000, 277.000000, "Test_CelsiChar");
	PlayerTextDrawFont(playerid, characterSelect[playerid][8], 2);
	PlayerTextDrawLetterSize(playerid, characterSelect[playerid][8], 0.233333, 1.650000);
	PlayerTextDrawTextSize(playerid, characterSelect[playerid][8], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, characterSelect[playerid][8], 1);
	PlayerTextDrawSetShadow(playerid, characterSelect[playerid][8], 0);
	PlayerTextDrawAlignment(playerid, characterSelect[playerid][8], 1);
	PlayerTextDrawColor(playerid, characterSelect[playerid][8], -1);
	PlayerTextDrawBackgroundColor(playerid, characterSelect[playerid][8], 255);
	PlayerTextDrawBoxColor(playerid, characterSelect[playerid][8], 0);
	PlayerTextDrawUseBox(playerid, characterSelect[playerid][8], 1);
	PlayerTextDrawSetProportional(playerid, characterSelect[playerid][8], 1);
	PlayerTextDrawSetSelectable(playerid, characterSelect[playerid][8], 0);

	characterSelect[playerid][9] = CreatePlayerTextDraw(playerid, 79.000000, 149.000000, "BOY:_182");
	PlayerTextDrawFont(playerid, characterSelect[playerid][9], 2);
	PlayerTextDrawLetterSize(playerid, characterSelect[playerid][9], 0.175000, 1.300000);
	PlayerTextDrawTextSize(playerid, characterSelect[playerid][9], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, characterSelect[playerid][9], 1);
	PlayerTextDrawSetShadow(playerid, characterSelect[playerid][9], 0);
	PlayerTextDrawAlignment(playerid, characterSelect[playerid][9], 1);
	PlayerTextDrawColor(playerid, characterSelect[playerid][9], -1);
	PlayerTextDrawBackgroundColor(playerid, characterSelect[playerid][9], 255);
	PlayerTextDrawBoxColor(playerid, characterSelect[playerid][9], 0);
	PlayerTextDrawUseBox(playerid, characterSelect[playerid][9], 1);
	PlayerTextDrawSetProportional(playerid, characterSelect[playerid][9], 1);
	PlayerTextDrawSetSelectable(playerid, characterSelect[playerid][9], 0);

	characterSelect[playerid][10] = CreatePlayerTextDraw(playerid, 79.000000, 161.000000, "Kilo:_78");
	PlayerTextDrawFont(playerid, characterSelect[playerid][10], 2);
	PlayerTextDrawLetterSize(playerid, characterSelect[playerid][10], 0.175000, 1.300000);
	PlayerTextDrawTextSize(playerid, characterSelect[playerid][10], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, characterSelect[playerid][10], 1);
	PlayerTextDrawSetShadow(playerid, characterSelect[playerid][10], 0);
	PlayerTextDrawAlignment(playerid, characterSelect[playerid][10], 1);
	PlayerTextDrawColor(playerid, characterSelect[playerid][10], -1);
	PlayerTextDrawBackgroundColor(playerid, characterSelect[playerid][10], 255);
	PlayerTextDrawBoxColor(playerid, characterSelect[playerid][10], 0);
	PlayerTextDrawUseBox(playerid, characterSelect[playerid][10], 1);
	PlayerTextDrawSetProportional(playerid, characterSelect[playerid][10], 1);
	PlayerTextDrawSetSelectable(playerid, characterSelect[playerid][10], 0);

	characterSelect[playerid][11] = CreatePlayerTextDraw(playerid, 79.000000, 173.000000, "Lokasyon:_Bahamas");
	PlayerTextDrawFont(playerid, characterSelect[playerid][11], 2);
	PlayerTextDrawLetterSize(playerid, characterSelect[playerid][11], 0.175000, 1.300000);
	//PlayerTextDrawTextSize(playerid, characterSelect[playerid][11], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, characterSelect[playerid][11], 1);
	PlayerTextDrawSetShadow(playerid, characterSelect[playerid][11], 0);
	PlayerTextDrawAlignment(playerid, characterSelect[playerid][11], 1);
	PlayerTextDrawColor(playerid, characterSelect[playerid][11], -1);
	PlayerTextDrawBackgroundColor(playerid, characterSelect[playerid][11], 255);
	PlayerTextDrawBoxColor(playerid, characterSelect[playerid][11], 0);
	PlayerTextDrawUseBox(playerid, characterSelect[playerid][11], 1);
	PlayerTextDrawSetProportional(playerid, characterSelect[playerid][11], 1);
	PlayerTextDrawSetSelectable(playerid, characterSelect[playerid][11], 0);

	characterSelect[playerid][12] = CreatePlayerTextDraw(playerid, 408.000000, 149.000000, "BOY:_182");
	PlayerTextDrawFont(playerid, characterSelect[playerid][12], 2);
	PlayerTextDrawLetterSize(playerid, characterSelect[playerid][12], 0.175000, 1.300000);
	PlayerTextDrawTextSize(playerid, characterSelect[playerid][12], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, characterSelect[playerid][12], 1);
	PlayerTextDrawSetShadow(playerid, characterSelect[playerid][12], 0);
	PlayerTextDrawAlignment(playerid, characterSelect[playerid][12], 1);
	PlayerTextDrawColor(playerid, characterSelect[playerid][12], -1);
	PlayerTextDrawBackgroundColor(playerid, characterSelect[playerid][12], 255);
	PlayerTextDrawBoxColor(playerid, characterSelect[playerid][12], 0);
	PlayerTextDrawUseBox(playerid, characterSelect[playerid][12], 1);
	PlayerTextDrawSetProportional(playerid, characterSelect[playerid][12], 1);
	PlayerTextDrawSetSelectable(playerid, characterSelect[playerid][12], 0);

	characterSelect[playerid][13] = CreatePlayerTextDraw(playerid, 408.000000, 161.000000, "Kilo:_78");
	PlayerTextDrawFont(playerid, characterSelect[playerid][13], 2);
	PlayerTextDrawLetterSize(playerid, characterSelect[playerid][13], 0.175000, 1.300000);
	PlayerTextDrawTextSize(playerid, characterSelect[playerid][13], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, characterSelect[playerid][13], 1);
	PlayerTextDrawSetShadow(playerid, characterSelect[playerid][13], 0);
	PlayerTextDrawAlignment(playerid, characterSelect[playerid][13], 1);
	PlayerTextDrawColor(playerid, characterSelect[playerid][13], -1);
	PlayerTextDrawBackgroundColor(playerid, characterSelect[playerid][13], 255);
	PlayerTextDrawBoxColor(playerid, characterSelect[playerid][13], 0);
	PlayerTextDrawUseBox(playerid, characterSelect[playerid][13], 1);
	PlayerTextDrawSetProportional(playerid, characterSelect[playerid][13], 1);
	PlayerTextDrawSetSelectable(playerid, characterSelect[playerid][13], 0);

	characterSelect[playerid][14] = CreatePlayerTextDraw(playerid, 408.000000, 173.000000, "Lokasyon:_Bahamas");
	PlayerTextDrawFont(playerid, characterSelect[playerid][14], 2);
	PlayerTextDrawLetterSize(playerid, characterSelect[playerid][14], 0.175000, 1.300000);
	//PlayerTextDrawTextSize(playerid, characterSelect[playerid][14], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, characterSelect[playerid][14], 1);
	PlayerTextDrawSetShadow(playerid, characterSelect[playerid][14], 0);
	PlayerTextDrawAlignment(playerid, characterSelect[playerid][14], 1);
	PlayerTextDrawColor(playerid, characterSelect[playerid][14], -1);
	PlayerTextDrawBackgroundColor(playerid, characterSelect[playerid][14], 255);
	PlayerTextDrawBoxColor(playerid, characterSelect[playerid][14], 0);
	PlayerTextDrawUseBox(playerid, characterSelect[playerid][14], 1);
	PlayerTextDrawSetProportional(playerid, characterSelect[playerid][14], 1);
	PlayerTextDrawSetSelectable(playerid, characterSelect[playerid][14], 0);

	characterSelect[playerid][15] = CreatePlayerTextDraw(playerid, 79.000000, 318.000000, "BOY:_182");
	PlayerTextDrawFont(playerid, characterSelect[playerid][15], 2);
	PlayerTextDrawLetterSize(playerid, characterSelect[playerid][15], 0.175000, 1.300000);
	PlayerTextDrawTextSize(playerid, characterSelect[playerid][15], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, characterSelect[playerid][15], 1);
	PlayerTextDrawSetShadow(playerid, characterSelect[playerid][15], 0);
	PlayerTextDrawAlignment(playerid, characterSelect[playerid][15], 1);
	PlayerTextDrawColor(playerid, characterSelect[playerid][15], -1);
	PlayerTextDrawBackgroundColor(playerid, characterSelect[playerid][15], 255);
	PlayerTextDrawBoxColor(playerid, characterSelect[playerid][15], 0);
	PlayerTextDrawUseBox(playerid, characterSelect[playerid][15], 1);
	PlayerTextDrawSetProportional(playerid, characterSelect[playerid][15], 1);
	PlayerTextDrawSetSelectable(playerid, characterSelect[playerid][15], 0);

	characterSelect[playerid][16] = CreatePlayerTextDraw(playerid, 79.000000, 330.000000, "Kilo:_78");
	PlayerTextDrawFont(playerid, characterSelect[playerid][16], 2);
	PlayerTextDrawLetterSize(playerid, characterSelect[playerid][16], 0.175000, 1.300000);
	PlayerTextDrawTextSize(playerid, characterSelect[playerid][16], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, characterSelect[playerid][16], 1);
	PlayerTextDrawSetShadow(playerid, characterSelect[playerid][16], 0);
	PlayerTextDrawAlignment(playerid, characterSelect[playerid][16], 1);
	PlayerTextDrawColor(playerid, characterSelect[playerid][16], -1);
	PlayerTextDrawBackgroundColor(playerid, characterSelect[playerid][16], 255);
	PlayerTextDrawBoxColor(playerid, characterSelect[playerid][16], 0);
	PlayerTextDrawUseBox(playerid, characterSelect[playerid][16], 1);
	PlayerTextDrawSetProportional(playerid, characterSelect[playerid][16], 1);
	PlayerTextDrawSetSelectable(playerid, characterSelect[playerid][16], 0);

	characterSelect[playerid][17] = CreatePlayerTextDraw(playerid, 79.000000, 342.000000, "Lokasyon:_Bahamas");
	PlayerTextDrawFont(playerid, characterSelect[playerid][17], 2);
	PlayerTextDrawLetterSize(playerid, characterSelect[playerid][17], 0.175000, 1.300000);
	//PlayerTextDrawTextSize(playerid, characterSelect[playerid][17], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, characterSelect[playerid][17], 1);
	PlayerTextDrawSetShadow(playerid, characterSelect[playerid][17], 0);
	PlayerTextDrawAlignment(playerid, characterSelect[playerid][17], 1);
	PlayerTextDrawColor(playerid, characterSelect[playerid][17], -1);
	PlayerTextDrawBackgroundColor(playerid, characterSelect[playerid][17], 255);
	PlayerTextDrawBoxColor(playerid, characterSelect[playerid][17], 0);
	PlayerTextDrawUseBox(playerid, characterSelect[playerid][17], 1);
	PlayerTextDrawSetProportional(playerid, characterSelect[playerid][17], 1);
	PlayerTextDrawSetSelectable(playerid, characterSelect[playerid][17], 0);

	characterSelect[playerid][18] = CreatePlayerTextDraw(playerid, 409.000000, 318.000000, "BOY:_182");
	PlayerTextDrawFont(playerid, characterSelect[playerid][18], 2);
	PlayerTextDrawLetterSize(playerid, characterSelect[playerid][18], 0.175000, 1.300000);
	PlayerTextDrawTextSize(playerid, characterSelect[playerid][18], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, characterSelect[playerid][18], 1);
	PlayerTextDrawSetShadow(playerid, characterSelect[playerid][18], 0);
	PlayerTextDrawAlignment(playerid, characterSelect[playerid][18], 1);
	PlayerTextDrawColor(playerid, characterSelect[playerid][18], -1);
	PlayerTextDrawBackgroundColor(playerid, characterSelect[playerid][18], 255);
	PlayerTextDrawBoxColor(playerid, characterSelect[playerid][18], 0);
	PlayerTextDrawUseBox(playerid, characterSelect[playerid][18], 1);
	PlayerTextDrawSetProportional(playerid, characterSelect[playerid][18], 1);
	PlayerTextDrawSetSelectable(playerid, characterSelect[playerid][18], 0);

	characterSelect[playerid][19] = CreatePlayerTextDraw(playerid, 409.000000, 330.000000, "Kilo:_78");
	PlayerTextDrawFont(playerid, characterSelect[playerid][19], 2);
	PlayerTextDrawLetterSize(playerid, characterSelect[playerid][19], 0.175000, 1.300000);
	PlayerTextDrawTextSize(playerid, characterSelect[playerid][19], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, characterSelect[playerid][19], 1);
	PlayerTextDrawSetShadow(playerid, characterSelect[playerid][19], 0);
	PlayerTextDrawAlignment(playerid, characterSelect[playerid][19], 1);
	PlayerTextDrawColor(playerid, characterSelect[playerid][19], -1);
	PlayerTextDrawBackgroundColor(playerid, characterSelect[playerid][19], 255);
	PlayerTextDrawBoxColor(playerid, characterSelect[playerid][19], 0);
	PlayerTextDrawUseBox(playerid, characterSelect[playerid][19], 1);
	PlayerTextDrawSetProportional(playerid, characterSelect[playerid][19], 1);
	PlayerTextDrawSetSelectable(playerid, characterSelect[playerid][19], 0);

	characterSelect[playerid][20] = CreatePlayerTextDraw(playerid, 409.000000, 342.000000, "Lokasyon:_Bahamas");
	PlayerTextDrawFont(playerid, characterSelect[playerid][20], 2);
	PlayerTextDrawLetterSize(playerid, characterSelect[playerid][20], 0.175000, 1.300000);
	//PlayerTextDrawTextSize(playerid, characterSelect[playerid][20], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, characterSelect[playerid][20], 1);
	PlayerTextDrawSetShadow(playerid, characterSelect[playerid][20], 0);
	PlayerTextDrawAlignment(playerid, characterSelect[playerid][20], 1);
	PlayerTextDrawColor(playerid, characterSelect[playerid][20], -1);
	PlayerTextDrawBackgroundColor(playerid, characterSelect[playerid][20], 255);
	PlayerTextDrawBoxColor(playerid, characterSelect[playerid][20], 0);
	PlayerTextDrawUseBox(playerid, characterSelect[playerid][20], 1);
	PlayerTextDrawSetProportional(playerid, characterSelect[playerid][20], 1);
	PlayerTextDrawSetSelectable(playerid, characterSelect[playerid][20], 0);

	characterSelect[playerid][21] = CreatePlayerTextDraw(playerid, 228.000000, 166.000000, "Giris_Yap");
	PlayerTextDrawFont(playerid, characterSelect[playerid][21], 2);
	PlayerTextDrawLetterSize(playerid, characterSelect[playerid][21], 0.233333, 1.650000);
//  PlayerTextDrawTextSize(playerid, characterSelect[playerid][21], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, characterSelect[playerid][21], 1);
	PlayerTextDrawSetShadow(playerid, characterSelect[playerid][21], 0);
	PlayerTextDrawAlignment(playerid, characterSelect[playerid][21], 1);
	PlayerTextDrawColor(playerid, characterSelect[playerid][21], -1);
	PlayerTextDrawBackgroundColor(playerid, characterSelect[playerid][21], 255);
	PlayerTextDrawBoxColor(playerid, characterSelect[playerid][21], 0);
	PlayerTextDrawUseBox(playerid, characterSelect[playerid][21], 1);
	PlayerTextDrawSetProportional(playerid, characterSelect[playerid][21], 1);
	PlayerTextDrawSetSelectable(playerid, characterSelect[playerid][21], 1);

	characterSelect[playerid][22] = CreatePlayerTextDraw(playerid, 553.000000, 166.000000, "Giris_Yap");
	PlayerTextDrawFont(playerid, characterSelect[playerid][22], 2);
	PlayerTextDrawLetterSize(playerid, characterSelect[playerid][22], 0.233333, 1.650000);
//	PlayerTextDrawTextSize(playerid, characterSelect[playerid][22], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, characterSelect[playerid][22], 1);
	PlayerTextDrawSetShadow(playerid, characterSelect[playerid][22], 0);
	PlayerTextDrawAlignment(playerid, characterSelect[playerid][22], 1);
	PlayerTextDrawColor(playerid, characterSelect[playerid][22], -1);
	PlayerTextDrawBackgroundColor(playerid, characterSelect[playerid][22], 255);
	PlayerTextDrawBoxColor(playerid, characterSelect[playerid][22], 0);
	PlayerTextDrawUseBox(playerid, characterSelect[playerid][22], 1);
	PlayerTextDrawSetProportional(playerid, characterSelect[playerid][22], 1);
	PlayerTextDrawSetSelectable(playerid, characterSelect[playerid][22], 1);

	characterSelect[playerid][23] = CreatePlayerTextDraw(playerid, 228.000000, 335.000000, "Giris_Yap");
	PlayerTextDrawFont(playerid, characterSelect[playerid][23], 2);
	PlayerTextDrawLetterSize(playerid, characterSelect[playerid][23], 0.233333, 1.650000);
//	PlayerTextDrawTextSize(playerid, characterSelect[playerid][23], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, characterSelect[playerid][23], 1);
	PlayerTextDrawSetShadow(playerid, characterSelect[playerid][23], 0);
	PlayerTextDrawAlignment(playerid, characterSelect[playerid][23], 1);
	PlayerTextDrawColor(playerid, characterSelect[playerid][23], -1);
	PlayerTextDrawBackgroundColor(playerid, characterSelect[playerid][23], 255);
	PlayerTextDrawBoxColor(playerid, characterSelect[playerid][23], 0);
	PlayerTextDrawUseBox(playerid, characterSelect[playerid][23], 1);
	PlayerTextDrawSetProportional(playerid, characterSelect[playerid][23], 1);
	PlayerTextDrawSetSelectable(playerid, characterSelect[playerid][23], 1);

	characterSelect[playerid][24] = CreatePlayerTextDraw(playerid, 553.000000, 335.000000, "Giris_Yap");
	PlayerTextDrawFont(playerid, characterSelect[playerid][24], 2);
	PlayerTextDrawLetterSize(playerid, characterSelect[playerid][24], 0.233333, 1.650000);
//	PlayerTextDrawTextSize(playerid, characterSelect[playerid][24], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, characterSelect[playerid][24], 1);
	PlayerTextDrawSetShadow(playerid, characterSelect[playerid][24], 0);
	PlayerTextDrawAlignment(playerid, characterSelect[playerid][24], 1);
	PlayerTextDrawColor(playerid, characterSelect[playerid][24], -1);
	PlayerTextDrawBackgroundColor(playerid, characterSelect[playerid][24], 255);
	PlayerTextDrawBoxColor(playerid, characterSelect[playerid][24], 0);
	PlayerTextDrawUseBox(playerid, characterSelect[playerid][24], 1);
	PlayerTextDrawSetProportional(playerid, characterSelect[playerid][24], 1);
	PlayerTextDrawSetSelectable(playerid, characterSelect[playerid][24], 1);

	characterSelect[playerid][25] = CreatePlayerTextDraw(playerid, 0.000000, 107.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, characterSelect[playerid][25], 5);
	PlayerTextDrawLetterSize(playerid, characterSelect[playerid][25], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, characterSelect[playerid][25], 101.000000, 82.000000);
	PlayerTextDrawSetOutline(playerid, characterSelect[playerid][25], 0);
	PlayerTextDrawSetShadow(playerid, characterSelect[playerid][25], 0);
	PlayerTextDrawAlignment(playerid, characterSelect[playerid][25], 1);
	PlayerTextDrawColor(playerid, characterSelect[playerid][25], -1);
	PlayerTextDrawBackgroundColor(playerid, characterSelect[playerid][25], 0);
	PlayerTextDrawBoxColor(playerid, characterSelect[playerid][25], 255);
	PlayerTextDrawUseBox(playerid, characterSelect[playerid][25], 0);
	PlayerTextDrawSetProportional(playerid, characterSelect[playerid][25], 1);
	PlayerTextDrawSetSelectable(playerid, characterSelect[playerid][25], 0);
	PlayerTextDrawSetPreviewModel(playerid, characterSelect[playerid][25], 0);
	PlayerTextDrawSetPreviewRot(playerid, characterSelect[playerid][25], -10.000000, 0.000000, 0.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, characterSelect[playerid][25], 1, 1);

	characterSelect[playerid][26] = CreatePlayerTextDraw(playerid, 331.000000, 107.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, characterSelect[playerid][26], 5);
	PlayerTextDrawLetterSize(playerid, characterSelect[playerid][26], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, characterSelect[playerid][26], 101.000000, 82.000000);
	PlayerTextDrawSetOutline(playerid, characterSelect[playerid][26], 0);
	PlayerTextDrawSetShadow(playerid, characterSelect[playerid][26], 0);
	PlayerTextDrawAlignment(playerid, characterSelect[playerid][26], 1);
	PlayerTextDrawColor(playerid, characterSelect[playerid][26], -1);
	PlayerTextDrawBackgroundColor(playerid, characterSelect[playerid][26], 0);
	PlayerTextDrawBoxColor(playerid, characterSelect[playerid][26], 255);
	PlayerTextDrawUseBox(playerid, characterSelect[playerid][26], 0);
	PlayerTextDrawSetProportional(playerid, characterSelect[playerid][26], 1);
	PlayerTextDrawSetSelectable(playerid, characterSelect[playerid][26], 0);
	PlayerTextDrawSetPreviewModel(playerid, characterSelect[playerid][26], 0);
	PlayerTextDrawSetPreviewRot(playerid, characterSelect[playerid][26], -10.000000, 0.000000, 0.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, characterSelect[playerid][26], 1, 1);

	characterSelect[playerid][27] = CreatePlayerTextDraw(playerid, 0.000000, 277.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, characterSelect[playerid][27], 5);
	PlayerTextDrawLetterSize(playerid, characterSelect[playerid][27], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, characterSelect[playerid][27], 101.000000, 82.000000);
	PlayerTextDrawSetOutline(playerid, characterSelect[playerid][27], 0);
	PlayerTextDrawSetShadow(playerid, characterSelect[playerid][27], 0);
	PlayerTextDrawAlignment(playerid, characterSelect[playerid][27], 1);
	PlayerTextDrawColor(playerid, characterSelect[playerid][27], -1);
	PlayerTextDrawBackgroundColor(playerid, characterSelect[playerid][27], 0);
	PlayerTextDrawBoxColor(playerid, characterSelect[playerid][27], 255);
	PlayerTextDrawUseBox(playerid, characterSelect[playerid][27], 0);
	PlayerTextDrawSetProportional(playerid, characterSelect[playerid][27], 1);
	PlayerTextDrawSetSelectable(playerid, characterSelect[playerid][27], 0);
	PlayerTextDrawSetPreviewModel(playerid, characterSelect[playerid][27], 0);
	PlayerTextDrawSetPreviewRot(playerid, characterSelect[playerid][27], -10.000000, 0.000000, 0.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, characterSelect[playerid][27], 1, 1);

	characterSelect[playerid][28] = CreatePlayerTextDraw(playerid, 332.000000, 278.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, characterSelect[playerid][28], 5);
	PlayerTextDrawLetterSize(playerid, characterSelect[playerid][28], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, characterSelect[playerid][28], 101.000000, 82.000000);
	PlayerTextDrawSetOutline(playerid, characterSelect[playerid][28], 0);
	PlayerTextDrawSetShadow(playerid, characterSelect[playerid][28], 0);
	PlayerTextDrawAlignment(playerid, characterSelect[playerid][28], 1);
	PlayerTextDrawColor(playerid, characterSelect[playerid][28], -1);
	PlayerTextDrawBackgroundColor(playerid, characterSelect[playerid][28], 0);
	PlayerTextDrawBoxColor(playerid, characterSelect[playerid][28], 255);
	PlayerTextDrawUseBox(playerid, characterSelect[playerid][28], 0);
	PlayerTextDrawSetProportional(playerid, characterSelect[playerid][28], 1);
	PlayerTextDrawSetSelectable(playerid, characterSelect[playerid][28], 0);
	PlayerTextDrawSetPreviewModel(playerid, characterSelect[playerid][28], 0);
	PlayerTextDrawSetPreviewRot(playerid, characterSelect[playerid][28], -10.000000, 0.000000, 0.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, characterSelect[playerid][28], 1, 1);

	yetenekdraw[playerid][0] = CreatePlayerTextDraw(playerid, 22.000000, 176.840057, "mdl-2017:yetenekler");
	PlayerTextDrawTextSize(playerid, yetenekdraw[playerid][0], 165.000000, 165.000000);
	PlayerTextDrawAlignment(playerid, yetenekdraw[playerid][0], 1);
	PlayerTextDrawColor(playerid, yetenekdraw[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, yetenekdraw[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, yetenekdraw[playerid][0], 255);
	PlayerTextDrawFont(playerid, yetenekdraw[playerid][0], 4);
	PlayerTextDrawSetProportional(playerid, yetenekdraw[playerid][0], 0);

	yetenekdraw[playerid][1] = CreatePlayerTextDraw(playerid, 78.400001, 210.000061, "1/3");
	PlayerTextDrawLetterSize(playerid, yetenekdraw[playerid][1], 0.120000, 0.800000);
	PlayerTextDrawAlignment(playerid, yetenekdraw[playerid][1], 2);
	PlayerTextDrawColor(playerid, yetenekdraw[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, yetenekdraw[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, yetenekdraw[playerid][1], 255);
	PlayerTextDrawFont(playerid, yetenekdraw[playerid][1], 2);
	PlayerTextDrawSetProportional(playerid, yetenekdraw[playerid][1], 1);

	yetenekdraw[playerid][2] = CreatePlayerTextDraw(playerid, 77.900009, 223.600891, "2/3");
	PlayerTextDrawLetterSize(playerid, yetenekdraw[playerid][2], 0.120000, 0.800000);
	PlayerTextDrawAlignment(playerid, yetenekdraw[playerid][2], 2);
	PlayerTextDrawColor(playerid, yetenekdraw[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, yetenekdraw[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, yetenekdraw[playerid][2], 255);
	PlayerTextDrawFont(playerid, yetenekdraw[playerid][2], 2);
	PlayerTextDrawSetProportional(playerid, yetenekdraw[playerid][2], 1);

	yetenekdraw[playerid][3] = CreatePlayerTextDraw(playerid, 77.900009, 236.380844, "2/3");
	PlayerTextDrawLetterSize(playerid, yetenekdraw[playerid][3], 0.120000, 0.800000);
	PlayerTextDrawAlignment(playerid, yetenekdraw[playerid][3], 2);
	PlayerTextDrawColor(playerid, yetenekdraw[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, yetenekdraw[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, yetenekdraw[playerid][3], 255);
	PlayerTextDrawFont(playerid, yetenekdraw[playerid][3], 2);
	PlayerTextDrawSetProportional(playerid, yetenekdraw[playerid][3], 1);

	yetenekdraw[playerid][4] = CreatePlayerTextDraw(playerid, 77.900009, 249.260787, "2/3");
	PlayerTextDrawLetterSize(playerid, yetenekdraw[playerid][4], 0.120000, 0.800000);
	PlayerTextDrawAlignment(playerid, yetenekdraw[playerid][4], 2);
	PlayerTextDrawColor(playerid, yetenekdraw[playerid][4], -1);
	PlayerTextDrawSetShadow(playerid, yetenekdraw[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, yetenekdraw[playerid][4], 255);
	PlayerTextDrawFont(playerid, yetenekdraw[playerid][4], 2);
	PlayerTextDrawSetProportional(playerid, yetenekdraw[playerid][4], 1);

	yetenekdraw[playerid][5] = CreatePlayerTextDraw(playerid, 77.900009, 261.020751, "2/3");
	PlayerTextDrawLetterSize(playerid, yetenekdraw[playerid][5], 0.120000, 0.800000);
	PlayerTextDrawAlignment(playerid, yetenekdraw[playerid][5], 2);
	PlayerTextDrawColor(playerid, yetenekdraw[playerid][5], -1);
	PlayerTextDrawSetShadow(playerid, yetenekdraw[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, yetenekdraw[playerid][5], 255);
	PlayerTextDrawFont(playerid, yetenekdraw[playerid][5], 2);
	PlayerTextDrawSetProportional(playerid, yetenekdraw[playerid][5], 1);

	yetenekdraw[playerid][6] = CreatePlayerTextDraw(playerid, 77.900009, 273.100646, "2/3");
	PlayerTextDrawLetterSize(playerid, yetenekdraw[playerid][6], 0.120000, 0.800000);
	PlayerTextDrawAlignment(playerid, yetenekdraw[playerid][6], 2);
	PlayerTextDrawColor(playerid, yetenekdraw[playerid][6], -1);
	PlayerTextDrawSetShadow(playerid, yetenekdraw[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, yetenekdraw[playerid][6], 255);
	PlayerTextDrawFont(playerid, yetenekdraw[playerid][6], 2);
	PlayerTextDrawSetProportional(playerid, yetenekdraw[playerid][6], 1);

	yetenekdraw[playerid][7] = CreatePlayerTextDraw(playerid, 77.900009, 284.840667, "2/3");
	PlayerTextDrawLetterSize(playerid, yetenekdraw[playerid][7], 0.120000, 0.800000);
	PlayerTextDrawTextSize(playerid, yetenekdraw[playerid][7], 0.000000, -1.000000);
	PlayerTextDrawAlignment(playerid, yetenekdraw[playerid][7], 2);
	PlayerTextDrawColor(playerid, yetenekdraw[playerid][7], -1);
	PlayerTextDrawSetShadow(playerid, yetenekdraw[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, yetenekdraw[playerid][7], 255);
	PlayerTextDrawFont(playerid, yetenekdraw[playerid][7], 2);
	PlayerTextDrawSetProportional(playerid, yetenekdraw[playerid][7], 1);

	yetenekdraw[playerid][8] = CreatePlayerTextDraw(playerid, 77.900009, 296.600616, "2/3");
	PlayerTextDrawLetterSize(playerid, yetenekdraw[playerid][8], 0.120000, 0.800000);
	PlayerTextDrawTextSize(playerid, yetenekdraw[playerid][8], 0.000000, -1.000000);
	PlayerTextDrawAlignment(playerid, yetenekdraw[playerid][8], 2);
	PlayerTextDrawColor(playerid, yetenekdraw[playerid][8], -1);
	PlayerTextDrawSetShadow(playerid, yetenekdraw[playerid][8], 0);
	PlayerTextDrawBackgroundColor(playerid, yetenekdraw[playerid][8], 255);
	PlayerTextDrawFont(playerid, yetenekdraw[playerid][8], 2);
	PlayerTextDrawSetProportional(playerid, yetenekdraw[playerid][8], 1);

	yetenekdraw[playerid][9] = CreatePlayerTextDraw(playerid, 160.200012, 209.440063, "1");
	PlayerTextDrawLetterSize(playerid, yetenekdraw[playerid][9], 0.200000, 1.000000);
	PlayerTextDrawAlignment(playerid, yetenekdraw[playerid][9], 2);
	PlayerTextDrawColor(playerid, yetenekdraw[playerid][9], -1);
	PlayerTextDrawSetShadow(playerid, yetenekdraw[playerid][9], 0);
	PlayerTextDrawBackgroundColor(playerid, yetenekdraw[playerid][9], 255);
	PlayerTextDrawFont(playerid, yetenekdraw[playerid][9], 2);
	PlayerTextDrawSetProportional(playerid, yetenekdraw[playerid][9], 1);

	yetenekdraw[playerid][10] = CreatePlayerTextDraw(playerid, 160.200012, 222.880004, "2");
	PlayerTextDrawLetterSize(playerid, yetenekdraw[playerid][10], 0.200000, 1.000000);
	PlayerTextDrawAlignment(playerid, yetenekdraw[playerid][10], 2);
	PlayerTextDrawColor(playerid, yetenekdraw[playerid][10], -1);
	PlayerTextDrawSetShadow(playerid, yetenekdraw[playerid][10], 0);
	PlayerTextDrawBackgroundColor(playerid, yetenekdraw[playerid][10], 255);
	PlayerTextDrawFont(playerid, yetenekdraw[playerid][10], 2);
	PlayerTextDrawSetProportional(playerid, yetenekdraw[playerid][10], 1);

	yetenekdraw[playerid][11] = CreatePlayerTextDraw(playerid, 159.700012, 235.759963, "3");
	PlayerTextDrawLetterSize(playerid, yetenekdraw[playerid][11], 0.200000, 1.000000);
	PlayerTextDrawAlignment(playerid, yetenekdraw[playerid][11], 2);
	PlayerTextDrawColor(playerid, yetenekdraw[playerid][11], -1);
	PlayerTextDrawSetShadow(playerid, yetenekdraw[playerid][11], 0);
	PlayerTextDrawBackgroundColor(playerid, yetenekdraw[playerid][11], 255);
	PlayerTextDrawFont(playerid, yetenekdraw[playerid][11], 2);
	PlayerTextDrawSetProportional(playerid, yetenekdraw[playerid][11], 1);

	yetenekdraw[playerid][12] = CreatePlayerTextDraw(playerid, 159.700012, 248.639923, "4");
	PlayerTextDrawLetterSize(playerid, yetenekdraw[playerid][12], 0.200000, 1.000000);
	PlayerTextDrawAlignment(playerid, yetenekdraw[playerid][12], 2);
	PlayerTextDrawColor(playerid, yetenekdraw[playerid][12], -1);
	PlayerTextDrawSetShadow(playerid, yetenekdraw[playerid][12], 0);
	PlayerTextDrawBackgroundColor(playerid, yetenekdraw[playerid][12], 255);
	PlayerTextDrawFont(playerid, yetenekdraw[playerid][12], 2);
	PlayerTextDrawSetProportional(playerid, yetenekdraw[playerid][12], 1);

	yetenekdraw[playerid][13] = CreatePlayerTextDraw(playerid, 159.700012, 260.299865, "5");
	PlayerTextDrawLetterSize(playerid, yetenekdraw[playerid][13], 0.200000, 1.000000);
	PlayerTextDrawAlignment(playerid, yetenekdraw[playerid][13], 2);
	PlayerTextDrawColor(playerid, yetenekdraw[playerid][13], -1);
	PlayerTextDrawSetShadow(playerid, yetenekdraw[playerid][13], 0);
	PlayerTextDrawBackgroundColor(playerid, yetenekdraw[playerid][13], 255);
	PlayerTextDrawFont(playerid, yetenekdraw[playerid][13], 2);
	PlayerTextDrawSetProportional(playerid, yetenekdraw[playerid][13], 1);

	yetenekdraw[playerid][14] = CreatePlayerTextDraw(playerid, 159.700012, 272.459838, "6");
	PlayerTextDrawLetterSize(playerid, yetenekdraw[playerid][14], 0.200000, 1.000000);
	PlayerTextDrawAlignment(playerid, yetenekdraw[playerid][14], 2);
	PlayerTextDrawColor(playerid, yetenekdraw[playerid][14], -1);
	PlayerTextDrawSetShadow(playerid, yetenekdraw[playerid][14], 0);
	PlayerTextDrawBackgroundColor(playerid, yetenekdraw[playerid][14], 255);
	PlayerTextDrawFont(playerid, yetenekdraw[playerid][14], 2);
	PlayerTextDrawSetProportional(playerid, yetenekdraw[playerid][14], 1);

	yetenekdraw[playerid][15] = CreatePlayerTextDraw(playerid, 159.700012, 284.579772, "7");
	PlayerTextDrawLetterSize(playerid, yetenekdraw[playerid][15], 0.200000, 1.000000);
	PlayerTextDrawAlignment(playerid, yetenekdraw[playerid][15], 2);
	PlayerTextDrawColor(playerid, yetenekdraw[playerid][15], -1);
	PlayerTextDrawSetShadow(playerid, yetenekdraw[playerid][15], 0);
	PlayerTextDrawBackgroundColor(playerid, yetenekdraw[playerid][15], 255);
	PlayerTextDrawFont(playerid, yetenekdraw[playerid][15], 2);
	PlayerTextDrawSetProportional(playerid, yetenekdraw[playerid][15], 1);

	yetenekdraw[playerid][16] = CreatePlayerTextDraw(playerid, 159.300018, 296.339721, "28");
	PlayerTextDrawLetterSize(playerid, yetenekdraw[playerid][16], 0.200000, 1.000000);
	PlayerTextDrawAlignment(playerid, yetenekdraw[playerid][16], 2);
	PlayerTextDrawColor(playerid, yetenekdraw[playerid][16], -1);
	PlayerTextDrawSetShadow(playerid, yetenekdraw[playerid][16], 0);
	PlayerTextDrawBackgroundColor(playerid, yetenekdraw[playerid][16], 255);
	PlayerTextDrawFont(playerid, yetenekdraw[playerid][16], 2);
	PlayerTextDrawSetProportional(playerid, yetenekdraw[playerid][16], 1);

	yetenekdraw[playerid][17] = CreatePlayerTextDraw(playerid, 108.200019, 327.239654, "7");
	PlayerTextDrawLetterSize(playerid, yetenekdraw[playerid][17], 0.200000, 1.000000);
	PlayerTextDrawAlignment(playerid, yetenekdraw[playerid][17], 2);
	PlayerTextDrawColor(playerid, yetenekdraw[playerid][17], -1);
	PlayerTextDrawSetShadow(playerid, yetenekdraw[playerid][17], 0);
	PlayerTextDrawBackgroundColor(playerid, yetenekdraw[playerid][17], 255);
	PlayerTextDrawFont(playerid, yetenekdraw[playerid][17], 2);
	PlayerTextDrawSetProportional(playerid, yetenekdraw[playerid][17], 1);

	yetenekdraw[playerid][18] = CreatePlayerTextDraw(playerid, 106.900001, 183.680130, "Flaviano_Test");
	PlayerTextDrawLetterSize(playerid, yetenekdraw[playerid][18], 0.200000, 1.000000);
	PlayerTextDrawAlignment(playerid, yetenekdraw[playerid][18], 2);
	PlayerTextDrawColor(playerid, yetenekdraw[playerid][18], -1);
	PlayerTextDrawSetShadow(playerid, yetenekdraw[playerid][18], 0);
	PlayerTextDrawBackgroundColor(playerid, yetenekdraw[playerid][18], 255);
	PlayerTextDrawFont(playerid, yetenekdraw[playerid][18], 2);
	PlayerTextDrawSetProportional(playerid, yetenekdraw[playerid][18], 1);

	yetenekdraw[playerid][19] = CreatePlayerTextDraw(playerid, 25.500000, 211.159973, "mdl-2017:arti");
	PlayerTextDrawTextSize(playerid, yetenekdraw[playerid][19], 7.000000, 9.000000);
	PlayerTextDrawAlignment(playerid, yetenekdraw[playerid][19], 1);
	PlayerTextDrawColor(playerid, yetenekdraw[playerid][19], -1);
	PlayerTextDrawSetShadow(playerid, yetenekdraw[playerid][19], 0);
	PlayerTextDrawBackgroundColor(playerid, yetenekdraw[playerid][19], 255);
	PlayerTextDrawFont(playerid, yetenekdraw[playerid][19], 4);
	PlayerTextDrawSetProportional(playerid, yetenekdraw[playerid][19], 0);
	PlayerTextDrawSetSelectable(playerid, yetenekdraw[playerid][19], true);

	yetenekdraw[playerid][20] = CreatePlayerTextDraw(playerid, 25.500000, 224.599914, "mdl-2017:arti");
	PlayerTextDrawTextSize(playerid, yetenekdraw[playerid][20], 7.000000, 9.000000);
	PlayerTextDrawAlignment(playerid, yetenekdraw[playerid][20], 1);
	PlayerTextDrawColor(playerid, yetenekdraw[playerid][20], -1);
	PlayerTextDrawSetShadow(playerid, yetenekdraw[playerid][20], 0);
	PlayerTextDrawBackgroundColor(playerid, yetenekdraw[playerid][20], 255);
	PlayerTextDrawFont(playerid, yetenekdraw[playerid][20], 4);
	PlayerTextDrawSetProportional(playerid, yetenekdraw[playerid][20], 0);
	PlayerTextDrawSetSelectable(playerid, yetenekdraw[playerid][20], true);

	yetenekdraw[playerid][21] = CreatePlayerTextDraw(playerid, 25.500000, 238.039855, "mdl-2017:arti");
	PlayerTextDrawTextSize(playerid, yetenekdraw[playerid][21], 7.000000, 9.000000);
	PlayerTextDrawAlignment(playerid, yetenekdraw[playerid][21], 1);
	PlayerTextDrawColor(playerid, yetenekdraw[playerid][21], -1);
	PlayerTextDrawSetShadow(playerid, yetenekdraw[playerid][21], 0);
	PlayerTextDrawBackgroundColor(playerid, yetenekdraw[playerid][21], 255);
	PlayerTextDrawFont(playerid, yetenekdraw[playerid][21], 4);
	PlayerTextDrawSetProportional(playerid, yetenekdraw[playerid][21], 0);
	PlayerTextDrawSetSelectable(playerid, yetenekdraw[playerid][21], true);

	yetenekdraw[playerid][22] = CreatePlayerTextDraw(playerid, 25.000000, 250.519805, "mdl-2017:arti");
	PlayerTextDrawTextSize(playerid, yetenekdraw[playerid][22], 7.000000, 9.000000);
	PlayerTextDrawAlignment(playerid, yetenekdraw[playerid][22], 1);
	PlayerTextDrawColor(playerid, yetenekdraw[playerid][22], -1);
	PlayerTextDrawSetShadow(playerid, yetenekdraw[playerid][22], 0);
	PlayerTextDrawBackgroundColor(playerid, yetenekdraw[playerid][22], 255);
	PlayerTextDrawFont(playerid, yetenekdraw[playerid][22], 4);
	PlayerTextDrawSetProportional(playerid, yetenekdraw[playerid][22], 0);
	PlayerTextDrawSetSelectable(playerid, yetenekdraw[playerid][22], true);

	yetenekdraw[playerid][23] = CreatePlayerTextDraw(playerid, 25.000000, 262.279754, "mdl-2017:arti");
	PlayerTextDrawTextSize(playerid, yetenekdraw[playerid][23], 7.000000, 9.000000);
	PlayerTextDrawAlignment(playerid, yetenekdraw[playerid][23], 1);
	PlayerTextDrawColor(playerid, yetenekdraw[playerid][23], -1);
	PlayerTextDrawSetShadow(playerid, yetenekdraw[playerid][23], 0);
	PlayerTextDrawBackgroundColor(playerid, yetenekdraw[playerid][23], 255);
	PlayerTextDrawFont(playerid, yetenekdraw[playerid][23], 4);
	PlayerTextDrawSetProportional(playerid, yetenekdraw[playerid][23], 0);
	PlayerTextDrawSetSelectable(playerid, yetenekdraw[playerid][23], true);

	yetenekdraw[playerid][24] = CreatePlayerTextDraw(playerid, 25.000000, 274.599700, "mdl-2017:arti");
	PlayerTextDrawTextSize(playerid, yetenekdraw[playerid][24], 7.000000, 9.000000);
	PlayerTextDrawAlignment(playerid, yetenekdraw[playerid][24], 1);
	PlayerTextDrawColor(playerid, yetenekdraw[playerid][24], -1);
	PlayerTextDrawSetShadow(playerid, yetenekdraw[playerid][24], 0);
	PlayerTextDrawBackgroundColor(playerid, yetenekdraw[playerid][24], 255);
	PlayerTextDrawFont(playerid, yetenekdraw[playerid][24], 4);
	PlayerTextDrawSetProportional(playerid, yetenekdraw[playerid][24], 0);
	PlayerTextDrawSetSelectable(playerid, yetenekdraw[playerid][24], true);

	yetenekdraw[playerid][25] = CreatePlayerTextDraw(playerid, 25.000000, 286.359649, "mdl-2017:arti");
	PlayerTextDrawTextSize(playerid, yetenekdraw[playerid][25], 7.000000, 9.000000);
	PlayerTextDrawAlignment(playerid, yetenekdraw[playerid][25], 1);
	PlayerTextDrawColor(playerid, yetenekdraw[playerid][25], -1);
	PlayerTextDrawSetShadow(playerid, yetenekdraw[playerid][25], 0);
	PlayerTextDrawBackgroundColor(playerid, yetenekdraw[playerid][25], 255);
	PlayerTextDrawFont(playerid, yetenekdraw[playerid][25], 4);
	PlayerTextDrawSetProportional(playerid, yetenekdraw[playerid][25], 0);
	PlayerTextDrawSetSelectable(playerid, yetenekdraw[playerid][25], true);

	yetenekdraw[playerid][26] = CreatePlayerTextDraw(playerid, 173.500000, 180.199996, "mdl-2017:carpi");
	PlayerTextDrawTextSize(playerid, yetenekdraw[playerid][26], 12.000000, 14.000000);
	PlayerTextDrawAlignment(playerid, yetenekdraw[playerid][26], 1);
	PlayerTextDrawColor(playerid, yetenekdraw[playerid][26], -1);
	PlayerTextDrawSetShadow(playerid, yetenekdraw[playerid][26], 0);
	PlayerTextDrawBackgroundColor(playerid, yetenekdraw[playerid][26], 255);
	PlayerTextDrawFont(playerid, yetenekdraw[playerid][26], 4);
	PlayerTextDrawSetProportional(playerid, yetenekdraw[playerid][26], 0);
	PlayerTextDrawSetSelectable(playerid, yetenekdraw[playerid][26], true);

	sagaltdraw[playerid][0] = CreatePlayerTextDraw(playerid, 496.500000, 399.719848, "mdl-2018:sagalt");
	PlayerTextDrawTextSize(playerid, sagaltdraw[playerid][0], 145.000000, 48.000000);
	PlayerTextDrawAlignment(playerid, sagaltdraw[playerid][0], 1);
	PlayerTextDrawColor(playerid, sagaltdraw[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, sagaltdraw[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, sagaltdraw[playerid][0], 255);
	PlayerTextDrawFont(playerid, sagaltdraw[playerid][0], 4);
	PlayerTextDrawSetProportional(playerid, sagaltdraw[playerid][0], 0);

	sagaltdraw[playerid][1] = CreatePlayerTextDraw(playerid, 630.500000, 409.219970, "Flaviano_Test");
	PlayerTextDrawLetterSize(playerid, sagaltdraw[playerid][1], 0.200000, 1.000000);
	PlayerTextDrawAlignment(playerid, sagaltdraw[playerid][1], 3);
	PlayerTextDrawColor(playerid, sagaltdraw[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, sagaltdraw[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, sagaltdraw[playerid][1], 255);
	PlayerTextDrawFont(playerid, sagaltdraw[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, sagaltdraw[playerid][1], 1);

	sagaltdraw[playerid][2] = CreatePlayerTextDraw(playerid, 637.000000, 439.860015, "22/04/1999, 14:23");
	PlayerTextDrawLetterSize(playerid, sagaltdraw[playerid][2], 0.140000, 1.000000);
	PlayerTextDrawAlignment(playerid, sagaltdraw[playerid][2], 3);
	PlayerTextDrawColor(playerid, sagaltdraw[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, sagaltdraw[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, sagaltdraw[playerid][2], 255);
	PlayerTextDrawFont(playerid, sagaltdraw[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, sagaltdraw[playerid][2], 1);

	sagaltdraw[playerid][3] = CreatePlayerTextDraw(playerid, 581.000000, 422.299926, "0");
	PlayerTextDrawLetterSize(playerid, sagaltdraw[playerid][3], 0.250000, 1.299998);
	PlayerTextDrawAlignment(playerid, sagaltdraw[playerid][3], 1);
	PlayerTextDrawColor(playerid, sagaltdraw[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, sagaltdraw[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, sagaltdraw[playerid][3], 255);
	PlayerTextDrawFont(playerid, sagaltdraw[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, sagaltdraw[playerid][3], 1);

	sagaltdraw[playerid][4] = CreatePlayerTextDraw(playerid, 618.500000, 399.740112, "6");
	PlayerTextDrawLetterSize(playerid, sagaltdraw[playerid][4], 0.200000, 1.100000);
	PlayerTextDrawAlignment(playerid, sagaltdraw[playerid][4], 1);
	PlayerTextDrawColor(playerid, sagaltdraw[playerid][4], -1);
	PlayerTextDrawSetShadow(playerid, sagaltdraw[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, sagaltdraw[playerid][4], 255);
	PlayerTextDrawFont(playerid, sagaltdraw[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, sagaltdraw[playerid][4], 1);

	siyahekran[playerid] = CreatePlayerTextDraw(playerid, 0.000000, 0.000000, "LD_SPAC:white");
	PlayerTextDrawLetterSize(playerid, siyahekran[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, siyahekran[playerid], 640.000000, 448.000000);
	PlayerTextDrawAlignment(playerid, siyahekran[playerid], 1);
	PlayerTextDrawColor(playerid, siyahekran[playerid], 255);
	PlayerTextDrawSetShadow(playerid, siyahekran[playerid], 0);
	PlayerTextDrawSetOutline(playerid, siyahekran[playerid], 0);
	PlayerTextDrawFont(playerid, siyahekran[playerid], 4);

	yaristd_0[playerid] = CreatePlayerTextDraw(playerid, 584.000000, 208.000000, "_");
	PlayerTextDrawFont(playerid, yaristd_0[playerid], 1);
	PlayerTextDrawLetterSize(playerid, yaristd_0[playerid], 0.600000, 6.800018);
	PlayerTextDrawTextSize(playerid, yaristd_0[playerid], 221.500000, 106.500000);
	PlayerTextDrawSetOutline(playerid, yaristd_0[playerid], 1);
	PlayerTextDrawSetShadow(playerid, yaristd_0[playerid], 0);
	PlayerTextDrawAlignment(playerid, yaristd_0[playerid], 2);
	PlayerTextDrawColor(playerid, yaristd_0[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, yaristd_0[playerid], 255);
	PlayerTextDrawBoxColor(playerid, yaristd_0[playerid], 135);
	PlayerTextDrawUseBox(playerid, yaristd_0[playerid], 1);
	PlayerTextDrawSetProportional(playerid, yaristd_0[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, yaristd_0[playerid], 0);

	yaristd_1[playerid] = CreatePlayerTextDraw(playerid, 546.000000, 208.000000, "1._FLAVIANO_TEST");
	PlayerTextDrawFont(playerid, yaristd_1[playerid], 2);
	PlayerTextDrawLetterSize(playerid, yaristd_1[playerid], 0.145832, 1.200000);
	PlayerTextDrawTextSize(playerid, yaristd_1[playerid], 604.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, yaristd_1[playerid], 1);
	PlayerTextDrawSetShadow(playerid, yaristd_1[playerid], 0);
	PlayerTextDrawAlignment(playerid, yaristd_1[playerid], 1);
	PlayerTextDrawColor(playerid, yaristd_1[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, yaristd_1[playerid], 255);
	PlayerTextDrawBoxColor(playerid, yaristd_1[playerid], 100);
	PlayerTextDrawUseBox(playerid, yaristd_1[playerid], 0);
	PlayerTextDrawSetProportional(playerid, yaristd_1[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, yaristd_1[playerid], 0);

	yaristd_2[playerid] = CreatePlayerTextDraw(playerid, 546.000000, 219.000000, "2._AMPER_TEST");
	PlayerTextDrawFont(playerid, yaristd_2[playerid], 2);
	PlayerTextDrawLetterSize(playerid, yaristd_2[playerid], 0.145832, 1.200000);
	PlayerTextDrawTextSize(playerid, yaristd_2[playerid], 604.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, yaristd_2[playerid], 1);
	PlayerTextDrawSetShadow(playerid, yaristd_2[playerid], 0);
	PlayerTextDrawAlignment(playerid, yaristd_2[playerid], 1);
	PlayerTextDrawColor(playerid, yaristd_2[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, yaristd_2[playerid], 255);
	PlayerTextDrawBoxColor(playerid, yaristd_2[playerid], 100);
	PlayerTextDrawUseBox(playerid, yaristd_2[playerid], 0);
	PlayerTextDrawSetProportional(playerid, yaristd_2[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, yaristd_2[playerid], 0);

	yaristd_3[playerid] = CreatePlayerTextDraw(playerid, 546.000000, 230.000000, "3._CELSIUS_TEST");
	PlayerTextDrawFont(playerid, yaristd_3[playerid], 2);
	PlayerTextDrawLetterSize(playerid, yaristd_3[playerid], 0.145832, 1.200000);
	PlayerTextDrawTextSize(playerid, yaristd_3[playerid], 604.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, yaristd_3[playerid], 1);
	PlayerTextDrawSetShadow(playerid, yaristd_3[playerid], 0);
	PlayerTextDrawAlignment(playerid, yaristd_3[playerid], 1);
	PlayerTextDrawColor(playerid, yaristd_3[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, yaristd_3[playerid], 255);
	PlayerTextDrawBoxColor(playerid, yaristd_3[playerid], 100);
	PlayerTextDrawUseBox(playerid, yaristd_3[playerid], 0);
	PlayerTextDrawSetProportional(playerid, yaristd_3[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, yaristd_3[playerid], 0);

	yaristd_5[playerid] = CreatePlayerTextDraw(playerid, 546.000000, 241.000000, "4._MANIFESTO_TEST");
	PlayerTextDrawFont(playerid, yaristd_5[playerid], 2);
	PlayerTextDrawLetterSize(playerid, yaristd_5[playerid], 0.145832, 1.200000);
	PlayerTextDrawTextSize(playerid, yaristd_5[playerid], 604.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, yaristd_5[playerid], 1);
	PlayerTextDrawSetShadow(playerid, yaristd_5[playerid], 0);
	PlayerTextDrawAlignment(playerid, yaristd_5[playerid], 1);
	PlayerTextDrawColor(playerid, yaristd_5[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, yaristd_5[playerid], 255);
	PlayerTextDrawBoxColor(playerid, yaristd_5[playerid], 100);
	PlayerTextDrawUseBox(playerid, yaristd_5[playerid], 0);
	PlayerTextDrawSetProportional(playerid, yaristd_5[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, yaristd_5[playerid], 0);

	yaristd_6[playerid] = CreatePlayerTextDraw(playerid, 546.000000, 252.000000, "5._ALLEN_TEST");
	PlayerTextDrawFont(playerid, yaristd_6[playerid], 2);
	PlayerTextDrawLetterSize(playerid, yaristd_6[playerid], 0.145832, 1.200000);
	PlayerTextDrawTextSize(playerid, yaristd_6[playerid], 604.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, yaristd_6[playerid], 1);
	PlayerTextDrawSetShadow(playerid, yaristd_6[playerid], 0);
	PlayerTextDrawAlignment(playerid, yaristd_6[playerid], 1);
	PlayerTextDrawColor(playerid, yaristd_6[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, yaristd_6[playerid], 255);
	PlayerTextDrawBoxColor(playerid, yaristd_6[playerid], 100);
	PlayerTextDrawUseBox(playerid, yaristd_6[playerid], 0);
	PlayerTextDrawSetProportional(playerid, yaristd_6[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, yaristd_6[playerid], 0);

	yaristd_7[playerid] = CreatePlayerTextDraw(playerid, 529.000000, 208.000000, "HUD:radar_race");
	PlayerTextDrawFont(playerid, yaristd_7[playerid], 4);
	PlayerTextDrawLetterSize(playerid, yaristd_7[playerid], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, yaristd_7[playerid], 14.000000, 13.500000);
	PlayerTextDrawSetOutline(playerid, yaristd_7[playerid], 1);
	PlayerTextDrawSetShadow(playerid, yaristd_7[playerid], 0);
	PlayerTextDrawAlignment(playerid, yaristd_7[playerid], 1);
	PlayerTextDrawColor(playerid, yaristd_7[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, yaristd_7[playerid], 255);
	PlayerTextDrawBoxColor(playerid, yaristd_7[playerid], 50);
	PlayerTextDrawUseBox(playerid, yaristd_7[playerid], 1);
	PlayerTextDrawSetProportional(playerid, yaristd_7[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, yaristd_7[playerid], 0);

	TD_AD_PriceValue[playerid] = CreatePlayerTextDraw(playerid, 598.000000, 302.000000, "75000");
	PlayerTextDrawAlignment(playerid, TD_AD_PriceValue[playerid], 3);
	PlayerTextDrawBackgroundColor(playerid, TD_AD_PriceValue[playerid], 255);
	PlayerTextDrawFont(playerid, TD_AD_PriceValue[playerid], 2);
	PlayerTextDrawLetterSize(playerid, TD_AD_PriceValue[playerid], 0.209996, 1.199998);
	PlayerTextDrawColor(playerid, TD_AD_PriceValue[playerid], -6749953);
	PlayerTextDrawSetOutline(playerid, TD_AD_PriceValue[playerid], 0);
	PlayerTextDrawSetProportional(playerid, TD_AD_PriceValue[playerid], 1);
	PlayerTextDrawSetShadow(playerid, TD_AD_PriceValue[playerid], 1);

	TD_AD_SellerValue[playerid] = CreatePlayerTextDraw(playerid, 598.000000, 333.000000, "Banka");
	PlayerTextDrawAlignment(playerid, TD_AD_SellerValue[playerid], 3);
	PlayerTextDrawBackgroundColor(playerid, TD_AD_SellerValue[playerid], 255);
	PlayerTextDrawFont(playerid, TD_AD_SellerValue[playerid], 2);
	PlayerTextDrawLetterSize(playerid, TD_AD_SellerValue[playerid], 0.209996, 1.199998);
	PlayerTextDrawColor(playerid, TD_AD_SellerValue[playerid], -6749953);
	PlayerTextDrawSetOutline(playerid, TD_AD_SellerValue[playerid], 0);
	PlayerTextDrawSetProportional(playerid, TD_AD_SellerValue[playerid], 1);
	PlayerTextDrawSetShadow(playerid, TD_AD_SellerValue[playerid], 1);

	TD_AD_Price[playerid] = CreatePlayerTextDraw(playerid, 458.000000, 302.000000, "Fiyat:");
	PlayerTextDrawBackgroundColor(playerid, TD_AD_Price[playerid], 255);
	PlayerTextDrawFont(playerid, TD_AD_Price[playerid], 2);
	PlayerTextDrawLetterSize(playerid, TD_AD_Price[playerid], 0.209996, 1.199998);
	PlayerTextDrawColor(playerid, TD_AD_Price[playerid], -1);
	PlayerTextDrawSetOutline(playerid, TD_AD_Price[playerid], 0);
	PlayerTextDrawSetProportional(playerid, TD_AD_Price[playerid], 1);
	PlayerTextDrawSetShadow(playerid, TD_AD_Price[playerid], 1);

	TD_Mid_Info[playerid] = CreatePlayerTextDraw(playerid, 320.000000, 250.000000, "Vice");
	PlayerTextDrawAlignment(playerid, TD_Mid_Info[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, TD_Mid_Info[playerid], 255);
	PlayerTextDrawFont(playerid, TD_Mid_Info[playerid], 2);
	PlayerTextDrawLetterSize(playerid, TD_Mid_Info[playerid], 0.360000, 2.099998);
	PlayerTextDrawColor(playerid, TD_Mid_Info[playerid], -1);
	PlayerTextDrawSetOutline(playerid, TD_Mid_Info[playerid], 0);
	PlayerTextDrawSetProportional(playerid, TD_Mid_Info[playerid], 1);
	PlayerTextDrawSetShadow(playerid, TD_Mid_Info[playerid], 1);

	TD_AD_HousenumberStreet[playerid] = CreatePlayerTextDraw(playerid, 528.000000, 272.000000, "Vice");
	PlayerTextDrawAlignment(playerid, TD_AD_HousenumberStreet[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, TD_AD_HousenumberStreet[playerid], 255);
	PlayerTextDrawFont(playerid, TD_AD_HousenumberStreet[playerid], 2);
	PlayerTextDrawLetterSize(playerid, TD_AD_HousenumberStreet[playerid], 0.209996, 1.199998);
	PlayerTextDrawColor(playerid, TD_AD_HousenumberStreet[playerid], -6749953);
	PlayerTextDrawSetOutline(playerid, TD_AD_HousenumberStreet[playerid], 0);
	PlayerTextDrawSetProportional(playerid, TD_AD_HousenumberStreet[playerid], 1);
	PlayerTextDrawSetShadow(playerid, TD_AD_HousenumberStreet[playerid], 1);

	TD_AD_Headline[playerid] = CreatePlayerTextDraw(playerid, 529.000000, 245.000000, "SATILIK MULK");
	PlayerTextDrawAlignment(playerid, TD_AD_Headline[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, TD_AD_Headline[playerid], 255);
	PlayerTextDrawFont(playerid, TD_AD_Headline[playerid], 2);
	PlayerTextDrawLetterSize(playerid, TD_AD_Headline[playerid], 0.279998, 1.500000);
	PlayerTextDrawColor(playerid, TD_AD_Headline[playerid], -6749953);
	PlayerTextDrawSetOutline(playerid, TD_AD_Headline[playerid], 0);
	PlayerTextDrawSetProportional(playerid, TD_AD_Headline[playerid], 1);
	PlayerTextDrawSetShadow(playerid, TD_AD_Headline[playerid], 1);

	TD_AD_CityZip[playerid] = CreatePlayerTextDraw(playerid, 529.000000, 282.000000, "Vice");
	PlayerTextDrawAlignment(playerid, TD_AD_CityZip[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid, TD_AD_CityZip[playerid], 255);
	PlayerTextDrawFont(playerid, TD_AD_CityZip[playerid], 2);
	PlayerTextDrawLetterSize(playerid, TD_AD_CityZip[playerid], 0.209997, 1.199998);
	PlayerTextDrawColor(playerid, TD_AD_CityZip[playerid], -6749953);
	PlayerTextDrawSetOutline(playerid, TD_AD_CityZip[playerid], 0);
	PlayerTextDrawSetProportional(playerid, TD_AD_CityZip[playerid], 1);
	PlayerTextDrawSetShadow(playerid, TD_AD_CityZip[playerid], 1);
	
	TD_AD_Taxes[playerid] = CreatePlayerTextDraw(playerid, 458.000000, 317.000000, "Vergi:");
	PlayerTextDrawBackgroundColor(playerid, TD_AD_Taxes[playerid], 255);
	PlayerTextDrawFont(playerid, TD_AD_Taxes[playerid], 2);
	PlayerTextDrawLetterSize(playerid, TD_AD_Taxes[playerid], 0.209996, 1.199998);
	PlayerTextDrawColor(playerid, TD_AD_Taxes[playerid], -1);
	PlayerTextDrawSetOutline(playerid, TD_AD_Taxes[playerid], 0);
	PlayerTextDrawSetProportional(playerid, TD_AD_Taxes[playerid], 1);
	PlayerTextDrawSetShadow(playerid, TD_AD_Taxes[playerid], 1);

	TD_AD_TaxesValue[playerid] = CreatePlayerTextDraw(playerid, 598.000000, 317.000000, "TL250/aylik");
	PlayerTextDrawAlignment(playerid, TD_AD_TaxesValue[playerid], 3);
	PlayerTextDrawBackgroundColor(playerid, TD_AD_TaxesValue[playerid], 255);
	PlayerTextDrawFont(playerid, TD_AD_TaxesValue[playerid], 2);
	PlayerTextDrawLetterSize(playerid, TD_AD_TaxesValue[playerid], 0.209996, 1.199998);
	PlayerTextDrawColor(playerid, TD_AD_TaxesValue[playerid], -6749953);
	PlayerTextDrawSetOutline(playerid, TD_AD_TaxesValue[playerid], 0);
	PlayerTextDrawSetProportional(playerid, TD_AD_TaxesValue[playerid], 1);
	PlayerTextDrawSetShadow(playerid, TD_AD_TaxesValue[playerid], 1);
	return 1;
}

stock CreateAllTextdraws()
{
	TD_AD_HeadBox = TextDrawCreate(529.000000, 239.000000, "_");
	TextDrawAlignment(TD_AD_HeadBox, 2);
	TextDrawBackgroundColor(TD_AD_HeadBox, 255);
	TextDrawFont(TD_AD_HeadBox, 1);
	TextDrawLetterSize(TD_AD_HeadBox, 0.539999, 2.999999);
	TextDrawColor(TD_AD_HeadBox, 170);
	TextDrawSetOutline(TD_AD_HeadBox, 0);
	TextDrawSetProportional(TD_AD_HeadBox, 1);
	TextDrawSetShadow(TD_AD_HeadBox, 1);
	TextDrawUseBox(TD_AD_HeadBox, 1);
	TextDrawBoxColor(TD_AD_HeadBox, 170);
	TextDrawTextSize(TD_AD_HeadBox, 55.000000, -163.000000);

	TD_AD_BoxThree = TextDrawCreate(529.000000, 270.000000, "_");
	TextDrawAlignment(TD_AD_BoxThree, 2);
	TextDrawBackgroundColor(TD_AD_BoxThree, 255);
	TextDrawFont(TD_AD_BoxThree, 1);
	TextDrawLetterSize(TD_AD_BoxThree, 1.149997, 8.699998);
	TextDrawColor(TD_AD_BoxThree, -303174145);
	TextDrawSetOutline(TD_AD_BoxThree, 1);
	TextDrawSetProportional(TD_AD_BoxThree, 0);
	TextDrawUseBox(TD_AD_BoxThree, 1);
	TextDrawBoxColor(TD_AD_BoxThree, 120);
	TextDrawTextSize(TD_AD_BoxThree, 55.000000, -163.000000);

	TD_AD_Seller = TextDrawCreate(458.000000, 333.000000, "Satici:");
	TextDrawBackgroundColor(TD_AD_Seller, 255);
	TextDrawFont(TD_AD_Seller, 2);
	TextDrawLetterSize(TD_AD_Seller, 0.209997, 1.199998);
	TextDrawColor(TD_AD_Seller, -1);
	TextDrawSetOutline(TD_AD_Seller, 0);
	TextDrawSetProportional(TD_AD_Seller, 1);
	TextDrawSetShadow(TD_AD_Seller, 1);

	tarim[0] = TextDrawCreate(100.000000, -74.000000, "Preview_Model");
	TextDrawFont(tarim[0], 5);
	TextDrawLetterSize(tarim[0], 0.600000, 2.000000);
	TextDrawTextSize(tarim[0], 437.500000, 575.000000);
	TextDrawSetOutline(tarim[0], 0);
	TextDrawSetShadow(tarim[0], 0);
	TextDrawAlignment(tarim[0], 1);
	TextDrawColor(tarim[0], -1);
	TextDrawBackgroundColor(tarim[0], 0);
	TextDrawBoxColor(tarim[0], 255);
	TextDrawUseBox(tarim[0], 0);
	TextDrawSetProportional(tarim[0], 1);
	TextDrawSetSelectable(tarim[0], 0);
	TextDrawSetPreviewModel(tarim[0], 19787);
	TextDrawSetPreviewRot(tarim[0], 0.000000, 0.000000, -180.000000, 1.000000);
	TextDrawSetPreviewVehCol(tarim[0], 1, 1);

	tarim[1] = TextDrawCreate(144.000000, 108.000000, "mdl-2098:fiyatlar");
	TextDrawFont(tarim[1], 4);
	TextDrawLetterSize(tarim[1], 0.600000, 2.000000);
	TextDrawTextSize(tarim[1], 351.000000, 222.000000);
	TextDrawSetOutline(tarim[1], 1);
	TextDrawSetShadow(tarim[1], 0);
	TextDrawAlignment(tarim[1], 1);
	TextDrawColor(tarim[1], -1);
	TextDrawBackgroundColor(tarim[1], 255);
	TextDrawBoxColor(tarim[1], 50);
	TextDrawUseBox(tarim[1], 1);
	TextDrawSetProportional(tarim[1], 1);
	TextDrawSetSelectable(tarim[1], 0);

	tarim[2] = TextDrawCreate(219.000000, 208.000000, "80$~n~88$~n~72$~n~80$~n~68$");
	TextDrawFont(tarim[2], 3);
	TextDrawLetterSize(tarim[2], 0.254166, 2.099999);
	TextDrawTextSize(tarim[2], 402.500000, 20.500000);
	TextDrawSetOutline(tarim[2], 1);
	TextDrawSetShadow(tarim[2], 0);
	TextDrawAlignment(tarim[2], 1);
	TextDrawColor(tarim[2], 852308735);
	TextDrawBackgroundColor(tarim[2], 255);
	TextDrawBoxColor(tarim[2], 0);
	TextDrawUseBox(tarim[2], 1);
	TextDrawSetProportional(tarim[2], 1);
	TextDrawSetSelectable(tarim[2], 0);

	tarim[3] = TextDrawCreate(248.000000, 208.000000, "120$~n~100$~n~128$~n~108$~n~112$");
	TextDrawFont(tarim[3], 3);
	TextDrawLetterSize(tarim[3], 0.254166, 2.099999);
	TextDrawTextSize(tarim[3], 402.500000, 20.500000);
	TextDrawSetOutline(tarim[3], 1);
	TextDrawSetShadow(tarim[3], 0);
	TextDrawAlignment(tarim[3], 1);
	TextDrawColor(tarim[3], 852308735);
	TextDrawBackgroundColor(tarim[3], 255);
	TextDrawBoxColor(tarim[3], 0);
	TextDrawUseBox(tarim[3], 1);
	TextDrawSetProportional(tarim[3], 1);
	TextDrawSetSelectable(tarim[3], 0);

	tarim[4] = TextDrawCreate(277.000000, 208.000000, "128$~n~160$~n~140$~n~172$~n~148$");
	TextDrawFont(tarim[4], 3);
	TextDrawLetterSize(tarim[4], 0.254166, 2.099999);
	TextDrawTextSize(tarim[4], 402.500000, 20.500000);
	TextDrawSetOutline(tarim[4], 1);
	TextDrawSetShadow(tarim[4], 0);
	TextDrawAlignment(tarim[4], 1);
	TextDrawColor(tarim[4], 852308735);
	TextDrawBackgroundColor(tarim[4], 255);
	TextDrawBoxColor(tarim[4], 0);
	TextDrawUseBox(tarim[4], 1);
	TextDrawSetProportional(tarim[4], 1);
	TextDrawSetSelectable(tarim[4], 0);

	tarim[5] = TextDrawCreate(307.000000, 208.000000, "140$~n~180$~n~154$~n~200$~n~188$");
	TextDrawFont(tarim[5], 3);
	TextDrawLetterSize(tarim[5], 0.254166, 2.099999);
	TextDrawTextSize(tarim[5], 402.500000, 20.500000);
	TextDrawSetOutline(tarim[5], 1);
	TextDrawSetShadow(tarim[5], 0);
	TextDrawAlignment(tarim[5], 1);
	TextDrawColor(tarim[5], 852308735);
	TextDrawBackgroundColor(tarim[5], 255);
	TextDrawBoxColor(tarim[5], 0);
	TextDrawUseBox(tarim[5], 1);
	TextDrawSetProportional(tarim[5], 1);
	TextDrawSetSelectable(tarim[5], 0);

	tarim[6] = TextDrawCreate(338.000000, 208.000000, "192$~n~200$~n~220$~n~204$~n~228$");
	TextDrawFont(tarim[6], 3);
	TextDrawLetterSize(tarim[6], 0.254166, 2.099999);
	TextDrawTextSize(tarim[6], 402.500000, 20.500000);
	TextDrawSetOutline(tarim[6], 1);
	TextDrawSetShadow(tarim[6], 0);
	TextDrawAlignment(tarim[6], 1);
	TextDrawColor(tarim[6], 852308735);
	TextDrawBackgroundColor(tarim[6], 255);
	TextDrawBoxColor(tarim[6], 0);
	TextDrawUseBox(tarim[6], 1);
	TextDrawSetProportional(tarim[6], 1);
	TextDrawSetSelectable(tarim[6], 0);

	tarim[7] = TextDrawCreate(372.000000, 208.000000, "240$~n~232$~n~252$~n~256$~n~220$");
	TextDrawFont(tarim[7], 3);
	TextDrawLetterSize(tarim[7], 0.254166, 2.099999);
	TextDrawTextSize(tarim[7], 402.500000, 20.500000);
	TextDrawSetOutline(tarim[7], 1);
	TextDrawSetShadow(tarim[7], 0);
	TextDrawAlignment(tarim[7], 1);
	TextDrawColor(tarim[7], 852308735);
	TextDrawBackgroundColor(tarim[7], 255);
	TextDrawBoxColor(tarim[7], 0);
	TextDrawUseBox(tarim[7], 1);
	TextDrawSetProportional(tarim[7], 1);
	TextDrawSetSelectable(tarim[7], 0);

	tarim[8] = TextDrawCreate(407.000000, 208.000000, "252$~n~260$~n~272$~n~280$~n~292$");
	TextDrawFont(tarim[8], 3);
	TextDrawLetterSize(tarim[8], 0.254166, 2.099999);
	TextDrawTextSize(tarim[8], 402.500000, 20.500000);
	TextDrawSetOutline(tarim[8], 1);
	TextDrawSetShadow(tarim[8], 0);
	TextDrawAlignment(tarim[8], 1);
	TextDrawColor(tarim[8], 852308735);
	TextDrawBackgroundColor(tarim[8], 255);
	TextDrawBoxColor(tarim[8], 0);
	TextDrawUseBox(tarim[8], 1);
	TextDrawSetProportional(tarim[8], 1);
	TextDrawSetSelectable(tarim[8], 0);

	ciftlik_0 = TextDrawCreate(252.000000, 32.000000, ".");
	TextDrawFont(ciftlik_0, 1);
	TextDrawLetterSize(ciftlik_0, 15.662546, -1.000000);
	TextDrawTextSize(ciftlik_0, 406.000000, 77.500000);
	TextDrawSetOutline(ciftlik_0, 1);
	TextDrawSetShadow(ciftlik_0, 0);
	TextDrawAlignment(ciftlik_0, 1);
	TextDrawColor(ciftlik_0, -1);
	TextDrawBackgroundColor(ciftlik_0, 255);
	TextDrawBoxColor(ciftlik_0, 0);
	TextDrawUseBox(ciftlik_0, 1);
	TextDrawSetProportional(ciftlik_0, 1);
	TextDrawSetSelectable(ciftlik_0, 0);

	ciftlik_1 = TextDrawCreate(354.000000, 6.000000, "Durum");
	TextDrawFont(ciftlik_1, 0);
	TextDrawLetterSize(ciftlik_1, 0.600000, 2.000000);
	TextDrawTextSize(ciftlik_1, 400.000000, 17.000000);
	TextDrawSetOutline(ciftlik_1, 1);
	TextDrawSetShadow(ciftlik_1, 0);
	TextDrawAlignment(ciftlik_1, 3);
	TextDrawColor(ciftlik_1, -1);
	TextDrawBackgroundColor(ciftlik_1, 255);
	TextDrawBoxColor(ciftlik_1, 0);
	TextDrawUseBox(ciftlik_1, 1);
	TextDrawSetProportional(ciftlik_1, 1);
	TextDrawSetSelectable(ciftlik_1, 0);

	DashCam[0] = TextDrawCreate(558.000000, 185.000000, "Kamera");
	TextDrawBackgroundColor(DashCam[0], 255);
	TextDrawFont(DashCam[0], 1);
	TextDrawLetterSize(DashCam[0], 0.360000, 2.200000);
	TextDrawColor(DashCam[0], -1);
	TextDrawSetOutline(DashCam[0], 1);
	TextDrawSetProportional(DashCam[0], 1);
	TextDrawSetShadow(DashCam[0], 1);

	DashCam[1] = TextDrawCreate(521.000000, 201.000000, ".");
	TextDrawBackgroundColor(DashCam[1], 255);
	TextDrawFont(DashCam[1], 1);
	TextDrawLetterSize(DashCam[1], 11.320007, 0.599999);
	TextDrawColor(DashCam[1], -1);
	TextDrawSetOutline(DashCam[1], 0);
	TextDrawSetProportional(DashCam[1], 1);
	TextDrawSetShadow(DashCam[1], 1);

	//Telefonv2 Textdrawlarý

	bilet_0 = TextDrawCreate(151.000000, 144.000000, "mdl-2000:bilet");
	TextDrawFont(bilet_0, 4);
	TextDrawLetterSize(bilet_0, 0.600000, 2.000000);
	TextDrawTextSize(bilet_0, 346.000000, 146.500000);
	TextDrawSetOutline(bilet_0, 1);
	TextDrawSetShadow(bilet_0, 0);
	TextDrawAlignment(bilet_0, 1);
	TextDrawColor(bilet_0, -1);
	TextDrawBackgroundColor(bilet_0, 255);
	TextDrawBoxColor(bilet_0, 50);
	TextDrawUseBox(bilet_0, 1);
	TextDrawSetProportional(bilet_0, 1);
	TextDrawSetSelectable(bilet_0, 0);

	bilet_2 = TextDrawCreate(444.000000, 142.000000, "500.000$");
	TextDrawFont(bilet_2, 2);
	TextDrawLetterSize(bilet_2, 0.225000, 1.500000);
	TextDrawTextSize(bilet_2, 400.000000, 17.000000);
	TextDrawSetOutline(bilet_2, 1);
	TextDrawSetShadow(bilet_2, 0);
	TextDrawAlignment(bilet_2, 1);
	TextDrawColor(bilet_2, 852308735);
	TextDrawBackgroundColor(bilet_2, 255);
	TextDrawBoxColor(bilet_2, 0);
	TextDrawUseBox(bilet_2, 1);
	TextDrawSetProportional(bilet_2, 1);
	TextDrawSetSelectable(bilet_2, 0);

	favtv_0 = TextDrawCreate(0.000000, -2.000000, "mdl-2012:favtv");
	TextDrawFont(favtv_0, 4);
	TextDrawLetterSize(favtv_0, 0.600000, 2.000000);
	TextDrawTextSize(favtv_0, 642.500000, 449.500000);
	TextDrawSetOutline(favtv_0, 1);
	TextDrawSetShadow(favtv_0, 0);
	TextDrawAlignment(favtv_0, 1);
	TextDrawColor(favtv_0, -1);
	TextDrawBackgroundColor(favtv_0, 255);
	TextDrawBoxColor(favtv_0, 50);
	TextDrawUseBox(favtv_0, 1);
	TextDrawSetProportional(favtv_0, 1);
	TextDrawSetSelectable(favtv_0, 0);

	telefonyenidraw[0] = TextDrawCreate(539.000000, 176.279998, "mdl-2012:telekran");
	TextDrawTextSize(telefonyenidraw[0], 95.000000, 185.000000);
	TextDrawAlignment(telefonyenidraw[0], 1);
	TextDrawColor(telefonyenidraw[0], -1);
	TextDrawSetShadow(telefonyenidraw[0], 0);
	TextDrawBackgroundColor(telefonyenidraw[0], 255);
	TextDrawFont(telefonyenidraw[0], 4);
	TextDrawSetProportional(telefonyenidraw[0], 0);

	telefonyenidraw[1] = TextDrawCreate(548.000000, 304.519836, "mdl-2012:telefonicon");
	TextDrawTextSize(telefonyenidraw[1], 17.000000, 18.000000);
	TextDrawAlignment(telefonyenidraw[1], 1);
	TextDrawColor(telefonyenidraw[1], -1);
	TextDrawSetShadow(telefonyenidraw[1], 0);
	TextDrawBackgroundColor(telefonyenidraw[1], 255);
	TextDrawFont(telefonyenidraw[1], 4);
	TextDrawSetProportional(telefonyenidraw[1], 0);
	TextDrawSetSelectable(telefonyenidraw[1], true);

	telefonyenidraw[2] = TextDrawCreate(577.000000, 305.079895, "mdl-2012:mesajlar");
	TextDrawTextSize(telefonyenidraw[2], 17.000000, 18.000000);
	TextDrawAlignment(telefonyenidraw[2], 1);
	TextDrawColor(telefonyenidraw[2], -1);
	TextDrawSetShadow(telefonyenidraw[2], 0);
	TextDrawBackgroundColor(telefonyenidraw[2], 255);
	TextDrawFont(telefonyenidraw[2], 4);
	TextDrawSetProportional(telefonyenidraw[2], 0);
	TextDrawSetSelectable(telefonyenidraw[2], true);

	telefonyenidraw[3] = TextDrawCreate(607.000000, 305.079895, "mdl-2012:muzik");
	TextDrawTextSize(telefonyenidraw[3], 17.000000, 18.000000);
	TextDrawAlignment(telefonyenidraw[3], 1);
	TextDrawColor(telefonyenidraw[3], -1);
	TextDrawSetShadow(telefonyenidraw[3], 0);
	TextDrawBackgroundColor(telefonyenidraw[3], 255);
	TextDrawFont(telefonyenidraw[3], 4);
	TextDrawSetProportional(telefonyenidraw[3], 0);
	TextDrawSetSelectable(telefonyenidraw[3], true);

	telefonyenidraw[4] = TextDrawCreate(607.000000, 269.800140, "mdl-2012:haritalar");
	TextDrawTextSize(telefonyenidraw[4], 17.000000, 18.000000);
	TextDrawAlignment(telefonyenidraw[4], 1);
	TextDrawColor(telefonyenidraw[4], -1);
	TextDrawSetShadow(telefonyenidraw[4], 0);
	TextDrawBackgroundColor(telefonyenidraw[4], 255);
	TextDrawFont(telefonyenidraw[4], 4);
	TextDrawSetProportional(telefonyenidraw[4], 0);
	TextDrawSetSelectable(telefonyenidraw[4], true);

	telefonyenidraw[5] = TextDrawCreate(576.500000, 270.360046, "mdl-2012:cuzdan");
	TextDrawTextSize(telefonyenidraw[5], 17.000000, 18.000000);
	TextDrawAlignment(telefonyenidraw[5], 1);
	TextDrawColor(telefonyenidraw[5], -1);
	TextDrawSetShadow(telefonyenidraw[5], 0);
	TextDrawBackgroundColor(telefonyenidraw[5], 255);
	TextDrawFont(telefonyenidraw[5], 4);
	TextDrawSetProportional(telefonyenidraw[5], 0);
	TextDrawSetSelectable(telefonyenidraw[5], true);

	telefonyenidraw[6] = TextDrawCreate(548.000000, 270.360046, "mdl-2012:vicenet");
	TextDrawTextSize(telefonyenidraw[6], 17.000000, 18.000000);
	TextDrawAlignment(telefonyenidraw[6], 1);
	TextDrawColor(telefonyenidraw[6], -1);
	TextDrawSetShadow(telefonyenidraw[6], 0);
	TextDrawBackgroundColor(telefonyenidraw[6], 255);
	TextDrawFont(telefonyenidraw[6], 4);
	TextDrawSetProportional(telefonyenidraw[6], 0);
	TextDrawSetSelectable(telefonyenidraw[6], true);

	telefonyenidraw[7] = TextDrawCreate(571.500000, 342.039855, "mdl-2012:saydam");
	TextDrawTextSize(telefonyenidraw[7], 17.000000, 18.000000);
	TextDrawAlignment(telefonyenidraw[7], 1);
	TextDrawColor(telefonyenidraw[7], -1);
	TextDrawSetShadow(telefonyenidraw[7], 0);
	TextDrawBackgroundColor(telefonyenidraw[7], 255);
	TextDrawFont(telefonyenidraw[7], 4);
	TextDrawSetProportional(telefonyenidraw[7], 0);
	TextDrawSetSelectable(telefonyenidraw[7], true);

	telefonyenidraw[8] = TextDrawCreate(547.000000, 325.519958, "Telefon");
	TextDrawLetterSize(telefonyenidraw[8], 0.109999, 0.699998);
	TextDrawAlignment(telefonyenidraw[8], 1);
	TextDrawColor(telefonyenidraw[8], -1);
	TextDrawSetShadow(telefonyenidraw[8], 0);
	TextDrawBackgroundColor(telefonyenidraw[8], 255);
	TextDrawFont(telefonyenidraw[8], 2);
	TextDrawSetProportional(telefonyenidraw[8], 1);

	telefonyenidraw[9] = TextDrawCreate(574.000000, 325.519927, "Mesajlar");
	TextDrawLetterSize(telefonyenidraw[9], 0.109999, 0.699998);
	TextDrawAlignment(telefonyenidraw[9], 1);
	TextDrawColor(telefonyenidraw[9], -1);
	TextDrawSetShadow(telefonyenidraw[9], 0);
	TextDrawBackgroundColor(telefonyenidraw[9], 255);
	TextDrawFont(telefonyenidraw[9], 2);
	TextDrawSetProportional(telefonyenidraw[9], 1);

	telefonyenidraw[10] = TextDrawCreate(608.500000, 325.519927, "Muzik");
	TextDrawLetterSize(telefonyenidraw[10], 0.109999, 0.699998);
	TextDrawAlignment(telefonyenidraw[10], 1);
	TextDrawColor(telefonyenidraw[10], -1);
	TextDrawSetShadow(telefonyenidraw[10], 0);
	TextDrawBackgroundColor(telefonyenidraw[10], 255);
	TextDrawFont(telefonyenidraw[10], 2);
	TextDrawSetProportional(telefonyenidraw[10], 1);

	telefonyenidraw[11] = TextDrawCreate(546.500000, 289.120117, "Vice.net");
	TextDrawLetterSize(telefonyenidraw[11], 0.109999, 0.699998);
	TextDrawAlignment(telefonyenidraw[11], 1);
	TextDrawColor(telefonyenidraw[11], -1);
	TextDrawSetShadow(telefonyenidraw[11], 0);
	TextDrawBackgroundColor(telefonyenidraw[11], 255);
	TextDrawFont(telefonyenidraw[11], 2);
	TextDrawSetProportional(telefonyenidraw[11], 1);

	telefonyenidraw[12] = TextDrawCreate(577.000000, 289.120117, "Cuzdan");
	TextDrawLetterSize(telefonyenidraw[12], 0.109999, 0.699998);
	TextDrawAlignment(telefonyenidraw[12], 1);
	TextDrawColor(telefonyenidraw[12], -1);
	TextDrawSetShadow(telefonyenidraw[12], 0);
	TextDrawBackgroundColor(telefonyenidraw[12], 255);
	TextDrawFont(telefonyenidraw[12], 2);
	TextDrawSetProportional(telefonyenidraw[12], 1);

	telefonyenidraw[13] = TextDrawCreate(602.500000, 289.120117, "Haritalar");
	TextDrawLetterSize(telefonyenidraw[13], 0.109999, 0.699998);
	TextDrawAlignment(telefonyenidraw[13], 1);
	TextDrawColor(telefonyenidraw[13], -1);
	TextDrawSetShadow(telefonyenidraw[13], 0);
	TextDrawBackgroundColor(telefonyenidraw[13], 255);
	TextDrawFont(telefonyenidraw[13], 2);
	TextDrawSetProportional(telefonyenidraw[13], 1);

	telefonyenidraw[14] = TextDrawCreate(618.500000, 182.160018, "X");
	TextDrawLetterSize(telefonyenidraw[14], 0.400000, 1.600000);
	TextDrawTextSize(telefonyenidraw[14], 11.000000, 11.000000);
	TextDrawAlignment(telefonyenidraw[14], 2);
	TextDrawColor(telefonyenidraw[14], -2147483393);
	TextDrawSetShadow(telefonyenidraw[14], 0);
	TextDrawBackgroundColor(telefonyenidraw[14], 255);
	TextDrawFont(telefonyenidraw[14], 1);
	TextDrawSetProportional(telefonyenidraw[14], 1);
	TextDrawSetSelectable(telefonyenidraw[14], true);

	telefonyenidraw[15] = TextDrawCreate(544.000000, 205.400054, "mdl-2012:bosekran");
	TextDrawTextSize(telefonyenidraw[15], 84.000000, 133.000000);
	TextDrawAlignment(telefonyenidraw[15], 1);
	TextDrawColor(telefonyenidraw[15], -1);
	TextDrawSetShadow(telefonyenidraw[15], 0);
	TextDrawBackgroundColor(telefonyenidraw[15], 255);
	TextDrawFont(telefonyenidraw[15], 4);
	TextDrawSetProportional(telefonyenidraw[15], 0);

	telefonyenidraw[16] = TextDrawCreate(548.799926, 208.199966, "mdl-2012:mini80s");
	TextDrawTextSize(telefonyenidraw[16], 23.909975, 25.000000);
	TextDrawAlignment(telefonyenidraw[16], 1);
	TextDrawColor(telefonyenidraw[16], -1);
	TextDrawSetShadow(telefonyenidraw[16], 0);
	TextDrawBackgroundColor(telefonyenidraw[16], 255);
	TextDrawFont(telefonyenidraw[16], 4);
	TextDrawSetProportional(telefonyenidraw[16], 0);
	TextDrawSetSelectable(telefonyenidraw[16], true);

	telefonyenidraw[17] = TextDrawCreate(548.500000, 231.159912, "mdl-2012:mini70s");
	TextDrawTextSize(telefonyenidraw[17], 23.000000, 25.000000);
	TextDrawAlignment(telefonyenidraw[17], 1);
	TextDrawColor(telefonyenidraw[17], -1);
	TextDrawSetShadow(telefonyenidraw[17], 0);
	TextDrawBackgroundColor(telefonyenidraw[17], 255);
	TextDrawFont(telefonyenidraw[17], 4);
	TextDrawSetProportional(telefonyenidraw[17], 0);
	TextDrawSetSelectable(telefonyenidraw[17], true);

	telefonyenidraw[18] = TextDrawCreate(548.500000, 256.359802, "mdl-2012:minibagel");
	TextDrawTextSize(telefonyenidraw[18], 23.000000, 27.000000);
	TextDrawAlignment(telefonyenidraw[18], 1);
	TextDrawColor(telefonyenidraw[18], -1);
	TextDrawSetShadow(telefonyenidraw[18], 0);
	TextDrawBackgroundColor(telefonyenidraw[18], 255);
	TextDrawFont(telefonyenidraw[18], 4);
	TextDrawSetProportional(telefonyenidraw[18], 0);
	TextDrawSetSelectable(telefonyenidraw[18], true);

	telefonyenidraw[19] = TextDrawCreate(548.500000, 283.239685, "mdl-2012:miniindiepop");
	TextDrawTextSize(telefonyenidraw[19], 23.000000, 27.000000);
	TextDrawAlignment(telefonyenidraw[19], 1);
	TextDrawColor(telefonyenidraw[19], -1);
	TextDrawSetShadow(telefonyenidraw[19], 0);
	TextDrawBackgroundColor(telefonyenidraw[19], 255);
	TextDrawFont(telefonyenidraw[19], 4);
	TextDrawSetProportional(telefonyenidraw[19], 0);
	TextDrawSetSelectable(telefonyenidraw[19], true);

	telefonyenidraw[20] = TextDrawCreate(548.000000, 307.879577, "mdl-2012:minithetrip");
	TextDrawTextSize(telefonyenidraw[20], 26.000000, 31.000000);
	TextDrawAlignment(telefonyenidraw[20], 1);
	TextDrawColor(telefonyenidraw[20], -1);
	TextDrawSetShadow(telefonyenidraw[20], 0);
	TextDrawBackgroundColor(telefonyenidraw[20], 255);
	TextDrawFont(telefonyenidraw[20], 4);
	TextDrawSetProportional(telefonyenidraw[20], 0);
	TextDrawSetSelectable(telefonyenidraw[20], true);

	telefonyenidraw[21] = TextDrawCreate(619.000000, 217.439971, "Underground 80s");
	TextDrawLetterSize(telefonyenidraw[21], 0.170000, 1.000000);
	TextDrawAlignment(telefonyenidraw[21], 3);
	TextDrawColor(telefonyenidraw[21], -2139062017);
	TextDrawSetShadow(telefonyenidraw[21], 0);
	TextDrawBackgroundColor(telefonyenidraw[21], 255);
	TextDrawFont(telefonyenidraw[21], 1);
	TextDrawSetProportional(telefonyenidraw[21], 1);

	telefonyenidraw[22] = TextDrawCreate(612.000000, 240.399856, "Left Coast 70s");
	TextDrawLetterSize(telefonyenidraw[22], 0.170000, 1.000000);
	TextDrawAlignment(telefonyenidraw[22], 3);
	TextDrawColor(telefonyenidraw[22], -2139062017);
	TextDrawSetShadow(telefonyenidraw[22], 0);
	TextDrawBackgroundColor(telefonyenidraw[22], 255);
	TextDrawFont(telefonyenidraw[22], 1);
	TextDrawSetProportional(telefonyenidraw[22], 1);

	telefonyenidraw[23] = TextDrawCreate(604.000000, 267.279785, "Bagel Radio");
	TextDrawLetterSize(telefonyenidraw[23], 0.170000, 1.000000);
	TextDrawAlignment(telefonyenidraw[23], 3);
	TextDrawColor(telefonyenidraw[23], -2139062017);
	TextDrawSetShadow(telefonyenidraw[23], 0);
	TextDrawBackgroundColor(telefonyenidraw[23], 255);
	TextDrawFont(telefonyenidraw[23], 1);
	TextDrawSetProportional(telefonyenidraw[23], 1);

	telefonyenidraw[24] = TextDrawCreate(615.500000, 292.479736, "Indie Pop Rocks");
	TextDrawLetterSize(telefonyenidraw[24], 0.170000, 1.000000);
	TextDrawAlignment(telefonyenidraw[24], 3);
	TextDrawColor(telefonyenidraw[24], -2139062017);
	TextDrawSetShadow(telefonyenidraw[24], 0);
	TextDrawBackgroundColor(telefonyenidraw[24], 255);
	TextDrawFont(telefonyenidraw[24], 1);
	TextDrawSetProportional(telefonyenidraw[24], 1);

	telefonyenidraw[25] = TextDrawCreate(594.500000, 317.679626, "The Trip");
	TextDrawLetterSize(telefonyenidraw[25], 0.170000, 1.000000);
	TextDrawAlignment(telefonyenidraw[25], 3);
	TextDrawColor(telefonyenidraw[25], -2139062017);
	TextDrawSetShadow(telefonyenidraw[25], 0);
	TextDrawBackgroundColor(telefonyenidraw[25], 255);
	TextDrawFont(telefonyenidraw[25], 1);
	TextDrawSetProportional(telefonyenidraw[25], 1);

	telefonyenidraw[26] = TextDrawCreate(544.000000, 205.960037, "mdl-2012:muzikekrani");
	TextDrawTextSize(telefonyenidraw[26], 85.000000, 131.000000);
	TextDrawAlignment(telefonyenidraw[26], 1);
	TextDrawColor(telefonyenidraw[26], -1);
	TextDrawSetShadow(telefonyenidraw[26], 0);
	TextDrawBackgroundColor(telefonyenidraw[26], 255);
	TextDrawFont(telefonyenidraw[26], 4);
	TextDrawSetProportional(telefonyenidraw[26], 0);

	telefonyenidraw[27] = TextDrawCreate(563.000000, 211.559982, "mdl-2012:underground80s");
	TextDrawTextSize(telefonyenidraw[27], 43.000000, 45.000000);
	TextDrawAlignment(telefonyenidraw[27], 1);
	TextDrawColor(telefonyenidraw[27], -1);
	TextDrawSetShadow(telefonyenidraw[27], 0);
	TextDrawBackgroundColor(telefonyenidraw[27], 255);
	TextDrawFont(telefonyenidraw[27], 4);
	TextDrawSetProportional(telefonyenidraw[27], 0);

	telefonyenidraw[28] = TextDrawCreate(582.500000, 290.519958, "mdl-2012:pause");
	TextDrawTextSize(telefonyenidraw[28], 8.000000, 9.000000);
	TextDrawAlignment(telefonyenidraw[28], 1);
	TextDrawColor(telefonyenidraw[28], -1);
	TextDrawSetShadow(telefonyenidraw[28], 0);
	TextDrawBackgroundColor(telefonyenidraw[28], 255);
	TextDrawFont(telefonyenidraw[28], 4);
	TextDrawSetProportional(telefonyenidraw[28], 0);
	TextDrawSetSelectable(telefonyenidraw[28], true);

	telefonyenidraw[29] = TextDrawCreate(550.000000, 183.000045, "mdl-2012:geritusu");
	TextDrawTextSize(telefonyenidraw[29], 12.000000, 12.000000);
	TextDrawAlignment(telefonyenidraw[29], 1);
	TextDrawColor(telefonyenidraw[29], -1);
	TextDrawSetShadow(telefonyenidraw[29], 0);
	TextDrawBackgroundColor(telefonyenidraw[29], 255);
	TextDrawFont(telefonyenidraw[29], 4);
	TextDrawSetProportional(telefonyenidraw[29], 0);
	TextDrawSetSelectable(telefonyenidraw[29], true);

	telefonyenidraw[30] = TextDrawCreate(609.000000, 270.079986, "Underground 80s");
	TextDrawLetterSize(telefonyenidraw[30], 0.170000, 1.100000);
	TextDrawAlignment(telefonyenidraw[30], 3);
	TextDrawColor(telefonyenidraw[30], -2147450625);
	TextDrawSetShadow(telefonyenidraw[30], 0);
	TextDrawBackgroundColor(telefonyenidraw[30], 255);
	TextDrawFont(telefonyenidraw[30], 1);
	TextDrawSetProportional(telefonyenidraw[30], 1);

	telefonyenidraw[31] = TextDrawCreate(563.000000, 211.559982, "mdl-2012:mini70s");
	TextDrawTextSize(telefonyenidraw[31], 43.000000, 45.000000);
	TextDrawAlignment(telefonyenidraw[31], 1);
	TextDrawColor(telefonyenidraw[31], -1);
	TextDrawSetShadow(telefonyenidraw[31], 0);
	TextDrawBackgroundColor(telefonyenidraw[31], 255);
	TextDrawFont(telefonyenidraw[31], 4);
	TextDrawSetProportional(telefonyenidraw[31], 0);

	telefonyenidraw[32] = TextDrawCreate(563.000000, 211.559982, "mdl-2012:minibagel");
	TextDrawTextSize(telefonyenidraw[32], 43.000000, 45.000000);
	TextDrawAlignment(telefonyenidraw[32], 1);
	TextDrawColor(telefonyenidraw[32], -1);
	TextDrawSetShadow(telefonyenidraw[32], 0);
	TextDrawBackgroundColor(telefonyenidraw[32], 255);
	TextDrawFont(telefonyenidraw[32], 4);
	TextDrawSetProportional(telefonyenidraw[32], 0);

	telefonyenidraw[33] = TextDrawCreate(563.000000, 211.559982, "mdl-2012:miniindiepop");
	TextDrawTextSize(telefonyenidraw[33], 43.000000, 45.000000);
	TextDrawAlignment(telefonyenidraw[33], 1);
	TextDrawColor(telefonyenidraw[33], -1);
	TextDrawSetShadow(telefonyenidraw[33], 0);
	TextDrawBackgroundColor(telefonyenidraw[33], 255);
	TextDrawFont(telefonyenidraw[33], 4);
	TextDrawSetProportional(telefonyenidraw[33], 0);

	telefonyenidraw[34] = TextDrawCreate(563.000000, 211.559982, "mdl-2012:minithetrip");
	TextDrawTextSize(telefonyenidraw[34], 43.000000, 45.000000);
	TextDrawAlignment(telefonyenidraw[34], 1);
	TextDrawColor(telefonyenidraw[34], -1);
	TextDrawSetShadow(telefonyenidraw[34], 0);
	TextDrawBackgroundColor(telefonyenidraw[34], 255);
	TextDrawFont(telefonyenidraw[34], 4);
	TextDrawSetProportional(telefonyenidraw[34], 0);

	telefonyenidraw[35] = TextDrawCreate(609.000000, 270.079986, "Left Coast 70s");
	TextDrawLetterSize(telefonyenidraw[35], 0.170000, 1.100000);
	TextDrawAlignment(telefonyenidraw[35], 3);
	TextDrawColor(telefonyenidraw[35], -2147450625);
	TextDrawSetShadow(telefonyenidraw[35], 0);
	TextDrawBackgroundColor(telefonyenidraw[35], 255);
	TextDrawFont(telefonyenidraw[35], 1);
	TextDrawSetProportional(telefonyenidraw[35], 1);

	telefonyenidraw[36] = TextDrawCreate(609.000000, 270.079986, "Bagel Radio");
	TextDrawLetterSize(telefonyenidraw[36], 0.170000, 1.100000);
	TextDrawAlignment(telefonyenidraw[36], 3);
	TextDrawColor(telefonyenidraw[36], -2147450625);
	TextDrawSetShadow(telefonyenidraw[36], 0);
	TextDrawBackgroundColor(telefonyenidraw[36], 255);
	TextDrawFont(telefonyenidraw[36], 1);
	TextDrawSetProportional(telefonyenidraw[36], 1);

	telefonyenidraw[37] = TextDrawCreate(609.000000, 270.079986, "Indie Pop");
	TextDrawLetterSize(telefonyenidraw[37], 0.170000, 1.100000);
	TextDrawAlignment(telefonyenidraw[37], 3);
	TextDrawColor(telefonyenidraw[37], -2147450625);
	TextDrawSetShadow(telefonyenidraw[37], 0);
	TextDrawBackgroundColor(telefonyenidraw[37], 255);
	TextDrawFont(telefonyenidraw[37], 1);
	TextDrawSetProportional(telefonyenidraw[37], 1);

	telefonyenidraw[38] = TextDrawCreate(609.000000, 270.079986, "The Trip");
	TextDrawLetterSize(telefonyenidraw[38], 0.170000, 1.100000);
	TextDrawAlignment(telefonyenidraw[38], 3);
	TextDrawColor(telefonyenidraw[38], -2147450625);
	TextDrawSetShadow(telefonyenidraw[38], 0);
	TextDrawBackgroundColor(telefonyenidraw[38], 255);
	TextDrawFont(telefonyenidraw[38], 1);
	TextDrawSetProportional(telefonyenidraw[38], 1);

	kasstat_0 = TextDrawCreate(630.000000, 91.000000, "[   ]");
	TextDrawFont(kasstat_0, 1);
	TextDrawLetterSize(kasstat_0, 1.225000, 6.050000);
	TextDrawTextSize(kasstat_0, 395.000000, 2.000000);
	TextDrawSetOutline(kasstat_0, 1);
	TextDrawSetShadow(kasstat_0, 0);
	TextDrawAlignment(kasstat_0, 3);
	TextDrawColor(kasstat_0, 1433087999);
	TextDrawBackgroundColor(kasstat_0, 255);
	TextDrawBoxColor(kasstat_0, 0);
	TextDrawUseBox(kasstat_0, 1);
	TextDrawSetProportional(kasstat_0, 1);
	TextDrawSetSelectable(kasstat_0, 0);

	kasstat_1 = TextDrawCreate(555.000000, 110.000000, "LEVEL:");
	TextDrawFont(kasstat_1, 1);
	TextDrawLetterSize(kasstat_1, 0.308333, 1.550000);
	TextDrawTextSize(kasstat_1, 395.000000, 2.000000);
	TextDrawSetOutline(kasstat_1, 1);
	TextDrawSetShadow(kasstat_1, 0);
	TextDrawAlignment(kasstat_1, 3);
	TextDrawColor(kasstat_1, -1);
	TextDrawBackgroundColor(kasstat_1, 255);
	TextDrawBoxColor(kasstat_1, 0);
	TextDrawUseBox(kasstat_1, 1);
	TextDrawSetProportional(kasstat_1, 1);
	TextDrawSetSelectable(kasstat_1, 0);

	kasstat_2 = TextDrawCreate(556.000000, 124.000000, "PUAN:");
	TextDrawFont(kasstat_2, 1);
	TextDrawLetterSize(kasstat_2, 0.308333, 1.550000);
	TextDrawTextSize(kasstat_2, 395.000000, 2.000000);
	TextDrawSetOutline(kasstat_2, 1);
	TextDrawSetShadow(kasstat_2, 0);
	TextDrawAlignment(kasstat_2, 3);
	TextDrawColor(kasstat_2, -1);
	TextDrawBackgroundColor(kasstat_2, 255);
	TextDrawBoxColor(kasstat_2, 0);
	TextDrawUseBox(kasstat_2, 1);
	TextDrawSetProportional(kasstat_2, 1);
	TextDrawSetSelectable(kasstat_2, 0);

	kasstat_5 = TextDrawCreate(583.000000, 96.000000, "---------");
	TextDrawFont(kasstat_5, 1);
	TextDrawLetterSize(kasstat_5, 0.449999, 1.500000);
	TextDrawTextSize(kasstat_5, 395.000000, 2.000000);
	TextDrawSetOutline(kasstat_5, 1);
	TextDrawSetShadow(kasstat_5, 0);
	TextDrawAlignment(kasstat_5, 3);
	TextDrawColor(kasstat_5, 1433087999);
	TextDrawBackgroundColor(kasstat_5, 255);
	TextDrawBoxColor(kasstat_5, 0);
	TextDrawUseBox(kasstat_5, 1);
	TextDrawSetProportional(kasstat_5, 1);
	TextDrawSetSelectable(kasstat_5, 0);

	kasstat_6 = TextDrawCreate(583.000000, 135.000000, "---------");
	TextDrawFont(kasstat_6, 1);
	TextDrawLetterSize(kasstat_6, 0.449999, 1.500000);
	TextDrawTextSize(kasstat_6, 395.000000, 2.000000);
	TextDrawSetOutline(kasstat_6, 1);
	TextDrawSetShadow(kasstat_6, 0);
	TextDrawAlignment(kasstat_6, 3);
	TextDrawColor(kasstat_6, 1433087999);
	TextDrawBackgroundColor(kasstat_6, 255);
	TextDrawBoxColor(kasstat_6, 0);
	TextDrawUseBox(kasstat_6, 1);
	TextDrawSetProportional(kasstat_6, 1);
	TextDrawSetSelectable(kasstat_6, 0);

	kilit_0 = TextDrawCreate(511.000000, 323.000000, "mdl-2011:pin");
	TextDrawFont(kilit_0, 4);
	TextDrawLetterSize(kilit_0, 0.600000, 2.000000);
	TextDrawTextSize(kilit_0, 112.500000, 119.000000);
	TextDrawSetOutline(kilit_0, 1);
	TextDrawSetShadow(kilit_0, 0);
	TextDrawAlignment(kilit_0, 1);
	TextDrawColor(kilit_0, -1);
	TextDrawBackgroundColor(kilit_0, 255);
	TextDrawBoxColor(kilit_0, 50);
	TextDrawUseBox(kilit_0, 1);
	TextDrawSetProportional(kilit_0, 1);
	TextDrawSetSelectable(kilit_0, 0);

	gym_0 = TextDrawCreate(319.000000, 311.000000, "_");
	TextDrawFont(gym_0, 1);
	TextDrawLetterSize(gym_0, 0.600000, 1.800003);
	TextDrawTextSize(gym_0, 293.000000, 641.000000);
	TextDrawSetOutline(gym_0, 1);
	TextDrawSetShadow(gym_0, 0);
	TextDrawAlignment(gym_0, 2);
	TextDrawColor(gym_0, -1);
	TextDrawBackgroundColor(gym_0, 255);
	TextDrawBoxColor(gym_0, 215);
	TextDrawUseBox(gym_0, 1);
	TextDrawSetProportional(gym_0, 1);
	TextDrawSetSelectable(gym_0, 0);

	gym_1 = TextDrawCreate(301.000000, 302.000000, "ld_beat:cring");
	TextDrawFont(gym_1, 4);
	TextDrawLetterSize(gym_1, 0.600000, 2.000000);
	TextDrawTextSize(gym_1, 34.000000, 35.500000);
	TextDrawSetOutline(gym_1, 1);
	TextDrawSetShadow(gym_1, 0);
	TextDrawAlignment(gym_1, 1);
	TextDrawColor(gym_1, -1);
	TextDrawBackgroundColor(gym_1, 255);
	TextDrawBoxColor(gym_1, 50);
	TextDrawUseBox(gym_1, 1);
	TextDrawSetProportional(gym_1, 1);
	TextDrawSetSelectable(gym_1, 0);


    //Yat Textdrawlarý
	textdraw_0 = TextDrawCreate(315.000000, 100.000000, "_");
	TextDrawFont(textdraw_0, 1);
	TextDrawLetterSize(textdraw_0, 1.254166, 30.850002);
	TextDrawTextSize(textdraw_0, 298.500000, 360.000000);
	TextDrawSetOutline(textdraw_0, 1);
	TextDrawSetShadow(textdraw_0, 0);
	TextDrawAlignment(textdraw_0, 2);
	TextDrawColor(textdraw_0, -1);
	TextDrawBackgroundColor(textdraw_0, 255);
	TextDrawBoxColor(textdraw_0, 215);
	TextDrawUseBox(textdraw_0, 1);
	TextDrawSetProportional(textdraw_0, 1);
	TextDrawSetSelectable(textdraw_0, 0);

	textdraw_1 = TextDrawCreate(264.000000, 353.000000, "SATIN AL");
	TextDrawFont(textdraw_1, 2);
	TextDrawLetterSize(textdraw_1, 0.258332, 1.750000);
	TextDrawTextSize(textdraw_1, 16.500000, 90.500000);
	TextDrawSetOutline(textdraw_1, 1);
	TextDrawSetShadow(textdraw_1, 0);
	TextDrawAlignment(textdraw_1, 2);
	TextDrawColor(textdraw_1, -1);
	TextDrawBackgroundColor(textdraw_1, 255);
	TextDrawBoxColor(textdraw_1, -2686776);
	TextDrawUseBox(textdraw_1, 1);
	TextDrawSetProportional(textdraw_1, 1);
	TextDrawSetSelectable(textdraw_1, 1);

	textdraw_2 = TextDrawCreate(365.000000, 353.000000, "IPTAL");
	TextDrawFont(textdraw_2, 2);
	TextDrawLetterSize(textdraw_2, 0.258332, 1.750000);
	TextDrawTextSize(textdraw_2, 16.500000, 90.500000);
	TextDrawSetOutline(textdraw_2, 1);
	TextDrawSetShadow(textdraw_2, 0);
	TextDrawAlignment(textdraw_2, 2);
	TextDrawColor(textdraw_2, -1);
	TextDrawBackgroundColor(textdraw_2, 255);
	TextDrawBoxColor(textdraw_2, -2686776);
	TextDrawUseBox(textdraw_2, 1);
	TextDrawSetProportional(textdraw_2, 1);
	TextDrawSetSelectable(textdraw_2, 1);

	textdraw_3 = TextDrawCreate(155.000000, 156.000000, "Preview_Model");
	TextDrawFont(textdraw_3, 5);
	TextDrawLetterSize(textdraw_3, 0.600000, 2.000000);
	TextDrawTextSize(textdraw_3, 112.500000, 150.000000);
	TextDrawSetOutline(textdraw_3, 0);
	TextDrawSetShadow(textdraw_3, 0);
	TextDrawAlignment(textdraw_3, 1);
	TextDrawColor(textdraw_3, -1);
	TextDrawBackgroundColor(textdraw_3, -2686721);
	TextDrawBoxColor(textdraw_3, -2686721);
	TextDrawUseBox(textdraw_3, 0);
	TextDrawSetProportional(textdraw_3, 1);
	TextDrawSetSelectable(textdraw_3, 0);
	TextDrawSetPreviewModel(textdraw_3, -2005);
	TextDrawSetPreviewRot(textdraw_3, -10.000000, 0.000000, -20.000000, 1.000000);
	TextDrawSetPreviewVehCol(textdraw_3, 1, 1);

	textdraw_4 = TextDrawCreate(458.000000, 101.000000, "Cortez's Yacht Club");
	TextDrawFont(textdraw_4, 2);
	TextDrawLetterSize(textdraw_4, 0.600000, 2.000000);
	TextDrawTextSize(textdraw_4, 400.000000, 17.000000);
	TextDrawSetOutline(textdraw_4, 1);
	TextDrawSetShadow(textdraw_4, 0);
	TextDrawAlignment(textdraw_4, 3);
	TextDrawColor(textdraw_4, -1);
	TextDrawBackgroundColor(textdraw_4, 255);
	TextDrawBoxColor(textdraw_4, 0);
	TextDrawUseBox(textdraw_4, 1);
	TextDrawSetProportional(textdraw_4, 1);
	TextDrawSetSelectable(textdraw_4, 0);

	textdraw_5 = TextDrawCreate(469.000000, 158.000000, "Yat Firmasi: SeaWay");
	TextDrawFont(textdraw_5, 2);
	TextDrawLetterSize(textdraw_5, 0.387500, 1.650000);
	TextDrawTextSize(textdraw_5, 400.000000, 17.000000);
	TextDrawSetOutline(textdraw_5, 1);
	TextDrawSetShadow(textdraw_5, 0);
	TextDrawAlignment(textdraw_5, 3);
	TextDrawColor(textdraw_5, -1);
	TextDrawBackgroundColor(textdraw_5, 255);
	TextDrawBoxColor(textdraw_5, 0);
	TextDrawUseBox(textdraw_5, 1);
	TextDrawSetProportional(textdraw_5, 1);
	TextDrawSetSelectable(textdraw_5, 0);

	textdraw_6 = TextDrawCreate(465.000000, 183.000000, "Liman: Vice Port");
	TextDrawFont(textdraw_6, 2);
	TextDrawLetterSize(textdraw_6, 0.387500, 1.650000);
	TextDrawTextSize(textdraw_6, 400.000000, 17.000000);
	TextDrawSetOutline(textdraw_6, 1);
	TextDrawSetShadow(textdraw_6, 0);
	TextDrawAlignment(textdraw_6, 3);
	TextDrawColor(textdraw_6, -1);
	TextDrawBackgroundColor(textdraw_6, 255);
	TextDrawBoxColor(textdraw_6, 0);
	TextDrawUseBox(textdraw_6, 1);
	TextDrawSetProportional(textdraw_6, 1);
	TextDrawSetSelectable(textdraw_6, 0);

	textdraw_7 = TextDrawCreate(490.000000, 207.000000, "Ses Sistemi: Bulunuyor");
	TextDrawFont(textdraw_7, 2);
	TextDrawLetterSize(textdraw_7, 0.387500, 1.650000);
	TextDrawTextSize(textdraw_7, 400.000000, 17.000000);
	TextDrawSetOutline(textdraw_7, 1);
	TextDrawSetShadow(textdraw_7, 0);
	TextDrawAlignment(textdraw_7, 3);
	TextDrawColor(textdraw_7, -1);
	TextDrawBackgroundColor(textdraw_7, 255);
	TextDrawBoxColor(textdraw_7, 0);
	TextDrawUseBox(textdraw_7, 1);
	TextDrawSetProportional(textdraw_7, 1);
	TextDrawSetSelectable(textdraw_7, 0);

	textdraw_8 = TextDrawCreate(490.000000, 230.000000, "Para Kasasi: Bulunuyor");
	TextDrawFont(textdraw_8, 2);
	TextDrawLetterSize(textdraw_8, 0.387500, 1.650000);
	TextDrawTextSize(textdraw_8, 400.000000, 17.000000);
	TextDrawSetOutline(textdraw_8, 1);
	TextDrawSetShadow(textdraw_8, 0);
	TextDrawAlignment(textdraw_8, 3);
	TextDrawColor(textdraw_8, -1);
	TextDrawBackgroundColor(textdraw_8, 255);
	TextDrawBoxColor(textdraw_8, 0);
	TextDrawUseBox(textdraw_8, 1);
	TextDrawSetProportional(textdraw_8, 1);
	TextDrawSetSelectable(textdraw_8, 0);

	textdraw_9 = TextDrawCreate(491.000000, 253.000000, "ESYA DOLABI: BULUNUYOR");
	TextDrawFont(textdraw_9, 2);
	TextDrawLetterSize(textdraw_9, 0.387500, 1.650000);
	TextDrawTextSize(textdraw_9, 400.000000, 17.000000);
	TextDrawSetOutline(textdraw_9, 1);
	TextDrawSetShadow(textdraw_9, 0);
	TextDrawAlignment(textdraw_9, 3);
	TextDrawColor(textdraw_9, -1);
	TextDrawBackgroundColor(textdraw_9, 255);
	TextDrawBoxColor(textdraw_9, 0);
	TextDrawUseBox(textdraw_9, 1);
	TextDrawSetProportional(textdraw_9, 1);
	TextDrawSetSelectable(textdraw_9, 0);

	textdraw_10 = TextDrawCreate(490.000000, 286.000000, "1 MILYON $");
	TextDrawFont(textdraw_10, 2);
	TextDrawLetterSize(textdraw_10, 0.387500, 1.650000);
	TextDrawTextSize(textdraw_10, 400.000000, 17.000000);
	TextDrawSetOutline(textdraw_10, 1);
	TextDrawSetShadow(textdraw_10, 0);
	TextDrawAlignment(textdraw_10, 3);
	TextDrawColor(textdraw_10, -2686721);
	TextDrawBackgroundColor(textdraw_10, 255);
	TextDrawBoxColor(textdraw_10, 0);
	TextDrawUseBox(textdraw_10, 1);
	TextDrawSetProportional(textdraw_10, 1);
	TextDrawSetSelectable(textdraw_10, 0);

	textdraw_11 = TextDrawCreate(405.000000, 286.000000, "HER SEY DAHIL:");
	TextDrawFont(textdraw_11, 2);
	TextDrawLetterSize(textdraw_11, 0.387500, 1.650000);
	TextDrawTextSize(textdraw_11, 400.000000, 17.000000);
	TextDrawSetOutline(textdraw_11, 1);
	TextDrawSetShadow(textdraw_11, 0);
	TextDrawAlignment(textdraw_11, 3);
	TextDrawColor(textdraw_11, -1);
	TextDrawBackgroundColor(textdraw_11, 255);
	TextDrawBoxColor(textdraw_11, 0);
	TextDrawUseBox(textdraw_11, 1);
	TextDrawSetProportional(textdraw_11, 1);
	TextDrawSetSelectable(textdraw_11, 0);
	return 1;
}

stock CreatePickupsAndLabels()
{
		firmacuvalpickup = CreateDynamicPickup(2060, 23, 2784.0200,-2417.5359,13.6346);
        tahtapickup = CreateDynamicPickup(1239, 2, 2375.0366,-1913.3895,13.5132);
		CreateDynamicPickup(1254, 23, -376.9299,2242.3718,42.6185); //drugwarehouse
        new tmpobjid;
        tmpobjid = CreateDynamicObject(19482, 2372.6133,-1911.3820,13.5132, 0.000000, 0.000000, 1.099970, -1, -1, -1, 300.00, 300.00);
        SetDynamicObjectMaterialText(tmpobjid, 0, "ARANIYOR!", 130, "Ariel", 25, 0, 0xFFFFFFFF, 0x00000000, 0);
        tmpobjid = CreateDynamicObject(3077, 2372.6133,-1913.3820,11.5132, 0.000000, 0.000000, -88.699935, -1, -1, -1, 300.00, 300.00);
        CreateDynamic3DTextLabel("[PD Asansör]\n{FFFFFF}Asansörü kullanmak için /asansor komutunu kullan.", RENK_SERVER, 1580.3241,-1670.0148,15.7561, 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, -1, -1);

      	CreateDynamicPickup(1239, 23, -302.7927,1048.5364,1028.0485);
        CreateDynamic3DTextLabel("[/tedaviol]", RENK_SERVER, -302.7927,1048.5364,1028.0485, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);

      	CreateDynamicPickup(1239, 23, 2189.7007,-1255.6732,1529.1060);
        CreateDynamic3DTextLabel("[/traphouse]", RENK_SERVER, 2189.7007,-1255.6732,1529.1060, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);

		CreateDynamicPickup(1239, 23, 1607.0167,-1619.2963,13.9421);
        CreateDynamic3DTextLabel("[/pdaraccek]", RENK_SERVER, 1607.0167,-1619.2963,13.9421, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);
      	CreateDynamicPickup(1239, 23, 1128.1865,-1451.9983,4.2885);
        CreateDynamic3DTextLabel("[/vmgaraj]\n{FFFFFF}Vice Mall otoparkýna girmek için /vmgaraj kullan.", RENK_SERVER, 1128.1865,-1451.9983,4.2885, 6.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);
      	CreateDynamicPickup(1239, 23, 198.6781,-2058.0906,1.4524);
        CreateDynamic3DTextLabel("[/teknesistemesat]\n{FFFFFF}Tekneyi sisteme satmak için '/teknesistemesat' komutunu kullanýn.", RENK_SERVER, 198.6781,-2058.0906,1.4524, 6.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);
      	CreateDynamicPickup(1239, 23, 1921.3539,-2245.3557,13.5469);
        CreateDynamic3DTextLabel("[/ucaksistemesat]\n{FFFFFF}Uçaðý sisteme satmak için '/ucaksistemesat' komutunu kullanýn.", RENK_SERVER, 1921.3539,-2245.3557,13.5469, 6.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);
      	CreateDynamicPickup(1239, 23, 1893.2236,-2244.0984,13.5469);
        CreateDynamic3DTextLabel("[/ucakal]\n{FFFFFF}Uçak satýn almak için '/ucakal' komutunu kullanýn.", RENK_SERVER, 1893.2236,-2244.0984,13.5469, 6.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);
        CreateDynamicPickup(1581, 23, 1957.2371,-2183.6677,13.5469);
        CreateDynamic3DTextLabel("[/ucuslisansi]\n{FFFFFF}Uçuþ lisansý almak için\n[Sürüþ Yeteneði: 6]\n[$60.000]\ngerekmektedir.", RENK_SERVER, 1957.2371,-2183.6677,13.5469, 4.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);
        CreateDynamicPickup(1239, 23, 822.3584,4.0746,1004.1797);
        CreateDynamic3DTextLabel("[Ganyan Bayiliði]\n{FFFFFF}At yarýþýna bahis oynamak için /atyarisibahis komutunu kullan.\nAt yarýþýný izlemek için /atyarisiizle kullan.", RENK_SERVER, 822.3584,4.0746,1004.1797, 4.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);
        CreateDynamicPickup(1275, 23, 393.4989,-1744.4819,6.5804);
        CreateDynamic3DTextLabel("[Soyunma Kabini]\n{FFFFFF}Kýyafet poþetindekileri burada giyinebilirsin.(/envanter)", RENK_SERVER, 393.4989,-1744.4819,6.5804, 4.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);
        CreateDynamicPickup(1275, 23, 669.1903,-1867.2380,5.4537);
        CreateDynamic3DTextLabel("[Soyunma Kabini]\n{FFFFFF}Kýyafet poþetindekileri burada giyinebilirsin.(/envanter)", RENK_SERVER, 669.1903,-1867.2380,5.4537, 4.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);
        CreateDynamicPickup(1239, 23, 2278.0999,-55.0738,1070.2646);
        CreateDynamic3DTextLabel("[BANKA]\n{FFFFFF}[/vergiode]\n[/cezaode]\n[/banka]", RENK_SERVER, 2278.0999,-55.0738,1070.2646, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);
        CreateDynamicPickup(1239, 23, 130.8684,-1945.5778,6.0826);
        CreateDynamic3DTextLabel("Balýkçý Kulübesi\n{FFFFFF}[/balikyardim]\n[/yemsatinal]\n[/baliksat]", RENK_SERVER, 130.8684,-1945.5778,6.0826, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);
        CreateDynamic3DTextLabel("[Gözaltý Noktasý]\n{FFFFFF}[/gozalti]\n[/gozalticikar]", RENK_SERVER, 2013.8152,1580.7793,6753.0479, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);
        CreateDynamicPickup(2485, 23, 2375.0820,-1921.8303,13.5210);
        CreateDynamic3DTextLabel("Hurda Alým Satým Merkezi\n{FFFFFF}[/hurdasat]", RENK_SERVER, 2375.0820,-1921.8303,13.5210, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);
        CreateDynamicPickup(1239, 23, 1209.1365, -1752.0742, 13.5935);
        CreateDynamic3DTextLabel("[Birlik Ýþlem Noktasý]\n{FFFFFF}/birlikislem yazarak iþlem menüsüne ulaþabilirsin.", RENK_SERVER, 1209.1365, -1752.0742, 13.5935, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);
        CreateDynamicPickup(1239, 23, 957.7657,-1704.1384,13.6137);
        CreateDynamic3DTextLabel("[Premium Bisiklet Alým Noktasý]\n{FFFFFF}/vicemarket", RENK_SERVER, 957.7657,-1704.1384,13.6137, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);
        CreateDynamicPickup(1581, 23,  2335.8347 ,1657.3992, 3040.9275);
        CreateDynamic3DTextLabel("[Ehliyet Kursu]\n{FFFFFF}/ehliyet yazarak kendine ehliyet testine baþlayabilirsin.", RENK_SERVER, 2335.8347 ,1657.3992, 3040.9275, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);
        CreateDynamicPickup(1239, 23, 1398.6584, 1315.4609, 1501.0840);
        CreateDynamic3DTextLabel("[Hesap Açma Noktasý]\n{FFFFFF}/hesapac yazarak kendine hesap açabilirsin.", RENK_SERVER, 1398.6584, 1315.4609, 1501.0840, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);
        CreateDynamicPickup(1239, 23, 1398.9458, 1318.6924, 1501.0859);
        CreateDynamic3DTextLabel("[Banka]\n{FFFFFF}Bankada iþlem yapmak için /banka komutunu kullanýn.", RENK_SERVER, 1398.9458, 1318.6924, 1501.0859, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);
        CreateDynamicPickup(19627, 23, 2074.5420, -1831.3414, 13.5469);
		CreateDynamic3DTextLabel("[Lobi]\n{FFFFFF}Diðer katlara ulaþmak için /asansor komutunu kullanýn.", RENK_SERVER, 1493.4991, -1791.1809, 2981.3540, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);
		CreateDynamicPickup(1239, 23, 1482.5685,-1848.7686,3645.6270);
		CreateDynamic3DTextLabel("[Yönetim Ofisi]\n{FFFFFF}Diðer katlara ulaþmak için /asansor komutunu kullanýn.", RENK_SERVER, 1482.5685, -1848.7686, 3645.6270, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);
		CreateDynamicPickup(1239, 23, 1493.7256,-1786.2546,2676.0129);
		CreateDynamic3DTextLabel("[Ýnsan Kaynaklarý]\n{FFFFFF}Diðer katlara ulaþmak için /asansor komutunu kullanýn.", RENK_SERVER, 1493.7256, -1786.2546, 2676.0129, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);
		CreateDynamicPickup(1239, 23, 2239.6357,2431.1926,3.2734);
		CreateDynamic3DTextLabel("[VCPD - Ýþlem Noktasý]\n{FFFFFF}/pdspawn\n/pdgps\n/pdtamir", RENK_SERVER, 2239.6357,2431.1926,3.2734, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);
		CreateDynamicPickup(1314, 23, 246.3112, 117.8975, 1003.2184, 7001, 10);
		CreateDynamic3DTextLabel("[Memur Çaðýrma]\n{FFFFFF}Memur çaðýrmak için /memurcagir komutunu kullanabilirsin.", RENK_SERVER, 246.3112, 117.8975, 1003.2184, 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 7001, 10);
		CreateDynamicPickup(1239, 23, 2573.7026, -2220.7134, 13.5469);
		CreateDynamic3DTextLabel("[Kamyon Þöförü - Yük Alma Noktasý]\n{FFFFFF}Yük almak için /yukal", RENK_SERVER, 2573.7026, -2220.7134, 13.5469, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);
		CreateDynamicPickup(1239, 23, 193.8061,1915.0837,529.9813);
		CreateDynamic3DTextLabel("[VCPD - Asansör]\n{FFFFFF}Asansörü kullanmak için /asansor komutunu kullanýn.", RENK_SERVER, 193.8061,1915.0837,529.9813, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);
		CreateDynamicPickup(1239, 23, 1705.0577,946.5693,1129.9878);
		CreateDynamic3DTextLabel("[VCPD - Asansör]\n{FFFFFF}Asansörü kullanmak için /asansor komutunu kullanýn.", RENK_SERVER, 1705.0577,946.5693,1129.9878, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);
		CreateDynamicPickup(1239, 23, 1579.3479,-1677.8439,62.2155, 31457);
		CreateDynamic3DTextLabel("[VCPD - Asansör]\n{FFFFFF}Asansörü kullanmak için /asansor komutunu kullanýn.", RENK_SERVER, 1579.3479,-1677.8439,62.2155, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);
		CreateDynamicPickup(1239, 23, 1570.0018,-1678.4226,25.1468, 31457);//çatý
		CreateDynamic3DTextLabel("[VCPD - Asansör]\n{FFFFFF}Asansörü kullanmak için /asansor komutunu kullanýn.", RENK_SERVER, 1570.0018,-1678.4226,25.1468, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);
		CreateDynamicPickup(1239, 23, 2268.0557,2448.6104,3.5313);
		CreateDynamic3DTextLabel("[VCPD - Asansör]\n{FFFFFF}Asansörü kullanmak için /asansor komutunu kullanýn.", RENK_SERVER, 2268.0557,2448.6104,3.5313, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);
		CreateDynamicPickup(1239, 23, 2018.3427,1584.6659,6753.0479);
		CreateDynamic3DTextLabel("[VCPD - Asansör]\n{FFFFFF}Asansörü kullanmak için /asansor komutunu kullanýn.", RENK_SERVER, 2018.3427,1584.6659,6753.0479, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);
		CreateDynamicPickup(1239, 23, 2268.0027,2449.0930,-7.1953);
		CreateDynamic3DTextLabel("[VCPD - Asansör]\n{FFFFFF}Asansörü kullanmak için /asansor komutunu kullanýn.", RENK_SERVER, 2268.0027,2449.0930,-7.1953, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);
		CreateDynamicPickup(1239, 23, 2315.6211,2447.8147,3.0163);
		CreateDynamic3DTextLabel("[VCPD - Garaj]\n{FFFFFF}Dýþarý çýkmak için /pdgaraj komutunu kullanýn.", RENK_SERVER, 2315.6211,2447.8147,3.0163, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, pdgarajvw);
		CreateDynamicPickup(1239, 23, 1580.5728,-1650.6276,15.7636);
		CreateDynamic3DTextLabel("[VCPD - Garaj]\n{FFFFFF}Ýçeri girmek için /pdgaraj komutunu kullanýn.", RENK_SERVER, 1580.5728,-1650.6276,15.7636, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);
	   	CreateDynamicPickup(1239, 23, 2191.5066,-2268.0361,13.6154); //Firma Dorse Satýþ
	   	CreateDynamic3DTextLabel("[{F5E600}Süt Dorsesi Ýndirme Noktasý{FFFFFF}]\n{FFFFFF}Dorseyi býrakmak için '/dorse sat'{FFFFFF}", RENK_BEYAZ,2191.5066,-2268.0361,13.6154 + 0.8, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1,-1);
		CreateDynamicPickup(1239, 23, 89.7108,-305.2138,1.5781); //Firma Süt Yükleme
		CreateDynamic3DTextLabel("[{F5E600}Süt Dorsesi Yükleme Noktasý{FFFFFF}]\n{FFFFFF}Süt dorsesi takmak için '/dorse tak'{FFFFFF}", RENK_BEYAZ,89.7108,-305.2138,1.5781 + 0.8, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1,-1);
		CreateDynamicPickup(1239, 23, 103.2384,-164.8606,2.3154); //Firma Konteyner Yükleme
		CreateDynamic3DTextLabel("[{F5E600}Konteyner Yükleme Noktasý{FFFFFF}]\n{FFFFFF}Konteyner yüklemek için '/konteyner yukle'{FFFFFF}", RENK_BEYAZ,103.2384,-164.8606,2.3154 + 0.8, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1,-1);
		CreateDynamicPickup(1239, 23, 2248.4624,-2450.8875,13.6171); //Firma Konteyner Satýþ
		CreateDynamic3DTextLabel("[{F5E600}Konteyner Satýþ Noktasý{FFFFFF}]\n{FFFFFF}Konteyner yüklemek için '/konteyner sat'{FFFFFF}", RENK_BEYAZ,2248.4624,-2450.8875,13.6171 + 0.8, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1,-1);
		CreateDynamic3DTextLabel("[{F5E600}Liman Depo{FFFFFF}]\n{FFFFFF}Un çuvalýný almak için pickup üzerine gelin{FFFFFF}", RENK_BEYAZ,2784.0200,-2417.5359,13.6346 + 0.8, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1,-1);
	   
	    //CreateDynamicPickup(1239, 23, 973.3214,-1739.9381,13.5469); //2.el depo
	    //CreateDynamic3DTextLabel("[{F5E600}Araç Sisteme Sat{FFFFFF}]\n{FFFFFF}Etkileþim  için '/arac sistemesat'{FFFFFF}", RENK_BEYAZ,973.3214,-1739.9381,13.5469 + 0.8, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1,-1);

		//CreateDynamicPickup(1239, 23, 941.2906,-1737.8582,13.5546); //2.el depo
		//CreateDynamic3DTextLabel("[{F5E600}Araç Geliþtirme{FFFFFF}]\n{FFFFFF}Etkileþim  için '/aracgelistir'{FFFFFF}", RENK_BEYAZ,941.2906,-1737.8582,13.5546 + 0.8, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1,-1);

		CreateDynamicPickup(1239, 23, 549.1940,-1286.0798,17.2482); //2.el depo
	    CreateDynamic3DTextLabel("[{F5E600}Araç Sisteme Sat{FFFFFF}]\n{FFFFFF}Etkileþim  için '/arac sistemesat'{FFFFFF}", RENK_BEYAZ,549.1940,-1286.0798,17.2482 + 0.8, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1,-1);

		CreateDynamicPickup(1239, 23, 559.9242,-1286.1040,17.2482); //2.el depo
		CreateDynamic3DTextLabel("[{F5E600}Araç Geliþtirme{FFFFFF}]\n{FFFFFF}Etkileþim  için '/aracgelistir'{FFFFFF}", RENK_BEYAZ,559.9242,-1286.1040,17.2482 + 0.8, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1,-1);

	 	CreateDynamicPickup(1239, 23, 1535.3379,-1767.1284,13.5637); //2.el depo
	 	CreateDynamic3DTextLabel("[{F5E600}Pawn Shop{FFFFFF}]\n{FFFFFF}Eþya satýn almak için '/pawnshop'{FFFFFF}", RENK_BEYAZ,1535.3379,-1767.1284,13.5637 + 0.8, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1,-1);

	    CreateDynamicPickup(1239, 23, 853.0221,-1060.3890,25.1068); //2.el depo
	    CreateDynamic3DTextLabel("[{F5E600}2.El Deposu{FFFFFF}]\n{FFFFFF}Eþya kutusu satmak için '/esya sat'{FFFFFF}", RENK_BEYAZ,853.0221,-1060.3890,25.1068 + 0.8, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1,-1);

	 	//CreateDynamicPickup(1239, 23, 951.8502,-1705.6200,13.6137); //2.el depo
	 	//CreateDynamic3DTextLabel("[{F5E600}SunShine Auto{FFFFFF}]\n{FFFFFF}Araç satýn almak için '/arac satinal'{FFFFFF}", RENK_BEYAZ,951.8502,-1705.6200,13.6137 + 0.8, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1,-1);

		CreateDynamicPickup(1239, 23, 224.2531,-2063.5413,5.0006); //2.el depo
		CreateDynamic3DTextLabel("[{F5E600}FlapJack Ship Gallery{FFFFFF}]\n{FFFFFF}Tekne satýn almak için '/tekneal'{FFFFFF}", RENK_BEYAZ,224.2531,-2063.5413,5.0006 + 0.8, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1,-1);

		CreateDynamicPickup(1239, 23, -382.9766,-1426.3365,26.3190); //2.el depo
		CreateDynamic3DTextLabel("[{C9C936}Florida Tarým Ekipmanlarý{FFFFFF}]\n{FFFFFF}Tarým ekipmaný satýn almak için '/tarimekipman'{FFFFFF}", RENK_BEYAZ,-382.9766,-1426.3365,26.3190 + 0.8, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1,-1);

		CreateDynamicPickup(1239, 23, 295.3435,-2132.9509,5.0067); //Yat Pickup
		CreateDynamic3DTextLabel("[{F5E600}Cortez's Yacht Club{FFFFFF}]\n{FFFFFF}Etkileþim için {F5E600}'LALT'{FFFFFF}", RENK_BEYAZ,295.3435,-2132.9509,5.0067 + 0.8, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1,-1);

		CreateDynamicPickup(1239, 23, 2018.1602,2954.9253,5199.1489);
		CreateDynamic3DTextLabel("[Tedavi Olma Noktasý]\n{FFFFFF}Tedavi olmak için /tedaviol komutunu kullanýn.", RENK_SERVER, 2018.1602,2954.9253,5199.1489, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);

		CreateDynamicPickup(1239, 23, 1482.2264,-1790.4072,2981.3540);
		CreateDynamic3DTextLabel("[Ceza Ödeme Noktasý]\n{FFFFFF}Menüyü açmak için /cezaode komutunu kullanýn.", RENK_SERVER, 1482.2264,-1790.4072,2981.3540, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);
		CreateDynamicPickup(1239, 23, 1495.5537,-1861.8885,3645.6350);
		CreateDynamic3DTextLabel("[Government - Kasa]\n{FFFFFF}Kullanmak için /kasa", RENK_SERVER, 1495.5537,-1861.8885,3645.6350, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);
		return 1;
}

stock InfoGizle(playerid)
{
	TextDrawHideForPlayer(playerid, TD_AD_HeadBox);
    TextDrawHideForPlayer(playerid, TD_AD_BoxThree);
    TextDrawHideForPlayer(playerid, TD_AD_Seller);
	PlayerTextDrawHide(playerid, TD_AD_Price[playerid]);
	PlayerTextDrawHide(playerid, TD_AD_CityZip[playerid]);
	PlayerTextDrawHide(playerid, TD_AD_Headline[playerid]);
	PlayerTextDrawHide(playerid, TD_AD_PriceValue[playerid]);
	PlayerTextDrawHide(playerid, TD_AD_TaxesValue[playerid]);
	PlayerTextDrawHide(playerid, TD_AD_Taxes[playerid]);
	PlayerTextDrawHide(playerid, TD_AD_SellerValue[playerid]);
	PlayerTextDrawHide(playerid, TD_AD_HousenumberStreet[playerid]);
	PlayerTextDrawHide(playerid, TD_Mid_Info[playerid]);
	SetPVarInt(playerid, "CurrentPickup", 0);
	return 1;
}

stock mdc_istur(turx) {
	static tur[64];
	switch(turx) {
		case 1: tur = "Market";
		case 2: tur = "Cafe & Restaurant";
		case 3: tur = "Elektronik/Market";
		case 4: tur = "GYM";
		case 5: tur = "Club/Bar";
		case 6: tur = "Ofis";
		case 7: tur = "Giyim";
		case 8: tur = "Diðer";
		case 9: tur = "Benzinlik Marketi";
		case 10: tur = "Giyim 2";
		case 11: tur = "Giyim 3";
		case 12: tur = "Gizli Depo 1";
		case 13: tur = "Gizli Depo 2";
		case 14: tur = "Gizli Depo 3";
		case 15: tur = "Otel/Apart";
		case 16: tur = "Drug Lab";
	}
	return tur;
}

function MDC_IsSorgula(playerid, kapino)
{
	new query[128], Cache:VeriCek;
	MDC_GenelID[playerid] = kapino;
	mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `isyerleri` WHERE `isyeriID` = '%d'", kapino);
	VeriCek = mysql_query(g_SQL, query);
	new rows = cache_num_rows();
	if(kapino <= 0) return cache_delete(VeriCek), 1;//bug engel
	if(rows)
	{
	    PlayerTextDrawHide(playerid, MDC[5][playerid]);
    	MDC_EkranArac(playerid, false);
	    MDC_EkranIsim(playerid, false);
	    for(new i = 37; i < 39; i++) PlayerTextDrawHide(playerid, MDC[i][playerid]);
 	    for(new i = 39; i < 42; i++) PlayerTextDrawHide(playerid, MDC[i][playerid]);
   		for(new i = 42; i < 47; i++) PlayerTextDrawShow(playerid, MDC[i][playerid]);

		new gelenveri[128], zone[MAX_ZONE_NAME];
	    new Float:mdc_Pos[4];
	    cache_get_value_name_float(0, "isyeriPosX", mdc_Pos[0]);
	    cache_get_value_name_float(0, "isyeriPosY", mdc_Pos[1]);
	    cache_get_value_name_float(0, "isyeriPosZ", mdc_Pos[2]);
		Get3DZone(mdc_Pos[0], mdc_Pos[1], mdc_Pos[2], zone, sizeof(zone));
		format(gelenveri, sizeof(gelenveri), "ISYERI_ADRESI:_%s", zone);
		PlayerTextDrawSetString(playerid, MDC[43][playerid], gelenveri);

		format(gelenveri, sizeof(gelenveri), "ISYERI_TURU:_%s", mdc_istur(vericek_int(0, "isyeriTur")));
		PlayerTextDrawSetString(playerid, MDC[44][playerid], gelenveri);

		format(gelenveri, sizeof(gelenveri), "VERGI_BORCU:_%s", NumaraFormati(vericek_int(0, "isyeriVergi")));
		PlayerTextDrawSetString(playerid, MDC[45][playerid], gelenveri);

		if(vericek_int(0, "isyeriSahip") > 0)
		{
			format(gelenveri, sizeof(gelenveri), "ISYERI_SAHIBI:_%s", MDC_SQLSahipBul(vericek_int(0, "isyeriSahip")));
		}
		else format(gelenveri, sizeof(gelenveri), "ISYERI_SAHIBI:_-");
        PlayerTextDrawSetString(playerid, MDC[42][playerid], gelenveri);
	}
	else MDC_Diskalifiye(playerid), PlayerTextDrawShow(playerid, MDC[5][playerid]), PlayerTextDrawSetString(playerid, MDC[5][playerid], "Kapi numarasi gecersiz");
	cache_delete(VeriCek);
	return 1;
}

stock MDC_SQLSahipBul(sql)
{
	new Cache:VeriCek, query[256], isim[32];
	mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `oyuncular` WHERE `ID` = '%d'", sql);
	VeriCek = mysql_query(g_SQL, query);
	new rows = cache_num_rows();
	if(rows)
	{
	    format(isim, 32, vericek_varchar(0, "isim"));
	}
	cache_delete(VeriCek);
	return isim;
}

function MDC_NumaraSorgula(playerid, numara)
{
	new query[128], Cache:VeriCek, zone[MAX_ZONE_NAME] = "Bilinmiyor";
	mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `oyuncular` WHERE `TelefonNumarasi` = '%d'", numara);
	VeriCek = mysql_query(g_SQL, query);
	new rows = cache_num_rows();
	if(numara <= 0) return cache_delete(VeriCek), 1;//bug engel
	if(rows)
	{
	    PlayerTextDrawHide(playerid, MDC[5][playerid]);
		MDC_Diskalifiye(playerid);
		for(new i =37; i < 39; i++) PlayerTextDrawShow(playerid, MDC[i][playerid]);
 	    for(new i = 39; i < 47; i++) PlayerTextDrawHide(playerid, MDC[i][playerid]);
		if(OyuncuIDcek(vericek_varchar(0, "isim")) != INVALID_PLAYER_ID && oyuncuData[OyuncuIDcek(vericek_varchar(0, "isim"))][oTelefonDurum] == true) // Oyunda olup olmadýðýnýn kontrolü ve telefon durum kontrolü
		{
			new Float:x, Float:y, Float:z;
			GetPlayerPos(OyuncuIDcek(vericek_varchar(0, "isim")), x, y, z);
			Get3DZone(x, y, z, zone, sizeof(zone));
		}
	    new gelenveri[128];
		format(gelenveri, sizeof(gelenveri), "NUMARA_SAHIBI:_%s", vericek_varchar(0, "isim"));
		PlayerTextDrawSetString(playerid, MDC[37][playerid], gelenveri);
		format(gelenveri, sizeof(gelenveri), "SINYAL_BOLGESI:_%s", zone);		
		PlayerTextDrawSetString(playerid, MDC[38][playerid], gelenveri);
	}
	else MDC_Diskalifiye(playerid), PlayerTextDrawShow(playerid, MDC[5][playerid]), PlayerTextDrawSetString(playerid, MDC[5][playerid], "Numara gecersiz");
	cache_delete(VeriCek);
	return 1;
}

stock MDC_EkranIsim(playerid, bool:durum)
{
	if(durum == true)
	{
	    PlayerTextDrawShow(playerid, MDC[34][playerid]);
	    for(new i = 14; i < 24; i++) PlayerTextDrawShow(playerid, MDC[i][playerid]);
	}
	else for(new i = 14; i < 24; i++) PlayerTextDrawHide(playerid, MDC[i][playerid]),PlayerTextDrawHide(playerid, MDC[34][playerid]);
	return 1;
}

stock MDC_EkranArac(playerid, bool:durum)
{
	if(durum == true)
	{
	    PlayerTextDrawShow(playerid, MDC[35][playerid]);
	    for(new i = 24; i < 34; i++) PlayerTextDrawShow(playerid, MDC[i][playerid]);
	}
	else for(new i = 24; i < 34; i++) PlayerTextDrawHide(playerid, MDC[i][playerid]),PlayerTextDrawHide(playerid, MDC[35][playerid]);
	return 1;
}

function Sicil_Kayitlari(playerid, inputtext[], sayfa)
{

    format(SicilIsim_Cek[playerid], 32, inputtext);
	for (new i = 0, len = strlen(SicilIsim_Cek[playerid]); i < len; i ++) {
		if(SicilIsim_Cek[playerid][i] == '_') SicilIsim_Cek[playerid][i] = ' ';
	}

	new query[256], Cache:VeriGetir, rows, i, str[780], sayfdeger = 10;
	mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `iccezalar` WHERE `KarakterAdi` = '%e' ORDER BY `CezaID` DESC LIMIT %d, %d", SicilIsim_Cek[playerid], sayfa * sayfdeger, sayfdeger);
	VeriGetir = mysql_query(g_SQL, query);
	rows = cache_num_rows();
	//printf("\n\n");
	strcat(str, "Tarih\tPersonel\tSicil Kaydý\tCeza Süresi\n");
	strcat(str, "Sonraki Sayfa\nOnceki Sayfa\n \n");
	if(rows)
	{
	    //printf("Veri bulundumu?: Evet\n");
	    while(i < rows)
	    {
	        format(str, sizeof(str), "%s{AAAAAA}[%s]\t%s\t%s\t%d\n", str, vericek_varchar(i, "yasaklanmatarihi"), vericek_varchar(i, "Polis"), vericek_varchar(i, "Sebep"), vericek_int(i, "CezaSure"));
	        i++;
	    }
	    ShowPlayerDialog(playerid, PDPC_SICILSAYFA, DIALOG_STYLE_TABLIST_HEADERS, MDC_BASLIK, str, "Devam", "Kapat");
	}
	else
	{
	    if(pdpc_sayfa[playerid] == 0)
	    {
			ShowPlayerDialog(playerid, BOS_MESAJ, DIALOG_STYLE_MSGBOX, MDC_BASLIK, "{FFFFFF}Sicil kaydý bulunamadý.", "Kapat", "");
  		}
    	else
    	{
    	    pdpc_sayfa[playerid]--;
    	    Sicil_Kayitlari(playerid, SicilIsim_Cek[playerid], pdpc_sayfa[playerid]);
        	//SendClientMessage(playerid,-1, "Son sayfaya ulaþtýnýz.");
    	    //printf("Veri bulundumu: Hayýr, son sayfa");
    	}
	}
	//printf("%s", str);
	//printf("Girdi: %s, Revize: %s, Ceza Sayi: %d", inputtext, SicilIsim_Cek[playerid], i);
	//printf("\n\n");

	cache_delete(VeriGetir);
	return 1;
}

function AracSicil_Kayitlari(playerid, inputtext[])
{
	new query[128], Cache:kontrolettir, str[2048], cezadurum[32];
	mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `araccezalari` WHERE `aracPlaka` LIKE '%e' ORDER BY `araccezalari`.`cezaOdendi` ASC LIMIT 0, 15", inputtext);

	kontrolettir = mysql_query(g_SQL, query);
	new rows = cache_num_rows();
	strcat(str, "Tarih\tPersonel\tCeza Sebebi\tDurum\n");
	if(rows)
	{
		new i, ccezasebep[128 * 2], ctarih[32], codendimi;
		//printf("a");
		while(i < rows)
		{
		    //printf("b");
			cache_get_value_name(i, "cezaSebep", ccezasebep);
			cache_get_value_name(i, "cezaTarih", ctarih);
			cache_get_value_name_int(i, "cezaOdendi", codendimi);
			switch(codendimi)
			{
			    case 0:format(cezadurum, sizeof(cezadurum), "{930000}[ODENMEDI - %s]", NumaraFormati(vericek_int(i, "cezaUcret")));
			    case 1:format(cezadurum, sizeof(cezadurum), "{838383}[ODENDI - %s]", NumaraFormati(vericek_int(i, "cezaUcret")));
			}

		    format(str, sizeof(str), "%s{AAAAAA}[%s]\t{FFFFFF}%s\t{FFFFFF}%s\t{FFFFFF}%s\t%s\n", str, ctarih, vericek_varchar(i, "cezaKesen"), ccezasebep, cezadurum);
			//printf(str);
			//printf("%d",i);
			i++;
		}
        //printf("c");
        format(str, sizeof(str), "%s\n \n* Bu listede maksimum 15 adet ceza kaydý görüntülenebilir.",str);
	    ShowPlayerDialog(playerid, BOS_MESAJ, DIALOG_STYLE_TABLIST_HEADERS, MDC_BASLIK, str, "Kapat", "");
	}
	else ShowPlayerDialog(playerid, BOS_MESAJ, DIALOG_STYLE_MSGBOX, MDC_BASLIK, "{FFFFFF}Araca ait geçmiþ ceza kaydý bulunamadý.", "Kapat", "");
	cache_delete(kontrolettir);
	return 1;
}

function IsimSicil_Kayitlari(playerid, inputtext[])
{
	new query[128], Cache:kontrolettir, str[2048], cezadurum[32];
	mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `cezalar` WHERE `cezaSQL` LIKE '%e' ORDER BY `cezalar`.`cezaOdendi` ASC LIMIT 0, 15", inputtext);

	kontrolettir = mysql_query(g_SQL, query);
	new rows = cache_num_rows();
	strcat(str, "Tarih\tPersonel\tCeza Sebebi\tDurum\n");
	if(rows)
	{
		new i, ccezasebep[128 * 2], ctarih[32], codendimi;
		//printf("a");
		while(i < rows)
		{
		    //printf("b");
			cache_get_value_name(i, "cezaSebep", ccezasebep);
			cache_get_value_name(i, "cezaTarih", ctarih);
			cache_get_value_name_int(i, "cezaOdendi", codendimi);
			switch(codendimi)
			{
			    case 0:format(cezadurum, sizeof(cezadurum), "{930000}[ODENMEDI - %s]", NumaraFormati(vericek_int(i, "cezaUcret")));
			    case 1:format(cezadurum, sizeof(cezadurum), "{838383}[ODENDI - %s]", NumaraFormati(vericek_int(i, "cezaUcret")));
			}

		    format(str, sizeof(str), "%s{AAAAAA}[%s]\t{FFFFFF}%s\t{FFFFFF}%s\t{FFFFFF}%s\t%s\n", str, ctarih, vericek_varchar(i, "cezaMemur"), ccezasebep, cezadurum);
			//printf(str);
			//printf("%d",i);
			i++;
		}
        //printf("c");
        format(str, sizeof(str), "%s\n \n* Bu listede maksimum 15 adet ceza kaydý görüntülenebilir.",str);
	    ShowPlayerDialog(playerid, BOS_MESAJ, DIALOG_STYLE_TABLIST_HEADERS, MDC_BASLIK, str, "Kapat", "");
	}
	else ShowPlayerDialog(playerid, BOS_MESAJ, DIALOG_STYLE_MSGBOX, MDC_BASLIK, "{FFFFFF}Isime ait geçmiþ ceza kaydý bulunamadý.", "Kapat", "");
	cache_delete(kontrolettir);
	return 1;
}

function MDC_ArananKontrol(playerid, inputtext[])
{
	new query[128], Cache:kontrolettir;
	MDC_IsimAranan[playerid] = false;
	mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `suckayitlari` WHERE `isim` = '%e'", inputtext);
	kontrolettir = mysql_query(g_SQL, query);
	new rows = cache_num_rows();
	if(rows)
	{
	    MDC_IsimAranan[playerid] = true;
	}
	cache_delete(kontrolettir);
	return rows;
}

stock Isim_CezaKontrol(playerid, inputtext[])
{
	new query[128], Cache:VeriyiGetir;
    MDC_IsimCeza[playerid] = 0;
	mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `cezalar` WHERE `CezaSQL` = '%e'", inputtext);
	VeriyiGetir = mysql_query(g_SQL, query);

	new rows = cache_num_rows(), i;
	if(rows)
	{
		while(i < rows)
		{
			MDC_IsimCeza[playerid] += vericek_int(i, "cezaUcret");
			i++;
		}
	}
	cache_delete(VeriyiGetir);
	return 1;
}

stock Plaka_CezaKontrol(playerid, inputtext[])
{
	new query[128], Cache:VeriyiGetir;
    MDC_PlakaCeza[playerid] = 0;
	mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `araccezalari` WHERE `aracPlaka` = '%e'", inputtext);
	VeriyiGetir = mysql_query(g_SQL, query);

	new rows = cache_num_rows(), i;
	if(rows)
	{
		while(i < rows)
		{
			MDC_PlakaCeza[playerid] += vericek_int(i, "cezaUcret");
			i++;
		}
	}
	cache_delete(VeriyiGetir);
	return 1;
}

function Birlik_Oyunculari()
{
	new rows = cache_num_rows(), i;
	if(rows)
	{
		printf("Birlik Üyesi: %d", rows);
		while(i < rows)
		{
			printf("%s", vericek_varchar(i, "isim"));
			i++;
		}
	}
	return 1;
}

stock BoloKaydiListe(playerid)
{
	new str[2655 + 100], query[128], Cache:VeriGetir;// X tane 128 karakterlik kayýt, isimlere veriyoruz, tarih, son olarak id için 5 verdik(15 * 128 + 15 * 24 + 15 * 20 + 15 * 5)
	mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `bolokayitlari` ORDER BY `id` DESC");
	VeriGetir = mysql_query(g_SQL, query);
	new rows = cache_num_rows(), i;
	strcat(str, "Tarih\tOluþturan Memur\tBOLO>:\n");
	if(rows)
	{
		while(i < rows)
		{
			format(str, sizeof(str), "%s%d:%s\t%s\t%s\n", str, vericek_int(i, "id"),vericek_varchar(i, "tarih"), vericek_varchar(i, "memur"), vericek_varchar(i, "bolo"));
			i++;
		}
	}
	cache_delete(VeriGetir);
	if(i == 0) return ShowPlayerDialog(playerid, BOS_MESAJ, DIALOG_STYLE_MSGBOX, MDC_BASLIK, "{FFFFFF}Veritabanýnda oluþturmuþ BOLO kaydý bulunamadý.", "Kapat", "");
	ShowPlayerDialog(playerid, PDPC_BOLOSIL, DIALOG_STYLE_TABLIST_HEADERS, MDC_BASLIK, str, "Sil", "Kapat");
	return 1;
}

stock MDC_Diskalifiye(playerid)
{
	MDC_EkranIsim(playerid, false), MDC_EkranArac(playerid, false);
	for(new i = 37; i < 39; i++)PlayerTextDrawHide(playerid, MDC[i][playerid]);
	for(new i = 39; i < 47; i++) PlayerTextDrawHide(playerid, MDC[i][playerid]);
	return 1;
}

stock HorseInfo(Text:horseid)
{
    TextDrawFont(horseid, 4); 
    TextDrawColor(horseid,0xFFFFFFFF);
    TextDrawTextSize(horseid,64,64); 
}

stock HorseNumInfo(Text:horsenumid)
{
    TextDrawFont(horsenumid, 4); 
    TextDrawColor(horsenumid,0xFFFFFFFF);
    TextDrawTextSize(horsenumid,32,32); 
}

stock IsAFlyingVehicle(vehicleid)
{
  switch(GetVehicleModel(vehicleid))
  {
    case
        460,464,476,511,512,513,519,520,553,577,592,593,
        417,425,447,465,469,487,488,497,501,548,563:
    return true;
  }
  return false;
}

stock arac_FarKontrol(playerid, id)
{
	if(!IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Araçta deðilsin.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return hataMesaji(playerid, "Aracýn sürücüsü olmalýsýn.");
	if(id != -1)
	{
		//if(Arac_Birlik(playerid, id) || Arac_SahipKontrol(playerid, id) || Arac_Ehliyet(playerid, id) || Arac_Meslek(playerid, id) || Arac_Anahtar(playerid, id) || ItemAnahtarKontrol(playerid, AracBilgi[id][aracID]) || Arac_Firma(playerid, id))
		if(GetEngineStatus(id))
		{
			switch(GetLightStatus(GetPlayerVehicleID(playerid)))
			{
				case false: SetLightStatus(GetPlayerVehicleID(playerid), true);
				case true: SetLightStatus(GetPlayerVehicleID(playerid), false);
			}
		}
		else hataMesaji(playerid, "Bu aracýn far durumunu deðiþtiremezsin.");
	}
	return 1;
}

stock Float:GetDistanceBetweenPoints(Float:X, Float:Y, Float:Z, Float:PointX, Float:PointY, Float:PointZ)
{
	return floatsqroot(floatadd(floatadd(floatpower(floatsub(X, PointX), 2.0), floatpower(floatsub(Y, PointY), 2.0)), floatpower(floatsub(Z, PointZ), 2.0)));
}

forward Float:GetVehicleSpeed2(vehicleid, Miles);
public Float:GetVehicleSpeed2(vehicleid, Miles)
{
	new Float:Speed[4];
	GetVehicleVelocity(vehicleid, Speed[0], Speed[1], Speed[2]);
	if(Miles == 0) Speed[3] = floatsqroot(((Speed[0] * Speed[0]) + (Speed[1] * Speed[1])) + (Speed[2] * Speed[2])) * 136.666667;
	else Speed[3] = floatsqroot(((Speed[0] * Speed[0]) + (Speed[1] * Speed[1])) + (Speed[2] * Speed[2])) * 85.4166672;
	floatround(Speed[3], floatround_round);
	return Speed[3];
}

public OnPlayerSelectObject(playerid, type, objectid, modelid, Float:fX, Float:fY, Float:fZ)
{
    if(type == SELECT_OBJECT_GLOBAL_OBJECT)
    {
        EditObject(playerid, objectid);
    }
    /*new query[95];
	mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `furniture_data` WHERE `furniture_objectid` = '%d'", objectid);
	mysql_tquery(g_SQL, query, "MobilyaObjeSec", "dd", playerid, objectid); */
    return 1;
}

public OnPlayerSelectDynamicObject(playerid, objectid, modelid, Float:x, Float:y, Float:z)
{
	switch(GraffitiIslemleri[playerid])
	{
		case _gSecim:
		{
			CancelEdit(playerid);
			GraffitiIslemleri[playerid] = _gIslemSil;
			new grafitiID = -1;
			foreach(new i : Grafitiler)
			{
				if(grfData[i][grfObje] == objectid)
				{
					grafitiID = i;
					break;
				}
			}
			if(grafitiID == -1) return hataMesaji(playerid, "Graffiti harici obje seçimi yaptýnýz.");
			SetPVarInt(playerid, "GrafitiSecID", grafitiID);
			new str[256];
			format(str, sizeof(str), "{FFFFFF}Seçmiþ olduðunuz ' %s{FFFFFF} ' yazýlý graffitiyi \nkaldýrmayý onaylýyor musunuz?", grfData[grafitiID][grfYazi]);
			return ShowPlayerDialog(playerid, GRAFFITI_SIL, DIALOG_STYLE_MSGBOX, "Graffiti Dialog", str, "Hayýr", "{68A460}Evet");
		}
	}

	new query[140];
	mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `furniture_data` WHERE `furniture_objectid` = '%d'", objectid);
	mysql_tquery(g_SQL, query, "MobilyaObjeSec", "dd", playerid, objectid);
	return 1;
}

stock HexToInt(string[]) // By DracoBlue
{
        if (string[0]==0) return 0;
        new i;
        new cur=1;
        new res=0;
        for (i=strlen(string);i>0;i--) {
                if (string[i-1]<58) res=res+cur*(string[i-1]-48); else res=res+cur*(string[i-1]-65+10);
        cur=cur*16;
        }
        return res;
}

stock GetNearestVehicle(playerid, Float:Distance = 1000.0)
{
	new Float:cPos[6], Float:NearestPos = floatabs(Distance), NearestVehicle = INVALID_VEHICLE_ID;
	GetPlayerPos(playerid, cPos[0], cPos[1], cPos[2]);
	for(new i; i < MAX_VEHICLES; i++)
	{
		if(!IsVehicleStreamedIn(i, playerid) || IsPlayerInVehicle(playerid, i)) continue;
		GetVehiclePos(i, cPos[3], cPos[4], cPos[5]);
		if(NearestPos > GetDistanceBetweenPoints(cPos[0], cPos[1], cPos[2], cPos[3], cPos[4], cPos[5]))
		{
			NearestPos = GetDistanceBetweenPoints(cPos[0], cPos[1], cPos[2], cPos[3], cPos[4], cPos[5]);
			NearestVehicle = i;
		}
	}
	return NearestVehicle;
}

function UpdateDashCam(playerid)
{
	if(!IsPlayerInAnyVehicle(playerid)) return 0x0;
	if(IsPlayerInAnyVehicle(playerid) && aracbirlikturbul(GetPlayerVehicleID(playerid)) == BIRLIK_POLIS)
	{
		new string[40], Float:vPos[3];
		new pcv = GetNearestVehicle(playerid, dcam_Distance);
		if(pcv == INVALID_VEHICLE_ID)
		{
			format(string, sizeof(string), "P N/A~n~S N/A km~n~D N/A m");
			PlayerTextDrawSetString(playerid, pDashCam[playerid], string);
			return 0x1;
		}
		new pvid = GetPlayerVehicleID(playerid);
		GetVehiclePos(pvid, vPos[0], vPos[1], vPos[2]);
		new Float:distance = GetVehicleDistanceFromPoint(pcv, vPos[0], vPos[1], vPos[2]);
		new Float:speed = GetVehicleSpeed2(pcv, 0);
		if(floatround(distance) <= dcam_Distance - 5.0)
		{
			format(string, sizeof(string), "P %s~n~S %d km~n~D %d m", AracBilgi[pcv][aracPlaka], floatround(speed), floatround(distance));
		}
		else format(string, sizeof(string), "P N/A~n~S N/A km~n~D N/A m");
		PlayerTextDrawSetString(playerid, pDashCam[playerid], string);
	}
	return 0x1;
}

stock ShowDashCam(playerid)
{
	PlayerTextDrawShow(playerid, pDashCam[playerid]);
	TextDrawShowForPlayer(playerid, DashCam[0]);
	TextDrawShowForPlayer(playerid, DashCam[1]);
}

stock HideDashCam(playerid)
{
	PlayerTextDrawHide(playerid, pDashCam[playerid]);
	TextDrawHideForPlayer(playerid, DashCam[0]);
	TextDrawHideForPlayer(playerid, DashCam[1]);
}

stock Oyuncu_SilahiBul(playerid, silah)
{
	for (new i; i < 13; i ++)
	{
		if(oyuncuData[playerid][oSilah][i] == silah)
		{
			return 1;
		}
	}
	return 0;
}

stock Birlik_Cevrimici(birlikid)
{
	new sayi;
	foreach(new i : Player)
	{
		if(birlikid == oyuncuData[i][oBirlik])
		{
			sayi++;
		}
	}
	return sayi;
}

stock Firma_Cevrimici(firmaid)
{
	new sayi;
	foreach(new i : Player)
	{
		if(firmaid == oyuncuData[i][oFirma])
		{
			sayi++;
		}
	}
	return sayi;
}

stock Birlik_ToplamUye(birlikid)
{
	new sayi, Cache:VeriGetir, query[128];
	mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `oyuncular` WHERE `birlik` = '%d'", birlikid);
	VeriGetir = mysql_query(g_SQL, query);
	sayi = cache_num_rows();
	cache_delete(VeriGetir);
	return sayi;
}

stock BirlikAraclariniGoster(playerid)
{
	new sayi = 0, Cache:VeriGetir, query[128];
	mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `araclar` WHERE `aracBirlik` = '%d'", oyuncuData[playerid][oBirlik]);
	VeriGetir = mysql_query(g_SQL, query);
	new rws = cache_num_rows();
	if(rws)
	{
		new list[1024], model;
		format(list, sizeof(list), "SQLID\tAraç Modeli\n");
		for(new i = 0; i < rws; ++i)
		{
			cache_get_value_name_int(i, "aracID", oyuncuData[playerid][pBirlikAID][i]);
			cache_get_value_name_int(i, "aracModel", model);
			format(list, sizeof(list), "%sSQLID:%d\t%s\n", list, oyuncuData[playerid][pBirlikAID][i], AracModel(model));
		}
		ShowPlayerDialog(playerid, DIALOG_BIRLIK_ARACLARI, DIALOG_STYLE_TABLIST_HEADERS, "Birlik Araçlarý", list, "Seç", "Geri");
		sayi++;
	}
	cache_delete(VeriGetir);
	if(sayi == 0) return hataMesaji(playerid, "Birliðinize ait herhangi bir araç bulunamadý.");
	return 1;
}

stock Arac_PlakaCeza(plaka[])
{
	new query[128], Cache:VeriGetir, durum = 0;//satýlabilir
	mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `araccezalari` WHERE `aracPlaka` = '%e' AND `cezaOdendi` = 0", plaka);
	VeriGetir = mysql_query(g_SQL, query);
	if(cache_num_rows())
	{
	    durum = 1;//plaka cezasý
	}
	cache_delete(VeriGetir);

	mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `araclar` WHERE `aracVergi` > 0 AND `aracPlaka` = '%e'", plaka);
	VeriGetir = mysql_query(g_SQL, query);
	if(cache_num_rows())
	{
	    durum = 2;//araç vergisi
	}
	cache_delete(VeriGetir);
	return durum;
}

stock Arac_PlakaKontrol(plaka[])
{
	new durum = 0;
	for(new i = 0; i < MAKSIMUM_ARAC; i++)
	{
		if(!strcmp(AracBilgi[i][aracPlaka], plaka, true))
		{
			durum = i;
		}
	}
	return durum;
}

stock AracRadyoDurdur(aracid)
{
	if (IsValidVehicle(aracid) && AracBilgi[aracid][aracRadyoDurum] == true)
	{
		AracBilgi[aracid][aracRadyoDurum] = false;

		foreach (new i : Player)
		{
			if (IsPlayerInVehicle(i, aracid))
			{
				StopAudioStreamForPlayer(i);
				oyuncuData[i][oRadyoDinliyor] = false;
			}
		}
	}
	return 1;
}

stock AracRadyoBaslat(aracid, url[])
{
	if(IsValidVehicle(aracid))
	{
		AracBilgi[aracid][aracRadyoDurum] = true;
		strpack(AracBilgi[aracid][aracRadyoURL], url, 128 char);

		foreach (new i : Player)
		{
			if (IsPlayerInVehicle(i, aracid))
			{
				oyuncuData[i][oRadyoDinliyor] = true;

				StopAudioStreamForPlayer(i);
				PlayAudioStreamForPlayer(i, url);
			}
		}
	}
	return 1;
}

stock BalikSayisi(playerid)
{
	new sayi;
	sayi = oyuncuData[playerid][oBalik][0] + oyuncuData[playerid][oBalik][1] + oyuncuData[playerid][oBalik][2] + oyuncuData[playerid][oBalik][3] + oyuncuData[playerid][oBalik][4];
	return sayi;
}

stock BalikIsim(sayi)
{
	new balikismi[16];
	switch(sayi)
	{
		case 0: balikismi = "Sazan";
		case 1: balikismi = "Sombalýðý";
		case 2: balikismi = "Levrek";
		case 3: balikismi = "Orkinos";
	}
	return balikismi;
}

stock randomchar()
return ( random(1000) %2 ==0 ) ? (65 + random(26)) : (97 + random(26));

stock YuzdeHesapla(sayi, yuzde)
{
	new sonuc;
	sonuc = (sayi * yuzde) / 100;
	return sonuc;
}

stock KodOlustur()
{
	new RandomString;
	RandomString = randomEx(100000, 200000);
	return RandomString;
}

stock BiletOlustur()
{
	new RandomString;
	RandomString = randomEx(1000000, 9999999);
	return RandomString;
}

stock AracSQLBul(sqlid)
{    foreach(new i : Araclar)
	{
		if(AracBilgi[i][aracID] == sqlid) return i;
	}
	return -1;
}
	stock LokasyonKaydet(playerid)
	{
		new query[256];
		GetPlayerPos(playerid, oyuncuData[playerid][oPos][0], oyuncuData[playerid][oPos][1], oyuncuData[playerid][oPos][2]);
		mysql_format(g_SQL, query, sizeof(query), "UPDATE `oyuncular` SET `SonLokasyon` = '%e' WHERE `isim` = '%e'", LokasyonBul(oyuncuData[playerid][oPos][0], oyuncuData[playerid][oPos][1], oyuncuData[playerid][oPos][2]), OyuncuIsim(playerid, 1));
		mysql_query(g_SQL, query);
		return 1;
	}

	stock UyusturucuKullan(playerid, tur)
	{
		oyuncuData[playerid][oBagimlilikTimer] = 6;
		new kalite;

		switch(tur)
		{
			case 34: kalite = 1;
			case 35: kalite = 2;
			case 37: kalite = 2;
			case 38: kalite = 4;
			case 39: kalite = 2;
			case 55: kalite = 2;
			case 56: kalite = 3;
			case 57: kalite = 2;
			case 58: kalite = 4;
			case 59: kalite = 3;
			case 60: kalite = 4;
		}
		switch(kalite)
		{
			case 1:
			{
				PlayerPlaySound(playerid,1150, 0.0, 0.0, 0.0);
				SetPlayerDrunkLevel(playerid, 10000);
				SetPlayerWeather(playerid, -46);
				oyuncuData[playerid][ouyusturucutimer] = SetTimerEx("uyusturucusurebitir", 30 * 1000, false, "i", playerid);
				SunucuMesaji(playerid, "Birinci kaliteden bir uyuþturucu kullandýn, etkisinin geçmesi biraz zaman alabilir.");
			}
			case 2:
			{
				PlayerPlaySound(playerid,1150, 0.0, 0.0, 0.0);
				SetPlayerDrunkLevel(playerid, 15000);
				SetPlayerWeather(playerid, -46);
				oyuncuData[playerid][ouyusturucutimer] = SetTimerEx("uyusturucusurebitir", 45 * 1000, false, "i", playerid);
				SunucuMesaji(playerid, "Ýkinci kaliteden bir uyuþturucu kullandýn, etkisinin geçmesi normalden uzun sürebilir.");
			}
			case 3:
			{
				PlayerPlaySound(playerid,1150, 0.0, 0.0, 0.0);
				SetPlayerDrunkLevel(playerid, 20000);
				SetPlayerWeather(playerid, -46);
				oyuncuData[playerid][ouyusturucutimer] = SetTimerEx("uyusturucusurebitir", 60 * 1000, false, "i", playerid);
				SunucuMesaji(playerid, "Üçüncü kaliteden bir uyuþturucu kullandýn, etkisinin geçmesi uzun sürebilir.");
			}
			case 4:
			{
				PlayerPlaySound(playerid,1150, 0.0, 0.0, 0.0);
				SetPlayerDrunkLevel(playerid, 25000);
				SetPlayerWeather(playerid, -46);
				oyuncuData[playerid][ouyusturucutimer] = SetTimerEx("uyusturucusurebitir", 90 * 1000, false, "i", playerid);
				SunucuMesaji(playerid, "Dördüncü kaliteden bir uyuþturucu kullandýn, etkisinin geçmesi epey uzun sürebilir.");
			}
		}
		return 1;
	}

	stock Bos_DorseCek()
	{
		new aracid = INVALID_VEHICLE_ID;
		foreach(new i : Araclar)
		{
			if(AracBilgi[i][aracDorseKullanim] == false)
			{
				switch(AracBilgi[i][aracModel])
				{
					case 435, 450, 584, 591: aracid = i;
				}
			}
		}
		return aracid;
	}

	stock SoyunmaKabiniYakin(playerid)
	{
		if(IsPlayerInRangeOfPoint(playerid, 4.0, 669.1903,-1867.2380,5.4537) || IsPlayerInRangeOfPoint(playerid, 4.0, 393.4989,-1744.4819,6.5804))
			return 1;
		else return 0;
	}

	stock BalikTutmaYakin(playerid)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, 127.4211,-1956.4722,5.7917) || IsPlayerInRangeOfPoint(playerid, 2.0, 128.5677,-1958.7454,5.7545) || IsPlayerInRangeOfPoint(playerid, 2.0, 129.5927,-1960.7712,5.7212) || IsPlayerInRangeOfPoint(playerid, 2.0, 130.4194,-1962.4041,5.6944))
			return 1;
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 131.1083,-1963.7615,5.6720) || IsPlayerInRangeOfPoint(playerid, 2.0, 131.7414,-1965.0186,5.6514) || IsPlayerInRangeOfPoint(playerid, 2.0, 132.5551,-1966.6173,5.6249))
			return 1;
		else return 0;
	}

	stock IsyeriDekorDegistir(playerid, i, dekorid)
	{
		switch(dekorid)
		{
			case 0:
			{
				IsyeriBilgi[i][isyeriIcPos][0] = 1412.639892;
				IsyeriBilgi[i][isyeriIcPos][1] = -1.787510;
				IsyeriBilgi[i][isyeriIcPos][2] = 1000.924377;
				IsyeriBilgi[i][isyeriIcPos][3] = 90.4601;
				IsyeriBilgi[i][isyeriInterior] = 1;			
				IsyeriBilgi[i][isyeriTur] = 1;
				IsyeriBilgi[i][isyeriDurum] = 1;
				Isyeri_Yenile(i);
				Isyeri_Kaydet(i);
				SunucuMesaji(playerid, "Dekor baþarýyla deðiþtirildi, yeni dekor ID: %d", dekorid);
				Log_Kaydet("loglar/isyeri_log.txt", "[%s] %s, %d ID'li isyerine dekor satin aldi. Yeni dekor: %d", Tarih(), OyuncuIsim(playerid), i, dekorid);
			}
			case 1:
			{
				if(oyuncuData[playerid][oPara] < 55000) return hataMesaji(playerid, "Dekor deðiþimi için yeterli miktarda paran yok.");
				IsyeriBilgi[i][isyeriIcPos][0] = 2585.8577;
				IsyeriBilgi[i][isyeriIcPos][1] = 1437.1796;
				IsyeriBilgi[i][isyeriIcPos][2] = 1800.9688;
				IsyeriBilgi[i][isyeriIcPos][3] = 178.3063;
				IsyeriBilgi[i][isyeriInterior] = 1;
				ParaEkle(playerid, -55000);
				IsyeriBilgi[i][isyeriTur] = 1;
				IsyeriBilgi[i][isyeriDurum] = 1;
				Isyeri_Yenile(i);
				Isyeri_Kaydet(i);
				SunucuMesaji(playerid, "Dekor baþarýyla deðiþtirildi, yeni dekor ID: %d", dekorid);
				Log_Kaydet("loglar/isyeri_log.txt", "[%s] %s, %d ID'li isyerine dekor satin aldi. Yeni dekor: %d", Tarih(), OyuncuIsim(playerid), i, dekorid);
			}
			case 2:
			{
				if(oyuncuData[playerid][oPara] < 50000) return hataMesaji(playerid, "Dekor deðiþimi için yeterli miktarda paran yok.");
				IsyeriBilgi[i][isyeriIcPos][0] = -25.9014;
				IsyeriBilgi[i][isyeriIcPos][1] = -187.4066;
				IsyeriBilgi[i][isyeriIcPos][2] = 1003.5469;
				IsyeriBilgi[i][isyeriIcPos][3] = 359.0781;
				IsyeriBilgi[i][isyeriInterior] = 17;
				ParaEkle(playerid, -50000);
				IsyeriBilgi[i][isyeriTur] = 1;
				IsyeriBilgi[i][isyeriDurum] = 1;
				Isyeri_Yenile(i);
				Isyeri_Kaydet(i);
				SunucuMesaji(playerid, "Dekor baþarýyla deðiþtirildi, yeni dekor ID: %d", dekorid);
				Log_Kaydet("loglar/isyeri_log.txt", "[%s] %s, %d ID'li isyerine dekor satin aldi. Yeni dekor: %d", Tarih(), OyuncuIsim(playerid), i, dekorid);
			}
			case 3:
			{
				if(oyuncuData[playerid][oPara] < 60000) return hataMesaji(playerid, "Dekor deðiþimi için yeterli miktarda paran yok.");
				IsyeriBilgi[i][isyeriIcPos][0] = -2240.5173;
				IsyeriBilgi[i][isyeriIcPos][1] = 137.2318;
				IsyeriBilgi[i][isyeriIcPos][2] = 1035.4141;
				IsyeriBilgi[i][isyeriIcPos][3] = 269.1973;
				IsyeriBilgi[i][isyeriInterior] = 6;
				ParaEkle(playerid, -60000);
				IsyeriBilgi[i][isyeriTur] = 1;
				IsyeriBilgi[i][isyeriDurum] = 1;
				Isyeri_Yenile(i);
				Isyeri_Kaydet(i);
				SunucuMesaji(playerid, "Dekor baþarýyla deðiþtirildi, yeni dekor ID: %d", dekorid);
				Log_Kaydet("loglar/isyeri_log.txt", "[%s] %s, %d ID'li isyerine dekor satin aldi. Yeni dekor: %d", Tarih(), OyuncuIsim(playerid), i, dekorid);
			}
			case 4:
			{
				if(oyuncuData[playerid][oPara] < 30000) return hataMesaji(playerid, "Dekor deðiþimi için yeterli miktarda paran yok.");
				IsyeriBilgi[i][isyeriIcPos][0] = 1257.1923;
				IsyeriBilgi[i][isyeriIcPos][1] = 320.4694;
				IsyeriBilgi[i][isyeriIcPos][2] = 1223.8900;
				IsyeriBilgi[i][isyeriIcPos][3] = 0.5279;
				IsyeriBilgi[i][isyeriInterior] = 1;
				ParaEkle(playerid, -30000);
				IsyeriBilgi[i][isyeriTur] = 5;
				IsyeriBilgi[i][isyeriDurum] = 1;
				Isyeri_Yenile(i);
				Isyeri_Kaydet(i);
				SunucuMesaji(playerid, "Dekor baþarýyla deðiþtirildi, yeni dekor ID: %d", dekorid);
				Log_Kaydet("loglar/isyeri_log.txt", "[%s] %s, %d ID'li isyerine dekor satin aldi. Yeni dekor: %d", Tarih(), OyuncuIsim(playerid), i, dekorid);
			}
			case 5:
			{
				if(oyuncuData[playerid][oPara] < 8000) return hataMesaji(playerid, "Dekor deðiþimi için yeterli miktarda paran yok.");
				IsyeriBilgi[i][isyeriIcPos][0] = 987.4043;
				IsyeriBilgi[i][isyeriIcPos][1] = -1522.6591;
				IsyeriBilgi[i][isyeriIcPos][2] = 2200.7690;
				IsyeriBilgi[i][isyeriIcPos][3] = 89.9479;
				IsyeriBilgi[i][isyeriInterior] = 1;
				ParaEkle(playerid, -8000);
				IsyeriBilgi[i][isyeriTur] = 6;
				IsyeriBilgi[i][isyeriDurum] = 1;
				Isyeri_Yenile(i);
				Isyeri_Kaydet(i);
				SunucuMesaji(playerid, "Dekor baþarýyla deðiþtirildi, yeni dekor ID: %d", dekorid);
				Log_Kaydet("loglar/isyeri_log.txt", "[%s] %s, %d ID'li isyerine dekor satin aldi. Yeni dekor: %d", Tarih(), OyuncuIsim(playerid), i, dekorid);
			}
			case 6:
			{
				if(oyuncuData[playerid][oPara] < 12000) return hataMesaji(playerid, "Dekor deðiþimi için yeterli miktarda paran yok.");
				IsyeriBilgi[i][isyeriIcPos][0] = 1553.6416;
				IsyeriBilgi[i][isyeriIcPos][1] = -1185.7837;
				IsyeriBilgi[i][isyeriIcPos][2] = 1501.1851;
				IsyeriBilgi[i][isyeriIcPos][3] = 179.4920;
				IsyeriBilgi[i][isyeriInterior] = 1;
				ParaEkle(playerid, -12000);
				IsyeriBilgi[i][isyeriTur] = 2;
				IsyeriBilgi[i][isyeriDurum] = 1;
				Isyeri_Yenile(i);
				Isyeri_Kaydet(i);
				SunucuMesaji(playerid, "Dekor baþarýyla deðiþtirildi, yeni dekor ID: %d", dekorid);
				Log_Kaydet("loglar/isyeri_log.txt", "[%s] %s, %d ID'li isyerine dekor satin aldi. Yeni dekor: %d", Tarih(), OyuncuIsim(playerid), i, dekorid);
			}
			case 7:
			{
				if(oyuncuData[playerid][oPara] < 40000) return hataMesaji(playerid, "Dekor deðiþimi için yeterli miktarda paran yok.");
				IsyeriBilgi[i][isyeriIcPos][0] = 2616.5344;
				IsyeriBilgi[i][isyeriIcPos][1] = -797.2861;
				IsyeriBilgi[i][isyeriIcPos][2] = 985.8245;
				IsyeriBilgi[i][isyeriIcPos][3] = 314.8533;
				IsyeriBilgi[i][isyeriInterior] = 1;
				ParaEkle(playerid, -40000);
				IsyeriBilgi[i][isyeriTur] = 5;
				IsyeriBilgi[i][isyeriDurum] = 1;
				Isyeri_Yenile(i);
				Isyeri_Kaydet(i);
				SunucuMesaji(playerid, "Dekor baþarýyla deðiþtirildi, yeni dekor ID: %d", dekorid);
				Log_Kaydet("loglar/isyeri_log.txt", "[%s] %s, %d ID'li isyerine dekor satin aldi. Yeni dekor: %d", Tarih(), OyuncuIsim(playerid), i, dekorid);
			}
			case 8:
			{
				if(oyuncuData[playerid][oPara] < 20000) return hataMesaji(playerid, "Dekor deðiþimi için yeterli miktarda paran yok.");
				IsyeriBilgi[i][isyeriIcPos][0] = -456.5024;
				IsyeriBilgi[i][isyeriIcPos][1] = -278.0218;
				IsyeriBilgi[i][isyeriIcPos][2] = 4021.8850;
				IsyeriBilgi[i][isyeriIcPos][3] = 271.9027;
				IsyeriBilgi[i][isyeriInterior] = 1;
				ParaEkle(playerid, -20000);
				IsyeriBilgi[i][isyeriTur] = 5;
				IsyeriBilgi[i][isyeriDurum] = 1;
				Isyeri_Yenile(i);
				Isyeri_Kaydet(i);
				SunucuMesaji(playerid, "Dekor baþarýyla deðiþtirildi, yeni dekor ID: %d", dekorid);
				Log_Kaydet("loglar/isyeri_log.txt", "[%s] %s, %d ID'li isyerine dekor satin aldi. Yeni dekor: %d", Tarih(), OyuncuIsim(playerid), i, dekorid);
			}
			case 9:
			{
				if(oyuncuData[playerid][oPara] < 10000) return hataMesaji(playerid, "Dekor deðiþimi için yeterli miktarda paran yok.");
				IsyeriBilgi[i][isyeriIcPos][0] = 2588.5332;
				IsyeriBilgi[i][isyeriIcPos][1] = -1644.1908;
				IsyeriBilgi[i][isyeriIcPos][2] = 1358.4089;
				IsyeriBilgi[i][isyeriIcPos][3] = 180.7686;
				IsyeriBilgi[i][isyeriInterior] = 1;
				ParaEkle(playerid, -10000);
				IsyeriBilgi[i][isyeriTur] = 5;
				IsyeriBilgi[i][isyeriDurum] = 1;
				Isyeri_Yenile(i);
				Isyeri_Kaydet(i);
				SunucuMesaji(playerid, "Dekor baþarýyla deðiþtirildi, yeni dekor ID: %d", dekorid);
				Log_Kaydet("loglar/isyeri_log.txt", "[%s] %s, %d ID'li isyerine dekor satin aldi. Yeni dekor: %d", Tarih(), OyuncuIsim(playerid), i, dekorid);
			}
			case 10:
			{
				if(oyuncuData[playerid][oPara] < 65000) return hataMesaji(playerid, "Dekor deðiþimi için yeterli miktarda paran yok.");
				IsyeriBilgi[i][isyeriIcPos][0] = 184.2373;
				IsyeriBilgi[i][isyeriIcPos][1] = 1928.1786;
				IsyeriBilgi[i][isyeriIcPos][2] = 2050.8320;
				IsyeriBilgi[i][isyeriIcPos][3] = 90.1678;
				IsyeriBilgi[i][isyeriInterior] = 1;
				ParaEkle(playerid, -65000);
				IsyeriBilgi[i][isyeriTur] = 1;
				IsyeriBilgi[i][isyeriDurum] = 1;
				Isyeri_Yenile(i);
				Isyeri_Kaydet(i);
				SunucuMesaji(playerid, "Dekor baþarýyla deðiþtirildi, yeni dekor ID: %d", dekorid);
				Log_Kaydet("loglar/isyeri_log.txt", "[%s] %s, %d ID'li isyerine dekor satin aldi. Yeni dekor: %d", Tarih(), OyuncuIsim(playerid), i, dekorid);
			}
			case 11:
			{
				if(oyuncuData[playerid][oPara] < 40000) return hataMesaji(playerid, "Dekor deðiþimi için yeterli miktarda paran yok.");
				IsyeriBilgi[i][isyeriIcPos][0] = 2333.8208;
				IsyeriBilgi[i][isyeriIcPos][1] = -364.1960;
				IsyeriBilgi[i][isyeriIcPos][2] = 1457.6578;
				IsyeriBilgi[i][isyeriIcPos][3] = 89.2746;
				IsyeriBilgi[i][isyeriInterior] = 1;
				ParaEkle(playerid, -40000);
				IsyeriBilgi[i][isyeriTur] = 5;
				IsyeriBilgi[i][isyeriDurum] = 1;
				Isyeri_Yenile(i);
				Isyeri_Kaydet(i);
				SunucuMesaji(playerid, "Dekor baþarýyla deðiþtirildi, yeni dekor ID: %d", dekorid);
				Log_Kaydet("loglar/isyeri_log.txt", "[%s] %s, %d ID'li isyerine dekor satin aldi. Yeni dekor: %d", Tarih(), OyuncuIsim(playerid), i, dekorid);
			}
			case 12:
			{
				if(oyuncuData[playerid][oPara] < 5000) return hataMesaji(playerid, "Dekor deðiþimi için yeterli miktarda paran yok.");
				IsyeriBilgi[i][isyeriIcPos][0] = -204.0623;
				IsyeriBilgi[i][isyeriIcPos][1] = 2003.3226;
				IsyeriBilgi[i][isyeriIcPos][2] = 3301.0488;
				IsyeriBilgi[i][isyeriIcPos][3] = 178.8653;
				IsyeriBilgi[i][isyeriInterior] = 1;
				ParaEkle(playerid, -5000);
				IsyeriBilgi[i][isyeriTur] = 8;
				IsyeriBilgi[i][isyeriDurum] = 1;
				Isyeri_Yenile(i);
				Isyeri_Kaydet(i);
				SunucuMesaji(playerid, "Dekor baþarýyla deðiþtirildi, yeni dekor ID: %d", dekorid);
				Log_Kaydet("loglar/isyeri_log.txt", "[%s] %s, %d ID'li isyerine dekor satin aldi. Yeni dekor: %d", Tarih(), OyuncuIsim(playerid), i, dekorid);
			}
			case 13:
			{
				if(oyuncuData[playerid][oPara] < 8000) return hataMesaji(playerid, "Dekor deðiþimi için yeterli miktarda paran yok.");
				IsyeriBilgi[i][isyeriIcPos][0] = 299.6014;
				IsyeriBilgi[i][isyeriIcPos][1] = 217.9542;
				IsyeriBilgi[i][isyeriIcPos][2] = 2200.9648;
				IsyeriBilgi[i][isyeriIcPos][3] = 358.4538;
				IsyeriBilgi[i][isyeriInterior] = 1;
				ParaEkle(playerid, -8000);
				IsyeriBilgi[i][isyeriTur] = 8;
				IsyeriBilgi[i][isyeriDurum] = 1;
				Isyeri_Yenile(i);
				Isyeri_Kaydet(i);
				SunucuMesaji(playerid, "Dekor baþarýyla deðiþtirildi, yeni dekor ID: %d", dekorid);
				Log_Kaydet("loglar/isyeri_log.txt", "[%s] %s, %d ID'li isyerine dekor satin aldi. Yeni dekor: %d", Tarih(), OyuncuIsim(playerid), i, dekorid);
			}
			case 14:
			{
				if(oyuncuData[playerid][oPara] < 27000) return hataMesaji(playerid, "Dekor deðiþimi için yeterli miktarda paran yok.");
				IsyeriBilgi[i][isyeriIcPos][0] = 258.9801;
				IsyeriBilgi[i][isyeriIcPos][1] = 1195.9720;
				IsyeriBilgi[i][isyeriIcPos][2] = 2601.0859;
				IsyeriBilgi[i][isyeriIcPos][3] = 359.0804;
				IsyeriBilgi[i][isyeriInterior] = 1;
				ParaEkle(playerid, -27000);
				IsyeriBilgi[i][isyeriTur] = 5;
				IsyeriBilgi[i][isyeriDurum] = 1;
				Isyeri_Yenile(i);
				Isyeri_Kaydet(i);
				SunucuMesaji(playerid, "Dekor baþarýyla deðiþtirildi, yeni dekor ID: %d", dekorid);
				Log_Kaydet("loglar/isyeri_log.txt", "[%s] %s, %d ID'li isyerine dekor satin aldi. Yeni dekor: %d", Tarih(), OyuncuIsim(playerid), i, dekorid);
			}
			case 15:
			{
				if(oyuncuData[playerid][oPara] < 10000) return hataMesaji(playerid, "Dekor deðiþimi için yeterli miktarda paran yok.");
				IsyeriBilgi[i][isyeriIcPos][0] = 721.6005;
				IsyeriBilgi[i][isyeriIcPos][1] = 1474.8303;
				IsyeriBilgi[i][isyeriIcPos][2] = 3001.0938;
				IsyeriBilgi[i][isyeriIcPos][3] = 88.9610;
				IsyeriBilgi[i][isyeriInterior] = 1;
				ParaEkle(playerid, -10000);
				IsyeriBilgi[i][isyeriTur] = 4;
				IsyeriBilgi[i][isyeriDurum] = 1;
				Isyeri_Yenile(i);
				Isyeri_Kaydet(i);
				SunucuMesaji(playerid, "Dekor baþarýyla deðiþtirildi, yeni dekor ID: %d", dekorid);
				Log_Kaydet("loglar/isyeri_log.txt", "[%s] %s, %d ID'li isyerine dekor satin aldi. Yeni dekor: %d", Tarih(), OyuncuIsim(playerid), i, dekorid);
			}
			case 16:
			{
				if(oyuncuData[playerid][oPara] < 6000) return hataMesaji(playerid, "Dekor deðiþimi için yeterli miktarda paran yok.");
				IsyeriBilgi[i][isyeriIcPos][0] = 995.5729;
				IsyeriBilgi[i][isyeriIcPos][1] = 999.8790;
				IsyeriBilgi[i][isyeriIcPos][2] = 2001.0859;
				IsyeriBilgi[i][isyeriIcPos][3] = 270.6962;
				IsyeriBilgi[i][isyeriInterior] = 1;
				ParaEkle(playerid, -6000);
				IsyeriBilgi[i][isyeriTur] = 6;
				IsyeriBilgi[i][isyeriDurum] = 1;
				Isyeri_Yenile(i);
				Isyeri_Kaydet(i);
				SunucuMesaji(playerid, "Dekor baþarýyla deðiþtirildi, yeni dekor ID: %d", dekorid);
				Log_Kaydet("loglar/isyeri_log.txt", "[%s] %s, %d ID'li isyerine dekor satin aldi. Yeni dekor: %d", Tarih(), OyuncuIsim(playerid), i, dekorid);
			}
			case 17:
			{
				if(oyuncuData[playerid][oPara] < 13000) return hataMesaji(playerid, "Dekor deðiþimi için yeterli miktarda paran yok.");
				IsyeriBilgi[i][isyeriIcPos][0] = 2158.7026;
				IsyeriBilgi[i][isyeriIcPos][1] = -1736.7563;
				IsyeriBilgi[i][isyeriIcPos][2] = 3001.0859;
				IsyeriBilgi[i][isyeriIcPos][3] = 87.1042;
				IsyeriBilgi[i][isyeriInterior] = 1;
				ParaEkle(playerid, -13000);
				IsyeriBilgi[i][isyeriTur] = 8;
				IsyeriBilgi[i][isyeriDurum] = 1;
				Isyeri_Yenile(i);
				Isyeri_Kaydet(i);
				SunucuMesaji(playerid, "Dekor baþarýyla deðiþtirildi, yeni dekor ID: %d", dekorid);
				Log_Kaydet("loglar/isyeri_log.txt", "[%s] %s, %d ID'li isyerine dekor satin aldi. Yeni dekor: %d", Tarih(), OyuncuIsim(playerid), i, dekorid);
			}
			case 18:
			{
				if(oyuncuData[playerid][oPara] < 7000) return hataMesaji(playerid, "Dekor deðiþimi için yeterli miktarda paran yok.");
				IsyeriBilgi[i][isyeriIcPos][0] = 2015.7529;
				IsyeriBilgi[i][isyeriIcPos][1] = 2675.6033;
				IsyeriBilgi[i][isyeriIcPos][2] = 2067.8679;
				IsyeriBilgi[i][isyeriIcPos][3] = 269.1999;
				IsyeriBilgi[i][isyeriInterior] = 1;
				ParaEkle(playerid, -7000);
				IsyeriBilgi[i][isyeriTur] = 8;
				IsyeriBilgi[i][isyeriDurum] = 1;
				Isyeri_Yenile(i);
				Isyeri_Kaydet(i);
				SunucuMesaji(playerid, "Dekor baþarýyla deðiþtirildi, yeni dekor ID: %d", dekorid);
				Log_Kaydet("loglar/isyeri_log.txt", "[%s] %s, %d ID'li isyerine dekor satin aldi. Yeni dekor: %d", Tarih(), OyuncuIsim(playerid), i, dekorid);
			}
			case 19:
			{
				if(oyuncuData[playerid][oPara] < 35000) return hataMesaji(playerid, "Dekor deðiþimi için yeterli miktarda paran yok.");
				IsyeriBilgi[i][isyeriIcPos][0] = 2500.1636;
				IsyeriBilgi[i][isyeriIcPos][1] = -2040.7096;
				IsyeriBilgi[i][isyeriIcPos][2] = 1366.3510;
				IsyeriBilgi[i][isyeriIcPos][3] = 267.7788;
				IsyeriBilgi[i][isyeriInterior] = 1;
				ParaEkle(playerid, -35000);
				IsyeriBilgi[i][isyeriTur] = 5;
				IsyeriBilgi[i][isyeriDurum] = 1;
				Isyeri_Yenile(i);
				Isyeri_Kaydet(i);
				SunucuMesaji(playerid, "Dekor baþarýyla deðiþtirildi, yeni dekor ID: %d", dekorid);
				Log_Kaydet("loglar/isyeri_log.txt", "[%s] %s, %d ID'li isyerine dekor satin aldi. Yeni dekor: %d", Tarih(), OyuncuIsim(playerid), i, dekorid);
			}
			case 20:
			{
				if(oyuncuData[playerid][oPara] < 35000) return hataMesaji(playerid, "Dekor deðiþimi için yeterli miktarda paran yok.");
				IsyeriBilgi[i][isyeriIcPos][0] = 1973.0419;
				IsyeriBilgi[i][isyeriIcPos][1] = 1342.8560;
				IsyeriBilgi[i][isyeriIcPos][2] = 247.6053;
				IsyeriBilgi[i][isyeriIcPos][3] = 178.6191;
				IsyeriBilgi[i][isyeriInterior] = 1;
				ParaEkle(playerid, -35000);
				IsyeriBilgi[i][isyeriTur] = 5;
				IsyeriBilgi[i][isyeriDurum] = 1;
				Isyeri_Yenile(i);
				Isyeri_Kaydet(i);
				SunucuMesaji(playerid, "Dekor baþarýyla deðiþtirildi, yeni dekor ID: %d", dekorid);
				Log_Kaydet("loglar/isyeri_log.txt", "[%s] %s, %d ID'li isyerine dekor satin aldi. Yeni dekor: %d", Tarih(), OyuncuIsim(playerid), i, dekorid);
			}
			case 21:
			{
				if(oyuncuData[playerid][oPara] < 15000) return hataMesaji(playerid, "Dekor deðiþimi için yeterli miktarda paran yok.");
				IsyeriBilgi[i][isyeriIcPos][0] = -1794.6393;
				IsyeriBilgi[i][isyeriIcPos][1] = 1230.8223;
				IsyeriBilgi[i][isyeriIcPos][2] = 20.6711;
				IsyeriBilgi[i][isyeriIcPos][3] = 0.0173;
				IsyeriBilgi[i][isyeriInterior] = 1;
				ParaEkle(playerid, -15000);
				IsyeriBilgi[i][isyeriTur] = 2;
				IsyeriBilgi[i][isyeriDurum] = 1;
				Isyeri_Yenile(i);
				Isyeri_Kaydet(i);
				SunucuMesaji(playerid, "Dekor baþarýyla deðiþtirildi, yeni dekor ID: %d", dekorid);
				Log_Kaydet("loglar/isyeri_log.txt", "[%s] %s, %d ID'li isyerine dekor satin aldi. Yeni dekor: %d", Tarih(), OyuncuIsim(playerid), i, dekorid);
			}
			case 22:
			{
				if(oyuncuData[playerid][oPara] < 10000) return hataMesaji(playerid, "Dekor deðiþimi için yeterli miktarda paran yok.");
				IsyeriBilgi[i][isyeriIcPos][0] = 30.0115;
				IsyeriBilgi[i][isyeriIcPos][1] = 42.3846;
				IsyeriBilgi[i][isyeriIcPos][2] = 1000.0859;
				IsyeriBilgi[i][isyeriIcPos][3] = 179.2456;
				IsyeriBilgi[i][isyeriInterior] = 1;
				ParaEkle(playerid, -10000);
				IsyeriBilgi[i][isyeriTur] = 6;
				IsyeriBilgi[i][isyeriDurum] = 1;
				Isyeri_Yenile(i);
				Isyeri_Kaydet(i);
				SunucuMesaji(playerid, "Dekor baþarýyla deðiþtirildi, yeni dekor ID: %d", dekorid);
				Log_Kaydet("loglar/isyeri_log.txt", "[%s] %s, %d ID'li isyerine dekor satin aldi. Yeni dekor: %d", Tarih(), OyuncuIsim(playerid), i, dekorid);
			}
			case 23:
			{
				if(oyuncuData[playerid][oPara] < 15000) return hataMesaji(playerid, "Dekor deðiþimi için yeterli miktarda paran yok.");
				IsyeriBilgi[i][isyeriIcPos][0] = 326.1359;
				IsyeriBilgi[i][isyeriIcPos][1] = -1513.8506;
				IsyeriBilgi[i][isyeriIcPos][2] = 4.1759;
				IsyeriBilgi[i][isyeriIcPos][3] = 86.8584;
				IsyeriBilgi[i][isyeriInterior] = 1;
				ParaEkle(playerid, -15000);
				IsyeriBilgi[i][isyeriTur] = 6;
				IsyeriBilgi[i][isyeriDurum] = 1;
				Isyeri_Yenile(i);
				Isyeri_Kaydet(i);
				SunucuMesaji(playerid, "Dekor baþarýyla deðiþtirildi, yeni dekor ID: %d", dekorid);
				Log_Kaydet("loglar/isyeri_log.txt", "[%s] %s, %d ID'li isyerine dekor satin aldi. Yeni dekor: %d", Tarih(), OyuncuIsim(playerid), i, dekorid);
			}
			/*case 24:
			{
				if(oyuncuData[playerid][oPara] < 20000) return hataMesaji(playerid, "Dekor deðiþimi için yeterli miktarda paran yok.");
				IsyeriBilgi[i][isyeriIcPos][0] = 2318.2290;
				IsyeriBilgi[i][isyeriIcPos][1] = -1786.7961;
				IsyeriBilgi[i][isyeriIcPos][2] = 1600.7520;
				IsyeriBilgi[i][isyeriIcPos][3] = 179.2456;
				IsyeriBilgi[i][isyeriInterior] = 17;
				ParaEkle(playerid, -20000);
				IsyeriBilgi[i][isyeriTur] = 16;
				IsyeriBilgi[i][isyeriDurum] = 1;
				Isyeri_Yenile(i);
				Isyeri_Kaydet(i);
				SunucuMesaji(playerid, "Dekor baþarýyla deðiþtirildi, yeni dekor ID: %d", dekorid);
				Log_Kaydet("loglar/isyeri_log.txt", "[%s] %s, %d ID'li isyerine dekor satin aldi. Yeni dekor: %d", Tarih(), OyuncuIsim(playerid), i, dekorid);
			}*/
			case 25: // bok gibi cafe
			{
				if(oyuncuData[playerid][oPara] < 20000) return hataMesaji(playerid, "Dekor deðiþimi için yeterli miktarda paran yok.");
				IsyeriBilgi[i][isyeriIcPos][0] = 2360.5813;
				IsyeriBilgi[i][isyeriIcPos][1] = -1512.2488;
				IsyeriBilgi[i][isyeriIcPos][2] = -10.6341;
				IsyeriBilgi[i][isyeriIcPos][3] = 89.1211;
				IsyeriBilgi[i][isyeriInterior] = 0;
				ParaEkle(playerid, -20000);
				IsyeriBilgi[i][isyeriTur] = 2;
				IsyeriBilgi[i][isyeriDurum] = 1;
				Isyeri_Yenile(i);
				Isyeri_Kaydet(i);
				SunucuMesaji(playerid, "Dekor baþarýyla deðiþtirildi, yeni dekor ID: %d", dekorid);
				Log_Kaydet("loglar/isyeri_log.txt", "[%s] %s, %d ID'li isyerine dekor satin aldi. Yeni dekor: %d", Tarih(), OyuncuIsim(playerid), i, dekorid);
			}
			case 26: // bok gibi ofis
			{
				if(oyuncuData[playerid][oPara] < 40000) return hataMesaji(playerid, "Dekor deðiþimi için yeterli miktarda paran yok.");
				IsyeriBilgi[i][isyeriIcPos][0] = 850.5330;
				IsyeriBilgi[i][isyeriIcPos][1] = -973.5475;
				IsyeriBilgi[i][isyeriIcPos][2] = 1090.1021;
				IsyeriBilgi[i][isyeriIcPos][3] = 87.3488;
				IsyeriBilgi[i][isyeriInterior] = 0;
				ParaEkle(playerid, -40000);
				IsyeriBilgi[i][isyeriTur] = 6;
				IsyeriBilgi[i][isyeriDurum] = 1;
				Isyeri_Yenile(i);
				Isyeri_Kaydet(i);
				SunucuMesaji(playerid, "Dekor baþarýyla deðiþtirildi, yeni dekor ID: %d", dekorid);
				Log_Kaydet("loglar/isyeri_log.txt", "[%s] %s, %d ID'li isyerine dekor satin aldi. Yeni dekor: %d", Tarih(), OyuncuIsim(playerid), i, dekorid);
			}
			case 27: // çinli mekan efso
			{
				if(oyuncuData[playerid][oPara] < 60000) return hataMesaji(playerid, "Dekor deðiþimi için yeterli miktarda paran yok.");
				IsyeriBilgi[i][isyeriIcPos][0] = -1418.8151;
				IsyeriBilgi[i][isyeriIcPos][1] = 2100.7944;
				IsyeriBilgi[i][isyeriIcPos][2] = 1502.0225;
				IsyeriBilgi[i][isyeriIcPos][3] = 183.1304;
				IsyeriBilgi[i][isyeriInterior] = 0;
				ParaEkle(playerid, -60000);
				IsyeriBilgi[i][isyeriTur] = 2;
				IsyeriBilgi[i][isyeriDurum] = 1;
				Isyeri_Yenile(i);
				Isyeri_Kaydet(i);
				SunucuMesaji(playerid, "Dekor baþarýyla deðiþtirildi, yeni dekor ID: %d", dekorid);
				Log_Kaydet("loglar/isyeri_log.txt", "[%s] %s, %d ID'li isyerine dekor satin aldi. Yeni dekor: %d", Tarih(), OyuncuIsim(playerid), i, dekorid);
			}
			case 28: // deðiþik bir lab
			{
				if(oyuncuData[playerid][oPara] < 50000) return hataMesaji(playerid, "Dekor deðiþimi için yeterli miktarda paran yok.");
				IsyeriBilgi[i][isyeriIcPos][0] = 770.5823;
				IsyeriBilgi[i][isyeriIcPos][1] = -1116.3921;
				IsyeriBilgi[i][isyeriIcPos][2] = -43.2600;
				IsyeriBilgi[i][isyeriIcPos][3] = 94.4448;
				IsyeriBilgi[i][isyeriInterior] = 0;
				ParaEkle(playerid, -50000);
				IsyeriBilgi[i][isyeriTur] = 8;
				IsyeriBilgi[i][isyeriDurum] = 1;
				Isyeri_Yenile(i);
				Isyeri_Kaydet(i);
				SunucuMesaji(playerid, "Dekor baþarýyla deðiþtirildi, yeni dekor ID: %d", dekorid);
				Log_Kaydet("loglar/isyeri_log.txt", "[%s] %s, %d ID'li isyerine dekor satin aldi. Yeni dekor: %d", Tarih(), OyuncuIsim(playerid), i, dekorid);
			}
			case 29: // eczane
			{
				if(oyuncuData[playerid][oPara] < 10000) return hataMesaji(playerid, "Dekor deðiþimi için yeterli miktarda paran yok.");
				IsyeriBilgi[i][isyeriIcPos][0] = -32.6286;
				IsyeriBilgi[i][isyeriIcPos][1] = -10.3018;
				IsyeriBilgi[i][isyeriIcPos][2] = 2003.6420;
				IsyeriBilgi[i][isyeriIcPos][3] = 357.2704;
				IsyeriBilgi[i][isyeriInterior] = 0;
				ParaEkle(playerid, -10000);
				IsyeriBilgi[i][isyeriTur] = 8;
				IsyeriBilgi[i][isyeriDurum] = 1;
				Isyeri_Yenile(i);
				Isyeri_Kaydet(i);
				SunucuMesaji(playerid, "Dekor baþarýyla deðiþtirildi, yeni dekor ID: %d", dekorid);
				Log_Kaydet("loglar/isyeri_log.txt", "[%s] %s, %d ID'li isyerine dekor satin aldi. Yeni dekor: %d", Tarih(), OyuncuIsim(playerid), i, dekorid);
			}
			case 30: // lüks bar
			{
				if(oyuncuData[playerid][oPara] < 50000) return hataMesaji(playerid, "Dekor deðiþimi için yeterli miktarda paran yok.");
				IsyeriBilgi[i][isyeriIcPos][0] = 2009.3235;
				IsyeriBilgi[i][isyeriIcPos][1] = 1550.4850;
				IsyeriBilgi[i][isyeriIcPos][2] = 3020.1873;
				IsyeriBilgi[i][isyeriIcPos][3] = 88.3327;
				IsyeriBilgi[i][isyeriInterior] = 0;
				ParaEkle(playerid, -50000);
				IsyeriBilgi[i][isyeriTur] = 5;
				IsyeriBilgi[i][isyeriDurum] = 1;
				Isyeri_Yenile(i);
				Isyeri_Kaydet(i);
				SunucuMesaji(playerid, "Dekor baþarýyla deðiþtirildi, yeni dekor ID: %d", dekorid);
				Log_Kaydet("loglar/isyeri_log.txt", "[%s] %s, %d ID'li isyerine dekor satin aldi. Yeni dekor: %d", Tarih(), OyuncuIsim(playerid), i, dekorid);
			}
			case 31: // mc bar
			{
				if(oyuncuData[playerid][oPara] < 60000) return hataMesaji(playerid, "Dekor deðiþimi için yeterli miktarda paran yok.");
				IsyeriBilgi[i][isyeriIcPos][0] = -1584.4955;
				IsyeriBilgi[i][isyeriIcPos][1] = 1671.5781;
				IsyeriBilgi[i][isyeriIcPos][2] = 629.2584;
				IsyeriBilgi[i][isyeriIcPos][3] = 178.2084;
				IsyeriBilgi[i][isyeriInterior] = 0;
				ParaEkle(playerid, -60000);
				IsyeriBilgi[i][isyeriTur] = 5;
				IsyeriBilgi[i][isyeriDurum] = 1;
				Isyeri_Yenile(i);
				Isyeri_Kaydet(i);
				SunucuMesaji(playerid, "Dekor baþarýyla deðiþtirildi, yeni dekor ID: %d", dekorid);
				Log_Kaydet("loglar/isyeri_log.txt", "[%s] %s, %d ID'li isyerine dekor satin aldi. Yeni dekor: %d", Tarih(), OyuncuIsim(playerid), i, dekorid);
			}
			case 32: // modern bar bok gibi
			{
				if(oyuncuData[playerid][oPara] < 25000) return hataMesaji(playerid, "Dekor deðiþimi için yeterli miktarda paran yok.");
				IsyeriBilgi[i][isyeriIcPos][0] = 253.3244;
				IsyeriBilgi[i][isyeriIcPos][1] = 1752.7479;
				IsyeriBilgi[i][isyeriIcPos][2] = 1521.5530;
				IsyeriBilgi[i][isyeriIcPos][3] = 90.4482;
				IsyeriBilgi[i][isyeriInterior] = 0;
				ParaEkle(playerid, -25000);
				IsyeriBilgi[i][isyeriTur] = 5;
				IsyeriBilgi[i][isyeriDurum] = 1;
				Isyeri_Yenile(i);
				Isyeri_Kaydet(i);
				SunucuMesaji(playerid, "Dekor baþarýyla deðiþtirildi, yeni dekor ID: %d", dekorid);
				Log_Kaydet("loglar/isyeri_log.txt", "[%s] %s, %d ID'li isyerine dekor satin aldi. Yeni dekor: %d", Tarih(), OyuncuIsim(playerid), i, dekorid);
			}
			case 33: // pizzacý
			{
				if(oyuncuData[playerid][oPara] < 25000) return hataMesaji(playerid, "Dekor deðiþimi için yeterli miktarda paran yok.");
				IsyeriBilgi[i][isyeriIcPos][0] = 227.6737;
				IsyeriBilgi[i][isyeriIcPos][1] = -89.8475;
				IsyeriBilgi[i][isyeriIcPos][2] = 1001.4940;
				IsyeriBilgi[i][isyeriIcPos][3] = 3.8506;
				IsyeriBilgi[i][isyeriInterior] = 0;
				ParaEkle(playerid, -25000);
				IsyeriBilgi[i][isyeriTur] = 2;
				IsyeriBilgi[i][isyeriDurum] = 1;
				Isyeri_Yenile(i);
				Isyeri_Kaydet(i);
				SunucuMesaji(playerid, "Dekor baþarýyla deðiþtirildi, yeni dekor ID: %d", dekorid);
				Log_Kaydet("loglar/isyeri_log.txt", "[%s] %s, %d ID'li isyerine dekor satin aldi. Yeni dekor: %d", Tarih(), OyuncuIsim(playerid), i, dekorid);
			}
			case 34: // ravenite
			{
				if(oyuncuData[playerid][oPara] < 50000) return hataMesaji(playerid, "Dekor deðiþimi için yeterli miktarda paran yok.");
				IsyeriBilgi[i][isyeriIcPos][0] = 1049.5066;
				IsyeriBilgi[i][isyeriIcPos][1] = 2822.5989;
				IsyeriBilgi[i][isyeriIcPos][2] = 917.1140;
				IsyeriBilgi[i][isyeriIcPos][3] = 86.3013;
				IsyeriBilgi[i][isyeriInterior] = 0;
				ParaEkle(playerid, -50000);
				IsyeriBilgi[i][isyeriTur] = 5;
				IsyeriBilgi[i][isyeriDurum] = 1;
				Isyeri_Yenile(i);
				Isyeri_Kaydet(i);
				SunucuMesaji(playerid, "Dekor baþarýyla deðiþtirildi, yeni dekor ID: %d", dekorid);
				Log_Kaydet("loglar/isyeri_log.txt", "[%s] %s, %d ID'li isyerine dekor satin aldi. Yeni dekor: %d", Tarih(), OyuncuIsim(playerid), i, dekorid);
			}
			case 35: // scavenger
			{
				if(oyuncuData[playerid][oPara] < 15000) return hataMesaji(playerid, "Dekor deðiþimi için yeterli miktarda paran yok.");
				IsyeriBilgi[i][isyeriIcPos][0] = 213.8804;
				IsyeriBilgi[i][isyeriIcPos][1] = 1752.1979;
				IsyeriBilgi[i][isyeriIcPos][2] = 3000.8308;
				IsyeriBilgi[i][isyeriIcPos][3] = 6.9874;
				IsyeriBilgi[i][isyeriInterior] = 38;
				ParaEkle(playerid, -15000);
				IsyeriBilgi[i][isyeriTur] = 6;
				IsyeriBilgi[i][isyeriDurum] = 1;
				Isyeri_Yenile(i);
				Isyeri_Kaydet(i);
				SunucuMesaji(playerid, "Dekor baþarýyla deðiþtirildi, yeni dekor ID: %d", dekorid);
				Log_Kaydet("loglar/isyeri_log.txt", "[%s] %s, %d ID'li isyerine dekor satin aldi. Yeni dekor: %d", Tarih(), OyuncuIsim(playerid), i, dekorid);
			}
			case 36: // tek oda ofis
			{
				if(oyuncuData[playerid][oPara] < 7500) return hataMesaji(playerid, "Dekor deðiþimi için yeterli miktarda paran yok.");
				IsyeriBilgi[i][isyeriIcPos][0] = -687.6288;
				IsyeriBilgi[i][isyeriIcPos][1] = 935.9883;
				IsyeriBilgi[i][isyeriIcPos][2] = 3322.2380;
				IsyeriBilgi[i][isyeriIcPos][3] = 3.5318;
				IsyeriBilgi[i][isyeriInterior] = 0;
				ParaEkle(playerid, -7500);
				IsyeriBilgi[i][isyeriTur] = 6;
				IsyeriBilgi[i][isyeriDurum] = 1;
				Isyeri_Yenile(i);
				Isyeri_Kaydet(i);
				SunucuMesaji(playerid, "Dekor baþarýyla deðiþtirildi, yeni dekor ID: %d", dekorid);
				Log_Kaydet("loglar/isyeri_log.txt", "[%s] %s, %d ID'li isyerine dekor satin aldi. Yeni dekor: %d", Tarih(), OyuncuIsim(playerid), i, dekorid);
			}
			case 37: // vice ofis - tahtalý eski
			{
				if(oyuncuData[playerid][oPara] < 20000) return hataMesaji(playerid, "Dekor deðiþimi için yeterli miktarda paran yok.");
				IsyeriBilgi[i][isyeriIcPos][0] = 1018.2837;
				IsyeriBilgi[i][isyeriIcPos][1] = 235.8317;
				IsyeriBilgi[i][isyeriIcPos][2] = 1801.0859;
				IsyeriBilgi[i][isyeriIcPos][3] = 179.8199;
				IsyeriBilgi[i][isyeriInterior] = 0;
				ParaEkle(playerid, -20000);
				IsyeriBilgi[i][isyeriTur] = 6;
				IsyeriBilgi[i][isyeriDurum] = 1;
				Isyeri_Yenile(i);
				Isyeri_Kaydet(i);
				SunucuMesaji(playerid, "Dekor baþarýyla deðiþtirildi, yeni dekor ID: %d", dekorid);
				Log_Kaydet("loglar/isyeri_log.txt", "[%s] %s, %d ID'li isyerine dekor satin aldi. Yeni dekor: %d", Tarih(), OyuncuIsim(playerid), i, dekorid);
			}
			case 38: // yeni ofis dandik
			{
				if(oyuncuData[playerid][oPara] < 10000) return hataMesaji(playerid, "Dekor deðiþimi için yeterli miktarda paran yok.");
				IsyeriBilgi[i][isyeriIcPos][0] = 1551.3093;
				IsyeriBilgi[i][isyeriIcPos][1] = -1226.1772;
				IsyeriBilgi[i][isyeriIcPos][2] = 1089.8669;
				IsyeriBilgi[i][isyeriIcPos][3] = 273.6910;
				IsyeriBilgi[i][isyeriInterior] = 0;
				ParaEkle(playerid, -10000);
				IsyeriBilgi[i][isyeriTur] = 6;
				IsyeriBilgi[i][isyeriDurum] = 1;
				Isyeri_Yenile(i);
				Isyeri_Kaydet(i);
				SunucuMesaji(playerid, "Dekor baþarýyla deðiþtirildi, yeni dekor ID: %d", dekorid);
				Log_Kaydet("loglar/isyeri_log.txt", "[%s] %s, %d ID'li isyerine dekor satin aldi. Yeni dekor: %d", Tarih(), OyuncuIsim(playerid), i, dekorid);
			}
		}
		return 1;
	}

	stock IsComponentidCompatible( modelid, componentid ) {
		if( componentid == 1025 || componentid == 1073 || componentid == 1074 || componentid == 1075 || componentid == 1076 ||
			componentid == 1077 || componentid == 1078 || componentid == 1079 || componentid == 1080 || componentid == 1081 ||
			componentid == 1082 || componentid == 1083 || componentid == 1084 || componentid == 1085 || componentid == 1096 ||
			componentid == 1097 || componentid == 1098 || componentid == 1087 || componentid == 1086 ) {
			return componentid;
	}

	switch( modelid ) {
		case 400: if( componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 ) return componentid;
		case 401: if( componentid == 1005 || componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 114 || componentid == 1020 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
		case 402: if( componentid == 1009 || componentid == 1009 || componentid == 1010 ) return componentid;
		case 404: if( componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007) return componentid;
		case 405: if( componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1014 || componentid == 1023 || componentid == 1000) return componentid;
		case 409: if( componentid == 1009 ) return componentid;
		case 410: if( componentid == 1019 || componentid == 1021 || componentid == 1020 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
		case 411: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
		case 412: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
		case 415: if( componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
		case 418: if( componentid == 1020 || componentid == 1021 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1016) return componentid;
		case 419: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
		case 420: if( componentid == 1005 || componentid == 1004 || componentid == 1021 || componentid == 1019 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1003) return componentid;
		case 421: if( componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1023 || componentid == 1016 || componentid == 1000) return componentid;
		case 422: if( componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1017 || componentid == 1007) return componentid;
		case 426: if( componentid == 1005 || componentid == 1004 || componentid == 1021 || componentid == 1019 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003) return componentid;
		case 429: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
		case 436: if( componentid == 1020 || componentid == 1021 || componentid == 1022 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
		case 438: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
		case 439: if( componentid == 1003 || componentid == 1023 || componentid == 1001 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1017 || componentid == 1007 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1013) return componentid;
		case 442: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
		case 445: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
		case 451: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
		case 458: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
		case 466: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
		case 467: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
		case 474: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
		case 475: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
		case 477: if( componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1017 || componentid == 1007) return componentid;
		case 478: if( componentid == 1005 || componentid == 1004 || componentid == 1012 || componentid == 1020 || componentid == 1021 || componentid == 1022 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
		case 479: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
		case 480: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
		case 489: if( componentid == 1005 || componentid == 1004 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1016 || componentid == 1000) return componentid;
		case 491: if( componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
		case 492: if( componentid == 1005 || componentid == 1004 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1016 || componentid == 1000) return componentid;
		case 496: if( componentid == 1006 || componentid == 1017 || componentid == 1007 || componentid == 1011 || componentid == 1019 || componentid == 1023 || componentid == 1001 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1003 || componentid == 1002 || componentid == 1142 || componentid == 1143 || componentid == 1020) return componentid;
		case 500: if( componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
		case 506: if( componentid == 1009) return componentid;
		case 507: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
		case 516: if( componentid == 1004 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1015 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007) return componentid;
		case 517: if( componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1023 || componentid == 1016 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
		case 518: if( componentid == 1005 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
		case 526: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
		case 527: if( componentid == 1021 || componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1014 || componentid == 1015 || componentid == 1017 || componentid == 1007) return componentid;
		case 529: if( componentid == 1012 || componentid == 1011 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
		case 533: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
		case 534: if( componentid == 1126 || componentid == 1127 || componentid == 1179 || componentid == 1185 || componentid == 1100 || componentid == 1123 || componentid == 1125 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1180 || componentid == 1178 || componentid == 1101 || componentid == 1122 || componentid == 1124 || componentid == 1106) return componentid;
		case 535: if( componentid == 1109 || componentid == 1110 || componentid == 1113 || componentid == 1114 || componentid == 1115 || componentid == 1116 || componentid == 1117 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1120 || componentid == 1118 || componentid == 1121 || componentid == 1119) return componentid;
		case 536: if( componentid == 1104 || componentid == 1105 || componentid == 1182 || componentid == 1181 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1184 || componentid == 1183 || componentid == 1128 || componentid == 1103 || componentid == 1107 || componentid == 1108) return componentid;
		case 540: if( componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007) return componentid;
		case 541: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
		case 542: if( componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1015) return componentid;
		case 545: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
		case 546: if( componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007) return componentid;
		case 547: if( componentid == 1142 || componentid == 1143 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1016 || componentid == 1003 || componentid == 1000) return componentid;
		case 549: if( componentid == 1012 || componentid == 1011 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
		case 550: if( componentid == 1005 || componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003) return componentid;
		case 551: if( componentid == 1005 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1023 || componentid == 1016 || componentid == 1003) return componentid;
		case 555: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
		case 558: if( componentid == 1092 || componentid == 1089 || componentid == 1166 || componentid == 1165 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1168 || componentid == 1167 || componentid == 1088 || componentid == 1091 || componentid == 1164 || componentid == 1163 || componentid == 1094 || componentid == 1090 || componentid == 1095 || componentid == 1093) return componentid;
		case 559: if( componentid == 1065 || componentid == 1066 || componentid == 1160 || componentid == 1173 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1159 || componentid == 1161 || componentid == 1162 || componentid == 1158 || componentid == 1067 || componentid == 1068 || componentid == 1071 || componentid == 1069 || componentid == 1072 || componentid == 1070 || componentid == 1009) return componentid;
		case 560: if( componentid == 1028 || componentid == 1029 || componentid == 1169 || componentid == 1170 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1141 || componentid == 1140 || componentid == 1032 || componentid == 1033 || componentid == 1138 || componentid == 1139 || componentid == 1027 || componentid == 1026 || componentid == 1030 || componentid == 1031) return componentid;
		case 561: if( componentid == 1064 || componentid == 1059 || componentid == 1155 || componentid == 1157 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1154 || componentid == 1156 || componentid == 1055 || componentid == 1061 || componentid == 1058 || componentid == 1060 || componentid == 1062 || componentid == 1056 || componentid == 1063 || componentid == 1057) return componentid;
		case 562: if( componentid == 1034 || componentid == 1037 || componentid == 1171 || componentid == 1172 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1149 || componentid == 1148 || componentid == 1038 || componentid == 1035 || componentid == 1147 || componentid == 1146 || componentid == 1040 || componentid == 1036 || componentid == 1041 || componentid == 1039) return componentid;
		case 565: if( componentid == 1046 || componentid == 1045 || componentid == 1153 || componentid == 1152 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1150 || componentid == 1151 || componentid == 1054 || componentid == 1053 || componentid == 1049 || componentid == 1050 || componentid == 1051 || componentid == 1047 || componentid == 1052 || componentid == 1048) return componentid;
		case 566: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
		case 567: if( componentid == 1129 || componentid == 1132 || componentid == 1189 || componentid == 1188 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1187 || componentid == 1186 || componentid == 1130 || componentid == 1131 || componentid == 1102 || componentid == 1133) return componentid;
		case 575: if( componentid == 1044 || componentid == 1043 || componentid == 1174 || componentid == 1175 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1176 || componentid == 1177 || componentid == 1099 || componentid == 1042) return componentid;
		case 576: if( componentid == 1136 || componentid == 1135 || componentid == 1191 || componentid == 1190 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1192 || componentid == 1193 || componentid == 1137 || componentid == 1134) return componentid;
		case 579: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
		case 580: if( componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007) return componentid;
		case 585: if( componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007) return componentid;
		case 587: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
		case 589: if( componentid == 1005 || componentid == 1004 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1024 || componentid == 1013 || componentid == 1006 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007) return componentid;
		case 600: if( componentid == 1005 || componentid == 1004 || componentid == 1020 || componentid == 1022 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1017 || componentid == 1007) return componentid;
		case 602: if( componentid == 1008 || componentid == 1009 || componentid == 1010) return componentid;
		case 603: if( componentid == 1144 || componentid == 1145 || componentid == 1142 || componentid == 1143 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007) return componentid;
	}
	return false;
}
//==============================================================================
stock GetVehicleCameraPos( vehicleid, &Float:x, &Float:y, &Float:z, Float:xoff=0.0, Float:yoff=0.0, Float:zoff=0.0 ) { // credits Pasha
	new Float:rot;
	GetVehicleZAngle( vehicleid, rot );
	rot = 360 - rot;
	GetVehiclePos( vehicleid, x, y, z );
	x = floatsin( rot, degrees ) * yoff + floatcos( rot, degrees ) * xoff + x;
	y = floatcos( rot, degrees ) * yoff - floatsin( rot, degrees ) * xoff + y;
	z = zoff + z;
}

stock GetVehicleRotation(vehicleid,&Float:rx,&Float:ry,&Float:rz){
	new Float:qw,Float:qx,Float:qy,Float:qz;
	GetVehicleRotationQuat(vehicleid,qw,qx,qy,qz);
	rx = asin(2*qy*qz-2*qx*qw);
	ry = -atan2(qx*qz+qy*qw,0.5-qx*qx-qy*qy);
	rz = -atan2(qx*qy+qz*qw,0.5-qx*qx-qz*qz);
}

stock TarlaIsciKontrol(playerid, ciftlikid) {
	new query[90], Cache:VeriCek, sonuc = 0;
	mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `tarimiscileri` WHERE `oisim` = '%e' AND `ciftlikid` = '%d'", oyuncuData[playerid][oIsim], ciftlikid);
	VeriCek = mysql_query(g_SQL, query);
	if(cache_num_rows())
	{
	 sonuc++;
	}
	cache_delete(VeriCek);	
	return sonuc;
}

stock TarlaEkipmanKontrol(playerid, ekipman) {
if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
{
new aracid = Arac_IDBul(GetPlayerVehicleID(playerid));
if(ekipman == 0)
{
if(GetVehicleModel(aracid) == 531 && GetVehicleModel(GetVehicleTrailer(aracid)) == 610) return true;
}
else if(ekipman == 1)
{
if(GetVehicleModel(aracid) == 532) return true;	
}
}
	return false;		
}

stock GetAracKapasiteIndex(model) {
	new index;
	switch(model) {
		case 482: { index = 0; }
		case 498: { index = 1; }
		case 499: { index = 2; }
	}
	return index;
}

stock EkinKapasiteKontrol(aracid) {
	new query[90], Cache:VeriCek, rows = 0;
	mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `aracekinler` WHERE `aracid` = '%d'", aracid);
	VeriCek = mysql_query(g_SQL, query);
	if(cache_num_rows())
	{
	rows = cache_num_rows();
	}
	cache_delete(VeriCek);
	return rows;		
}

forward AracEkinGoster(playerid, aracid);
public AracEkinGoster(playerid, aracid)
{
	static rows;
	cache_get_row_count(rows);
	if(rows > 0)
	{
		new i = 0, baslik[40], subString[370];
		while(i != rows && i < rows)
		{
			format(subString, sizeof(subString), "%s{C9C936}%s\n", subString, ekinlerveri[vericek_int(i, "ekintur")][ekinisim]);
			i++;
		}
		format(baslik, sizeof(baslik), "%s - Ekinler: {C9C936}%d/%d", AracModel(AracBilgi[aracid][aracModel]), EkinKapasiteKontrol(AracBilgi[aracid][aracID]), faracveri[GetAracKapasiteIndex(AracBilgi[aracid][aracModel])][2]);
		ShowPlayerDialog(playerid, DIALOG_ARAC_EKINLER, DIALOG_STYLE_LIST, baslik, subString, "Seç", "Iptal");
		SetPVarInt(playerid, "ekinaracid", aracid);
		format(subString, sizeof(subString), "%s", EOS);
	} else {
		hataMesaji(playerid, "Bu araçta ekin bulunmuyor.");
	}
	return 1;
}

stock EkinYarat(playerid,ciftlikid) {
	new objeid,vehid = GetPlayerVehicleID(playerid), Float:x,Float:y,Float:z,Float:rx,Float:ry,Float:rz, query[275];
	GetVehiclePos(vehid, x, y, z);
	GetVehicleRotation(vehid, rx,ry,rz);
	objeid = CreateDynamicObject(3409, x, y, z-1.2, rx, ry, rz, 0, 0);
	mysql_format(g_SQL, query, sizeof(query), "INSERT INTO `ekinler` (`ciftlikid`, `objeid`, `x`, `y`, `z`, `rx`, `ry`, `rz`) VALUES('%d', '%d', '%f', '%f', '%f', '%f', '%f', '%f')", ciftlikid, objeid, x,y,z-1.2,rx,ry,rz);
	mysql_query(g_SQL, query);
}

stock UrunYarat(playerid,ciftlikid) {
	new objeid, vehid = GetPlayerVehicleID(playerid), Float:x,Float:y,Float:z, Float:rx,Float:ry,Float:rz, Float:zz, query[300];
	GetPosBehindVehicle(vehid, x, y, z, 0.1);
	GetVehicleRotation(vehid, rx,ry,rz);
	MapAndreas_FindZ_For2DCoord(x,y, zz);
	objeid = CreateDynamicObject(-3004, x, y, (zz+0.70), rx, ry, rz, 0, 0);
	mysql_format(g_SQL, query, sizeof(query), "INSERT INTO `tarimurunleri` (`ciftlikid`, `objeid`, `urun`, `x`, `y`, `z`, `rx`, `ry`, `rz`) VALUES('%d', '%d' , '%d', '%f', '%f', '%f', '%f', '%f', '%f')", ciftlikid, objeid,
	CiftlikInfo[ciftlikid][cUrun], x,y,(zz+0.70),rx,ry,rz);
	mysql_query(g_SQL, query);
}

stock EkinSayisiBul(ciftlikid) {
	new query[100], sonuc,Cache:VeriGetir;
	mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `ekinler` WHERE `ciftlikid` = '%d'", ciftlikid);
	VeriGetir = mysql_query(g_SQL, query);
	sonuc = cache_num_rows();
	cache_delete(VeriGetir);
	return sonuc;
}

stock ArsaninOrtasiniBul(&Float:x, &Float:y, Float:minx, Float:miny, Float:maxx, Float:maxy) {
	new Float:toplam1,Float:toplam2,Float:carpim = 2.0;
	toplam1 = floatadd(minx,maxx);
	toplam2 = floatadd(miny,maxy);
	x = floatdiv(toplam1, carpim);
	y = floatdiv(toplam2, carpim);
}


stock ArsaIkiNoktaArasiUzaklik(&Float:sonuc, Float:minx, Float:miny, Float:maxx, Float:maxy) { 
	new Float:karekok[2],Float:islem[4];
	islem[0] = floatsub(maxx,minx);
	islem[1] = floatsub(maxy,miny);
	karekok[0] = floatmul(islem[0], islem[0]);
	karekok[1] = floatmul(islem[1], islem[1]);
	islem[3] = abs(floatadd(karekok[0], karekok[1]));
	sonuc = floatsqroot(islem[3]);
}

stock GetPosBehindPlayer(playerid, Float:distance, &Float:px, &Float:py, &Float:pz, &Float:pfa)
{
    GetPlayerPos(playerid, px, py, pz);
    GetPlayerFacingAngle(playerid, pfa);
    px -= (distance * floatsin(-pfa, degrees));
    py -= (distance * floatcos(-pfa, degrees));
    return 1;
}

stock CreatePlayerTextDraws( playerid ) {

	AracModifye[playerid][0] = CreatePlayerTextDraw(playerid,314.000000, 369.000000, "_");
	PlayerTextDrawFont(playerid,AracModifye[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid, AracModifye[playerid][0], 0.725000, 9.300003);
	PlayerTextDrawTextSize(playerid,AracModifye[playerid][0], 298.500000, 655.500000);
	PlayerTextDrawSetOutline(playerid,AracModifye[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid,AracModifye[playerid][0], 0);
	PlayerTextDrawAlignment(playerid,AracModifye[playerid][0], 2);
	PlayerTextDrawColor(playerid, AracModifye[playerid][0], -1);
	PlayerTextDrawBackgroundColor(playerid, AracModifye[playerid][0], 255);
	PlayerTextDrawBoxColor(playerid, AracModifye[playerid][0], -1962934087);
	PlayerTextDrawUseBox(playerid,AracModifye[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid,AracModifye[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid,AracModifye[playerid][0], 0);

	AracModifye[playerid][1] = CreatePlayerTextDraw(playerid, 391.000000, 377.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, AracModifye[playerid][1], 5);
	PlayerTextDrawLetterSize(playerid, AracModifye[playerid][1], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, AracModifye[playerid][1], 73.000000, 71.500000);
	PlayerTextDrawSetOutline(playerid, AracModifye[playerid][1], 0);
	PlayerTextDrawSetShadow(playerid, AracModifye[playerid][1], 0);
	PlayerTextDrawAlignment(playerid, AracModifye[playerid][1], 1);
	PlayerTextDrawColor(playerid, AracModifye[playerid][1], -1);
	PlayerTextDrawBackgroundColor(playerid, AracModifye[playerid][1], 0);
	PlayerTextDrawBoxColor(playerid, AracModifye[playerid][1], 255);
	PlayerTextDrawUseBox(playerid, AracModifye[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid, AracModifye[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, AracModifye[playerid][1], 1);
	PlayerTextDrawSetPreviewModel(playerid, AracModifye[playerid][1], 19132);
	PlayerTextDrawSetPreviewRot(playerid, AracModifye[playerid][1], 0.000000, 90.000000, 90.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, AracModifye[playerid][1], 1, 1);

	AracModifye[playerid][2] = CreatePlayerTextDraw(playerid, 168.000000, 377.000000, "Preview_Model");
	PlayerTextDrawFont(playerid, AracModifye[playerid][2], 5);
	PlayerTextDrawLetterSize(playerid, AracModifye[playerid][2], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, AracModifye[playerid][2], 73.000000, 71.500000);
	PlayerTextDrawSetOutline(playerid, AracModifye[playerid][2], 0);
	PlayerTextDrawSetShadow(playerid, AracModifye[playerid][2], 0);
	PlayerTextDrawAlignment(playerid, AracModifye[playerid][2], 1);
	PlayerTextDrawColor(playerid, AracModifye[playerid][2], -1);
	PlayerTextDrawBackgroundColor(playerid, AracModifye[playerid][2], 0);
	PlayerTextDrawBoxColor(playerid, AracModifye[playerid][2], 255);
	PlayerTextDrawUseBox(playerid, AracModifye[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid, AracModifye[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, AracModifye[playerid][2], 1);
	PlayerTextDrawSetPreviewModel(playerid, AracModifye[playerid][2], 19132);
	PlayerTextDrawSetPreviewRot(playerid, AracModifye[playerid][2], 0.000000, 270.000000, 90.000000, 1.000000);
	PlayerTextDrawSetPreviewVehCol(playerid, AracModifye[playerid][2], 1, 1);

	AracModifye[playerid][3] = CreatePlayerTextDraw(playerid, 318.000000, 368.000000, "FRONT REAR BUMPER");
	PlayerTextDrawFont(playerid, AracModifye[playerid][3], 3);
	PlayerTextDrawLetterSize(playerid, AracModifye[playerid][3], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, AracModifye[playerid][3], 400.000000, 302.000000);
	PlayerTextDrawSetOutline(playerid, AracModifye[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, AracModifye[playerid][3], 0);
	PlayerTextDrawAlignment(playerid, AracModifye[playerid][3], 2);
	PlayerTextDrawColor(playerid, AracModifye[playerid][3], -1);
	PlayerTextDrawBackgroundColor(playerid, AracModifye[playerid][3], 255);
	PlayerTextDrawBoxColor(playerid, AracModifye[playerid][3], 50);
	PlayerTextDrawUseBox(playerid, AracModifye[playerid][3], 0);
	PlayerTextDrawSetProportional(playerid, AracModifye[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, AracModifye[playerid][3], 0);

	AracModifye[playerid][4] = CreatePlayerTextDraw(playerid, 314.000000, 393.000000, "SATIN AL");
	PlayerTextDrawFont(playerid, AracModifye[playerid][4], 2);
	PlayerTextDrawLetterSize(playerid, AracModifye[playerid][4], 0.258332, 1.750000);
	PlayerTextDrawTextSize(playerid, AracModifye[playerid][4], 16.500000, 90.500000);
	PlayerTextDrawSetOutline(playerid, AracModifye[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, AracModifye[playerid][4], 0);
	PlayerTextDrawAlignment(playerid, AracModifye[playerid][4], 2);
	PlayerTextDrawColor(playerid, AracModifye[playerid][4], -1);
	PlayerTextDrawBackgroundColor(playerid, AracModifye[playerid][4], 255);
	PlayerTextDrawBoxColor(playerid, AracModifye[playerid][4], -8388408);
	PlayerTextDrawUseBox(playerid, AracModifye[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, AracModifye[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, AracModifye[playerid][4], 1);

	AracModifye[playerid][5] = CreatePlayerTextDraw(playerid, 314.000000, 419.000000, "IPTAL");
	PlayerTextDrawFont(playerid, AracModifye[playerid][5], 2);
	PlayerTextDrawLetterSize(playerid, AracModifye[playerid][5], 0.258332, 1.750000);
	PlayerTextDrawTextSize(playerid, AracModifye[playerid][5], 16.500000, 90.500000);
	PlayerTextDrawSetOutline(playerid, AracModifye[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, AracModifye[playerid][5], 0);
	PlayerTextDrawAlignment(playerid, AracModifye[playerid][5], 2);
	PlayerTextDrawColor(playerid, AracModifye[playerid][5], -1);
	PlayerTextDrawBackgroundColor(playerid, AracModifye[playerid][5], 255);
	PlayerTextDrawBoxColor(playerid, AracModifye[playerid][5], -8388408);
	PlayerTextDrawUseBox(playerid, AracModifye[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, AracModifye[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, AracModifye[playerid][5], 1);

	AracModifye[playerid][6] = CreatePlayerTextDraw(playerid, 382.000000, 393.000000, "2500$");
	PlayerTextDrawFont(playerid, AracModifye[playerid][6], 3);
	PlayerTextDrawLetterSize(playerid, AracModifye[playerid][6], 0.308333, 1.450000);
	PlayerTextDrawTextSize(playerid, AracModifye[playerid][6], 400.000000, 302.000000);
	PlayerTextDrawSetOutline(playerid, AracModifye[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, AracModifye[playerid][6], 0);
	PlayerTextDrawAlignment(playerid, AracModifye[playerid][6], 2);
	PlayerTextDrawColor(playerid, AracModifye[playerid][6], 852308735);
	PlayerTextDrawBackgroundColor(playerid, AracModifye[playerid][6], 255);
	PlayerTextDrawBoxColor(playerid, AracModifye[playerid][6], 50);
	PlayerTextDrawUseBox(playerid, AracModifye[playerid][6], 0);
	PlayerTextDrawSetProportional(playerid, AracModifye[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid, AracModifye[playerid][6], 0);
}
//==============================================================================
stock TuningTDControl( playerid, bool:show ) {
	if( show == true ) {
		for( new i = 0; i < 7; i ++ ) {
			PlayerTextDrawShow( playerid, AracModifye[ playerid ][ i ] );
		}

	}
	else if( show == false ) {
		for( new i = 0; i < 7; i ++ ) {
			PlayerTextDrawHide( playerid, AracModifye[ playerid ][ i ]);
		}
	}
}
//==============================================================================
ResetTuningInfo( playerid ) {
	TPInfo[ playerid ][ tID ] = -1;
	TPInfo[ playerid ][ tType ] = -1;
	TPInfo[ playerid ][ tPaintjob ] = false;
	TPInfo[ playerid ][ PJColor ] = -1;
	TPInfo[ playerid ][ PJColor ] = -1;
}

stock static Float:
bisiklet_pos[ ][ ] =
{
	{772.172,9.41406,1000.0,90.0}, // Los Santos Bisiklet
	{659.2721,-1863.0928,5.4609, 180.0}, // LS Sahil Bisiklet
	{879.5638,-1076.9829,24.2969, 180.0},
	{1197.7601,-1224.7513,18.5547, 270.0},
	{661.0056,-1863.2427,5.4609, 180.0},
	{662.6668,-1863.2421,5.4609, 180.0},
	{664.3846,-1863.2424,5.4609, 180.0}
};

stock static Float:
damb_pos[ ][ ] =
{
	{772.9708,5.3420,1000.7802,90.0}, // Los Santos Dambýl Pos
	{654.3516, -1869.5703, 5.0000, 90.0}, // LS Sahil Kýrmýzý Halý
	{659.9922, -1869.6328, 5.0000, 90.0},
	{945.507080, -1066.73469, 24.0000, 90.0},
	{1194.140380, -1228.326416, 18.0000, 90.0}
};

stock static Float:
kosu_pos[ ][ ] =
{
	{ 773.4922, -2.6016,1000.7209 ,180.00000 }, // Los Santos Koþu Bandý
	{663.3463,-1871.1790,5.5770, 180.00000},
	{664.7148,-1871.0364,5.5770, 180.00000},
	{666.2200,-1871.1157,5.5770, 180.00000},
	{667.7944,-1871.2708,5.5770, 180.00000}
};

stock static Float:
plant_pos[ ][ ] =
{
	{2304.7869,-1783.3048,1600.7520, 2305.680908, -1784.272583, 1600.361938},
	{2299.5261,-1783.2908,1600.7520, 2300.288818, -1784.272583, 1600.361938},
	{2294.5159,-1783.2716,1600.7520, 2295.217773, -1784.272583, 1600.361938},
	{2293.9978,-1789.7568,1600.7520, 2295.217773, -1791.002929, 1600.361938},
	{2299.4438,-1789.7501,1600.7520, 2300.528808, -1791.002929, 1600.361938},
	{2304.6885,-1789.7494,1600.7520, 2305.801269, -1791.002929, 1600.361938}
};

stock static Float:
mmasa_pos[ ][ ] =
{
	{2309.9248,-1789.7233,1600.7520},
	{2310.0154,-1783.8475,1600.7520},
	{2316.0168,-1783.9047,1600.7520}
};


enum pindata{pininid, Float:PinX, Float:PinY};
new pinveri[][pindata] = {
	{0, 531.000000, 340.000000},
	{1, 546.000000, 351.000000},
	{2, 561.000000, 358.000000},
	{3, 575.000000, 345.000000},
	{4, 590.000000, 353.000000}
};

enum tahtadata{taracseviye, taracisim[32], taracfiyat};
new tahtaverisi[][tahtadata] = {
	{1, "Tampa", 2400},
	{2, "Sabre", 2470},
	{3, "Clover", 2600},
	{4, "Greenwood", 2700},
	{5, "Sunrise", 2800},
	{6, "Sentinel", 3000},
	{7, "Premier", 3100},
	{8, "Rancher", 3400},
	{9, "Huntley", 3800},
	{10, "Banshee", 4100}
};

enum kilitsuredata{kilitseviye, kilitsuresi};
new kilitverisi[][kilitsuredata] = {
	{0, 95},
	{1, 70},
	{2, 60},
	{3, 45},
	{4, 30},
	{5, 20}
};

enum alarmsuredata{alarmseviye, alarmsuresi};
new alarmverisi[][alarmsuredata] = {
	{0, 90},
	{1, 70},
	{2, 60},
	{3, 45},
	{4, 30},
	{5, 20}
};

enum gymdata{okid, Float:okX, okisim[36]};
new okveri[][gymdata] = {
	{0, 336.000000, "ld_beat:down"},
	{1, 358.000000, "ld_beat:down"},
	{2, 380.000000, "ld_beat:up"},
	{3, 402.000000, "ld_beat:left"},
	{4, 424.000000, "ld_beat:right"},
	{5, 446.000000, "ld_beat:up"},
	{6, 470.000000, "ld_beat:right"},
	{7, 492.000000, "ld_beat:down"},
	{8, 514.000000, "ld_beat:up"},
	{9, 536.000000, "ld_beat:left"},
	{10, 558.000000, "ld_beat:left"},
	{11, 580.000000, "ld_beat:down"},
	{12, 602.000000, "ld_beat:down"},
	{13, 624.000000, "ld_beat:right"}
};

new Float:okcX[MAX_PLAYERS][sizeof(okveri)];
new okcDurum[MAX_PLAYERS][sizeof(okveri)];

enum kontratdata{kontid, kontalan, kontbaslik[64], konticerik[250], Float:kontX, Float:kontY, Float:kontZ};
new Kontratlar[][kontratdata] =
{
	{0, 2, "Un Çuvalý Taþýma Ýþi", 	"Ocean Docks'tan çuvallar yüklenir ve fabrikaya teslim edilir.\nTarife: Çuval Baþý 60$ + Firma Kasasýna 20$", 966.4175,2160.6240,10.8203},
	{1, 2, "Konteyner Taþýma Ýþi", 	"Kasabadan konteyner DFT-30'a yüklenir ve limana teslim edilir.\nTarife: Konteyner Baþý 840$ + Firma Kasasýna 40$", 103.2384,-164.8606,2.3154},
	{2, 2, "Süt Taþýma Ýþi", "Kasabadan tanker dorseye süt yüklenir ve fabrikaya teslim edilir.\nTarife: Tanker Baþý 2500$ + Firma Kasasýna 2000$", 2439.3503,64.7262,26.3757},
	{3, 2, "VCPD'ye Silah Teslimatý", "Silah atölyesinden zýrhlý araca silahlar yüklenir ve VCPD deposuna teslim edilir.\nTarife: Mühimmat Kasasý Baþý 4500$ + Firma Kasasýna 4000$", 2431.3503,63.7262,22.3757},
	{4, 4, "VCPD Araçlarýnýn Bakýmý", "VCPD garajýna gidilir ve orada bulunan araçlarýn bakýmý yapýlýr.\nTarife: Araç Baþý 170$ + Firma Kasasýna 120$", 1439.3503,67.7262,23.3757}
};

enum kokendil{kokendili[64]};
new kokendilleri[][kokendil] =
{
	{"Ýngilizce"},
	{"Ukraynaca"},
	{"Ýspanyolca"},
	{"Almanca"},
	{"Portekizce"},
	{"Ýtalyanca"},
	{"Rusça"},
	{"Çince"},
	{"Japonca"},
	{"Fransýzca"},
	{"Arnavutça"},
	{"Ermenice"},
	{"Azerice"},
	{"Boþnakça"},
	{"Bulgarca"},
	{"Çekce"},
	{"Arapça"},
	{"Estonca"},
	{"Fince"},
	{"Gürcüce"},
	{"Yunanca"},
	{"Felemenkçe"},
	{"Macarca"},
	{"Hintçe"},
	{"Endonezce"},
	{"Ýrlandaca"},
	{"Kazakça"},
	{"Litvanca"},
	{"Makedonca"},
	{"Korece"},
	{"Ýskoçça"},
	{"Rumence"},
	{"Sýrpça"},
	{"Slovakça"},
	{"Ýsveççe"},
	{"Mandarin"},
	{"Vietnamca"},
	{"Yugoslavca"},
	{"ibranice"}
};

enum kokendata{Uyruk[64], Dil[64], Ulke[64]};
new Kokenler[][kokendata] =
{
	{"Ingiliz", 	"Ingilizce", 	"Ingiltere"},
	{"Amerikan", 	"Ingilizce", 	"Amerika"},
	{"Ukraynali",     "Ukraynaca",     "Ukrayna"},
	{"Ispanyol", 	"Ispanyolca", 	"Ispanya"},
	{"Alman", 		"Almanca", 		"Almanya"},
	{"Brezilyan", 	"Portekizce", 	"Brezilya"},
	{"Italyan", 	"Italyanca", 	"Italya"},
	{"Rus", 		"Rusça", 		"Rusya"},
	{"China", 		"Cince", 		"China"},
	{"Japon", 		"Japonca", 		"Japonya"},
	{"Fransýz", 	"Fransýzca", 	"Fransa"},
	{"Arnavut",     "Arnavutca",     "Arnavutluk"},
	{"Arjantinli",     "Ispanyolca",     "Arjantin"},
	{"Avustralyali",     "Ingilizce",     "Avustralya"},
	{"Andorrali",     "Ispanyolca",     "Andorrra"},
	{"Ermeni",     "Ermenice",     "Ermenistan"},
	{"Avusturyali",     "Almanca",     "Avusturya"},
	{"Azeri",     "Azerice",     "Azerbaycan"},
	{"Bahamali",     "Ingilizce",     "Bahama"},
	{"BeyazRus",     "Rusca",     "Belarus"},
	{"Belcikali",     "Almanca",     "Belcika"},
	{"Bolivyali",     "Ispanyolca",     "Bolivya"},
	{"Bosnali",     "Bosnakca",     "BosnaHersek"},
	{"Bulgar",     "Bulgarca",     "Bulgaristan"},
	{"Kamerunlu",     "Fransizca",     "Kamerun"},
	{"Kanadali",     "Ingilizce",     "Kanada"},
	{"Kolombiyali",     "Ispanyolca",     "Kolombiya"},
	{"KostaRikali",     "Ispanyolca",     "KostaRika"},
	{"Kubali",     "Ispanyolca",     "Kuba"},
	{"Cek",     "Cekce",     "Cekya"},
	{"Dominikli",     "Ispanyolca",     "Dominik"},
	{"Misirli",     "Arapca",     "Misir"},
	{"Estonyali",     "Estonca",     "Estonya"},
	{"Fin",     "Fince",     "Finlandiya"},
	{"Ganali",     "Ingilizce",     "Gana"},
	{"Gurcu",     "Gurcuce",     "Gurcistan"},
	{"Guatemalali",     "Ispanyolca",     "Guatemala"},
	{"Yunan",     "Yunanca",     "Yunanistan"},
	{"Hollandalý",     "Felemenkce",     "Hollanda"},
	{"Haitili",     "Fransizca",     "Haiti"},
	{"Macar",     "Macarca",     "Macaristan"},
	{"Hint",     "Hintce",     "Hindistan"},
	{"Endonezyali",     "Endonezce",     "Endonezya"},
	{"Irlandali",     "Irlandaca",     "Irlanda"},
	{"Jamaikan",     "Jamaican",     "Jamaika"},
	{"Kazak",     "Kazakca",     "Kazakistan"},
	{"Litvanyali",     "Litvanca",     "Litvanya"},
	{"Makedon",     "Makedonca",     "Makedonya"},
	{"Meksikali",     "Ispanyolca",     "Meksika"},
	{"YeniZelandali",     "Ingilizce",     "YeniZelanda"},
	{"Nijeryali",     "Ingilizce",     "Nijerya"},
	{"Koreli",     "Korece",     "KuzeyKore"},
	{"Koreli",     "Korece",     "GuneyKore"},
	{"Panamali",     "Ispanyolca",     "Panama"},
	{"Paraguayli",     "Ispanyolca",     "Paraguay"},
	{"Filipinli",     "Filipince",     "Filipin"},
	{"Portekizli",     "Portekizce",     "Portekiz"},
	{"Iskoc",     "Iskocca",     "Iskocya"},
	{"Rumen",     "Rumence",     "Romanya"},
	{"Sirp",     "Sýrpca",     "Sirbistan"},
	{"Slovak",     "Slovakca",     "Slovakya"},
	{"Isvecli",     "Isvecce",     "Isvec"},
	{"Tayvanli",     "Mandarin",     "Tayvan"},
	{"Uruguayli",     "Ispanyolca",     "Uruguay"},
	{"Vietnamli",     "Vietnamca",     "Vietnam"},
	{"Venezuelali",     "Ispanyolca",     "Venezuela"},
	{"Yugoslav",     "Yugoslavca",     "Yugoslavya"},
	{"Ýsrail",		"Ýbranice", 	"Ýsrail"}
};

new SatilikAraclar[][] = {
	{400, 45000, "Gerçek bir jip!"}, 
	{401, 19000, "Sürat teknesi!"}, 
	{402, 110000, "Fiyat performansta uçurur."}, 
	{404, 16000, "Ne varsa eskilerde var!"}, 
	{410, 15000, "Sýradan."}, 
	{412, 21000, "En badass araba."}, 
	{413, 29000, "Bir þeyler taþýyacaksan en iyisi."},
	{414, 40000, "Kapasitesi çok büyük."}, 
	{418, 25000, "Geniþ bir þey arýyorsan en iyisi.."}, 
	{419, 24000, "Ýspanyol rüyasý."}, {421, 50000, "Klasik severler."},
	{422, 22000, "Herkes kamyonet ister."}, 
	{426, 27200, "En çok tercih edilen, VCPD bile bundan alýyor!"}, 
	{429, 310000, "Yalnýzca üst seviye insanlara hitap eder!"}, 
	{436, 17000, "Ayaðýný yerden keser."}, {439, 39500, "Tam konfor!"},
	{440, 29000, "Daha iyisi yok."}, 
	{445, 42500, "Takým elbise giyenler için."}, 
	{456, 75000, "Ýþçilerin hayali."}, 
	{458, 27500, "Aile arabasý."}, 
	{459, 42000, "Müzik severler."}, 
	{461, 23000, "Hýz severler."},
	{462, 5000, "En hýzlý motor!"}, 
	{463, 18000, "Egzozu patlatýrken uzun yolculuklara hazýr mýyýz?"}, 
	{466, 13800, "En saðlam çelikten yapýldý!"}, 
	{467, 27500, "Vice Þehrinin sembolik arabasý."}, 
	{468, 20300, "Herkesin meraký."}, 
	{471, 27500, "En güzel hobi."},
	{474, 26000, "Varoþlarýn rüyasý."}, 
	{475, 55000, "Erkek gibi."}, 
	{477, 330000, "Richman bebeði"}, 
	{478, 15000, "Keyifli sürüþ"}, 
	{479, 19000, "Asla yolda kalmaz."}, 
	{480, 200000, "Kýzlarýn rüyasý."},
	{482, 39500, "Tam bir operasyon arabasý."}, 
	{483, 20000, "Þehrin en þirin arabasý!"}, 
	{489, 80000, "Yalnýzca patronlar biner!"}, 
	{491, 23500, "Hem klas hem ucuz!"}, 
	{492, 26000, "Gerçek bir klasik."}, 
	{496, 36000, "Hýzlý kaçar."},
	{498, 42000, "En güzel götürme arabasý."}, 
	{499, 49000, "Her þeyi taþýr."}, 
	{500, 45000, "Playboy adamlarýnýn rüyasý."}, 
	{505, 85000, "Richman klasiði"}, 
	{506, 300000, "Hýz peþindeysen bunu al"}, 
	{507, 27000, "Hýz tutkusu."},
	{508, 40000, "Keyifli yolculuklar ve tüttürmeler!"}, 
	{516, 29000, "Efsane bir araç."}, 
	{517, 27000, "Her zaman klasik."}, 
	{518, 26000, "Bütün kýzlar size bakacak!"}, 
	{521, 32000, "Hýz tutkunlarý için."}, 
	{526, 30000, "Çok klas."},
	{527, 24000, "Keyifli sürüþler."}, 
	{529, 17500, "Koltuklarý kadar rahat."}, 
	{533, 60000, "Hayat lüksü."}, 
	{534, 65000, "Richman klasiði"}, 
	{535, 53000, "Gençlerin rüyasý."}, 
	{536, 37500, "Varoþlarýn rüyasý."},
	{540, 23500, "Tam bir keyif arabasý."}, 
	{542, 16500, "Adeta bir porsche."}, 
	{543, 21000, "Asla yolda kalmaz."}, 
	{545, 85000, "Gerçek bir klasik ve Ýtalyan eseri."}, 
	{546, 22000, "Sadece iþini yapanlarýn arabasý."},
	{547, 26000, "En kullanýþlý araba."}, 
	{549, 11000, "Daha güzeli yok."}, 
	{550, 19000, "Ara sokaklarýn canavarý."}, 
	{551, 36000, "Takým giyen araba"}, 
	{554, 65000, "Konforlu parti canavarý."}, 
	{555, 110000, "Kadýn avcýsý."}, 
	{558, 54000, "Gizli güç"},
	{559, 56000, "Hýz ve konfor!"}, 
	{560, 125000, "Alabileceðin en iyi fiyat performans."}, 
	{561, 25250, "Her zaman güvenli."}, 
	{562, 80000, "Deðerini yalnýzca arabadan anlayanlar bilir."}, 
	{565, 60000, "Az yakar çok kaçar."},
	{566, 32000, "Ýþini bilenlerin arabasý."}, 
	{567, 35000, "En seksi araba."}, 
	{575, 47000, "Kadýnlarýn göz bebeði"}, 
	{576, 38000, "Hortum gibi."}, 
	{405, 33000, "Tank gibi."}, 
	{578, 58000, "Herkesi taþýr."}, 
	{579, 250000, "En klas araba."}, 
	{580, 140000, "Her dönemin klasiði."},
	{581, 23500, "Hýzý kim sevmez ki?"}, 
	{605, 5200, "Görünüþe önem vermiyorsanýz tam size göre!"}, 
	{604, 6800, "Temiz bir aile arabasý."}, 
	{585, 29000, "Ýþini yapar."}, 
	{586, 18500, "Hayalleri süsler."}, 
	{587, 57500, "Bu görünüm baþka yerde yok."}, 
	{589, 25500, "Küçük olduðuma bakma."},
	{600, 15000, "Asla yolda kalmaz."}, 
	{602, 56000, "Jantlarýn dumanýna gömül"}, 
	{451, 350000, "En klas ve hýzlý araba."}, 
	{415, 330000, "Vice Þehrinin Sembolü."}, 
	{541, 330000, "Daha kalitelisi yok."}, 
	{411, 360000, "Þehrin en hýzlýsý."},
	{603, 190000, "Býraksak konuþacak."},
	{424, 40000, "Asla yolda kalmaz."}, 
	{434, 70000, "Jantlarýn dumanýna gömül"}, 
	{457, 50000, "En klas ve hýzlý araba."}, 
	{460, 250000, "Vice Þehrinin Sembolü."}, 
	{495, 90000, "Daha kalitelisi yok."},
	{522, 300000, "Þehrin en hýzlýsý."},
	{409, 500000, "Býraksak konuþacak."},
	{423, 25000, "Dondurma aracý."},
	{470, 250000, "Askeri."},
	{486, 80000, "Dev bir dozer."},
	{494, 250000, "Hotring Racer..."},
	{502, 250000, "Hotring Racer A..."},
	{503, 250000, "Hotring Racer B..."},
    {504, 60000, "Býraksak konuþacak."},
	{508, 30000, "Karavan."},
	{524, 70000, "Dev bir dozer."},
	{556, 350000, "Canavar bir kamyon."},
	{557, 350000, "Canavar bir kamyon daha."},
	{568, 80000, "Býraksak konuþacak."},
	{588, 45000, "Sosisli..."},
	{532, 20000, "Tarlanýzý özenle biçer."},
	{531, 13000, "Tarlanýzý özenle eker."}
};

new const SilahSlotBul[] = {
	0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 10, 10, 10, 10, 10, 10, 8, 8, 8, 0, 0, 0, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5, 4, 6, 6, 7, 7, 7, 7, 8, 12, 9, 9, 9, 11, 11, 11
};

new bool:BISIKLET_KULLANIMDA[sizeof bisiklet_pos]=false;
new KULLANILAN_BISIKLET[MAX_PLAYERS],
bool:OYUNCU_BISIKLETTE[MAX_PLAYERS]=false;

new bool:DAMBIL_KULLANIMDA[sizeof damb_pos]=false;
new KULLANILAN_DAMBIL[MAX_PLAYERS],
bool:OYUNCU_DAMBILDA[MAX_PLAYERS]=false;

new bool:BANT_KULLANIMDA[sizeof kosu_pos]=false;
new KULLANILAN_BANT[MAX_PLAYERS],
bool:OYUNCU_BANTTA[MAX_PLAYERS]=false;

main() {
	static ys[128];
	format(ys, sizeof(ys), "[SUNUCU] %s © via - @2019", SUNUCU_ADI);
	printf(ys);
	format(ys, sizeof(ys), "[SUNUCU] Maksimum Oyuncu: %d (mod)", MAX_PLAYERS);
	printf(ys);
}

public OnGameModeInit()
{
	  //check MapAndreas Init
    new Float:mapunit;
    MapAndreas_FindZ_For2DCoord(0.0,0.0,mapunit);
    if(mapunit <= 0.0){
        MapAndreas_Init(MAP_ANDREAS_MODE_FULL);
    }
    MapAndreas_FindZ_For2DCoord(0.0,0.0,mapunit);
    if(mapunit <= 0.0){
        print("MapAndreas failed to initiated");
    } else {
        print("MapAndreas successfully initiated");
    }
	Streamer_SetVisibleItems(STREAMER_TYPE_OBJECT, 1000);
	Streamer_ToggleChunkStream(1);
	Streamer_ToggleErrorCallback(1);
	SQL_Baglan();
	AntiDeAMX();
	WasteDeAMXersTime();
	ShowPlayerMarkers(PLAYER_MARKERS_MODE_STREAMED);
	if(mysql_errno(g_SQL) != 0) return false;
	mysql_tquery(g_SQL, "SELECT * FROM `binalar`", "Binalari_Yukle", "");
	mysql_tquery(g_SQL, "SELECT * FROM `birlikler`", "Birlikleri_Yukle", "");
	mysql_tquery(g_SQL, "SELECT * FROM `atm`", "Atmleri_Yukle", "");
	mysql_tquery(g_SQL, "SELECT * FROM `meslekler`", "Meslekleri_Yukle", "");
	mysql_tquery(g_SQL, "SELECT * FROM `isyerleri`", "Isyerlerini_Yukle", "");
	mysql_tquery(g_SQL, "SELECT * FROM `evler`", "Evleri_Yukle", "");
	mysql_tquery(g_SQL, "SELECT * FROM `uyusturucular`", "Uyusturuculari_Yukle", "");
	mysql_tquery(g_SQL, "SELECT * FROM `tutuklamanoktalari`", "TutuklamaNoktasi_Yukle", "");
	mysql_tquery(g_SQL, "SELECT * FROM `npcler`", "Npcleri_Yukle", "");
	mysql_tquery(g_SQL, "SELECT * FROM `grafitiler`", "Grafiti_Yukle", "");
	mysql_tquery(g_SQL, "SELECT * FROM `yatlar`", "Yat_Yukle", "");
	mysql_tquery(g_SQL, "SELECT * FROM `atelefon`", "Ankesor_Yukle", "");
	mysql_tquery(g_SQL, "SELECT * FROM `gateler`", "GateYukle");
	mysql_tquery(g_SQL, "SELECT * FROM koguslar", "KogusYukle");
	mysql_tquery(g_SQL, "SELECT * FROM `tamirciler`", "Tamircileri_Yukle");
	mysql_tquery(g_SQL, "SELECT * FROM `giseler`", "Giseleri_Yukle");
	mysql_tquery(g_SQL, "SELECT * FROM `garajlar`", "Garaj_Yukle", "");
	mysql_tquery(g_SQL, "SELECT * FROM `firmalar`", "Firma_Yukle", "");
	mysql_tquery(g_SQL, "SELECT * FROM `araclar` WHERE `aracBirlik` != -1 OR `aracTur` != 0 OR `aracMeslek` != -1 OR `aracFirma` != -1", "Araclari_Yukle", "");
	mysql_tquery(g_SQL, "SELECT * FROM `kutular`", "Kutu_Yukle", "");
	mysql_tquery(g_SQL, "SELECT * FROM `yeritemleri`", "Yeritem_Yukle", "");
	mysql_tquery(g_SQL, "SELECT * FROM `otel_resepsiyon`", "Resepsiyonlari_Yukle", "");
	mysql_tquery(g_SQL, "SELECT * FROM `otel_odalar`", "Otel_Odalari_Yukle", "");
	mysql_tquery(g_SQL, "SELECT * FROM `tezgahlar`", "Tezgah_Yukle", "");
	mysql_tquery(g_SQL, "SELECT * FROM `seyyarlar`", "Seyyar_Yukle", "");
	mysql_tquery(g_SQL, "SELECT * FROM `teleportlar`", "Tnokta_Yukle", "");
	mysql_tquery(g_SQL, "select * from furniture_data", "Dekorasyon_Yukle");
	mysql_tquery(g_SQL, "select * from player_weapons where weapon_statusid = '1'", "Silah_Yukle");
	mysql_tquery(g_SQL, "SELECT * FROM arsalar", "Arsa_Yukle");
	mysql_tquery(g_SQL, "SELECT * FROM ekinler", "Ekin_Yukle");
	mysql_tquery(g_SQL, "SELECT * FROM tarimurunleri", "Tarimurun_Yukle");
	mysql_tquery(g_SQL, "SELECT * FROM bolgeler", "Bolge_Yukle");
	
	reklamkanali = DCC_FindChannelById("1026165909842309233");
	sokakkanali = DCC_FindChannelById("1026166069192294560");
	
	ManualVehicleEngineAndLights();
	DisableInteriorEnterExits();
	bisikletler = LoadModelSelectionMenu("bisikletler.txt");
	erkekvip = LoadModelSelectionMenu("erkekvip.txt");
	kadinvip = LoadModelSelectionMenu("kadinvip.txt");
	araclarliste = LoadModelSelectionMenu("satilikaraclar.txt");
	coolaraclarliste = LoadModelSelectionMenu("coolaraclar.txt");
	fdaksesuarlar = LoadModelSelectionMenu("fdaksesuarlar.txt");
	fderkeksiyah = LoadModelSelectionMenu("fderkeksiyah.txt");
	fdkadinbeyaz = LoadModelSelectionMenu("fdkadinbeyaz.txt");
	fdkadinsiyah = LoadModelSelectionMenu("fdkadinsiyah.txt");
	fderkekbeyaz = LoadModelSelectionMenu("fderkekbeyaz.txt");
	erkekkayitbeyaz = LoadModelSelectionMenu("erkekbeyazorta.txt");
	erkekkayitsiyah = LoadModelSelectionMenu("erkeksiyahorta.txt");
	kadinkayitbeyaz = LoadModelSelectionMenu("kadinbeyazorta.txt");
	kadinkayitsiyah = LoadModelSelectionMenu("kadinsiyahorta.txt");
	erkekbeyazfakir = LoadModelSelectionMenu("erkekbeyazfakir.txt");
	erkekbeyazorta = LoadModelSelectionMenu("erkekbeyazorta.txt");
	erkekbeyazzengin = LoadModelSelectionMenu("erkekbeyazzengin.txt");
	erkeksiyahfakir = LoadModelSelectionMenu("erkeksiyahfakir.txt");
	erkeksiyahorta = LoadModelSelectionMenu("erkeksiyahorta.txt");
	erkeksiyahzengin = LoadModelSelectionMenu("erkeksiyahzengin.txt");
	kadinbeyazfakir = LoadModelSelectionMenu("kadinbeyazfakir.txt");
	kadinbeyazorta = LoadModelSelectionMenu("kadinbeyazorta.txt");
	kadinbeyazzengin = LoadModelSelectionMenu("kadinbeyazzengin.txt");
	kadinsiyahfakir = LoadModelSelectionMenu("kadinsiyahfakir.txt");
	kadinsiyahorta = LoadModelSelectionMenu("kadinsiyahorta.txt");
	kadinsiyahzengin = LoadModelSelectionMenu("kadinsiyahzengin.txt");
	erkekdolapbeyaz = LoadModelSelectionMenu("erkekbeyazorta.txt");
	erkekdolapsiyah = LoadModelSelectionMenu("erkeksiyahorta.txt");
	kadindolapbeyaz = LoadModelSelectionMenu("kadinbeyazorta.txt");
	kadindolapsiyah = LoadModelSelectionMenu("kadinsiyahorta.txt");
	uniformaerkekbeyaz = LoadModelSelectionMenu("uniformaerkekbeyaz.txt");
	uniformaerkeksiyah = LoadModelSelectionMenu("uniformaerkeksiyah.txt");
	uniformakadinbeyaz = LoadModelSelectionMenu("uniformakadinbeyaz.txt");
	uniformakadinsiyah = LoadModelSelectionMenu("uniformakadinsiyah.txt");
	Aksesuarlar = LoadModelSelectionMenu("Aksesuarlar.txt");
	ozelaksesuarlar = LoadModelSelectionMenu("ozelaksesuarlar.txt");
	pdaksesuarlar = LoadModelSelectionMenu("pdaksesuarlar.txt");
	fdaksesuarlar = LoadModelSelectionMenu("fdaksesuarlar.txt");
	barikatsec = LoadModelSelectionMenu("barikatms.txt");
	firmalojistik = LoadModelSelectionMenu("firmalojistik.txt");
	firmamedya = LoadModelSelectionMenu("firmamedya.txt");
	firmarent = LoadModelSelectionMenu("satilikrentacar.txt");
	firmasilah = LoadModelSelectionMenu("firmasilah.txt");
	firmataksi = LoadModelSelectionMenu("firmataksi.txt");
	firmatamir = LoadModelSelectionMenu("firmatamir.txt");
	EnableStuntBonusForAll(0);
	ShowNameTags(1);
	SetNameTagDrawDistance(20.0);
	static rcon[80];
	format(rcon, sizeof(rcon), "hostname %s", SUNUCU_ADI);
	SendRconCommand(rcon);
	format(rcon, sizeof(rcon), "weburl %s", SUNUCU_WEBSITE);
	SendRconCommand(rcon);
	format(rcon, sizeof(rcon), "mapname %s", SUNUCU_MAP);
	SendRconCommand(rcon);
	format(rcon, sizeof(rcon), "language %s", SUNUCU_DIL);
	SendRconCommand(rcon);
	format(rcon, sizeof(rcon), "rcon_password %s", SUNUCU_RCON);
	SendRconCommand(rcon);
	SetGameModeText(SUNUCU_SURUM);
	Streamer_TickRate(60);
	Streamer_VisibleItems(STREAMER_TYPE_OBJECT, 1000);
	new saat;
	gettime(saat);
	switch(saat)
	{
		case 6..8:SunucuZaman = 6;
		case 9..12:SunucuZaman = 10;
		case 13..14:SunucuZaman = 14;
		case 15..16:SunucuZaman = 17;
		case 17..18:SunucuZaman = 22;
		case 19..20:SunucuZaman = 23;
		case 21..23:SunucuZaman = 3;
		case 0..5:SunucuZaman = 3;
	}
	printf("[SUNUCU] Sunucu saati %02d:00 olarak ayarlandý.", SunucuZaman);
	SetTimer("AnaTimer", 840, true);
	SetTimer("SunucuDakikaTimer", 60 * 840, true);
	SetTimer("AracVergiKes", 3600 * 840, true);
	SetTimer("FlasorTimer", 50, true);
	SetTimer("OneHourTimer", 3600 * 840, true);
	SetTimer("YetkiliBildirimTimer", 300 * 840, true);
	// At Yarýþý
	RaceStarted = 0;
	Prepared = 0;
	Horsemsg = 1;
	HorseStop = 0;
	ObjeleriYarat();
	CreatePickupsAndLabels();
	CreateAllTextdraws();
	new piyasa[75];
	for( new o; o != sizeof(piyasaveri); o ++ )
    {
		format(piyasa, sizeof(piyasa), "[{C9C936}%s{FFFFFF}]\n{FFFFFF}Ekin satmak için '/ekin sat'", piyasaveri[o][piyasaisim]);
    	CreateDynamic3DTextLabel(piyasa, RENK_BEYAZ, piyasaveri[o][piyasax], piyasaveri[o][piyasay], piyasaveri[o][piyasaz] + 0.8, 2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0,-1);
		CreateDynamicPickup(1318, 23, piyasaveri[o][piyasax], piyasaveri[o][piyasay], piyasaveri[o][piyasaz]);
	}

    for( new o; o != sizeof kosu_pos; o ++ )
    {
    	CreateDynamic3DTextLabel("[{F5E600}Koþu Bandý{FFFFFF}]\n{FFFFFF}Çalýþmak için '/gym calis'{FFFFFF}", RENK_BEYAZ, kosu_pos[ o ][ 0 ], kosu_pos[ o ][ 1 ], kosu_pos[ o ][ 2 ] + 0.5, 1.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0,-1);
    }

	new rex[40];
	for( new o; o != sizeof plant_pos; o ++ )
    {
		format(rex, sizeof(rex), "[{C9C936}Platform %d{FFFFFF}]", o);
    	CreateDynamic3DTextLabel(rex, RENK_BEYAZ, plant_pos[ o ][ 0 ], plant_pos[ o ][ 1 ], plant_pos[ o ][ 2 ] + 0.5, 2.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, 17);
    }

	for( new o; o != sizeof mmasa_pos; o ++ )
    {
		format(rex, sizeof(rex), "[{C9C936}Masa %d{FFFFFF}]", o);
    	CreateDynamic3DTextLabel(rex, RENK_BEYAZ, mmasa_pos[ o ][ 0 ], mmasa_pos[ o ][ 1 ], mmasa_pos[ o ][ 2 ] + 0.5, 2.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, 17);
    }

    for( new o; o != sizeof damb_pos; o ++ )
    {
    	CreateDynamic3DTextLabel("[{F5E600}Dumbell Platformu{FFFFFF}]\n{FFFFFF}Çalýþmak için '/gym calis'{FFFFFF}", RENK_BEYAZ, damb_pos[ o ][ 0 ], damb_pos[ o ][ 1 ], damb_pos[ o ][ 2 ] + 0.5, 1.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0,-1);
    }

    for( new o; o != sizeof bisiklet_pos; o ++ )
    {
    	CreateDynamic3DTextLabel("[{F5E600}Bisiklet{FFFFFF}]\n{FFFFFF}Çalýþmak için '/gym calis'{FFFFFF}", RENK_BEYAZ, bisiklet_pos[ o ][ 0 ], bisiklet_pos[ o ][ 1 ], bisiklet_pos[ o ][ 2 ] + 0.5, 1.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0,-1);
    }

    for( new o; o < sizeof(PompaVeri); o ++ )
    {
    	CreateDynamic3DTextLabel("[{F5E600}Yakýt Pompasý{FFFFFF}]\n{FFFFFF}Yakýt almak için\n'/benzinal'{FFFFFF}", RENK_BEYAZ, PompaVeri[o][pompX], PompaVeri[o][pompY], PompaVeri[o][pompZ] + 0.5, 3, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0,-1);
    }
	reklamkanali = DCC_FindChannelById("1026165909842309233");
	sokakkanali = DCC_FindChannelById("1026166069192294560");
	paralog = DCC_FindChannelById("1026166451360497755");
	bankatransfer = DCC_FindChannelById("1026166555979034754");
	evlog = DCC_FindChannelById("1026166626304937994");
	isyerilog = DCC_FindChannelById("1026166690024804464");
	araclog = DCC_FindChannelById("1026166746345906197");
	uyuslog = DCC_FindChannelById("1026166811969999009");
	tarlalog = DCC_FindChannelById("1026166842751991868");
	silahlog = DCC_FindChannelById("1026166874930683935");
	notlog = DCC_FindChannelById("1026177334971207681");
	komutkullan = DCC_FindChannelById("1025366472471621632");
	jaillog = DCC_FindChannelById("1027521691867426867");
	banlog = DCC_FindChannelById("1025366435003904000");	
	girlog = DCC_FindChannelById("1025366369342062602");	
	ciklog = DCC_FindChannelById("1027527941455876126");
	return 1;
}

public OnGameModeExit()
{
	foreach(new i : Player) if(oyuncuData[i][oGiris] == true) {
		OyuncuKaydet(i);
		HesapKaydet(i);
		OnPlayerDisconnect(i, 31);
	}
	foreach(new i : Gateler)
	{
		DestroyDynamicObject(gateData[i][gateObje]);
		gateData[i][gateObjeModel] = 0;
		gateData[i][gateObje] = INVALID_OBJECT_ID;
		format(gateData[i][gateSifre], 32, "-");
		gateData[i][gateHiz] = 0.0;
		gateData[i][gateUzaklik] = 0.0;
		gateData[i][gateDurum] = false;
		format(gateData[i][gateSahip], 32, "-");
		gateData[i][gateInterior] = 0;
		gateData[i][gateVirtual] = 0;
		for(new xd ; xd < 6 ; xd ++)
		{
			gateData[i][gateAcikPos][xd] = 0.0;
			gateData[i][gateKapaliPos][xd] = 0.0;
		}
	}
	mysql_close(g_SQL);
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
	/*new spawnkiyafet;
	switch(oyuncuData[playerid][oGeciciKiyafet]) {
		case 0: spawnkiyafet = oyuncuData[playerid][oKiyafet];
		default: spawnkiyafet = oyuncuData[playerid][oGeciciKiyafet];
	}
	SetSpawnInfo(playerid, 0, spawnkiyafet, oyuncuData[playerid][oPos][0], oyuncuData[playerid][oPos][1], oyuncuData[playerid][oPos][2], oyuncuData[playerid][oPos][3], 0, 0, 0, 0, 0, 0);
	SpawnPlayer(playerid); */
	return 1;
}

public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart)
{
	if(oyuncuData[playerid][oYarali] == true) return SetPlayerHealth(playerid, 10.0);
			//playerid karþý - issuerid kendisi
	if(issuerid != INVALID_PLAYER_ID)
	{
		if(GodMode[issuerid] == true && oyuncuData[issuerid][oAdminDurum] == true) return 0;

	    	//SCM_ExAll(-1, "Hasar veren: %d /  Hasar alan: %d", issuerid, playerid);
		static Float:can, Float:zirh;
		GetPlayerHealth(playerid, can); GetPlayerArmour(playerid, zirh);
		if(IsPlayerConnected(issuerid)) {
			if(weaponid == WEAPON_SNIPER && bodypart == 9) {
				Hasar_Ekle(playerid, bodypart, 200.0, issuerid, weaponid);
				ZirhDuzenle(playerid, 0.0); CanDuzenle(playerid, 0.0);
				return 1;
			}
			Hasar_Ekle(playerid, bodypart, amount, issuerid, weaponid);
		}

		new Float:X, Float:Y, Float:Z, Float:yakinlik;
		GetPlayerPos(issuerid, X, Y, Z);
		yakinlik = GetPlayerDistanceFromPoint(playerid, X, Y, Z);

		if(weaponid == 0)
		{
			if(oyuncuData[issuerid][oGucYetenek] == 1) amount += 1.0;
			else if(oyuncuData[issuerid][oGucYetenek] == 2) amount += 2.0;
			else if(oyuncuData[issuerid][oGucYetenek] == 3) amount += 3.0;
			else if(oyuncuData[issuerid][oGucYetenek] == 4) amount += 4.0;
			else if(oyuncuData[issuerid][oGucYetenek] == 5) amount += 5.0;
			else if(oyuncuData[issuerid][oGucYetenek] == 6) amount += 6.0;
			else if(oyuncuData[issuerid][oGucYetenek] == 7) amount += 7.0;
			else if(oyuncuData[issuerid][oGucYetenek] == 8) amount += 8.0;
			else if(oyuncuData[issuerid][oGucYetenek] == 9) amount += 9.0;
			else if(oyuncuData[issuerid][oGucYetenek] == 10) amount += 10.0;
			else if(oyuncuData[issuerid][oGucYetenek] == 11) amount += 10.0;
			else if(oyuncuData[issuerid][oGucYetenek] == 12) amount += 11.0;
			else if(oyuncuData[issuerid][oGucYetenek] == 13) amount += 11.0;
			else if(oyuncuData[issuerid][oGucYetenek] == 14) amount += 12.0;
			else if(oyuncuData[issuerid][oGucYetenek] == 15) amount += 12.0;
			else if(oyuncuData[issuerid][oGucYetenek] == 16) amount += 13.0;
			else if(oyuncuData[issuerid][oGucYetenek] == 17) amount += 13.0;
			else if(oyuncuData[issuerid][oGucYetenek] == 18) amount += 14.0;
			else if(oyuncuData[issuerid][oGucYetenek] == 19) amount += 14.0;
			else if(oyuncuData[issuerid][oGucYetenek] == 20) amount += 15.0;

			SetPlayerHealth(playerid, can-amount);
		}
		switch(GetPlayerWeapon(issuerid))
		{
			case 24:
			{
				if(oyuncuData[playerid][oDayaniklilik] == 1) amount -= 1.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 2) amount -= 1.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 3) amount -= 2.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 4) amount -= 3.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 5) amount -= 4.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 6) amount -= 5.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 7) amount -= 6.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 8) amount -= 7.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 9) amount -= 8.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 10) amount -= 9.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 11) amount -= 10.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 12) amount -= 10.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 13) amount -= 11.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 14) amount -= 11.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 15) amount -= 12.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 16) amount -= 12.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 17) amount -= 13.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 18) amount -= 13.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 19) amount -= 14.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 20) amount -= 14.0;
		        //SCM_ExAll(-1, "Hasar veren: %d(vücut: %dsv.) / Hasar alan: %d(vücut: %dsv.) / Aldýðý hasar: %f", issuerid, oyuncuData[issuerid][oDayaniklilik], playerid, oyuncuData[playerid][oDayaniklilik], amount);
			}
			case 30:
			{
				if(oyuncuData[playerid][oDayaniklilik] == 1) amount -= 1.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 2) amount -= 1.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 3) amount -= 1.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 4) amount -= 1.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 5) amount -= 1.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 6) amount -= 1.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 7) amount -= 1.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 8) amount -= 2.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 9) amount -= 2.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 10) amount -= 2.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 11) amount -= 2.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 12) amount -= 2.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 13) amount -= 2.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 14) amount -= 3.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 15) amount -= 3.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 16) amount -= 3.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 17) amount -= 3.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 18) amount -= 3.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 19) amount -= 4.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 20) amount -= 4.0;
			}
			case 31:
			{
				if(oyuncuData[playerid][oDayaniklilik] == 1) amount -= 1.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 2) amount -= 1.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 3) amount -= 1.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 4) amount -= 1.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 5) amount -= 1.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 6) amount -= 2.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 7) amount -= 2.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 8) amount -= 2.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 9) amount -= 2.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 10) amount -= 3.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 11) amount -= 3.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 12) amount -= 3.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 13) amount -= 3.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 14) amount -= 4.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 15) amount -= 4.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 16) amount -= 4.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 17) amount -= 5.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 18) amount -= 5.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 19) amount -= 6.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 20) amount -= 6.0;
			}
			case 25:
			{
				if(oyuncuData[playerid][oDayaniklilik] == 1) amount -= 1.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 2) amount -= 1.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 3) amount -= 1.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 4) amount -= 1.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 5) amount -= 1.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 6) amount -= 1.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 7) amount -= 1.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 8) amount -= 1.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 9) amount -= 1.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 10) amount -= 1.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 11) amount -= 1.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 12) amount -= 1.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 13) amount -= 1.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 14) amount -= 2.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 15) amount -= 2.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 16) amount -= 2.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 17) amount -= 2.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 18) amount -= 2.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 19) amount -= 3.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 20) amount -= 3.0;
			}
			case 28:
			{
				if(oyuncuData[playerid][oDayaniklilik] == 1) amount -= 1.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 2) amount -= 1.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 3) amount -= 1.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 4) amount -= 1.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 5) amount -= 1.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 6) amount -= 1.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 7) amount -= 1.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 8) amount -= 2.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 9) amount -= 2.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 10) amount -= 2.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 11) amount -= 2.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 12) amount -= 2.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 13) amount -= 2.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 14) amount -= 3.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 15) amount -= 3.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 16) amount -= 3.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 17) amount -= 3.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 18) amount -= 3.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 19) amount -= 4.0;
				else if(oyuncuData[playerid][oDayaniklilik] == 20) amount -= 4.0;
			}
		}
		if(OyuncuBirlikTuru(issuerid) == BIRLIK_POLIS && oyuncuData[issuerid][oTaser] && weaponid == 23)
		{
			if(yakinlik <= 10.0)
			{
				new me[110];
				format(me, sizeof(me), "%s adlý kiþiye taser sýkar ve yüksek miktarda þok verir.", OyuncuIsim(playerid, 1));
				cmd(issuerid, 1, me);
				TogglePlayerControllable(playerid,0);
				ApplyAnimation(playerid, "FIGHT_E", "Hit_fightkick_B", 4.1, 0, 1, 1, 1, 1, 1);
				SunucuMesaji(playerid, "Yüksek miktarda þoka maruz kaldýnýz, bir süre yerden kalkamayacaksýnýz.");
				oyuncuData[playerid][oEtkisizHalde] = true;
				SetTimerEx("CozulmeTimer", 15000, false, "i", playerid);
			}
			else SendClientMessage(issuerid, RENK_GRI, "Kiþiye yeterince yakýn deðilsin, yaklaþarak tekrar dene.");
			return 0;
		}
		else if(OyuncuBirlikTuru(issuerid) == BIRLIK_POLIS && oyuncuData[issuerid][oBeanbag] && weaponid == 25)
		{
			if(yakinlik <= 10.0)
			{
				new me[110];
				format(me, sizeof(me), "%s adlý kiþiye Bean-Bag silahýný doðrultur ve ateþler.", OyuncuIsim(playerid, 1));
				cmd(issuerid, 1, me);
				TogglePlayerControllable(playerid,0);
				ApplyAnimation(playerid, "FIGHT_E", "Hit_fightkick_B", 4.1, 0, 1, 1, 1, 1, 1);
				SunucuMesaji(playerid, "Bean-bag silahýyla vuruldunuz, bir süre yerden kalkamayacaksýnýz.");
				oyuncuData[playerid][oEtkisizHalde] = true;
				SetTimerEx("CozulmeTimer", 15000, false, "i", playerid);
			}
			else SendClientMessage(issuerid, RENK_GRI, "Kiþiye yeterince yakýn deðilsin, yaklaþarak tekrar dene.");
			return 0;
		}
 			new Float:cancik, Float:zirhcik;
 			GetPlayerArmour(playerid, zirhcik); GetPlayerHealth(playerid, cancik);
 			if(bodypart != 3)
 			{
 				if(zirhcik > 0)
 				{

 					ZirhDuzenle(playerid, zirhcik); CanDuzenle(playerid, can - amount);
 					return 0;
 				}
 			}
 		}
 		return 1;
 	}

 	public OnPlayerGiveDamage(playerid, damagedid, Float: amount, weaponid, bodypart)
	{
		if(oyuncuData[damagedid][oYarali] == true) return SetPlayerHealth(damagedid, 10);
		if(weaponid == 0)
		{
			if(tackleDurum[playerid] == 1)
			{
				AnimOynat(playerid, "PED", "KO_shot_stom", 4.0, 0, 1, 1, 1, 0, 1);
				AnimOynat(damagedid, "PED", "KO_shot_stom", 4.0, 0, 1, 1, 1, 0, 1);
				tackleDurum[playerid] = 0;

				new me[49+MAX_PLAYER_NAME];
				format(me, sizeof(me), "%s adlý kiþinin üstüne atlar ve onu yere düþürür.", OyuncuIsim(damagedid, 0));
				cmd(playerid, 1, me);
				return 0;
			}
		}
		return 1;
	}

/*	public OnPlayerRequestDownload(playerid, type, crc)
 	{

 		if(!IsPlayerConnected(playerid))
 			return 0;
 		new filename[64], filefound, final_url[256];
 		if(type == DOWNLOAD_REQUEST_TEXTURE_FILE)
 			filefound = FindTextureFileNameFromCRC(crc, filename, sizeof(filename));
 		else if(type == DOWNLOAD_REQUEST_MODEL_FILE)
 			filefound = FindModelFileNameFromCRC(crc, filename, sizeof(filename));

 		if(filefound)
 		{
 			format(final_url, sizeof(final_url), "%s/%s", SERVER_DOWNLOAD, filename);
 			RedirectDownload(playerid, final_url);
 		}

 		return 1;
 	}*/

 	public OnPlayerFinishedDownloading(playerid, virtualworld)
 	{
 		if(oyuncuData[playerid][oGiris] == true) return false;
 		YuklemeTamamlandi[playerid] = true;
 		GirisDuzelt(playerid);
 		return 1;
 	}

 	public OnPlayerEditObject(playerid, playerobject, objectid, response, Float:fX, Float:fY, Float:fZ, Float:fRotX, Float:fRotY, Float:fRotZ)
	{
		
	}
	
 	public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
 	{
 		/*if(response == EDIT_RESPONSE_FINAL)
 		{
 			if(GetPVarInt(playerid, "KaravanDuzen") == 1)
 			{
 				new did = GetPVarInt(playerid, "karavanid"),query[280];
 				KaravanInfo[did][kX] = x;
 				KaravanInfo[did][kY] = y;
 				KaravanInfo[did][kZ] = z;
 				KaravanInfo[did][krX] = rx;
 				KaravanInfo[did][krY] = ry;
 				KaravanInfo[did][krZ] = rz;
 				SetDynamicObjectPos(KaravanInfo[did][kObje], KaravanInfo[did][kX], KaravanInfo[did][kY], KaravanInfo[did][kZ]);
 				SetDynamicObjectRot(KaravanInfo[did][kObje], KaravanInfo[did][krX], KaravanInfo[did][krY], KaravanInfo[did][krZ]);
 				mysql_format(g_SQL, query, sizeof(query), "UPDATE `karavanlar` SET `x` = %f, `y` = %f, `z` = %f, `rx` = %f, `ry` = %f, `rz` = %f WHERE `id` = %i", x, y, z, rx, ry, rz, KaravanInfo[did][kID]);
 				mysql_query(g_SQL, query);
 				SetPVarInt(playerid, "KaravanDuzen", 0);
 			}
 		} */

 		switch(GateDuzenliyorum[playerid])
 		{
 			case 1:
 			{
 				new id = GetPVarInt(playerid, "GateDuzenleID");
 				switch(response)
 				{
 					case EDIT_RESPONSE_CANCEL:
 					{
 						GateDuzenliyorum[playerid] = 0;
 					}
 					case EDIT_RESPONSE_FINAL:
 					{
 						GateDuzenliyorum[playerid] = 0;
 						gateData[id][gateDurum] = true;
 						gateData[id][gateAcikPos][0] = x;gateData[id][gateAcikPos][1] = y;gateData[id][gateAcikPos][2] = z;
 						gateData[id][gateAcikPos][3] = rx;gateData[id][gateAcikPos][4] = ry;gateData[id][gateAcikPos][5] = rz;
 						GateDuzenleMenu(playerid); GateKaydet(id);
 					}
 				}
 			}
 			case 2:
 			{
 				new id = GetPVarInt(playerid, "GateDuzenleID");
 				switch(response)
 				{
 					case EDIT_RESPONSE_CANCEL:
 					{
 						GateDuzenliyorum[playerid] = 0;
 					}
 					case EDIT_RESPONSE_FINAL:
 					{
 						GateDuzenliyorum[playerid] = 0;
 						gateData[id][gateDurum] = false;
 						gateData[id][gateKapaliPos][0] = x;gateData[id][gateKapaliPos][1] = y;gateData[id][gateKapaliPos][2] = z;
 						gateData[id][gateKapaliPos][3] = rx;gateData[id][gateKapaliPos][4] = ry;gateData[id][gateKapaliPos][5] = rz;
 						GateDuzenleMenu(playerid); GateKaydet(id);
 					}
 				}
 			}
 		}
 		switch(KogusDuzenliyorum[playerid])
 		{
 			case 1:
 			{
 				new id = GetPVarInt(playerid, "KogusID");
 				switch(response)
 				{
 					case EDIT_RESPONSE_CANCEL:
 					{
 						KogusDuzenliyorum[playerid] = 0;
 					}
 					case EDIT_RESPONSE_FINAL:
 					{
 						KogusDuzenliyorum[playerid] = 0;
 						kogusData[id][kogusDurum] = true;
 						kogusData[id][kogusAcikPos][0] = x;kogusData[id][kogusAcikPos][1] = y;kogusData[id][kogusAcikPos][2] = z;
 						kogusData[id][kogusAcikPos][3] = rx;kogusData[id][kogusAcikPos][4] = ry;kogusData[id][kogusAcikPos][5] = rz;
 						KogusKaydet(id);
 					}
 				}
 			}
 			case 2:
 			{
 				new id = GetPVarInt(playerid, "KogusID");
 				switch(response)
 				{
 					case EDIT_RESPONSE_CANCEL:
 					{
 						KogusDuzenliyorum[playerid] = 0;
 					}
 					case EDIT_RESPONSE_FINAL:
 					{
 						KogusDuzenliyorum[playerid] = 0;
 						kogusData[id][kogusDurum] = false;
 						kogusData[id][kogusKapaliPos][0] = x;kogusData[id][kogusKapaliPos][1] = y;kogusData[id][kogusKapaliPos][2] = z;
 						kogusData[id][kogusKapaliPos][3] = rx;kogusData[id][kogusKapaliPos][4] = ry;kogusData[id][kogusKapaliPos][5] = rz;
 						KogusKaydet(id);
 					}
 				}
 			}
 		}
 		if(GetPVarInt(playerid, "asansorDuzenleID") != -1)
 		{
 			new id = GetPVarInt(playerid, "asansorDuzenleID");
 			switch(response)
 			{
 				case EDIT_RESPONSE_CANCEL:
 				{
 					DestroyDynamicObject(AsansorData[id][asansorObje]);
 					SetPVarInt(playerid, "asansorDuzenleID", -1);
 				}
 				case EDIT_RESPONSE_FINAL:
 				{
 					AsansorData[id][asansorPos_1][0] = x, AsansorData[id][asansorPos_1][1] = y, AsansorData[id][asansorPos_1][2] = z,
 					AsansorData[id][asansorPos_1][3] = rx, AsansorData[id][asansorPos_1][4] = ry, AsansorData[id][asansorPos_1][5] = rz;
 					SunucuMesaji(playerid, "Asansor zemin kat pozisyonu ayarlandý, þimdi 'Y' tuþunu kullanarak kumanda pozisyonunu ayarla!");
 					SetPVarInt(playerid, "asansorTusAyarla", id);
 					SetPVarInt(playerid, "asansorDuzenleID", -1);
 				}
 			}
 		}
 		if(oyuncuData[playerid][pGiseOlustur] == true)
 		{
 			new id = GetPVarInt(playerid, "giseDuzenleID");
 			switch(response)
 			{
 				case EDIT_RESPONSE_CANCEL:
 				{
 					oyuncuData[playerid][pGiseOlustur] = false;
 					DestroyDynamicObject(objectid);
 					SetPVarInt(playerid, "giseDuzenleID", -1);
 					BilgiText(playerid, "~r~~h~~h~Gise~w~ eklemekten vazgeçtiniz");
 				}
 				case EDIT_RESPONSE_FINAL:
 				{
 					oyuncuData[playerid][pGiseOlustur] = false;
 					giseData[id][gisePos][0] = x, giseData[id][gisePos][1] = y, giseData[id][gisePos][2] = z;
 					giseData[id][gisePos][3] = rx, giseData[id][gisePos][4] = ry, giseData[id][gisePos][5] = rz;
 					new str[256], zone[MAX_ZONE_NAME];
 					Get3DZone(tamirciData[id][tamirPos][0], tamirciData[id][tamirPos][1], tamirciData[id][tamirPos][2], zone, sizeof(zone));
 					format(str, sizeof(str), "{CDCDCD}[{F5E600}Giþe - %s #%d{CDCDCD}]\n{DDDDDD}Geçiþ ücreti {F5E600}%s{DDDDDD}, geçmek için {F5E600}/gise{DDDDDD} komutunu kullanýn.", zone, id, NumaraFormati(giseData[id][giseUcret]));
 					giseData[id][giseLabel] = CreateDynamic3DTextLabel(str, 0xE22121FF,giseData[id][gisePos][0], giseData[id][gisePos][1], giseData[id][gisePos][2], 8.0);
 					Iter_Add(Giseler, id);
 					new pozlar[512], query[256];
 					format(pozlar, sizeof(pozlar), "%.1f|%.1f|%.1f|%.1f|%.1f|%.1f", giseData[id][gisePos][0], giseData[id][gisePos][1], giseData[id][gisePos][2], giseData[id][gisePos][3], giseData[id][gisePos][4], giseData[id][gisePos][5]);
 					mysql_format(g_SQL, query, sizeof(query), "INSERT INTO `giseler` (`id`, `Ucret`, `Pozisyon`) VALUES ('%d', '%d', '%e')", id, giseData[id][giseUcret], pozlar);
 					mysql_query(g_SQL, query);
 				}
 			}
 		}

 		if(response == EDIT_RESPONSE_FINAL)
 		{
 			if(GetPVarInt(playerid, "tezgahduzenliyor") == 1)
 			{
 				new tid = GetPVarInt(playerid, "tezgahid"),query[180],string[110];
 				TezgahInfo[tid][tX] = x;
 				TezgahInfo[tid][tY] = y;
 				TezgahInfo[tid][tZ] = z;
 				TezgahInfo[tid][trX] = rx;
 				TezgahInfo[tid][trY] = ry;
 				TezgahInfo[tid][trZ] = rz;
 				SetDynamicObjectPos(TezgahInfo[tid][tObje], TezgahInfo[tid][tX], TezgahInfo[tid][tY], TezgahInfo[tid][tZ]);
 				SetDynamicObjectRot(TezgahInfo[tid][tObje], TezgahInfo[tid][trX], TezgahInfo[tid][trY], TezgahInfo[tid][trZ]);
 				mysql_format(g_SQL, query, sizeof(query), "UPDATE `tezgahlar` SET `x` = %f, `y` = %f, `z` = %f, `rx` = %f, `ry` = %f, `rz` = %f WHERE `id` = %d", TezgahInfo[tid][tX],TezgahInfo[tid][tY],TezgahInfo[tid][tZ],TezgahInfo[tid][trX],TezgahInfo[tid][trY],TezgahInfo[tid][trZ], tid);
 				mysql_query(g_SQL, query);
 				if(IsValidDynamic3DTextLabel(TezgahInfo[tid][tLabel])) DestroyDynamic3DTextLabel(TezgahInfo[tid][tLabel]);
 				format(string, sizeof(string), "{F2DA4E}[CRAFT MASASI]\nID: {FFFFFF}%d\n{F2DA4E}Sahip: {FFFFFF}%s", tid, oyuncuData[playerid][oIsim]);
 				TezgahInfo[tid][tLabel] = CreateDynamic3DTextLabel(string, RENK_OZELKIRMIZI, x, y, z, 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,  TezgahInfo[tid][tVw], TezgahInfo[tid][tInt]);
 				SetPVarInt(playerid, "tezgahduzenliyor", 0);
 			}

 			else if(GetPVarInt(playerid, "seyyarduzenliyor") == 1)
 			{
 				new tid = GetPVarInt(playerid, "seyyarid"),query[180],string[170];
 				SeyyarInfo[tid][sX] = x;
 				SeyyarInfo[tid][sY] = y;
 				SeyyarInfo[tid][sZ] = z;
 				SeyyarInfo[tid][srX] = rx;
 				SeyyarInfo[tid][srY] = ry;
 				SeyyarInfo[tid][srZ] = rz;
 				SetDynamicObjectPos(SeyyarInfo[tid][sObje], SeyyarInfo[tid][sX], SeyyarInfo[tid][sY], SeyyarInfo[tid][sZ]);
 				SetDynamicObjectRot(SeyyarInfo[tid][sObje], SeyyarInfo[tid][srX], SeyyarInfo[tid][srY], SeyyarInfo[tid][srZ]);
 				mysql_format(g_SQL, query, sizeof(query), "UPDATE `seyyarlar` SET `x` = %f, `y` = %f, `z` = %f, `rx` = %f, `ry` = %f, `rz` = %f WHERE `id` = %d", SeyyarInfo[tid][sX],SeyyarInfo[tid][sY],SeyyarInfo[tid][sZ],SeyyarInfo[tid][srX],SeyyarInfo[tid][srY],SeyyarInfo[tid][srZ], tid);
 				mysql_query(g_SQL, query);
 				if(IsValidDynamic3DTextLabel(SeyyarInfo[tid][sLabel])) DestroyDynamic3DTextLabel(SeyyarInfo[tid][sLabel]);
 				format(string, sizeof(string), "{C24748}[TEZGAH]\nID: {FFFFFF}%d\n{C24748}Tür: {FFFFFF}%s\n{C24748}Sahip: {FFFFFF}%s\n'/satinal'", tid, TezgahTuru(SeyyarInfo[tid][sTur]), oyuncuData[playerid][oIsim]);
 				SeyyarInfo[tid][sLabel] = CreateDynamic3DTextLabel(string, RENK_OZELKIRMIZI, x, y, z, 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);
 				SetPVarInt(playerid, "seyyarduzenliyor", 0);
 			}
 			else if(GetPVarInt(playerid, "AnkesorDuzenliyor") == 1)
 			{
 				new did = GetPVarInt(playerid, "AnkesorKur"),query[200],labelString[150];
 				AnkesorInfo[did][aX] = x;
 				AnkesorInfo[did][aY] = y;
 				AnkesorInfo[did][aZ] = z;
 				AnkesorInfo[did][arX] = rx;
 				AnkesorInfo[did][arY] = ry;
 				AnkesorInfo[did][arZ] = rz;
 				SetDynamicObjectPos(AnkesorInfo[did][aObje], AnkesorInfo[did][aX], AnkesorInfo[did][aY], AnkesorInfo[did][aZ]);
 				SetDynamicObjectRot(AnkesorInfo[did][aObje], AnkesorInfo[did][arX], AnkesorInfo[did][arY], AnkesorInfo[did][arZ]);
 				format(labelString, sizeof(labelString), "[Ankesörlü Telefon %d]\n{AFAFAF}Numara: {FFFFFF}%d\n{AFAFAF}(/atel)", did, AnkesorInfo[did][aNumara]);
 				AnkesorInfo[did][aLabel] = CreateDynamic3DTextLabel(labelString, RENK_SERVER, AnkesorInfo[did][aX], AnkesorInfo[did][aY], AnkesorInfo[did][aZ] + 1.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, AnkesorInfo[did][aVw], AnkesorInfo[did][aInt]);
 				mysql_format(g_SQL, query, sizeof(query), "UPDATE `atelefon` SET `x` = %f, `y` = %f, `z` = %f, `rx` = %f, `ry` = %f, `rz` = %f WHERE `id` = %i", x,y,z,rx,ry,rz, did);
 				mysql_tquery(g_SQL, query, "", "", playerid);
 				SetPVarInt(playerid, "AnkesorDuzenliyor", 0);

 			}
 			else if(GetPVarInt(playerid, "AnkesorDuzen") == 1)
 			{
 				new did = GetPVarInt(playerid, "ankid"),query[200],labelString[150];
 				AnkesorInfo[did][aX] = x;
 				AnkesorInfo[did][aY] = y;
 				AnkesorInfo[did][aZ] = z;
 				AnkesorInfo[did][arX] = rx;
 				AnkesorInfo[did][arY] = ry;
 				AnkesorInfo[did][arZ] = rz;
 				SetDynamicObjectPos(AnkesorInfo[did][aObje], AnkesorInfo[did][aX], AnkesorInfo[did][aY], AnkesorInfo[did][aZ]);
 				SetDynamicObjectRot(AnkesorInfo[did][aObje], AnkesorInfo[did][arX], AnkesorInfo[did][arY], AnkesorInfo[did][arZ]);
 				if(IsValidDynamic3DTextLabel(AnkesorInfo[did][aLabel])) DestroyDynamic3DTextLabel(AnkesorInfo[did][aLabel]);
 				format(labelString, sizeof(labelString), "[Ankesörlü Telefon %d]\n{AFAFAF}Numara: {FFFFFF}%d\n{AFAFAF}(/atel)", did, AnkesorInfo[did][aNumara]);
 				AnkesorInfo[did][aLabel] = CreateDynamic3DTextLabel(labelString, RENK_SERVER, AnkesorInfo[did][aX], AnkesorInfo[did][aY], AnkesorInfo[did][aZ] + 1.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, AnkesorInfo[did][aVw], AnkesorInfo[did][aInt]);
 				mysql_format(g_SQL, query, sizeof(query), "UPDATE `atelefon` SET `x` = %f, `y` = %f, `z` = %f, `rx` = %f, `ry` = %f, `rz` = %f WHERE `id` = %i", x,y,z,rx,ry,rz, did);
 				mysql_tquery(g_SQL, query, "", "", playerid);
 				SetPVarInt(playerid, "AnkesorDuzen", 0);

 			}
 			else if(oyuncuData[playerid][oATMDuzenliyor] != -1 && ATMBilgi[oyuncuData[playerid][oATMDuzenliyor]][atmKullanimda])
 			{
 				ATMBilgi[oyuncuData[playerid][oATMDuzenliyor]][atmPos][0] = x;
 				ATMBilgi[oyuncuData[playerid][oATMDuzenliyor]][atmPos][1] = y;
 				ATMBilgi[oyuncuData[playerid][oATMDuzenliyor]][atmPos][2] = z;
 				ATMBilgi[oyuncuData[playerid][oATMDuzenliyor]][atmPos][3] = rz;

 				ATM_Yenile(oyuncuData[playerid][oATMDuzenliyor]);
 				ATM_Kaydet(oyuncuData[playerid][oATMDuzenliyor]);

 				SunucuMesaji(playerid, "ATM Editlemesini baþarýyla tamamladýn. (ATM ID: %d)", oyuncuData[playerid][oATMDuzenliyor]);
 			}
 			else if(oyuncuData[playerid][uDuzenliyor] != -1 && UyusturucuBilgi[oyuncuData[playerid][uDuzenliyor]][uKullanimda])
 			{
 				UyusturucuBilgi[oyuncuData[playerid][uDuzenliyor]][uPos][0] = x;
 				UyusturucuBilgi[oyuncuData[playerid][uDuzenliyor]][uPos][1] = y;
 				UyusturucuBilgi[oyuncuData[playerid][uDuzenliyor]][uPos][2] = z;

 				Uyusturucu_Yenile(oyuncuData[playerid][uDuzenliyor]);
 				Uyusturucu_Kaydet(oyuncuData[playerid][uDuzenliyor]);

 				SunucuMesaji(playerid, "Uyuþturucu düzenlemesini baþarýyla tamamladýn. (Uyuþturucu ID: %d)", oyuncuData[playerid][uDuzenliyor]);
 			}
 			else if(oyuncuData[playerid][oEditlenenBarikat] != -1 && BarikatBilgi[oyuncuData[playerid][oEditlenenBarikat]][barikatKullanimda])
 			{
 				new id = oyuncuData[playerid][oEditlenenBarikat];
 				BarikatBilgi[id][barikatPos][0] = x;
 				BarikatBilgi[id][barikatPos][1] = y;
 				BarikatBilgi[id][barikatPos][2] = z;
 				BarikatBilgi[id][barikatPos][3] = rx;
 				BarikatBilgi[id][barikatPos][4] = ry;
 				BarikatBilgi[id][barikatPos][5] = rz;

 				Barikat_Yenile(id);
 				SunucuMesaji(playerid, "Barikat düzenlemesini baþarýyla tamamladýn. (ID: %d)", id);
 			}
 			else if(oyuncuData[playerid][oDuzenlenenPompa] != -1 && BenzinPompasi[oyuncuData[playerid][oDuzenlenenPompa]][pompaKullanimda])
 			{
 				BenzinPompasi[oyuncuData[playerid][oDuzenlenenPompa]][pompaPos][0] = x;
 				BenzinPompasi[oyuncuData[playerid][oDuzenlenenPompa]][pompaPos][1] = y;
 				BenzinPompasi[oyuncuData[playerid][oDuzenlenenPompa]][pompaPos][2] = z;
 				BenzinPompasi[oyuncuData[playerid][oDuzenlenenPompa]][pompaPos][3] = rz;

 				Pompa_Yenile(oyuncuData[playerid][oDuzenlenenPompa]);
 				Pompa_Kaydet(oyuncuData[playerid][oDuzenlenenPompa]);

 				SunucuMesaji(playerid, "Benzin pompasý baþarýyla düzenlendi. (PID: %d)", oyuncuData[playerid][oDuzenlenenPompa]);
 			}
 			else if(oyuncuData[playerid][oDuzenlenenGrafiti] != -1)
 			{
 				new id = oyuncuData[playerid][oDuzenlenenGrafiti];
 				grfData[id][grfPos][0] = x; grfData[id][grfPos][1] = y; grfData[id][grfPos][2] = z;
 				grfData[id][grfPos][3] = rx; grfData[id][grfPos][4] = ry; grfData[id][grfPos][5] = rz;
 				new durum = Grafiti_Bul(playerid, id, 1.5);
 				if(durum == -1) return hataMesaji(playerid, "Düzenlediðiniz graffitiye yakýn olmalýsýnýz."), EditDynamicObject(playerid, grfData[id][grfObje]);

 				new query[140];
 				mysql_format(g_SQL, query, sizeof(query), "INSERT INTO `grafitiler` (`grfID`) VALUES ('%d')", id);
 				mysql_query(g_SQL, query);
 				Grafiti_Yenile(id);
 				Grafiti_Kaydet(id);
 				Iter_Add(Grafitiler, id);
 				TogglePlayerControllable(playerid, false);
 				oyuncuData[playerid][oGraffitiSure] = strlen(grfData[id][grfYazi]) * 2;
 				SunucuMesaji(playerid, "Graffiti oluþturuluyor, lütfen bekleyin..");
 				OzelYakinMesaj(playerid, 30.0, RENK_PEMBE, "* %s elindeki sprey ile bulunduðu alana birþeyler çizmeye baþladý.", OyuncuIsim(playerid));
 			}
 			else if(oyuncuData[playerid][mobilyaDuzenleniyor] != 0)
 			{
 				new query[500];
 				mysql_format(g_SQL, query, sizeof(query), "UPDATE `furniture_data` SET `furniture_posx` = '%.4f', `furniture_posy` = '%.4f', `furniture_posz` = '%.4f', `furniture_posrx` = '%.4f', `furniture_posry` = '%.4f', `furniture_posrz` = '%.4f' WHERE furniture_objectid = '%d'", x, y, z, rx, ry, rz, objectid);
 				mysql_tquery(g_SQL, query);
 				SunucuMesaji(playerid, "Baþarýyla eþyanýn bölgesini deðiþtirdin.");

 				SetDynamicObjectPos(objectid, x, y, z);
 				SetDynamicObjectRot(objectid, rx, ry, rz);
 			}
 		}
 		if(response == EDIT_RESPONSE_FINAL || response == EDIT_RESPONSE_CANCEL)
 		{
 			if(oyuncuData[playerid][oATMDuzenliyor] != -1)
 			{
 				ATM_Yenile(oyuncuData[playerid][oATMDuzenliyor]);
 				oyuncuData[playerid][oDuzenlemeTipi] = 0;
 				oyuncuData[playerid][oEditlenenObje] = -1;
 				oyuncuData[playerid][oEditlenenBarikat] = -1;
 				oyuncuData[playerid][oATMDuzenliyor] = -1;
 				oyuncuData[playerid][uDuzenliyor] = -1;
 				oyuncuData[playerid][oDuzenlenenPompa] = -1;
 			}
 		}
 		if(response == EDIT_RESPONSE_CANCEL)
 		{
 			if(oyuncuData[playerid][oDuzenlenenGrafiti] != -1)
 			{
 				new id = oyuncuData[playerid][oDuzenlenenGrafiti];
 				for(new i ; i < 6; i ++)
 				{
 					grfData[id][grfPos][i] = 0.0;
 				}
 				format(grfData[id][grfSahip], MAX_PLAYER_NAME, "-");
 				format(grfData[id][grfYazi], 128, "-");
 				DestroyDynamicObject(grfData[id][grfObje]);
 				oyuncuData[playerid][oDuzenlenenGrafiti] = -1;
 			}
 		}
 		return 1;
 	}

 	function OyuncuGirisTimer(playerid)
 	{
 		UyariMesaji(playerid, "30 Saniye içerisinde giriþ yapmadýðýnýz için kicklendiniz.");
 		KickEx(playerid);
 		KillTimer(oyuncugiris[playerid]);
 		return 1;
 	}

 	function uyusturucusurebitir(playerid)
 	{
 		SetPlayerDrunkLevel(playerid, 0);
 		SetPlayerWeather(playerid, SunucuWeather);
 		SunucuMesaji(playerid, "Uyuþturucu etkisi geçti, kendine gelmeye baþlýyorsun.");
 		KillTimer(oyuncuData[playerid][ouyusturucutimer]);
 		return 1;
 	}

 	function kelepceyikir(playerid,oyuncuid)
 	{
 		new mesaj[120];
 		if(random(100) < 50)
 		{
 			format(mesaj, sizeof(mesaj), "%s adlý kiþinin kelepçesini kýramadý.", OyuncuIsim(oyuncuid));
 			cmd(playerid, 1, mesaj);
 			TogglePlayerControllable(playerid, true);
 			TogglePlayerControllable(oyuncuid, true);
 			ClearAnimations(playerid);
 			oyuncuData[playerid][oPenseOnay] = false;
 			GameTextForPlayer(playerid, "~r~KELEPCE KIRMA BASARISIZ!", 750, 4);
 		}
 		else
 		{
			if(!IsPlayerConnected(oyuncuid)) return hataMesaji(playerid, "Karþýdaki kiþi oyundan çýktýðý için kelepçe kýrma iptal oldu.");
 			oyuncuData[oyuncuid][oKelepceli] = 0;
 			SetPlayerSpecialAction(oyuncuid, SPECIAL_ACTION_NONE);
			if(IsPlayerAttachedObjectSlotUsed(oyuncuid, 5)) RemovePlayerAttachedObject(oyuncuid, 5);
 			format(mesaj, sizeof(mesaj), "%s adlý kiþinin kelepçesini baþarýyla kýrar.", OyuncuIsim(oyuncuid));
 			cmd(playerid, 1, mesaj);
 			TogglePlayerControllable(playerid, true);
 			TogglePlayerControllable(oyuncuid, true);
 			ClearAnimations(playerid);
 			oyuncuData[playerid][oPenseOnay] = false;
 			GameTextForPlayer(playerid, "~g~KELEPCE KIRILDI!", 750, 4);
 		}
 		return 1;
 	}

 	function Otel_SureAzalt()
 	{
 		foreach(new id : OtelOdalari)
 		{
 			if(otelOda[id][oda_Fiyat] != -1)
 			{
 				if(otelOda[id][oda_Sure] < 1)
 				{
 					format(otelOda[id][oda_Sahip], MAX_PLAYER_NAME, "-");
 					otelOda[id][oda_Sure] = 0, OtelOda_TextUP();
 				}
 				else otelOda[id][oda_Sure]--, OtelOda_TextUP();
 			}
 		}
 		return 1;
 	}

 	function OtelOda_TextUP()
 	{
 		new otelstrdurum[256], otelstrdurumx[512], odastrsuresi[256];
 		foreach(new id : OtelOdalari)
 		{
 			if(otelOda[id][oda_Fiyat] != -1)
 			{
 				otelOda[id][oda_Fiyat] = Oda_FiyatVer(resepsData[otelOda[id][oda_Resepsiyon]][rspYildiz]);
 				if(otelOda[id][oda_Sure] < 1)
 				{
 					format(otelstrdurum, sizeof(otelstrdurum), "\n{1bad51}(Mûsait oda, kiralanabilir.)");
 					format(odastrsuresi, sizeof(odastrsuresi), "{CDCDCD}-");
 				}
 				else
 				{
 					format(otelstrdurum, sizeof(otelstrdurum), "\n{ad331b}(Meþgûl oda, kiralanamaz.)");
 					if(otelOda[id][oda_Sure] >= 3600) format(odastrsuresi, sizeof(odastrsuresi), "{CDCDCD}%d saat", otelOda[id][oda_Sure] / 3600);
 					else format(odastrsuresi, sizeof(odastrsuresi), "{CDCDCD}%d dakika", otelOda[id][oda_Sure] / 60);
 				}
 			}
 			else format(otelstrdurum, sizeof(otelstrdurum), "\n{ff3d1b}(Bu oda hazýr deðil, kiralanamaz.)"), format(odastrsuresi, sizeof(odastrsuresi), "{CDCDCD}-");

 			format(otelstrdurumx, sizeof(otelstrdurumx), "[ {ddea23}Otel Odasý {FFFFFF}]\n\n{FFFFFF} Sahip: {CDCDCD}%s\n{FFFFFF} Oda Numarasý: {CDCDCD}%03d\n{FFFFFF} Resepsiyon: {CDCDCD}%d\n{FFFFFF} Kalan Zaman: {CDCDCD}%s\n{FFFFFF} Kilit Durumu: {CDCDCD}%s {FFFFFF}({ddea23}Tuþ: N{FFFFFF})%s", otelOda[id][oda_Sahip], id, otelOda[id][oda_Resepsiyon], odastrsuresi, (otelOda[id][oda_Kilit] == false) ? ("{33AA33}Kilitli Deðil") : ("{B70000}Kilitli"), otelstrdurum);
 			UpdateDynamic3DTextLabelText(otelOda[id][oda_Label], -1, otelstrdurumx);
        //
 		}
 		return 1;
 	}

 	function Resepsiyonlari_Yukle()
 	{
 		new rows, mesaj[256];
 		cache_get_row_count(rows);
 		if(rows)
 		{
 			new id, yukle, ssw[512];
 			while(yukle < rows)
 			{
 				cache_get_value_name_int(yukle, "id", id);
 				cache_get_value_name(yukle, "Sahip", resepsData[id][rspSahip]);
 				cache_get_value_name_int(yukle, "Kasa", resepsData[id][rspKasa]);

 				cache_get_value_name(yukle, "Pozisyonlar", ssw, sizeof(ssw));
 				sscanf(ssw, "p<|>fff", resepsData[id][rspPos][0], resepsData[id][rspPos][1], resepsData[id][rspPos][2]);

 				new str[256];
 				resepsData[id][rspYildiz] = 1;
 				format(str, sizeof(str), "%s\n[ {cfea23}Resepsiyon %d {FFFFFF}]\n\n{FFFFFF}Oda kiralamak için '{cfea23}/odakirala{FFFFFF}' yazýnýz.", yildiz_Goster(resepsData[id][rspYildiz]), id);
 				resepsData[id][rspLabel] = CreateDynamic3DTextLabel(str, -1, resepsData[id][rspPos][0], resepsData[id][rspPos][1], resepsData[id][rspPos][2], 6.0, INVALID_PLAYER_ID, INVALID_PLAYER_ID, 0, -1, -1);

 				Iter_Add(Resepsiyonlar, id);
 				yukle++;
 			}
 		}
 		if(rows < 1) format(mesaj, sizeof(mesaj), "[SUNUCU] Veritabanýnda sunucuya entegre edilecek resepsiyon bulunamadý!");
 		else if(rows > 0) format(mesaj, sizeof(mesaj), "[SUNUCU] %d adet resepsiyon yüklendi.", rows);
 		printf(mesaj);
 		return 1;
 	}

 	function imlecgetir(playerid)
 	{
 		SelectTextDraw(playerid,RENK_DO);
 		return 1;
 	}

 	function Otel_Odalari_Yukle()
 	{
 		new rows, mesaj[256];
 		cache_get_row_count(rows);
 		if(rows)
 		{
 			new id, yukle, ssw[512];
 			while(yukle < rows)
 			{
 				cache_get_value_name_int(yukle, "id", id);
 				format(otelOda[id][oda_Sahip], MAX_PLAYER_NAME, "-");
 				cache_get_value_name_int(yukle, "Resepsiyon", otelOda[id][oda_Resepsiyon]);
 				cache_get_value_name_int(yukle, "Fiyat", otelOda[id][oda_Fiyat]);
 				otelOda[id][oda_Sure] = 0;

 				cache_get_value_name(yukle, "Pozisyonlar", ssw, sizeof(ssw));
 				sscanf(ssw, "p<|>fff", otelOda[id][oda_Pos][0], otelOda[id][oda_Pos][1], otelOda[id][oda_Pos][2]);

 				new str[256];
 				format(str, sizeof(str), "[ {ddea23}Otel Odasý {FFFFFF}]\n\n{FFFFFF} Bilgiler yükleniyor..");
 				otelOda[id][oda_Label] = CreateDynamic3DTextLabel(str, -1, otelOda[id][oda_Pos][0], otelOda[id][oda_Pos][1], otelOda[id][oda_Pos][2], 6.0, INVALID_PLAYER_ID, INVALID_PLAYER_ID, 0, -1, -1);
 				otelOda[id][oda_Pickup] = CreateDynamicPickup(19134, 23, otelOda[id][oda_Pos][0], otelOda[id][oda_Pos][1], otelOda[id][oda_Pos][2]);

 				Iter_Add(OtelOdalari, id);
 				yukle++;
 			}
 		}
 		if(rows < 1) format(mesaj, sizeof(mesaj), "[SUNUCU] Veritabanýnda sunucuya entegre edilecek resepsiyona baðlý oda bulunamadý!");
 		else if(rows > 0) format(mesaj, sizeof(mesaj), "[SUNUCU] %d adet resepsiyona baðlý oda yüklendi.", rows), OtelOda_TextUP();
 		printf(mesaj);
 		return 1;
 	}

 	function Oda_FiyatVer(yildiz) return 100 * yildiz;

 	function Asansorleri_Yukle()
 	{
 		new rows, mesaj[256];
 		cache_get_row_count(rows);
 		if(rows)
 		{
 			new id, yukle, stringw[512];
 			while(yukle < rows)
 			{
 				cache_get_value_name_int(yukle, "id", id);

 				cache_get_value_name(yukle, "Pozisyonlar_1", stringw, sizeof(stringw));
 				sscanf(stringw, "p<|>ffff", AsansorData[id][asansorPos_1][0], AsansorData[id][asansorPos_1][1], AsansorData[id][asansorPos_1][2],\
 					AsansorData[id][asansorPos_1][3], AsansorData[id][asansorPos_1][4], AsansorData[id][asansorPos_1][5]);

 				cache_get_value_name(yukle, "Pozisyonlar_2", stringw, sizeof(stringw));
 				sscanf(stringw, "p<|>ffff", AsansorData[id][asansorPos_2][0], AsansorData[id][asansorPos_2][1], AsansorData[id][asansorPos_2][2],\
 					AsansorData[id][asansorPos_2][3], AsansorData[id][asansorPos_2][4], AsansorData[id][asansorPos_2][5]);

 				cache_get_value_name(yukle, "Pozisyonlar_3", stringw, sizeof(stringw));
 				sscanf(stringw, "p<|>ffff", AsansorData[id][asansorPos_3][0], AsansorData[id][asansorPos_3][1], AsansorData[id][asansorPos_3][2],\
 					AsansorData[id][asansorPos_3][3], AsansorData[id][asansorPos_3][4], AsansorData[id][asansorPos_3][5]);

 				AsansorData[id][asansorObje] = CreateDynamicObject(ASANSOR_OBJE, AsansorData[id][asansorPos_1][0], AsansorData[id][asansorPos_1][1], AsansorData[id][asansorPos_1][2], AsansorData[id][asansorPos_1][3],\
 					AsansorData[id][asansorPos_1][4], AsansorData[id][asansorPos_1][5], -1, -1);

 				Iter_Add(Asansorler, id);
 				yukle++;
 			}
 		}
 		if(rows < 1) format(mesaj, sizeof(mesaj), "[SUNUCU] Veritabanýnda sunucuya entegre edilecek asansor bulunamadý!");
 		else if(rows > 0) format(mesaj, sizeof(mesaj), "[SUNUCU] %d adet asansor yüklendi.", rows);
 		printf(mesaj);
 		return 1;
 	}

 	function GateArama(playerid)
 	{
 		new id = GateBul(playerid, true, 2.0), str[256], hexkodu;
 		if(id != -1)
 		{
		#if GATE_BILGISI true
 			if(oyuncuData[playerid][oAdminDurum] == false) return true;
		#endif
 			if(renkDeger[playerid]==sizeof(TextdrawRenkleri)-1)
 			{
 				renkDeger[playerid]=0;
 			}
 			else renkDeger[playerid]++;
 			PlayerTextDrawHide(playerid, GateTextdraw[playerid]);

 			format(str, sizeof(str), "0x%sFF", TextdrawRenkleri[renkDeger[playerid]][hexKod]); sscanf(str, "x", hexkodu);
 			PlayerTextDrawColor(playerid, GateTextdraw[playerid], hexkodu);

 			format(str, sizeof(str), "Gate ID: ~w~%d", id);
 			PlayerTextDrawSetString(playerid, GateTextdraw[playerid], str);
 			PlayerTextDrawShow(playerid, GateTextdraw[playerid]);
 		}
 		else PlayerTextDrawHide(playerid, GateTextdraw[playerid]);
 		str[0] = 0;
 		return 1;
 	}

 	function GateYukle()
 	{
 		new rows;
 		cache_get_row_count(rows);
 		if(rows)
 		{
 			new id, cekilen, string[512];
 			while(cekilen < rows)
 			{
 				cache_get_value_name_int(cekilen, "id", id);
 				cache_get_value_name_int(cekilen, "birlik", gateData[id][gateBirlik]);
 				cache_get_value_name_int(cekilen, "obje", gateData[id][gateObjeModel]);
 				cache_get_value_name_int(cekilen, "interior", gateData[id][gateInterior]);
 				cache_get_value_name_int(cekilen, "vw", gateData[id][gateVirtual]);
 				cache_get_value_name_float(cekilen, "hiz", gateData[id][gateHiz]);
 				cache_get_value_name_float(cekilen, "uzaklik", gateData[id][gateUzaklik]);
 				cache_get_value_name(cekilen, "acikpos", string, sizeof(string));
 				sscanf(string, "p<|>ffffff", gateData[id][gateAcikPos][0], gateData[id][gateAcikPos][1], gateData[id][gateAcikPos][2], gateData[id][gateAcikPos][3], gateData[id][gateAcikPos][4], gateData[id][gateAcikPos][5]);
 				cache_get_value_name(cekilen, "kapalipos", string, sizeof(string));
 				sscanf(string, "p<|>ffffff", gateData[id][gateKapaliPos][0], gateData[id][gateKapaliPos][1], gateData[id][gateKapaliPos][2], gateData[id][gateKapaliPos][3], gateData[id][gateKapaliPos][4], gateData[id][gateKapaliPos][5]);
 				cache_get_value_name(cekilen, "sifre", gateData[id][gateSifre], 128);
 				cache_get_value_name(cekilen, "sahip", gateData[id][gateSahip], 32);
			//printf("%s - %d - %s", gateData[id][gateSahip], gateData[id][gateBirlik], gateData[id][gateSifre]);
 				gateData[id][gateObje] = CreateDynamicObject(gateData[id][gateObjeModel], gateData[id][gateKapaliPos][0], gateData[id][gateKapaliPos][1], gateData[id][gateKapaliPos][2], gateData[id][gateKapaliPos][3], gateData[id][gateKapaliPos][4], gateData[id][gateKapaliPos][5], gateData[id][gateVirtual], gateData[id][gateInterior]);
 				gateData[id][gateDurum] = false;
 				Iter_Add(Gateler, id);
 				cekilen++;
 			}
 		}
 		new mesaj[256];
 		if(rows < 1) format(mesaj, sizeof(mesaj), "[SUNUCU] Veritabanýnda sunucuya entegre edilecek gate bulunamadý!");
 		else if(rows > 0) format(mesaj, sizeof(mesaj), "[SUNUCU] %d adet gate yüklendi.", rows);
 		printf(mesaj);
 		return 1;
 	}

 	stock GateBul(playerid, bool:deger = false, Float:Yakinlik = 7.0)
 	{
 		switch(deger)
 		{
 			case false:
 			{
 				foreach(new g: Gateler)
 				{
 					if(IsPlayerInRangeOfPoint(playerid, gateData[g][gateUzaklik], gateData[g][gateAcikPos][0], gateData[g][gateAcikPos][1], gateData[g][gateAcikPos][2]) && GetPlayerVirtualWorld(playerid) == gateData[g][gateVirtual]) return g;
 				}
 			}
 			case true:
 			{
 				foreach(new g: Gateler)
 				{
 					if(IsPlayerInRangeOfPoint(playerid, Yakinlik, gateData[g][gateAcikPos][0], gateData[g][gateAcikPos][1], gateData[g][gateAcikPos][2]) && GetPlayerVirtualWorld(playerid) == gateData[g][gateVirtual]) return g;
 				}
 			}
 		}
 		return -1;
 	}

 	stock GateOlustur(playerid, id, model)
 	{
 		new query[128 * 2]; gateData[id][gateDurum] = false;gateData[id][gateBirlik] = -1;
 		gateData[id][gateHiz] = 5.0;gateData[id][gateUzaklik] = 5.0;
 		gateData[id][gateObjeModel] = model; format(gateData[id][gateSifre], 32, "-");
 		gateData[id][gateVirtual] = GetPlayerVirtualWorld(playerid); gateData[id][gateInterior] = GetPlayerInterior(playerid);
 		GetPlayerPos(playerid, gateData[id][gateAcikPos][0], gateData[id][gateAcikPos][1], gateData[id][gateAcikPos][2]);
 		GetPlayerFacingAngle(playerid, gateData[id][gateAcikPos][5]); gateData[id][gateAcikPos][3]=0.0;gateData[id][gateAcikPos][4]=0.0;
 		GetXYInFrontOfPlayer(playerid, gateData[id][gateAcikPos][0], gateData[id][gateAcikPos][1], 3.0);
 		for(new i;i<6;i++){gateData[id][gateKapaliPos][i] = gateData[id][gateAcikPos][i];}
 			gateData[id][gateObje] = CreateDynamicObject(gateData[id][gateObjeModel], gateData[id][gateKapaliPos][0],\
 				gateData[id][gateKapaliPos][1], gateData[id][gateKapaliPos][2], gateData[id][gateKapaliPos][3],\
 				gateData[id][gateKapaliPos][4], gateData[id][gateKapaliPos][5], gateData[id][gateVirtual], gateData[id][gateInterior]);
 		mysql_format(g_SQL, query, sizeof(query),"INSERT INTO `gateler` (`id`) VALUES ('%d')", id);
 		mysql_tquery(g_SQL, query); Iter_Add(Gateler, id);
 		GateKaydet(id);
 		return 1;
 	}

 	stock GateKaydet(id)
 	{
 		new query[256 * 3], acpos[256], kapos[256];
 		format(acpos, sizeof(acpos), "%.4f|%.4f|%.4f|%.4f|%.4f|%.4f", gateData[id][gateAcikPos][0], gateData[id][gateAcikPos][1], gateData[id][gateAcikPos][2], gateData[id][gateAcikPos][3], gateData[id][gateAcikPos][4], gateData[id][gateAcikPos][5]);
 		format(kapos, sizeof(kapos), "%.4f|%.4f|%.4f|%.4f|%.4f|%.4f", gateData[id][gateKapaliPos][0], gateData[id][gateKapaliPos][1], gateData[id][gateKapaliPos][2], gateData[id][gateKapaliPos][3], gateData[id][gateKapaliPos][4], gateData[id][gateKapaliPos][5]);
 		mysql_format(g_SQL, query, sizeof(query), "UPDATE `gateler` SET `obje` = '%d' WHERE `id` = '%d' LIMIT 1", gateData[id][gateObjeModel], id);
 		mysql_tquery(g_SQL, query);
 		mysql_format(g_SQL, query, sizeof(query), "UPDATE `gateler` SET `interior` = '%d',`vw` = '%d' WHERE `id` = '%d' LIMIT 1", gateData[id][gateInterior], gateData[id][gateVirtual], id);
 		mysql_tquery(g_SQL, query);
 		mysql_format(g_SQL, query, sizeof(query), "UPDATE `gateler` SET `acikpos` = '%s' WHERE `id` = '%d' LIMIT 1", acpos, id);
 		mysql_tquery(g_SQL, query);
 		mysql_format(g_SQL, query, sizeof(query), "UPDATE `gateler` SET `kapalipos` = '%s' WHERE `id` = '%d' LIMIT 1", kapos, id);
 		mysql_tquery(g_SQL, query);
 		mysql_format(g_SQL, query, sizeof(query), "UPDATE `gateler` SET `hiz` = '%.1f' WHERE `id` = '%d' LIMIT 1", gateData[id][gateHiz], id);
 		mysql_tquery(g_SQL, query);
 		mysql_format(g_SQL, query, sizeof(query), "UPDATE `gateler` SET `uzaklik` = '%.1f' WHERE `id` = '%d' LIMIT 1", gateData[id][gateUzaklik], id);
 		mysql_tquery(g_SQL, query);
 		mysql_format(g_SQL, query, sizeof(query), "UPDATE `gateler` SET `sifre` = '%e' WHERE `id` = '%d' LIMIT 1", gateData[id][gateSifre], id);
 		mysql_tquery(g_SQL, query);
 		mysql_format(g_SQL, query, sizeof(query), "UPDATE `gateler` SET `birlik` = '%d' WHERE `id` = '%d' LIMIT 1", gateData[id][gateBirlik], id);
 		mysql_tquery(g_SQL, query);
 		mysql_format(g_SQL, query, sizeof(query), "UPDATE `gateler` SET `sahip` = '%e' WHERE `id` = '%d' LIMIT 1", gateData[id][gateSahip], id);
 		mysql_tquery(g_SQL, query);
 		return 1;
 	}

 	stock GateSil(id)
 	{
 		DestroyDynamicObject(gateData[id][gateObje]); gateData[id][gateObjeModel] = 0; gateData[id][gateVirtual] = 0;
 		gateData[id][gateObje] = INVALID_OBJECT_ID; format(gateData[id][gateSifre], 32, "-"); gateData[id][gateHiz] = 0.0;
 		gateData[id][gateUzaklik] = 0.0; gateData[id][gateDurum] = false; gateData[id][gateInterior] = 0;
 		format(gateData[id][gateSahip], 32, "-"); gateData[id][gateBirlik] = -1;
 		for(new xd ; xd < 6 ; xd ++)
 		{
 			gateData[id][gateAcikPos][xd] = 0.0;
 			gateData[id][gateKapaliPos][xd] = 0.0;
 		}
 		new query[120];
 		mysql_format(g_SQL, query, sizeof(query), "DELETE FROM gateler WHERE id = '%d'", id);
 		mysql_query(g_SQL, query);
 		Iter_Remove(Gateler, id);
 		return 1;
 	}

 	stock GateDuzenleMenu(playerid)
 	{
 		new str[720], baslik[256], id = GetPVarInt(playerid, "GateDuzenleID"), acpos[256], kapos[256];
 		format(acpos, sizeof(acpos), "%.1f, %.1f, %.1f", gateData[id][gateAcikPos][0], gateData[id][gateAcikPos][1], gateData[id][gateAcikPos][2]);
 		format(kapos, sizeof(kapos), "%.1f, %.1f, %.1f", gateData[id][gateKapaliPos][0], gateData[id][gateKapaliPos][1], gateData[id][gateKapaliPos][2]);

 		format(baslik, sizeof(baslik), "{FFFFFF}Gate Duzenle #%d", id);
 		strcat(str, "{FFFFFF}Iþlev\t{FFFFFF}#\n");

 		if(renkDeger[playerid]==sizeof(TextdrawRenkleri)-1)
 		{
 			renkDeger[playerid]=0;
 		}
 		else renkDeger[playerid]++;

 		format(str, sizeof(str), "%s{%s}<!>{FFFFFF} Açýk Pozisyon\t%s\n", str, TextdrawRenkleri[renkDeger[playerid]][hexKod], acpos);
 		format(str, sizeof(str), "%s{%s}<!>{FFFFFF} Kapalý Pozisyon\t%s\n \n", str, TextdrawRenkleri[renkDeger[playerid]][hexKod], kapos);

 		format(str, sizeof(str), "%s{%s}<!>{FFFFFF} Kapý Hýzý\t%.1f m/s\n", str, TextdrawRenkleri[renkDeger[playerid]][hexKod], gateData[id][gateHiz]);
 		format(str, sizeof(str), "%s{%s}<!>{FFFFFF} Eriþim Uzaklýðý\t%.1f pr\n", str, TextdrawRenkleri[renkDeger[playerid]][hexKod], gateData[id][gateUzaklik]);
 		format(str, sizeof(str), "%s{%s}<!>{FFFFFF} Kapý Þifresi\t%s\n\n", str, TextdrawRenkleri[renkDeger[playerid]][hexKod], gateData[id][gateSifre]);
 		format(str, sizeof(str), "%s{%s}<!>{FFFFFF} Virtual Deðeri\t%d\n\n", str, TextdrawRenkleri[renkDeger[playerid]][hexKod], gateData[id][gateVirtual]);
 		format(str, sizeof(str), "%s{%s}<!>{FFFFFF} Interior Deðeri\t%d\n\n", str, TextdrawRenkleri[renkDeger[playerid]][hexKod], gateData[id][gateInterior]);
 		format(str, sizeof(str), "%s{%s}<!>{FFFFFF} Obje Modeli\t%d\n \n", str, TextdrawRenkleri[renkDeger[playerid]][hexKod], gateData[id][gateObjeModel]);

 		format(str, sizeof(str), "%s{%s}<!>{FFFFFF} Gate Sahibi\t%s\n\n", str, TextdrawRenkleri[renkDeger[playerid]][hexKod], gateData[id][gateSahip]);
 		format(str, sizeof(str), "%s{%s}<!>{FFFFFF} Gate Birliði\t%d\n \n", str, TextdrawRenkleri[renkDeger[playerid]][hexKod], gateData[id][gateBirlik]);

 		format(str, sizeof(str), "%s{%s}<!>{FFFFFF} Kapý Durumu\t%s\n", str, TextdrawRenkleri[renkDeger[playerid]][hexKod], (gateData[id][gateDurum] == true) ? ("{73EB65}Açýk") : ("{FA6656}Kapalý"));
 		format(str, sizeof(str), "%s{%s}<!>{FFFFFF} Kapýya Iþýnlan\t{288A61}>>>\n", str, TextdrawRenkleri[renkDeger[playerid]][hexKod]);

 		ShowPlayerDialog(playerid, GATE_DIALOG, DIALOG_STYLE_TABLIST_HEADERS, baslik, str, "Ayarla", "Iptal");
 		return 1;
 	}

 	stock alarmfiyati(seviye)
 	{
 		new fiyat;
 		switch(seviye)
 		{
 			case 0: fiyat = 1000;
 			case 1: fiyat = 2000;
 			case 2: fiyat = 4000;
 			case 3: fiyat = 6000;
 			case 4: fiyat = 8000;
 		}
 		return fiyat;
 	}

 	stock kilitfiyati(seviye)
 	{
 		new fiyat;
 		switch(seviye)
 		{
 			case 0: fiyat = 1000;
 			case 1: fiyat = 2500;
 			case 2: fiyat = 4000;
 			case 3: fiyat = 5000;
 			case 4: fiyat = 7000;
 		}
 		return fiyat;
 	}

 	stock Ekip_Yarat(playerid, ekipid, ekiptur, partner = -1)
 	{
 		if(partner == -1)
 		{
 			format(EkipBilgi[ekipid][ekipuyesiiki], MAX_PLAYER_NAME, "-");
 		}
 		else
 		{
 			if(!IsPlayerConnected(partner)) return hataMesaji(playerid, "Partner olarak girdiðiniz kiþi oyunda deðil.");
 			if(OyuncuBirlikTuru(partner) != BIRLIK_POLIS) return hataMesaji(playerid, "Partner olarak girdiðiniz kiþi polis deðil.");
 			if(oyuncuData[partner][oIsbasi] == false) return hataMesaji(playerid, "Partner olarak girdiðiniz kiþi iþbaþýnda deðil.");
 			format(EkipBilgi[ekipid][ekipuyesiiki], 32, oyuncuData[partner][oIsim]);
 		}
 		EkipBilgi[ekipid][ekipkodu] = ekiptur;
 		format(EkipBilgi[ekipid][ekipuyesibir], 32, oyuncuData[playerid][oIsim]);
 		EkipBilgi[ekipid][ekipkullanimda] = true;
 		Iter_Add(Ekipler, ekipid);
 		return 1;
 	}

 	stock ekipturu(tur)
 	{
 		new ekipkod[64];
 		switch(tur)
 		{
 			case 1: ekipkod = "1-BECKETT";
 			case 2: ekipkod = "1-LIMA";
 			case 3: ekipkod = "1-SIERRA";
 			case 4: ekipkod = "1-HOTEL";
 			case 5: ekipkod = "1-MIKE";
 			case 6: ekipkod = "1-TANGO";
 			case 7: ekipkod = "1-ECHO";
 			case 8: ekipkod = "1-DELTA";
 			case 9: ekipkod = "1-VICE";
 			case 10: ekipkod = "1-GOLF";
 			case 11: ekipkod = "1-BEACH";
 			case 12: ekipkod = "1-YANKEE";
 		}
 		return ekipkod;
 	}

 	stock AracSQLIDCek(aracid) return AracBilgi[aracid][aracID];

 	stock TezgahBul(playerid)
 	{
 		foreach(new i : Tezgah)
 		{
 			if(IsPlayerInRangeOfPoint(playerid, 3.0, TezgahInfo[i][tX], TezgahInfo[i][tY], TezgahInfo[i][tZ]))
 			{
				if(GetPlayerInterior(playerid) == TezgahInfo[i][tInt] && GetPlayerVirtualWorld(playerid) == TezgahInfo[i][tVw]) return i;
 			}
 		}
 		return -1;
 	}

 	stock SeyyarBul(playerid)
 	{
 		foreach(new i : Seyyar)
 		{
 			if(IsPlayerInRangeOfPoint(playerid, 2.5, SeyyarInfo[i][sX], SeyyarInfo[i][sY], SeyyarInfo[i][sZ])) return i;
 		}
 		return -1;
 	}

 	stock RehberKisiKontrol(playerid, numara)
 	{
 		new sayi = 0,telisim[32];
 		for(new i = 1; i < 11; i++) if(numara == RehberBilgi[playerid][i][rehbernumara])
 		{
 			sayi++;
 			format(telisim, 32, RehberBilgi[playerid][i][rehberisim]);
 		}
 		if(sayi == 0) format(telisim, 32, "Bilinmiyor");
 		return telisim;
 	}

 	stock ItemCraftKontrol(playerid,tip)
 	{
 		new sayi = 0;
 		for (new i = 0; i < MAX_ITEM; i++)
 		{
 			if (EnvanterData[playerid][i_aktif][i] && EnvanterData[playerid][i_tip][i] == tip && EnvanterData[playerid][i_craft][i]) {
 				sayi ++;
 			}
 		}
 		return sayi;
 	}

 	stock OtelKasa_CekYatir(playerid)
 	{
 		ShowPlayerDialog(playerid, RESEPSIYON_KASA, DIALOG_STYLE_LIST, "{ffffff}Resepsiyon Kasasý: {cdcdcd}Iþlemler", "Para Çek\nPara Yatýr", "Seç", "Geri");
 		return 1;
 	}

 	stock OtelOdasi_KiralamaKontrol(playerid)
 	{
 		foreach(new xx : OtelOdalari)
 		{
 			if(!strcmp(otelOda[xx][oda_Sahip], OyuncuIsim(playerid), true))
 			{
 				if(Resepsiyon_Bul(playerid) == otelOda[xx][oda_Resepsiyon])
 				{
 					return 1;
 				}
 			}
 		}
 		return -1;
 	}

 	stock yildiz_Goster(yildiz)
 	{
 		new yildizlar[512];
 		switch(yildiz)
 		{
 			case 1:strcat(yildizlar, "{e0dd32}*  ");
 			case 2:strcat(yildizlar, "{e0dd32}*  {e0d432}*");
 			case 3:strcat(yildizlar, "{e0dd32}*  {e0d432}*  {e0b832}*");
 			case 4:strcat(yildizlar, "{e0dd32}*  {e0d432}*  {e0b832}*  {e09432}*");
 			case 5:strcat(yildizlar, "{e0dd32}*  {e0d432}*  {e0b832}*  {e09432}*  {e06632}*  ");
 		}
 		return yildizlar;
 	}

 	stock OdaKontrol(playerid, odano)
 	{
 		if(otelOda[odano][oda_Fiyat] == -1) return hataMesaji(playerid, "Bu oda kiralanamaz.");

 		SetPVarInt(playerid, "otel_OdaNO", odano); SetPVarInt(playerid, "otel_Fiyat", otelOda[odano][oda_Fiyat]*oyuncuData[playerid][oOtelSaat]);
 		new str[512];
 		format(str, sizeof(str), "{FFFFFF}Seçmiþ olduðunuz, {CDCDCD}%03d. {FFFFFF}kapý numaralý otel odasýný {17a38d}%s {FFFFFF}fiyata kiralamak\n{FFFFFF}istediðinizden emin misiniz?", odano, NumaraFormati(otelOda[odano][oda_Fiyat]*oyuncuData[playerid][oOtelSaat]));
 		ShowPlayerDialog(playerid, OTEL_ODA_KIRALA_X, DIALOG_STYLE_MSGBOX, "{f7a4ff}Resepsiyon:{DDDDDD} Oda kiralama çeki", str, "Kirala", "Iptal");
 		return 1;
 	}

 	stock OtelOdasiKiralamaDurumu(id)
 	{
 		new str[512];
 		if(otelOda[id][oda_Fiyat] != -1)
 		{
 			if(otelOda[id][oda_Sure] <= 1) strcat(str, "{1bad51}Kiralanabilir");
 			else strcat(str, "{ad331b}Dolu");
 		}
 		else strcat(str, "{ff3d1b}Kiralanamaz");
 		return str;
 	}

 	stock Otelodasi_Olustur(playerid, id, resepsiyon)
 	{
 		new str[256];
 		GetPlayerPos(playerid, otelOda[id][oda_Pos][0], otelOda[id][oda_Pos][1], otelOda[id][oda_Pos][2]);
 		format(otelOda[id][oda_Sahip], MAX_PLAYER_NAME, "-");
 		otelOda[id][oda_Sure] = 0;
 		otelOda[id][oda_Resepsiyon] = resepsiyon;
 		otelOda[id][oda_Fiyat] = Oda_FiyatVer(resepsData[otelOda[id][oda_Resepsiyon]][rspYildiz]);
 		otelOda[id][oda_disVW] = GetPlayerVirtualWorld(playerid);
 		otelOda[id][oda_disInt] = GetPlayerInterior(playerid);
 		Iter_Add(OtelOdalari, id);

 		format(str, sizeof(str), "[ {ddea23}Otel Odasý {FFFFFF}]\n\n{FFFFFF} Bilgiler yükleniyor..");
 		otelOda[id][oda_Label] = CreateDynamic3DTextLabel(str, -1, otelOda[id][oda_Pos][0], otelOda[id][oda_Pos][1], otelOda[id][oda_Pos][2], 6.0, INVALID_PLAYER_ID, INVALID_PLAYER_ID, 0, -1, -1);
 		otelOda[id][oda_Pickup] = CreateDynamicPickup(19134, 23, otelOda[id][oda_Pos][0], otelOda[id][oda_Pos][1], otelOda[id][oda_Pos][2]);

 		OtelOda_TextUP();

 		new query[512];
 		mysql_format(g_SQL, query, sizeof(query), "INSERT INTO `otel_odalar` (`id`) VALUES ('%d')", id);
 		mysql_query(g_SQL, query);

 		Otel_Kaydet(id);
 		return 1;
 	}

 	stock Otel_Kaydet(id)
 	{
 		new query[512], poslar[256];
 		mysql_format(g_SQL, query, sizeof(query), "UPDATE `otel_odalar` SET `Resepsiyon` = '%d' WHERE `id` = '%d' LIMIT 1", otelOda[id][oda_Resepsiyon], id);
 		mysql_query(g_SQL, query);

 		mysql_format(g_SQL, query, sizeof(query), "UPDATE `otel_odalar` SET `Fiyat` = '%d' WHERE `id` = '%d' LIMIT 1", otelOda[id][oda_Fiyat], id);
 		mysql_query(g_SQL, query);

 		mysql_format(g_SQL, query, sizeof(query), "UPDATE `otel_odalar` SET `disVW` = '%d' WHERE `id` = '%d' LIMIT 1", otelOda[id][oda_disVW], id);
 		mysql_query(g_SQL, query);

 		mysql_format(g_SQL, query, sizeof(query), "UPDATE `otel_odalar` SET `disInt` = '%d' WHERE `id` = '%d' LIMIT 1", otelOda[id][oda_disInt], id);
 		mysql_query(g_SQL, query);

 		mysql_format(g_SQL, query, sizeof(query), "UPDATE `otel_odalar` SET `Kilit` = '%d' WHERE `id` = '%d' LIMIT 1", otelOda[id][oda_Kilit], id);
 		mysql_query(g_SQL, query);

 		format(poslar, sizeof(poslar), "%.1f|%.1f|%.1f", otelOda[id][oda_Pos][0], otelOda[id][oda_Pos][1], otelOda[id][oda_Pos][2]);
 		mysql_format(g_SQL, query, sizeof(query), "UPDATE `otel_odalar` SET `Pozisyonlar` = '%s' WHERE `id` = '%d' LIMIT 1", poslar, id);
 		mysql_query(g_SQL, query);
 		return 1;
 	}

 	stock Resepsiyon_Sil(id)
 	{
 		if(IsValidDynamic3DTextLabel(resepsData[id][rspLabel])) DestroyDynamic3DTextLabel(resepsData[id][rspLabel]);
 		resepsData[id][rspYildiz] = 0; resepsData[id][rspKasa] = 0;
 		for(new i ; i < 3; i ++){resepsData[id][rspPos][i] = 0.0;}
 			format(resepsData[id][rspSahip], 32, "-");
 		Iter_Remove(Resepsiyonlar, id);

 		new query[95];
 		mysql_format(g_SQL, query, sizeof(query), "DELETE FROM `otel_resepsiyon` WHERE `id` = '%d'", id);
 		mysql_query(g_SQL, query);
 		return 1;
 	}

 	stock OtelOdasi_Sil(id)
 	{
 		for(new i ; i < 3; i ++){otelOda[id][oda_Pos][i] = 0.0;}
 			format(otelOda[id][oda_Sahip], 32, "-");
 		otelOda[id][oda_Sure] = 0;
 		otelOda[id][oda_Fiyat] = 0;
 		otelOda[id][oda_Resepsiyon] = -1;

 		otelOda[id][oda_disVW] = 0;
 		otelOda[id][oda_disInt] = 0;
 		otelOda[id][oda_Kilit] = false;

 		Iter_Remove(OtelOdalari, id);

 		if(IsValidDynamic3DTextLabel(otelOda[id][oda_Label])) DestroyDynamic3DTextLabel(otelOda[id][oda_Label]);
 		DestroyDynamicPickup(otelOda[id][oda_Pickup]);

 		new query[95];
 		mysql_format(g_SQL, query, sizeof(query), "DELETE FROM `otel_odalar` WHERE `id` = '%d'", id);
 		mysql_query(g_SQL, query);
 		return 1;
 	}

 	stock Resepsiyon_Kaydet(id)
 	{
 		new query[180], poslar[256];
 		mysql_format(g_SQL, query, sizeof(query), "UPDATE `otel_resepsiyon` SET `Sahip` = '%e' WHERE `id` = '%d' LIMIT 1", resepsData[id][rspSahip], id);
 		mysql_query(g_SQL, query);

 		mysql_format(g_SQL, query, sizeof(query), "UPDATE `otel_resepsiyon` SET `Kasa` = '%d' WHERE `id` = '%d' LIMIT 1", resepsData[id][rspKasa], id);
 		mysql_query(g_SQL, query);

 		format(poslar, sizeof(poslar), "%.1f|%.1f|%.1f", resepsData[id][rspPos][0], resepsData[id][rspPos][1], resepsData[id][rspPos][2]);
 		mysql_format(g_SQL, query, sizeof(query), "UPDATE `otel_resepsiyon` SET `Pozisyonlar` = '%s' WHERE `id` = '%d' LIMIT 1", poslar, id);
 		mysql_query(g_SQL, query);
 		return 1;
 	}

 	stock Resepsiyon_Olustur(playerid, id)
 	{
 		GetPlayerPos(playerid, resepsData[id][rspPos][0], resepsData[id][rspPos][1], resepsData[id][rspPos][2]);

 		new str[256];
 		format(str, sizeof(str), "%s\n[ {cfea23}Resepsiyon %d {FFFFFF}]\n\n{FFFFFF}Otel odasý kiralamak için '{cfea23}/odakirala{FFFFFF}' yazýnýz.", yildiz_Goster(resepsData[id][rspYildiz]), id);
 		resepsData[id][rspLabel] = CreateDynamic3DTextLabel(str, -1, resepsData[id][rspPos][0], resepsData[id][rspPos][1], resepsData[id][rspPos][2], 6.0, INVALID_PLAYER_ID, INVALID_PLAYER_ID, 0, -1, -1);

 		format(resepsData[id][rspSahip], MAX_PLAYER_NAME, "-");
 		resepsData[id][rspKasa] = 0;
 		resepsData[id][rspYildiz] = 1;
 		Iter_Add(Resepsiyonlar, id);

 		new query[512];
 		mysql_format(g_SQL, query, sizeof(query), "INSERT INTO `otel_resepsiyon` (`id`) VALUES ('%d')", id);
 		mysql_query(g_SQL, query);

 		Resepsiyon_Kaydet(id);

 		SunucuMesaji(playerid, "Resepsiyon oluþturuldu, numara: %d", id);
 		return 1;
 	}

 	stock Resepsiyon_Bul(playerid)
 	{
 		foreach(new id : Resepsiyonlar)
 		{
 			if(IsPlayerInRangeOfPoint(playerid, 2.0, resepsData[id][rspPos][0], resepsData[id][rspPos][1], resepsData[id][rspPos][2])) return id;
 		}
 		return -1;
 	}

 	stock OtelOdasi_Ic_Bul(playerid)
 	{
 		new i = GetPlayerVirtualWorld(playerid);
 		new yildiz = resepsData[otelOda[i][oda_Resepsiyon]][rspYildiz]-1;
 		if(IsPlayerInRangeOfPoint(playerid, 2.0, otelInt[yildiz][otelIntPOS][0], otelInt[yildiz][otelIntPOS][1], otelInt[yildiz][otelIntPOS][2]))
 		{
 			return i;
 		}
 		return -1;
 	}


 	stock OtelOdasinda(playerid)
 	{
 		new i = GetPlayerVirtualWorld(playerid);
 		new yildiz = resepsData[otelOda[i][oda_Resepsiyon]][rspYildiz]-1;
 		if(IsPlayerInRangeOfPoint(playerid, 7.0, otelInt[yildiz][otelIntPOS][0], otelInt[yildiz][otelIntPOS][1], otelInt[yildiz][otelIntPOS][2]))
 		{
 			return i;
 		}
 		return -1;
 	}



 	stock OtelOdasi_Bul(playerid)
 	{
 		foreach(new id : OtelOdalari)
 		{
 			if(IsPlayerInRangeOfPoint(playerid, 2.0, otelOda[id][oda_Pos][0], otelOda[id][oda_Pos][1], otelOda[id][oda_Pos][2])) return id;
 		}
 		return -1;
 	}

 	stock YetenekEXPToplami(playerid)
 	{
 		new toplamexp;
 		toplamexp = oyuncuData[playerid][oLiderlikYetenekEXP] + oyuncuData[playerid][oHirsizlikYetenekEXP] + oyuncuData[playerid][oKimyaYetenekEXP] + oyuncuData[playerid][oSurusYetenekEXP] + oyuncuData[playerid][oUretimYetenekEXP] + oyuncuData[playerid][oGucYetenekEXP] + oyuncuData[playerid][oDayaniklilikEXP];
 		return toplamexp;
 	}

 	stock YetenekSeviyeToplami(playerid)
 	{
 		new toplamseviye;
 		toplamseviye = oyuncuData[playerid][oLiderlikYetenek] + oyuncuData[playerid][oHirsizlikYetenek] + oyuncuData[playerid][oKimyaYetenek] + oyuncuData[playerid][oSurusYetenek] + oyuncuData[playerid][oUretimYetenek] + oyuncuData[playerid][oGucYetenek] + oyuncuData[playerid][oDayaniklilik];
 		return toplamseviye;
 	}

 	stock KarakterSec(playerid, id)
 	{
 		if(karaktersecimekrani[playerid] == true)
 		{
 			oyuncuData[playerid][oKarakter] = id;

 			for(new i = 0; i < 29; i++)
 			{
 				PlayerTextDrawHide(playerid, characterSelect[playerid][i]);
 			}

 			TogglePlayerControllable(playerid, true);
 			CancelSelectTextDraw(playerid);
 			UyariMesaji(playerid, "Verileriniz yükleniyor, lütfen bekleyin.");
 			new query[280];
 			mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `hesaplar` WHERE `forumid` = '%d'", oyuncuData[playerid][oForumID]);
 			mysql_tquery(g_SQL, query, "HesapYukle", "d", playerid);

 			mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `oyuncular` WHERE `isim` = '%e'", OyuncuKarakter[playerid][id - 1]);
 			mysql_tquery(g_SQL, query, "OyuncuYukle", "d", playerid);
 		}
 		karaktersecimekrani[playerid] = false;
 		return 1;
 	}

 	forward OnPlayerGetWeapons(playerid);
 	public OnPlayerGetWeapons(playerid)
 	{
 		ResetPlayerWeapons(playerid);
		new rows, weapon_gameid, weapon_ammo, userid;
		cache_get_row_count(rows);
		new i;
		if(oyuncuData[playerid][oIlkGiris] == false)
		{
			for(i = 0; i < rows; i++)
			{
				cache_get_value_name_int(i, "weapon_gameid", weapon_gameid);
				cache_get_value_name_int(i, "weapon_ammo", weapon_ammo);
				cache_get_value_name_int(i, "weapon_userid", userid);

				if(userid == oyuncuData[playerid][oID])
				{
					GivePlayerWeapon(playerid, weapon_gameid, weapon_ammo);
					SetPlayerAmmo(playerid, GetWeaponSlot(weapon_gameid), weapon_ammo);
				}
			}
		}
 		return 1;
 	}

 	stock GetWeaponSlot(weaponid)
	{
	new slot;
	switch(weaponid)
	{
	case 0,1: slot = 0;
	case 2 .. 9: slot = 1;
	case 10 .. 15: slot = 10;
	case 16 .. 18, 39: slot = 8;
	case 22 .. 24: slot =2;
	case 25 .. 27: slot = 3;
	case 28, 29, 32: slot = 4;
	case 30, 31: slot = 5;
	case 33, 34: slot = 6;
	case 35 .. 38: slot = 7;
	case 40: slot = 12;
	case 41 .. 43: slot = 9;
	case 44 .. 46: slot = 11;
	}
	return slot;
	}

 	stock PuanDurum(playerid)
 	{
 		new tdMsg[60];
 		format(tdMsg, sizeof(tdMsg), "%d", oyuncuData[playerid][oGYMPuan]);
 		PlayerTextDrawSetString(playerid, kasstat_4[playerid], tdMsg);

 		if(oyuncuData[playerid][oGYMAsama] == 1) {
 			AsamaHazirla(playerid);
 			oyuncuData[playerid][oGYMAsama] = 2;
 			format(tdMsg, sizeof(tdMsg), "%d", oyuncuData[playerid][oGYMPuan]);
 			PlayerTextDrawSetString(playerid, kasstat_4[playerid], tdMsg);
 			format(tdMsg, sizeof(tdMsg), "%d/3", oyuncuData[playerid][oGYMAsama]);
 			PlayerTextDrawSetString(playerid, kasstat_3[playerid], tdMsg);
 			GameTextForPlayer(playerid, "~r~ASAMA 2!", 750, 4);
 		}
 		else if(oyuncuData[playerid][oGYMAsama] == 2) {
 			AsamaHazirla(playerid);
 			oyuncuData[playerid][oGYMAsama] = 3;
 			format(tdMsg, sizeof(tdMsg), "%d", oyuncuData[playerid][oGYMPuan]);
 			PlayerTextDrawSetString(playerid, kasstat_4[playerid], tdMsg);
 			format(tdMsg, sizeof(tdMsg), "%d/3", oyuncuData[playerid][oGYMAsama]);
 			PlayerTextDrawSetString(playerid, kasstat_3[playerid], tdMsg);
 			GameTextForPlayer(playerid, "~r~ASAMA 3!", 750, 4);
 		}
 		else if(oyuncuData[playerid][oGYMAsama] == 3) {
 			if(gymtur[playerid] == 2) oyuncuData[playerid][oGucYetenekEXP] += oyuncuData[playerid][oGYMPuan];
 			else if(gymtur[playerid] == 1 || gymtur[playerid] == 3) oyuncuData[playerid][oDayaniklilikEXP] += oyuncuData[playerid][oGYMPuan];
 			SunucuMesaji(playerid, "Tebrikler tüm aþamalarý baþarýyla tamamladýnýz.");
 			SunucuMesaji(playerid, "Yetenek durumunuzu görüntülemek için (/yetenek) | Toplam kazanýlan EXP: %d", oyuncuData[playerid][oGYMPuan]);
 			GYMLevelKontrol(playerid, gymtur[playerid]);
 			oyuncuData[playerid][oGYMAsama] = 1;
 			oyuncuData[playerid][oGYMPuan] = 0;
 			KillTimer(gymtimer[playerid]),KillTimer(gymtustimer[playerid]);
 			OklariSifirla(playerid);
 			TogglePlayerControllable(playerid, true);
 			SetPVarInt(playerid, "gymyapiyor", 0);
 			SPOR_YAPAN_KISI--;
 			GameTextForPlayer(playerid, "~g~TEBRIKLER!", 750, 4);
 		}
 		return 1;
 	}

 	stock GYMLevelKontrol(playerid, tip)
 	{
 		if(tip == 2) {
 			if(oyuncuData[playerid][oGucYetenekEXP] > 999 && oyuncuData[playerid][oGucYetenek] < 1) {
 				oyuncuData[playerid][oGucYetenek] ++;
 				oyuncuData[playerid][oGucYetenekEXP] = 0;
 				SunucuMesaji(playerid, "Güç seviyeniz arttý! Yeni seviyeniz: %d", oyuncuData[playerid][oGucYetenek]);
 			}
 			else if(oyuncuData[playerid][oGucYetenekEXP] > 1999 && oyuncuData[playerid][oGucYetenek] < 2) {
 				oyuncuData[playerid][oGucYetenek] ++;
 				oyuncuData[playerid][oGucYetenekEXP] = 0;
 				SunucuMesaji(playerid, "Güç seviyeniz arttý! Yeni seviyeniz: %d", oyuncuData[playerid][oGucYetenek]);
 			}
 			else if(oyuncuData[playerid][oGucYetenekEXP] > 2999 && oyuncuData[playerid][oGucYetenek] < 3) {
 				oyuncuData[playerid][oGucYetenek] ++;
 				oyuncuData[playerid][oGucYetenekEXP] = 0;
 				SunucuMesaji(playerid, "Güç seviyeniz arttý! Yeni seviyeniz: %d", oyuncuData[playerid][oGucYetenek]);
 			}
 			else if(oyuncuData[playerid][oGucYetenekEXP] > 3999 && oyuncuData[playerid][oGucYetenek] < 4) {
 				oyuncuData[playerid][oGucYetenek] ++;
 				oyuncuData[playerid][oGucYetenekEXP] = 0;
 				SunucuMesaji(playerid, "Güç seviyeniz arttý! Yeni seviyeniz: %d", oyuncuData[playerid][oGucYetenek]);
 			}
 			else if(oyuncuData[playerid][oGucYetenekEXP] > 4999 && oyuncuData[playerid][oGucYetenek] < 5) {
 				oyuncuData[playerid][oGucYetenek] ++;
 				oyuncuData[playerid][oGucYetenekEXP] = 0;
 				SunucuMesaji(playerid, "Güç seviyeniz arttý! Yeni seviyeniz: %d", oyuncuData[playerid][oGucYetenek]);
 			}
 			else if(oyuncuData[playerid][oGucYetenekEXP] > 5999 && oyuncuData[playerid][oGucYetenek] < 6) {
 				oyuncuData[playerid][oGucYetenek] ++;
 				oyuncuData[playerid][oGucYetenekEXP] = 0;
 				SunucuMesaji(playerid, "Güç seviyeniz arttý! Yeni seviyeniz: %d", oyuncuData[playerid][oGucYetenek]);
 			}
 			else if(oyuncuData[playerid][oGucYetenekEXP] > 6999 && oyuncuData[playerid][oGucYetenek] < 7) {
 				oyuncuData[playerid][oGucYetenek] ++;
 				oyuncuData[playerid][oGucYetenekEXP] = 0;
 				SunucuMesaji(playerid, "Güç seviyeniz arttý! Yeni seviyeniz: %d", oyuncuData[playerid][oGucYetenek]);
 			}
 			else if(oyuncuData[playerid][oGucYetenekEXP] > 7999 && oyuncuData[playerid][oGucYetenek] < 8) {
 				oyuncuData[playerid][oGucYetenek] ++;
 				oyuncuData[playerid][oGucYetenekEXP] = 0;
 				SunucuMesaji(playerid, "Güç seviyeniz arttý! Yeni seviyeniz: %d", oyuncuData[playerid][oGucYetenek]);
 			}
 			else if(oyuncuData[playerid][oGucYetenekEXP] > 8999 && oyuncuData[playerid][oGucYetenek] < 9) {
 				oyuncuData[playerid][oGucYetenek] ++;
 				oyuncuData[playerid][oGucYetenekEXP] = 0;
 				SunucuMesaji(playerid, "Güç seviyeniz arttý! Yeni seviyeniz: %d", oyuncuData[playerid][oGucYetenek]);
 			}
 			else if(oyuncuData[playerid][oGucYetenekEXP] > 9999 && oyuncuData[playerid][oGucYetenek] < 10) {
 				oyuncuData[playerid][oGucYetenek] ++;
 				oyuncuData[playerid][oGucYetenekEXP] = 0;
 				SunucuMesaji(playerid, "Güç seviyeniz arttý! Yeni seviyeniz: %d", oyuncuData[playerid][oGucYetenek]);
 			}
 			else if(oyuncuData[playerid][oGucYetenekEXP] > 10999 && oyuncuData[playerid][oGucYetenek] < 11) {
 				oyuncuData[playerid][oGucYetenek] ++;
 				oyuncuData[playerid][oGucYetenekEXP] = 0;
 				SunucuMesaji(playerid, "Güç seviyeniz arttý! Yeni seviyeniz: %d", oyuncuData[playerid][oGucYetenek]);
 			}
 			else if(oyuncuData[playerid][oGucYetenekEXP] > 11999 && oyuncuData[playerid][oGucYetenek] < 12) {
 				oyuncuData[playerid][oGucYetenek] ++;
 				oyuncuData[playerid][oGucYetenekEXP] = 0;
 				SunucuMesaji(playerid, "Güç seviyeniz arttý! Yeni seviyeniz: %d", oyuncuData[playerid][oGucYetenek]);
 			}
 			else if(oyuncuData[playerid][oGucYetenekEXP] > 12999 && oyuncuData[playerid][oGucYetenek] < 13) {
 				oyuncuData[playerid][oGucYetenek] ++;
 				oyuncuData[playerid][oGucYetenekEXP] = 0;
 				SunucuMesaji(playerid, "Güç seviyeniz arttý! Yeni seviyeniz: %d", oyuncuData[playerid][oGucYetenek]);
 			}
 			else if(oyuncuData[playerid][oGucYetenekEXP] > 13999 && oyuncuData[playerid][oGucYetenek] < 14) {
 				oyuncuData[playerid][oGucYetenek] ++;
 				oyuncuData[playerid][oGucYetenekEXP] = 0;
 				SunucuMesaji(playerid, "Güç seviyeniz arttý! Yeni seviyeniz: %d", oyuncuData[playerid][oGucYetenek]);
 			}
 			else if(oyuncuData[playerid][oGucYetenekEXP] > 14999 && oyuncuData[playerid][oGucYetenek] < 15) {
 				oyuncuData[playerid][oGucYetenek] ++;
 				oyuncuData[playerid][oGucYetenekEXP] = 0;
 				SunucuMesaji(playerid, "Güç seviyeniz arttý! Yeni seviyeniz: %d", oyuncuData[playerid][oGucYetenek]);
 			}
 			else if(oyuncuData[playerid][oGucYetenekEXP] > 15999 && oyuncuData[playerid][oGucYetenek] < 16) {
 				oyuncuData[playerid][oGucYetenek] ++;
 				oyuncuData[playerid][oGucYetenekEXP] = 0;
 				SunucuMesaji(playerid, "Güç seviyeniz arttý! Yeni seviyeniz: %d", oyuncuData[playerid][oGucYetenek]);
 			}
 			else if(oyuncuData[playerid][oGucYetenekEXP] > 16999 && oyuncuData[playerid][oGucYetenek] < 17) {
 				oyuncuData[playerid][oGucYetenek] ++;
 				oyuncuData[playerid][oGucYetenekEXP] = 0;
 				SunucuMesaji(playerid, "Güç seviyeniz arttý! Yeni seviyeniz: %d", oyuncuData[playerid][oGucYetenek]);
 			}
 			else if(oyuncuData[playerid][oGucYetenekEXP] > 17999 && oyuncuData[playerid][oGucYetenek] < 18) {
 				oyuncuData[playerid][oGucYetenek] ++;
 				oyuncuData[playerid][oGucYetenekEXP] = 0;
 				SunucuMesaji(playerid, "Güç seviyeniz arttý! Yeni seviyeniz: %d", oyuncuData[playerid][oGucYetenek]);
 			}
 			else if(oyuncuData[playerid][oGucYetenekEXP] > 18999 && oyuncuData[playerid][oGucYetenek] < 19) {
 				oyuncuData[playerid][oGucYetenek] ++;
 				oyuncuData[playerid][oGucYetenekEXP] = 0;
 				SunucuMesaji(playerid, "Güç seviyeniz arttý! Yeni seviyeniz: %d", oyuncuData[playerid][oGucYetenek]);
 			}
 			else if(oyuncuData[playerid][oGucYetenekEXP] > 19999 && oyuncuData[playerid][oGucYetenek] < 20) {
 				oyuncuData[playerid][oGucYetenek] ++;
 				oyuncuData[playerid][oGucYetenekEXP] = 0;
 				SunucuMesaji(playerid, "Güç seviyeniz arttý! Yeni seviyeniz: %d", oyuncuData[playerid][oGucYetenek]);
 			}
 		}
 		else if(tip == 1 || tip == 3) {
 			if(oyuncuData[playerid][oDayaniklilikEXP] > 999 && oyuncuData[playerid][oDayaniklilik] < 1) {
 				oyuncuData[playerid][oDayaniklilik] ++;
 				oyuncuData[playerid][oDayaniklilikEXP] = 0;
 				SunucuMesaji(playerid, "Dayanýklýlýk seviyeniz arttý! Yeni seviyeniz: %d", oyuncuData[playerid][oDayaniklilik]);
 			}
 			else if(oyuncuData[playerid][oDayaniklilikEXP] > 1999 && oyuncuData[playerid][oDayaniklilik] < 2) {
 				oyuncuData[playerid][oDayaniklilik] ++;
 				oyuncuData[playerid][oDayaniklilikEXP] = 0;
 				SunucuMesaji(playerid, "Dayanýklýlýk seviyeniz arttý! Yeni seviyeniz: %d", oyuncuData[playerid][oDayaniklilik]);
 			}
 			else if(oyuncuData[playerid][oDayaniklilikEXP] > 2999 && oyuncuData[playerid][oDayaniklilik] < 3) {
 				oyuncuData[playerid][oDayaniklilik] ++;
 				oyuncuData[playerid][oDayaniklilikEXP] = 0;
 				SunucuMesaji(playerid, "Dayanýklýlýk seviyeniz arttý! Yeni seviyeniz: %d", oyuncuData[playerid][oDayaniklilik]);
 			}
 			else if(oyuncuData[playerid][oDayaniklilikEXP] > 3999 && oyuncuData[playerid][oDayaniklilik] < 4) {
 				oyuncuData[playerid][oDayaniklilik] ++;
 				oyuncuData[playerid][oDayaniklilikEXP] = 0;
 				SunucuMesaji(playerid, "Dayanýklýlýk seviyeniz arttý! Yeni seviyeniz: %d", oyuncuData[playerid][oDayaniklilik]);
 			}
 			else if(oyuncuData[playerid][oDayaniklilikEXP] > 4999 && oyuncuData[playerid][oDayaniklilik] < 5) {
 				oyuncuData[playerid][oDayaniklilik] ++;
 				oyuncuData[playerid][oDayaniklilikEXP] = 0;
 				SunucuMesaji(playerid, "Dayanýklýlýk seviyeniz arttý! Yeni seviyeniz: %d", oyuncuData[playerid][oDayaniklilik]);
 			}
 			else if(oyuncuData[playerid][oDayaniklilikEXP] > 5999 && oyuncuData[playerid][oDayaniklilik] < 6) {
 				oyuncuData[playerid][oDayaniklilik] ++;
 				oyuncuData[playerid][oDayaniklilikEXP] = 0;
 				SunucuMesaji(playerid, "Dayanýklýlýk seviyeniz arttý! Yeni seviyeniz: %d", oyuncuData[playerid][oDayaniklilik]);
 			}
 			else if(oyuncuData[playerid][oDayaniklilikEXP] > 6999 && oyuncuData[playerid][oDayaniklilik] < 7) {
 				oyuncuData[playerid][oDayaniklilik] ++;
 				oyuncuData[playerid][oDayaniklilikEXP] = 0;
 				SunucuMesaji(playerid, "Dayanýklýlýk seviyeniz arttý! Yeni seviyeniz: %d", oyuncuData[playerid][oDayaniklilik]);
 			}
 			else if(oyuncuData[playerid][oDayaniklilikEXP] > 7999 && oyuncuData[playerid][oDayaniklilik] < 8) {
 				oyuncuData[playerid][oDayaniklilik] ++;
 				oyuncuData[playerid][oDayaniklilikEXP] = 0;
 				SunucuMesaji(playerid, "Dayanýklýlýk seviyeniz arttý! Yeni seviyeniz: %d", oyuncuData[playerid][oDayaniklilik]);
 			}
 			else if(oyuncuData[playerid][oDayaniklilikEXP] > 8999 && oyuncuData[playerid][oDayaniklilik] < 9) {
 				oyuncuData[playerid][oDayaniklilik] ++;
 				oyuncuData[playerid][oDayaniklilikEXP] = 0;
 				SunucuMesaji(playerid, "Dayanýklýlýk seviyeniz arttý! Yeni seviyeniz: %d", oyuncuData[playerid][oDayaniklilik]);
 			}
 			else if(oyuncuData[playerid][oDayaniklilikEXP] > 9999 && oyuncuData[playerid][oDayaniklilik] < 10) {
 				oyuncuData[playerid][oDayaniklilik] ++;
 				oyuncuData[playerid][oDayaniklilikEXP] = 0;
 				SunucuMesaji(playerid, "Dayanýklýlýk seviyeniz arttý! Yeni seviyeniz: %d", oyuncuData[playerid][oDayaniklilik]);
 			}
 			else if(oyuncuData[playerid][oDayaniklilikEXP] > 10999 && oyuncuData[playerid][oDayaniklilik] < 11) {
 				oyuncuData[playerid][oDayaniklilik] ++;
 				oyuncuData[playerid][oDayaniklilikEXP] = 0;
 				SunucuMesaji(playerid, "Dayanýklýlýk seviyeniz arttý! Yeni seviyeniz: %d", oyuncuData[playerid][oDayaniklilik]);
 			}
 			else if(oyuncuData[playerid][oDayaniklilikEXP] > 11999 && oyuncuData[playerid][oDayaniklilik] < 12) {
 				oyuncuData[playerid][oDayaniklilik] ++;
 				oyuncuData[playerid][oDayaniklilikEXP] = 0;
 				SunucuMesaji(playerid, "Dayanýklýlýk seviyeniz arttý! Yeni seviyeniz: %d", oyuncuData[playerid][oDayaniklilik]);
 			}
 			else if(oyuncuData[playerid][oDayaniklilikEXP] > 12999 && oyuncuData[playerid][oDayaniklilik] < 13) {
 				oyuncuData[playerid][oDayaniklilik] ++;
 				oyuncuData[playerid][oDayaniklilikEXP] = 0;
 				SunucuMesaji(playerid, "Dayanýklýlýk seviyeniz arttý! Yeni seviyeniz: %d", oyuncuData[playerid][oDayaniklilik]);
 			}
 			else if(oyuncuData[playerid][oDayaniklilikEXP] > 13999 && oyuncuData[playerid][oDayaniklilik] < 14) {
 				oyuncuData[playerid][oDayaniklilik] ++;
 				oyuncuData[playerid][oDayaniklilikEXP] = 0;
 				SunucuMesaji(playerid, "Dayanýklýlýk seviyeniz arttý! Yeni seviyeniz: %d", oyuncuData[playerid][oDayaniklilik]);
 			}
 			else if(oyuncuData[playerid][oDayaniklilikEXP] > 14999 && oyuncuData[playerid][oDayaniklilik] < 15) {
 				oyuncuData[playerid][oDayaniklilik] ++;
 				oyuncuData[playerid][oDayaniklilikEXP] = 0;
 				SunucuMesaji(playerid, "Dayanýklýlýk seviyeniz arttý! Yeni seviyeniz: %d", oyuncuData[playerid][oDayaniklilik]);
 			}
 			else if(oyuncuData[playerid][oDayaniklilikEXP] > 15999 && oyuncuData[playerid][oDayaniklilik] < 16) {
 				oyuncuData[playerid][oDayaniklilik] ++;
 				oyuncuData[playerid][oDayaniklilikEXP] = 0;
 				SunucuMesaji(playerid, "Dayanýklýlýk seviyeniz arttý! Yeni seviyeniz: %d", oyuncuData[playerid][oDayaniklilik]);
 			}
 			else if(oyuncuData[playerid][oDayaniklilikEXP] > 16999 && oyuncuData[playerid][oDayaniklilik] < 17) {
 				oyuncuData[playerid][oDayaniklilik] ++;
 				oyuncuData[playerid][oDayaniklilikEXP] = 0;
 				SunucuMesaji(playerid, "Dayanýklýlýk seviyeniz arttý! Yeni seviyeniz: %d", oyuncuData[playerid][oDayaniklilik]);
 			}
 			else if(oyuncuData[playerid][oDayaniklilikEXP] > 17999 && oyuncuData[playerid][oDayaniklilik] < 18) {
 				oyuncuData[playerid][oDayaniklilik] ++;
 				oyuncuData[playerid][oDayaniklilikEXP] = 0;
 				SunucuMesaji(playerid, "Dayanýklýlýk seviyeniz arttý! Yeni seviyeniz: %d", oyuncuData[playerid][oDayaniklilik]);
 			}
 			else if(oyuncuData[playerid][oDayaniklilikEXP] > 18999 && oyuncuData[playerid][oDayaniklilik] < 19) {
 				oyuncuData[playerid][oDayaniklilik] ++;
 				oyuncuData[playerid][oDayaniklilikEXP] = 0;
 				SunucuMesaji(playerid, "Dayanýklýlýk seviyeniz arttý! Yeni seviyeniz: %d", oyuncuData[playerid][oDayaniklilik]);
 			}
 			else if(oyuncuData[playerid][oDayaniklilikEXP] > 19999 && oyuncuData[playerid][oDayaniklilik] < 20) {
 				oyuncuData[playerid][oDayaniklilik] ++;
 				oyuncuData[playerid][oDayaniklilikEXP] = 0;
 				SunucuMesaji(playerid, "Dayanýklýlýk seviyeniz arttý! Yeni seviyeniz: %d", oyuncuData[playerid][oDayaniklilik]);
 			}
 		}
 		return 1;
 	}

 	stock GYMHazirla(playerid)
 	{
 		SPOR_YAPAN_KISI++;
 		oyuncuData[playerid][oGYMHak]++;
 		SetPVarInt(playerid,"gymyapiyor", 1);
 		TextDrawShowForPlayer(playerid, gym_0);
 		TextDrawShowForPlayer(playerid, gym_1);
 		TextDrawShowForPlayer(playerid, kasstat_0);
 		TextDrawShowForPlayer(playerid, kasstat_1);
 		TextDrawShowForPlayer(playerid, kasstat_2);
 		TextDrawShowForPlayer(playerid, kasstat_5);
 		TextDrawShowForPlayer(playerid, kasstat_6);

 		okcX[playerid][0] = 336.000000;
 		okcX[playerid][1] = 358.000000;
 		okcX[playerid][2] = 380.000000;
 		okcX[playerid][3] = 402.000000;
 		okcX[playerid][4] = 424.000000;
 		okcX[playerid][5] = 446.000000;
 		okcX[playerid][6] = 470.000000;
 		okcX[playerid][7] = 492.000000;
 		okcX[playerid][8] = 514.000000;
 		okcX[playerid][9] = 536.000000;
 		okcX[playerid][10] = 558.000000;
 		okcX[playerid][11] = 580.000000;
 		okcX[playerid][12] = 602.000000;
 		okcX[playerid][13] = 624.000000;

 		kasstat_3[playerid] = CreatePlayerTextDraw(playerid, 579.000000, 111.000000, "1/3");
 		PlayerTextDrawFont(playerid, kasstat_3[playerid], 1);
 		PlayerTextDrawLetterSize(playerid, kasstat_3[playerid], 0.308333, 1.550000);
 		PlayerTextDrawTextSize(playerid, kasstat_3[playerid], 395.000000, 2.000000);
 		PlayerTextDrawSetOutline(playerid, kasstat_3[playerid], 1);
 		PlayerTextDrawSetShadow(playerid, kasstat_3[playerid], 0);
 		PlayerTextDrawAlignment(playerid, kasstat_3[playerid], 3);
 		PlayerTextDrawColor(playerid, kasstat_3[playerid], -1);
 		PlayerTextDrawBackgroundColor(playerid, kasstat_3[playerid], 255);
 		PlayerTextDrawBoxColor(playerid, kasstat_3[playerid], 0);
 		PlayerTextDrawUseBox(playerid, kasstat_3[playerid], 1);
 		PlayerTextDrawSetProportional(playerid, kasstat_3[playerid], 1);
 		PlayerTextDrawSetSelectable(playerid, kasstat_3[playerid], 0);

 		kasstat_4[playerid] = CreatePlayerTextDraw(playerid, 577.000000, 125.000000, "0");
 		PlayerTextDrawFont(playerid, kasstat_4[playerid], 1);
 		PlayerTextDrawLetterSize(playerid, kasstat_4[playerid], 0.308333, 1.550000);
 		PlayerTextDrawTextSize(playerid, kasstat_4[playerid], 395.000000, 2.000000);
 		PlayerTextDrawSetOutline(playerid, kasstat_4[playerid], 1);
 		PlayerTextDrawSetShadow(playerid, kasstat_4[playerid], 0);
 		PlayerTextDrawAlignment(playerid, kasstat_4[playerid], 3);
 		PlayerTextDrawColor(playerid, kasstat_4[playerid], -1);
 		PlayerTextDrawBackgroundColor(playerid, kasstat_4[playerid], 255);
 		PlayerTextDrawBoxColor(playerid, kasstat_4[playerid], 0);
 		PlayerTextDrawUseBox(playerid, kasstat_4[playerid], 1);
 		PlayerTextDrawSetProportional(playerid, kasstat_4[playerid], 1);
 		PlayerTextDrawSetSelectable(playerid, kasstat_4[playerid], 0);

 		gym[0][playerid] = CreatePlayerTextDraw(playerid, 336.000000, 312.000000, "ld_beat:down");
 		PlayerTextDrawFont(playerid,gym[0][playerid], 4);
 		PlayerTextDrawLetterSize(playerid,gym[0][playerid], 0.600000, 2.000000);
 		PlayerTextDrawTextSize(playerid,gym[0][playerid], 17.000000, 17.000000);
 		PlayerTextDrawSetOutline(playerid,gym[0][playerid], 1);
 		PlayerTextDrawSetShadow(playerid,gym[0][playerid], 0);
 		PlayerTextDrawAlignment(playerid,gym[0][playerid], 1);
 		PlayerTextDrawColor(playerid,gym[0][playerid], -1);
 		PlayerTextDrawBackgroundColor(playerid,gym[0][playerid], 255);
 		PlayerTextDrawBoxColor(playerid,gym[0][playerid], 50);
 		PlayerTextDrawUseBox(playerid,gym[0][playerid], 1);
 		PlayerTextDrawSetProportional(playerid,gym[0][playerid], 1);
 		PlayerTextDrawSetSelectable(playerid,gym[0][playerid], 0);

 		gym[1][playerid] = CreatePlayerTextDraw(playerid,358.000000, 312.000000, "ld_beat:down");
 		PlayerTextDrawFont(playerid,gym[1][playerid], 4);
 		PlayerTextDrawLetterSize(playerid,gym[1][playerid], 0.600000, 2.000000);
 		PlayerTextDrawTextSize(playerid,gym[1][playerid], 17.000000, 17.000000);
 		PlayerTextDrawSetOutline(playerid,gym[1][playerid], 1);
 		PlayerTextDrawSetShadow(playerid,gym[1][playerid], 0);
 		PlayerTextDrawAlignment(playerid,gym[1][playerid], 1);
 		PlayerTextDrawColor(playerid,gym[1][playerid], -1);
 		PlayerTextDrawBackgroundColor(playerid,gym[1][playerid], 255);
 		PlayerTextDrawBoxColor(playerid,gym[1][playerid], 50);
 		PlayerTextDrawUseBox(playerid,gym[1][playerid], 1);
 		PlayerTextDrawSetProportional(playerid,gym[1][playerid], 1);
 		PlayerTextDrawSetSelectable(playerid,gym[1][playerid], 0);

 		gym[2][playerid] = CreatePlayerTextDraw(playerid,380.000000, 312.000000, "ld_beat:up");
 		PlayerTextDrawFont(playerid,gym[2][playerid], 4);
 		PlayerTextDrawLetterSize(playerid,gym[2][playerid], 0.600000, 2.000000);
 		PlayerTextDrawTextSize(playerid,gym[2][playerid], 17.000000, 17.000000);
 		PlayerTextDrawSetOutline(playerid,gym[2][playerid], 1);
 		PlayerTextDrawSetShadow(playerid,gym[2][playerid], 0);
 		PlayerTextDrawAlignment(playerid,gym[2][playerid], 1);
 		PlayerTextDrawColor(playerid,gym[2][playerid], -1);
 		PlayerTextDrawBackgroundColor(playerid,gym[2][playerid], 255);
 		PlayerTextDrawBoxColor(playerid,gym[2][playerid], 50);
 		PlayerTextDrawUseBox(playerid,gym[2][playerid], 1);
 		PlayerTextDrawSetProportional(playerid,gym[2][playerid], 1);
 		PlayerTextDrawSetSelectable(playerid,gym[2][playerid], 0);

 		gym[3][playerid] = CreatePlayerTextDraw(playerid,402.000000, 312.000000, "ld_beat:left");
 		PlayerTextDrawFont(playerid,gym[3][playerid], 4);
 		PlayerTextDrawLetterSize(playerid,gym[3][playerid], 0.600000, 2.000000);
 		PlayerTextDrawTextSize(playerid,gym[3][playerid], 17.000000, 17.000000);
 		PlayerTextDrawSetOutline(playerid,gym[3][playerid], 1);
 		PlayerTextDrawSetShadow(playerid,gym[3][playerid], 0);
 		PlayerTextDrawAlignment(playerid,gym[3][playerid], 1);
 		PlayerTextDrawColor(playerid,gym[3][playerid], -1);
 		PlayerTextDrawBackgroundColor(playerid,gym[3][playerid], 255);
 		PlayerTextDrawBoxColor(playerid,gym[3][playerid], 50);
 		PlayerTextDrawUseBox(playerid,gym[3][playerid], 1);
 		PlayerTextDrawSetProportional(playerid,gym[3][playerid], 1);
 		PlayerTextDrawSetSelectable(playerid,gym[3][playerid], 0);

 		gym[4][playerid] = CreatePlayerTextDraw(playerid,424.000000, 312.000000, "ld_beat:right");
 		PlayerTextDrawFont(playerid,gym[4][playerid], 4);
 		PlayerTextDrawLetterSize(playerid,gym[4][playerid], 0.600000, 2.000000);
 		PlayerTextDrawTextSize(playerid,gym[4][playerid], 17.000000, 17.000000);
 		PlayerTextDrawSetOutline(playerid,gym[4][playerid], 1);
 		PlayerTextDrawSetShadow(playerid,gym[4][playerid], 0);
 		PlayerTextDrawAlignment(playerid,gym[4][playerid], 1);
 		PlayerTextDrawColor(playerid,gym[4][playerid], -1);
 		PlayerTextDrawBackgroundColor(playerid,gym[4][playerid], 255);
 		PlayerTextDrawBoxColor(playerid,gym[4][playerid], 50);
 		PlayerTextDrawUseBox(playerid,gym[4][playerid], 1);
 		PlayerTextDrawSetProportional(playerid,gym[4][playerid], 1);
 		PlayerTextDrawSetSelectable(playerid,gym[4][playerid], 0);

 		gym[5][playerid] = CreatePlayerTextDraw(playerid,446.000000, 312.000000, "ld_beat:up");
 		PlayerTextDrawFont(playerid,gym[5][playerid], 4);
 		PlayerTextDrawLetterSize(playerid,gym[5][playerid], 0.600000, 2.000000);
 		PlayerTextDrawTextSize(playerid,gym[5][playerid], 17.000000, 17.000000);
 		PlayerTextDrawSetOutline(playerid,gym[5][playerid], 1);
 		PlayerTextDrawSetShadow(playerid,gym[5][playerid], 0);
 		PlayerTextDrawAlignment(playerid,gym[5][playerid], 1);
 		PlayerTextDrawColor(playerid,gym[5][playerid], -1);
 		PlayerTextDrawBackgroundColor(playerid,gym[5][playerid], 255);
 		PlayerTextDrawBoxColor(playerid,gym[5][playerid], 50);
 		PlayerTextDrawUseBox(playerid,gym[5][playerid], 1);
 		PlayerTextDrawSetProportional(playerid,gym[5][playerid], 1);
 		PlayerTextDrawSetSelectable(playerid,gym[5][playerid], 0);

 		gym[6][playerid] = CreatePlayerTextDraw(playerid,470.000000, 312.000000, "ld_beat:right");
 		PlayerTextDrawFont(playerid,gym[6][playerid], 4);
 		PlayerTextDrawLetterSize(playerid,gym[6][playerid], 0.600000, 2.000000);
 		PlayerTextDrawTextSize(playerid,gym[6][playerid], 17.000000, 17.000000);
 		PlayerTextDrawSetOutline(playerid,gym[6][playerid], 1);
 		PlayerTextDrawSetShadow(playerid,gym[6][playerid], 0);
 		PlayerTextDrawAlignment(playerid,gym[6][playerid], 1);
 		PlayerTextDrawColor(playerid,gym[6][playerid], -1);
 		PlayerTextDrawBackgroundColor(playerid,gym[6][playerid], 255);
 		PlayerTextDrawBoxColor(playerid,gym[6][playerid], 50);
 		PlayerTextDrawUseBox(playerid,gym[6][playerid], 1);
 		PlayerTextDrawSetProportional(playerid,gym[6][playerid], 1);
 		PlayerTextDrawSetSelectable(playerid,gym[6][playerid], 0);

 		gym[7][playerid] = CreatePlayerTextDraw(playerid,492.000000, 312.000000, "ld_beat:down");
 		PlayerTextDrawFont(playerid,gym[7][playerid], 4);
 		PlayerTextDrawLetterSize(playerid,gym[7][playerid], 0.600000, 2.000000);
 		PlayerTextDrawTextSize(playerid,gym[7][playerid], 17.000000, 17.000000);
 		PlayerTextDrawSetOutline(playerid,gym[7][playerid], 1);
 		PlayerTextDrawSetShadow(playerid,gym[7][playerid], 0);
 		PlayerTextDrawAlignment(playerid,gym[7][playerid], 1);
 		PlayerTextDrawColor(playerid,gym[7][playerid], -1);
 		PlayerTextDrawBackgroundColor(playerid,gym[7][playerid], 255);
 		PlayerTextDrawBoxColor(playerid,gym[7][playerid], 50);
 		PlayerTextDrawUseBox(playerid,gym[7][playerid], 1);
 		PlayerTextDrawSetProportional(playerid,gym[7][playerid], 1);
 		PlayerTextDrawSetSelectable(playerid,gym[7][playerid], 0);

 		gym[8][playerid] = CreatePlayerTextDraw(playerid,514.000000, 312.000000, "ld_beat:up");
 		PlayerTextDrawFont(playerid,gym[8][playerid], 4);
 		PlayerTextDrawLetterSize(playerid,gym[8][playerid], 0.600000, 2.000000);
 		PlayerTextDrawTextSize(playerid,gym[8][playerid], 17.000000, 17.000000);
 		PlayerTextDrawSetOutline(playerid,gym[8][playerid], 1);
 		PlayerTextDrawSetShadow(playerid,gym[8][playerid], 0);
 		PlayerTextDrawAlignment(playerid,gym[8][playerid], 1);
 		PlayerTextDrawColor(playerid,gym[8][playerid], -1);
 		PlayerTextDrawBackgroundColor(playerid,gym[8][playerid], 255);
 		PlayerTextDrawBoxColor(playerid,gym[8][playerid], 50);
 		PlayerTextDrawUseBox(playerid,gym[8][playerid], 1);
 		PlayerTextDrawSetProportional(playerid,gym[8][playerid], 1);
 		PlayerTextDrawSetSelectable(playerid,gym[8][playerid], 0);

 		gym[9][playerid] = CreatePlayerTextDraw(playerid,536.000000, 312.000000, "ld_beat:left");
 		PlayerTextDrawFont(playerid,gym[9][playerid], 4);
 		PlayerTextDrawLetterSize(playerid,gym[9][playerid], 0.600000, 2.000000);
 		PlayerTextDrawTextSize(playerid,gym[9][playerid], 17.000000, 17.000000);
 		PlayerTextDrawSetOutline(playerid,gym[9][playerid], 1);
 		PlayerTextDrawSetShadow(playerid,gym[9][playerid], 0);
 		PlayerTextDrawAlignment(playerid,gym[9][playerid], 1);
 		PlayerTextDrawColor(playerid,gym[9][playerid], -1);
 		PlayerTextDrawBackgroundColor(playerid,gym[9][playerid], 255);
 		PlayerTextDrawBoxColor(playerid,gym[9][playerid], 50);
 		PlayerTextDrawUseBox(playerid,gym[9][playerid], 1);
 		PlayerTextDrawSetProportional(playerid,gym[9][playerid], 1);
 		PlayerTextDrawSetSelectable(playerid,gym[9][playerid], 0);

 		gym[10][playerid] = CreatePlayerTextDraw(playerid,558.000000, 312.000000, "ld_beat:left");
 		PlayerTextDrawFont(playerid,gym[10][playerid], 4);
 		PlayerTextDrawLetterSize(playerid,gym[10][playerid], 0.600000, 2.000000);
 		PlayerTextDrawTextSize(playerid,gym[10][playerid], 17.000000, 17.000000);
 		PlayerTextDrawSetOutline(playerid,gym[10][playerid], 1);
 		PlayerTextDrawSetShadow(playerid,gym[10][playerid], 0);
 		PlayerTextDrawAlignment(playerid,gym[10][playerid], 1);
 		PlayerTextDrawColor(playerid,gym[10][playerid], -1);
 		PlayerTextDrawBackgroundColor(playerid,gym[10][playerid], 255);
 		PlayerTextDrawBoxColor(playerid,gym[10][playerid], 50);
 		PlayerTextDrawUseBox(playerid,gym[10][playerid], 1);
 		PlayerTextDrawSetProportional(playerid,gym[10][playerid], 1);
 		PlayerTextDrawSetSelectable(playerid,gym[10][playerid], 0);

 		gym[11][playerid] = CreatePlayerTextDraw(playerid,580.000000, 312.000000, "ld_beat:down");
 		PlayerTextDrawFont(playerid,gym[11][playerid], 4);
 		PlayerTextDrawLetterSize(playerid,gym[11][playerid], 0.600000, 2.000000);
 		PlayerTextDrawTextSize(playerid,gym[11][playerid], 17.000000, 17.000000);
 		PlayerTextDrawSetOutline(playerid,gym[11][playerid], 1);
 		PlayerTextDrawSetShadow(playerid,gym[11][playerid], 0);
 		PlayerTextDrawAlignment(playerid,gym[11][playerid], 1);
 		PlayerTextDrawColor(playerid,gym[11][playerid], -1);
 		PlayerTextDrawBackgroundColor(playerid,gym[11][playerid], 255);
 		PlayerTextDrawBoxColor(playerid,gym[11][playerid], 50);
 		PlayerTextDrawUseBox(playerid,gym[11][playerid], 1);
 		PlayerTextDrawSetProportional(playerid,gym[11][playerid], 1);
 		PlayerTextDrawSetSelectable(playerid,gym[11][playerid], 0);

 		gym[12][playerid] = CreatePlayerTextDraw(playerid,602.000000, 312.000000, "ld_beat:down");
 		PlayerTextDrawFont(playerid,gym[12][playerid], 4);
 		PlayerTextDrawLetterSize(playerid,gym[12][playerid], 0.600000, 2.000000);
 		PlayerTextDrawTextSize(playerid,gym[12][playerid], 17.000000, 17.000000);
 		PlayerTextDrawSetOutline(playerid,gym[12][playerid], 1);
 		PlayerTextDrawSetShadow(playerid,gym[12][playerid], 0);
 		PlayerTextDrawAlignment(playerid,gym[12][playerid], 1);
 		PlayerTextDrawColor(playerid,gym[12][playerid], -1);
 		PlayerTextDrawBackgroundColor(playerid,gym[12][playerid], 255);
 		PlayerTextDrawBoxColor(playerid,gym[12][playerid], 50);
 		PlayerTextDrawUseBox(playerid,gym[12][playerid], 1);
 		PlayerTextDrawSetProportional(playerid,gym[12][playerid], 1);
 		PlayerTextDrawSetSelectable(playerid,gym[12][playerid], 0);

 		gym[13][playerid] = CreatePlayerTextDraw(playerid,624.000000, 312.000000, "ld_beat:right");
 		PlayerTextDrawFont(playerid,gym[13][playerid], 4);
 		PlayerTextDrawLetterSize(playerid,gym[13][playerid], 0.600000, 2.000000);
 		PlayerTextDrawTextSize(playerid,gym[13][playerid], 17.000000, 17.000000);
 		PlayerTextDrawSetOutline(playerid,gym[13][playerid], 1);
 		PlayerTextDrawSetShadow(playerid,gym[13][playerid], 0);
 		PlayerTextDrawAlignment(playerid,gym[13][playerid], 1);
 		PlayerTextDrawColor(playerid,gym[13][playerid], -1);
 		PlayerTextDrawBackgroundColor(playerid,gym[13][playerid], 255);
 		PlayerTextDrawBoxColor(playerid,gym[13][playerid], 50);
 		PlayerTextDrawUseBox(playerid,gym[13][playerid], 1);
 		PlayerTextDrawSetProportional(playerid,gym[13][playerid], 1);
 		PlayerTextDrawSetSelectable(playerid,gym[13][playerid], 0);

 		PlayerTextDrawShow(playerid, kasstat_3[playerid]);
 		PlayerTextDrawShow(playerid, kasstat_4[playerid]);

 		secilenok[playerid] = 0;
 		TogglePlayerControllable(playerid, false);
 		gymtimer[playerid] = SetTimerEx("gymvar", 40, 1, "i",playerid);
 		gymtustimer[playerid] = SetTimerEx("gymtusvar", 93, 1, "i",playerid);
 		return 1;
 	}

 	stock GYMAletKontrol(playerid)
 	{
 		for( new b; b != sizeof bisiklet_pos; b ++ )
 		{
 			if( IsPlayerInRangeOfPoint( playerid, 1.0, bisiklet_pos[ b ][ 0 ], bisiklet_pos[ b ][ 1 ], bisiklet_pos[ b ][ 2 ] ) )
 			{
 				if(BISIKLET_KULLANIMDA[b]==false && OYUNCU_BISIKLETTE[playerid]==false)
 				{
 					SetPlayerPos( playerid, bisiklet_pos[ b ][ 0 ]+0.5, bisiklet_pos[ b ][ 1 ]-0.5, bisiklet_pos[ b ][ 2 ] );
 					SetPlayerFacingAngle( playerid, bisiklet_pos[ b ][ 3 ] );
 					BISIKLET_KULLANIMDA[b]=true;
 					OYUNCU_BISIKLETTE[playerid]=true;
 					KULLANILAN_BISIKLET[playerid]=b;

 					ApplyAnimation( playerid, "GYMNASIUM", "bike_start", 1, 1, 0, 0, 1, 0, 1);

 					gymtur[playerid] = 1;

 					GYMHazirla(playerid);
 				}else{
 					hataMesaji(playerid, "Bu alet/platform kullanýmda lütfen sýranýzý bekleyiniz.");
 				}

 			}

 		}
 		for( new o; o != sizeof kosu_pos; o ++ )
 		{
 			if( IsPlayerInRangeOfPoint( playerid, 1.0, kosu_pos[ o ][ 0 ], kosu_pos[ o ][ 1 ], kosu_pos[ o ][ 2 ] ) )
 			{
 				if(BANT_KULLANIMDA[o]==false && OYUNCU_BANTTA[playerid]==false)
 				{

 					OYUNCU_BANTTA[playerid]=true;
 					BANT_KULLANIMDA[o]=true;
 					KULLANILAN_BANT[playerid]=o;

 					SetPlayerPos( playerid, kosu_pos[ o ][ 0 ], kosu_pos[ o ][ 1 ]+1.3, kosu_pos[ o ][ 2 ] );
 					SetPlayerFacingAngle( playerid, kosu_pos[ o ][ 3 ] );
 					TogglePlayerControllable( playerid, 0 );
 					ApplyAnimation( playerid, "GYMNASIUM", "gym_tread_geton", 1, 0, 0, 0, 1, 0, 1 );
 					gymtur[playerid] = 3;
 					SetPlayerCameraPos( playerid, kosu_pos[ o ][ 0 ] +2, kosu_pos[ o ][ 1 ] -2, kosu_pos[ o ][ 2 ] + 0.5 );
 					SetPlayerCameraLookAt( playerid, kosu_pos[ o ][ 0 ], kosu_pos[ o ][ 1 ], kosu_pos[ o ][ 2 ]);
 					GYMHazirla(playerid);
 				}else{
 					hataMesaji(playerid, "Bu alet/platform kullanýmda lütfen sýranýzý bekleyiniz.");
 				}


 			}

 		}

 		for (new d; d != sizeof damb_pos; d ++)
 		{
 			if( IsPlayerInRangeOfPoint( playerid, 2.0, damb_pos[ d ][ 0 ], damb_pos[ d ][ 1 ], damb_pos[ d ][ 2 ] ) )
 			{
 				if(DAMBIL_KULLANIMDA[d]==false && OYUNCU_DAMBILDA[playerid]==false)
 				{
 					DAMBIL_KULLANIMDA[d]=true;
 					OYUNCU_DAMBILDA[playerid]=true;
 					KULLANILAN_DAMBIL[playerid]=d;

 					SetPlayerPos( playerid, damb_pos[ d ][ 0 ]-1, damb_pos[ d ][ 1 ], damb_pos[ d ][ 2 ]);
 					SetPlayerFacingAngle( playerid, damb_pos[ d ][ 3 ] );
 					if(IsPlayerAttachedObjectSlotUsed(playerid, 0)) RemovePlayerAttachedObject(playerid, 0);
 					if(IsPlayerAttachedObjectSlotUsed(playerid, 1)) RemovePlayerAttachedObject(playerid, 1);
 					SetPlayerAttachedObject(playerid, 0, 3071, 6, 0.000000, 0.000000, -0.013000);
 					SetPlayerAttachedObject(playerid, 1, 3071, 5, 0.015000, 0.000000, -0.018000);
 					ApplyAnimation( playerid, "Freeweights", "gym_free_pickup", 1, 0, 0, 0, 1, 0, 1 );

 					gymtur[playerid] = 2;

 					SetPlayerCameraPos( playerid, damb_pos[ d ][ 0 ]+2.3, damb_pos[ d ][ 1 ], damb_pos[ d ][ 2 ]+0.3 );
 					SetPlayerCameraLookAt( playerid, damb_pos[ d ][ 0 ], damb_pos[ d ][ 1 ], damb_pos[ d ][ 2 ]+0.5);
 					GYMHazirla(playerid);
 				}else{
 					hataMesaji(playerid, "Bu alet/platform kullanýmda lütfen sýranýzý bekleyiniz.");
 				}

 			}

 		}
 	}

 	stock birlikisyerisiniri(seviye)
 	{
 		new sinirsayi;
 		switch(seviye)
 		{
 			case 1: sinirsayi = 0;
 			case 2: sinirsayi = 1;
 			case 3: sinirsayi = 2;
 			case 4: sinirsayi = 3;
 			case 5: sinirsayi = 4;
 			case 6: sinirsayi = 6;
 		}
 		return sinirsayi;
 	}

 	stock birlikaracsiniri(seviye)
 	{
 		new sinirsayi;
 		switch(seviye)
 		{
 			case 1: sinirsayi = 1;
 			case 2: sinirsayi = 2;
 			case 3: sinirsayi = 4;
 			case 4: sinirsayi = 6;
 			case 5: sinirsayi = 8;
 			case 6: sinirsayi = 20;
 		}
 		return sinirsayi;
 	}

 	stock LabSeviyeUcret(seviye)
 	{
 		new seviyeucret;
 		switch(seviye)
 		{
 			case 0: seviyeucret = 50000;
 			case 1: seviyeucret = 100000;
 			case 2: seviyeucret = 0000;
 		}
 		return seviyeucret;
 	}

 	stock oyuncuyetenektoplami(playerid)
 	{
 		new toplamseviye, toplampuan, toplamexp;
 		toplamseviye = oyuncuData[playerid][oLiderlikYetenek] + oyuncuData[playerid][oHirsizlikYetenek] + oyuncuData[playerid][oKimyaYetenek] + oyuncuData[playerid][oSurusYetenek] + oyuncuData[playerid][oUretimYetenek];
 		toplamexp = oyuncuData[playerid][oLiderlikYetenekEXP] + oyuncuData[playerid][oHirsizlikYetenekEXP] + oyuncuData[playerid][oKimyaYetenekEXP] + oyuncuData[playerid][oSurusYetenekEXP] + oyuncuData[playerid][oUretimYetenekEXP];
 		toplampuan = toplamseviye * 3 + toplamexp;
 		return toplampuan;
 	}

 	stock oyuncuyeteneksifirla(playerid)
 	{
 		oyuncuData[playerid][oLiderlikYetenek] = 0;
 		oyuncuData[playerid][oHirsizlikYetenek] = 0;
 		oyuncuData[playerid][oUretimYetenek] = 0;
 		oyuncuData[playerid][oSurusYetenek] = 0;
 		oyuncuData[playerid][oKimyaYetenek] = 0;
 		oyuncuData[playerid][oLiderlikYetenekEXP] = 0;
 		oyuncuData[playerid][oHirsizlikYetenekEXP] = 0;
 		oyuncuData[playerid][oUretimYetenekEXP] = 0;
 		oyuncuData[playerid][oSurusYetenekEXP] = 0;
 		oyuncuData[playerid][oKimyaYetenekEXP] = 0;
 		return 1;
 	}

 	stock Tekne_Yakin(playerid)
 	{
 		static Float:fX, Float:fY, Float:fZ;
 		foreach(new i : Araclar) {
 			GetVehiclePos(AracBilgi[i][aracYarat], fX, fY, fZ);
 			if(IsPlayerInRangeOfPoint(playerid, 3.0, fX, fY, fZ)) {
 				if(GetVehicleModel(AracBilgi[i][aracYarat]) == 453 || GetVehicleModel(AracBilgi[i][aracYarat]) == 473)
 				{
 					return i;
 				}
 			}
 		}
 		return -1;
 	}

 	stock RehbereEkle(playerid, slot, numara, isim[])
 	{
 		if(!RehberBilgi[playerid][slot][rehberkullanimda])
 		{
 			static string[440];
 			RehberBilgi[playerid][slot][rehberkullanimda] = true;
 			RehberBilgi[playerid][slot][rehbernumara] = numara;
 			format(RehberBilgi[playerid][slot][rehberisim], 32, isim);
 			mysql_format(g_SQL, string, sizeof(string), "INSERT INTO `rehberler` (`ID`, `rehberisim`, `rehbernumara`, `slot`) VALUES('%d', '%e', '%d', '%d')", oyuncuData[playerid][oID], isim, RehberBilgi[playerid][slot][rehbernumara], slot);
 			mysql_tquery(g_SQL, string, "RehberEklendi", "dd", playerid, slot);
 			SunucuMesaji(playerid, "%d numaralý slota %d numarasýný %s ismiyle kaydettiniz.", slot, numara, isim);
 		}
 		else return SunucuMesaji(playerid, "Bu slot kullanýlýyor. Slotu boþaltmak için /rehberdensil komutunu kullanýn.");
 		return 1;
 	}

 	stock GirisEkraniYukle(playerid)
 	{
 		SohbetTemizle(playerid, false);
 		vcGuardMesaji(playerid, "IP doðrulamanýz baþarýlý oldu. Giriþ ekranýna yönlendiriliyorsunuz...");
 		SunucuMesaji(playerid, "Kutucuða þifrenizi girerek, 30 saniye içerisinde giriþ yap butonuna týklayýnýz.");
 		TogglePlayerControllable(playerid, false);
 		new str[MAX_PLAYER_NAME + 1 + 85];
		format(str, sizeof(str), "{FFFFFF}Sunucuya hoþgeldin {015668}%s\n{FFFFFF}Hesabýna giriþ yapabilmek için kutucuðu doldurmalýsýn.", OyuncuIsim(playerid, 1));
		ShowPlayerDialog(playerid, DIALOG_GIRIS, DIALOG_STYLE_PASSWORD, "Nitro Roleplay - Giriþ Yap", str, "Onayla", "Çýkýþ");
 		oyuncugiris[playerid] = SetTimerEx("OyuncuGirisTimer", 25 * 1000, false, "i", playerid);
 		return 1;
 	}

 	stock ReklamSayi(playerid)
 	{
 		static sayi;
 		sayi = 0;
 		for (new i = 0; i != MAX_REKLAM; i++)
 		{
 			if(ReklamBilgi[i][reklamkullanimda] && ReklamBilgi[i][reklamsahip] == playerid)
 				sayi++;
 		}
 		return sayi;
 	}

 	stock ReklamKontrolEtVeSil(playerid)
 	{
 		for (new i = 0; i != MAX_REKLAM; i++)
 		{
 			if(ReklamBilgi[i][reklamkullanimda] && ReklamBilgi[i][reklamsahip] == playerid) return ReklamSil(i);
 		}
 		return 0;
 	}

 	stock ReklamEkle(playerid, id, yazi[], fid)
 	{
 		new string[120];
 		ReklamBilgi[id][reklamkullanimda] = true;
 		ReklamBilgi[id][reklamsahip] = playerid;
 		ReklamBilgi[id][reklamonaylandi] = false;
 		ReklamBilgi[id][reklamfirma] = fid;
 		format(ReklamBilgi[id][reklamyazi], 128, yazi);
 		printf("%s - %s", ReklamBilgi[id][reklamyazi], yazi);
 		 if(oyuncuData[playerid][oVIP] > 0) ReklamBilgi[id][reklamvip] = 1;
 		Iter_Add(Reklamlar, id);
 		SendClientMessage(playerid, RENK_RAPOR, "Reklamýnýz onay sürecine girdi, onaylandýðýnda yayýnlanacak.");
 		foreach (new i : Player)
 		{
 			if(oyuncuData[i][oHelper] > 0)
 			{
 				if(oyuncuData[i][oHelperIsbasi] == true)
 				{
 					format(string, sizeof(string), "%s adlý kiþi yeni bir reklam gönderdi!", OyuncuIsim(playerid));
 					SendClientMessage(i, RENK_TURUNCU, string);
 				}
 			}
 		}
 		return 1;
 	}

 	stock ReklamSil(reklamid)
 	{
 		if(reklamid != -1 && ReklamBilgi[reklamid][reklamkullanimda])
 		{
 			KillTimer(ReklamTimer[reklamid]);
 			ReklamBilgi[reklamid][reklamkullanimda] = false;
 			ReklamBilgi[reklamid][reklamsahip] = INVALID_PLAYER_ID;
 			format(ReklamBilgi[reklamid][reklamyazi], 128, "*");
 			ReklamBilgi[reklamid][reklamonaylandi] = false;
 			ReklamBilgi[reklamid][reklamvip] = 0;
 			Iter_Remove(Reklamlar, reklamid);
 		}
 		return 1;
 	}

 	stock Soru_Ekle(playerid, const text[], type = 1)
 	{
 		for (new i = 0; i != MAKSIMUM_SORU; i++)
 		{
 			if(!SoruBilgi[i][sKullanimda])
 			{
 				SoruBilgi[i][sKullanimda] = true;
 				SoruBilgi[i][sTur] = type;
 				SoruBilgi[i][sSahip] = playerid;

 				strpack(SoruBilgi[i][sMesaj], text, 128 char);
 				return i;
 			}
 		}
 		return -1;
 	}

 	stock Soru_Sayi(playerid)
 	{
 		static sayi;
 		sayi = 0;
 		for (new i = 0; i != MAKSIMUM_SORU; i ++)
 		{
 			if(SoruBilgi[i][sKullanimda] && SoruBilgi[i][sSahip] == playerid)
 				sayi++;
 		}
 		return sayi;
 	}

 	stock Sorulari_Kaldir(playerid)
 	{
 		for (new i = 0; i != MAKSIMUM_SORU; i ++)
 		{
 			if(SoruBilgi[i][sKullanimda] && SoruBilgi[i][sSahip] == playerid)
 			{
 				Soru_Kaldir(i);
 			}
 		}
 		return 1;
 	}

 	stock Soru_Kaldir(soruid)
 	{
 		if(soruid != -1 && SoruBilgi[soruid][sKullanimda])
 		{
 			SoruBilgi[soruid][sKullanimda] = false;
 			SoruBilgi[soruid][sSahip] = INVALID_PLAYER_ID;
 		}
 		return 1;
 	}

 	stock GetBosSlot(playerid)
 	{
 		for (new i = 0; i < MAX_ITEM; i++)
 		{
 			if (!EnvanterData[playerid][i_aktif][i]) return i;
 		}
 		return MAX_ITEM;
 	}

 	stock ItemEkle(oyuncuid,tip,miktar)
 	{
 		new basaridurumu = 0;
 		if(GetBosSlot(oyuncuid) < MAX_ITEM && oyuncuData[oyuncuid][pEnvanterAgirlik] < MAX_AGIRLIK) {
 			new slot = GetBosSlot(oyuncuid), query[200];
 			EnvanterData[oyuncuid][i_tip][slot] = tip;
 			EnvanterData[oyuncuid][i_var][slot] = miktar;
 			EnvanterData[oyuncuid][i_craft][slot] = false;
 			EnvanterData[oyuncuid][i_aktif][slot] = true;
 			oyuncuData[oyuncuid][pEnvanterAgirlik] = floatadd(oyuncuData[oyuncuid][pEnvanterAgirlik],ItemArray[ EnvanterData[oyuncuid][i_tip][slot] - 1 ][igram]);
 			mysql_format(g_SQL, query, sizeof(query), "INSERT INTO `itemler` (`slot`, `oyuncu`, `tip`, `var`) VALUES('%d', '%e', '%d', '%d')", slot, oyuncuData[oyuncuid][oIsim], EnvanterData[oyuncuid][i_tip][slot], EnvanterData[oyuncuid][i_var][slot]);
 			mysql_query(g_SQL, query);
 			basaridurumu = 1;
 		}
 		else hataMesaji(oyuncuid, "Envanterinizde boþ slot bulunmuyor veya aðýrlýk limitini doldurdunuz."), basaridurumu = 0;
 		return basaridurumu;
 	}

 	stock ItemVarMi(playerid,tip)
 	{
 		new sayi = 0;
 		for (new i = 0; i < MAX_ITEM; i++)
 		{
 			if (EnvanterData[playerid][i_aktif][i] && EnvanterData[playerid][i_tip][i] == tip) {
 				sayi ++;
 			}
 		}
 		return sayi;
 	}

 	stock ItemMiktarKontrol(playerid,tip)
 	{
 		new sayi = 0;
 		for (new i = 0; i < MAX_ITEM; i++)
 		{
 			if (EnvanterData[playerid][i_aktif][i] && EnvanterData[playerid][i_tip][i] == tip) {
 				sayi += EnvanterData[playerid][i_var][i];
 			}
 		}
 		return sayi;
 	}

 	stock ItemAnahtarKontrol(playerid,anahtar)
 	{
 		new bool:sayi = false;
 		for (new i = 0; i < MAX_ITEM; i++)
 		{
 			if (EnvanterData[playerid][i_aktif][i] && EnvanterData[playerid][i_tip][i] == 107 && EnvanterData[playerid][i_var][i] == anahtar) {
 				sayi = true;
 			}
 		}
 		return sayi;
 	}

 	stock ItemAnahtarSifirla(playerid,tip,anahtarid)
 	{
 		for (new i = 0; i < MAX_ITEM; i++)
 		{
 			if (EnvanterData[playerid][i_aktif][i] && EnvanterData[playerid][i_tip][i] == tip && EnvanterData[playerid][i_var][i] == anahtarid) {
 				oyuncuData[playerid][pEnvanterAgirlik] = floatsub(oyuncuData[playerid][pEnvanterAgirlik],ItemArray[ EnvanterData[playerid][i_tip][i] - 1 ][igram]);
 				EnvanterData[playerid][i_tip][i] = 0;
 				EnvanterData[playerid][i_var][i] = 0;
 				EnvanterData[playerid][i_aktif][i] = false;
 				EnvanterData[playerid][i_craft][i] = false;
 				new query[256];
 				mysql_format(g_SQL, query, sizeof(query), "DELETE FROM `itemler` WHERE `slot` = '%d' AND `oyuncu` = '%e'", i, oyuncuData[playerid][oIsim]);
 				mysql_query(g_SQL, query);
 			}
 		}
 	}

 	stock ItemSlotMiktarAzalt(playerid,slot,miktar)
 	{
 		new query[256];
 		if (EnvanterData[playerid][i_aktif][slot])
 		{
 			oyuncuData[playerid][pEnvanterAgirlik] = floatsub(oyuncuData[playerid][pEnvanterAgirlik],ItemArray[ EnvanterData[playerid][i_tip][slot] - 1 ][igram]);
 			EnvanterData[playerid][i_var][slot] -= miktar;
 			mysql_format(g_SQL, query, sizeof(query), "UPDATE `itemler` SET `var` = '%d' WHERE `slot` = '%d' AND `oyuncu` = '%e'", EnvanterData[playerid][i_var][slot], slot, oyuncuData[playerid][oIsim]);
 			mysql_query(g_SQL, query);
 			if(EnvanterData[playerid][i_var][slot] < 1)
 			{
 				mysql_format(g_SQL, query, sizeof(query), "DELETE FROM `itemler` WHERE `slot` = '%d' AND `oyuncu` = '%e'", slot, oyuncuData[playerid][oIsim]);
 				mysql_query(g_SQL, query);
 				ItemSil(playerid, slot);
 			}
 		}
 	}

	 stock ItemSlotMiktarArttir(playerid,slot,miktar)
 	{
 		new query[256];
 		if (EnvanterData[playerid][i_aktif][slot])
 		{
 			oyuncuData[playerid][pEnvanterAgirlik] = floatsub(oyuncuData[playerid][pEnvanterAgirlik],ItemArray[ EnvanterData[playerid][i_tip][slot] - 1 ][igram]);
 			EnvanterData[playerid][i_var][slot] += miktar;
 			mysql_format(g_SQL, query, sizeof(query), "UPDATE `itemler` SET `var` = '%d' WHERE `slot` = '%d' AND `oyuncu` = '%e'", EnvanterData[playerid][i_var][slot], slot, oyuncuData[playerid][oIsim]);
 			mysql_query(g_SQL, query);
 		}
 	}

 	stock ItemMiktarAzalt(playerid,tip,miktar)
 	{
 		new sayi = 0, query[256];
 		for (new i = 0; i < MAX_ITEM; i++) if(sayi < 1)
 		{
 			if (EnvanterData[playerid][i_aktif][i] && EnvanterData[playerid][i_tip][i] == tip) {
 				oyuncuData[playerid][pEnvanterAgirlik] = floatsub(oyuncuData[playerid][pEnvanterAgirlik],ItemArray[ EnvanterData[playerid][i_tip][i] - 1 ][igram]);
 				EnvanterData[playerid][i_var][i] -= miktar;
 				mysql_format(g_SQL, query, sizeof(query), "UPDATE `itemler` SET `var` = '%d' WHERE `slot` = '%d' AND `oyuncu` = '%e'", EnvanterData[playerid][i_var][i], i, oyuncuData[playerid][oIsim]);
 				mysql_query(g_SQL, query);
 				if(EnvanterData[playerid][i_var][i] < 1) {
 					mysql_format(g_SQL, query, sizeof(query), "DELETE FROM `itemler` WHERE `slot` = '%d' AND `oyuncu` = '%e'", i, oyuncuData[playerid][oIsim]);
 					mysql_query(g_SQL, query);
 					ItemSil(playerid, i);
 				}
 				sayi ++;
 			}
 		}
 	}

 	stock ItemMiktarArttir(playerid,slot,miktar)
 	{
 		new query[256];
 		if (EnvanterData[playerid][i_aktif][slot])
 		{
 			oyuncuData[playerid][pEnvanterAgirlik] = floatsub(oyuncuData[playerid][pEnvanterAgirlik],ItemArray[ EnvanterData[playerid][i_tip][slot] - 1 ][igram]);
 			EnvanterData[playerid][i_var][slot] += miktar;
 			mysql_format(g_SQL, query, sizeof(query), "UPDATE `itemler` SET `var` = '%d' WHERE `slot` = '%d' AND `oyuncu` = '%e'", EnvanterData[playerid][i_var][slot], slot, oyuncuData[playerid][oIsim]);
 			mysql_query(g_SQL, query);
 		}
 	}

 	stock ItemSifirla(playerid,tip)
 	{
 		new sayi = 0;
 		for (new i = 0; i < MAX_ITEM; i++) if(sayi < 1)
 		{
 			if (EnvanterData[playerid][i_aktif][i] && EnvanterData[playerid][i_tip][i] == tip) {
 				oyuncuData[playerid][pEnvanterAgirlik] = floatsub(oyuncuData[playerid][pEnvanterAgirlik],ItemArray[ EnvanterData[playerid][i_tip][i] - 1 ][igram]);
 				EnvanterData[playerid][i_tip][i] = 0;
 				EnvanterData[playerid][i_var][i] = 0;
 				EnvanterData[playerid][i_aktif][i] = false;
 				EnvanterData[playerid][i_craft][i] = false;
 				new query[256];
 				mysql_format(g_SQL, query, sizeof(query), "DELETE FROM `itemler` WHERE `slot` = '%d' AND `oyuncu` = '%e'", i, oyuncuData[playerid][oIsim]);
 				mysql_query(g_SQL, query);
 				sayi ++;
 			}
 		}
 	}

 	stock ItemSil(playerid, slot)
 	{
 		if (EnvanterData[playerid][i_aktif][slot]) {
 			oyuncuData[playerid][pEnvanterAgirlik] = floatsub(oyuncuData[playerid][pEnvanterAgirlik],ItemArray[ EnvanterData[playerid][i_tip][slot] - 1 ][igram]);
 			EnvanterData[playerid][i_tip][slot] = 0;
 			EnvanterData[playerid][i_var][slot] = 0;
 			EnvanterData[playerid][i_aktif][slot] = false;
 			EnvanterData[playerid][i_craft][slot] = false;
 			new query[256];
 			mysql_format(g_SQL, query, sizeof(query), "DELETE FROM `itemler` WHERE `slot` = '%d' AND `oyuncu` = '%e'", slot, oyuncuData[playerid][oIsim]);
 			mysql_query(g_SQL, query);
 		}
 	}

 	stock TekneGaleriGoster(playerid)
{
	new
	subString[3000],
	item_name[24],
	baslik[80],
	itemobjesi;
	for (new i = 0; i < sizeof(tekneveri); i++)
	{
			format (item_name, sizeof(item_name), "%s", AracModel(tekneveri[i][0]));
			itemobjesi = tekneveri[i][0];
			format(subString, sizeof(subString), "%s%d\n%s\n", subString, itemobjesi, item_name);
	}
	ShowPlayerDialog(playerid, DIALOG_TEKNE_SATINAL, DIALOG_STYLE_PREVMODEL, baslik, subString, "Sec", "Iptal");
	return 1;
}


	 stock TarlaEkipmanGaleriGoster(playerid)
 	{
 		new
 		subString[512],
 		item_name[24],
 		baslik[80],
 		itemobjesi;
 		for (new i = 0; i < sizeof(tekipmanveri); i++)
 		{
 			format (item_name, sizeof(item_name), "%s", AracModel(tekipmanveri[i][0]));
 			itemobjesi = tekipmanveri[i][0];
 			format(subString, sizeof(subString), "%s%d\n%s\n", subString, itemobjesi, item_name);
 		}
 		ShowPlayerDialog(playerid, DIALOG_TEKIPMAN_SATINAL, DIALOG_STYLE_PREVMODEL, baslik, subString, "Sec", "Iptal");
 		return 1;
 	}

 	stock UcakGaleriGoster(playerid)
 	{
 		new
 		subString[512],
 		item_name[24],
 		baslik[80],
 		itemobjesi;
 		for (new i = 0; i < sizeof(ucakveri); i++)
 		{
 			format (item_name, sizeof(item_name), "%s", AracModel(ucakveri[i][0]));
 			itemobjesi = ucakveri[i][0];
 			format(subString, sizeof(subString), "%s%d\n%s\n", subString, itemobjesi, item_name);
 		}
 		Dialog_Show(playerid, ucaksatinal, DIALOG_STYLE_PREVMODEL, baslik, subString, "Sec", "Iptal");
 		return 1;
 	}

 	stock EnvanterGoster(playerid)
{
	new
	subString[3000],
	item_name[24],
	baslik[80],
	itemobjesi;
	format(baslik, sizeof(baslik), "Envanter - Agirlik: ~y~%.2f/%.2f kg", oyuncuData[playerid][pEnvanterAgirlik], MAX_AGIRLIK);
	for (new i = 0; i < MAX_ITEM; i++)
	{
		if (EnvanterData[playerid][i_aktif][i]) {
			format (item_name, sizeof(item_name), "%s", ItemArray[ EnvanterData[playerid][i_tip][i] - 1 ][iisim]);
			itemobjesi = ItemArray[ EnvanterData[playerid][i_tip][i] - 1 ][iobje];
			format(subString, sizeof(subString), "%s%d\n%s(%d)\n", subString, itemobjesi, item_name, i);
		}
		else if(!EnvanterData[playerid][i_aktif][i]) {
			format(subString, sizeof(subString), "%s%d\nBos Slot(%d)\n",subString, 18631, i);
		}
	}
	ShowPlayerDialog(playerid, DIALOG_ENVANTER, DIALOG_STYLE_PREVMODEL, baslik, subString, "Sec", "Iptal");
	return 1;
}


	stock KatKontrol(playerid, id)
	{
		new kat;
		switch(AsansorData[id][asansorKat])
		{
			case 0:
			{
				if(IsPlayerInRangeOfPoint(playerid, 10.0, AsansorData[id][asansorPos_1][0], AsansorData[id][asansorPos_1][1], AsansorData[id][asansorPos_1][2]))
				{
					kat = 1;
				}
			}
			case 1:
			{
				if(IsPlayerInRangeOfPoint(playerid, 10.0, AsansorData[id][asansorPos_2][0], AsansorData[id][asansorPos_2][1], AsansorData[id][asansorPos_2][2]))
				{
					kat = 2;
				}
			}
			case 2:
			{
				if(IsPlayerInRangeOfPoint(playerid, 10.0, AsansorData[id][asansorPos_3][0], AsansorData[id][asansorPos_3][1], AsansorData[id][asansorPos_3][2]))
				{
					kat = 3;
				}
			}
		}
		return kat;
	}

	stock AsansorKumanda(playerid)
	{
		new id = -1;
		foreach(new i : Asansorler)
		{
			if(IsPlayerInRangeOfPoint(playerid, 1.0, AsansorData[i][asansorTus][0], AsansorData[i][asansorTus][1], AsansorData[i][asansorTus][2]))
			{
				id = i;
				break;
			}
		}
		return id;
	}

	stock AsansorOlustur(playerid, id)
	{
		GetPlayerPos(playerid, AsansorData[id][asansorPos_1][0], AsansorData[id][asansorPos_1][1], AsansorData[id][asansorPos_1][2]);

		GetXYInFrontOfPlayer(playerid, AsansorData[id][asansorPos_1][0], AsansorData[id][asansorPos_1][1], 2.0);

		AsansorData[id][asansorObje] = CreateDynamicObject(ASANSOR_OBJE, AsansorData[id][asansorPos_1][0], AsansorData[id][asansorPos_1][1], AsansorData[id][asansorPos_1][2], AsansorData[id][asansorPos_1][3],\
			AsansorData[id][asansorPos_1][4], AsansorData[id][asansorPos_1][5], -1, -1);

		AsansorData[id][asansorKat] = 0;
		Iter_Add(Asansorler, id);

		SetPVarInt(playerid, "asansorDuzenleID", id);
		EditDynamicObject(playerid, AsansorData[id][asansorObje]);
		return 1;
	}
		function AnahtarBul(anahtarid)
		{
			new i, Cache:VeriGetir, query[512], oisim[MAX_PLAYER_NAME];
			mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `itemler` WHERE `tip` = '107' AND `var` = '%d'", anahtarid);
			VeriGetir = mysql_query(g_SQL, query);
			new rows = cache_num_rows();
			if(rows)
			{
				while(i < rows)
				{
					cache_get_value_name(i, "oyuncu", oisim, MAX_PLAYER_NAME);
					if(OyuncuIDcek(oisim) != INVALID_PLAYER_ID)
					{
						ItemAnahtarSifirla(OyuncuIDcek(oisim), 107, anahtarid);
					}
					else
					{
						mysql_format(g_SQL, query, sizeof(query), "DELETE FROM `itemler` WHERE `var` = '%d' AND `tip` = '107' AND `oyuncu` = '%e'", anahtarid, oisim);
						mysql_query(g_SQL, query);
					}
					i++;
				}
			}
			cache_delete(VeriGetir);
			return 1;
		}

		function OnFadeComplete(playerid)
		{
			if(fade[playerid][fID] == 27)
			{
	//TextDrawShowForPlayer(playerid, textdraw_0);
				SelectTextDraw(playerid, 0xFF9900FF);
				MobilyaMesaji(playerid, "Ok iþaretlerini kullanarak mobilyanýzý seçebilirsiniz.");
				SetPlayerPos(playerid, -1649.8984,1213.2477,13.6719);
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, playerid + 1);
				SetPlayerCameraPos(playerid,  -1653.4587, 1217.4429, 14.4307);
				SetPlayerCameraLookAt(playerid, -1654.4547, 1217.3081, 14.2655);
			}
			if(fade[playerid][fID] == 28)
			{
			/*ShowModelSelectionMenu(playerid, araclarliste, "Satilik Araclar");
			SetPlayerVirtualWorld(playerid, playerid + 1);
			TogglePlayerControllable(playerid, false);*/
		}
		return 1;
	}

	stock BirakilanItemSil(id)
	{
		new query[100];
		mysql_format(g_SQL, query, sizeof(query), "DELETE FROM `yeritemleri` WHERE `id` = '%d'", id);
		mysql_query(g_SQL, query);
		DestroyDynamicObject(BirakilanItemler[id][itemobje]);
		if(IsValidDynamic3DTextLabel(BirakilanItemler[id][txt3D]))
		{
			DestroyDynamic3DTextLabel(BirakilanItemler[id][txt3D]);
		}
		BirakilanItemler[id][itemtip] = 0;
		BirakilanItemler[id][itemid] = 0;
		BirakilanItemler[id][iX] = 0;
		BirakilanItemler[id][iY] = 0;
		BirakilanItemler[id][iZ] = 0;
		BirakilanItemler[id][itemmiktar] = 0;
		Iter_Remove(Itemler, id);
	}

	stock BirakilanItemYarat(playerid, slot)
	{
		new id = Iter_Free(Itemler);
		if(id < 0) return hataMesaji(playerid, "Daha fazla item býrakýlamaz.");
		if(IsPlayerAttachedObjectSlotUsed(playerid, 6)) { RemovePlayerAttachedObject(playerid, 6); }
		new Float:pos[3], query[250], me[128],string[128], obje, tip, var;
		obje = ItemArray[ EnvanterData[playerid][i_tip][slot] - 1 ][iobje];
		tip = ItemArray[ EnvanterData[playerid][i_tip][slot] - 1 ][iid];
		var = EnvanterData[playerid][i_var][slot];
		GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		GetXYInFrontOfPlayer(playerid, pos[0], pos[1], 0.75);
		BirakilanItemler[id][itemobje] = CreateDynamicObject(obje,pos[0],pos[1],(pos[2] - 0.94),0.0,0.0,0.0,GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid), -1,50.0);
		BirakilanItemler[id][itemid] = id;
		BirakilanItemler[id][iX] = pos[0];
		BirakilanItemler[id][iY] = pos[1];
		BirakilanItemler[id][iZ] = pos[2] - 0.94;
		BirakilanItemler[id][itemvw] = GetPlayerVirtualWorld(playerid);
		BirakilanItemler[id][itemint] = GetPlayerInterior(playerid);
		BirakilanItemler[id][itemtip] = tip;
		BirakilanItemler[id][itemmiktar] = var;

		ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 1, 1, 0, 0, 1);

		format(me, sizeof(me), "** %s yere doðru eðilir ve %s adlý eþyasýný býrakýr.", OyuncuIsim(playerid), ItemArray[ EnvanterData[playerid][i_tip][slot] - 1 ][iisim]);
		SetPlayerChatBubble(playerid, me, RENK_PEMBE, 12.0, 10000);
		SendClientMessage(playerid, RENK_PEMBE, me);
		strins(me, "> ", 3);

		mysql_format(g_SQL, query, sizeof(query), "INSERT INTO `yeritemleri` (`id`, `x`, `y`, `z`, `vw`, `interior`, `tip`, `miktar`, `obje`) VALUES('%d', '%f', '%f', '%f', '%d', '%d', '%d', '%d', '%d')", id, BirakilanItemler[id][iX], BirakilanItemler[id][iY], BirakilanItemler[id][iZ], BirakilanItemler[id][itemvw], BirakilanItemler[id][itemint],
			BirakilanItemler[id][itemtip],BirakilanItemler[id][itemmiktar], obje);
		mysql_query(g_SQL, query);
		format(string, sizeof(string), "EÞYA: %s\n'/esyaal'", ItemArray[ EnvanterData[playerid][i_tip][slot] - 1 ][iisim]);
		BirakilanItemler[id][txt3D] = CreateDynamic3DTextLabel(string, RENK_OZELKIRMIZI, pos[0], pos[1], (pos[2] - 0.50), 1.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid));
		ItemSil(playerid, slot);
		Iter_Add(Itemler, id);
		return 1;
	}

	stock FadeScreen(playerid, r, g, b, a, time) {
		PlayerTextDrawBoxColor(playerid, TD_Fader, CreateColor(r, g, b, a));
		PlayerTextDrawShow(playerid, TD_Fader);
		fadeTimerVar[playerid] = SetTimerEx("fadeTimer", time, 0, "i", playerid);
	}

	stock CreateColor(r, g, b, a) {
		return ((((r) & 0xFF) << 24) | (((g) & 0xFF) << 16) | (((b) & 0xFF) << 8) | (((a) & 0xFF) << 0));
	}

	forward fadeTimer(playerid);
	public fadeTimer(playerid) {
		PlayerTextDrawHide(playerid, TD_Fader);
		CallLocalFunction("OnFadeComplete", "i", playerid);
	}

	stock SetPlayerPosEx(playerid, fadeID, Float:X, Float:Y, Float:Z, Float:A = 0.0, interior = 0, vw = 0, unfreeze = 1)
	{
		fade[playerid][fID] = fadeID;
		fade[playerid][fadeX] = X;
		fade[playerid][fadeY] = Y;
		fade[playerid][fadeZ] = Z;
		fade[playerid][fdAngle] = A;
		fade[playerid][fInt] = interior;
		fade[playerid][fVW] = vw;
		fade[playerid][fUnfreeze] = unfreeze;
		FreezePlayer(playerid);
		FadeScreen(playerid, 0, 0, 0, 255, 250);
	}

	stock FreezePlayer(playerid) {
		TogglePlayerControllable(playerid, 0);
		SetPVarInt(playerid, "Frozen", 1);
	}

	stock UnfreezePlayer(playerid) {
		TogglePlayerControllable(playerid, 1);
		SetPVarInt(playerid, "Frozen", 0);
	}

	stock MobilyaTur(ac)
	{
		new acname[128];
		switch(ac)
		{
			case 0:{acname="koltuklar";}
			case 1:{acname="mutfak";}
			case 2:{acname="elektronik";}
			case 3:{acname="yataklar";}
			case 4:{acname="kapilar";}
			case 5:{acname="duvarlar";}
			case 6:{acname="lambalar";}
			case 7:{acname="dekoratif";}
			case 8:{acname="masalar";}
			case 9:{acname="ofis";}
			case 10:{acname="banyo";}
		}
		return acname;
	}

	stock MobilyaSinir(sinir)
	{
		new sinirid;
		switch(sinir)
		{
			case 0:{sinirid=50;}
			case 1:{sinirid=66;}
			case 2:{sinirid=92;}
			case 3:{sinirid=13;}
			case 4:{sinirid=29;}
			case 5:{sinirid=114;}
			case 6:{sinirid=33;}
			case 7:{sinirid=520;}
			case 8:{sinirid=30;}
			case 9:{sinirid=1;}
			case 10:{sinirid=16;}
		}
		return sinirid;
	}

	stock SilahObjeModelleri(silahid)
	{
		new objid = 0;
		switch(silahid)
		{
			case 1: 		objid = 331;
			case 2..8: 		objid = silahid + 331;
			case 9: 		objid = 341;
			case 10..15: 	objid = silahid + 311;
			case 16..18: 	objid = silahid + 326;
			case 22..29: 	objid = silahid + 324;
			case 30,31: 	objid = silahid + 325;
			case 32:		objid = 372;
			case 33..45: 	objid = silahid + 324;
			case 46: 		objid = 371;
		}
		return objid;
	}

	stock TelsizMesajiGonder(playerid, Float:radius, string[], col1, col2, col3, col4, col5)
	{
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		new Float:ix, Float:iy, Float:iz;
		new Float:cx, Float:cy, Float:cz;
		foreach(new i : Player)
		{
			if(GetPlayerInterior(playerid) == GetPlayerInterior(i) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i))
			{
				if(i == playerid) continue;
				GetPlayerPos(i, ix, iy, iz);
				cx = (x - ix);
				cy = (y - iy);
				cz = (z - iz);

				if(((cx < radius/16) && (cx > -radius/16)) && ((cy < radius/16) && (cy > -radius/16)) && ((cz < radius/16) && (cz > -radius/16)))
				{
					SendClientMessage(i, col1, string);
				}
				else if(((cx < radius/8) && (cx > -radius/8)) && ((cy < radius/8) && (cy > -radius/8)) && ((cz < radius/8) && (cz > -radius/8)))
				{
					SendClientMessage(i, col2, string);
				}
				else if(((cx < radius/4) && (cx > -radius/4)) && ((cy < radius/4) && (cy > -radius/4)) && ((cz < radius/4) && (cz > -radius/4)))
				{
					SendClientMessage(i, col3, string);
				}
				else if(((cx < radius/2) && (cx > -radius/2)) && ((cy < radius/2) && (cy > -radius/2)) && ((cz < radius/2) && (cz > -radius/2)))
				{
					SendClientMessage(i, col4, string);
				}
				else if(((cx < radius) && (cx > -radius)) && ((cy < radius) && (cy > -radius)) && ((cz < radius) && (cz > -radius)))
				{
					SendClientMessage(i, col5, string);
				}
			}
		}
		return 1;
	}

	stock BasHarfler(const yazi[])
	{
		new cikti[60], hazirla = 0;
		for (new i = 0, l = strlen(yazi); i != l; i ++){
			if (('A' <= yazi[i] <= 'Z') && (i == 0 || yazi[i - 1] == ' '))
				cikti[hazirla++] = yazi[i];
		}
		return cikti;
	}

	stock BirlikCek(playerid)
	{
		new birlik = oyuncuData[playerid][oBirlik], ad[128] = "-";
		if(birlik == -1) return ad;
		format(ad,sizeof(ad), "%s", BirlikBilgi[birlik][birlikAd]);
		return ad;
	}

	stock convertDate(timestamp, _form = 0)
	{
		new year=1970, day=0, month=0, hour=0, mins=0, sec=0;

		new days_of_month[12] = { 31,28,31,30,31,30,31,31,30,31,30,31 };
		new names_of_month[12][10] = {"Ocak","Subat","Mart","Nisan","Mayis","Haziran","Temmuz","Agustos","Eylul","Ekim","Kasim","Aralik"};
		new returnstring[36];

		while(timestamp>31622400){
			timestamp -= 31536000;
			if ( ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0) ) timestamp -= 86400;
			year++;
		}

		if ( ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0) )
			days_of_month[1] = 29;
		else
			days_of_month[1] = 28;


		while(timestamp>86400){
			timestamp -= 86400, day++;
			if(day==days_of_month[month]) day=0, month++;
		}

		while(timestamp>60){
			timestamp -= 60, mins++;
			if( mins == 60) mins=0, hour++;
		}

		sec=timestamp;
		new zamanfix;
		zamanfix = hour + 3;
		if(zamanfix >= 24)
		{
			zamanfix = 0;
		}
		switch( _form ){
			case 1: format(returnstring, 31, "%02d/%02d/%d %02d:%02d:%02d", day+1, month+1, year, zamanfix, mins, sec);
			case 2: format(returnstring, 31, "%s %02d, %d, %02d:%02d:%02d", names_of_month[month],day+1,year, zamanfix, mins, sec);
			case 3: format(returnstring, 31, "%d %c%c%c %d, %02d:%02d", day+1,names_of_month[month][0],names_of_month[month][1],names_of_month[month][2], year,zamanfix,mins);
			case 4: format(returnstring, 31, "%02d.%02d.%d", day+1, month+1, year);
			default: format(returnstring, 31, "%02d.%02d.%d - %02d:%02d:%02d", day+1, month+1, year, zamanfix, mins, sec);
		}

		return returnstring;
	}

	stock AktoreYakinmi(playerid)
	{
		for(new i ; i < MAX_AKTOR; i++)if(npcData[i][npcKullanim])
		{
			if(IsPlayerInRangeOfPoint(playerid, 2.0, npcData[i][npcPos][0], npcData[i][npcPos][1], npcData[i][npcPos][2])) return i;
		}
		return -1;
	}

	stock HileKontrol_Silah(playerid)
	{
		new silah[13], mermi[13];
		for (new i; i < 13; i ++)
		{
			GetPlayerWeaponData(playerid, i, silah[i], mermi[i]);
			if(silah[i] != 0)
			{
				if(oyuncuData[playerid][oSeviye] < 3)
				{
					SilahSilEx(playerid, silah[i]);
					Log_Kaydet("loglar/silahkisitla.txt", "[%s] %s seviye 3 olmadan silah aldi. Silah: %d - Mermi: %d", Tarih(), OyuncuIsim(playerid, 1), silah[i], mermi[i]);
				}
			}
		}
		return 1;
	}

	stock KameraTak(aracid)
	{
		DestroyDynamicObject(HelikopterKamera[aracid]);
		HelikopterKamera[aracid] = INVALID_OBJECT_ID;
		switch(GetVehicleModel(aracid))
		{
			case 497:
			{

				HelikopterKamera[aracid] = CreateDynamicObject(3785, 0.0, 0.0, -1000.0, 0.0, 0.0, 0.0); //CreateObject(3785,0.0,0.0,-1000.0,0.0,0.0,0.0);
				SetDynamicObjectMaterial(HelikopterKamera[aracid], 0, 11150, "ab_acc_control", "ab_BoltPanel2", 0);
				AttachDynamicObjectToVehicle(HelikopterKamera[aracid], aracid, 0.000, 2.374, -0.665, 0.000, 89.100, 90.000);

			}
		}
		return 1;
	}

	stock SilahlariVer(playerid)
	{
		ResetPlayerWeapons(playerid);

		for (new i = 0; i < 13; i ++) if (oyuncuData[playerid][oSilah][i] > 0 && oyuncuData[playerid][oMermi][i] > 0) {
			GivePlayerWeapon(playerid, oyuncuData[playerid][oSilah][i], oyuncuData[playerid][oMermi][i]);
		}
		return 1;
	}

	stock SilahDataCek(model)
	{
		new id = -1;
		for(new i = 0; i < sizeof(silahTCData); i++)
		{
			if(silahTCData[i][slhModelID] == model)
			{
				id = i;
				break;
			}
		}
		return id;
	}

	stock MermiDataCek(model)
	{
		new id = -1;
		for(new i = 0; i < sizeof(mermiTCData); i++)
		{
			if(mermiTCData[i][slhModelID] == model)
			{
				id = i;
				break;
			}
		}
		return id;
	}

	stock MermiVer(playerid, silahid, mermi)
	{
		new query[256 * 2];
		oyuncuData[playerid][oMermi][SilahSlotBul[silahid]] += mermi;
		mysql_format(g_SQL, query, sizeof(query), "UPDATE `oyuncular` SET `Mermi%d` = '%d' WHERE `ID` = '%d' LIMIT 1", SilahSlotBul[silahid], oyuncuData[playerid][oMermi][SilahSlotBul[silahid]], oyuncuData[playerid][oID]);
		mysql_tquery(g_SQL, query);
		return 1;
	}

	stock MermiTuccarMenu(playerid)
	{
		new str[512];
		strcat(str, "{FFFFFF}Silah Modeli\t{FFFFFF}Þarjor Detayý\t{FFFFFF}#\n");
		for(new i;i<sizeof(mermiTCData);i++)
		{
			format(str, sizeof(str), "%s{FFFFFF}%s\t{BFE2F0}1 %s %d mermi\t{337830}[%s]\n", str, mermiTCData[i][slhIsim], mermiTCData[i][slhSarjorTuru], mermiTCData[i][slhSarjor], NumaraFormati(mermiTCData[i][slhSarjorFiyat]));
		}
		ShowPlayerDialog(playerid, AKTOR_MERMICI, DIALOG_STYLE_TABLIST_HEADERS, "{BAAF2C}Tommy Guy:{FFFFFF} Anlat bakalým, neyin eksik?", str, "Satýn Al", "Kapat");
		return 1;
	}

	stock SilahTuccariSiparis(playerid, model)
	{
		new dataid = SilahDataCek(model);
		if(dataid != -1)
		{
			if(gettime() < oyuncuData[playerid][oSiparis][1])
			{
				new str[512];
				strcat(str, "{FFFFFF}Silah Modeli\t{FFFFFF}Ulaþma Zamaný\t{FFFFFF}Sipariþ Durumu\n");
				format(str, sizeof(str), "%s{FFFFFF}%s\t{FFFFFF}%s\t{9C5814}Birleþtirmede\n", str, silahTCData[dataid][slhIsim], convertDate(oyuncuData[playerid][oSiparis][1]), oyuncuData[playerid][oSiparis][1] / 60);
				ShowPlayerDialog(playerid, BOS_MESAJ, DIALOG_STYLE_TABLIST_HEADERS, "{BAAF2C}CPT. Vice:{FFFFFF} Erken geldin!", str, "Kapat", "");
			}
			else
			{
				new str[512];
				strcat(str, "{FFFFFF}Silah Modeli\t{FFFFFF}Sipariþ Durumu\t{FFFFFF}Model Ücreti\n");
				format(str, sizeof(str), "%s{FFFFFF}%s\t{FFFFFF}Hazýr\t{337830}[%s]\n", str, silahTCData[dataid][slhIsim], NumaraFormati(silahTCData[dataid][slhFiyat]));

				ShowPlayerDialog(playerid, AKTOR_SILAHCI_Y, DIALOG_STYLE_TABLIST_HEADERS, "{BAAF2C}CPT. Vice:{FFFFFF} Sipariþin elime ulaþtý.", str, "Öde", "Kapat");
			}
		}
		else hataMesaji(playerid, "Silah modeli, dize hatasý oluþtu.");
		return 1;
	}

	stock AktorMenusu(playerid, tur = -1)
	{
		new str[256 * 2];
		switch(tur)
		{
			case 0: BilgiText(playerid, "~r~~h~Bu aktorun islevi yok.");
			case 1:
			{
				if(CPTViceVIPOnay == true)
				{
					if(oyuncuData[playerid][oVIP] < 1) return hataMesaji(playerid, "CPT. Vice þu anda yalnýzca VIP üyelerin eriþimine açýktýr.");
				}
				if(GetPlayerScore(playerid) < 5) return hataMesaji(playerid, "Bu ustayla etkileþime geçebilmek için 5. seviye olmalýsýnýz.");
				strcat(str, "{FFFFFF}Silah Modeli\t{FFFFFF}Teslim Süresi\t{FFFFFF}Model Ücreti\n");
				for(new i;i<sizeof(silahTCData);i++)
				{
					format(str, sizeof(str), "%s{FFFFFF}%s\t{BFE2F0}%d saat\t{337830}[%s]\n", str, silahTCData[i][slhIsim], silahTCData[i][slhSaat], NumaraFormati(silahTCData[i][slhFiyat]));
				}
				format(str, sizeof(str), "%s \n{55A0CE}»{FFFFFF} Sipariþ Kontrolü", str);
				ShowPlayerDialog(playerid, AKTOR_SILAHCI, DIALOG_STYLE_TABLIST_HEADERS, "{E41E01}CPT. Vice: {FFFFFF}Hey, oyuncak almaya ne dersin? Iþte sana liste!", str, "Sipariþ Ver", "Kapat");
			}
			case 2:
			{
				MermiTuccarMenu(playerid);
			}
			default: BilgiText(playerid, "~r~~h~Aktor hatasi meydana geldi.");
		}
		return 1;
	}


	stock cmd(playerid, durum, sz_komut[])
	{
		new str[1024];
		switch(durum)
		{
			case 0:
			{
				format(str, sizeof(str), "/%s", sz_komut);
				PC_EmulateCommand(playerid, str);
			}
			case 1:
			{
				format(str, sizeof(str), "%s %s", OyuncuIsim(playerid), sz_komut);
				OzelYakinMesaj(playerid, 12.0, RENK_PEMBE, str);
			}
			case 2:
			{
				format(str, sizeof(str), "%s (( %s ))", sz_komut, OyuncuIsim(playerid));
				OzelYakinMesaj(playerid, 12.0, RENK_DO, str);
			}
		}
 	//sz_komut[0] = "";
		return 1;
	}

	stock AracSpawnOlmusMu(vehicleid) {
		if(GetVehicleModel(vehicleid) > 0) {
			return 1;
		}

		return 0;
	}

	stock EsyaBul(playerid)
	{
		foreach(new i : Itemler)
		{
			if(IsPlayerInRangeOfPoint(playerid, 2.0, BirakilanItemler[i][iX], BirakilanItemler[i][iY], BirakilanItemler[i][iZ]))
			{
				if(BirakilanItemler[i][itemvw] == GetPlayerVirtualWorld(playerid) && BirakilanItemler[i][itemint] == GetPlayerInterior(playerid))
				{
					return i;
				}
			}
		}
		return -1;
	}

	stock GiseBul(playerid)
	{
		foreach(new i : Giseler)
		{
			if(IsPlayerInRangeOfPoint(playerid, 6.2, giseData[i][gisePos][0], giseData[i][gisePos][1], giseData[i][gisePos][2])) return i;
		}
		return -1;
	}

	forward AnaTimer();
	public AnaTimer()
	{
		foreach(new i : Player) { C_Paused(i); }
		Otel_SureAzalt();
		foreach(new i : Player)
		{
			SetPlayerTime(i, SunucuZaman, 0);
			DestekGuncelle(i);
			OyuncuSaniyeTimer(i);
			vc_DakikaTimer(i);//deðiþken 60'ta bir
		}
		foreach(new aracid : Araclar) if(IsValidVehicle(aracid))
		{
			MotorKontrol(aracid);
		}

		new saat, dakika, saniye, saatbasi = 0;
		gettime(saat, dakika, saniye);
		if(saat == 6 && dakika == 0 && saniye <= 5){SunucuZaman = 6,saatbasi++;}
		else if(saat == 9 && dakika == 0 && saniye <= 5){SunucuZaman = 10,saatbasi++;}
		else if(saat == 13 && dakika == 0 && saniye <= 5){SunucuZaman = 14,saatbasi++;}
		else if(saat == 15 && dakika == 0 && saniye <= 5){SunucuZaman = 16,saatbasi++;}
		else if(saat == 18 && dakika == 0 && saniye <= 5){SunucuZaman = 18,saatbasi++;}
		else if(saat == 20 && dakika == 0 && saniye <= 5){SunucuZaman = 21,saatbasi++;}
		else if(saat == 22 && dakika == 0 && saniye <= 5){SunucuZaman = 1,saatbasi++;}

		new x_saat, x_dakika, x_saniye;
		gettime(x_saat, x_dakika, x_saniye);
		if(x_dakika == 0 && x_saniye == 0)
		{
			HorseCD = 3;
			HorseStop = 0;
			HorseAnimCount = 1;
			foreach(new i : Player)
		 	{
				PlayerPlaySound(i, 5410, 822.3584,4.0746,1004.1797);
			}
			BG2 = TextDrawCreate(0, 0, "LD_OTB:bckgrnd");
		    TextDrawFont(BG2, 4);
		    TextDrawColor(BG2,0xFFFFFFFF);
		    TextDrawTextSize(BG2,640,200);

		 	BG1 = TextDrawCreate(0, 0, "LD_OTB:trees");
		    TextDrawFont(BG1, 4);
		    TextDrawColor(BG1,0xFFFFFFFF);
		    TextDrawTextSize(BG1,640,480);

		   	Start2 = TextDrawCreate(-170, 145, "LD_OTB:pole2");
		    TextDrawFont(Start2, 4);
		    TextDrawColor(Start2,0xFFFFFFFF);
		    TextDrawTextSize(Start2,256,200);

		   	Finish2 = TextDrawCreate(365, 145, "LD_OTB:pole2");
		    TextDrawFont(Finish2, 4);
		    TextDrawColor(Finish2,0xFFFFFFFF);
		    TextDrawTextSize(Finish2,256,200);

		    Horse1 = TextDrawCreate(0, 200, "LD_OTB:hrs8");
			HorseInfo(Horse1);
			HorsePosX1 = 0;

		    Horse2 = TextDrawCreate(0, 250, "LD_OTB:hrs8");
			HorseInfo(Horse2);
			HorsePosX2 = 0;

		    Horse3 = TextDrawCreate(0, 300, "LD_OTB:hrs8");
			HorseInfo(Horse3);
			HorsePosX3 = 0;

		    Horse4 = TextDrawCreate(0, 350, "LD_OTB:hrs8");
			HorseInfo(Horse4);
		    HorsePosX4 = 0;

		    HorseNum1 = TextDrawCreate(15, 204, "LD_OTB2:Ric1");
		    HorseNumInfo(HorseNum1);

		    HorseNum2 = TextDrawCreate(15, 254, "LD_OTB2:Ric2");
		    HorseNumInfo(HorseNum2);

		    HorseNum3 = TextDrawCreate(15, 304, "LD_OTB2:Ric3");
		    HorseNumInfo(HorseNum3);

		    HorseNum4 = TextDrawCreate(15, 354, "LD_OTB2:Ric4");
		    HorseNumInfo(HorseNum4);

		   	Start = TextDrawCreate(-170, 338, "LD_OTB:pole2");
		    TextDrawFont(Start, 4);
		    TextDrawColor(Start,0xFFFFFFFF);
		    TextDrawTextSize(Start,256,200);

		   	Finish = TextDrawCreate(365, 338, "LD_OTB:pole2");
		    TextDrawFont(Finish, 4);
		    TextDrawColor(Finish,0xFFFFFFFF);
		    TextDrawTextSize(Finish,256,200);

			CDTextDraw = TextDrawCreate(310,235,"3");
			TextDrawAlignment(CDTextDraw,0);
			TextDrawBackgroundColor(CDTextDraw,0x000000ff);
			TextDrawFont(CDTextDraw,2);
			TextDrawLetterSize(CDTextDraw,0.5,2);
			TextDrawColor(CDTextDraw,0x00ff0099);
			TextDrawSetOutline(CDTextDraw,1);
			TextDrawSetProportional(CDTextDraw,1);
			TextDrawSetShadow(CDTextDraw,1);
			Prepared = 0;
			RaceStarted = 1;
			SetTimer("HorseStartTimer", 2000, 0);
		}
		if(RespawnTimer == true)
		{
			if(RespawnDeger < 1)
			{
				RespawnTimer = false;
				RespawnDeger = 0;
				AracRespawn();
				foreach(new i : Player)
				{
					SunucuMesaji(i, "Kullanýlmayan baþý-boþ araçlarýn tümü respawnlandý.");
				}
			}
			else RespawnDeger--;
		}

		foreach(new i : Giseler)
		{
			if(giseData[i][giseSure] != 0)
			{
				SetDynamicObjectRot(giseData[i][giseObje], giseData[i][gisePos][3], giseData[i][gisePos][4] - 70, giseData[i][gisePos][5]);
				giseData[i][giseSure]--;
			}
			else SetDynamicObjectRot(giseData[i][giseObje], giseData[i][gisePos][3], giseData[i][gisePos][4], giseData[i][gisePos][5]);
		}
		KilometreBenzin();
		return 1;
	}

	function SurukleUp(playerid, userid)
	{
		if(oyuncuData[userid][pSurukle] && oyuncuData[userid][pSurukleyen] == playerid)
		{
			GameTextForPlayer(userid, "~r~~h~~h~Surukleniyorsunuz.", 180, 3);
			static Float:fX, Float:fY, Float:fZ, Float:fAngle;
			GetPlayerPos(playerid, fX, fY, fZ); GetPlayerFacingAngle(playerid, fAngle);
			fX -= 1.0 * floatsin(-fAngle, degrees); fY -= 1.0 * floatcos(-fAngle, degrees);
			SetPlayerPos(userid, fX, fY, fZ); SetPlayerInterior(userid, GetPlayerInterior(playerid));
			SetPlayerVirtualWorld(userid, GetPlayerVirtualWorld(playerid));
		}
		return 1;
	}

	function Float:GetPlayerDistanceFromPlayer(playerid, userid)
	{
		new Float:fDist[3];
		GetPlayerPos(playerid, fDist[0], fDist[1], fDist[2]);
		return GetPlayerDistanceFromPoint(userid, fDist[0], fDist[1], fDist[2]);
	}

	function Firma_Yukle()
	{
		static rows, fields, mesaj[128], labelString[128];

		cache_get_row_count(rows);
		cache_get_field_count(fields);

		for (new i = 0; i < rows; i ++) if(i < MAX_FIRMA)
		{
			FirmaInfo[i][fID] = vericek_int(i, "id");
			format(FirmaInfo[i][fIsim], 40, "%s", vericek_varchar(i, "isim"));
			FirmaInfo[i][fKasa] = vericek_int(i, "kasa");
			FirmaInfo[i][fAlan] = vericek_int(i, "alan");
			FirmaInfo[i][fLiderrutbe] = vericek_int(i, "liderrutbe");
			FirmaInfo[i][fiVw] = vericek_int(i, "vw");
			FirmaInfo[i][fiInt] = vericek_int(i, "interior");
			FirmaInfo[i][fiX] = vericek_float(i, "x");
			FirmaInfo[i][fiY] = vericek_float(i, "y");
			FirmaInfo[i][fiZ] = vericek_float(i, "z");
			format(FirmaInfo[i][fNot], 200, "%s", vericek_varchar(i, "not"));
			FirmaInfo[i][fMaas] = vericek_int(i, "maas");
			FirmaInfo[i][fAlimlar] = vericek_int(i, "alimdurum");
			FirmaInfo[i][fPickupb] = CreateDynamicPickup(1210, 23, FirmaInfo[i][fiX], FirmaInfo[i][fiY], FirmaInfo[i][fiZ],FirmaInfo[i][fiVw],FirmaInfo[i][fiInt]);
			format(labelString, sizeof(labelString), "[{F5E600}%s{FFFFFF}]\nFirma menüsüne eriþmek için {F5E600}'/fmenu'{FFFFFF}", FirmaInfo[i][fIsim]);
			FirmaInfo[i][fLabelb] = CreateDynamic3DTextLabel(labelString, -1, FirmaInfo[i][fiX], FirmaInfo[i][fiY], FirmaInfo[i][fiZ] + 0.8, 3, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, FirmaInfo[i][fiVw],FirmaInfo[i][fiInt]);
			Iter_Add(Firma, FirmaInfo[i][fID]);
			FirmaInfo[i][fKameraman] = -1;
			if(FirmaInfo[i][fAlan] == 2) FirmaInfo[i][fKontrat][0] = 1, FirmaInfo[i][fKontrat][1] = 1;
		}
		if(rows < 1) format(mesaj, sizeof(mesaj), "[SUNUCU] Veritabanýnda sunucuya entegre edilecek firma bulunamadý!");
		else if(rows > 0) format(mesaj, sizeof(mesaj), "[SUNUCU] %d adet firma id %d firma yüklendi.", rows), mysql_tquery(g_SQL, "SELECT * FROM `firmarutbeleri`", "Firmarutbe_Yukle", "");
		printf(mesaj);
		return 1;
	}

	function Firmarutbe_Yukle()
	{
		new rows,
		fields,
		id,
		rutbe,
		mesaj[128],
		sonuc[30],
		skin,
		a;

		cache_get_row_count(rows);
		cache_get_field_count(fields);
		for(new i = 0; i != rows; i++) {
			cache_get_value_name_int(i, "id", id);
			cache_get_value_name(i, "isim", sonuc);
			cache_get_value_name_int(i, "rutbe", rutbe);
			cache_get_value_name_int(i, "skin", skin);

			for(a = 0; a != MAX_FIRMA; a++) {
				if(FirmaInfo[a][fID] == id) {
					format(FirmaRutbe[a][rutbe], 30, "%s", sonuc);
					FirmaSkin[a][rutbe] = skin;
					break;
				}
			}
		}

		if(rows < 1) format(mesaj, sizeof(mesaj), "[SUNUCU] Veritabanýnda sunucuya entegre edilecek firma rütbesi bulunamadý!");
		else if(rows > 0) format(mesaj, sizeof(mesaj), "[SUNUCU] %d adet firma rütbesi yüklendi.", rows);
		printf(mesaj);
		return 1;
	}


	/*function Karavan_Yukle()
	{
		static rows, fields, mesaj[128];

		cache_get_row_count(rows);
		cache_get_field_count(fields);

		for (new i = 0; i < rows; i ++) if(i < MAX_KARAVAN)
		{
			KaravanInfo[i][kID] = vericek_int(i, "id");
			KaravanInfo[i][kX] = vericek_float(i, "x");
			KaravanInfo[i][kY] = vericek_float(i, "y");
			KaravanInfo[i][kZ] = vericek_float(i, "z");
			KaravanInfo[i][krX] = vericek_float(i, "rx");
			KaravanInfo[i][krY] = vericek_float(i, "ry");
			KaravanInfo[i][krZ] = vericek_float(i, "rz");
			format(KaravanInfo[i][kSahip], 64, "%s", vericek_varchar(i, "sahip"));
			KaravanInfo[i][kKasa] = vericek_int(i, "kasa");
			KaravanInfo[i][kAktif] = 1;
			KaravanInfo[i][kBaglandi] = 0;
			KaravanInfo[i][kKapidurum] = 0;
			KaravanInfo[i][kObje] = CreateDynamicObject(-2007, KaravanInfo[i][kX],KaravanInfo[i][kY],KaravanInfo[i][kZ] - 0.4, 0.0, 0.0, KaravanInfo[i][krZ]);//CreateObject(-2007, KaravanInfo[i][kX],KaravanInfo[i][kY],KaravanInfo[i][kZ] - 0.4,0.0,0.0,KaravanInfo[i][krZ],200);
			KaravanInfo[i][kKapi] = CreateDynamicObject(-2008, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0); //CreateObject(-2008, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
			AttachDynamicObjectToObject(KaravanInfo[i][kKapi], KaravanInfo[i][kObje], 1.637408, 0.916593, 0.915793, 0.0, 0.0, 0.0);
		}
		if(rows < 1) format(mesaj, sizeof(mesaj), "[SUNUCU] Veritabanýnda sunucuya entegre edilecek karavan bulunamadý!");
		else if(rows > 0) format(mesaj, sizeof(mesaj), "[SUNUCU] %d adet karavan yüklendi.", rows);
		printf(mesaj);
		return 1;
	} */

	function Giseleri_Yukle()
	{
		new rows, mesaj[256];
		cache_get_row_count(rows);
		if(rows)
		{
			new id, yukle, ssw[512];
			while(yukle < rows)
			{
				cache_get_value_name_int(yukle, "id", id);
				cache_get_value_name_int(yukle, "Ucret", giseData[id][giseUcret]);
				cache_get_value_name(yukle, "Pozisyon", ssw, sizeof(ssw));
				sscanf(ssw, "p<|>ffffff", giseData[id][gisePos][0], giseData[id][gisePos][1], giseData[id][gisePos][2], giseData[id][gisePos][3], giseData[id][gisePos][4], giseData[id][gisePos][5]);

				new str[256], zone[MAX_ZONE_NAME];
				Get3DZone(tamirciData[id][tamirPos][0], tamirciData[id][tamirPos][1], tamirciData[id][tamirPos][2], zone, sizeof(zone));
				format(str, sizeof(str), "{CDCDCD}[{F5E600}Giþe - %s #%d{CDCDCD}]\n{DDDDDD}Geçiþ ücreti {F5E600}%s{DDDDDD}, geçmek için {F5E600}/gise{DDDDDD} komutunu kullanýn.", zone, id, NumaraFormati(giseData[id][giseUcret]));

				giseData[id][giseLabel] = CreateDynamic3DTextLabel(str, 0xE22121FF,giseData[id][gisePos][0], giseData[id][gisePos][1], giseData[id][gisePos][2], 8.0);
				giseData[id][giseObje] = CreateDynamicObject(968, giseData[id][gisePos][0], giseData[id][gisePos][1],\
					giseData[id][gisePos][2], giseData[id][gisePos][3],giseData[id][gisePos][4],giseData[id][gisePos][5],-1,-1);
				Iter_Add(Giseler, id);
				yukle++;
			}
		}
		if(rows < 1) format(mesaj, sizeof(mesaj), "[SUNUCU] Veritabanýnda sunucuya entegre edilecek giþe bulunamadý!");
		else if(rows > 0) format(mesaj, sizeof(mesaj), "[SUNUCU] %d adet giþe yüklendi.", rows);
		printf(mesaj);
		return 1;
	}

	stock GiseSil(id)
	{
		new query[256];
		mysql_format(g_SQL, query, sizeof(query), "DELETE FROM `giseler` WHERE `id` = '%d'",id);
		mysql_tquery(g_SQL, query);

		DestroyDynamicObject(giseData[id][giseObje]);
		if(IsValidDynamic3DTextLabel(giseData[id][giseLabel])) DestroyDynamic3DTextLabel(giseData[id][giseLabel]);
		giseData[id][giseUcret] = 0;
		giseData[id][giseSure] = 0;

		for(new i ; i < 5; i ++) giseData[id][gisePos][i] = 0.0;
			Iter_Remove(Giseler, id);
		return 1;
	}

	stock GiseOlustur(playerid, id)
	{
		oyuncuData[playerid][pGiseOlustur] = true;SetPVarInt(playerid, "giseDuzenleID", id);
		GetPlayerPos(playerid, giseData[id][gisePos][0], giseData[id][gisePos][1], giseData[id][gisePos][2]);
		giseData[id][gisePos][4] = 90;
		giseData[id][giseObje] = CreateDynamicObject(968, giseData[id][gisePos][0], giseData[id][gisePos][1],\
			giseData[id][gisePos][2], giseData[id][gisePos][3],giseData[id][gisePos][4],giseData[id][gisePos][5],-1,-1);
		EditDynamicObject(playerid, giseData[id][giseObje]);
		return 1;
	}

	stock OyuncuHiziniCek(playerid, bool:mph = true)
	{
		new
		Float:xx,
		Float:yy,
		Float:zz,
		Float:pSpeed;

		if(IsPlayerInAnyVehicle(playerid))
		{
			GetVehicleVelocity(GetPlayerVehicleID(playerid),xx,yy,zz);
		}
		else
		{
			GetPlayerVelocity(playerid,xx,yy,zz);
		}

		pSpeed = floatsqroot((xx * xx) + (yy * yy) + (zz * zz));
		return mph ? floatround((pSpeed * 165.12)) : floatround((pSpeed * 103.9));
	}

	stock AracinLimitiniCek(vehicleid, get3d)
	{
		new Float:x, Float:y, Float:z;
		GetVehicleVelocity(vehicleid, x, y, z);
		return HizKontrol(x, y, z, 100.0, get3d);
	}

	stock AracHiziDegistir(vehicleid,mph)
	{
		new Float:Vx,Float:Vy,Float:Vz,Float:DV,Float:multiple;
		GetVehicleVelocity(vehicleid,Vx,Vy,Vz);
		DV = floatsqroot(Vx*Vx + Vy*Vy + Vz*Vz);
		if(DV > 0)
		{
			multiple = ((mph + DV * 100) / (DV * 100));
			return SetVehicleVelocity(vehicleid,Vx*multiple,Vy*multiple,Vz*multiple);
		}
		return 0;
	}

	stock TamirhaneBul(playerid)
	{
		foreach(new t: Tamirciler)
		{
			if(IsPlayerInRangeOfPoint(playerid, 2.0, tamirciData[t][tamirPos][0], tamirciData[t][tamirPos][1], tamirciData[t][tamirPos][2])) return t;
		}
		return -1;
	}

	stock GarajBul(playerid)
	{
		foreach(new i : Garajlar)
		{
			if(IsPlayerInRangeOfPoint(playerid, 3.0, GarajInfo[i][gX], GarajInfo[i][gY], GarajInfo[i][gZ])) return i;
		}
		return -1;
	}

	function ModifiyeKaydet(playerid, aracid)
	{
		new query[128];
		for(new i = 0; i < 14; i++)
		{
			mysql_format(g_SQL, query, sizeof(query), "UPDATE `araclar` SET `Parca_%d` = '%d' WHERE `aracID` = '%d' LIMIT 1", i, AracBilgi[aracid][aracParca][i], AracBilgi[aracid][aracID]);
			mysql_query(g_SQL, query);
		}
		return 1;
	}

	function ParcaKontrol(playerid, aracid, parca)
	{
		new bool:izin = true;
		for(new xxx = 0; xxx < 14; xxx++)
		{
			if(AracBilgi[aracid][aracParca][xxx] == parca)
			{
				izin = false;
			}
		}
		return izin;
	}

	function SaveComponent(playerid, vehicleid, componentid)
	{
		if( GetVehicleComponentType( componentid ) == CARMODTYPE_SPOILER ) {
			AracBilgi[vehicleid][aracParca][0] = componentid;
			if( AracBilgi[vehicleid][aracParca][0] != 0 ) AddVehicleComponent( vehicleid, componentid );
		}
		else if( GetVehicleComponentType( componentid ) == CARMODTYPE_HOOD ) {
			AracBilgi[vehicleid][aracParca][1] = componentid;
			if( AracBilgi[vehicleid][aracParca][1] != 0 ) AddVehicleComponent( vehicleid, componentid );
		}
		else if( GetVehicleComponentType( componentid ) == CARMODTYPE_ROOF ) {
			AracBilgi[vehicleid][aracParca][2] = componentid;
			if( AracBilgi[vehicleid][aracParca][2] != 0 ) AddVehicleComponent( vehicleid, componentid );
		}
		else if( GetVehicleComponentType( componentid ) == CARMODTYPE_SIDESKIRT ) {
			AracBilgi[vehicleid][aracParca][3] = componentid;
			if( AracBilgi[vehicleid][aracParca][3] != 0 ) AddVehicleComponent( vehicleid, componentid );
		}
		else if( GetVehicleComponentType( componentid ) == CARMODTYPE_LAMPS ) {
			AracBilgi[vehicleid][aracParca][4] = componentid;
			if( AracBilgi[vehicleid][aracParca][4] != 0 ) AddVehicleComponent( vehicleid, componentid );
		}
		else if( GetVehicleComponentType( componentid ) == CARMODTYPE_NITRO ) {
			AracBilgi[vehicleid][aracParca][5] = componentid;
			if( AracBilgi[vehicleid][aracParca][5] != 0 ) AddVehicleComponent( vehicleid, componentid );
		}
		else if( GetVehicleComponentType( componentid ) == CARMODTYPE_EXHAUST ) {
			AracBilgi[vehicleid][aracParca][6] = componentid;
			if( AracBilgi[vehicleid][aracParca][6] != 0 ) AddVehicleComponent( vehicleid, componentid );
		}
		else if( GetVehicleComponentType( componentid ) == CARMODTYPE_WHEELS ) {
			AracBilgi[vehicleid][aracParca][7] = componentid;
			if( AracBilgi[vehicleid][aracParca][7] != 0 ) AddVehicleComponent( vehicleid, componentid );
		}
		else if( GetVehicleComponentType( componentid ) == CARMODTYPE_STEREO ) {
			AracBilgi[vehicleid][aracParca][8] = componentid;
			if( AracBilgi[vehicleid][aracParca][8] != 0 ) AddVehicleComponent( vehicleid, componentid );
		}
		else if( GetVehicleComponentType( componentid ) == CARMODTYPE_HYDRAULICS ) {
			AracBilgi[vehicleid][aracParca][9] = componentid;
			if( AracBilgi[vehicleid][aracParca][9] != 0 ) AddVehicleComponent( vehicleid, componentid );
		}
		else if( GetVehicleComponentType( componentid ) == CARMODTYPE_FRONT_BUMPER ) {
			AracBilgi[vehicleid][aracParca][10] = componentid;
			if( AracBilgi[vehicleid][aracParca][10] != 0 ) AddVehicleComponent( vehicleid, componentid );
		}
		else if( GetVehicleComponentType( componentid ) == CARMODTYPE_REAR_BUMPER ) {
			AracBilgi[vehicleid][aracParca][11] = componentid;
			if( AracBilgi[vehicleid][aracParca][11] != 0 ) AddVehicleComponent( vehicleid, componentid );
		}
		else if( GetVehicleComponentType( componentid ) == CARMODTYPE_VENT_RIGHT ) {
			AracBilgi[vehicleid][aracParca][12] = componentid;
			if( AracBilgi[vehicleid][aracParca][12] != 0 ) AddVehicleComponent( vehicleid, componentid );
		}
		else if( GetVehicleComponentType( componentid ) == CARMODTYPE_VENT_LEFT ) {
			AracBilgi[vehicleid][aracParca][13] = componentid;
			if( AracBilgi[vehicleid][aracParca][13] != 0 ) AddVehicleComponent( vehicleid, componentid );
		}
		ModifiyeKaydet(playerid, vehicleid);
		Arac_Kaydet(vehicleid);
		return 1;
	}

	function TamirhaneTimer(playerid, arac, id)
	{
		SetPVarInt(playerid, "Tamircideyim", 0);
		ParaEkle(playerid, -tamirciData[id][tamirFiyat]);
    //RepairVehicle(arac);
		AracTamirEt(arac);
		SetVehiclePos(arac, tamirciData[id][tamirPos][0], tamirciData[id][tamirPos][1], tamirciData[id][tamirPos][2]);
		SetVehicleZAngle(arac, tamirciData[id][tamirPos][3]);
		PutPlayerInVehicle(playerid, arac, 0);
		TogglePlayerControllable(playerid, true);
		KillTimer(tamirTimer[playerid]);
		return 1;
	}

	function Tamircileri_Yukle()
	{
		new rows, mesaj[256];
		cache_get_row_count(rows);
		if(rows)
		{
			new id, yukle, ssw[512], zone[MAX_ZONE_NAME];
			while(yukle < rows)
			{
				cache_get_value_name_int(yukle, "id", id);
				cache_get_value_name_int(yukle, "Fiyat", tamirciData[id][tamirFiyat]);
				cache_get_value_name(yukle, "Pozisyonlar", ssw, sizeof(ssw));
				sscanf(ssw, "p<|>ffff", tamirciData[id][tamirPos][0], tamirciData[id][tamirPos][1], tamirciData[id][tamirPos][2], tamirciData[id][tamirPos][3]);
				cache_get_value_name(yukle, "IcKisim", ssw, sizeof(ssw));
				sscanf(ssw, "p<|>ffff", tamirciData[id][tamiricPos][0], tamirciData[id][tamiricPos][1], tamirciData[id][tamiricPos][2], tamirciData[id][tamiricPos][3]);
				Get3DZone(tamirciData[id][tamirPos][0], tamirciData[id][tamirPos][1], tamirciData[id][tamirPos][2], zone, sizeof(zone));
				format(ssw, sizeof(ssw), "[Araç Tamir - %s #%d]\n{FFFFFF}Aracýnýzý %s fiyata tamir ettirmek için /atamir komutunu kullanýn.", zone, id, NumaraFormati(tamirciData[id][tamirFiyat]));
				tamirciData[id][tamirLabel] = CreateDynamic3DTextLabel(ssw, RENK_SERVER, tamirciData[id][tamirPos][0], tamirciData[id][tamirPos][1], tamirciData[id][tamirPos][2], 15.0, INVALID_PLAYER_ID, INVALID_PLAYER_ID, 0, -1, -1);
				tamirciData[id][tamirPickup] = CreateDynamicPickup(19627, 1, tamirciData[id][tamirPos][0], tamirciData[id][tamirPos][1], tamirciData[id][tamirPos][2], -1, -1, -1, 60.0);

				Iter_Add(Tamirciler, id);
				yukle++;
			}
		}
		if(rows < 1) format(mesaj, sizeof(mesaj), "[SUNUCU] Veritabanýnda sunucuya entegre edilecek tamirci bulunamadý!");
		else if(rows > 0) format(mesaj, sizeof(mesaj), "[SUNUCU] %d adet tamirci yüklendi.", rows);
		printf(mesaj);
		return 1;
	}

	stock TamirciOlustur(playerid, id, fiyat)
	{
		new query[512], str[256], zone[MAX_ZONE_NAME];
		GetPlayerPos(playerid, tamirciData[id][tamirPos][0], tamirciData[id][tamirPos][1], tamirciData[id][tamirPos][2]);
		GetPlayerFacingAngle(playerid, tamirciData[id][tamirPos][3]);tamirciData[id][tamirFiyat] = fiyat;
		Get3DZone(tamirciData[id][tamirPos][0], tamirciData[id][tamirPos][1], tamirciData[id][tamirPos][2], zone, sizeof(zone));
		format(str, sizeof(str), "[Araç Tamir - %s #%d]\n{FFFFFF}Aracýnýzý %s fiyata tamir ettirmek için /atamir komutunu kullanýn.", zone, id, NumaraFormati(tamirciData[id][tamirFiyat]));
		tamirciData[id][tamirLabel] = CreateDynamic3DTextLabel(str, RENK_SERVER, tamirciData[id][tamirPos][0], tamirciData[id][tamirPos][1], tamirciData[id][tamirPos][2], 15.0, INVALID_PLAYER_ID, INVALID_PLAYER_ID, 0, -1, -1);
		tamirciData[id][tamirPickup] = CreateDynamicPickup(19627, 1, tamirciData[id][tamirPos][0], tamirciData[id][tamirPos][1], tamirciData[id][tamirPos][2], -1, -1, -1, 60.0);
		format(str, sizeof(str), "%.1f|%.1f|%.1f|%.1f", tamirciData[id][tamirPos][0], tamirciData[id][tamirPos][1], tamirciData[id][tamirPos][2], tamirciData[id][tamirPos][3]);
		mysql_format(g_SQL, query, sizeof(query),"INSERT INTO `tamirciler`(`id`, `Pozisyonlar`, `Fiyat`) VALUES ('%d', '%s', '%d')", id, str, fiyat);
		mysql_tquery(g_SQL, query);
		Iter_Add(Tamirciler, id);
		SetPVarInt(playerid, "TamirciIDX", id);
		format(str, sizeof(str), "{FFFFFF}Baþarýyla {C7C7C7}%s{FFFFFF} bölgesine yeni bir tamirci oluþturdun. ID: %d\n\n{FFFFFF}Ýç pozisyonu þimdi ayarlamak ister misin?",zone,id);
		ShowPlayerDialog(playerid, TAMIRCI_DIALOG, DIALOG_STYLE_MSGBOX, "{FFFFFF}Tamirci Oluþturma", str, "Evet", "Hayýr");
		return 1;
	}

	stock TamirciSil(playerid,id)
	{
		new query[256];
		Iter_Remove(Tamirciler, id);
		tamirciData[id][tamirFiyat] = 0;
		for(new i; i < 4; i++){tamirciData[id][tamirPos][i] = 0.0;tamirciData[id][tamiricPos][i] = 0.0;}
			if(IsValidDynamic3DTextLabel(tamirciData[id][tamirLabel])){DestroyDynamic3DTextLabel(tamirciData[id][tamirLabel]);}
		if(IsValidDynamicPickup(tamirciData[id][tamirPickup])){DestroyDynamicPickup(tamirciData[id][tamirPickup]);}
		mysql_format(g_SQL, query, sizeof(query), "DELETE FROM `tamirciler` WHERE `id` = '%d'",id);
		mysql_tquery(g_SQL, query);
		SunucuMesaji(playerid, "Tamirci silindi, ID: %d",id);
		return 1;
	}

	stock BagajGoster(playerid, i)
	{
		new baslik[64], icerik[512];
		format(baslik, sizeof(baslik), "%s - Bagaj", AracModel(AracBilgi[i][aracModel]));
		if(aracbirlikturbul(AracBilgi[i][aracYarat]) != BIRLIK_POLIS) {
			for(new r = 0; r != MAKSIMUM_BAGAJ_SLOT; r ++)
			{
				if(AracBilgi[i][aracSlot][r] > 0)
				{
					new sayi = 0;
					format(icerik, sizeof(icerik), "%sEþya:%s\tMermi/Gram:%d\n", icerik, SilahIsim(AracBilgi[i][aracSlot][r]),AracBilgi[i][aracSlotVar][r]), sayi++;
				}
				else
				{
					strcat(icerik, "Boþ Slot\n");
				}
			}
		}
		DialogGoster(playerid, DIALOG_BAGAJKIR, DIALOG_STYLE_LIST, baslik, icerik, "Seç", "Ýptal");
		return 1;
	}

	stock YereAt(id, playerid, yazi[], model, Float:ABC)
	{
		GetPlayerPos(playerid, yerdekiData[id][yerdekiPos][0], yerdekiData[id][yerdekiPos][1], yerdekiData[id][yerdekiPos][2]);
		format(yerdekiData[id][yerdekiSahip], 128, OyuncuIsim(playerid, 1));
		format(yerdekiData[id][yerdekiIsim], 128, yazi);
		yerdekiData[id][yerdekiModel] = model;
		yerdekiData[id][yerdekiPos][2] += ABC;

		yerdekiData[id][yerdekiObje] = CreateDynamicObject(yerdekiData[id][yerdekiModel], yerdekiData[id][yerdekiPos][0], yerdekiData[id][yerdekiPos][1], yerdekiData[id][yerdekiPos][2], 93.7, 120.0, 120.0);
		yerdekiData[id][yerdekiLabel] = CreateDynamic3DTextLabel(yerdekiData[id][yerdekiIsim], -1, yerdekiData[id][yerdekiPos][0], yerdekiData[id][yerdekiPos][1], yerdekiData[id][yerdekiPos][2], 5.0);
		Iter_Add(Yerdekiler, id);
		return 1;
	}

	stock AracCaniCek(vehicleid)
	{
		if (!IsValidVehicle(vehicleid)) return 0;
		static Float:amount;
		GetVehicleHealth(vehicleid, amount);
		return floatround(amount, floatround_round);
	}

	stock GraffitiBitir(playerid)
	{
		RemovePlayerAttachedObject(playerid, 5);
		oyuncuData[playerid][oGraffitiSure] = 0;
		oyuncuData[playerid][oDuzenlenenGrafiti] = -1;
		ClearAnimations(playerid);
		TogglePlayerControllable(playerid, true);
		SetTimerEx("oyuncucoz", 50, false, "i", playerid);
		return 1;
	}

	stock Grafiti_Kaydet(id)
	{
		new query[512];
		mysql_format(g_SQL, query, sizeof(query), "UPDATE `grafitiler` SET `grfSahip` = '%e' WHERE `grfID` = '%d' LIMIT 1", grfData[id][grfSahip], id);
		mysql_query(g_SQL, query);
		mysql_format(g_SQL, query, sizeof(query), "UPDATE `grafitiler` SET `grfYazi` = '%e' WHERE `grfID` = '%d' LIMIT 1", grfData[id][grfYazi], id);
		mysql_query(g_SQL, query);
		mysql_format(g_SQL, query, sizeof(query), "UPDATE `grafitiler` SET `grfFont` = '%e' WHERE `grfID` = '%d' LIMIT 1", grfData[id][grfFont], id);
		mysql_query(g_SQL, query);

		static pozlar[512];
		for(new i = 0 ; i < 6; i++)
		{
			format(pozlar, sizeof(pozlar), "%s%.1f|", pozlar, grfData[id][grfPos][i]);
		}

		mysql_format(g_SQL, query, sizeof(query), "UPDATE `grafitiler` SET `grfPozisyonlar` = '%s' WHERE `grfID` = '%d' LIMIT 1", pozlar, id);
		mysql_query(g_SQL, query);
		pozlar[0] = 0;
		return 1;
	}

	stock Grafiti_Yenile(id)
	{
		if(IsValidDynamicObject(grfData[id][grfObje])){DestroyDynamicObject(grfData[id][grfObje]);}
		grfData[id][grfObje] = CreateDynamicObject(19482, grfData[id][grfPos][0], grfData[id][grfPos][1], grfData[id][grfPos][2], grfData[id][grfPos][3], grfData[id][grfPos][4], grfData[id][grfPos][5]);

		SetDynamicObjectMaterial(grfData[id][grfObje], 0, 0, "none", "none", 0);
		SetDynamicObjectMaterialText(grfData[id][grfObje], 0, grfData[id][grfYazi], OBJECT_MATERIAL_SIZE_256x128, grfData[id][grfFont], 24, 1, 0xFFFFFFFF, 0, 0);
		return 1;
	}

	stock Grafiti_Secenek(playerid, scnk)
	{
		switch(scnk)
		{
			case 0:
			{
				ShowPlayerDialog(playerid, DIALOG_GRF_YAZI, DIALOG_STYLE_INPUT, "{FFFFFF}Graffiti Düzenle", "Graffitinin yazýsýný deðiþtirmek için metin girin;", "Tamam", "Kapat");
			}
			case 1:
			{
				ShowPlayerDialog(playerid, DIALOG_GRF_FONT, DIALOG_STYLE_LIST, "{FFFFFF}Graffiti Düzenle", "Arial\nImpact", "Tamam", "Kapat");
			}
		}
		return 1;
	}

	stock Grafiti_Bul(playerid, id, Float:distance)
	{
		if(IsPlayerInRangeOfPoint(playerid, distance, grfData[id][grfPos][0], grfData[id][grfPos][1], grfData[id][grfPos][2])) return 1;
		return -1;
	}

	stock Grafiti_Menu(playerid)
	{
		if(oyuncuData[playerid][oAdmin] < 8) return hataMesaji(playerid, "Bu komutu kullanmak için uygun birlikte veya yetkide deðilsiniz.");

		new str[512], stringcekf[256], stringcekm[256];
		GetPVarString(playerid, "GraffitiYazi", stringcekm, sizeof(stringcekm));
		GetPVarString(playerid, "GraffitiFont", stringcekf, sizeof(stringcekf));

		strcat(str, "{FFFFFF}Seçenek\t#\n");
		format(str, sizeof(str), "%s{FFFFFF}» {CDCDCD}Graffiti Yazýsý:\t{FFFFFF}%s\n", str, stringcekm);
		format(str, sizeof(str), "%s{FFFFFF}» {CDCDCD}Graffiti Fontu:\t{FFFFFF}%s\n \n", str, stringcekf);
		format(str, sizeof(str), "%s{FFFFFF}» {59A466}Graffitiye Baþla\n", str);
		ShowPlayerDialog(playerid, DIALOG_GRAFITI, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Graffiti Menüsü", str, "Seçim", "Iptal Et");
		return 1;
	}

	stock Grafiti_Yarat(playerid, i)
	{
		GetPlayerPos(playerid, oyuncuData[playerid][oPos][0], oyuncuData[playerid][oPos][1], oyuncuData[playerid][oPos][2]);
		format(grfData[i][grfSahip], MAX_PLAYER_NAME, OyuncuIsim(playerid, 31));

		static stringcek[256];
		GetPVarString(playerid, "GraffitiYazi", stringcek, sizeof(stringcek));
		format(grfData[i][grfYazi], 128, stringcek);

		GetPVarString(playerid, "GraffitiFont", stringcek, sizeof(stringcek));
		format(grfData[i][grfFont], 60, stringcek);

		for(new x; x < 6; x++)
		{
			if(x < 3)
			{
				grfData[i][grfPos][x] = oyuncuData[playerid][oPos][x];
			}
			else if(x > 3 || x < 6)
			{
				grfData[i][grfPos][x] = 0.0;
			}
		}
		grfData[i][grfObje] = CreateDynamicObject(19482, grfData[i][grfPos][0], grfData[i][grfPos][1], grfData[i][grfPos][2], grfData[i][grfPos][3], grfData[i][grfPos][4], grfData[i][grfPos][5]);

		SetDynamicObjectMaterial(grfData[i][grfObje], 0, 0, "none", "none");
		SetDynamicObjectMaterialText(grfData[i][grfObje], 0, grfData[i][grfYazi], OBJECT_MATERIAL_SIZE_256x128, grfData[i][grfFont], 24, 1, 0xFFFFFFFF);
		EditDynamicObject(playerid, grfData[i][grfObje]);
		oyuncuData[playerid][oDuzenlenenGrafiti] = i;
		return 1;
	}

	stock Grafiti_Sil(id)
	{
		new query[95];
		mysql_format(g_SQL, query, sizeof(query), "DELETE FROM `grafitiler` WHERE `grfID` = '%d'", id);
		mysql_query(g_SQL, query);
		for(new i ; i < 6; i ++)
		{
			grfData[id][grfPos][i] = 0.0;
		}
		format(grfData[id][grfSahip], MAX_PLAYER_NAME, "-");
		format(grfData[id][grfYazi], 128, "-");
		DestroyDynamicObject(grfData[id][grfObje]);
		Iter_Remove(Grafitiler, id);
		return 1;
	}

	stock GetAttachedObjectPos(objectid, Float:offset_x, Float:offset_y, Float:offset_z, &Float:x, &Float:y, &Float:z)
	{
		new Float:object_px,
		Float:object_py,
		Float:object_pz,
		Float:object_rx,
		Float:object_ry,
		Float:object_rz;
		GetObjectPos(objectid, object_px, object_py, object_pz);
		GetObjectRot(objectid, object_rx, object_ry, object_rz);
		new Float:cos_x = floatcos(object_rx, degrees),
		Float:cos_y = floatcos(object_ry, degrees),
		Float:cos_z = floatcos(object_rz, degrees),
		Float:sin_x = floatsin(object_rx, degrees),
		Float:sin_y = floatsin(object_ry, degrees),
		Float:sin_z = floatsin(object_rz, degrees);
		x = object_px + offset_x * cos_y * cos_z - offset_x * sin_x * sin_y * sin_z - offset_y * cos_x * sin_z + offset_z * sin_y * cos_z + offset_z * sin_x * cos_y * sin_z;
		y = object_py + offset_x * cos_y * sin_z + offset_x * sin_x * sin_y * cos_z + offset_y * cos_x * cos_z + offset_z * sin_y * sin_z - offset_z * sin_x * cos_y * cos_z;
		z = object_pz - offset_x * cos_x * sin_y + offset_y * sin_x + offset_z * cos_x * cos_y;
	}

	stock GetYatID()
	{
		for (new i = 0; i < MAX_YAT; i++)
		{
			if (!YatInfo[i][yAktif]) return i;
		}
		return MAX_YAT;
	}

	/*stock GetKaravanID()
	{
		for (new i = 0; i < MAX_KARAVAN; i++)
		{
			if (!KaravanInfo[i][kAktif]) return i;
		}
		return MAX_KARAVAN;
	} */

	stock GetArsaID()
	{
		for (new i = 0; i < MAX_CIFTLIK; i++)
		{
			if (!CiftlikInfo[i][cAktif]) return i;
		}
		return MAX_CIFTLIK;
	}

	stock GetBolgeID()
	{
		for (new i = 0; i < MAX_BOLGE; i++)
		{
			if (!BolgeInfo[i][bAktif]) return i;
		}
		return MAX_BOLGE;
	}

	stock GetSilahID()
	{
		for (new i = 0; i < MAX_YAT; i++)
		{
			if (!YatInfo[i][yAktif]) return i;
		}
		return MAX_YAT;
	}

	stock YataKoy(playerid, yatid)
	{
		SetPVarInt(playerid, "YatGir", 1);

		gPlayerCamObj[playerid] = CreateDynamicObject(19300, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);//CreateObject(19300, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		AttachDynamicObjectToObject(gPlayerCamObj[playerid], YatInfo[yatid][yObje], 0.0, -25.0, 10.6, 0.0, 0.0, 0.0);

		GetObjectPos(YatInfo[yatid][yObje], YatInfo[yatid][yX], YatInfo[yatid][yY], YatInfo[yatid][yZ]);
		SetPlayerPos(playerid, YatInfo[yatid][yX], YatInfo[yatid][yY], YatInfo[yatid][yZ] - 4.0);
		AttachCameraToObject(playerid, gPlayerCamObj[playerid]);

	}

	stock SlotKaydet(id)
	{
		new query[512];
		mysql_format(g_SQL, query, sizeof(query), "UPDATE `araclar` SET `aSlot1` = '%d', `aSlot2` = '%d', `aSlot3` = '%d', `aSlot4` = '%d'  WHERE `aracID` = '%d'", AracBilgi[id][aracSlot][0],AracBilgi[id][aracSlot][1],AracBilgi[id][aracSlot][2],AracBilgi[id][aracSlot][3],AracBilgi[id][aracID]);
		mysql_query(g_SQL, query);
		mysql_format(g_SQL, query, sizeof(query), "UPDATE `araclar` SET `aSlot1Var` = '%d', `aSlot2Var` = '%d', `aSlot3Var` = '%d', `aSlot4Var` = '%d'  WHERE `aracID` = '%d'", AracBilgi[id][aracSlotVar][0],AracBilgi[id][aracSlotVar][1],AracBilgi[id][aracSlotVar][2],AracBilgi[id][aracSlotVar][3],AracBilgi[id][aracID]);
		mysql_query(g_SQL, query);

		return 1;
	}

	function AracVergiKes()
	{
		new aracfiyati;
		foreach(new i : Araclar)
		{
			if(AracBilgi[i][aracMeslek] < 1 && AracBilgi[i][aracTur] != 1)
			{
				for(new a = 0; a < sizeof(SatilikAraclar); a++)
				{
					if(GetVehicleModel(i) == SatilikAraclar[a][0]) aracfiyati = SatilikAraclar[a][1];
				}
				new deger = aracfiyati / VERGI_BOLU;
				if(AracBilgi[i][aracVergi] < deger)
				{
					new vergi = VergiAlgoritma(i, "saatlik");
					AracBilgi[i][aracVergi] += vergi;
	            //SCM_ExAll(RENK_ACIKKIRMIZI, "%d: %s (Toplam: %s)", i, NumaraFormati(vergi), NumaraFormati(AracBilgi[i][aracVergi]));
				}
			}
			if(AracBilgi[i][araccalintisure] > 0)
			{
				AracBilgi[i][araccalintisure]--;
			}
		}
		for(new i = 0; i < MAKSIMUM_ISYERI; i++) if(IsyeriBilgi[i][isyeriSahip] > 0 && IsyeriBilgi[i][isyeriDurum] != 4)
		{
			if((IsyeriBilgi[i][isyeriFiyat] / ISYERI_VERGI_BOLU) < 1)
			{ 
				IsyeriBilgi[i][isyeriVergi] += 1;
			}
			else
			{
				IsyeriBilgi[i][isyeriVergi] += IsyeriBilgi[i][isyeriFiyat] / ISYERI_VERGI_BOLU; 
			}
			if(IsyeriBilgi[i][isyeriVergi] >= 20000)
			{
				IsyeriBilgi[i][isyeriDurum] = 4;
				Isyeri_Yenile(i);
			}
		}
		for(new i = 0; i < MAKSIMUM_EV; i++) if(EvBilgi[i][evSahip] > 0 && EvBilgi[i][evDurum] != 4)
		{
			if((EvBilgi[i][evFiyat] / EV_VERGI_BOLU) < 1)
			{ 
				EvBilgi[i][evVergi] += 1;
			}
			else
			{
				EvBilgi[i][evVergi] += EvBilgi[i][evFiyat] / EV_VERGI_BOLU; 
			}
			if(EvBilgi[i][evVergi] >= 10000)
			{
				EvBilgi[i][evDurum] = 4;
				Ev_Yenile(i);
			}
		}
		return 1;
	}

	function YerdenKalk(playerid) return ClearAnimations(playerid);

	function FlasorTimer()
	{
		new paneller, kapilar, lambalar, digerleri;
		foreach(new i : FlasorArac) if(IsValidVehicle(i))//timer süresine baðlý, rows döngüsü için flasorarac iterator eklendi. (lag,kasýntý oluþumuna karþýt)
		{
			if(Flasor[i] == 1)
			{
			    GetVehicleDamageStatus(i, paneller, kapilar, lambalar, digerleri);
			    switch(FlasorStatu[i])
			    {
			    	case 0:SetLightStatus(i, true), UpdateVehicleDamageStatus(i, paneller, kapilar, 0, digerleri), FlasorStatu[i]++;

			        case 1:UpdateVehicleDamageStatus(i, paneller, kapilar, 65, digerleri), FlasorStatu[i]++;
			        case 2:UpdateVehicleDamageStatus(i, paneller, kapilar, 0, digerleri), FlasorStatu[i]++;
			        case 3:UpdateVehicleDamageStatus(i, paneller, kapilar, 65, digerleri), FlasorStatu[i]++;
			        case 4:UpdateVehicleDamageStatus(i, paneller, kapilar, 0, digerleri), FlasorStatu[i]++;
			        case 5:UpdateVehicleDamageStatus(i, paneller, kapilar, 65, digerleri), FlasorStatu[i]++;
			        case 6:UpdateVehicleDamageStatus(i, paneller, kapilar, 0, digerleri), FlasorStatu[i]++;

			        case 7:UpdateVehicleDamageStatus(i, paneller, kapilar, 68, digerleri), FlasorStatu[i]++;
			        case 8:UpdateVehicleDamageStatus(i, paneller, kapilar, 0, digerleri), FlasorStatu[i]++;
			        case 9:UpdateVehicleDamageStatus(i, paneller, kapilar, 68, digerleri), FlasorStatu[i]++;
			        case 10:UpdateVehicleDamageStatus(i, paneller, kapilar, 0, digerleri), FlasorStatu[i]++;			        
			        case 11:UpdateVehicleDamageStatus(i, paneller, kapilar, 68, digerleri), FlasorStatu[i]++;
			        case 12:UpdateVehicleDamageStatus(i, paneller, kapilar, 0, digerleri), FlasorStatu[i]=0;
           		}
			}
		}
		return 1;
	}

	function OyuncakIDCek(playerid)
	{
		oyuncakData[playerid][secilenslot[playerid]][ptRealID] = cache_insert_id();
		return 1;
	}

	function AnkesorCaliyor(kisi, aid)
	{
		if(AnkesorInfo[aid][aAktif] == 0 && AnkesorInfo[aid][aCaliyor] == 1 && IsPlayerInRangeOfPoint(kisi, 5.0, AnkesorInfo[aid][aX], AnkesorInfo[aid][aY], AnkesorInfo[aid][aZ]))
		{
			new message[85];
			format(message, sizeof(message), "* Yakýnlarda bulunan ankesörlü telefon çalmaktadýr. (( Ankesörlü Telefon ))");
			SendClientMessage(kisi, RENK_PEMBE, message);
			PlayerPlaySoundEx(kisi, 23000);
		}
		return 1;
	}

	function DorseSat(playerid, aracid)
	{
		DetachTrailerFromVehicle(aracid);
		DestroyVehicle(Dorse[aracid]);
		Iter_Remove(Araclar, Dorse[aracid]);
		AracBilgi[aracid][aracKapasite] --;
		TogglePlayerControllable(playerid, true);
		GameTextForPlayer(playerid, "~g~DORSE BIRAKILDI!.", 750, 4);
		KillTimer(dorsesat[playerid]);
		ParaEkle(playerid, 1700);
		SunucuMesaji(playerid, "Süt tankeri baþarýyla teslim edildi, paranýzý teslim aldýnýz!");
		return 1;
	}


	function DorseYukle(playerid, aracid)
	{
		Dorse[aracid] = CreateVehicle(584, 2426.3032,64.2594,26.2998,269.5654, 0,0, -1);
		Iter_Add(Araclar, Dorse[aracid]);
		dorsetasiyor[playerid] = true;
		AttachTrailerToVehicle(Dorse[aracid], aracid);
		AracBilgi[aracid][aracKapasite] ++;
		TogglePlayerControllable(playerid, true);
		GameTextForPlayer(playerid, "~g~DORSE YUKLENDI!.", 750, 4);
		SunucuMesaji(playerid, "Süt tankeri aracýnýza baðlandý, dikkatli sürün!");
		UyariMesaji(playerid, "Meslek araçlarýný meslek güzergahý dýþýnda kullanmak ceza almanýza neden olabilir.");
		KillTimer(dorseyukle[playerid]);
		return 1;
	}


	function KonteynerYukle(playerid, aracid)
	{
		Konteyner[aracid] = CreateDynamicObject(2935,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
		konteynertasiyor[playerid] = true;
		AttachDynamicObjectToVehicle(Konteyner[aracid], aracid, 0.000, -1.599, 1.199, 0.000, 0.000, 0.000);
		AracBilgi[aracid][aracKapasite] ++;
		TogglePlayerControllable(playerid, true);
		GameTextForPlayer(playerid, "~g~KONTEYNER YUKLENDI!.", 750, 4);
		SunucuMesaji(playerid, "Konteyner aracýnýza yüklendi, dikkatli sürün!");
		UyariMesaji(playerid, "Meslek araçlarýný meslek güzergahý dýþýnda kullanmak ceza almanýza neden olabilir.");
		KillTimer(konteyneryukle[playerid]);
		return 1;
	}

	function KonteynerSat(playerid, aracid)
	{
		DestroyDynamicObject(Konteyner[aracid]);
		TogglePlayerControllable(playerid, true);
		GameTextForPlayer(playerid, "~g~KONTEYNER INDIRILDI!.", 750, 4);
		KillTimer(konteynersat[playerid]);
		AracBilgi[aracid][aracKapasite] = 0;
		konteynertasiyor[playerid] = false;
		ParaEkle(playerid, 840);
		FirmaParaEkle(oyuncuData[playerid][oFirma], 40);
		SunucuMesaji(playerid, "Konteyner baþarýyla teslim edildi, paranýzý teslim aldýnýz!");
		oyuncuData[playerid][oKonteynSatabilir] = 0;
		return 1;
	}

	function kilitkirint(playerid)
	{
		if(GetPVarInt(playerid, "kilidikiriyor") == 1) ApplyAnimation(playerid,"BD_FIRE","wash_up",4.1,0,0,0,1,10000);
		else KillTimer(kilitinterval[playerid]);
		return 1;
	}

	function TrailerDevam(playerid)
	{
		ShowPlayerDialog(playerid, DIALOG_TRAILER2, DIALOG_STYLE_MSGBOX, "> Nitro Roleplay'e Hoþ Geldin", "Little Italy...\
			\nÝtalyan-Amerikan Kültür Derneði katkýlarýyla oluþturulmuþ mükemmel bir yer.\
			\nGüzel vakit geçirmek istiyorsan buraya uðrayabilirsin.\
			\nHer ihtimale karþý ücra köþelere dikkat etsen iyi olur...", "Anladým", "");
		InterpolateCameraPos(playerid, 1007.3727,-1765.4329,42.4124, 1186.4913,-1709.5170,32.1816, 10000, CAMERA_MOVE);
		InterpolateCameraLookAt(playerid, 1099.8131,-1712.9823,13.3828, 1099.8131,-1712.9823,13.3828, 8500);
		SetTimerEx("TrailerDevam2", 10000, false, "d", playerid);
		return 1;
	}

	function TrailerDevam2(playerid)
	{
		ShowPlayerDialog(playerid, DIALOG_TRAILER3, DIALOG_STYLE_MSGBOX, "> Nitro Roleplay'e Hoþ Geldin", "Sunshine Autos, þehrin en büyük galerisi.\
			\nEðer bir araç sahibi olmak istiyorsan ilk zamanlarýnda yolun buraya mutlaka düþecektir.\
			\nParaný dikkatli harcamaya özen göstersen iyi olur, bu þehirde para pek kolay kazanýlmýyor.", "Anladým", "");
		InterpolateCameraPos(playerid, 832.0288,-1908.0515,38.0871, 911.1622,-1737.2502,27.0698, 10000, CAMERA_MOVE);
		InterpolateCameraLookAt(playerid, 951.0050,-1714.7687,16.1234, 951.0050,-1714.7687,16.1234, 8500);
		SetTimerEx("TrailerDevam3", 10000, false, "d", playerid);
		return 1;
	}

	function TrailerDevam3(playerid)
	{
		ShowPlayerDialog(playerid, DIALOG_TRAILER4, DIALOG_STYLE_MSGBOX, "> Nitro Roleplay'e Hoþ Geldin", "Ocean Caddesi ve muhteþem sahil evleri...\
			\nSana anlatmadýðýmýz pek çok þey daha var, bunlarý kendin keþfetmeye ne dersin?\
			\nVice Þehrine hoþ geldin! Güzel günler bizi bekliyor...\
			\n\n10 saniye içinde karakter özelleþtirme ekranýna gönderileceksin.", "Anladým", "");
		InterpolateCameraPos(playerid, 38.8085,-1890.9255,29.0112, 420.4694,-1816.4061,32.7725, 10000, CAMERA_MOVE);
		InterpolateCameraLookAt(playerid, 413.5891,-1768.4760,10.3952, 413.5891,-1768.4760,10.3952, 8500);
		SetTimerEx("TrailerSon", 10000, false, "d", playerid);
		return 1;
	}

	function TrailerSon(playerid)
	{
		TogglePlayerSpectating(playerid, 0);
		SetCameraBehindPlayer(playerid);
		SunucuMesaji(playerid, "Trailer test sona erdi.");
		ShowPlayerDialog(playerid,-1,0,"","","","");
		return 1;
	}

	function gymvar(playerid)
	{
		if (GetPVarInt(playerid, "gymyapiyor") == 1)
		{
			if(okcX[playerid][0] == -2.0) return PuanDurum(playerid);
			if(secilenok[playerid] < 13 && okcX[playerid][secilenok[playerid]] == 299.0 && okcDurum[playerid][secilenok[playerid]] == 0) secilenok[playerid] += 1;
			for(new i = 0; i < sizeof(okveri) ; i++)
			{
				okcX[playerid][i] -= 0.5;
				PlayerTextDrawDestroy(playerid, gym[i][playerid]);
				CreatePlayerTextDraw(playerid, okcX[playerid][i], 312.000000, okveri[i][okisim]);
				PlayerTextDrawFont(playerid,gym[i][playerid], 4);
				PlayerTextDrawLetterSize(playerid,gym[i][playerid], 0.600000, 2.000000);
				PlayerTextDrawTextSize(playerid,gym[i][playerid], 17.000000, 17.000000);
				PlayerTextDrawSetOutline(playerid,gym[i][playerid], 1);
				PlayerTextDrawSetShadow(playerid,gym[i][playerid], 0);
				PlayerTextDrawAlignment(playerid,gym[i][playerid], 1);
				PlayerTextDrawBackgroundColor(playerid,gym[i][playerid], 255);
				PlayerTextDrawColor(playerid, gym[i][playerid], -1);
				if(okcDurum[playerid][i] == 1) PlayerTextDrawColor(playerid, gym[i][playerid], -16776961);
				if(okcDurum[playerid][i] == 2) PlayerTextDrawColor(playerid, gym[i][playerid], -2686721);
				if(okcDurum[playerid][i] == 3) PlayerTextDrawColor(playerid, gym[i][playerid], 852308735);
				PlayerTextDrawBoxColor(playerid,gym[i][playerid], 50);
				PlayerTextDrawUseBox(playerid,gym[i][playerid], 1);
				PlayerTextDrawSetProportional(playerid,gym[i][playerid], 1);
				PlayerTextDrawSetSelectable(playerid,gym[i][playerid], 0);
				PlayerTextDrawShow(playerid, gym[i][playerid]);
			}
		}
		return 1;
	}

	function gymtusvar(playerid)
	{
		static Keys, zud, lrn;
		GetPlayerKeys(playerid, Keys, zud, lrn);
		if (GetPVarInt(playerid, "gymyapiyor") == 1)
		{
			if(zud == KEY_UP)
			{
				if(okcX[playerid][secilenok[playerid]] < 318.0 && okcX[playerid][secilenok[playerid]] > 300.0) {
					if(secilenok[playerid] == 2 || secilenok[playerid] == 5 || secilenok[playerid] == 8)
					{
						if(okcX[playerid][secilenok[playerid]] == 310.0) {
							GameTextForPlayer(playerid, "~g~MUKEMMEL!", 450, 4);
							oyuncuData[playerid][oGYMPuan] += 6;
							okcDurum[playerid][secilenok[playerid]] = 3;
							secilenok[playerid] += 1;
							if(gymtur[playerid] == 1) ApplyAnimation( playerid, "GYMNASIUM", "gym_bike_fast", 1, 1, 0, 0, 1, 0, 1 );
							if(gymtur[playerid] == 2) ApplyAnimation( playerid, "freeweights", "gym_free_A", 1, 0, 0, 0, 1, 0, 1 );
							if(gymtur[playerid] == 3) ApplyAnimation( playerid, "GYMNASIUM", "gym_tread_sprint", 1, 1, 0, 0, 1, 0, 1);
						}
						else if(okcX[playerid][secilenok[playerid]] < 317.0 && okcX[playerid][secilenok[playerid]] > 301.0
							&& okcX[playerid][secilenok[playerid]] != 310.0) {
							GameTextForPlayer(playerid, "~y~IDARE EDER!", 450, 4);
						oyuncuData[playerid][oGYMPuan] += 4;
						okcDurum[playerid][secilenok[playerid]] = 2;
						secilenok[playerid] += 1;
						if(gymtur[playerid] == 1) ApplyAnimation( playerid, "GYMNASIUM", "gym_bike_fast", 1, 1, 0, 0, 1, 0, 1 );
						if(gymtur[playerid] == 2) ApplyAnimation( playerid, "freeweights", "gym_free_A", 1, 0, 0, 0, 1, 0, 1 );
						if(gymtur[playerid] == 3) ApplyAnimation( playerid, "GYMNASIUM", "gym_tread_sprint", 1, 1, 0, 0, 1, 0, 1);
					}
					else {
						GameTextForPlayer(playerid, "~r~VASAT!", 450, 4);
						okcDurum[playerid][secilenok[playerid]] = 1;
						secilenok[playerid] += 1;
						if(gymtur[playerid] == 1) ApplyAnimation( playerid, "GYMNASIUM", "gym_bike_fast", 1, 1, 0, 0, 1, 0, 1 );
						if(gymtur[playerid] == 2) ApplyAnimation( playerid, "freeweights", "gym_free_A", 1, 0, 0, 0, 1, 0, 1 );
						if(gymtur[playerid] == 3) ApplyAnimation( playerid, "GYMNASIUM", "gym_tread_sprint", 1, 1, 0, 0, 1, 0, 1);
					}
				}
				else
				{
					GameTextForPlayer(playerid, "~r~VASAT!", 450, 4);
					okcDurum[playerid][secilenok[playerid]] = 1;
					secilenok[playerid] += 1;
				}
			}
		}
		else if(zud == KEY_DOWN)
		{
			if(okcX[playerid][secilenok[playerid]] < 318.0 && okcX[playerid][secilenok[playerid]] > 300.0) {
				if(secilenok[playerid] == 0 || secilenok[playerid] == 1 || secilenok[playerid] == 7 || secilenok[playerid] == 11 || secilenok[playerid] == 12)
				{
					if(okcX[playerid][secilenok[playerid]] == 310.0) {
						GameTextForPlayer(playerid, "~g~MUKEMMEL!", 450, 4);
						oyuncuData[playerid][oGYMPuan] += 5;
						okcDurum[playerid][secilenok[playerid]] = 3;
						secilenok[playerid] += 1;
						if(gymtur[playerid] == 1) ApplyAnimation( playerid, "GYMNASIUM", "gym_bike_fast", 1, 1, 0, 0, 1, 0, 1 );
						if(gymtur[playerid] == 2) ApplyAnimation( playerid, "freeweights", "gym_free_A", 1, 0, 0, 0, 1, 0, 1 );
						if(gymtur[playerid] == 3) ApplyAnimation( playerid, "GYMNASIUM", "gym_tread_sprint", 1, 1, 0, 0, 1, 0, 1);
					}
					else if(okcX[playerid][secilenok[playerid]] < 317.0 && okcX[playerid][secilenok[playerid]] > 301.0
						&& okcX[playerid][secilenok[playerid]] != 310.0) {
						GameTextForPlayer(playerid, "~y~IDARE EDER!", 450, 4);
					oyuncuData[playerid][oGYMPuan] += 3;
					okcDurum[playerid][secilenok[playerid]] = 2;
					secilenok[playerid] += 1;
					if(gymtur[playerid] == 1) ApplyAnimation( playerid, "GYMNASIUM", "gym_bike_fast", 1, 1, 0, 0, 1, 0, 1 );
					if(gymtur[playerid] == 2) ApplyAnimation( playerid, "freeweights", "gym_free_A", 1, 0, 0, 0, 1, 0, 1 );
					if(gymtur[playerid] == 3) ApplyAnimation( playerid, "GYMNASIUM", "gym_tread_sprint", 1, 1, 0, 0, 1, 0, 1);
				}
				else {
					GameTextForPlayer(playerid, "~r~VASAT!", 450, 4);
					okcDurum[playerid][secilenok[playerid]] = 1;
					secilenok[playerid] += 1;
					if(gymtur[playerid] == 1) ApplyAnimation( playerid, "GYMNASIUM", "gym_bike_fast", 1, 1, 0, 0, 1, 0, 1 );
					if(gymtur[playerid] == 2) ApplyAnimation( playerid, "freeweights", "gym_free_A", 1, 0, 0, 0, 1, 0, 1 );
					if(gymtur[playerid] == 3) ApplyAnimation( playerid, "GYMNASIUM", "gym_tread_sprint", 1, 1, 0, 0, 1, 0, 1);
				}
			}
			else
			{
				GameTextForPlayer(playerid, "~r~VASAT!", 450, 4);
				okcDurum[playerid][secilenok[playerid]] = 1;
				secilenok[playerid] += 1;
			}
		}
	}
	else if(lrn == KEY_LEFT)
	{
		if(okcX[playerid][secilenok[playerid]] < 318.0 && okcX[playerid][secilenok[playerid]] > 300.0) {
			if(secilenok[playerid] == 3 || secilenok[playerid] == 9 || secilenok[playerid] == 10)
			{
				if(okcX[playerid][secilenok[playerid]] == 310.0) {
					GameTextForPlayer(playerid, "~g~MUKEMMEL!", 450, 4);
					oyuncuData[playerid][oGYMPuan] += 5;
					okcDurum[playerid][secilenok[playerid]] = 3;
					secilenok[playerid] += 1;
					if(gymtur[playerid] == 1) ApplyAnimation( playerid, "GYMNASIUM", "gym_bike_fast", 1, 1, 0, 0, 1, 0, 1 );
					if(gymtur[playerid] == 2) ApplyAnimation( playerid, "freeweights", "gym_free_A", 1, 0, 0, 0, 1, 0, 1 );
					if(gymtur[playerid] == 3) ApplyAnimation( playerid, "GYMNASIUM", "gym_tread_sprint", 1, 1, 0, 0, 1, 0, 1);
				}
				else if(okcX[playerid][secilenok[playerid]] < 317.0 && okcX[playerid][secilenok[playerid]] > 301.0
					&& okcX[playerid][secilenok[playerid]] != 310.0) {
					GameTextForPlayer(playerid, "~y~IDARE EDER!", 450, 4);
				oyuncuData[playerid][oGYMPuan] += 3;
				okcDurum[playerid][secilenok[playerid]] = 2;
				secilenok[playerid] += 1;
				if(gymtur[playerid] == 1) ApplyAnimation( playerid, "GYMNASIUM", "gym_bike_fast", 1, 1, 0, 0, 1, 0, 1 );
				if(gymtur[playerid] == 2) ApplyAnimation( playerid, "freeweights", "gym_free_A", 1, 0, 0, 0, 1, 0, 1 );
				if(gymtur[playerid] == 3) ApplyAnimation( playerid, "GYMNASIUM", "gym_tread_sprint", 1, 1, 0, 0, 1, 0, 1);
			}
			else {
				GameTextForPlayer(playerid, "~r~VASAT!", 450, 4);
				okcDurum[playerid][secilenok[playerid]] = 1;
				secilenok[playerid] += 1;
				if(gymtur[playerid] == 1) ApplyAnimation( playerid, "GYMNASIUM", "gym_bike_fast", 1, 1, 0, 0, 1, 0, 1 );
				if(gymtur[playerid] == 2) ApplyAnimation( playerid, "freeweights", "gym_free_A", 1, 0, 0, 0, 1, 0, 1 );
				if(gymtur[playerid] == 3) ApplyAnimation( playerid, "GYMNASIUM", "gym_tread_sprint", 1, 1, 0, 0, 1, 0, 1);
			}
		}
		else
		{
			GameTextForPlayer(playerid, "~r~VASAT!", 450, 4);
			okcDurum[playerid][secilenok[playerid]] = 1;
			secilenok[playerid] += 1;
		}
	}
}
else if(lrn == KEY_RIGHT)
{
	if(okcX[playerid][secilenok[playerid]] < 318.0 && okcX[playerid][secilenok[playerid]] > 300.0) {
		if(secilenok[playerid] == 4 || secilenok[playerid] == 6 || secilenok[playerid] == 13)
		{
			if(okcX[playerid][secilenok[playerid]] == 310.0) {
				GameTextForPlayer(playerid, "~g~MUKEMMEL!", 450, 4);
				oyuncuData[playerid][oGYMPuan] += 5;
				okcDurum[playerid][secilenok[playerid]] = 3;
				secilenok[playerid] += 1;
				if(gymtur[playerid] == 1) ApplyAnimation( playerid, "GYMNASIUM", "gym_bike_fast", 1, 1, 0, 0, 1, 0, 1 );
				if(gymtur[playerid] == 2) ApplyAnimation( playerid, "freeweights", "gym_free_A", 1, 0, 0, 0, 1, 0, 1 );
				if(gymtur[playerid] == 3) ApplyAnimation( playerid, "GYMNASIUM", "gym_tread_sprint", 1, 1, 0, 0, 1, 0, 1);
			}
			else if(okcX[playerid][secilenok[playerid]] < 317.0 && okcX[playerid][secilenok[playerid]] > 301.0
				&& okcX[playerid][secilenok[playerid]] != 310.0) {
				GameTextForPlayer(playerid, "~y~IDARE EDER!", 450, 4);
			oyuncuData[playerid][oGYMPuan] += 3;
			okcDurum[playerid][secilenok[playerid]] = 2;
			secilenok[playerid] += 1;
			if(gymtur[playerid] == 1) ApplyAnimation( playerid, "GYMNASIUM", "gym_bike_fast", 1, 1, 0, 0, 1, 0, 1 );
			if(gymtur[playerid] == 2) ApplyAnimation( playerid, "freeweights", "gym_free_A", 1, 0, 0, 0, 1, 0, 1 );
			if(gymtur[playerid] == 3) ApplyAnimation( playerid, "GYMNASIUM", "gym_tread_sprint", 1, 1, 0, 0, 1, 0, 1);
		}
		else {
			GameTextForPlayer(playerid, "~r~VASAT!", 450, 4);
			okcDurum[playerid][secilenok[playerid]] = 1;
			secilenok[playerid] += 1;
			if(gymtur[playerid] == 1) ApplyAnimation( playerid, "GYMNASIUM", "gym_bike_fast", 1, 1, 0, 0, 1, 0, 1 );
			if(gymtur[playerid] == 2) ApplyAnimation( playerid, "freeweights", "gym_free_A", 1, 0, 0, 0, 1, 0, 1 );
			if(gymtur[playerid] == 3) ApplyAnimation( playerid, "GYMNASIUM", "gym_tread_sprint", 1, 1, 0, 0, 1, 0, 1);
		}
	}
	else
	{
		GameTextForPlayer(playerid, "~r~VASAT!", 450, 4);
		okcDurum[playerid][secilenok[playerid]] = 1;
		secilenok[playerid] += 1;
	}
}
}
}
}

stock OklariSifirla(playerid)
{
	TextDrawHideForPlayer(playerid, gym_0);
	TextDrawHideForPlayer(playerid, gym_1);
	TextDrawHideForPlayer(playerid, kasstat_0);
	TextDrawHideForPlayer(playerid, kasstat_1);
	TextDrawHideForPlayer(playerid, kasstat_2);
	PlayerTextDrawDestroy(playerid, kasstat_4[playerid]);
	PlayerTextDrawDestroy(playerid, kasstat_3[playerid]);
	TextDrawHideForPlayer(playerid, kasstat_5);
	TextDrawHideForPlayer(playerid, kasstat_6);
	for(new i ; i < sizeof(gym); i ++)
	{
		PlayerTextDrawDestroy(playerid, gym[i][playerid]);
	}
	okcX[playerid][0] = 336.000000;
	okcX[playerid][1] = 358.000000;
	okcX[playerid][2] = 380.000000;
	okcX[playerid][3] = 402.000000;
	okcX[playerid][4] = 424.000000;
	okcX[playerid][5] = 446.000000;
	okcX[playerid][6] = 470.000000;
	okcX[playerid][7] = 492.000000;
	okcX[playerid][8] = 514.000000;
	okcX[playerid][9] = 536.000000;
	okcX[playerid][10] = 558.000000;
	okcX[playerid][11] = 580.000000;
	okcX[playerid][12] = 602.000000;
	okcX[playerid][13] = 624.000000;
	okcDurum[playerid][0] = 0;
	okcDurum[playerid][1] = 0;
	okcDurum[playerid][2] = 0;
	okcDurum[playerid][3] = 0;
	okcDurum[playerid][4] = 0;
	okcDurum[playerid][5] = 0;
	okcDurum[playerid][6] = 0;
	okcDurum[playerid][7] = 0;
	okcDurum[playerid][8] = 0;
	okcDurum[playerid][9] = 0;
	okcDurum[playerid][10] = 0;
	okcDurum[playerid][11] = 0;
	okcDurum[playerid][12] = 0;
	okcDurum[playerid][13] = 0;
	SetCameraBehindPlayer(playerid);
	if(OYUNCU_BISIKLETTE[playerid] == true) BISIKLET_KULLANIMDA[KULLANILAN_BISIKLET[playerid]] = false, OYUNCU_BISIKLETTE[playerid] = false;
	if(OYUNCU_DAMBILDA[playerid] == true) DAMBIL_KULLANIMDA[KULLANILAN_DAMBIL[playerid]] = false, OYUNCU_DAMBILDA[playerid] = false;
	if(OYUNCU_BANTTA[playerid] == true) BANT_KULLANIMDA[KULLANILAN_BANT[playerid]] = false, OYUNCU_BANTTA[playerid] = false;
	gymtur[playerid] = 0;
	if(IsPlayerAttachedObjectSlotUsed(playerid, 0)) RemovePlayerAttachedObject(playerid, 0);
	if(IsPlayerAttachedObjectSlotUsed(playerid, 1)) RemovePlayerAttachedObject(playerid, 1);
	return 1;
}

stock AsamaHazirla(playerid)
{
	KillTimer(gymtimer[playerid]),KillTimer(gymtustimer[playerid]);
	TextDrawHideForPlayer(playerid, gym_0);
	TextDrawHideForPlayer(playerid, gym_1);
	for(new i ; i < sizeof(gym); i ++)
	{
		PlayerTextDrawDestroy(playerid, gym[i][playerid]);
	}
	okcDurum[playerid][0] = 0;
	okcDurum[playerid][1] = 0;
	okcDurum[playerid][2] = 0;
	okcDurum[playerid][3] = 0;
	okcDurum[playerid][4] = 0;
	okcDurum[playerid][5] = 0;
	okcDurum[playerid][6] = 0;
	okcDurum[playerid][7] = 0;
	okcDurum[playerid][8] = 0;
	okcDurum[playerid][9] = 0;
	okcDurum[playerid][10] = 0;
	okcDurum[playerid][11] = 0;
	okcDurum[playerid][12] = 0;
	okcDurum[playerid][13] = 0;
	TextDrawShowForPlayer(playerid, gym_0);
	TextDrawShowForPlayer(playerid, gym_1);

	okcX[playerid][0] = 336.000000;
	okcX[playerid][1] = 358.000000;
	okcX[playerid][2] = 380.000000;
	okcX[playerid][3] = 402.000000;
	okcX[playerid][4] = 424.000000;
	okcX[playerid][5] = 446.000000;
	okcX[playerid][6] = 470.000000;
	okcX[playerid][7] = 492.000000;
	okcX[playerid][8] = 514.000000;
	okcX[playerid][9] = 536.000000;
	okcX[playerid][10] = 558.000000;
	okcX[playerid][11] = 580.000000;
	okcX[playerid][12] = 602.000000;
	okcX[playerid][13] = 624.000000;

	gym[0][playerid] = CreatePlayerTextDraw(playerid, 336.000000, 312.000000, "ld_beat:down");
	PlayerTextDrawFont(playerid,gym[0][playerid], 4);
	PlayerTextDrawLetterSize(playerid,gym[0][playerid], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid,gym[0][playerid], 17.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid,gym[0][playerid], 1);
	PlayerTextDrawSetShadow(playerid,gym[0][playerid], 0);
	PlayerTextDrawAlignment(playerid,gym[0][playerid], 1);
	PlayerTextDrawColor(playerid,gym[0][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid,gym[0][playerid], 255);
	PlayerTextDrawBoxColor(playerid,gym[0][playerid], 50);
	PlayerTextDrawUseBox(playerid,gym[0][playerid], 1);
	PlayerTextDrawSetProportional(playerid,gym[0][playerid], 1);
	PlayerTextDrawSetSelectable(playerid,gym[0][playerid], 0);

	gym[1][playerid] = CreatePlayerTextDraw(playerid,358.000000, 312.000000, "ld_beat:down");
	PlayerTextDrawFont(playerid,gym[1][playerid], 4);
	PlayerTextDrawLetterSize(playerid,gym[1][playerid], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid,gym[1][playerid], 17.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid,gym[1][playerid], 1);
	PlayerTextDrawSetShadow(playerid,gym[1][playerid], 0);
	PlayerTextDrawAlignment(playerid,gym[1][playerid], 1);
	PlayerTextDrawColor(playerid,gym[1][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid,gym[1][playerid], 255);
	PlayerTextDrawBoxColor(playerid,gym[1][playerid], 50);
	PlayerTextDrawUseBox(playerid,gym[1][playerid], 1);
	PlayerTextDrawSetProportional(playerid,gym[1][playerid], 1);
	PlayerTextDrawSetSelectable(playerid,gym[1][playerid], 0);

	gym[2][playerid] = CreatePlayerTextDraw(playerid,380.000000, 312.000000, "ld_beat:up");
	PlayerTextDrawFont(playerid,gym[2][playerid], 4);
	PlayerTextDrawLetterSize(playerid,gym[2][playerid], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid,gym[2][playerid], 17.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid,gym[2][playerid], 1);
	PlayerTextDrawSetShadow(playerid,gym[2][playerid], 0);
	PlayerTextDrawAlignment(playerid,gym[2][playerid], 1);
	PlayerTextDrawColor(playerid,gym[2][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid,gym[2][playerid], 255);
	PlayerTextDrawBoxColor(playerid,gym[2][playerid], 50);
	PlayerTextDrawUseBox(playerid,gym[2][playerid], 1);
	PlayerTextDrawSetProportional(playerid,gym[2][playerid], 1);
	PlayerTextDrawSetSelectable(playerid,gym[2][playerid], 0);

	gym[3][playerid] = CreatePlayerTextDraw(playerid,402.000000, 312.000000, "ld_beat:left");
	PlayerTextDrawFont(playerid,gym[3][playerid], 4);
	PlayerTextDrawLetterSize(playerid,gym[3][playerid], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid,gym[3][playerid], 17.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid,gym[3][playerid], 1);
	PlayerTextDrawSetShadow(playerid,gym[3][playerid], 0);
	PlayerTextDrawAlignment(playerid,gym[3][playerid], 1);
	PlayerTextDrawColor(playerid,gym[3][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid,gym[3][playerid], 255);
	PlayerTextDrawBoxColor(playerid,gym[3][playerid], 50);
	PlayerTextDrawUseBox(playerid,gym[3][playerid], 1);
	PlayerTextDrawSetProportional(playerid,gym[3][playerid], 1);
	PlayerTextDrawSetSelectable(playerid,gym[3][playerid], 0);

	gym[4][playerid] = CreatePlayerTextDraw(playerid,424.000000, 312.000000, "ld_beat:right");
	PlayerTextDrawFont(playerid,gym[4][playerid], 4);
	PlayerTextDrawLetterSize(playerid,gym[4][playerid], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid,gym[4][playerid], 17.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid,gym[4][playerid], 1);
	PlayerTextDrawSetShadow(playerid,gym[4][playerid], 0);
	PlayerTextDrawAlignment(playerid,gym[4][playerid], 1);
	PlayerTextDrawColor(playerid,gym[4][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid,gym[4][playerid], 255);
	PlayerTextDrawBoxColor(playerid,gym[4][playerid], 50);
	PlayerTextDrawUseBox(playerid,gym[4][playerid], 1);
	PlayerTextDrawSetProportional(playerid,gym[4][playerid], 1);
	PlayerTextDrawSetSelectable(playerid,gym[4][playerid], 0);

	gym[5][playerid] = CreatePlayerTextDraw(playerid,446.000000, 312.000000, "ld_beat:up");
	PlayerTextDrawFont(playerid,gym[5][playerid], 4);
	PlayerTextDrawLetterSize(playerid,gym[5][playerid], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid,gym[5][playerid], 17.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid,gym[5][playerid], 1);
	PlayerTextDrawSetShadow(playerid,gym[5][playerid], 0);
	PlayerTextDrawAlignment(playerid,gym[5][playerid], 1);
	PlayerTextDrawColor(playerid,gym[5][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid,gym[5][playerid], 255);
	PlayerTextDrawBoxColor(playerid,gym[5][playerid], 50);
	PlayerTextDrawUseBox(playerid,gym[5][playerid], 1);
	PlayerTextDrawSetProportional(playerid,gym[5][playerid], 1);
	PlayerTextDrawSetSelectable(playerid,gym[5][playerid], 0);

	gym[6][playerid] = CreatePlayerTextDraw(playerid,470.000000, 312.000000, "ld_beat:right");
	PlayerTextDrawFont(playerid,gym[6][playerid], 4);
	PlayerTextDrawLetterSize(playerid,gym[6][playerid], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid,gym[6][playerid], 17.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid,gym[6][playerid], 1);
	PlayerTextDrawSetShadow(playerid,gym[6][playerid], 0);
	PlayerTextDrawAlignment(playerid,gym[6][playerid], 1);
	PlayerTextDrawColor(playerid,gym[6][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid,gym[6][playerid], 255);
	PlayerTextDrawBoxColor(playerid,gym[6][playerid], 50);
	PlayerTextDrawUseBox(playerid,gym[6][playerid], 1);
	PlayerTextDrawSetProportional(playerid,gym[6][playerid], 1);
	PlayerTextDrawSetSelectable(playerid,gym[6][playerid], 0);

	gym[7][playerid] = CreatePlayerTextDraw(playerid,492.000000, 312.000000, "ld_beat:down");
	PlayerTextDrawFont(playerid,gym[7][playerid], 4);
	PlayerTextDrawLetterSize(playerid,gym[7][playerid], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid,gym[7][playerid], 17.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid,gym[7][playerid], 1);
	PlayerTextDrawSetShadow(playerid,gym[7][playerid], 0);
	PlayerTextDrawAlignment(playerid,gym[7][playerid], 1);
	PlayerTextDrawColor(playerid,gym[7][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid,gym[7][playerid], 255);
	PlayerTextDrawBoxColor(playerid,gym[7][playerid], 50);
	PlayerTextDrawUseBox(playerid,gym[7][playerid], 1);
	PlayerTextDrawSetProportional(playerid,gym[7][playerid], 1);
	PlayerTextDrawSetSelectable(playerid,gym[7][playerid], 0);

	gym[8][playerid] = CreatePlayerTextDraw(playerid,514.000000, 312.000000, "ld_beat:up");
	PlayerTextDrawFont(playerid,gym[8][playerid], 4);
	PlayerTextDrawLetterSize(playerid,gym[8][playerid], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid,gym[8][playerid], 17.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid,gym[8][playerid], 1);
	PlayerTextDrawSetShadow(playerid,gym[8][playerid], 0);
	PlayerTextDrawAlignment(playerid,gym[8][playerid], 1);
	PlayerTextDrawColor(playerid,gym[8][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid,gym[8][playerid], 255);
	PlayerTextDrawBoxColor(playerid,gym[8][playerid], 50);
	PlayerTextDrawUseBox(playerid,gym[8][playerid], 1);
	PlayerTextDrawSetProportional(playerid,gym[8][playerid], 1);
	PlayerTextDrawSetSelectable(playerid,gym[8][playerid], 0);

	gym[9][playerid] = CreatePlayerTextDraw(playerid,536.000000, 312.000000, "ld_beat:left");
	PlayerTextDrawFont(playerid,gym[9][playerid], 4);
	PlayerTextDrawLetterSize(playerid,gym[9][playerid], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid,gym[9][playerid], 17.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid,gym[9][playerid], 1);
	PlayerTextDrawSetShadow(playerid,gym[9][playerid], 0);
	PlayerTextDrawAlignment(playerid,gym[9][playerid], 1);
	PlayerTextDrawColor(playerid,gym[9][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid,gym[9][playerid], 255);
	PlayerTextDrawBoxColor(playerid,gym[9][playerid], 50);
	PlayerTextDrawUseBox(playerid,gym[9][playerid], 1);
	PlayerTextDrawSetProportional(playerid,gym[9][playerid], 1);
	PlayerTextDrawSetSelectable(playerid,gym[9][playerid], 0);

	gym[10][playerid] = CreatePlayerTextDraw(playerid,558.000000, 312.000000, "ld_beat:left");
	PlayerTextDrawFont(playerid,gym[10][playerid], 4);
	PlayerTextDrawLetterSize(playerid,gym[10][playerid], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid,gym[10][playerid], 17.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid,gym[10][playerid], 1);
	PlayerTextDrawSetShadow(playerid,gym[10][playerid], 0);
	PlayerTextDrawAlignment(playerid,gym[10][playerid], 1);
	PlayerTextDrawColor(playerid,gym[10][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid,gym[10][playerid], 255);
	PlayerTextDrawBoxColor(playerid,gym[10][playerid], 50);
	PlayerTextDrawUseBox(playerid,gym[10][playerid], 1);
	PlayerTextDrawSetProportional(playerid,gym[10][playerid], 1);
	PlayerTextDrawSetSelectable(playerid,gym[10][playerid], 0);

	gym[11][playerid] = CreatePlayerTextDraw(playerid,580.000000, 312.000000, "ld_beat:down");
	PlayerTextDrawFont(playerid,gym[11][playerid], 4);
	PlayerTextDrawLetterSize(playerid,gym[11][playerid], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid,gym[11][playerid], 17.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid,gym[11][playerid], 1);
	PlayerTextDrawSetShadow(playerid,gym[11][playerid], 0);
	PlayerTextDrawAlignment(playerid,gym[11][playerid], 1);
	PlayerTextDrawColor(playerid,gym[11][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid,gym[11][playerid], 255);
	PlayerTextDrawBoxColor(playerid,gym[11][playerid], 50);
	PlayerTextDrawUseBox(playerid,gym[11][playerid], 1);
	PlayerTextDrawSetProportional(playerid,gym[11][playerid], 1);
	PlayerTextDrawSetSelectable(playerid,gym[11][playerid], 0);

	gym[12][playerid] = CreatePlayerTextDraw(playerid,602.000000, 312.000000, "ld_beat:down");
	PlayerTextDrawFont(playerid,gym[12][playerid], 4);
	PlayerTextDrawLetterSize(playerid,gym[12][playerid], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid,gym[12][playerid], 17.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid,gym[12][playerid], 1);
	PlayerTextDrawSetShadow(playerid,gym[12][playerid], 0);
	PlayerTextDrawAlignment(playerid,gym[12][playerid], 1);
	PlayerTextDrawColor(playerid,gym[12][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid,gym[12][playerid], 255);
	PlayerTextDrawBoxColor(playerid,gym[12][playerid], 50);
	PlayerTextDrawUseBox(playerid,gym[12][playerid], 1);
	PlayerTextDrawSetProportional(playerid,gym[12][playerid], 1);
	PlayerTextDrawSetSelectable(playerid,gym[12][playerid], 0);

	gym[13][playerid] = CreatePlayerTextDraw(playerid,624.000000, 312.000000, "ld_beat:right");
	PlayerTextDrawFont(playerid,gym[13][playerid], 4);
	PlayerTextDrawLetterSize(playerid,gym[13][playerid], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid,gym[13][playerid], 17.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid,gym[13][playerid], 1);
	PlayerTextDrawSetShadow(playerid,gym[13][playerid], 0);
	PlayerTextDrawAlignment(playerid,gym[13][playerid], 1);
	PlayerTextDrawColor(playerid,gym[13][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid,gym[13][playerid], 255);
	PlayerTextDrawBoxColor(playerid,gym[13][playerid], 50);
	PlayerTextDrawUseBox(playerid,gym[13][playerid], 1);
	PlayerTextDrawSetProportional(playerid,gym[13][playerid], 1);
	PlayerTextDrawSetSelectable(playerid,gym[13][playerid], 0);

	secilenok[playerid] = 0;
	TogglePlayerControllable(playerid, false);
	gymtimer[playerid] = SetTimerEx("gymvar", 40, 1, "i",playerid);
	gymtustimer[playerid] = SetTimerEx("gymtusvar", 94, 1, "i",playerid);
	return 1;
}

function kilitkirmasuresi(playerid)
{
	if (GetPVarInt(playerid, "kilidikiriyor") > 0) {
		SetPVarInt(playerid, "kilidikiriyor", 0);
		PlayerTextDrawDestroy(playerid, pikilit[0][playerid]);
		PlayerTextDrawDestroy(playerid, pikilit[1][playerid]);
		PlayerTextDrawDestroy(playerid, pikilit[2][playerid]);
		PlayerTextDrawDestroy(playerid, pikilit[3][playerid]);
		PlayerTextDrawHide(playerid, pikilit[4][playerid]);
		TextDrawHideForPlayer(playerid, kilit_0);
		KillTimer(kilitinterval[playerid]);
		KillTimer(kilitkirtimer[playerid]);
		ClearAnimations(playerid);
		KilidiKiriyorum[playerid] = false;
		TogglePlayerControllable(playerid, true);
		SunucuMesaji(playerid, "Belirtilen süre içerisinde aracýn kilidini kýramadýnýz.");
	}
	return 1;
}

function alarmsmssuresi(playerid, id)
{
	new sayi = 0;
	foreach(new i : Player) {
		if(AracBilgi[id][aracSahip] == oyuncuData[i][oID])
		{
			if(sayi == 0) 
				{
					SCM_Ex(i, RENK_SARI, "SMS: %s plakalý aracýnýz tehlikede olabilir. | Sigorta Þirketi", AracBilgi[id][aracPlaka]);
					if(AracBilgi[id][alarmseviye] >= 4)
					{
						SCM_Ex(i, RENK_SARI, "SMS: Polis ekipleri bilgilendirildi. | Sigorta Þirketi");
					}
				}
			sayi ++;
		}
	}
	if(AracBilgi[id][alarmseviye] == 4)
	{
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		for (new i = 0; i != MAKSIMUM_BIRLIK; i ++) if(BirlikBilgi[i][birlikTur] == BIRLIK_POLIS)
		{
			BirlikMesaji(i, COLOR_CIFTLIK, "[911] Birimlerin dikkatine, %s plakalý %s model aracýn çalýndýðý bilgisi alýndý.", AracBilgi[id][aracPlaka], AracModel(AracBilgi[id][aracModel]));
			BirlikMesaji(i, COLOR_CIFTLIK, "Bölge: %s", LokasyonBul(x, y, z));
		}
	}
	if(AracBilgi[id][alarmseviye] == 5) 
	{
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		for (new i = 0; i != MAKSIMUM_BIRLIK; i ++) if(BirlikBilgi[i][birlikTur] == BIRLIK_POLIS)
		{
			BirlikMesaji(i, COLOR_CIFTLIK, "[911] Birimlerin dikkatine, %s plakalý %s model araç çalýnmýþtýr.", AracBilgi[id][aracPlaka], AracModel(AracBilgi[id][aracModel]));
			BirlikMesaji(i, COLOR_CIFTLIK, "Bölge: %s", LokasyonBul(x, y, z));
		}
		foreach(new a : Player)
		{
			if(OyuncuBirlikTuru(a) == BIRLIK_POLIS)
			{
				SetPlayerCheckpoint(a, x, y, z, 5.0);
			}
		}
	}
	return 1;
}

function maractamir(playerid, id, tip)
{
	new query[100];
	if(tip == 0) {
		format(query, sizeof(query), "** %s önündeki araç ile uðraþmayý býrakýr.", OyuncuIsim(playerid));
		ProxDetector(12, playerid, query, RENK_PEMBE);
		SunucuMesaji(playerid, "Aracý baþarýyla tamir ettiniz.");
		AracTamirEt(id);
		TogglePlayerControllable(playerid, true);
		GameTextForPlayer(playerid, "~g~TAMIR EDILDI!", 750, 4);
	}
	else if(tip == 1) {
		format(query, sizeof(query), "** %s önündeki araç ile uðraþmayý býrakýr.", OyuncuIsim(playerid));
		ProxDetector(12, playerid, query, RENK_PEMBE);
		SunucuMesaji(playerid, "Aracý baþarýyla boyadýnýz.");
		AracBilgi[id][aracRenk1] = GetPVarInt(playerid, "tmrenk1");
		AracBilgi[id][aracRenk2] = GetPVarInt(playerid, "tmrenk2");
		Arac_Kaydet(id);
		ChangeVehicleColor(AracBilgi[id][aracYarat], AracBilgi[id][aracRenk1], AracBilgi[id][aracRenk2]);
		TogglePlayerControllable(playerid, true);
		GameTextForPlayer(playerid, "~g~BOYA YAPILDI!", 750, 4);
	}
	return 1;
}


function aracmodifiye(playerid, para, id, compid)
{
	new query[100];
	format(query, sizeof(query), "** %s önündeki araç ile uðraþmayý býrakýr.", OyuncuIsim(playerid));
	ProxDetector(12, playerid, query, RENK_PEMBE);
	SaveComponent(playerid, id, compid);
	ParaEkle(playerid, -para);
	TogglePlayerControllable(playerid, true);
	GameTextForPlayer(playerid, "~g~MODIFIYE YAPILDI!", 750, 4);
	SetPVarInt(playerid, "modifiyeyapiyor", 0);
	ShowPlayerDialog(playerid, DIALOG_ARACMOD, DIALOG_STYLE_LIST, "Modifiye Parçalarý", "Egzos\nÖn Tampon\nArka Tampon\nTavan\nRüzgarlýk\nYan Etekler\nJantlar\nStereo\nHidrolik\nNitro", "Seç", "Iptal");
	return 1;
}

function duzkontakvar(playerid, id)
{
	TogglePlayerControllable(playerid, true);
	SetPVarInt(playerid,"duzkontakyapiyor", 0);
	if(oyuncuData[playerid][oHirsizlikYetenek] == 0)
	{
		if(random(100) < 21)
		{
			if((id = Arac_IDBul(id)) != -1) if(AracBilgi[id][aracBenzin] < 0) return hataMesaji(playerid, "Bu araçta benzin yok.");
			GameTextForPlayer(playerid, "~g~DUZKONTAK BASARILI!", 750, 4);
			/*if(oyuncuData[playerid][oHirsizlikYetenek] < 10) {
				oyuncuData[playerid][oHirsizlikYetenekEXP]++;
				if(oyuncuData[playerid][oHirsizlikYetenekEXP] > 2)
				{
					oyuncuData[playerid][oHirsizlikYetenekEXP] = 0;
					oyuncuData[playerid][oHirsizlikYetenek]++;
					SunucuMesaji(playerid, "Hýrsýzlýk yeteneðiniz yükseldi! Yeni hýrsýzlýk seviyeniz: %d", oyuncuData[playerid][oHirsizlikYetenek]);
				}
			} */
			SetTimerEx("araccalistir", 100, false, "ii", playerid, id);
		}
		else GameTextForPlayer(playerid, "~r~DUZKONTAK BASARISIZ!", 750, 4), hataMesaji(playerid, "Düz kontak baþarýsýz oldu.");
	}
	else if(oyuncuData[playerid][oHirsizlikYetenek] > 0 && oyuncuData[playerid][oHirsizlikYetenek] < 11)
	{
		if(random(100) < (oyuncuData[playerid][oHirsizlikYetenek] * 5) + 20)
		{
			if((id = Arac_IDBul(id)) != -1) if(AracBilgi[id][aracBenzin] < 0) return hataMesaji(playerid, "Bu araçta benzin yok.");
			GameTextForPlayer(playerid, "~g~DUZKONTAK BASARILI!", 750, 4);
			/*if(oyuncuData[playerid][oHirsizlikYetenek] < 10) {
				oyuncuData[playerid][oHirsizlikYetenekEXP]++;
				if(oyuncuData[playerid][oHirsizlikYetenekEXP] > 2)
				{
					oyuncuData[playerid][oHirsizlikYetenekEXP] = 0;
					oyuncuData[playerid][oHirsizlikYetenek]++;
					SunucuMesaji(playerid, "Hýrsýzlýk yeteneðiniz yükseldi! Yeni hýrsýzlýk seviyeniz: %d", oyuncuData[playerid][oHirsizlikYetenek]);
				}
			} */
			SetTimerEx("araccalistir", 100, false, "ii", playerid, id);
		}
		else GameTextForPlayer(playerid, "~r~DUZKONTAK BASARISIZ!", 750, 4), hataMesaji(playerid, "Düz kontak baþarýsýz oldu.");
	}
	return 1;
}

function kilitkirvar(playerid)
{
	if (GetPVarInt(playerid, "kilidikiriyor") == 1)
	{
		static Keys, zud, lrn;
		GetPlayerKeys(playerid, Keys, zud, lrn);
		new pinid, Float:pinPosX, Float:pinPosY;
		for(new i = 0; i < sizeof(pinveri) ; i++)
		{
			if(secilenpin[playerid] == pinveri[i][pininid]) pinid = pinveri[i][pininid], pinPosX = pinveri[i][PinX], pinPosY = pinveri[i][PinY];
		}
		if (zud == KEY_UP)
		{
			if(kilitY[playerid] != 339.000000)
			{
				kilitY[playerid] -= 0.5;
				PlayerTextDrawDestroy(playerid, pikilit[pinid][playerid]);
				CreatePlayerTextDraw(playerid, pinPosX, kilitY[playerid], "mdl-2011:lick");
				PlayerTextDrawFont(playerid, pikilit[pinid][playerid], 4);
				PlayerTextDrawLetterSize(playerid, pikilit[pinid][playerid], 0.600000, 2.000000);
				PlayerTextDrawTextSize(playerid, pikilit[pinid][playerid], 7.000000, 39.500000);
				PlayerTextDrawSetOutline(playerid, pikilit[pinid][playerid], 1);
				PlayerTextDrawSetShadow(playerid, pikilit[pinid][playerid], 0);
				PlayerTextDrawAlignment(playerid, pikilit[pinid][playerid], 1);
				PlayerTextDrawColor(playerid, pikilit[pinid][playerid], -1);
				pinaktif[playerid] = 0;
				if(kilitY[playerid] == pinPosY) PlayerTextDrawColor(playerid, pikilit[pinid][playerid], -2686721),pinaktif[playerid] = 1;
				PlayerTextDrawBackgroundColor(playerid, pikilit[pinid][playerid], 255);
				PlayerTextDrawBoxColor(playerid, pikilit[pinid][playerid], 50);
				PlayerTextDrawUseBox(playerid, pikilit[pinid][playerid], 1);
				PlayerTextDrawSetProportional(playerid, pikilit[pinid][playerid], 1);
				PlayerTextDrawSetSelectable(playerid, pikilit[pinid][playerid], 0);
				PlayerTextDrawShow(playerid, pikilit[pinid][playerid]);
			}
			else PinGeriCek(playerid, pinid, pinPosX);

			if(KilidiKiriyorum[playerid] == true)
			{
				KilidiKiriyorum[playerid] = false;
				PinGeriCek(playerid, pinid, pinPosX);
			}
		}
	}
	return 1;
}


stock PinGeriCek(playerid, pinid, Float:pinPosX)
{
	kilitY[playerid] = 363.000000;
	PlayerTextDrawDestroy(playerid, pikilit[pinid][playerid]);
	CreatePlayerTextDraw(playerid, pinPosX, kilitY[playerid], "mdl-2011:lick");
	PlayerTextDrawFont(playerid, pikilit[pinid][playerid], 4);
	PlayerTextDrawLetterSize(playerid, pikilit[pinid][playerid], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, pikilit[pinid][playerid], 7.000000, 39.500000);
	PlayerTextDrawSetOutline(playerid, pikilit[pinid][playerid], 1);
	PlayerTextDrawSetShadow(playerid, pikilit[pinid][playerid], 0);
	PlayerTextDrawAlignment(playerid, pikilit[pinid][playerid], 1);
	PlayerTextDrawColor(playerid, pikilit[pinid][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, pikilit[pinid][playerid], 255);
	PlayerTextDrawBoxColor(playerid, pikilit[pinid][playerid], 50);
	PlayerTextDrawUseBox(playerid, pikilit[pinid][playerid], 1);
	PlayerTextDrawSetProportional(playerid, pikilit[pinid][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, pikilit[pinid][playerid], 0);
	PlayerTextDrawShow(playerid, pikilit[pinid][playerid]);
	return 1;
}

function WalkAnim(playerid)
{
	new keys, updown, leftright;
	GetPlayerKeys(playerid,keys,updown,leftright);
	if (GetPlayerWalkingStyle(playerid) == WALK_NORMAL)
	{
		if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
			KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_player",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",ytimerhiz,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_player",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_PED)
	{
		if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
			KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_civi",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",ytimerhiz,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_civi",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_GANGSTA)
	{
		if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
			KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",ytimerhiz,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_gang1",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_GANGSTA2)
	{
		if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
			KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_gang2",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",ytimerhiz,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_gang2",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_OLD)
	{
		if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
			KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_old",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",ytimerhiz,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_old",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_FAT_OLD)
	{
		if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
			KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_fatold",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",ytimerhiz,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_fatold",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_FAT)
	{
		if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
			KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_fat",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",ytimerhiz,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_fat",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_LADY)
	{
		if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
			KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",ytimerhiz,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_LADY2)
	{
		if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
			KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WOMAN_walkbusy",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",ytimerhiz,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WOMAN_walkbusy",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_WHORE)
	{
		if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
			KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WOMAN_walkpro",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",ytimerhiz,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WOMAN_walkpro",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_WHORE2)
	{
		if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
			KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WOMAN_walksexy",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",ytimerhiz,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WOMAN_walksexy",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_DRUNK)
	{
		if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
			KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","WALK_drunk",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",ytimerhiz,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","WALK_drunk",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	else if (GetPlayerWalkingStyle(playerid) == WALK_BLIND)
	{
		if ((keys & KEY_WALK && updown & KEY_UP) || (keys & KEY_WALK && updown & KEY_DOWN) || (keys & KEY_WALK && leftright & KEY_LEFT) || (keys & KEY_WALK && leftright & KEY_RIGHT))
		{
			KillTimer(walktime[playerid]);
			ApplyAnimation(playerid,"PED","Walk_Wuzi",4.1,1,1,1,1,1);
			walktime[playerid] = SetTimerEx("WalkAnim",ytimerhiz,0,"d",playerid);
		}
		else ApplyAnimation(playerid,"PED","Walk_Wuzi",4.0,0,0,0,0,1), KillTimer(walktime[playerid]);
	}
	return 1;
}

function HirsizAnim(playerid)
{
	new keys, updown, leftright;
	GetPlayerKeys(playerid,keys,updown,leftright);
	if(Oyuncu_Evde(playerid) != -1)
	{
		if ((updown & KEY_UP) || (updown & KEY_DOWN) || (leftright & KEY_LEFT) || (leftright & KEY_RIGHT))
		{
			ApplyAnimation(playerid, "PED", "Player_Sneak", 4.1, 0, 1, 1, 0, 0, 1);
		}
	}
	else
	{
		ApplyAnimation(playerid,"PED","WALK_player",4.0,0,0,0,0,1), KillTimer(hirsiztime[playerid]);
	}
	return 1;
}


OyuncuIDcek(player[])
{
	new playerid = -1, playername[MAX_PLAYER_NAME+1], numeric = 1;

	if(IsPlayerConnected(strval(player))) {
		for (new i = 0, j = strlen(player); i < j; i++)
		{
			if (player[i] > '9' || player[i] < '0') {
				numeric = 0;
			}
		}
		if(numeric == 1) {
			GetPlayerName(strval(player), playername, sizeof(playername));
			playerid = strval(player);
		} else {
			for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
			{
				if(IsPlayerConnected(i)) {
					GetPlayerName(i, playername, sizeof(playername));
					if(!strcmp(player, playername, true)) {
						playerid = i;
						break;
					}
				}
			}
		}
	}
	if(playerid >= 0) {
		return playerid;
	} else {
		return INVALID_PLAYER_ID;
	}
}

function Grafiti_Yukle()
{
	new rows, mesaj[256];
	cache_get_row_count(rows);
	if(rows)
	{
		new id, yukle, ssw[512];
		while(yukle < rows)
		{
			id = vericek_int(yukle, "grfID");
			format(grfData[id][grfSahip], 128, vericek_varchar(yukle, "grfSahip"));
			format(grfData[id][grfYazi], 128, vericek_varchar(yukle, "grfYazi"));
			format(grfData[id][grfFont], 128, vericek_varchar(yukle, "grfFont"));
			cache_get_value_name(yukle, "grfPozisyonlar", ssw, sizeof(ssw));
			sscanf(ssw, "p<|>ffffff", grfData[id][grfPos][0], grfData[id][grfPos][1], grfData[id][grfPos][2], grfData[id][grfPos][3], grfData[id][grfPos][4], grfData[id][grfPos][5]);

			grfData[id][grfObje] = CreateDynamicObject(19482, grfData[id][grfPos][0], grfData[id][grfPos][1], grfData[id][grfPos][2], grfData[id][grfPos][3], grfData[id][grfPos][4], grfData[id][grfPos][5]);
			SetDynamicObjectMaterial(grfData[id][grfObje], 0, 0, "none", "none", 0);
			SetDynamicObjectMaterialText(grfData[id][grfObje], 0, grfData[id][grfYazi], OBJECT_MATERIAL_SIZE_256x128, grfData[id][grfFont], 24, 1, 0xFFFFFFFF, 0, 0);
			Iter_Add(Grafitiler, id);
			yukle++;
		}
	}
	if(rows < 1) format(mesaj, sizeof(mesaj), "[SUNUCU] Veritabanýnda sunucuya entegre edilecek graffiti bulunamadý!");
	else if(rows > 0) format(mesaj, sizeof(mesaj), "[SUNUCU] %d adet graffiti yüklendi.", rows);
	printf(mesaj);
	return 1;
}

function Npcleri_Yukle()
{
	static rows, fields, mesaj[128];

	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for (new i = 0; i < rows; i ++) if(i < MAX_AKTOR)
	{
		npcData[i][npcKullanim] = true;

		npcData[i][npcSQL] = vericek_int(i, "npcID");
		npcData[i][npcSkin] = vericek_int(i, "npcSkin");
		npcData[i][npcTur] = vericek_int(i, "npcTur");
		format(npcData[i][npcAnimlib], 50, "%s", vericek_varchar(0, "npcAnimlib"));
		format(npcData[i][npcAnimname], 50, "%s", vericek_varchar(0, "npcAnimname"));
		format(npcData[i][npcYazi], 512, "%s", vericek_varchar(0, "npcLabel"));
		npcData[i][npcPos][0] = vericek_float(i, "npcX");
		npcData[i][npcPos][1] = vericek_float(i, "npcY");
		npcData[i][npcPos][2] = vericek_float(i, "npcZ");
		npcData[i][npcPos][3] = vericek_float(i, "npcR");

		new str[512];
		switch(npcData[i][npcTur])
		{
			case 0:{
				format(str, sizeof(str), "%s",npcData[i][npcYazi]);
			}
			case 1:{
				format(str, sizeof(str), "[CPT. Vice]\n\n{F2F2F2}Etkileþime geçmek için {F2EE44}Y{F2F2F2} tuþuna basýnýz.");
			}
			case 2:{
				format(str, sizeof(str), "[Mermi Tüccarý]\n\n{F2F2F2}Dialog kurmak için {F2EE44}Y{F2F2F2} tuþuna basýnýz.");
			}
		}
		npcData[i][npcLabel] = CreateDynamic3DTextLabel(str, -1, npcData[i][npcPos][0], npcData[i][npcPos][1], npcData[i][npcPos][2] + 1.1, 6.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);
		npcData[i][npcAktor] = CreateActor(npcData[i][npcSkin], npcData[i][npcPos][0], npcData[i][npcPos][1], npcData[i][npcPos][2], npcData[i][npcPos][3]);
		AktorAnimYenile(i);
	}
	if(rows < 1) format(mesaj, sizeof(mesaj), "[SUNUCU] Veritabanýnda sunucuya entegre edilecek npc bulunamadý!");
	else if(rows > 0) format(mesaj, sizeof(mesaj), "[SUNUCU] %d adet npc yüklendi.", rows);
	printf(mesaj);
	return 1;
}

stock VergiAlgoritma(aracid, tur[32] = "-")
{
	new fiyat = 0, index = FiyatIndexCek(GetVehicleModel(aracid));
	if(index != -1)
	{
		if(!strcmp(tur, "max", true))
		{
			fiyat = SatilikAraclar[index][1] / VERGI_MAX_BOLU;
		}
		else if(!strcmp(tur, "saatlik", true))
		{
			if(SatilikAraclar[index][1] <= 25000)
			{
				fiyat = SatilikAraclar[index][1] / VERGI_BOLU / VERGI_SAAT;
			}
			else if(SatilikAraclar[index][1] > 25000)
			{
				fiyat = SatilikAraclar[index][1] / VERGI_BOLU / VERGI_ORTA_SAAT;
			}
		}
	}
	return fiyat;
}

stock IsyeriGelirAlgoritma(isyeriid)
{
	new fiyat = 0;
	fiyat = IsyeriBilgi[isyeriid][isyeriFiyat] / ISYERI_SAATLIK_BOLU / ISYERI_GELIR_SAAT;
	return fiyat;
}

stock npc_Sil(npcid)
{
	if(npcid != -1 && npcData[npcid][npcKullanim])
	{
		static query[64];

		mysql_format(g_SQL, query, sizeof(query), "DELETE FROM `npcler` WHERE `npcID` = '%d'", npcData[npcid][npcSQL]);
		mysql_tquery(g_SQL, query);

		DestroyActor(npcData[npcid][npcAktor]);
		if(IsValidDynamic3DTextLabel(npcData[npcid][npcLabel])) DestroyDynamic3DTextLabel(npcData[npcid][npcLabel]);
		npcData[npcid][npcKullanim] = false;
		npcData[npcid][npcSQL] = 0;
		npcData[npcid][npcSkin] = 0;
		format(npcData[npcid][npcAnimlib], 50, "none");
		format(npcData[npcid][npcAnimname], 50, "none");
		format(npcData[npcid][npcYazi], 512, "-");
		for(new i ; i < 4; i++){npcData[npcid][npcPos][i] = 0.0;}
	}
return 1;
}

stock SetPlayerWalkingStyle(playerid, style)
{
	WalkStyle[playerid] = style;
}

stock GetPlayerWalkingStyle(playerid)
{
	return WalkStyle[playerid];
}

stock BacakKontrolu(playerid)
{
	for(new i ; i < MAKSIMUM_HASAR; i++)
	{
		switch(HasarBilgi[playerid][i][hasarBolge])
		{
			case 7,8: return 1;
		}
	}
	return 0;
}

stock SendNearbyMessage(playerid, Float:uzaklik, string[], col1, col2, col3, col4, col5, bool:ooc = false)
{
	foreach(new i : Player)
	{
		if(GetPlayerInterior(playerid) == GetPlayerInterior(i) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i))
		{
			if(ooc == true)
			{
				if(oyuncuData[i][pOOC] == true)
				{
					SendNearbyMessage_(playerid, i, uzaklik, string, col1, col2, col3, col4, col5);
				}
			}
			else SendNearbyMessage_(playerid, i, uzaklik, string, col1, col2, col3, col4, col5);
		}
	}
	return 1;
}

stock SendNearbyMessage_(playerid, i, Float:uzaklik, string[], col1, col2, col3, col4, col5)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	new Float:ix, Float:iy, Float:iz;
	new Float:cx, Float:cy, Float:cz;

	GetPlayerPos(i, ix, iy, iz);
	cx = (x - ix);
	cy = (y - iy);
	cz = (z - iz);
	if(((cx < uzaklik/16) && (cx > -uzaklik/16)) && ((cy < uzaklik/16) && (cy > -uzaklik/16)) && ((cz < uzaklik/16) && (cz > -uzaklik/16)))
	{
		SendClientMessage(i, col1, string);
	}
	else if(((cx < uzaklik/8) && (cx > -uzaklik/8)) && ((cy < uzaklik/8) && (cy > -uzaklik/8)) && ((cz < uzaklik/8) && (cz > -uzaklik/8)))
	{
		SendClientMessage(i, col2, string);
	}
	else if(((cx < uzaklik/4) && (cx > -uzaklik/4)) && ((cy < uzaklik/4) && (cy > -uzaklik/4)) && ((cz < uzaklik/4) && (cz > -uzaklik/4)))
	{
		SendClientMessage(i, col3, string);
	}
	else if(((cx < uzaklik/2) && (cx > -uzaklik/2)) && ((cy < uzaklik/2) && (cy > -uzaklik/2)) && ((cz < uzaklik/2) && (cz > -uzaklik/2)))
	{
		SendClientMessage(i, col4, string);
	}
	else if(((cx < uzaklik) && (cx > -uzaklik)) && ((cy < uzaklik) && (cy > -uzaklik)) && ((cz < uzaklik) && (cz > -uzaklik)))
	{
		SendClientMessage(i, col5, string);
	}
	return 1;
}

stock BirlikBilgiText(playerid, string[])
{
	new str[32 * 2];
	for (new i, l = strlen(string); i != l; i++)
	{
		switch(string[i])
		{
			case 'ý': string[i] = 'i';
			case 'ð': string[i] = 'g';
			case 'ü': string[i] = 'u';
			case 'þ': string[i] = 's';
			case 'ö': string[i] = 'o';
			case 'ç': string[i] = 'c';
			case 'Ð': string[i] = 'G';
			case 'Ü': string[i] = 'U';
			case 'Þ': string[i] = 'S';
			case 'Ý': string[i] = 'I';
			case 'Ö': string[i] = 'O';
			case 'Ç': string[i] = 'C';
		}
	}
	format(str, sizeof(str), "%s", string);
	PlayerTextDrawSetString(playerid, bolge_1[playerid], str);
	PlayerTextDrawShow(playerid, bolge_1[playerid]);
	return 1;
}

stock DCMesaj(string[], kanal)
{
	new str[128 * 2];
	for (new i, l = strlen(string); i != l; i++)
	{
		switch(string[i])
		{
			case 'ý': string[i] = 'i';
			case 'ð': string[i] = 'g';
			case 'ü': string[i] = 'u';
			case 'þ': string[i] = 's';
			case 'ö': string[i] = 'o';
			case 'ç': string[i] = 'c';
			case 'Ð': string[i] = 'G';
			case 'Ü': string[i] = 'U';
			case 'Þ': string[i] = 'S';
			case 'Ý': string[i] = 'I';
			case 'Ö': string[i] = 'O';
			case 'Ç': string[i] = 'C';
		}
	}
	if(kanal == 0)
	{
	format(str, sizeof(str), "`%s`", string);
	DCC_SendChannelMessage(reklamkanali, string);
	}
	else if(kanal == 1)
	{
	format(str, sizeof(str), "`%s`", string);
	DCC_SendChannelMessage(sokakkanali, string);	
	}
	return 1;
}

stock IsBilgiText(playerid, string[], sure = 2000)
{
	new str[128 * 2];
	for (new i, l = strlen(string); i != l; i++)
	{
		switch(string[i])
		{
			case 'ý': string[i] = 'i';
			case 'ð': string[i] = 'g';
			case 'ü': string[i] = 'u';
			case 'þ': string[i] = 's';
			case 'ö': string[i] = 'o';
			case 'ç': string[i] = 'c';
			case 'Ð': string[i] = 'G';
			case 'Ü': string[i] = 'U';
			case 'Þ': string[i] = 'S';
			case 'Ý': string[i] = 'I';
			case 'Ö': string[i] = 'O';
			case 'Ç': string[i] = 'C';
		}
	}
	format(str, sizeof(str), "%s", string);
	PlayerTextDrawSetString(playerid, IsyeriTextdraw[playerid], str);
	KillTimer(IsBilgiTextTimer[playerid]);
	BilgiTextTimer[playerid] = SetTimerEx("IsBilgiTextBitir", sure, false, "d", playerid);
	PlayerTextDrawShow(playerid, IsyeriTextdraw[playerid]);
	return 1;
}

function IsBilgiTextBitir(playerid)
{
	KillTimer(IsBilgiTextTimer[playerid]);
	PlayerTextDrawHide(playerid, IsyeriTextdraw[playerid]);
	return 1;
}

stock BilgiText(playerid, string[], sure = 2000)
{
	new str[128 * 2];
	for (new i, l = strlen(string); i != l; i++)
	{
		switch(string[i])
		{
			case 'ý': string[i] = 'i';
			case 'ð': string[i] = 'g';
			case 'ü': string[i] = 'u';
			case 'þ': string[i] = 's';
			case 'ö': string[i] = 'o';
			case 'ç': string[i] = 'c';
			case 'Ð': string[i] = 'G';
			case 'Ü': string[i] = 'U';
			case 'Þ': string[i] = 'S';
			case 'Ý': string[i] = 'I';
			case 'Ö': string[i] = 'O';
			case 'Ç': string[i] = 'C';
		}
	}
	format(str, sizeof(str), "%s", string);
	PlayerTextDrawSetString(playerid, Bilgi[playerid], str);
	KillTimer(BilgiTextTimer[playerid]);
	BilgiTextTimer[playerid] = SetTimerEx("BilgiTextBitir", sure, false, "d", playerid);
	PlayerTextDrawShow(playerid, Bilgi[playerid]);
	return 1;
}

function tahtasifirtimer(playerid)
{
	if(IsValidDynamicObject(tmpobj1[playerid])){DestroyDynamicObject(tmpobj1[playerid]);}
	if(IsValidDynamicObject(tmpobj2[playerid])){DestroyDynamicObject(tmpobj2[playerid]);}
	return 1;
}

function BilgiTextBitir(playerid)
{
	KillTimer(BilgiTextTimer[playerid]);
	PlayerTextDrawHide(playerid, Bilgi[playerid]);
	return 1;
}

stock EditlemeSifirla(playerid)
{
	if(oyuncuData[playerid][oDuzenlenenPompa] != -1)
	{
		Pompa_Yenile(oyuncuData[playerid][oDuzenlenenPompa]);
		//oyuncuData[playerid][pGasStation] = -1;
	}
	if(oyuncuData[playerid][oATMDuzenliyor] != -1) ATM_Yenile(oyuncuData[playerid][oATMDuzenliyor]);
	oyuncuData[playerid][oDuzenlemeTipi] = 0;
	oyuncuData[playerid][oEditlenenObje] = -1;
	oyuncuData[playerid][oEditlenenBarikat] = -1;
	oyuncuData[playerid][oATMDuzenliyor] = -1;
	oyuncuData[playerid][uDuzenliyor] = -1;
	oyuncuData[playerid][oDuzenlenenPompa] = -1;
	return 1;
}

stock OyuncuSifirla(playerid)
{
	if(oyuncuData[playerid][oKameraman] == 1)
		FirmaInfo[oyuncuData[playerid][oFirma]][fKameraman] = INVALID_PLAYER_ID, oyuncuData[playerid][oKameraman] = 0;

	if(BoomboxBilgi[playerid][boomboxKullanimda]) Boombox_Kaldir(playerid);
    for (new i; i < 17; i++)
    {
        WeaponSettings[playerid][i][Position][0] = -0.116;
        WeaponSettings[playerid][i][Position][1] = 0.189;
        WeaponSettings[playerid][i][Position][2] = 0.088;
        WeaponSettings[playerid][i][Position][3] = 0.0;
        WeaponSettings[playerid][i][Position][4] = 44.5;
        WeaponSettings[playerid][i][Position][5] = 0.0;
        WeaponSettings[playerid][i][Bone] = 1;
        WeaponSettings[playerid][i][Hidden] = false;
    }
    WeaponTick[playerid] = 0;
    EditingWeapon[playerid] = 0;
    sonkomut[playerid] = 0;
    SetPVarInt(playerid, "TeknedeBalikTutuyor", 0);
	DeletePVar(playerid, "TeknedeBalikTutuyor");
    MoneyBet[playerid] = 0;
	BetOnHorse[playerid] = 0;
	Watching[playerid] = 0;
	oyuncuData[playerid][oYayinDavet] = -1;
	oyuncuData[playerid][oTelefonHoparlor] = 0;
	oyuncuData[playerid][oBalikTutmaSinir] = 0;
	KillTimer(oyuncuData[playerid][oBagimlilikTimerEx]);
	oyuncuData[playerid][oGYMHak] = 0;
	oyuncuData[playerid][oAMesajKapat] = 0;
	oyuncuData[playerid][pYayinID] = -1;
	oyuncuData[playerid][oYarisID] = -1;
	oyuncuData[playerid][oYarisDavet] = -1;
	oyuncuData[playerid][oYarisKalanSure] = -1;
	oyuncuData[playerid][oYarisCP] = -1;
	oyuncuData[playerid][oYarisSiralama] = -1;
	oyuncuData[playerid][oYarisKatilimci] = 0;
	SetPVarInt(playerid, "BirYarista", 0);
	oyuncuData[playerid][oBagimlilikTimer] = -1;
	oyuncuData[playerid][oGirisTest] = 0;
	oyuncuData[playerid][oKiyafet] = 299;
	SnakeCamDurum[playerid] = -1;
	oyuncuData[playerid][oGeciciKiyafet] = 0;
	oyuncuData[playerid][oAdmin] = 0;
	oyuncuData[playerid][oHelper] = 0;
	oyuncuData[playerid][oikixpayday] = 0;
	oyuncuData[playerid][oGizliIsim] = false;
	oyuncuData[playerid][oKonteynSatabilir] = 0;
	oyuncuData[playerid][oBakilanRapor] = 0;
	oyuncuData[playerid][oBakilanSoru] = 0;
	oyuncuData[playerid][oTirGuzergah] = 0;
	oyuncuData[playerid][oRadyoDinliyor] = false;
	oyuncuData[playerid][oKokuDurum] = 0;
	oyuncuData[playerid][oBirikenKoku] = 0;
	oyuncuData[playerid][oPDPC] = false;
	oyuncuData[playerid][oSatisYapiyor] = false;
	oyuncuData[playerid][oAtYarisi] = 0;
	oyuncuData[playerid][oAtBahis] = 0;
	oyuncuData[playerid][oOynananAt] = 0;
	tackleDurum[playerid] = 0;
	oyuncuData[playerid][oViceCoin] = 0;
	oyuncuData[playerid][oVicePoint] = 0;
	oyuncuData[playerid][oGozalti] = 0;
	oyuncuData[playerid][oSSModu] = false;
	oyuncuData[playerid][oHUD] = false;
	oyuncuData[playerid][oPremiumSkin][0] = 0;
	oyuncuData[playerid][oPremiumSkin][1] = 0;
	oyuncuData[playerid][oPremiumSkin][2] = 0;
	oyuncuData[playerid][oSecilenBisiklet] = 0;
	oyuncuData[playerid][oBisikletRenkBir] = -1;
	oyuncuData[playerid][oBisikletRenkIki] = -1;
	oyuncuData[playerid][oAracCalmaSiniri] = 2;
	format(oyuncuData[playerid][oTruckerKod], 16, "-");
	oyuncuData[playerid][oTruckerKodiste] = false;
	oyuncuData[playerid][oTruckerBasari] = false;
	oyuncuData[playerid][oYetenekSifirlamaHakki] = 0;
	oyuncuData[playerid][oIsimDegisimHakki] = 0;
	oyuncuData[playerid][oOzelSkinAksesuar] = 0;
	oyuncuData[playerid][oBesYetenekPuani] = 0;
	oyuncuData[playerid][oOnYetenekPuani] = 0;
	oyuncuData[playerid][oOnBesYetenekPuani] = 0;
	oyuncuData[playerid][oBisikletHakki] = 0;
	oyuncuData[playerid][oTelefonDegisimHakki] = 0;
	oyuncuData[playerid][oBankaHesapDegisimHakki] = 0;
	oyuncuData[playerid][oDortXExp] = 0;
	oyuncuData[playerid][oMeslekPaketi] = 0;
	oyuncuData[playerid][oMaskeHakki] = 0;
	oyuncuData[playerid][oEkonomiPaketi] = 0;
	oyuncuData[playerid][oCoolAracPaketi] = 0;
	oyuncuData[playerid][oMobilyaPaketi] = 0;
	oyuncuData[playerid][oPlakaDegisimHakki] = 0;
	oyuncuData[playerid][oVIP] = 0;
	oyuncuData[playerid][oOtelSaat] = 0;
	oyuncuData[playerid][oHelper] = 0;
	oyuncuData[playerid][vicemarketyeniplaka] = 0;
	oyuncuData[playerid][vicemarketyeniisim] = -1;
	oyuncuData[playerid][oInterior] = 0;
	oyuncuData[playerid][oVW] = 0;
	oyuncuData[playerid][oyuncuban] = 0;
	format(oyuncuData[playerid][oAdminNick], 20, "Yok");
	format(oyuncuData[playerid][oDogumYeri], 32, "Yok");
	format(oyuncuData[playerid][oForumAdi], 24, "Belirlenmemiþ");
	oyuncuData[playerid][oKarakterYaratildi] = 0;
	oyuncuData[playerid][oDogumTarihi][0] = 0;
	oyuncuData[playerid][oCinsiyet] = 0;
	oyuncuData[playerid][oYayinda] = 0;
	for (new i = 0; i < 4; i++)
	{
		OyuncuKarakter[playerid][i][0] = 0;
		OyuncuKarakterSkin[playerid][i] = 0;
	}
	TransportCost[playerid] = 0;
	TransportTime[playerid] = 0;
	TransportDriver[playerid] = 999;
	TransportValue[playerid] = 0;
	TransportDuty[playerid] = 0;
	SandalyeObjem[playerid] = -1;
	TezgahObjesi[playerid] = -1;
	CadirObjem[playerid] = -1;
 	HirsizDurum[playerid] = false;
	truckerseviyebirde[playerid] = 0;
	truckerseviyeikide[playerid] = 0;
	truckerseviyeucte[playerid] = 0;
	SprunkKullanim[playerid] = false;
	oyuncuData[playerid][oAdminGizle] = false;
	oyuncuData[playerid][oAdminDurum] = false;
	oyuncuData[playerid][oHelperIsbasi] = false;
	oyuncuData[playerid][oFirmaisbasi] = false;
	oyuncuData[playerid][oPMDurum] = true;
	oyuncuData[playerid][oPMIzlemeDurum] = false;
	oyuncuData[playerid][oSeviye] = 1;
	oyuncuData[playerid][oExp] = 0;
	oyuncuData[playerid][oDakika] = 0;
	oyuncuData[playerid][oMaasDakika] = 0;
	oyuncuData[playerid][oyuncuboy] = 0;
	oyuncuData[playerid][oyuncukilo] = 0;
	oyuncuData[playerid][oyemsayisi] = 0;
	oyuncuData[playerid][balikexp] = 0;
	oyuncuData[playerid][balikseviye] = 0;
	oyuncuData[playerid][oOynamaSaati] = 0;
	oyuncuData[playerid][oTruckerSeviye] = 0;
	oyuncuData[playerid][oTruckerEXP] = 0;
	oyuncuData[playerid][oKiyafetDolabi][0] = 0;
	oyuncuData[playerid][oKiyafetDolabi][1] = 0;
	oyuncuData[playerid][oKiyafetDolabi][2] = 0;
	oyuncuData[playerid][oYetenekPuani] = 0;
	oyuncuData[playerid][oLiderlikYetenek] = 0;
	oyuncuData[playerid][oSurusYetenek] = 0;
	oyuncuData[playerid][oKimyaYetenek] = 0;
	oyuncuData[playerid][oHirsizlikYetenek] = 0;
	oyuncuData[playerid][oUretimYetenek] = 0;
	oyuncuData[playerid][oGucYetenek] = 0;
	oyuncuData[playerid][oDayaniklilik] = 0;
	oyuncuData[playerid][oDayaniklilikEXP] = 0;
	oyuncuData[playerid][oLiderlikYetenekEXP] = 0;
	oyuncuData[playerid][oSurusYetenekEXP] = 0;
	oyuncuData[playerid][oKimyaYetenekEXP] = 0;
	oyuncuData[playerid][oHirsizlikYetenekEXP] = 0;
	oyuncuData[playerid][oUretimYetenekEXP] = 0;
	oyuncuData[playerid][oGucYetenekEXP] = 0;
	oyuncuData[playerid][oBalik][0] = 0;
	oyuncuData[playerid][oBalik][1] = 0;
	oyuncuData[playerid][oBalik][2] = 0;
	oyuncuData[playerid][oBalik][3] = 0;
	oyuncuData[playerid][oBalik][4] = 0;
	oyuncuData[playerid][oPara] = 0;
	oyuncuData[playerid][oAclik] = 100;
	oyuncuData[playerid][oSusuzluk] = 100;
	oyuncuData[playerid][oAclikSure] = 0;
	oyuncuData[playerid][oSusuzlukSure] = 0;
	oyuncuData[playerid][oBirlik] = -1;
	oyuncuData[playerid][oBirlikDavetEden] = -1;
	oyuncuData[playerid][oBirlikRutbe] = 0;
	oyuncuData[playerid][oEditlenenObje] = -1;
	oyuncuData[playerid][oDuzenlemeTipi] = 0;
	oyuncuData[playerid][oYaraliSure] = 0;
	oyuncuData[playerid][oYarali] = false;
	oyuncuData[playerid][oTenRengi] = 0;
	oyuncuData[playerid][oSonBinilenArac] = 0;
	oyuncuData[playerid][oBeanbag] = false;
	oyuncuData[playerid][oTaser] = false;
	oyuncuData[playerid][oIsbasi] = false;
	oyuncuData[playerid][oDonduruldu] = 0;
	oyuncuData[playerid][oKelepceli] = 0;
	oyuncuData[playerid][oEhliyet] = false;
	oyuncuData[playerid][oUcusLisansi] = 0;
	oyuncuData[playerid][oEhliyetTesti] = 0;
	oyuncuData[playerid][oKibrit] = 0;
	oyuncuData[playerid][oCakmak] = false;
	oyuncuData[playerid][oOdun] = 0;
	oyuncuData[playerid][oKampAtesi] = false;
	oyuncuData[playerid][oATMDuzenliyor] = -1;
	oyuncuData[playerid][oHesapNumarasi] = 0;
	oyuncuData[playerid][oBankaPara] = 0;
	oyuncuData[playerid][oSigara] = 0;
	oyuncuData[playerid][oSigaraDurum] = 0;
	oyuncuData[playerid][oSigaraIciyor] = 0;
	oyuncuData[playerid][oSigaraKalanHak] = 0;
	oyuncuData[playerid][oTamirSure] = 0;
	oyuncuData[playerid][oTelefon] = 0;
	oyuncuData[playerid][oTelefonNumarasi] = 0;
	oyuncuData[playerid][oTelefonDurum] = true;
	oyuncuData[playerid][oArama] = -1;
	oyuncuData[playerid][oKonumKisi] = -1;
	oyuncuData[playerid][oAramaSure] = -1;
	oyuncuData[playerid][oCevaplandi] = false;
	oyuncuData[playerid][oDestek] = false;
	oyuncuData[playerid][oSaksi] = 0;
	oyuncuData[playerid][oGubre] = 0;
	oyuncuData[playerid][oVantilator] = 0;
	oyuncuData[playerid][oKulaklik] = 0;
	oyuncuData[playerid][oKarakterDurum] = 0;
	oyuncuData[playerid][oKulaklikTakiyor] = false;
	oyuncuData[playerid][oMuzikDinliyor] = false;
	oyuncuData[playerid][oTohum] = 0;
	oyuncuData[playerid][oUyusturucu][0] = 0;
	oyuncuData[playerid][oUyusturucu][1] = 0;
	oyuncuData[playerid][oUyusturucu][2] = 0;
	oyuncuData[playerid][oLamba] = 0;
	oyuncuData[playerid][oBakim] = -1;
	oyuncuData[playerid][oUyusturucuOnay] = 0;
	oyuncuData[playerid][oJetpack] = false;
	oyuncuData[playerid][oHapisSure][0] = 0;
	oyuncuData[playerid][oHapisSure][1] = 0;
	oyuncuData[playerid][oyuncuKod][0] = 0;
	oyuncuData[playerid][oVatandaslikNo] = 0;
	oyuncuData[playerid][oRuhsat] = 0;
	oyuncuData[playerid][oHapisID] = -1;
	oyuncuData[playerid][oGozBagli] = false;
	oyuncuData[playerid][uDuzenliyor] = -1;
	oyuncuData[playerid][oKontrol] = true;
	oyuncuData[playerid][oMeslek] = -1;
	oyuncuData[playerid][oTaksiIsbasi] = false;
	oyuncuData[playerid][oEkstraDil] = 0;
	oyuncuData[playerid][oUcuncuDil] = 0;
	oyuncuData[playerid][oUcuncuDilHakki] = 0;
	oyuncuData[playerid][oSu] = 0;
	oyuncuData[playerid][oGazoz] = 0;
	oyuncuData[playerid][oBira] = 0;
	oyuncuData[playerid][oVodka] = 0;
	oyuncuData[playerid][oViski] = 0;
	oyuncuData[playerid][oIcecek] = 0;
	oyuncuData[playerid][oIcecekHak] = 0;
	oyuncuData[playerid][oEditlenenBarikat] = -1;
	oyuncuData[playerid][oDuzenlenenPompa] = -1;
	oyuncuData[playerid][oDuzenlenenGrafiti] = -1;
	oyuncuData[playerid][oDuzenlenenYazi] = -1;
	oyuncuData[playerid][oGraffitiSure] = 0;
	oyuncuData[playerid][oBoombox] = INVALID_PLAYER_ID;
	oyuncuData[playerid][oMuzikKutusu] = 0;
	BenzinAliyor[playerid] = -1;
	BenzinIsyeri[playerid] = -1;
	SonPM[playerid] = -1;
	oyuncuData[playerid][oAsansor] = -1;
	oyuncuData[playerid][oEhliyetUyari] = 0;
	oyuncuData[playerid][oPDEhliyetUyari] = 0;
	oyuncuData[playerid][oPDgps] = false;
	oyuncuData[playerid][oBagaj] = 0;
	ElKoy[playerid] = -1;
	SetPVarInt(playerid, "aracsatan", -1);
	SetPVarInt(playerid, "satilanarac", -1);
	SetPVarInt(playerid, "aracfiyat", -1);
	SetPVarInt(playerid, "evsatan", -1);
	SetPVarInt(playerid, "satilanev", -1);
	SetPVarInt(playerid, "evfiyat", -1);
	SetPVarInt(playerid, "isyerisatan", -1);
	SetPVarInt(playerid, "satilanisyeri", -1);
	SetPVarInt(playerid, "isyerifiyat", -1);
	SetPVarInt(playerid, "mNumara", 0);
	SetPVarInt(playerid, "Oy", 0);
	SetPVarInt(playerid, "ustarayan", INVALID_PLAYER_ID);
	SetPVarInt(playerid, "uoneren", INVALID_PLAYER_ID);
	SetPVarInt(playerid, "umiktar", 0);
	SetPVarInt(playerid, "utur", -1);
	SetPVarInt(playerid, "gozbaglayanid", INVALID_PLAYER_ID);
	SetPVarInt(playerid, "anahtarsahip", INVALID_PLAYER_ID);
	SetPVarInt(playerid, "evanahtaroneren", INVALID_PLAYER_ID);
	SetPVarInt(playerid, "dialog", -1);
	SetPVarInt(playerid, "anim", 0);
	for (new i = 0; i != MAKSIMUM_HASAR; i ++) {
		HasarBilgi[playerid][i][hasarVarmi] = false;
		HasarBilgi[playerid][i][hasarBolge] = 0;
		HasarBilgi[playerid][i][hasarVeren] = INVALID_PLAYER_ID;
		HasarBilgi[playerid][i][hasarDeger] = 0;
		HasarBilgi[playerid][i][hasarSilah] = 0;
	}
	oyuncuData[playerid][oIzlenen] = INVALID_PLAYER_ID;
	TextdrawlariYarat(playerid);
	for (new i = 0; i < 12; i ++) {
		oyuncuData[playerid][oSilah][i] = 0;
		oyuncuData[playerid][oMermi][i] = 0;
	}
	SetPVarInt(playerid, "state", GetTickCount());
	IcecekBeklemeSuresi[playerid] = 0;
	BoomboxBilgi[playerid][boomboxKullanimda] = 0;
	BoomboxBilgi[playerid][boomboxPos][0] = 0.0;
	BoomboxBilgi[playerid][boomboxPos][1] = 0.0;
	BoomboxBilgi[playerid][boomboxPos][2] = 0.0;
	return 1;
}

public OnIncomingConnection(playerid, ip_address[], port)
{
	return 1;
}

function VC_Kontrol(playerid)
{
	oyuncuData[playerid][oForumID] = -1;
	new isimcek[MAX_PLAYER_NAME];
	GetPlayerName(playerid, isimcek, sizeof(isimcek));
	if(!strcmp(isimcek, "Nitro_", false, 6))
	{
		strdel(isimcek, 0, 6);
		//SetPlayerName(playerid, isimcek);
		foreach(new i : Player)
		{
			if(oyuncuData[i][oForumID] == strval(isimcek))
			{
				return hataMesaji(playerid, "Sadece bir karakter ile sunucuya giriþ yapabilirsiniz."), KickEx(playerid);
			}
		}
		oyuncuData[playerid][oForumID] = strval(isimcek);
		//printf("%d", oyuncuData[playerid][oForumID]);
	}
	else SohbetTemizle(playerid, false), hataMesaji(playerid, "Giriþ formatý Nitro_id olmalýdýr. Örnek: Nitro_1"), KickEx(playerid);
	return 1;
}

public OnPlayerConnect(playerid)
{
	g_IsPaused[playerid] = false;
    g_Requesting[playerid] = false;
	GodMode[playerid] = false;
	VC_Kontrol(playerid);
	if(IsPlayerNPC(playerid))
	{
		SetPlayerColor(playerid, RENK_VARSAYILAN);
	}
	// At Yarýþý
	Watching[playerid] = 0;
	// Oyun Modu
	oyuncuData[playerid][oUmiktar] = 0;
	oyuncuData[playerid][pDakikaTimeri] = 0;
	for(new i ; i < sizeof(MDC_SucluSQL); i++){MDC_SucluSQL[playerid][i] = -1;}
	DeletePVar(playerid, "IcecekCani");
	CreatePlayerTextDraws( playerid );
	ResetTuningInfo( playerid );
	KilidiKiriyorum[playerid] = false;
	oyuncuData[playerid][oHileUyari] = 0;
	oyuncuData[playerid][oTaksiCagrisi] = false;
	format(oyuncuData[playerid][oTaksiCagriKonum], 128, "");
	SetPVarInt(playerid, "asansorTusAyarla", -1);
	SetPVarInt(playerid, "asansorDuzenleID", -1);
	oyuncuData[playerid][oKulaklikTakiyor] = false;
	KillTimer(oyuncugiris[playerid]);
	for( new i = 0; i < MAX_CIFTLIK; i ++ ) if(CiftlikInfo[i][cAktif]) {
		if(!strcmp(CiftlikInfo[i][cSahip], "Vice Komisyon", true))
		{
		GangZoneShowForPlayer(playerid, CiftlikInfo[i][cZone], 0x00812EAA);
		}
		else
		{
		GangZoneShowForPlayer(playerid, CiftlikInfo[i][cZone], 0x812600AA);
		}		
	}
	for( new i = 0; i < MAX_BOLGE; i ++ ) if(BolgeInfo[i][bAktif]) {
		GangZoneShowForPlayer(playerid, BolgeInfo[i][bZone], BolgeInfo[i][bRenk]);	
	}

	for(new i; i < MAX_OYUNCU_ARAC; i ++){ AracSlotSQL[playerid][i] = -1;}
    MDC_Ekrani[playerid] = false;
	CreateAllPlayerTextDraws(playerid);
	WalkStyle[playerid] = 0;
	RenklerDurum[playerid] = false;
    #if ANTI_HILE   true
	if(IsPlayerNPC(playerid)) if(!!strcmp(OyuncuIP(playerid), "127.0.0.1"))
	{
		SCM_ExAll(RENK_YETKILI, "[YETKÝLÝ ÝÞLEM]: {FFFFFF}Sistem, %s adlý kiþiyi oyundan attý. sebep: Bot Saldýrýsý", OyuncuIsim(playerid));
		return KickEx(playerid);
	}
	if(OyuncuGiris[playerid])
	{
		SCM_ExAll(RENK_YETKILI, "[YETKÝLÝ ÝÞLEM]: {FFFFFF}Sistem, %s adlý kiþiyi oyundan attý. sebep: Hile (#001)", OyuncuIsim(playerid));
		return KickEx(playerid);
	}
	#endif
	SetPlayerWeather(playerid, SunucuWeather);
	SetPlayerTime(playerid, SunucuZaman, 0);
	OyuncuGiris[playerid] = true;
	oyuncuData[playerid][oFirmaisbasi] = false;
	oyuncuData[playerid][oEtkisizHalde] = false;
	YuklemeTamamlandi[playerid] = false;
	KillTimer(AksesuarTimer[playerid]);
	SetPVarInt(playerid, "TamirciID", -1);
	for(new v = 0; v < MAX_AKSESUAR; v++)
	{
		oyuncakData[playerid][v][ptModelID] = 0;
		oyuncakData[playerid][v][ptBone] = 0;
		oyuncakData[playerid][v][ptRealID] = 0;
		oyuncakData[playerid][v][ptPosX] = 0.0;
		oyuncakData[playerid][v][ptPosY] = 0.0;
		oyuncakData[playerid][v][ptPosZ] = 0.0;
		oyuncakData[playerid][v][ptRotX] = 0.0;
		oyuncakData[playerid][v][ptRotY] = 0.0;
		oyuncakData[playerid][v][ptRotZ] = 0.0;
		oyuncakData[playerid][v][ptScaleX] = 1.0;
		oyuncakData[playerid][v][ptScaleY] = 1.0;
		oyuncakData[playerid][v][ptScaleZ] = 1.0;
		oyuncakData[playerid][v][ptKullanim] = 0;
		RemovePlayerAttachedObject(playerid, v);
	}
	oyuncuData[playerid][pSurukle] = 0;
	oyuncuData[playerid][pSurukleyen] = INVALID_PLAYER_ID;
	KillTimer(oyuncuData[playerid][pSurukleTimer]);
	oyuncuData[playerid][pOOC] = true;
	oyuncuData[playerid][pYayin] = true;
	oyuncuData[playerid][pReklam] = true;
	OlumSayisi[playerid] = 0, OlumSuresi[playerid] = 0;
	SetSpawnInfo(playerid, 0, 0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0);
	SetPlayerColor(playerid, RENK_VARSAYILAN);
	SpawnPlayer(playerid);
	OyuncuSifirla(playerid);
	DisablePlayerCheckpoint(playerid);
	oyuncuData[playerid][oGiris] = false;
	oyuncuData[playerid][oIlkGiris] = false;
	HeliKamerada[playerid] = false;
	SetPVarInt(playerid, "Kick", 0);
	return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
	SetPVarInt(playerid, "CurrentPickup", 0);
	DeletePVar(playerid, "CurrentPickup");
	SetPVarInt(playerid, "TeknedeBalikTutuyor", 0);
	DeletePVar(playerid, "TeknedeBalikTutuyor");
	SetPVarInt(playerid, "TamirKitiKullaniyor", 0);
	DeletePVar(playerid, "TamirKitiKullaniyor");
	KillTimer(oyuncuData[playerid][oBalikTutmaTimer]);
	sonkomut[playerid] = 0;
	RemovePlayerCamera(playerid);
	oyuncuData[playerid][oTelefonHoparlor] = 0;
	/*for(new b = 0; b != MAX_SEYYAR; b++) {
		if(Iter_Contains(Seyyar, b)) {
			if(!strcmp(SeyyarInfo[b][sSahip], oyuncuData[playerid][oIsim]))
			{
				mysql_format(g_SQL, query, sizeof(query), "DELETE FROM `seyyarlar` WHERE `id` = '%d'", b);
				mysql_query(g_SQL, query);

				if(IsValidDynamicObject(SeyyarInfo[b][sObje])) DestroyDynamicObject(SeyyarInfo[b][sObje]);
				if(IsValidDynamic3DTextLabel(SeyyarInfo[b][sLabel])) DestroyDynamic3DTextLabel(SeyyarInfo[b][sLabel]);
				SeyyarInfo[b][sX] = 0;
				SeyyarInfo[b][sY] = 0;
				SeyyarInfo[b][sZ] = 0;
				SeyyarInfo[b][sKasa] = 0;
				SeyyarInfo[b][sTur] = 0;
				Iter_Remove(Seyyar, b);
			}
		}
	} */

	new bquery[100], Cache:GetVOwner, brows, Cache:GetBCache;
	new bilkaraba[15], bilkev[15], brocky[15], byenilmez[15], byankesici[15], bustasurucu[15], bthepresident[15], bheisenberg[15], bisadami[15];
	new bkanunnamina[15], bviceasigi[15], bubermensch[15], bsucavcisi[15], bkurtarici[15], bcraftci[15], bvipuye[15], bsuclamucadele[15], bvergimilyoneri[15];
	new bhizliveofkeli[15], bistikbalgoklerde[15], bsilahkokusu[15], bsilahkacakcisi[15], bsilahtuccari[15], bsokaklarinsahibi[15], bwiseguy[15], bcapoditutti[15];
	new bbagimli[15], bvicebenitanisin[15], bmostwanted[15];
	
	//DC CÝK LOG
	new str2[15000];
	format(str2, sizeof(str2), "```[%s] (%s) [Nitro_%s] Para(%s)```", Tarih(), oyuncuData[playerid][oIsim], oyuncuData[playerid][oForumID], oyuncuData[playerid][oPara]);
	DCC_SendChannelMessage(ciklog, str2);
	
	if(oyuncuData[playerid][oGiris] == true)
	{
		mysql_format(g_SQL, bquery, sizeof(bquery), "SELECT * FROM oyuncular WHERE ID = '%d'", oyuncuData[playerid][oID]);
		GetBCache = mysql_query(g_SQL, bquery);
		cache_get_value_name(0, "ilkaraba", bilkaraba);
		cache_get_value_name(0, "ilkev", bilkev);
		cache_get_value_name(0, "rocky", brocky);
		cache_get_value_name(0, "yenilmez", byenilmez);
		cache_get_value_name(0, "yankesici", byankesici);
		cache_get_value_name(0, "ustasurucu", bustasurucu);
		cache_get_value_name(0, "thepresident", bthepresident);
		cache_get_value_name(0, "heisenberg", bheisenberg);
		cache_get_value_name(0, "isadami", bisadami);
		cache_get_value_name(0, "kanunnamina", bkanunnamina);
		cache_get_value_name(0, "viceasigi", bviceasigi);
		cache_get_value_name(0, "ubermensch", bubermensch);
		cache_get_value_name(0, "sucavcisi", bsucavcisi);
		cache_get_value_name(0, "kurtarici", bkurtarici);
		cache_get_value_name(0, "craftci", bcraftci);
		cache_get_value_name(0, "vipuye", bvipuye);
		cache_get_value_name(0, "suclamucadele", bsuclamucadele);
		cache_get_value_name(0, "vergimilyoneri", bvergimilyoneri);
		cache_get_value_name(0, "hizliveofkeli", bhizliveofkeli);
		cache_get_value_name(0, "istikbalgoklerde", bistikbalgoklerde);
		cache_get_value_name(0, "silahkokusu", bsilahkokusu);
		cache_get_value_name(0, "silahkacakcisi", bsilahkacakcisi);
		cache_get_value_name(0, "silahtuccari", bsilahtuccari);
		cache_get_value_name(0, "sokaklarinsahibi", bsokaklarinsahibi);
		cache_get_value_name(0, "wiseguy", bwiseguy);
		cache_get_value_name(0, "capoditutti", bcapoditutti);
		cache_get_value_name(0, "bagimli", bbagimli);
		cache_get_value_name(0, "vicebenitanisin", bvicebenitanisin);
		cache_get_value_name(0, "mostwanted", bmostwanted);
		cache_delete(GetBCache);

		
		if(!strcmp(bilkev, "Yok", true))
		{
			for (new i = 0; i < MAKSIMUM_EV; i ++) if(Ev_SahipKontrol(playerid, i)) {
				mysql_format(g_SQL, bquery, sizeof(bquery), "UPDATE oyuncular SET ilkev = '%s' WHERE ID = '%d'", SQLTarih(), oyuncuData[playerid][oID]);
				mysql_query(g_SQL, bquery);
				break;
			}
		}
		if(!strcmp(bilkaraba, "Yok", true))
		{
			mysql_format(g_SQL, bquery, sizeof(bquery), "SELECT * FROM araclar WHERE aracSahip = '%d'", oyuncuData[playerid][oID]);
			GetVOwner = mysql_query(g_SQL, bquery);
			cache_get_row_count(brows);
			if(brows)
			{
				mysql_format(g_SQL, bquery, sizeof(bquery), "UPDATE oyuncular SET ilkaraba = '%s' WHERE ID = '%d'", SQLTarih(), oyuncuData[playerid][oID]);
				mysql_query(g_SQL, bquery);
			}
			cache_delete(GetVOwner);
		}
 	}
	if(!strcmp(brocky, "Yok", true))
	{
		if(oyuncuData[playerid][oGucYetenek] > 19)
		{
			mysql_format(g_SQL, bquery, sizeof(bquery), "UPDATE oyuncular SET rocky = '%s' WHERE ID = '%d'", SQLTarih(), oyuncuData[playerid][oID]);
			mysql_query(g_SQL, bquery);
		}
	}
	if(!strcmp(byenilmez, "Yok", true))
	{
		if(oyuncuData[playerid][oDayaniklilik] > 19)
		{
			mysql_format(g_SQL, bquery, sizeof(bquery), "UPDATE oyuncular SET yenilmez = '%s' WHERE ID = '%d'", SQLTarih(), oyuncuData[playerid][oID]);
			mysql_query(g_SQL, bquery);
		}
	}
	if(!strcmp(byankesici, "Yok", true))
	{
		if(oyuncuData[playerid][oHirsizlikYetenek] > 9)
		{
			mysql_format(g_SQL, bquery, sizeof(bquery), "UPDATE oyuncular SET yankesici = '%s' WHERE ID = '%d'", SQLTarih(), oyuncuData[playerid][oID]);
			mysql_query(g_SQL, bquery);
		}
	}
	if(!strcmp(bustasurucu, "Yok", true))
	{
		if(oyuncuData[playerid][oSurusYetenek] > 9)
		{
			mysql_format(g_SQL, bquery, sizeof(bquery), "UPDATE oyuncular SET ustasurucu = '%s' WHERE ID = '%d'", SQLTarih(), oyuncuData[playerid][oID]);
			mysql_query(g_SQL, bquery);
		}
	}
	if(!strcmp(bkanunnamina, "Yok", true))
	{
		if(OyuncuBirlikTuru(playerid) == BIRLIK_POLIS && oyuncuData[playerid][oBirlikRutbe] >= 9)
		{
			mysql_format(g_SQL, bquery, sizeof(bquery), "UPDATE oyuncular SET kanunnamina = '%s' WHERE ID = '%d'", SQLTarih(), oyuncuData[playerid][oID]);
			mysql_query(g_SQL, bquery);
		}
	}
	if(!strcmp(bviceasigi, "Yok", true))
	{
		if(oyuncuData[playerid][oSeviye] >= 50)
		{
			mysql_format(g_SQL, bquery, sizeof(bquery), "UPDATE oyuncular SET viceasigi = '%s' WHERE ID = '%d'", SQLTarih(), oyuncuData[playerid][oID]);
			mysql_query(g_SQL, bquery);
		}
	}
	if(!strcmp(bubermensch, "Yok", true))
	{
		if(oyuncuData[playerid][oGucYetenek] > 19 && oyuncuData[playerid][oDayaniklilik] > 19 && oyuncuData[playerid][oSurusYetenek] > 9 && oyuncuData[playerid][oHirsizlikYetenek] > 9 && oyuncuData[playerid][oUretimYetenek] > 9 && oyuncuData[playerid][oKimyaYetenek] > 9 && oyuncuData[playerid][oLiderlikYetenek] > 9)
		{
			mysql_format(g_SQL, bquery, sizeof(bquery), "UPDATE oyuncular SET ubermensch = '%s' WHERE ID = '%d'", SQLTarih(), oyuncuData[playerid][oID]);
			mysql_query(g_SQL, bquery);
		}
	}
	if(!strcmp(bthepresident, "Yok", true))
	{
		if(oyuncuData[playerid][oLiderlikYetenek] > 9)
		{
			mysql_format(g_SQL, bquery, sizeof(bquery), "UPDATE oyuncular SET thepresident = '%s' WHERE ID = '%d'", SQLTarih(), oyuncuData[playerid][oID]);
			mysql_query(g_SQL, bquery);
		}
	}
	if(!strcmp(bheisenberg, "Yok", true))
	{
		if(oyuncuData[playerid][oKimyaYetenek] > 9)
		{
			mysql_format(g_SQL, bquery, sizeof(bquery), "UPDATE oyuncular SET heisenberg = '%s' WHERE ID = '%d'", SQLTarih(), oyuncuData[playerid][oID]);
			mysql_query(g_SQL, bquery);
		}
	}
	if(!strcmp(bsucavcisi, "Yok", true))
	{
		if(OyuncuBirlikTuru(playerid) == BIRLIK_POLIS && oyuncuData[playerid][oBirlikRutbe] >= 11)
		{
			mysql_format(g_SQL, bquery, sizeof(bquery), "UPDATE oyuncular SET sucavcisi = '%s' WHERE ID = '%d'", SQLTarih(), oyuncuData[playerid][oID]);
			mysql_query(g_SQL, bquery);
		}
	}
	if(!strcmp(bisadami, "Yok", true))
	{
		if(oyuncuData[playerid][oFirma] != -1 && oyuncuData[playerid][oFirmarutbe] == FirmaInfo[oyuncuData[playerid][oFirma]][fLiderrutbe])
		{
			mysql_format(g_SQL, bquery, sizeof(bquery), "UPDATE oyuncular SET isadami = '%s' WHERE ID = '%d'", SQLTarih(), oyuncuData[playerid][oID]);
			mysql_query(g_SQL, bquery);
		}
	}
	if(!strcmp(bkurtarici, "Yok", true))
	{
		if(OyuncuBirlikTuru(playerid) == BIRLIK_MEDIKAL && oyuncuData[playerid][oBirlikRutbe] >= 7)
		{
			mysql_format(g_SQL, bquery, sizeof(bquery), "UPDATE oyuncular SET kurtarici = '%s' WHERE ID = '%d'", SQLTarih(), oyuncuData[playerid][oID]);
			mysql_query(g_SQL, bquery);
		}
	}
	if(!strcmp(bcraftci, "Yok", true))
	{
		if(oyuncuData[playerid][oUretimYetenek] > 9)
		{
			mysql_format(g_SQL, bquery, sizeof(bquery), "UPDATE oyuncular SET craftci = '%s' WHERE ID = '%d'", SQLTarih(), oyuncuData[playerid][oID]);
			mysql_query(g_SQL, bquery);
		}
	}
	if(!strcmp(bvipuye, "Yok", true))
	{
		if(oyuncuData[playerid][oVIP] > 0)
		{
			mysql_format(g_SQL, bquery, sizeof(bquery), "UPDATE oyuncular SET vipuye = '%s' WHERE ID = '%d'", SQLTarih(), oyuncuData[playerid][oID]);
			mysql_query(g_SQL, bquery);
		}
	}
    if(oyuncuData[playerid][oGiris] == true)
    {
		if(!strcmp(bsuclamucadele, "Yok", true))
		{
			new Cache:SMVeri, smsayi;
			mysql_format(g_SQL, bquery, sizeof(bquery), "SELECT * FROM oyuncular WHERE ID = '%d'", oyuncuData[playerid][oID]);
			SMVeri = mysql_query(g_SQL, bquery);

			cache_get_value_name_int(cache_num_rows(), "HapseAtma", smsayi);
			cache_delete(SMVeri);
			if(smsayi >= 250)
			{
				mysql_format(g_SQL, bquery, sizeof(bquery), "UPDATE oyuncular SET suclamucadele = '%s' WHERE ID = '%d'", SQLTarih(), oyuncuData[playerid][oID]);
				mysql_query(g_SQL, bquery);
			}
		}
		if(!strcmp(bvergimilyoneri, "Yok", true))
		{
			new Cache:VVeri, vsayi;
			mysql_format(g_SQL, bquery, sizeof(bquery), "SELECT * FROM oyuncular WHERE ID = '%d'", oyuncuData[playerid][oID]);
			VVeri = mysql_query(g_SQL, bquery);
			cache_get_value_name_int(cache_num_rows(), "OdenenVergi", vsayi);
			cache_delete(VVeri);
			if(vsayi >= 500000)
			{
				mysql_format(g_SQL, bquery, sizeof(bquery), "UPDATE oyuncular SET vergimilyoneri = '%s' WHERE ID = '%d'", SQLTarih(), oyuncuData[playerid][oID]);
				mysql_query(g_SQL, bquery);
			}
		}
		if(!strcmp(bhizliveofkeli, "Yok", true))
		{
			new Cache:YVeri, ysayi;
			mysql_format(g_SQL, bquery, sizeof(bquery), "SELECT * FROM oyuncular WHERE ID = '%d'", oyuncuData[playerid][oID]);
			YVeri = mysql_query(g_SQL, bquery);
			cache_get_value_name_int(cache_num_rows(), "DuzenlenenYaris", ysayi);
			cache_delete(YVeri);
			if(ysayi >= 100)
			{
				mysql_format(g_SQL, bquery, sizeof(bquery), "UPDATE oyuncular SET hizliveofkeli = '%s' WHERE ID = '%d'", SQLTarih(), oyuncuData[playerid][oID]);
				mysql_query(g_SQL, bquery);
			}
		}
		if(!strcmp(bistikbalgoklerde, "Yok", true))
		{
			if(oyuncuData[playerid][oUcusLisansi] > 0)
			{
				mysql_format(g_SQL, bquery, sizeof(bquery), "UPDATE oyuncular SET istikbalgoklerde = '%s' WHERE ID = '%d'", SQLTarih(), oyuncuData[playerid][oID]);
				mysql_query(g_SQL, bquery);
			}
		}
		if(!strcmp(bsilahkokusu, "Yok", true))
		{
			new Cache:WVeri, wsayi;
			mysql_format(g_SQL, bquery, sizeof(bquery), "SELECT * FROM oyuncular WHERE ID = '%d'", oyuncuData[playerid][oID]);
			WVeri = mysql_query(g_SQL, bquery);
			cache_get_value_name_int(cache_num_rows(), "AlinanSilah", wsayi);
			cache_delete(WVeri);
			if(wsayi > 0)
			{
				mysql_format(g_SQL, bquery, sizeof(bquery), "UPDATE oyuncular SET silahkokusu = '%s' WHERE ID = '%d'", SQLTarih(), oyuncuData[playerid][oID]);
				mysql_query(g_SQL, bquery);
			}
		}
		if(!strcmp(bsilahkacakcisi, "Yok", true))
		{
			new Cache:WVeri, wsayi;
			mysql_format(g_SQL, bquery, sizeof(bquery), "SELECT * FROM oyuncular WHERE ID = '%d'", oyuncuData[playerid][oID]);
			WVeri = mysql_query(g_SQL, bquery);
			cache_get_value_name_int(cache_num_rows(), "AlinanSilah", wsayi);
			cache_delete(WVeri);
			if(wsayi >= 100)
			{
				mysql_format(g_SQL, bquery, sizeof(bquery), "UPDATE oyuncular SET silahkacakcisi = '%s' WHERE ID = '%d'", SQLTarih(), oyuncuData[playerid][oID]);
				mysql_query(g_SQL, bquery);
			}
		}
		if(!strcmp(bsilahtuccari, "Yok", true))
		{
			new Cache:WVeri, wsayi;
			mysql_format(g_SQL, bquery, sizeof(bquery), "SELECT * FROM oyuncular WHERE ID = '%d'", oyuncuData[playerid][oID]);
			WVeri = mysql_query(g_SQL, bquery);
			cache_get_value_name_int(cache_num_rows(), "AlinanSilah", wsayi);
			cache_delete(WVeri);
			if(wsayi >= 250)
			{
				mysql_format(g_SQL, bquery, sizeof(bquery), "UPDATE oyuncular SET silahtuccari = '%s' WHERE ID = '%d'", SQLTarih(), oyuncuData[playerid][oID]);
				mysql_query(g_SQL, bquery);
			}
		}

		if(!strcmp(bsokaklarinsahibi, "Yok", true))
		{
			if(oyuncuData[playerid][oBirlik] != -1 && BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikOnay] == 2 && oyuncuData[playerid][oBirlikRutbe] == BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikMaksRutbe])
			{
				mysql_format(g_SQL, bquery, sizeof(bquery), "UPDATE oyuncular SET sokaklarinsahibi = '%s' WHERE ID = '%d'", SQLTarih(), oyuncuData[playerid][oID]);
				mysql_query(g_SQL, bquery);
			}
		}
		if(!strcmp(bcapoditutti, "Yok", true))
		{
			if(oyuncuData[playerid][oBirlik] != -1 && BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikOnay] == 3 && oyuncuData[playerid][oBirlikRutbe] == BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikMaksRutbe])
			{
				mysql_format(g_SQL, bquery, sizeof(bquery), "UPDATE oyuncular SET capoditutti = '%s' WHERE ID = '%d'", SQLTarih(), oyuncuData[playerid][oID]);
				mysql_query(g_SQL, bquery);
			}
		}
		if(!strcmp(bwiseguy, "Yok", true))
		{
			if(oyuncuData[playerid][oBirlik] != -1 && BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikOnay] == 3)
			{
				mysql_format(g_SQL, bquery, sizeof(bquery), "UPDATE oyuncular SET wiseguy = '%s' WHERE ID = '%d'", SQLTarih(), oyuncuData[playerid][oID]);
				mysql_query(g_SQL, bquery);
			}
		}
		if(!strcmp(bbagimli, "Yok", true))
		{
			if(oyuncuData[playerid][oBagimlilik] >= 60)
			{
				mysql_format(g_SQL, bquery, sizeof(bquery), "UPDATE oyuncular SET bagimli = '%s' WHERE ID = '%d'", SQLTarih(), oyuncuData[playerid][oID]);
				mysql_query(g_SQL, bquery);
			}
		}
		if(!strcmp(bvicebenitanisin, "Yok", true))
		{
			for (new i = 0; i < MAKSIMUM_ISYERI; i ++) if(Isyeri_SahipKontrol(playerid, i))
			{
			mysql_format(g_SQL, bquery, sizeof(bquery), "UPDATE oyuncular SET vicebenitanisin = '%s' WHERE ID = '%d'", SQLTarih(), oyuncuData[playerid][oID]);
			mysql_query(g_SQL, bquery);
			break;
			}
		}
		if(!strcmp(bmostwanted, "Yok", true))
		{
			new Cache:MVeri, msayi;
			mysql_format(g_SQL, bquery, sizeof(bquery), "SELECT * FROM oyuncular WHERE ID = '%d'", oyuncuData[playerid][oID]);
			MVeri = mysql_query(g_SQL, bquery);
			cache_get_value_name_int(cache_num_rows(), "ICSicilSayi", msayi);
			cache_delete(MVeri);
			if(msayi >= 10)
			{
				mysql_format(g_SQL, bquery, sizeof(bquery), "UPDATE oyuncular SET mostwanted = '%s' WHERE ID = '%d'", SQLTarih(), oyuncuData[playerid][oID]);
				mysql_query(g_SQL, bquery);
			}
		}

		new qsilahid, qmermi;
		for (new i = 0; i < 13; i ++)
		{
			GetPlayerWeaponData(playerid, i, qsilahid, qmermi);
			if(qsilahid > 0)
			{
				mysql_format(g_SQL, bquery, sizeof(bquery), "UPDATE `player_weapons` SET `weapon_ammo` = '%d' WHERE `weapon_userid` = '%d' AND `weapon_gameid` = '%d' AND `weapon_statusid` = '%d'", qmermi, oyuncuData[playerid][oID], qsilahid, SILAH_OYUNCU_USTUNDE);
				mysql_tquery(g_SQL, bquery);
			}
		}

		if(oyuncuData[playerid][oYarisID] != -1)
		{
			new Cache:GetRaceOwner, racequery[200], rows;
			mysql_format(g_SQL, racequery, sizeof(racequery), "SELECT * FROM races WHERE race_owner = '%d'", oyuncuData[playerid][oID]);
			GetRaceOwner = mysql_query(g_SQL, racequery);
			cache_get_row_count(rows);
			if(rows)
			{
				new raceid, deleterace[200];
				cache_get_value_name_int(cache_num_rows(), "race_id", raceid);
				mysql_format(g_SQL, deleterace, sizeof(deleterace), "DELETE FROM races WHERE race_owner = '%d'", oyuncuData[playerid][oID]);
				mysql_query(g_SQL, deleterace);
				mysql_format(g_SQL, deleterace, sizeof(deleterace), "DELETE FROM race_cp WHERE race_id = '%d'", raceid);
				mysql_query(g_SQL, deleterace);
				KillTimer(oyuncuData[playerid][oYarisTimer]);
				foreach(new i : Player)
				{
					if(oyuncuData[i][oYarisID] == oyuncuData[playerid][oYarisID] && oyuncuData[i][oYarisID] != -1)
					{
						UyariMesaji(i, "Yarýþ sahibi oyundan ayrýldýðý için yarýþ iptal oldu.");
						oyuncuData[i][oYarisID] = -1;
						PlayerTextDrawHide(i, yaristd_0[i]);
						PlayerTextDrawHide(i, yaristd_1[i]);
						PlayerTextDrawHide(i, yaristd_2[i]);
						PlayerTextDrawHide(i, yaristd_3[i]);
						PlayerTextDrawHide(i, yaristd_5[i]);
						PlayerTextDrawHide(i, yaristd_6[i]);
						PlayerTextDrawHide(i, yaristd_7[i]);
					}
				}
			}
			cache_delete(GetRaceOwner);
			foreach(new i : Player)
			{
				if(oyuncuData[i][oYarisID] == oyuncuData[playerid][oYarisID])
				{
					oyuncuData[i][oYarisKatilimci]--;
				}
			}
		}
	}
	DestroyDynamicObject(oyuncuData[playerid][snakeCamObje]);
	if(GetPVarInt(playerid, "usatis") == 1) DeletePVar(playerid, "usatis");

	if(gDashCam{playerid} == 1)
	{
		KillTimer(gDashCamCheck[playerid]);
		gDashCam{playerid} = 0;
	}
	gDashCam{playerid} = 0;
	gDashCamAuto{playerid} = 0;
	if(gDashCam{playerid} == 1)
		GodMode[playerid] = false;
		if(IsPlayerAttachedObjectSlotUsed(playerid, 6)) RemovePlayerAttachedObject(playerid, 6);
		oyuncuData[playerid][pDakikaTimeri] = 0;
		oyuncuData[playerid][oHileUyari] = 0;
		oyuncuData[playerid][oYayinDavet] = -1;
		oyuncuData[playerid][oSpecengel] = 0;
		LokasyonKaydet(playerid);
		DeletePVar(playerid, "IcecekCani");
		oyuncuData[playerid][oCiftlik] = -1;
		oyuncuData[playerid][oBolge] = -1;
		if(GetPVarInt(playerid,"oyuncuyayinda") == 1) DeletePVar(playerid, "oyuncuyayinda");
		oyuncuData[playerid][oEkin] = 0;
		oyuncuData[playerid][oCuval] = 0;
		oyuncuData[playerid][oAnahtarOnay] = 0;
		SprunkKullanim[playerid] = false;
		oyuncuData[playerid][oBalikIzin] = false;
		EhliyetCheckpoint_Son[playerid] = false;
		oyuncuData[playerid][oRaporAtti] = 0;
		oyuncuData[playerid][oSoruAtti] = 0;
		KillTimer(gymtimer[playerid]), KillTimer(gymtustimer[playerid]);
		KillTimer(oyuncuData[playerid][oKarakterSecimTimer]);
		format(oyuncuData[playerid][oTruckerKod], 16, "-");
		oyuncuData[playerid][oPenseOnay] = false;
		oyuncuData[playerid][oTruckerKodiste] = false;
		oyuncuData[playerid][oTruckerBasari] = false;
		format(oyuncuData[playerid][oRaporMesaji],64, "(Yok)");
		format(oyuncuData[playerid][oSoruMesaji],64, "(Yok)");
		oyuncuData[playerid][oSatisYapiyor] = false;
		oyuncuData[playerid][oRadyoDinliyor] = false;
		new oyundaquery[256];
		format(oyundaquery, sizeof oyundaquery, "UPDATE `hesaplar` SET `oyuncuoyunda` = 0 WHERE `forumid` = '%d'", oyuncuData[playerid][oForumID]);
		mysql_query(g_SQL, oyundaquery);
		if(oyuncuData[playerid][oSSModu] == true) oyuncuData[playerid][oSSModu] = false;
		if(oyuncuData[playerid][oHUD] == true) oyuncuData[playerid][oHUD] = false;
		static isyeridsi;
		if((isyeridsi = Oyuncu_Isyerinde(playerid)) != -1)
		{
			if(IsyeriBilgi[isyeridsi][isyeriDurum] != 2)
			{
				new kaydet[512];
				format(kaydet, sizeof(kaydet), "UPDATE `oyuncular` SET `x` = '%.4f', `y` = '%.4f', `z` = '%.4f', `a` = '%.4f', `interior` = '%d', `vw` = '%d' WHERE `ID` = '%d'",
					IsyeriBilgi[isyeridsi][isyeriPos][0],
					IsyeriBilgi[isyeridsi][isyeriPos][1],
					IsyeriBilgi[isyeridsi][isyeriPos][2],
					IsyeriBilgi[isyeridsi][isyeriPos][3] - 180.0,
					IsyeriBilgi[isyeridsi][isyeriDisInt],
					IsyeriBilgi[isyeridsi][isyeriDisVW],
					oyuncuData[playerid][oID]);
				mysql_query(g_SQL, kaydet);
			}
		}
		for(new i = 0; i < MAX_TELREHBER; i++)
		{
			RehberBilgi[playerid][i][rehberID] = 0;
			RehberBilgi[playerid][i][rehberkullanimda] = false;
			format(RehberBilgi[playerid][i][rehberisim], 32, "-");
			RehberBilgi[playerid][i][rehbernumara] = 0;
		}
		KillTimer(GateAraTimer[playerid]);
		girilensifre[playerid] = -1;
		SetPVarInt(playerid, "modifiyeyapiyor", 0);
		oyuncuData[playerid][oTaksiCagrisi] = false;
		format(oyuncuData[playerid][oTaksiCagriKonum], 128, "");
		if(GetPVarInt(playerid, "firmadavetaldi") > 0) DeletePVar(playerid, "firmadavet"), DeletePVar(playerid, "firmadavetaldi");
		if(oyuncuData[playerid][oCraft])
		{
			for (new i = 0; i < MAX_ITEM; i++)
			{
				if(EnvanterData[playerid][i_craft][i]) {
					EnvanterData[playerid][i_craft][i] = false;
				}
			}
			new tid = GetPVarInt(playerid, "cTezgahID");
			if(IsValidDynamic3DTextLabel(TezgahInfo[tid][tGeciciLabel])) DestroyDynamic3DTextLabel(TezgahInfo[tid][tGeciciLabel]);
		}

		if (GetPVarInt(playerid, "gymyapiyor") == 1)
		{
			KillTimer(gymtimer[playerid]),KillTimer(gymtustimer[playerid]);
			SPOR_YAPAN_KISI--;
			TextDrawHideForPlayer(playerid, gym_0);
			TextDrawHideForPlayer(playerid, gym_1);
			TextDrawHideForPlayer(playerid, kasstat_0);
			TextDrawHideForPlayer(playerid, kasstat_1);
			TextDrawHideForPlayer(playerid, kasstat_2);
			PlayerTextDrawDestroy(playerid, kasstat_4[playerid]);
			PlayerTextDrawDestroy(playerid, kasstat_3[playerid]);
			TextDrawHideForPlayer(playerid, kasstat_5);
			TextDrawHideForPlayer(playerid, kasstat_6);
			for(new i ; i < sizeof(gym); i ++)
			{
				PlayerTextDrawDestroy(playerid, gym[i][playerid]);
			}
			for(new i = 0; i < 5; i ++)
			{
				PlayerTextDrawDestroy(playerid, sagaltdraw[playerid][i]);
			}
			okcX[playerid][0] = 336.000000;
			okcX[playerid][1] = 358.000000;
			okcX[playerid][2] = 380.000000;
			okcX[playerid][3] = 402.000000;
			okcX[playerid][4] = 424.000000;
			okcX[playerid][5] = 446.000000;
			okcX[playerid][6] = 470.000000;
			okcX[playerid][7] = 492.000000;
			okcX[playerid][8] = 514.000000;
			okcX[playerid][9] = 536.000000;
			okcX[playerid][10] = 558.000000;
			okcX[playerid][11] = 580.000000;
			okcX[playerid][12] = 602.000000;
			okcX[playerid][13] = 624.000000;
			okcDurum[playerid][0] = 0;
			okcDurum[playerid][1] = 0;
			okcDurum[playerid][2] = 0;
			okcDurum[playerid][3] = 0;
			okcDurum[playerid][4] = 0;
			okcDurum[playerid][5] = 0;
			okcDurum[playerid][6] = 0;
			okcDurum[playerid][7] = 0;
			okcDurum[playerid][8] = 0;
			okcDurum[playerid][9] = 0;
			okcDurum[playerid][10] = 0;
			okcDurum[playerid][11] = 0;
			okcDurum[playerid][12] = 0;
			okcDurum[playerid][13] = 0;
			if(OYUNCU_BISIKLETTE[playerid] == true) BISIKLET_KULLANIMDA[KULLANILAN_BISIKLET[playerid]] = false, OYUNCU_BISIKLETTE[playerid] = false;
			if(OYUNCU_DAMBILDA[playerid] == true) DAMBIL_KULLANIMDA[KULLANILAN_DAMBIL[playerid]] = false, OYUNCU_DAMBILDA[playerid] = false;
			if(OYUNCU_BANTTA[playerid] == true) BANT_KULLANIMDA[KULLANILAN_BANT[playerid]] = false, OYUNCU_BANTTA[playerid] = false;
			gymtur[playerid] = 0;
			if(IsPlayerAttachedObjectSlotUsed(playerid, 0)) RemovePlayerAttachedObject(playerid, 0);
			if(IsPlayerAttachedObjectSlotUsed(playerid, 1)) RemovePlayerAttachedObject(playerid, 1);
			SetPVarInt(playerid, "gymyapiyor", 0);
		}
		if(truckerseviyebirde[playerid] > 0)
		{
			new aracid = Arac_IDBul(GetPlayerVehicleID(playerid));
			RemovePlayerFromVehicle(playerid);
			ASpawn(aracid);
			SetPlayerPos(playerid, 2503.7815,-2469.0381,13.6334);
			truckerseviyebirde[playerid] = 0;
		}
		if(truckerseviyeikide[playerid] > 0)
		{
			new aracid = Arac_IDBul(GetPlayerVehicleID(playerid));
			RemovePlayerFromVehicle(playerid);
			ASpawn(aracid);
			SetPlayerPos(playerid, 2469.4338,-2587.8372,13.6599);
			truckerseviyeikide[playerid] = 0;
		}
		if(truckerseviyeucte[playerid] > 0)
		{
			new aracid = Arac_IDBul(GetPlayerVehicleID(playerid));
			DorseYuku[aracid] = false;
			SetVehicleToRespawn(GetVehicleTrailer(aracid));
			RemovePlayerFromVehicle(playerid);
			ASpawn(aracid);
			SetPlayerPos(playerid, 2289.5610,-2357.6519,13.5469);
			truckerseviyeucte[playerid] = 0;
			oyuncuData[playerid][oTirGuzergah] = 0;
		}
			if(konteynertasiyor[playerid] == true)
			{
				new aracid = Arac_IDBul(GetPlayerVehicleID(playerid));
				DestroyDynamicObject(Konteyner[aracid]);
				AracBilgi[aracid][aracKapasite] --;
				RemovePlayerFromVehicle(playerid);
				ASpawn(aracid);
				konteynertasiyor[playerid] = false;
				SetPlayerPos(playerid, 103.2384,-164.8606,2.3154);
			}
			KillTimer(oyuncuData[playerid][ouyusturucutimer]);
			ReklamKontrolEtVeSil(playerid);
			KilidiKiriyorum[playerid] = false;
			oyuncuData[playerid][oForumID] = -1;
			if(OyuncuGiris[playerid] == false) return false;
			OyuncuGiris[playerid] = false;
			oyuncuData[playerid][pGiseOlustur] = false;
			HeliKamerada[playerid] = false;
			oyuncuvicenetsosyalde[playerid] = false;
			oyuncuvicenetanasayfada[playerid] = false;
			oyuncuvicenetbankada[playerid] = false;
			oyuncuseksenlerdinliyor[playerid] = false;
			oyuncuyetmislerdinliyor[playerid] = false;
			oyuncubageldinliyor[playerid] = false;
			oyuncuindiepopdinliyor[playerid] = false;
			oyuncuthetripdinliyor[playerid] = false;
			oyuncumuzikmenusunde[playerid] = false;
			baliktutuyor[playerid] = false;

			KillTimer(AksesuarTimer[playerid]);
			SetPVarInt(playerid, "TelefonGoruntule", 0);
			SetPVarInt(playerid, "konumgonder", 0);
			if(oyuncuData[playerid][oKanama] == 1) KillTimer(KanamaTimer[playerid]),DestroyDynamic3DTextLabel(KanamaLabeli[playerid]);
			DestroyDynamic3DTextLabel(kulakliklabeli[playerid]);
			if(IsValidDynamicObject(SandalyeObjem[playerid]))DestroyDynamicObject(SandalyeObjem[playerid]);
			if(IsValidDynamicObject(TezgahObjesi[playerid])) DestroyDynamicObject(TezgahObjesi[playerid]);
			if(IsValidDynamicObject(CadirObjem[playerid]))DestroyDynamicObject(CadirObjem[playerid]);

			OlumSayisi[playerid] = 0, OlumSuresi[playerid] = 0;
			oyuncuData[playerid][oGazMaskedurum] = 0;
			oyuncuData[playerid][oKarMaskedurum] = 0;
			foreach(new i : Player) {
				if(oyuncuData[i][oBirlikDavetEden] == playerid) oyuncuData[i][oBirlikDavetEden] = -1;
				if(ElKoy[i] == playerid) ElKoy[i] = -1;
			}
			if(oyuncuData[playerid][oKampAtesi] == true) {
				DestroyDynamicObject(oyuncuData[playerid][oKampAtesiObje][0]);
				DestroyDynamicObject(oyuncuData[playerid][oKampAtesiObje][1]);
			}

			if(TransportTime[playerid] > 0)
			{
				if(IsPlayerConnected(TransportDriver[playerid]))
				{
					new string[128];
					TransportTime[TransportDriver[playerid]] = 0;
					TransportCost[TransportDriver[playerid]] = 0;
					format(string, sizeof(string), "~g~ucret: %d$",TransportCost[playerid]);
					GameTextForPlayer(TransportDriver[playerid], string, 5000,3);
					SunucuMesaji(TransportDriver[playerid],"Taksinizdeki kiþi sunucudan çýkýþ yaptý");
					TransportCost[playerid] = 0;
					TransportTime[playerid] = 0;
					TransportDriver[playerid] = 999;
				}
			}

			if(oyuncuData[playerid][oCevaplandi] == true) {
				new oyuncuid = oyuncuData[playerid][oArama];
				oyuncuData[playerid][oAramaSure] = -1;
				oyuncuData[oyuncuid][oAramaSure] = -1;
				oyuncuData[playerid][oArama] = -1;
				oyuncuData[oyuncuid][oArama] = -1;
				oyuncuData[playerid][oCevaplandi] = false;
				oyuncuData[oyuncuid][oCevaplandi] = false;
				SunucuMesaji(oyuncuid, "Hat kesildi.");
			}

			KillTimer(tamirTimer[playerid]);
			KillTimer(tamirkititimer[playerid]);

			if (GetPVarInt(playerid, "AnkesorleKonusuyor") == 1)
			{
				new id = GetPVarInt(playerid, "AnkesorID");
				if(id > -1)
				{
					AnkesorInfo[id][aCaliyor] = 0;
					oyuncuData[playerid][oArama] = -1;
					oyuncuData[playerid][oKonumKisi] = -1;
					AnkesorInfo[id][aAktif] = 0;
					AnkesorInfo[id][aArayan] = -1;
					SetPVarInt(playerid, "AnkesorleKonusuyor", 0);
					SetPVarInt(playerid, "AnkesorCevaplandi", 0);
					if (AnkesorInfo[id][aKisi] > -1){
						SunucuMesaji(AnkesorInfo[id][aKisi], "Ankesörlü telefon kapandý.");
						SetPVarInt(AnkesorInfo[id][aKisi], "AnkesorleKonusuyor", 0);
						oyuncuData[AnkesorInfo[id][aKisi]][oArama] = -1;
						SetPVarInt(AnkesorInfo[id][aKisi], "AnkesorCevaplandi", 0);
						SetPlayerSpecialAction(AnkesorInfo[id][aKisi], SPECIAL_ACTION_STOPUSECELLPHONE),AnkesorInfo[id][aKisi] = -1;
					}
				}
			}

			if(GetPVarInt(playerid, "AnkesordenAraniyor") == 1)
			{
				new h = GetPVarInt(playerid, "AnkesorID");
				SunucuMesaji(AnkesorInfo[h][aKisi], "Karþýdaki kiþi telefonu kapattý.");
				SetPVarInt(playerid, "AnkesorAcildi", 0);
				SetPVarInt(playerid, "AnkesordenAraniyor", 0);
				SetPVarInt(AnkesorInfo[h][aKisi], "AnkesorAcildi", 0);
				SetPlayerSpecialAction(AnkesorInfo[h][aKisi], SPECIAL_ACTION_STOPUSECELLPHONE);
				oyuncuData[playerid][oArama] = -1;
				AnkesorInfo[h][aAktif] = 0;
				SetPVarInt(playerid, "TamirciID", -1);
				AnkesorInfo[h][aKisi] = -1;
				oyuncuData[AnkesorInfo[h][aArayan]][oArama] = -1;
				AnkesorInfo[h][aArayan] = -1;
			}

			if(oyuncuData[playerid][oDestek] == true)  cmd(playerid, 0, "destek");
			if(GetPVarInt(playerid, "aracsatan") > -1) {
				SetPVarInt(playerid, "aracsatan", -1);
				SetPVarInt(playerid, "satilanarac", -1);
				SetPVarInt(playerid, "aracfiyat", -1);
			}
			foreach(new i : Player) {
				if(GetPVarInt(i, "ustarayan") == playerid) SetPVarInt(i, "ustarayan", INVALID_PLAYER_ID);
				if(GetPVarInt(i, "gozbaglayanid") == playerid) SetPVarInt(i, "gozbaglayanid", INVALID_PLAYER_ID);
				if(GetPVarInt(i, "anahtarsahip") == playerid) SetPVarInt(i, "anahtarsahip", INVALID_PLAYER_ID);
				if(GetPVarInt(i, "evanahtaroneren") == playerid) SetPVarInt(i, "evanahtaroneren", INVALID_PLAYER_ID);
			}
			if(BoomboxBilgi[playerid][boomboxKullanimda]) Boombox_Kaldir(playerid);
			OyuncuKaydet(playerid);
			oyuncuData[playerid][oGiris] = false;
			//KillTimer(oyuncuData[playerid][OyuncuTimer]);
			//KillTimer(oyuncuData[playerid][oSaniyeTimer]);
			KillTimer(oyuncuData[playerid][oGirisTimer]);
			KillTimer(oyuncuData[playerid][oYaraliTimer]);
			for(new i; i < MAX_OYUNCU_ARAC; i ++){
				AracSlotSQL[playerid][i] = -1;}
				oyuncuData[playerid][oBakim] = -1;
				DeletePVar(playerid, "mdcsucekle");
				oyuncuData[playerid][pSurukle] = 0;
				oyuncuData[playerid][pSurukleyen] = INVALID_PLAYER_ID;
				KillTimer(oyuncuData[playerid][pSurukleTimer]);
				if(oyuncuData[playerid][oGraffitiSure] > 0 && oyuncuData[playerid][oDuzenlenenGrafiti] != -1)
				{
					new id = oyuncuData[playerid][oDuzenlenenGrafiti];
					if(IsValidDynamicObject(grfData[id][grfObje])){DestroyDynamicObject(grfData[id][grfObje]);}
				}
				static bilgi[128];
				if(oyuncuData[playerid][oAdmin] < 1)
				{
					switch(reason)
					{
						case 0: format(bilgi, sizeof(bilgi), "(( %s baðlantýsý koptuðu için sunucudan ayrýldý. ))", OyuncuIsim(playerid));
						case 1: format(bilgi, sizeof(bilgi), "(( %s kendi isteðiyle sunucudan ayrýldý. ))", OyuncuIsim(playerid));
						case 2: format(bilgi, sizeof(bilgi), "(( %s atýldýðý veya yasaklandýðý için sunucudan ayrýldý. ))", OyuncuIsim(playerid));
						case 31: format(bilgi, sizeof(bilgi), "(( %s sunucu iþlemleri sonlandýrýldýðý için oyundan atýldý. ))", OyuncuIsim(playerid)), printf(bilgi);
					}
					OzelYakinMesaj(playerid, 30.0, RENK_SERVER, bilgi);
				}
				PlayerTextDrawDestroy(playerid, yaristd_0[playerid]);
				PlayerTextDrawDestroy(playerid, yaristd_1[playerid]);
				PlayerTextDrawDestroy(playerid, yaristd_2[playerid]);
				PlayerTextDrawDestroy(playerid, yaristd_3[playerid]);
				PlayerTextDrawDestroy(playerid, yaristd_5[playerid]);
				PlayerTextDrawDestroy(playerid, yaristd_6[playerid]);
				PlayerTextDrawDestroy(playerid, yaristd_7[playerid]);
				PlayerTextDrawDestroy(playerid, TD_AD_Price[playerid]);
				PlayerTextDrawDestroy(playerid, TD_AD_CityZip[playerid]);
				PlayerTextDrawDestroy(playerid, TD_AD_Headline[playerid]);
				PlayerTextDrawDestroy(playerid, TD_AD_PriceValue[playerid]);
				PlayerTextDrawDestroy(playerid, TD_AD_SellerValue[playerid]);
				PlayerTextDrawDestroy(playerid, TD_AD_Taxes[playerid]);
				PlayerTextDrawDestroy(playerid, TD_AD_TaxesValue[playerid]);
				PlayerTextDrawDestroy(playerid, TD_AD_HousenumberStreet[playerid]);
				PlayerTextDrawDestroy(playerid, TD_Mid_Info[playerid]);
				return 1;
			}

			public OnPlayerSpawn(playerid)
			{
				Streamer_Update(playerid);
				new query[512];
				SetPlayerWeather(playerid, SunucuWeather);
				SetPlayerTime(playerid, SunucuZaman, 0);
				SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 0);
				SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 0);
				SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 0);
				switch(oyuncuData[playerid][oGeciciKiyafet]) {
					case 0: SetPlayerSkin(playerid, oyuncuData[playerid][oKiyafet]);
					default: SetPlayerSkin(playerid, oyuncuData[playerid][oGeciciKiyafet]);
				}
				if(oyuncuData[playerid][oHapisSure][0] > 0) {
					CanDuzenle(playerid, 100);
					return HapiseAt(playerid);
				}
				if(oyuncuData[playerid][oGiris] == true && oyuncuData[playerid][oIlkGiris] == true) {
					mysql_format(g_SQL, query, sizeof(query), "SELECT`aksesuarlar`.* FROM `aksesuarlar` INNER JOIN oyuncular ON `aksesuarlar`.Sahip = oyuncular.id WHERE oyuncular.ID = '%d' ORDER BY `aksesuarlar`.ID ASC LIMIT %d", oyuncuData[playerid][oID], MAX_AKSESUAR);
					mysql_tquery(g_SQL, query, "AksesuarYukle", "d", playerid);
					mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `player_weapons` WHERE `weapon_userid` = '%d' AND `weapon_statusid` = '%d'", oyuncuData[playerid][oID], SILAH_OYUNCU_USTUNDE);
					mysql_tquery(g_SQL, query, "OnPlayerGetWeapons", "d", playerid);

					oyuncuData[playerid][oIlkGiris] = false;
				}
				if(oyuncuData[playerid][oYarali] == true) {
					for(new slot; slot < MAX_AKSESUAR; slot++)
					{
						if(oyuncakData[playerid][slot][ptKullanim] == 1)
						{
							SetPlayerAttachedObject(playerid, slot, oyuncakData[playerid][slot][ptModelID],
								oyuncakData[playerid][slot][ptBone], oyuncakData[playerid][slot][ptPosX],
								oyuncakData[playerid][slot][ptPosY], oyuncakData[playerid][slot][ptPosZ],
								oyuncakData[playerid][slot][ptRotX], oyuncakData[playerid][slot][ptRotY],
								oyuncakData[playerid][slot][ptRotZ], oyuncakData[playerid][slot][ptScaleX],
								oyuncakData[playerid][slot][ptScaleY], oyuncakData[playerid][slot][ptScaleZ],
								oyuncakData[playerid][slot][ptRenk]);
						}
					}
					
					mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `player_weapons` WHERE `weapon_userid` = '%d' AND `weapon_statusid` = '%d'", oyuncuData[playerid][oID], SILAH_OYUNCU_USTUNDE);
					mysql_tquery(g_SQL, query, "OnPlayerGetWeapons", "d", playerid);
					CanDuzenle(playerid, 20);
					ZirhDuzenle(playerid, 0);
					SetPlayerPos(playerid, oyuncuData[playerid][oPos][0], oyuncuData[playerid][oPos][1], oyuncuData[playerid][oPos][2]);
					SetPlayerFacingAngle(playerid, oyuncuData[playerid][oPos][3]);
					SetPlayerInterior(playerid, oyuncuData[playerid][oInterior]);
        			//ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.0, 1, 1, 1, 1, 0);
					ApplyAnimation(playerid, "PED", "FLOOR_hit", 4.1, 0, 1, 1, 1, 0, 1);
					SetCameraBehindPlayer(playerid);
					TogglePlayerControllable(playerid, false);

					SetPlayerCameraPos(playerid, oyuncuData[playerid][oPos][0], oyuncuData[playerid][oPos][1], oyuncuData[playerid][oPos][2] + 2.5);
					SetPlayerCameraLookAt(playerid, oyuncuData[playerid][oPos][0], oyuncuData[playerid][oPos][1], oyuncuData[playerid][oPos][2]);
				}
				foreach(new i : Player)
				{
					if(oyuncuData[i][oGazMaskedurum] == 1)
					{
						ShowPlayerNameTagForPlayer(playerid, i, false);
					}
					if(oyuncuData[i][oKarMaskedurum] == 1)
					{
						ShowPlayerNameTagForPlayer(playerid, i, false);
					}
					if(oyuncuData[i][oGizliIsim] == true)
					{
						ShowPlayerNameTagForPlayer(playerid, i, false);
					}
				}
				if(oyuncuData[playerid][oGazMaskedurum] == 1)
				{
					foreach(new i : Player)
					{
						ShowPlayerNameTagForPlayer(i, playerid, false);
					}
				}
				if(oyuncuData[playerid][oKarMaskedurum] == 1)
				{
					foreach(new i : Player)
					{
						ShowPlayerNameTagForPlayer(i, playerid, false);
					}
				}
				if(oyuncuData[playerid][oGizliIsim] == true)
				{
					foreach(new i : Player)
					{
						ShowPlayerNameTagForPlayer(i, playerid, false);
					}
				}
				return 1;
			}

			public BayginlikBitir(playerid)
			{
				ClearAnimations(playerid);
				TogglePlayerControllable(playerid, true);
				SetTimerEx("oyuncucoz", 50, false, "i", playerid);
				SetCameraBehindPlayer(playerid);
				SetPlayerHealth(playerid, 30.0);
				oyuncuData[playerid][oYarali] = false;
				for(new i = 0; i != MAKSIMUM_HASAR; i ++) {
					HasarBilgi[playerid][i][hasarVarmi] = false;
					HasarBilgi[playerid][i][hasarBolge] = 0;
					HasarBilgi[playerid][i][hasarVeren] = INVALID_PLAYER_ID;
					HasarBilgi[playerid][i][hasarDeger] = 0;
					HasarBilgi[playerid][i][hasarSilah] = 0;
				}
				return true;
			}

			public OnPlayerDeath(playerid, killerid, reason)
			{
				new silahid, mermi, query[300];
				for (new i = 0; i < 13; i ++)
				{
					GetPlayerWeaponData(playerid, i, silahid, mermi);
					if(silahid > 0)
					{
						mysql_format(g_SQL, query, sizeof(query), "UPDATE `player_weapons` SET `weapon_ammo` = '%d' WHERE `weapon_userid` = '%d' AND `weapon_gameid` = '%d' AND `weapon_statusid` = '%d'", mermi, oyuncuData[playerid][oID], silahid, SILAH_OYUNCU_USTUNDE);
						mysql_tquery(g_SQL, query);
					}
				}

				if(gettime() - OlumSuresi[playerid] < 3)
				{
					OlumSayisi[playerid]++;
		#if ANTI_HILE   true
					if(OlumSayisi[playerid] > 4 && !IsPlayerConnected(killerid))
					{
						SCM_ExAll(RENK_YETKILI, "[YETKÝLÝ ÝÞLEM]: {FFFFFF}Sistem, %s adlý kiþiyi oyundan attý. sebep: Hile (#002)", OyuncuIsim(playerid));
						return KickEx(playerid);
					}
		#endif
				}
				else OlumSayisi[playerid] = 1;
				if (GetPVarInt(playerid, "gymyapiyor") == 1)
				{
					KillTimer(gymtimer[playerid]),KillTimer(gymtustimer[playerid]);
					SPOR_YAPAN_KISI--;
					TextDrawHideForPlayer(playerid, gym_0);
					TextDrawHideForPlayer(playerid, gym_1);
					TextDrawHideForPlayer(playerid, kasstat_0);
					TextDrawHideForPlayer(playerid, kasstat_1);
					TextDrawHideForPlayer(playerid, kasstat_2);
					PlayerTextDrawDestroy(playerid, kasstat_4[playerid]);
					PlayerTextDrawDestroy(playerid, kasstat_3[playerid]);
					TextDrawHideForPlayer(playerid, kasstat_5);
					TextDrawHideForPlayer(playerid, kasstat_6);
					PlayerTextDrawDestroy(playerid, gym[0][playerid]);
					PlayerTextDrawDestroy(playerid, gym[1][playerid]);
					PlayerTextDrawDestroy(playerid, gym[2][playerid]);
					PlayerTextDrawDestroy(playerid, gym[3][playerid]);
					PlayerTextDrawDestroy(playerid, gym[4][playerid]);
					PlayerTextDrawDestroy(playerid, gym[5][playerid]);
					PlayerTextDrawDestroy(playerid, gym[6][playerid]);
					PlayerTextDrawDestroy(playerid, gym[7][playerid]);
					PlayerTextDrawDestroy(playerid, gym[8][playerid]);
					PlayerTextDrawDestroy(playerid, gym[9][playerid]);
					PlayerTextDrawDestroy(playerid, gym[10][playerid]);
					PlayerTextDrawDestroy(playerid, gym[11][playerid]);
					PlayerTextDrawDestroy(playerid, gym[12][playerid]);
					PlayerTextDrawDestroy(playerid, gym[13][playerid]);
					okcX[playerid][0] = 336.000000;
					okcX[playerid][1] = 358.000000;
					okcX[playerid][2] = 380.000000;
					okcX[playerid][3] = 402.000000;
					okcX[playerid][4] = 424.000000;
					okcX[playerid][5] = 446.000000;
					okcX[playerid][6] = 470.000000;
					okcX[playerid][7] = 492.000000;
					okcX[playerid][8] = 514.000000;
					okcX[playerid][9] = 536.000000;
					okcX[playerid][10] = 558.000000;
					okcX[playerid][11] = 580.000000;
					okcX[playerid][12] = 602.000000;
					okcX[playerid][13] = 624.000000;
					okcDurum[playerid][0] = 0;
					okcDurum[playerid][1] = 0;
					okcDurum[playerid][2] = 0;
					okcDurum[playerid][3] = 0;
					okcDurum[playerid][4] = 0;
					okcDurum[playerid][5] = 0;
					okcDurum[playerid][6] = 0;
					okcDurum[playerid][7] = 0;
					okcDurum[playerid][8] = 0;
					okcDurum[playerid][9] = 0;
					okcDurum[playerid][10] = 0;
					okcDurum[playerid][11] = 0;
					okcDurum[playerid][12] = 0;
					okcDurum[playerid][13] = 0;
					if(OYUNCU_BISIKLETTE[playerid] == true) BISIKLET_KULLANIMDA[KULLANILAN_BISIKLET[playerid]] = false, OYUNCU_BISIKLETTE[playerid] = false;
					if(OYUNCU_DAMBILDA[playerid] == true) DAMBIL_KULLANIMDA[KULLANILAN_DAMBIL[playerid]] = false, OYUNCU_DAMBILDA[playerid] = false;
					if(OYUNCU_BANTTA[playerid] == true) BANT_KULLANIMDA[KULLANILAN_BANT[playerid]] = false, OYUNCU_BANTTA[playerid] = false;
					gymtur[playerid] = 0;
					if(IsPlayerAttachedObjectSlotUsed(playerid, 0)) RemovePlayerAttachedObject(playerid, 0);
					if(IsPlayerAttachedObjectSlotUsed(playerid, 1)) RemovePlayerAttachedObject(playerid, 1);
					SetPVarInt(playerid, "gymyapiyor", 0);
				}
				OlumSuresi[playerid] = gettime();
				if(IsPlayerInAnyVehicle(playerid)) RemovePlayerFromVehicle(playerid);
				//static kiyafet;
				oyuncuData[playerid][oInterior] = GetPlayerInterior(playerid);
				oyuncuData[playerid][oVW] = GetPlayerVirtualWorld(playerid);
				GetPlayerPos(playerid, oyuncuData[playerid][oPos][0], oyuncuData[playerid][oPos][1], oyuncuData[playerid][oPos][2]);
				GetPlayerFacingAngle(playerid, oyuncuData[playerid][oPos][3]);
				if(oyuncuData[playerid][oKanama] == 1) oyuncuData[playerid][oKanama] = 0, KillTimer(KanamaTimer[playerid]),DestroyDynamic3DTextLabel(KanamaLabeli[playerid]);
				if(oyuncuData[playerid][oAdminDurum] == true) CanDuzenle(playerid, 100);
				if(oyuncuData[playerid][oHapisSure][0] > 0) HapiseAt(playerid);
				else if(oyuncuData[playerid][oYarali] == false && oyuncuData[playerid][oAdminDurum] == false && oyuncuData[playerid][oDonduruldu] == 0) {
					oyuncuData[playerid][oYaraliSure] = YARALI_SURE;
					oyuncuData[playerid][oYarali] = true;
					SunucuMesaji(playerid, "Yaralandýn. %d saniye bekledikten sonra ayaða kalkacaksýn.", YARALI_SURE);
				}
				/*SetSpawnInfo(playerid, 0, kiyafet, oyuncuData[playerid][oPos][0], oyuncuData[playerid][oPos][1], oyuncuData[playerid][oPos][2], oyuncuData[playerid][oPos][3], 0, 0, 0, 0, 0, 0);
				SpawnPlayer(playerid);
				DisablePlayerCheckpoint(playerid);
				StopAudioStreamForPlayer(playerid);
				SetPlayerDrunkLevel(playerid, 0);
				SetPlayerWeather(playerid, SunucuWeather); */
				new kiyafet;
				switch(oyuncuData[playerid][oGeciciKiyafet]) {
					case 0: kiyafet = oyuncuData[playerid][oKiyafet];
					default: kiyafet = oyuncuData[playerid][oGeciciKiyafet];
				}
				SetSpawnInfo(playerid, 0, kiyafet, oyuncuData[playerid][oPos][0], oyuncuData[playerid][oPos][1], oyuncuData[playerid][oPos][2], oyuncuData[playerid][oPos][3], 0, 0, 0, 0, 0, 0);
				SpawnPlayer(playerid);
				ApplyAnimation(playerid, "PED", "FLOOR_hit", 4.1, 0, 1, 1, 1, 0, 1);
				TogglePlayerControllable(playerid, false);
				SetTimerEx("OlumSonrasi", 500, false, "i", playerid);
				return 1;
			}

			function OlumSonrasi(playerid)
			{
				new kiyafet;
				switch(oyuncuData[playerid][oGeciciKiyafet]) {
					case 0: kiyafet = oyuncuData[playerid][oKiyafet];
					default: kiyafet = oyuncuData[playerid][oGeciciKiyafet];
				}
				SetSpawnInfo(playerid, 0, kiyafet, oyuncuData[playerid][oPos][0], oyuncuData[playerid][oPos][1], oyuncuData[playerid][oPos][2], oyuncuData[playerid][oPos][3], 0, 0, 0, 0, 0, 0);
				SpawnPlayer(playerid);
				ApplyAnimation(playerid, "PED", "FLOOR_hit", 4.1, 0, 1, 1, 1, 0, 1);
				TogglePlayerControllable(playerid, false);
				return 1;
			}

			public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
			{
				new query[256 * 2];
				mysql_format(g_SQL, query, sizeof(query), "UPDATE `player_weapons` SET `weapon_ammo` = '%d' WHERE `weapon_userid` = '%d' AND `weapon_gameid` = '%d' AND `weapon_statusid` = '%d'", GetPlayerAmmo(playerid), oyuncuData[playerid][oID], GetPlayerWeapon(playerid), SILAH_OYUNCU_USTUNDE);
				mysql_tquery(g_SQL, query);

				 if(RecentlyFired[playerid] == 0 && OyuncuBirlikTuru(playerid) != BIRLIK_POLIS)
		    	{
		        new queryz[128];
				RecentlyFired[playerid] = 5;
  				mysql_format(g_SQL, queryz, sizeof(queryz), "SELECT `weapon_id` FROM `player_weapons` WHERE `weapon_userid` = '%d' AND `weapon_gameid` = '%d' AND `weapon_statusid` = '%d'", oyuncuData[playerid][oID], GetPlayerWeapon(playerid), SILAH_OYUNCU_USTUNDE);
				mysql_tquery(g_SQL, queryz, "OnCommandCreateShell", "ii", playerid, weaponid);
				}

				if(oyuncuData[playerid][oTaser] && weaponid == 23 || oyuncuData[playerid][oBeanbag] && weaponid == 25) SarjorYenilemeAnimasyon(playerid, weaponid);
    #if ANTI_HILE   true
				if(fX > 2140000000 || fY > 2140000000 || fZ > 2140000000) {
					SCM_ExAll(RENK_YETKILI, "[YETKÝLÝ ÝÞLEM]: {FFFFFF}Sistem, %s adlý kiþiyi oyundan attý. sebep: Hile (#003)", OyuncuIsim(playerid));
					return KickEx(playerid);
				}
    #endif
				if(weaponid != 38 && weaponid != 29)
				{
					new zaman = gettime();
					SetPVarInt(playerid, "yeniatis", zaman);
					if(GetPVarInt(playerid, "eskiatis") == GetPVarInt(playerid, "yeniatis"))
					{
						SetPVarInt(playerid, "tespit", GetPVarInt(playerid, "tespit") + 1);
			#if ANTI_HILE   true
						if(GetPVarInt(playerid,"tespit") >= 9)
						{
							SCM_ExAll(RENK_YETKILI, "[YETKÝLÝ ÝÞLEM]: {FFFFFF}Sistem, %s adlý kiþiyi oyundan attý. sebep: Hile (#004)", OyuncuIsim(playerid));
							return KickEx(playerid);
						}
			#endif
					}
					else SetPVarInt(playerid, "tespit", 0);
					SetPVarInt(playerid, "eskiatis", zaman);
				}
 	    return 1;
 	}

 	public OnVehicleSpawn(vehicleid)
 	{
 		new id = Arac_IDBul(vehicleid);
 		
 		AracBilgi[id][sirenDurum] = 0;
 		DestroyDynamicObject(AracBilgi[id][sirenObje]);
 		if(IsValidDynamic3DTextLabel(AracBirimKOD[id])) DestroyDynamic3DTextLabel(AracBirimKOD[id]);
 		aracartikkodlu[id] = false;

 		SetVehicleParamsEx(AracBilgi[vehicleid][aracYarat], false, false, false, AracBilgi[vehicleid][aracKilit], false, false, false);

 		KameraTak(id); SetVehicleNumberPlate(id, AracBilgi[id][aracPlaka]);
 		SetVehicleHealth(id, 999.9); SetVehicleVirtualWorld(id, AracBilgi[id][aracWorld]);
 		AracZaman[id] = 0; DorseYuku[id] = false; Flasor[id] = 0;

 		SetVehicleHealth(AracBilgi[id][aracYarat], AracBilgi[id][aracCani]);

 		if(id != -1) ChangeVehicleColor(id, AracBilgi[id][aracRenk1], AracBilgi[id][aracRenk2]);
 		for(new i = 0; i < 14; i++){if(AracBilgi[id][aracParca][i] != 0){AddVehicleComponent(id, AracBilgi[id][aracParca][i]);}}
 			return 1;
 	}

 	public OnVehicleDeath(vehicleid, killerid)
 	{
 		Flasor[vehicleid] = 0;
 		DorseYuku[vehicleid] = false;
 		return 1;
 	}

 		public OnPlayerEnterDynamicArea(playerid, areaid) {
		 	if(oyuncuData[playerid][oGiris] == true)
		 	{
				for( new i = 0; i < MAX_BOLGE; i ++ ) if(BolgeInfo[i][bBolge] == areaid) 
				{
					BirlikBilgiText(playerid, BirlikBilgi[BolgeInfo[i][bBirlik]][birlikkisaltma]);
					oyuncuData[playerid][oBolge] = i;
					return 1;	
				}
				for( new i = 0; i < MAX_CIFTLIK; i ++ ) if(CiftlikInfo[i][cArsa] == areaid)
				{
					if(!strcmp(CiftlikInfo[i][cSahip], "Vice Komisyon", true))
					{
					CiftlikMesaji(playerid, "Çiftlik Adý: Florida Eyalet Çiftlikleri (ID: %d)",i);
					CiftlikMesaji(playerid, "Çiftlik Sahibi: %s | Fiyat: %s | Dönüm: %.2f", CiftlikInfo[i][cSahip], NumaraFormati(CiftlikInfo[i][cPara]), CiftlikInfo[i][cDonum]);
					CiftlikMesaji(playerid, "Bu arsa satýlýk! Arsayý satýn almak için '/satinal'");
					oyuncuData[playerid][oCiftlik] = i;
					}
					else
					{
					CiftlikMesaji(playerid, "Çiftlik Adý: %s (ID: %d)", CiftlikInfo[i][cIsim], i);
					CiftlikMesaji(playerid, "Çiftlik Sahibi: %s | Fiyat: %s | Toplam Dönüm: %.2f", CiftlikInfo[i][cSahip], NumaraFormati(CiftlikInfo[i][cPara]), CiftlikInfo[i][cDonum]);
					CiftlikMesaji(playerid, "Ekili ürün: %s | Ürünlerin olgunlaþmasýna %d saat kaldý.", ekinlerveri[CiftlikInfo[i][cUrun]][ekinisim], CiftlikInfo[i][cOlgunlasma]);
					oyuncuData[playerid][oCiftlik] = i;
					}
				}
			}
	return 1;
    }

    public OnPlayerLeaveDynamicArea(playerid, areaid) {
    oyuncuData[playerid][oCiftlik] = -1;
	oyuncuData[playerid][oBolge] = -1;
	PlayerTextDrawHide(playerid, bolge_1[playerid]);
	if(GetPVarInt(playerid, "usatis") == 1)
	{
	SunucuMesaji(playerid, "Uyuþturucu satmayý býraktýnýz, satýlan uyuþturucu miktarý: %d gr", oyuncuData[playerid][oUmiktar]);
	ParaEkle(playerid, oyuncuData[playerid][oUmiktar] * 10);
	oyuncuData[playerid][oUmiktar] = 0;
	BilgiText(playerid, "~g~~h~Uyusturucular Satildi!", 1000);
	new query[110], Cache:GetCache, satissayisi;
	mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM oyuncular WHERE ID = '%d'", oyuncuData[playerid][oID]);
	GetCache = mysql_query(g_SQL, query);	
	cache_get_value_name_int(0, "SatilanUyusturucu", satissayisi);
	cache_delete(GetCache);
	satissayisi++;
	mysql_format(g_SQL, query, sizeof(query), "UPDATE oyuncular SET SatilanUyusturucu = '%d' WHERE ID = '%d'", satissayisi, oyuncuData[playerid][oID]);
	mysql_query(g_SQL, query);
	DeletePVar(playerid, "usatis");	
	}
    }

	public OnPlayerEnterDynamicCP(playerid, checkpointid)
 	{
 		return 1;
 	}

 	public OnPlayerText(playerid, text[])
 	{
 		if(oyuncuData[playerid][oHapisSure][0] > 0) return false;
		if(GetPVarInt(playerid,"oyuncuyayinda") == 1) return false;
 		if(!strcmp(text, ":)", true))
 		{
 			cmd(playerid, 1, "gülümser.");
 			return false;
 		}
 		if(!strcmp(text, ";)", true))
 		{
 			cmd(playerid, 1, "göz kýrpar.");
 			return false;
 		}
 		if(!strcmp(text, ":D", true))
 		{
 			cmd(playerid, 1, "kahkaha atar.");
 			return false;
 		}
 		if(!strcmp(text, ":P", true))
 		{
 			cmd(playerid, 1, "dil çýkartýr.");
 			return false;
 		}
 		if(!strcmp(text, ":(", true))
 		{
 			cmd(playerid, 1, "somurtur.");
 			return false;
 		}
 		if(!strcmp(text, ":/", true))
 		{
 			cmd(playerid, 1, "dudaklarýný büzer.");
 			return false;
 		}
 		new maxStr[260];
 		if(ilkharf == true) text[0] = IlkHarfBuyut(text[0]);
 		if(oyuncuData[playerid][oGiris] == true) {
 			if(oyuncuData[playerid][oArama] > -1 && oyuncuData[playerid][oCevaplandi] == true && GetPVarInt(playerid,"AnkesorleKonusuyor") == 0) {
 				new oyuncuid = oyuncuData[playerid][oArama], telno = 0, telisim[32], cinsiyet[2];
 				switch(oyuncuData[playerid][oCinsiyet])
 				{
 					case 1: cinsiyet = "E";
 					case 2: cinsiyet = "K";
 					default: cinsiyet = "T";
 				}
 				for(new i = 0; i < MAX_TELREHBER; i++) if(oyuncuData[playerid][oTelefonNumarasi] == RehberBilgi[oyuncuid][i][rehbernumara])
 				{
 					telno++;
 					format(telisim, 32, RehberBilgi[oyuncuid][i][rehberisim]);
 				}
 				if(telno == 0)
 				{
 					SCM_Ex(oyuncuid, RENK_SARI, "[TELEFON-%s] %d: %s", cinsiyet, oyuncuData[playerid][oTelefonNumarasi], text);
 					format(maxStr, sizeof(maxStr), "(telefon) %s: %s", OyuncuIsim(playerid), text);
 					SendNearbyMessage(playerid, KONUSMA_MESAFESI, maxStr, -1, RENK_YAZI_1, RENK_YAZI_2, RENK_YAZI_3, RENK_YAZI_4);
 				}
 				else if(telno != 0)
 				{
 					SCM_Ex(oyuncuid, RENK_SARI, "[TELEFON-%s] %s: %s", cinsiyet, telisim, text);
 					format(maxStr, sizeof(maxStr), "(telefon) %s: %s", OyuncuIsim(playerid), text);
 					SendNearbyMessage(playerid, KONUSMA_MESAFESI, maxStr, -1, RENK_YAZI_1, RENK_YAZI_2, RENK_YAZI_3, RENK_YAZI_4);
 				}
 				if(oyuncuData[oyuncuid][oTelefonHoparlor] == 1)
 				{
	 				new Float:hx, Float:hy, Float:hz, hmesaj[240];
	 				GetPlayerPos(oyuncuid, hx, hy, hz);
	 				format(hmesaj, sizeof(hmesaj), "[%s hop.][%s]: %s", OyuncuIsim(oyuncuid), cinsiyet, text);
	 				foreach(new i : Player)
	 				{
	 					if(i == oyuncuid) continue;
	 					if(IsPlayerInRangeOfPoint(i, 12.0, hx, hy, hz) && GetPlayerVirtualWorld(oyuncuid) == GetPlayerVirtualWorld(i))
	 					{
	 						SCM_Ex(i, 0xFF9600FF, hmesaj);
	 					}
	 				}
 				}
 				return false;
 			}

	 		if(oyuncuData[playerid][oArama] > -1 && GetPVarInt(playerid,"AnkesorleKonusuyor") == 1) {
				 
	 			new telid = GetPVarInt(playerid, "AnkesorID"), msg[128];
				 foreach(new i : Player) {
				if(oyuncuData[i][oArama] == AnkesorInfo[telid][aNumara])
				{
					if(playerid == AnkesorInfo[telid][aKisi])
					{
					format(msg, sizeof(msg), "Bilinmeyen Kiþi (telefon): %s", text);
	 				SendClientMessage(i, RENK_KAPALISARI, msg);
					}
					else if(playerid == AnkesorInfo[telid][aArayan])
					{
					format(msg, sizeof(msg), "%d (telefon): %s", oyuncuData[playerid][oTelefonNumarasi], text);
	 				SendClientMessage(i, RENK_KAPALISARI, msg);
					}
				 }
			   }	 
	 			return false;
	 		}

 			format(maxStr, sizeof(maxStr), "%s: %s", OyuncuIsim(playerid), text);
 			SendNearbyMessage(playerid, KONUSMA_MESAFESI, maxStr, -1, RENK_YAZI_1, RENK_YAZI_2, RENK_YAZI_3, RENK_YAZI_4);
 			if(!IsPlayerInAnyVehicle(playerid))
 			{
 				if(oyuncuData[playerid][oKonusmaAnimasyon] == 1)
 				{
 					ChatAnim(playerid, strlen(text));
 				}
 			}
 		}
 		return false;
 	}

 	public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
 	{
    		oyuncuData[playerid][oSonBinilenArac] = vehicleid;
    		return 1;
    	}

    	public OnPlayerExitVehicle(playerid, vehicleid)
    	{
    		new id = Arac_IDBul(GetPlayerVehicleID(playerid));
    		if(oyuncuData[playerid][oEhliyetTesti] > 0 && AracBilgi[id][aracTur] == 1)
    			if(GetPVarInt(playerid, "dialog") == -1) DialogGoster(playerid, DIALOG_EHLIYET_AYRIL, DIALOG_STYLE_MSGBOX, "> Ehliyet Testi - Ayrýl", "Testten ayrýlmak istiyor musunuz?", "Evet", "Hayýr");

    		if(oyuncuData[playerid][oRadyoDinliyor] == true)
    		{
    			oyuncuData[playerid][oRadyoDinliyor] = false;
    			StopAudioStreamForPlayer(playerid);
    		}
    		if(truckerseviyebirde[playerid] > 0)
    		{
    			ASpawn(id);
    			SetPlayerPos(playerid, 2503.7815,-2469.0381,13.6334);
    			truckerseviyebirde[playerid] = 0;
    			DisablePlayerCheckpoint(playerid);
    			hataMesaji(playerid, "Aracý terk ettiðiniz için görev iptal oldu.");
    		}
    		if(truckerseviyeikide[playerid] > 0)
    		{
    			ASpawn(id);
    			SetPlayerPos(playerid, 2469.4338,-2587.8372,13.6599);
    			truckerseviyeikide[playerid] = 0;
    			DisablePlayerCheckpoint(playerid);
    			hataMesaji(playerid, "Aracý terk ettiðiniz için görev iptal oldu.");
    		}
    		if(truckerseviyeucte[playerid] > 0)
    		{
    			DorseYuku[id] = false;
    			SetVehicleToRespawn(GetVehicleTrailer(id));
    			ASpawn(id);
    			truckerseviyeucte[playerid] = 0;
    			SetPlayerPos(playerid, 2289.5610,-2357.6519,13.5469);
    			oyuncuData[playerid][oTirGuzergah] = 0;
    			DisablePlayerCheckpoint(playerid);
    			hataMesaji(playerid, "Aracý terk ettiðiniz için görev iptal oldu.");
    		}
    			if(konteynertasiyor[playerid] == true)
    			{
    				DestroyDynamicObject(Konteyner[id]);
    				AracBilgi[id][aracKapasite] --;
    				RemovePlayerFromVehicle(playerid);
    				ASpawn(id);
    				konteynertasiyor[playerid] = false;
    				SetPlayerPos(playerid, 103.2384,-164.8606,2.3154);
    				SunucuMesaji(playerid, "Araçtan indiðiniz için taþýmacýlýk görevi iptal oldu.");
    			}
    			if(HeliKamerada[playerid] == true)
    			{
    				SetCameraBehindPlayer(playerid);
    				PlayerTextDrawHide(playerid, TermalText[playerid]);
    				HeliKamerada[playerid] = false;
    			}
    			if(TransportDuty[playerid] > 0) {
    				new passengers[4] = {-1, ...};
    				foreach(new i : Player) {
    					if(GetPlayerVehicleID(i) == vehicleid) {
    						passengers[GetPlayerVehicleSeat(i)] = i;
    					}
    				}
    				for(new s = 0; s != sizeof(passengers); s++) {
    					if(passengers[s] != -1) {
    						if(TransportTime[passengers[s]] > 0)
    						{
    							TransportTime[TransportDriver[passengers[s]]] = 0;
    							TransportCost[TransportDriver[passengers[s]]] = 0;
    							TransportCost[passengers[s]] = 0;
    							TransportTime[passengers[s]] = 0;
    							TransportDriver[passengers[s]] = 999;
    						}
    						RemovePlayerFromVehicle(passengers[s]);
    					}
    				}
    				Arac_Spawn(Arac_IDBul(vehicleid));
    			}
    			if(TransportTime[playerid] > 0)
    			{
    				new string[128];
    				TransportTime[TransportDriver[playerid]] = 0;
    				TransportCost[TransportDriver[playerid]] = 0;
    				format(string, sizeof(string), "~r~ucret: %d$",TransportCost[playerid]);
    				GameTextForPlayer(playerid, string, 5000, 1);
    				format(string, sizeof(string), "~g~ucret: %d$",TransportCost[playerid]);
    				GameTextForPlayer(TransportDriver[playerid], string,5000,3);
    				TransportCost[playerid] = 0;
    				TransportTime[playerid] = 0;
    				TransportDriver[playerid] = 999;
    			}
    			DeletePVar(playerid, "koltuk");
    			if(AracBilgi[vehicleid][aracTur] < 1) return Arac_Kaydet(vehicleid);
    			return 1;
    		}

    		public OnPlayerStateChange(playerid, newstate, oldstate)
    		{
    			if(newstate == PLAYER_STATE_DRIVER) {
    				if(!IsEngineVehicle(Arac_IDBul(GetPlayerVehicleID(playerid))))
    				{
    					if(Arac_SahipKontrol(playerid, Arac_IDBul(GetPlayerVehicleID(playerid))))
    					{
    						SetEngineStatus(Arac_IDBul(GetPlayerVehicleID(playerid)), true);
    					}
    					else SetEngineStatus(Arac_IDBul(GetPlayerVehicleID(playerid)), false);
    				}
    				SetPlayerArmedWeapon(playerid, 0);
    				new aracid = Arac_IDBul(GetPlayerVehicleID(playerid)), query[256];
    				if((aracbirlikturbul(aracid) == BIRLIK_POLIS || aracbirlikturbul(aracid) == BIRLIK_MEDIKAL) && (OyuncuBirlikTuru(playerid) != BIRLIK_POLIS && OyuncuBirlikTuru(playerid) != BIRLIK_MEDIKAL))
    				{
    					RemovePlayerFromVehicle(playerid);
    				}
    				for(new i ; i < sizeof(AracGosterge); i ++)
    				{
    					PlayerTextDrawShow(playerid, AracGosterge[i][playerid]);
    				}
    				if(AracBilgi[aracid][aracFirma] > -1) {
    					if(Iter_Contains(Firma, AracBilgi[aracid][aracFirma])) if(AracBilgi[aracid][aracFirma] == FirmaInfo[AracBilgi[aracid][aracFirma]][fID]) {
    						SCM_Ex(playerid, -1, "{D5BE20}[ARAÇ]:{FFFFFF} Bu araç bir firmaya aittir. (%s)", FirmaInfo[AracBilgi[aracid][aracFirma]][fIsim]);
    					}
    					SCM_Ex(playerid, -1, "{D5BE20}[ARAÇ]:{FFFFFF} Modeli: %s / Plakasý: %s", AracModel(AracBilgi[aracid][aracModel]), AracBilgi[aracid][aracPlaka]);
    				}
    				else if(AracBilgi[aracid][aracMeslek] > 0) {
    					SCM_Ex(playerid, -1, "{D5BE20}[ARAÇ]:{FFFFFF} Mesleði: %s / Modeli: %s / Plakasý: %s", MeslekIsim(AracBilgi[aracid][aracMeslek]), AracModel(AracBilgi[aracid][aracModel]), AracBilgi[aracid][aracPlaka]);
    				}
    				else if(AracBilgi[aracid][aracSahip] > 0 && AracBilgi[aracid][aracBirlik] > -1) {
    					mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM oyuncular WHERE ID = '%d'", AracBilgi[aracid][aracSahip]);
    					mysql_tquery(g_SQL, query, "sahipvebirlikarat", "d", playerid);
    				}
    				else if(AracBilgi[aracid][aracBirlik] > -1) {
    					if(aracbirlikturbul(GetPlayerVehicleID(playerid)) == BIRLIK_POLIS || aracbirlikturbul(GetPlayerVehicleID(playerid)) == BIRLIK_DEVLET || aracbirlikturbul(GetPlayerVehicleID(playerid)) == BIRLIK_MEDIKAL)
    						SCM_Ex(playerid, -1, "{D5BE20}[ARAÇ]:{FFFFFF} Modeli: %s / Plakasý: %s", AracModel(AracBilgi[aracid][aracModel]), AracBilgi[aracid][aracPlaka]);
    					else SCM_Ex(playerid, -1, "{D5BE20}[ARAÇ]:{FFFFFF} Modeli: %s / Plakasý: %s / Kilometresi: %.2f", AracModel(AracBilgi[aracid][aracModel]), AracBilgi[aracid][aracPlaka], AracBilgi[aracid][aracKM]);
    				}
    				else if(AracBilgi[aracid][aracSahip] > 0 && AracBilgi[aracid][aracBirlik] < 0) {
    					mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM oyuncular WHERE ID = '%d'", AracBilgi[aracid][aracSahip]);
    					mysql_tquery(g_SQL, query, "sahiparat", "d", playerid);
    				}
    				else if(AracBilgi[aracid][aracTur] == 1) {
    					SCM_Ex(playerid, -1, "{D5BE20}[ARAÇ]:{FFFFFF} Bulunduðunuz araç ehliyet sýnav aracýdýr.");
    					SCM_Ex(playerid, -1, "{D5BE20}[ARAÇ]:{FFFFFF} Modeli: %s / Plakasý: %s", AracModel(AracBilgi[aracid][aracModel]), AracBilgi[aracid][aracPlaka]);
    				}
    				else {
    					SCM_Ex(playerid, -1, "{D5BE20}[ARAÇ]:{FFFFFF} Bulunduðunuz aracýn sahibi yok.");
    					SCM_Ex(playerid, -1, "{D5BE20}[ARAÇ]:{FFFFFF} Modeli: %s / Plakasý: %s", AracModel(AracBilgi[aracid][aracModel]), AracBilgi[aracid][aracPlaka]);
    				}
    				if(AracBilgi[aracid][aracKiralik] == 1 && AracBilgi[aracid][aracAnahtar] < 0)
    				{
    					new gerekliucret;
    					gerekliucret = AracBilgi[aracid][aKiraUcret];
    					SCM_Ex(playerid, -1, "{D5BE20}[ARAÇ]:{FFFFFF} Bu araç kiralanabilir. Kiralamak için; (/arac kirala)", NumaraFormati(gerekliucret));
    				}
    			}
    			if(newstate == PLAYER_STATE_ONFOOT)
    			{
    				if(TransportDuty[playerid] > 0) {
    					TransportDuty[playerid] = 0;
    					TransportValue[playerid] = 0;
    					SunucuMesaji(playerid,"Paydos yaptýnýz.");
    					if(GetVehicleModel(oyuncuData[playerid][oSonBinilenArac]) == 420 || GetVehicleModel(oyuncuData[playerid][oSonBinilenArac]) == 438)
    					{
    						RemovePlayerFromVehicle(playerid);
    						ASpawn(oyuncuData[playerid][oSonBinilenArac]);
    					}
    				}
    				if(HeliKamerada[playerid] == true)
    				{
    					SetCameraBehindPlayer(playerid);
    					PlayerTextDrawHide(playerid, TermalText[playerid]);
    					HeliKamerada[playerid] = false;
    				}
    				for(new i ; i < sizeof(AracGosterge); i ++)
    				{
    					PlayerTextDrawHide(playerid, AracGosterge[i][playerid]);
    				}
    			}

    			if(newstate == PLAYER_STATE_PASSENGER)
    			{
    				foreach (new i : Player)
    				{
    					if(IsPlayerConnected(i))
    					{
    						if(IsPlayerInVehicle(i, GetPlayerVehicleID(playerid)) && GetPlayerState(i) == 2 && TransportDuty[i] > 0)
    						{
    							if(oyuncuData[playerid][oPara] < TransportValue[i])
    							{
    								hataMesaji(playerid, "Taksiye binebilmek için %d$ gereklidir.", TransportValue[i]);
    								RemovePlayerFromVehicle(playerid);
    							}
    							else
    							{
    								if(TransportDuty[i] == 1)
    								{
    									SunucuMesaji(playerid, "Taksimetre (%d$) üzerinden çalýþmaktadýr.", TransportValue[i]);
    									SunucuMesaji(i, "(%s) adlý müþteri taksiye bindi.", OyuncuIsim(playerid));
    									TransportTime[i] = 1;
    									TransportTime[playerid] = 1;
    									TransportCost[playerid] = TransportValue[i];
    									TransportCost[i] = TransportValue[i];
    									TransportDriver[playerid] = i;
    									TransportDriver[i] = playerid;
    								}
    							}
    						}
    					}
    				}
    			}

    			if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
    			{

    				if(GetPVarInt(playerid, "anim") != 0) SetPVarInt(playerid, "anim", 0);
    				if(oyuncuData[playerid][oBoombox] != INVALID_PLAYER_ID) oyuncuData[playerid][oBoombox] = INVALID_PLAYER_ID, StopAudioStreamForPlayer(playerid);
    				if(AracBilgi[Arac_IDBul(GetPlayerVehicleID(playerid))][aracRadyoDurum] == true)
    				{
    					new aracidsi = Arac_IDBul(GetPlayerVehicleID(playerid));
    					static
    					url[128];

    					strunpack(url, AracBilgi[aracidsi][aracRadyoURL]);

    					StopAudioStreamForPlayer(playerid);
    					PlayAudioStreamForPlayer(playerid, url);

    					oyuncuData[playerid][oRadyoDinliyor] = true;
    				}
    				if(Arac_IDBul(GetPlayerVehicleID(playerid)) != -1 && AracBilgi[Arac_IDBul(GetPlayerVehicleID(playerid))][aracKilit]) {
    					RemovePlayerFromVehicle(playerid);
    					return hataMesaji(playerid, "{D5BE20}[ARAÇ]:{FFFFFF} Bu aracýn kapýsý kilitli.");
    				}
    				if(gDashCamAuto{playerid} == 1 && aracbirlikturbul(GetPlayerVehicleID(playerid)) == BIRLIK_POLIS)
    				{
    					SunucuMesaji(playerid, "Dash-Cam aktif hale getirildi.");
    					gDashCamCheck[playerid] = SetTimerEx ("UpdateDashCam", dcam_UpdateRate, true, "i", playerid);
    					gDashCamAuto{playerid} = 0;
    					gDashCam{playerid} = 1;
    					ShowDashCam(playerid);
    				}
    				if(oyuncuData[playerid][oCuval] == 1) {
    					RemovePlayerFromVehicle(playerid);
    					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
    					return hataMesaji(playerid, "Çuval ile birlikte araca binemezsiniz.");
    				}
    				foreach (new i : Player) if(oyuncuData[i][oIzlenen] == playerid) {
    					PlayerSpectateVehicle(i, GetPlayerVehicleID(playerid));
    				}
    				SetPVarInt(playerid, "koltuk", GetPlayerVehicleSeat(playerid));
        #if ANTI_HILE   true
    				if(GetPVarInt(playerid, "state") > GetTickCount())
    				{
    					SCM_ExAll(RENK_YETKILI, "[YETKÝLÝ ÝÞLEM]: {FFFFFF}Sistem, %s adlý kiþiyi oyundan attý. sebep: Hile (#005)", OyuncuIsim(playerid));
    					return KickEx(playerid);
    				}
		#endif
    				if(BisikletKontrol(GetPlayerVehicleID(playerid))) SetPVarInt(playerid, "state", GetTickCount() + 1000);
    				else if(!BisikletKontrol(GetPlayerVehicleID(playerid))) SetPVarInt(playerid, "state", GetTickCount() + 3000);
    				if(newstate == PLAYER_STATE_DRIVER) return true;
    				if(GetPlayerWeapon(playerid) != WEAPON_UZI && GetPlayerWeapon(playerid) != WEAPON_MP5 && GetPlayerWeapon(playerid) != WEAPON_AK47 && GetPlayerWeapon(playerid) != WEAPON_M4 && GetPlayerWeapon(playerid) != WEAPON_TEC9)
    					SetPlayerArmedWeapon(playerid, 0);
    			}
    			if(oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER)
    			{
    				if(gDashCam{playerid} == 1)
    				{
    					KillTimer(gDashCamCheck[playerid]);
    					gDashCamAuto{playerid} = 1;
    					gDashCam{playerid} = 0;
    					HideDashCam(playerid);
    					SunucuMesaji(playerid, "Dash-Cam kapatýldý.");
    				}
    				foreach (new i : Player) if(oyuncuData[i][oIzlenen] == playerid) {
    					PlayerSpectatePlayer(i, playerid);
    				}

							if(GetPVarInt(playerid, "CiftlikEkimIslem") == 1) {
						Doluluk[playerid] = 0;
						HidePlayerProgressBar(playerid, ciftlikprog[playerid]);
						TextDrawHideForPlayer(playerid, ciftlik_0);
						TextDrawHideForPlayer(playerid, ciftlik_1);
						KillTimer(ciftlikUpdater[playerid]);
						if(oyuncuData[playerid][oCiftlik] != -1) CiftlikInfo[oyuncuData[playerid][oCiftlik]][cIslem] = false;
						SetPVarInt(playerid, "CiftlikEkimIslem", 0);
						DeletePVar(playerid, "CiftlikEkimIslem");
						UyariMesaji(playerid, "Tarla ekimi sýrasýnda traktörden indiðiniz için ekim iþlemi durdu.");
					}
					if(GetPVarInt(playerid, "CiftlikBicimIslem") == 1) {
						Doluluk[playerid] = 0;
						HidePlayerProgressBar(playerid, bicimprog[playerid]);
						DestroyPlayerProgressBar(playerid, bicimprog[playerid]);
						TextDrawHideForPlayer(playerid, ciftlik_0);
						TextDrawHideForPlayer(playerid, ciftlik_1);
						new cc = GetPVarInt(playerid,"oncekiciftlik");
						CiftlikInfo[cc][cIslem] = false;
						SetPVarInt(playerid, "CiftlikBicimIslem", 0);
						DeletePVar(playerid, "CiftlikBicimIslem");
						SetPVarInt(playerid, "CiftlikEkinler", 0);
						DeletePVar(playerid, "CiftlikEkinler");
						DeletePVar(playerid, "oncekiciftlik");
						UyariMesaji(playerid, "Tarlayý biçerken biçerdöverden indiðiniz için biçme iþlemi durdu.");
					}
    			}
    			return true;
    		}

    		function RaceFinished(yarisid)
		    {
		    	foreach(new i : Player)
				{
					if(oyuncuData[i][oYarisID] == yarisid)
					{
				        oyuncuData[i][oYarisID] = -1;
				        SunucuMesaji(i, "Ekip daðýtýldý ve veriler temizlendi.");
				        oyuncuData[i][oYarisSiralama] = -1;
				        DeletePVar(i, "BirYarista");
				        PlayerTextDrawHide(i, yaristd_0[i]);
				        PlayerTextDrawHide(i, yaristd_1[i]);
				        PlayerTextDrawHide(i, yaristd_2[i]);
				        PlayerTextDrawHide(i, yaristd_3[i]);
				        PlayerTextDrawHide(i, yaristd_5[i]);
				        PlayerTextDrawHide(i, yaristd_6[i]);
				        PlayerTextDrawHide(i, yaristd_7[i]);
				        oyuncuData[i][oYarisKatilimci] = 0;
				    }
				}
				new queryy[60];
				mysql_format(g_SQL, queryy, sizeof(queryy), "DELETE FROM race_cp WHERE race_id = '%d'", yarisid);
				mysql_tquery(g_SQL, queryy);
				mysql_format(g_SQL, queryy, sizeof(queryy), "DELETE FROM races WHERE race_id = '%d'", yarisid);
				mysql_tquery(g_SQL, queryy);
		    }

    		public OnPlayerEnterCheckpoint(playerid)
    		{
    			DisablePlayerCheckpoint(playerid);
    			new aracid = Arac_IDBul(GetPlayerVehicleID(playerid));
    			if(oyuncuData[playerid][oEhliyetTesti] > 0 && AracBilgi[aracid][aracTur] == 1) {
    				switch(oyuncuData[playerid][oEhliyetTesti]) {
			case 1: SetPlayerCheckpoint(playerid, 813.0014,-1393.5789,13.2916,6.0); //
			case 2: SetPlayerCheckpoint(playerid, 635.1101,-1348.7632,13.2659,6.0); //
			case 3: SetPlayerCheckpoint(playerid, 631.0803,-1237.9666,17.6244,6.0); //
			case 4: SetPlayerCheckpoint(playerid, 538.2895,-1247.1970,16.4389,6.0); //
			case 5: SetPlayerCheckpoint(playerid, 283.9133,-1410.0597,13.6326,6.0); //
			case 6: SetPlayerCheckpoint(playerid, 157.8391,-1546.3020,10.7945,6.0); //
			case 7: SetPlayerCheckpoint(playerid, 214.4846,-1659.8125,12.4021,6.0); //
			case 8: SetPlayerCheckpoint(playerid, 386.9896,-1719.0431,7.6581,6.0); //
			case 9: SetPlayerCheckpoint(playerid, 636.6415,-1749.6857,13.0817,6.0); //
			case 10: SetPlayerCheckpoint(playerid, 1018.9664,-1814.8740,13.8303,6.0); //
			case 11: SetPlayerCheckpoint(playerid, 1178.2490,-1853.6982,13.2736,6.0); //
			case 12: SetPlayerCheckpoint(playerid, 1314.1515,-1841.0607,13.2574,6.0); //
			case 13: SetPlayerCheckpoint(playerid, 1314.0039,-1625.3364,13.2578,6.0); //
			case 14: SetPlayerCheckpoint(playerid, 1357.3412,-1439.5521,13.2648,6.0); //
			case 15: SetPlayerCheckpoint(playerid, 1152.1827,-1397.5198,13.3916,6.0); //
			case 16: SetPlayerCheckpoint(playerid, 968.0258,-1392.5929,12.9562,6.0), EhliyetCheckpoint_Son[playerid] = true; //

			case 17: {
				if(IsPlayerInRangeOfPoint(playerid, 6.0, 968.0258,-1392.5929,12.9562))
				{
					static arac;
					arac = GetPlayerVehicleID(playerid);
					if(AracCan(arac) > 750.0) {
						DisablePlayerCheckpoint(playerid);
						RemovePlayerFromVehicle(playerid);
						ASpawn(arac);
						oyuncuData[playerid][oEhliyetTesti] = 0;
						if(EhliyetCheckpoint_Son[playerid] == false) return hataMesaji(playerid, "Ehliyet rotasý ve sýnavý iptal edildi."), Log_Kaydet("loglar/cp_buguyapanlar.txt", "[%s] %s checkpoint bugu: Ehliyet son CP (Hatasiz)", Tarih(), OyuncuIsim(playerid));
						EhliyetCheckpoint_Son[playerid] = false;//basarili
						oyuncuData[playerid][oEhliyet] = true;
						SunucuMesaji(playerid, "Tebrikler! Testi baþarýyla tamamlayarak ehliyet kazandýn.");
						return 1;
					}
					else if(AracCan(arac) < 751.0) {
						DisablePlayerCheckpoint(playerid);
						RemovePlayerFromVehicle(playerid);
						ASpawn(arac);
						oyuncuData[playerid][oEhliyetTesti] = 0;
						if(EhliyetCheckpoint_Son[playerid] == false) return hataMesaji(playerid, "Ehliyet rotasý ve sýnavý iptal edildi."), Log_Kaydet("loglar/cp_buguyapanlar.txt", "[%s] %s checkpoint bugu: Ehliyet son CP (Hatali)", Tarih(), OyuncuIsim(playerid));
						EhliyetCheckpoint_Son[playerid] = false;
						hataMesaji(playerid, "Araç hasarlý olduðu için ehliyet kazanamadýn.");
						oyuncuData[playerid][oEhliyet] = false;
						return 1;
					}
				}
				else
				{
					DisablePlayerCheckpoint(playerid);
					RemovePlayerFromVehicle(playerid);
					ASpawn(aracid);
					oyuncuData[playerid][oEhliyetTesti] = 0;
					EhliyetCheckpoint_Son[playerid] = false;
					oyuncuData[playerid][oEhliyet] = false;
				}
			}
		}
		oyuncuData[playerid][oEhliyetTesti]++;
	}
	else if(oyuncuData[playerid][oYarisID] != -1 && GetPVarInt(playerid, "BirYarista") == 1)
	{
		new query[150], Cache:GetCache, rows;
		mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM race_cp WHERE race_id = '%d' AND cp_id > '%d' LIMIT 1", oyuncuData[playerid][oYarisID], oyuncuData[playerid][oYarisCP]);
		GetCache = mysql_query(g_SQL, query);
		cache_get_row_count(rows);
		if(rows)
		{
			new Float:cpx, Float:cpy, Float:cpz;
			cache_get_value_name_int(0, "cp_id", oyuncuData[playerid][oYarisCP]);
			cache_get_value_name_float(0, "cp_x", cpx);
			cache_get_value_name_float(0, "cp_y", cpy);
			cache_get_value_name_float(0, "cp_z", cpz);
			SetPlayerCheckpoint(playerid, cpx, cpy, cpz, 13.0);
		}
		else if(!rows)
		{
			foreach(new i : Player)
			{
				if(oyuncuData[i][oYarisID] == oyuncuData[playerid][oYarisID] && oyuncuData[i][oYarisID] != -1)
				{
					SunucuMesaji(i, "%s adlý kiþi yarýþý %d. olarak tamamladý.", OyuncuIsim(playerid), oyuncuData[playerid][oYarisSiralama]);
					new sirastr[64];
					switch(oyuncuData[playerid][oYarisSiralama])
					{
						case 1:
						{
							format(sirastr, sizeof(sirastr), "1._%s", oyuncuData[playerid][oIsim]);
							PlayerTextDrawSetString(i, yaristd_1[i], sirastr);
							PlayerTextDrawShow(i, yaristd_1[i]);
							PlayerTextDrawShow(i, yaristd_7[i]);
						}
						case 2:
						{
							format(sirastr, sizeof(sirastr), "2._%s", oyuncuData[playerid][oIsim]);
							PlayerTextDrawSetString(i, yaristd_2[i], sirastr);
							PlayerTextDrawShow(i, yaristd_2[i]);
						}
						case 3:
						{
							format(sirastr, sizeof(sirastr), "3._%s", oyuncuData[playerid][oIsim]);
							PlayerTextDrawSetString(i, yaristd_3[i], sirastr);
							PlayerTextDrawShow(i, yaristd_3[i]);
						}
						case 4:
						{
							format(sirastr, sizeof(sirastr), "4._%s", oyuncuData[playerid][oIsim]);
							PlayerTextDrawSetString(i, yaristd_5[i], sirastr);
							PlayerTextDrawShow(i, yaristd_5[i]);
						}
						case 5:
						{
							format(sirastr, sizeof(sirastr), "5._%s", oyuncuData[playerid][oIsim]);
							PlayerTextDrawSetString(i, yaristd_6[i], sirastr);
							PlayerTextDrawShow(i, yaristd_6[i]);
						}
					}
					oyuncuData[playerid][oYarisDavet] = -1;
					oyuncuData[playerid][oYarisKalanSure] = -1;
					oyuncuData[playerid][oYarisCP] = -1;
				}
			}
			foreach(new i : Player)
			{
				if(i != playerid && oyuncuData[i][oYarisID] == oyuncuData[playerid][oYarisID])
				{
					oyuncuData[i][oYarisSiralama]++;
				}
			}
			if(oyuncuData[playerid][oYarisSiralama] >= oyuncuData[playerid][oYarisKatilimci])
			{
				foreach(new i : Player)
				{
					if(oyuncuData[i][oYarisID] == oyuncuData[playerid][oYarisID])
					{
						SunucuMesaji(i, "Yarýþ sona erdi. On saniye sonra tüm bilgiler sýfýrlanacak.");
					}
                }
                SetTimerEx("RaceFinished", 5000, false, "d", oyuncuData[playerid][oYarisID]);
			}
		}
		cache_delete(GetCache);
	}
	else if(truckerseviyebirde[playerid] > 0 && AracBilgi[aracid][aracMeslek] == 5)
	{
		switch(truckerseviyebirde[playerid])
		{
			case 1: SetPlayerCheckpoint(playerid, 2482.0076,-2572.1033,13.4898, 10.0);
			case 2: SetPlayerCheckpoint(playerid, 2226.9709,-2559.8525,13.3901, 10.0);
			case 3: SetPlayerCheckpoint(playerid, 2159.8374,-2511.3591,13.3594, 10.0);
			case 4: SetPlayerCheckpoint(playerid, 1478.4586,-2668.2942,11.4832, 10.0);
			case 5: SetPlayerCheckpoint(playerid, 1347.8712,-2277.4495,13.3741, 10.0);
			case 6: SetPlayerCheckpoint(playerid, 1624.1298,-1775.7178,27.2773, 10.0);
			case 7: SetPlayerCheckpoint(playerid, 1660.2277,-1154.9005,57.3405, 10.0);
			case 8: SetPlayerCheckpoint(playerid, 1677.0800,-1049.0873,44.3296, 10.0);
			case 9: SetPlayerCheckpoint(playerid, 1507.7230,-937.2681,38.1799, 10.0);
			case 10: SetPlayerCheckpoint(playerid, 1195.4459,-935.8801,42.7308, 10.0);
			case 11: SetPlayerCheckpoint(playerid, 1157.6714,-874.9965,44.3572, 10.0);
			case 12: SetPlayerCheckpoint(playerid, 1251.8046,-493.4797,22.7895, 10.0);
			case 13: SetPlayerCheckpoint(playerid, 1247.8354,-414.1169,2.6870, 10.0);
			case 14: SetPlayerCheckpoint(playerid, 1050.2600,-446.1392,51.0825, 10.0);
			case 15: SetPlayerCheckpoint(playerid, 1081.9767,-343.6003,73.9771, 10.0);
			case 16:
			{
				if(IsPlayerInRangeOfPoint(playerid, 20.0, 1081.9767,-343.6003,73.9771))
				{
					new kod[16], sayi, kodsayi;
					sayi = randomEx(1, 6);
					kodsayi = randomEx(1, 40);
					switch(sayi)
					{
						case 1: format(kod, sizeof kod, "AXG%d", kodsayi);
						case 2: format(kod, sizeof kod, "FJX%d", kodsayi);
						case 3: format(kod, sizeof kod, "AIH%d", kodsayi);
						case 4: format(kod, sizeof kod, "MGJ%d", kodsayi);
						case 5: format(kod, sizeof kod, "LMA%d", kodsayi);
					}
					format(oyuncuData[playerid][oTruckerKod], 16, "%s", kod);
					oyuncuData[playerid][oTruckerKodiste] = true;
					SCM_Ex(playerid, RENK_TURUNCU, "/truckerkod %s komutunu kullanarak devam edebilirsin!", kod);
					TogglePlayerControllable(playerid, false);
				}
			}
			case 17: SetPlayerCheckpoint(playerid, 1023.6754,-431.3237,56.7726, 10.0);
			case 18: SetPlayerCheckpoint(playerid, 1212.1692,-422.8216,7.6714, 10.0);
			case 19: SetPlayerCheckpoint(playerid, 1157.5695,-930.3442,43.0328, 10.0);
			case 20: SetPlayerCheckpoint(playerid, 1402.4169,-951.0903,35.0419, 10.0);
			case 21: SetPlayerCheckpoint(playerid, 1599.3142,-1319.3052,33.7600, 10.0);
			case 22: SetPlayerCheckpoint(playerid, 1641.6947,-1930.8000,24.2813, 10.0);
			case 23: SetPlayerCheckpoint(playerid, 1330.6938,-2313.3955,13.3642, 10.0);
			case 24: SetPlayerCheckpoint(playerid, 1540.3019,-2686.9031,7.9231, 10.0);
			case 25: SetPlayerCheckpoint(playerid, 2177.1223,-2539.7566,13.3669, 10.0);
			case 26: SetPlayerCheckpoint(playerid, 2249.4602,-2329.0742,13.3579, 10.0);
			case 27: SetPlayerCheckpoint(playerid, 2301.9385,-2320.7852,13.3639, 10.0);
			case 28: SetPlayerCheckpoint(playerid, 2400.4436,-2418.5869,13.3655, 10.0);
			case 29: SetPlayerCheckpoint(playerid, 2471.0627,-2430.6719,13.4354, 10.0);
			case 30: SetPlayerCheckpoint(playerid, 2527.5513,-2467.5686,13.6105, 10.0);
			case 31:
			{
				if(oyuncuData[playerid][oTruckerBasari] == true)
				{
					RemovePlayerFromVehicle(playerid);
					ASpawn(aracid);
					truckerseviyebirde[playerid] = -1;


					oyuncuData[playerid][oTruckerEXP]++;
					if(oyuncuData[playerid][oTruckerEXP] > 9)
					{
						if(oyuncuData[playerid][oTruckerSeviye] < 20)
						{
							oyuncuData[playerid][oTruckerSeviye]++;
							oyuncuData[playerid][oTruckerEXP] = 0;
							SunucuMesaji(playerid, "Trucker seviyesi yükseldi, %d seviyeye ulaþtýn.", oyuncuData[playerid][oTruckerSeviye]);
						}
					}
					new seviyeucreti = oyuncuData[playerid][oTruckerSeviye] * 8;
					if(oyuncuData[playerid][oMeslekPaketi] < 1)
					{
						ParaEkle(playerid, TRUCKER_BIR_UCRET + seviyeucreti);
						SunucuMesaji(playerid, "Trucker turunu tamamladýn ve $%d kazandýn.", TRUCKER_BIR_UCRET + seviyeucreti);
					}
					else
					{
						ParaEkle(playerid, TRUCKER_BIR_UCRET + YuzdeHesapla(TRUCKER_BIR_UCRET, MESLEK_PAKET_YUZDE) + seviyeucreti);
						SunucuMesaji(playerid, "Trucker turunu tamamladýn ve $%d kazandýn.", TRUCKER_BIR_UCRET + YuzdeHesapla(TRUCKER_BIR_UCRET, MESLEK_PAKET_YUZDE) + seviyeucreti);
					}
					Log_Kaydet("loglar/truckerlog.txt", "[%s] %s adli kisi trucker gorevini tamamladi.(Seviye 1)", Tarih(), OyuncuIsim(playerid));
					OyuncuKaydet(playerid);
				}
				else
				{
					RemovePlayerFromVehicle(playerid);
					ASpawn(aracid);
					truckerseviyebirde[playerid] = -1;
				}
			}
		}
		truckerseviyebirde[playerid]++;
	}
	else if(truckerseviyeikide[playerid] > 0 && AracBilgi[aracid][aracMeslek] == 5)
	{
		switch(truckerseviyeikide[playerid])
		{
			case 1: SetPlayerCheckpoint(playerid,2456.0747,-2660.6392,13.5872,5.0);
			case 2: SetPlayerCheckpoint(playerid,2249.8130,-2660.8865,13.5267,5.0);
			case 3: SetPlayerCheckpoint(playerid,2227.6738,-2640.3096,13.4710,5.0);
			case 4: SetPlayerCheckpoint(playerid,2227.6963,-2508.6001,13.4456,5.0);
			case 5: SetPlayerCheckpoint(playerid,2216.5205,-2492.5903,13.4880,5.0);
			case 6: SetPlayerCheckpoint(playerid,2167.2117,-2492.9141,13.4688,5.0);
			case 7: SetPlayerCheckpoint(playerid,2158.6448,-2506.7314,13.4686,5.0);
			case 8: SetPlayerCheckpoint(playerid,2155.2942,-2587.9375,13.4680,5.0);
			case 9: SetPlayerCheckpoint(playerid,2132.2390,-2635.8293,13.4687,5.0);
			case 10: SetPlayerCheckpoint(playerid,1994.6094,-2667.7366,9.6427,5.0);
			case 11: SetPlayerCheckpoint(playerid,1477.8473,-2667.5371,11.6173,5.0);
			case 12: SetPlayerCheckpoint(playerid,1412.1355,-2660.3545,13.4687,5.0);
			case 13: SetPlayerCheckpoint(playerid,1360.7556,-2614.4028,13.4745,5.0);
			case 14: SetPlayerCheckpoint(playerid,1348.3723,-2400.6760,13.4689,5.0);
			case 15: SetPlayerCheckpoint(playerid,1350.9678,-2223.7651,13.4761,5.0);
			case 16: SetPlayerCheckpoint(playerid,1406.4171,-2143.2129,13.4760,5.0);
			case 17: SetPlayerCheckpoint(playerid,1508.7534,-2134.5461,13.9887,5.0);
			case 18: SetPlayerCheckpoint(playerid,1608.2665,-2101.0295,18.7763,5.0);
			case 19: SetPlayerCheckpoint(playerid,1658.1774,-2042.6340,22.1816,5.0);
			case 20: SetPlayerCheckpoint(playerid,1665.4675,-1944.7069,23.9796,5.0);
			case 21: SetPlayerCheckpoint(playerid,1617.5388,-1721.2682,28.1533,5.0);
			case 22: SetPlayerCheckpoint(playerid,1623.7297,-1317.0228,34.8629,5.0);
			case 23: SetPlayerCheckpoint(playerid,1637.8196,-1210.3401,52.5343,5.0);
			case 24: SetPlayerCheckpoint(playerid,1658.7778,-1161.5992,56.9248,5.0);
			case 25: SetPlayerCheckpoint(playerid,1680.7114,-1099.8179,58.8068,5.0);
			case 26: SetPlayerCheckpoint(playerid,1635.8414,-981.1193,29.0968,5.0);
			case 27: SetPlayerCheckpoint(playerid,1508.2240,-932.0983,38.5895,5.0);
			case 28: SetPlayerCheckpoint(playerid,1387.5201,-934.4788,34.2781,5.0);
			case 29: SetPlayerCheckpoint(playerid,1180.7417,-937.7807,42.8622,5.0);
			case 30: SetPlayerCheckpoint(playerid,1158.5138,-885.8327,42.8318,5.0);
			case 31: SetPlayerCheckpoint(playerid,1186.5360,-676.9317,61.8212,5.0);
			case 32: SetPlayerCheckpoint(playerid,1240.3091,-538.4674,35.4504,5.0);
			case 33: SetPlayerCheckpoint(playerid,1263.8273,-418.2019,2.6287,5.0);
			case 34: SetPlayerCheckpoint(playerid,1246.2268,-415.8138,2.9729,5.0);
			case 35: SetPlayerCheckpoint(playerid,1073.8680,-440.1826,48.3269,5.0);
			case 36: SetPlayerCheckpoint(playerid,998.7458,-470.3846,50.1183,5.0);
			case 37: SetPlayerCheckpoint(playerid,898.4771,-546.7103,24.4979,5.0);
			case 38: SetPlayerCheckpoint(playerid,844.6056,-578.8643,16.7796,5.0);
			case 39: SetPlayerCheckpoint(playerid,844.9517,-598.9269,18.4819,5.0);
			case 40:
			{
				if(IsPlayerInRangeOfPoint(playerid, 15.0, 844.9517,-598.9269,18.4819))
				{
					new kod[16], sayi, kodsayi;
					sayi = randomEx(1, 6);
					kodsayi = randomEx(1, 40);
					switch(sayi)
					{
						case 1: format(kod, sizeof kod, "AXG%d", kodsayi);
						case 2: format(kod, sizeof kod, "FJX%d", kodsayi);
						case 3: format(kod, sizeof kod, "AIH%d", kodsayi);
						case 4: format(kod, sizeof kod, "MGJ%d", kodsayi);
						case 5: format(kod, sizeof kod, "LMA%d", kodsayi);
					}
					format(oyuncuData[playerid][oTruckerKod], 16, "%s", kod);
					oyuncuData[playerid][oTruckerKodiste] = true;
					SCM_Ex(playerid, RENK_TURUNCU, "/truckerkod %s komutunu kullanarak devam edebilirsin!", kod);
					TogglePlayerControllable(playerid, false);
				}
			}
			case 41: SetPlayerCheckpoint(playerid,828.6962,-583.1121,16.2808,5.0);
			case 42: SetPlayerCheckpoint(playerid,817.1476,-592.3190,16.2810,5.0);
			case 43: SetPlayerCheckpoint(playerid,798.0892,-591.4521,16.2818,5.0);
			case 44: SetPlayerCheckpoint(playerid,794.3967,-543.1058,16.2792,5.0);
			case 45: SetPlayerCheckpoint(playerid,787.9067,-527.6869,16.2812,5.0);
			case 46: SetPlayerCheckpoint(playerid,730.5833,-527.5441,16.2759,5.0);
			case 47: SetPlayerCheckpoint(playerid,687.6745,-527.3769,16.2813,5.0);
			case 48: SetPlayerCheckpoint(playerid,679.7961,-551.2656,16.2793,5.0);
			case 49: SetPlayerCheckpoint(playerid,679.3281,-673.9127,16.2813,5.0);
			case 50: SetPlayerCheckpoint(playerid,689.3348,-830.6435,42.6384,5.0);
			case 51: SetPlayerCheckpoint(playerid,763.9631,-905.3452,43.3795,5.0);
			case 52: SetPlayerCheckpoint(playerid,793.0781,-960.8706,38.7283,5.0);
			case 53: SetPlayerCheckpoint(playerid,792.7454,-1031.0553,25.2012,5.0);
			case 54: SetPlayerCheckpoint(playerid,767.3238,-1045.1550,24.0640,5.0);
			case 55: SetPlayerCheckpoint(playerid,692.8233,-1130.4449,16.6960,5.0);
			case 56: SetPlayerCheckpoint(playerid,594.3814,-1215.2391,18.0138,5.0);
			case 57: SetPlayerCheckpoint(playerid,486.0719,-1281.5806,15.6015,5.0);
			case 58: SetPlayerCheckpoint(playerid,357.6514,-1368.0343,14.4277,5.0);
			case 59: SetPlayerCheckpoint(playerid,168.0818,-1529.3053,12.3225,5.0);
			case 60: SetPlayerCheckpoint(playerid,144.0405,-1564.5107,10.7121,5.0);
			case 61: SetPlayerCheckpoint(playerid,159.0785,-1591.5067,13.0540,5.0);
			case 62: SetPlayerCheckpoint(playerid,223.5476,-1670.2329,11.5935,5.0);
			case 63: SetPlayerCheckpoint(playerid,376.9331,-1719.1411,7.4430,5.0);
			case 64: SetPlayerCheckpoint(playerid,684.2880,-1762.5940,13.3698,5.0);
			case 65: SetPlayerCheckpoint(playerid,858.0817,-1786.7603,13.8543,5.0);
			case 66: SetPlayerCheckpoint(playerid,987.3798,-1804.6633,14.1563,5.0);
			case 67: SetPlayerCheckpoint(playerid,1045.0195,-1870.3503,13.3709,5.0);
			case 68: SetPlayerCheckpoint(playerid,1045.2808,-2297.8096,13.0142,5.0);
			case 69: SetPlayerCheckpoint(playerid,1163.7200,-2425.9446,10.4917,5.0);
			case 70: SetPlayerCheckpoint(playerid,1297.3872,-2465.7451,7.7803,5.0);
			case 71: SetPlayerCheckpoint(playerid,1316.5323,-2470.4644,7.7500,5.0);
			case 72: SetPlayerCheckpoint(playerid,1318.3022,-2499.6582,11.9151,5.0);
			case 73: SetPlayerCheckpoint(playerid,1328.5048,-2563.4348,13.4425,5.0);
			case 74: SetPlayerCheckpoint(playerid,1337.5559,-2611.5913,13.4687,5.0);
			case 75: SetPlayerCheckpoint(playerid,1381.9310,-2667.3489,13.4766,5.0);
			case 76: SetPlayerCheckpoint(playerid,1497.4196,-2687.2878,10.4972,5.0);
			case 77: SetPlayerCheckpoint(playerid,1748.4431,-2687.3599,5.9963,5.0);
			case 78: SetPlayerCheckpoint(playerid,1919.7681,-2687.3914,6.0303,5.0);
			case 79: SetPlayerCheckpoint(playerid,2058.7214,-2687.1882,13.3284,5.0);
			case 80: SetPlayerCheckpoint(playerid,2095.9392,-2681.9128,13.4705,5.0);
			case 81: SetPlayerCheckpoint(playerid,2153.1213,-2643.2314,13.4730,5.0);
			case 82: SetPlayerCheckpoint(playerid,2177.3679,-2469.0835,13.4688,5.0);
			case 83: SetPlayerCheckpoint(playerid,2191.9778,-2396.0432,13.4685,5.0);
			case 84: SetPlayerCheckpoint(playerid,2256.5681,-2321.8506,13.4687,5.0);
			case 85: SetPlayerCheckpoint(playerid,2293.1943,-2313.5823,13.4718,5.0);
			case 86: SetPlayerCheckpoint(playerid,2315.4277,-2335.4836,13.4766,5.0);
			case 87: SetPlayerCheckpoint(playerid,2304.3933,-2353.6665,13.4924,5.0);
			case 88: SetPlayerCheckpoint(playerid,2255.0366,-2403.1289,13.5011,5.0);
			case 89: SetPlayerCheckpoint(playerid,2222.5581,-2477.3594,13.4419,5.0);
			case 90: SetPlayerCheckpoint(playerid,2222.2722,-2559.0562,13.4886,5.0);
			case 91: SetPlayerCheckpoint(playerid,2222.9729,-2642.2539,13.4967,5.0);
			case 92: SetPlayerCheckpoint(playerid,2243.8894,-2663.8538,13.5634,5.0);
			case 93: SetPlayerCheckpoint(playerid,2439.9529,-2666.2283,13.5872,5.0);
			case 94: SetPlayerCheckpoint(playerid,2486.2932,-2648.8250,13.6001,5.0);
			case 95: SetPlayerCheckpoint(playerid,2500.2209,-2598.8030,13.7433,5.0);
			case 96:
			{
				if(IsPlayerInRangeOfPoint(playerid, 15.0, 2500.2209,-2598.8030,13.7433) && oyuncuData[playerid][oTruckerBasari] == true)
				{
					RemovePlayerFromVehicle(playerid);
					ASpawn(aracid);
					truckerseviyeikide[playerid] = -1;

					oyuncuData[playerid][oTruckerEXP]++;
					if(oyuncuData[playerid][oTruckerEXP] > 9)
					{
						if(oyuncuData[playerid][oTruckerSeviye] < 20)
						{
							oyuncuData[playerid][oTruckerSeviye]++;
							oyuncuData[playerid][oTruckerEXP] = 0;
							SunucuMesaji(playerid, "Trucker seviyesi yükseldi, %d seviyeye ulaþtýn.", oyuncuData[playerid][oTruckerSeviye]);
						}
					}
					new seviyeucreti = oyuncuData[playerid][oTruckerSeviye] * 7;
					if(oyuncuData[playerid][oMeslekPaketi] < 1)
					{
						ParaEkle(playerid, TRUCKER_IKI_UCRET + seviyeucreti);
						SunucuMesaji(playerid, "Trucker turunu tamamladýn ve $%d kazandýn.", TRUCKER_IKI_UCRET + seviyeucreti);
					}
					else
					{
						ParaEkle(playerid, TRUCKER_IKI_UCRET + YuzdeHesapla(TRUCKER_IKI_UCRET, MESLEK_PAKET_YUZDE) + seviyeucreti);
						SunucuMesaji(playerid, "Trucker turunu tamamladýn ve $%d kazandýn.", TRUCKER_IKI_UCRET + YuzdeHesapla(TRUCKER_IKI_UCRET, MESLEK_PAKET_YUZDE) + seviyeucreti);
					}
					Log_Kaydet("loglar/truckerlog.txt", "[%s] %s adli kisi trucker gorevini tamamladi.(Seviye 2)", Tarih(), OyuncuIsim(playerid));
					OyuncuKaydet(playerid);
				}
				else
				{
					RemovePlayerFromVehicle(playerid);
					ASpawn(aracid);
					truckerseviyeikide[playerid] = -1;
				}
			}
		}
		truckerseviyeikide[playerid]++;
	}
	else if(truckerseviyeucte[playerid] > 0 && oyuncuData[playerid][oTirGuzergah] == 1 && AracBilgi[aracid][aracMeslek] == 5)
	{
		switch(truckerseviyeucte[playerid])
		{
			case 1: SetPlayerCheckpoint(playerid,2194.2634,-2493.2744,14.4195,5.0);
			case 2: SetPlayerCheckpoint(playerid,2157.1892,-2572.0498,14.3920,5.0);
			case 3: SetPlayerCheckpoint(playerid,1852.0624,-2667.8992,6.8862,5.0);
			case 4: SetPlayerCheckpoint(playerid,1348.3257,-2537.9871,14.3938,5.0);
			case 5: SetPlayerCheckpoint(playerid,1351.4735,-2213.3362,14.4015,5.0);
			case 6: SetPlayerCheckpoint(playerid,1570.7395,-2120.4683,17.1379,5.0);
			case 7: SetPlayerCheckpoint(playerid,1655.0031,-1907.0079,25.7864,5.0);
			case 8: SetPlayerCheckpoint(playerid,1613.2518,-1663.9678,29.4963,5.0);
			case 9: SetPlayerCheckpoint(playerid,1622.1152,-1314.0332,36.4690,5.0);
			case 10: SetPlayerCheckpoint(playerid,1680.1625,-922.4100,63.0257,5.0);
			case 11: SetPlayerCheckpoint(playerid,1720.2532,-604.0364,39.5988,5.0);
			case 12: SetPlayerCheckpoint(playerid,1642.7714,-1.2838,37.6264,5.0);
			case 13: SetPlayerCheckpoint(playerid,1763.1982,558.4387,26.3918,5.0);
			case 14: SetPlayerCheckpoint(playerid,1809.2312,814.3707,11.8686,5.0);
			case 15: SetPlayerCheckpoint(playerid,1705.3279,855.4472,9.3299,5.0);
			case 16: SetPlayerCheckpoint(playerid,1459.2906,857.0349,7.8391,5.0);
			case 17: SetPlayerCheckpoint(playerid,1224.4470,923.1077,14.1500,5.0);
			case 18: SetPlayerCheckpoint(playerid,942.1300,748.6627,11.7013,5.0);
			case 19: SetPlayerCheckpoint(playerid,632.1843,681.0585,6.9872,5.0);
			case 20: SetPlayerCheckpoint(playerid,321.5331,777.4839,7.1900,5.0);
			case 21: SetPlayerCheckpoint(playerid,-9.7029,636.5220,10.1270,5.0);
			case 22: SetPlayerCheckpoint(playerid,-405.4309,582.1762,17.9800,5.0);
			case 23: SetPlayerCheckpoint(playerid,-814.9227,787.4608,19.0187,5.0);
			case 24: SetPlayerCheckpoint(playerid,-1062.3541,1392.2803,32.5746,5.0);
			case 25: SetPlayerCheckpoint(playerid,-1181.6180,1683.5498,21.6464,5.0);
			case 26: SetPlayerCheckpoint(playerid,-1504.2720,1761.8666,17.9842,5.0);
			case 27: SetPlayerCheckpoint(playerid,-1631.9078,2067.8948,20.1606,5.0);
			case 28: SetPlayerCheckpoint(playerid,-2241.8245,2682.7808,55.7164,5.0);
			case 29: SetPlayerCheckpoint(playerid,-2771.5603,2440.0339,93.1049,5.0);
			case 30: SetPlayerCheckpoint(playerid,-2773.2163,2373.5137,79.4634,5.0);
			case 31: SetPlayerCheckpoint(playerid,-2752.0940,2346.4705,74.1363,5.0);
			case 32: SetPlayerCheckpoint(playerid,-2706.0164,2363.3457,71.9486,5.0);
			case 33: SetPlayerCheckpoint(playerid,-2662.3196,2474.9441,38.5003,5.0);
			case 34: SetPlayerCheckpoint(playerid,-2596.9487,2491.8745,24.0953,5.0);
			case 35: SetPlayerCheckpoint(playerid,-2514.6648,2431.1248,17.8106,5.0);
			case 36: SetPlayerCheckpoint(playerid,-2445.0139,2432.0369,15.0433,5.0);
			case 37: SetPlayerCheckpoint(playerid,-2331.9424,2390.8625,6.7951,5.0);
			case 38: SetPlayerCheckpoint(playerid,-2270.0542,2300.6843,5.8394,5.0);
			case 39:
			{
				if(IsPlayerInRangeOfPoint(playerid, 7.0, -2270.0542,2300.6843,5.8394))
				{
					new kod[16], sayi, kodsayi;
					sayi = randomEx(1, 6);
					kodsayi = randomEx(1, 40);
					switch(sayi)
					{
						case 1: format(kod, sizeof kod, "AXG%d", kodsayi);
						case 2: format(kod, sizeof kod, "FJX%d", kodsayi);
						case 3: format(kod, sizeof kod, "AIH%d", kodsayi);
						case 4: format(kod, sizeof kod, "MGJ%d", kodsayi);
						case 5: format(kod, sizeof kod, "LMA%d", kodsayi);
					}
					format(oyuncuData[playerid][oTruckerKod], 16, "%s", kod);
					oyuncuData[playerid][oTruckerKodiste] = true;
					SCM_Ex(playerid, RENK_TURUNCU, "/truckerkod %s komutunu kullanarak devam edebilirsin!", kod);
					TogglePlayerControllable(playerid, false);
				}
			}
			case 40: SetPlayerCheckpoint(playerid,-2351.1904,2409.0161,7.4994,5.0);
			case 41: SetPlayerCheckpoint(playerid,-2567.2100,2482.9517,20.8833,5.0);
			case 42: SetPlayerCheckpoint(playerid,-2722.1514,2365.1345,72.6109,5.0);
			case 43: SetPlayerCheckpoint(playerid,-2753.1570,2357.5825,74.7330,5.0);
			case 44: SetPlayerCheckpoint(playerid,-2722.7632,2242.0298,57.8888,5.0);
			case 45: SetPlayerCheckpoint(playerid,-2691.2109,2055.3333,57.1743,5.0);
			case 46: SetPlayerCheckpoint(playerid,-2694.4138,1272.8142,56.4484,5.0);
			case 47: SetPlayerCheckpoint(playerid,-2496.6421,1091.4850,56.5969,5.0);
			case 48: SetPlayerCheckpoint(playerid,-2183.7781,1051.9567,56.5974,5.0);
			case 49: SetPlayerCheckpoint(playerid,-1943.1138,1052.7639,54.4348,5.0);
			case 50: SetPlayerCheckpoint(playerid,-1901.9583,930.4601,36.0388,5.0);
			case 51: SetPlayerCheckpoint(playerid,-1902.3083,739.7306,46.3184,5.0);
			case 52: SetPlayerCheckpoint(playerid,-1901.9873,611.1798,36.0380,5.0);
			case 53: SetPlayerCheckpoint(playerid,-1837.9005,519.0504,33.7140,5.0);
			case 54: SetPlayerCheckpoint(playerid,-1845.0413,437.3951,18.1246,5.0);
			case 55: SetPlayerCheckpoint(playerid,-1845.5234,400.7831,18.0520,5.0);
			case 56: SetPlayerCheckpoint(playerid,-1886.1705,248.4214,39.1893,5.0);
			case 57: SetPlayerCheckpoint(playerid,-1905.8777,13.9578,39.2529,5.0);
			case 58: SetPlayerCheckpoint(playerid,-1916.1655,-123.1334,39.2569,5.0);
			case 59: SetPlayerCheckpoint(playerid,-2004.7401,-316.6481,36.3092,5.0);
			case 60: SetPlayerCheckpoint(playerid,-2250.4543,-332.3436,39.7091,5.0);
			case 61: SetPlayerCheckpoint(playerid,-2560.6770,-332.5665,25.6291,5.0);
			case 62: SetPlayerCheckpoint(playerid,-2751.7639,-426.6992,8.2395,5.0);
			case 63: SetPlayerCheckpoint(playerid,-2891.9031,-1010.9078,10.5099,5.0);
			case 64: SetPlayerCheckpoint(playerid,-2937.3237,-1582.4366,12.3408,5.0);
			case 65: SetPlayerCheckpoint(playerid,-2735.9453,-2040.6077,38.0735,5.0);
			case 66: SetPlayerCheckpoint(playerid,-2517.6609,-2297.9492,30.1341,5.0);
			case 67: SetPlayerCheckpoint(playerid,-2265.5378,-2655.9402,59.9800,5.0);
			case 68: SetPlayerCheckpoint(playerid,-2048.6282,-2665.8306,55.8159,5.0);
			case 69: SetPlayerCheckpoint(playerid,-1830.4341,-2603.3892,56.8608,5.0);
			case 70: SetPlayerCheckpoint(playerid,-1507.9082,-2864.6660,47.9398,5.0);
			case 71: SetPlayerCheckpoint(playerid,-1094.0580,-2865.5435,68.7367,5.0);
			case 72: SetPlayerCheckpoint(playerid,-768.9906,-2808.0320,53.9106,5.0);
			case 73: SetPlayerCheckpoint(playerid,-17.5382,-2795.6255,41.4048,5.0);
			case 74: SetPlayerCheckpoint(playerid,-107.6680,-2439.9819,34.5027,5.0);
			case 75: SetPlayerCheckpoint(playerid,-336.1719,-2014.7028,27.0692,5.0);
			case 76: SetPlayerCheckpoint(playerid,-277.3998,-1713.4149,15.1771,5.0);
			case 77: SetPlayerCheckpoint(playerid,-121.2126,-1469.3121,13.8239,5.0);
			case 78: SetPlayerCheckpoint(playerid,42.5899,-1327.0763,11.8790,5.0);
			case 79: SetPlayerCheckpoint(playerid,424.8344,-1142.7227,31.4737,5.0);
			case 80: SetPlayerCheckpoint(playerid,605.9594,-1196.8076,19.8799,5.0);
			case 81: SetPlayerCheckpoint(playerid,644.6695,-1210.2836,19.1369,5.0);
			case 82: SetPlayerCheckpoint(playerid,773.1895,-1058.2167,25.4970,5.0);
			case 83: SetPlayerCheckpoint(playerid,1011.1014,-968.3129,42.7691,5.0);
			case 84: SetPlayerCheckpoint(playerid,1193.9934,-949.3759,43.6996,5.0);
			case 85: SetPlayerCheckpoint(playerid,1383.5596,-947.9279,35.2076,5.0);
			case 86: SetPlayerCheckpoint(playerid,1511.4624,-996.7238,40.6019,5.0);
			case 87: SetPlayerCheckpoint(playerid,1603.7882,-1142.3918,58.6042,5.0);
			case 88: SetPlayerCheckpoint(playerid,1598.2809,-1329.1350,33.1411,5.0);
			case 89: SetPlayerCheckpoint(playerid,1641.3203,-1933.7122,25.2522,5.0);
			case 90: SetPlayerCheckpoint(playerid,1568.9092,-2099.5164,17.5475,5.0);
			case 91: SetPlayerCheckpoint(playerid,1342.4950,-2178.2979,14.4068,5.0);
			case 92: SetPlayerCheckpoint(playerid,1329.8096,-2468.3284,14.3921,5.0);
			case 93: SetPlayerCheckpoint(playerid,1376.6594,-2663.6489,14.4009,5.0);
			case 94: SetPlayerCheckpoint(playerid,1734.4338,-2686.8884,6.9103,5.0);
			case 95: SetPlayerCheckpoint(playerid,2149.7661,-2646.2000,14.4094,5.0);
			case 96: SetPlayerCheckpoint(playerid,2177.7361,-2468.1956,14.3923,5.0);
			case 97: SetPlayerCheckpoint(playerid,2262.7053,-2309.3848,14.4111,5.0);
			case 98: SetPlayerCheckpoint(playerid,2306.8577,-2324.4019,14.4056,5.0);
			case 99:
			{
				if(IsPlayerInRangeOfPoint(playerid, 7.0, 2306.8577,-2324.4019,14.4056) && oyuncuData[playerid][oTruckerBasari] == true)
				{
					RemovePlayerFromVehicle(playerid);
					ASpawn(aracid);
					truckerseviyeucte[playerid] = -1;
					oyuncuData[playerid][oTirGuzergah] = 0;

					oyuncuData[playerid][oTruckerEXP]++;
					if(oyuncuData[playerid][oTruckerEXP] > 9)
					{
						if(oyuncuData[playerid][oTruckerSeviye] < 20)
						{
							oyuncuData[playerid][oTruckerSeviye]++;
							oyuncuData[playerid][oTruckerEXP] = 0;
							SunucuMesaji(playerid, "Trucker seviyesi yükseldi, %d seviyeye ulaþtýn.", oyuncuData[playerid][oTruckerSeviye]);
						}
					}
					new seviyeucreti = oyuncuData[playerid][oTruckerSeviye] * 5;
					if(oyuncuData[playerid][oMeslekPaketi] < 1)
					{
						ParaEkle(playerid, TRUCKER_UC_BIR_UCRET + seviyeucreti);
						SunucuMesaji(playerid, "Trucker turunu tamamladýn ve $%d kazandýn.", TRUCKER_UC_BIR_UCRET + seviyeucreti);
					}
					else
					{
						ParaEkle(playerid, TRUCKER_UC_BIR_UCRET + YuzdeHesapla(TRUCKER_UC_BIR_UCRET, MESLEK_PAKET_YUZDE) + seviyeucreti);
						SunucuMesaji(playerid, "Trucker turunu tamamladýn ve $%d kazandýn.", TRUCKER_UC_BIR_UCRET + YuzdeHesapla(TRUCKER_UC_BIR_UCRET, MESLEK_PAKET_YUZDE) + seviyeucreti);
					}
					Log_Kaydet("loglar/truckerlog.txt", "[%s] %s adli kisi trucker gorevini tamamladi.(Seviye 3 - Rota 1)", Tarih(), OyuncuIsim(playerid));
					OyuncuKaydet(playerid);
				}
				else
				{
					RemovePlayerFromVehicle(playerid);
					ASpawn(aracid);
					truckerseviyeucte[playerid] = -1;
					oyuncuData[playerid][oTirGuzergah] = 0;
				}
			}
		}
		truckerseviyeucte[playerid]++;
	}
	else if(truckerseviyeucte[playerid] > 0 && oyuncuData[playerid][oTirGuzergah] == 2 && AracBilgi[aracid][aracMeslek] == 5)
	{
		switch(truckerseviyeucte[playerid])
		{
			case 1: SetPlayerCheckpoint(playerid,2191.1731,-2493.5388,14.4016,5.0);
			case 2: SetPlayerCheckpoint(playerid,2158.3481,-2514.1084,14.3979,5.0);
			case 3: SetPlayerCheckpoint(playerid,2132.1362,-2636.3789,14.3932,5.0);
			case 4: SetPlayerCheckpoint(playerid,2018.5563,-2667.9402,11.9487,5.0);
			case 5: SetPlayerCheckpoint(playerid,1870.2740,-2667.8931,6.8866,5.0);
			case 6: SetPlayerCheckpoint(playerid,1542.9342,-2668.5623,8.8131,5.0);
			case 7: SetPlayerCheckpoint(playerid,1349.3779,-2566.1069,14.3946,5.0);
			case 8: SetPlayerCheckpoint(playerid,1348.2975,-2399.7429,14.3937,5.0);
			case 9: SetPlayerCheckpoint(playerid,1495.6486,-2133.5313,14.7444,5.0);
			case 10: SetPlayerCheckpoint(playerid,1611.6211,-1572.5663,29.6041,5.0);
			case 11: SetPlayerCheckpoint(playerid,1638.2744,-1207.9443,53.6649,5.0);
			case 12: SetPlayerCheckpoint(playerid,1674.0800,-1125.7440,60.4146,5.0);
			case 13: SetPlayerCheckpoint(playerid,1576.2167,-932.2082,42.8182,5.0);
			case 14: SetPlayerCheckpoint(playerid,1408.9667,-939.3333,36.3439,5.0);
			case 15: SetPlayerCheckpoint(playerid,1107.4115,-945.1729,43.6963,5.0);
			case 16: SetPlayerCheckpoint(playerid,791.4973,-1042.3763,25.6770,5.0);
			case 17: SetPlayerCheckpoint(playerid,584.5485,-1220.6416,18.7425,5.0);
			case 18: SetPlayerCheckpoint(playerid,336.3631,-1380.4307,15.1920,5.0);
			case 19: SetPlayerCheckpoint(playerid,154.1160,-1543.3942,11.5906,5.0);
			case 20: SetPlayerCheckpoint(playerid,89.8172,-1527.7799,6.5019,5.0);
			case 21: SetPlayerCheckpoint(playerid,-77.2556,-1502.6193,3.5393,5.0);
			case 22: SetPlayerCheckpoint(playerid,-133.7944,-1318.1802,3.2917,5.0);
			case 23: SetPlayerCheckpoint(playerid,-157.3560,-1464.7697,13.8236,5.0);
			case 24: SetPlayerCheckpoint(playerid,-301.9132,-1705.4415,15.4544,5.0);
			case 25: SetPlayerCheckpoint(playerid,-375.3801,-1958.4874,29.1669,5.0);
			case 26: SetPlayerCheckpoint(playerid,-268.5978,-2311.9585,31.5820,5.0);
			case 27: SetPlayerCheckpoint(playerid,-78.3378,-2518.2297,40.6854,5.0);
			case 28: SetPlayerCheckpoint(playerid,-223.9659,-2820.4736,47.3623,5.0);
			case 29: SetPlayerCheckpoint(playerid,-713.9968,-2755.1912,74.3709,5.0);
			case 30: SetPlayerCheckpoint(playerid,-1046.0806,-2849.6936,68.7483,5.0);
			case 31: SetPlayerCheckpoint(playerid,-1430.3140,-2855.5796,49.7947,5.0);
			case 32: SetPlayerCheckpoint(playerid,-1612.4857,-2724.7671,49.5675,5.0);
			case 33: SetPlayerCheckpoint(playerid,-1843.3181,-2571.8252,60.3490,5.0);
			case 34: SetPlayerCheckpoint(playerid,-2304.0637,-2598.0928,48.6396,5.0);
			case 35: SetPlayerCheckpoint(playerid,-2488.1001,-2278.8550,30.1365,5.0);
			case 36: SetPlayerCheckpoint(playerid,-2917.3750,-1274.6844,11.7751,5.0);
			case 37: SetPlayerCheckpoint(playerid,-2823.9636,-553.3726,8.0612,5.0);
			case 38: SetPlayerCheckpoint(playerid,-2413.0198,-343.0285,37.4002,5.0);
			case 39: SetPlayerCheckpoint(playerid,-2079.1699,-348.2964,36.3248,5.0);
			case 40: SetPlayerCheckpoint(playerid,-1881.5259,-140.7585,39.4175,5.0);
			case 41: SetPlayerCheckpoint(playerid,-1723.0883,475.1249,39.3278,5.0);
			case 42: SetPlayerCheckpoint(playerid,-1252.1377,967.5247,45.6182,5.0);
			case 43: SetPlayerCheckpoint(playerid,-1075.8480,1176.2113,39.8322,5.0);
			case 44: SetPlayerCheckpoint(playerid,-901.2800,1258.4713,35.6292,5.0);
			case 45: SetPlayerCheckpoint(playerid,-989.2712,1273.6304,34.1806,5.0);
			case 46: SetPlayerCheckpoint(playerid,-1104.5376,1572.5194,28.2177,5.0);
			case 47: SetPlayerCheckpoint(playerid,-1237.0967,1732.2090,18.9942,5.0);
			case 48: SetPlayerCheckpoint(playerid,-1413.6504,1849.5481,36.5318,5.0);
			case 49: SetPlayerCheckpoint(playerid,-1239.8879,1807.5145,41.9801,5.0);
			case 50: SetPlayerCheckpoint(playerid,-1199.1090,1834.3596,42.7165,5.0);
			case 51:
			{
				SetTimerEx("truckermola", 5000, false, "d", playerid);
				GameTextForPlayer(playerid, "MOLA VERDINIZ...", 5000, 3);
				TogglePlayerControllable(playerid, false);
			}
			case 52: SetPlayerCheckpoint(playerid,-1368.8203,2220.2512,54.1399,5.0);
			case 53: SetPlayerCheckpoint(playerid,-1369.9457,2605.5652,55.2250,5.0);
			case 54: SetPlayerCheckpoint(playerid,-1305.5140,2698.4590,51.0736,5.0);
			case 55:
			{
				if(IsPlayerInRangeOfPoint(playerid, 7.0, -1305.5140,2698.4590,51.0736))
				{
					new kod[16], sayi, kodsayi;
					sayi = randomEx(1, 6);
					kodsayi = randomEx(1, 40);
					switch(sayi)
					{
						case 1: format(kod, sizeof kod, "AXG%d", kodsayi);
						case 2: format(kod, sizeof kod, "FJX%d", kodsayi);
						case 3: format(kod, sizeof kod, "AIH%d", kodsayi);
						case 4: format(kod, sizeof kod, "MGJ%d", kodsayi);
						case 5: format(kod, sizeof kod, "LMA%d", kodsayi);
					}
					format(oyuncuData[playerid][oTruckerKod], 16, "%s", kod);
					oyuncuData[playerid][oTruckerKodiste] = true;
					SCM_Ex(playerid, RENK_TURUNCU, "/truckerkod %s komutunu kullanarak devam edebilirsin!", kod);
					TogglePlayerControllable(playerid, false);
				}
			}
			case 56: SetPlayerCheckpoint(playerid,-921.0123,2718.4773,46.8822,5.0);
			case 57: SetPlayerCheckpoint(playerid,-761.9797,2727.9883,46.5987,5.0);
			case 58: SetPlayerCheckpoint(playerid,-561.8424,2728.4875,65.3626,5.0);
			case 59: SetPlayerCheckpoint(playerid,-371.1607,2670.4231,66.0108,5.0);
			case 60: SetPlayerCheckpoint(playerid,-102.9753,2634.7512,64.9380,5.0);
			case 61: SetPlayerCheckpoint(playerid,109.2394,2703.9927,53.3395,5.0);
			case 62: SetPlayerCheckpoint(playerid,391.8094,2700.8015,61.7273,5.0);
			case 63: SetPlayerCheckpoint(playerid,475.4474,2710.4260,65.9159,5.0);
			case 64: SetPlayerCheckpoint(playerid,876.4467,2671.3777,32.2958,5.0);
			case 65: SetPlayerCheckpoint(playerid,854.2317,2533.0850,30.9280,5.0);
			case 66: SetPlayerCheckpoint(playerid,810.3880,2357.8818,28.7375,5.0);
			case 67: SetPlayerCheckpoint(playerid,720.2993,2583.2573,25.7341,5.0);
			case 68: SetPlayerCheckpoint(playerid,929.1522,2580.2500,11.4564,5.0);
			case 69: SetPlayerCheckpoint(playerid,1108.5580,2461.4417,11.6347,5.0);
			case 70: SetPlayerCheckpoint(playerid,1204.4414,2262.8506,7.7546,5.0);
			case 71: SetPlayerCheckpoint(playerid,1205.7002,1823.1877,7.7599,5.0);
			case 72: SetPlayerCheckpoint(playerid,1205.8850,1633.6498,7.7608,5.0);
			case 73: SetPlayerCheckpoint(playerid,1206.4574,1080.7081,7.8298,5.0);
			case 74: SetPlayerCheckpoint(playerid,1230.2861,948.4445,7.8306,5.0);
			case 75: SetPlayerCheckpoint(playerid,1450.1250,831.7823,7.8398,5.0);
			case 76: SetPlayerCheckpoint(playerid,1637.3141,831.7581,7.7608,5.0);
			case 77: SetPlayerCheckpoint(playerid,1778.1500,722.6490,15.1818,5.0);
			case 78: SetPlayerCheckpoint(playerid,1643.9066,273.9502,31.1992,5.0);
			case 79: SetPlayerCheckpoint(playerid,1635.5178,-34.4284,37.6413,5.0);
			case 80: SetPlayerCheckpoint(playerid,1686.8556,-745.7336,52.4761,5.0);
			case 81: SetPlayerCheckpoint(playerid,1598.7363,-1321.5303,34.3600,5.0);
			case 82: SetPlayerCheckpoint(playerid,1610.3627,-1817.3458,27.6104,5.0);
			case 83: SetPlayerCheckpoint(playerid,1553.6276,-2106.2820,16.5666,5.0);
			case 84: SetPlayerCheckpoint(playerid,1329.3357,-2306.0139,14.4010,5.0);
			case 85: SetPlayerCheckpoint(playerid,1330.3759,-2530.0249,14.3918,5.0);
			case 86: SetPlayerCheckpoint(playerid,1701.8210,-2686.8066,6.8851,5.0);
			case 87: SetPlayerCheckpoint(playerid,2131.7849,-2659.7979,14.3933,5.0);
			case 88: SetPlayerCheckpoint(playerid,2178.1187,-2463.3899,14.3939,5.0);
			case 89: SetPlayerCheckpoint(playerid,2256.7329,-2320.8994,14.3977,5.0);
			case 90: SetPlayerCheckpoint(playerid,2311.1902,-2329.2881,14.4037,5.0);
			case 91:
			{
				if(IsPlayerInRangeOfPoint(playerid, 7.0, 2311.1902,-2329.2881,14.4037) && oyuncuData[playerid][oTruckerBasari] == true)
				{
					RemovePlayerFromVehicle(playerid);
					ASpawn(aracid);
					truckerseviyeucte[playerid] = -1;
					oyuncuData[playerid][oTirGuzergah] = 0;

					oyuncuData[playerid][oTruckerEXP]++;
					if(oyuncuData[playerid][oTruckerEXP] > 9)
					{
						if(oyuncuData[playerid][oTruckerSeviye] < 20)
						{
							oyuncuData[playerid][oTruckerSeviye]++;
							oyuncuData[playerid][oTruckerEXP] = 0;
							SunucuMesaji(playerid, "Trucker seviyesi yükseldi, %d seviyeye ulaþtýn.", oyuncuData[playerid][oTruckerSeviye]);
						}
					}
					new seviyeucreti = oyuncuData[playerid][oTruckerSeviye] * 5;
					if(oyuncuData[playerid][oMeslekPaketi] < 1)
					{
						ParaEkle(playerid, TRUCKER_UC_IKI_UCRET + seviyeucreti);
						SunucuMesaji(playerid, "Trucker turunu tamamladýn ve $%d kazandýn.", TRUCKER_UC_IKI_UCRET + seviyeucreti);
					}
					else
					{
						ParaEkle(playerid, TRUCKER_UC_IKI_UCRET + YuzdeHesapla(TRUCKER_UC_IKI_UCRET, MESLEK_PAKET_YUZDE) + seviyeucreti);
						SunucuMesaji(playerid, "Trucker turunu tamamladýn ve $%d kazandýn.", TRUCKER_UC_IKI_UCRET + YuzdeHesapla(TRUCKER_UC_IKI_UCRET, MESLEK_PAKET_YUZDE) + seviyeucreti);
					}
					Log_Kaydet("loglar/truckerlog.txt", "[%s] %s adli kisi trucker gorevini tamamladi.(Seviye 3 - Rota 2)", Tarih(), OyuncuIsim(playerid));
					OyuncuKaydet(playerid);
				}
				else
				{
					RemovePlayerFromVehicle(playerid);
					ASpawn(aracid);
					truckerseviyeucte[playerid] = -1;
					oyuncuData[playerid][oTirGuzergah] = 0;
				}
			}
		}
		truckerseviyeucte[playerid]++;
	}
	else if(truckerseviyeucte[playerid] > 0 && oyuncuData[playerid][oTirGuzergah] == 3 && AracBilgi[aracid][aracMeslek] == 5)
	{
		switch(truckerseviyeucte[playerid])
		{
			case 1: SetPlayerCheckpoint(playerid,2193.7566,-2493.2612,13.9849,5.0);
			case 2: SetPlayerCheckpoint(playerid,2193.7566,-2493.2612,13.9849,5.0);
			case 3: SetPlayerCheckpoint(playerid,2157.5886,-2538.5020,13.9599,5.0);
			case 4: SetPlayerCheckpoint(playerid,1992.1433,-2668.1750,10.0024,5.0);
			case 5: SetPlayerCheckpoint(playerid,1474.6555,-2669.6838,12.3000,5.0);
			case 6: SetPlayerCheckpoint(playerid,1347.9626,-2423.4336,13.9600,5.0);
			case 7: SetPlayerCheckpoint(playerid,1476.1718,-2134.2617,14.0765,5.0);
			case 8: SetPlayerCheckpoint(playerid,1611.4354,-1545.7219,29.1707,5.0);
			case 9: SetPlayerCheckpoint(playerid,1665.8181,-1012.5694,63.1136,5.0);
			case 10: SetPlayerCheckpoint(playerid,1640.6603,3.2917,37.2125,5.0);
			case 11: SetPlayerCheckpoint(playerid,1771.7146,590.8166,23.5845,5.0);
			case 12: SetPlayerCheckpoint(playerid,1803.5249,735.7048,13.9118,5.0);
			case 13: SetPlayerCheckpoint(playerid,1961.9994,832.3489,7.3172,5.0);
			case 14: SetPlayerCheckpoint(playerid,2587.5811,874.5615,7.3193,5.0);
			case 15: SetPlayerCheckpoint(playerid,2728.8145,1248.7488,7.3191,5.0);
			case 16: SetPlayerCheckpoint(playerid,2815.4143,1470.7760,11.2880,5.0);
			case 17: SetPlayerCheckpoint(playerid,2825.3645,1384.4976,11.3348,5.0);
			case 18: SetPlayerCheckpoint(playerid,2783.7925,1294.3961,11.3318,5.0);
			case 19:
			{
				if(IsPlayerInRangeOfPoint(playerid, 7.0, 2783.7925,1294.3961,11.3318))
				{
					new kod[16], sayi, kodsayi;
					sayi = randomEx(1, 6);
					kodsayi = randomEx(1, 40);
					switch(sayi)
					{
						case 1: format(kod, sizeof kod, "AXG%d", kodsayi);
						case 2: format(kod, sizeof kod, "FJX%d", kodsayi);
						case 3: format(kod, sizeof kod, "AIH%d", kodsayi);
						case 4: format(kod, sizeof kod, "MGJ%d", kodsayi);
						case 5: format(kod, sizeof kod, "LMA%d", kodsayi);
					}
					format(oyuncuData[playerid][oTruckerKod], 16, "%s", kod);
					oyuncuData[playerid][oTruckerKodiste] = true;
					SCM_Ex(playerid, RENK_TURUNCU, "/truckerkod %s komutunu kullanarak devam edebilirsin!", kod);
					TogglePlayerControllable(playerid, false);
				}
			}
			case 20: SetPlayerCheckpoint(playerid,2830.7681,1332.1616,11.3586,5.0);
			case 21: SetPlayerCheckpoint(playerid,2829.6804,1460.2130,11.2966,5.0);
			case 22: SetPlayerCheckpoint(playerid,2752.8469,1474.4758,12.9893,5.0);
			case 23: SetPlayerCheckpoint(playerid,2642.0891,1473.6909,11.4665,5.0);
			case 24: SetPlayerCheckpoint(playerid,2679.3875,1378.6881,7.9834,5.0);
			case 25: SetPlayerCheckpoint(playerid,2675.0637,1000.7816,7.3190,5.0);
			case 26: SetPlayerCheckpoint(playerid,2327.3979,854.8511,7.3188,5.0);
			case 27: SetPlayerCheckpoint(playerid,1878.2010,854.6558,9.2693,5.0);
			case 28: SetPlayerCheckpoint(playerid,1775.3007,701.9419,15.9337,5.0);
			case 29: SetPlayerCheckpoint(playerid,1610.2227,142.8499,36.7306,5.0);
			case 30: SetPlayerCheckpoint(playerid,1671.9679,-390.8887,37.5872,5.0);
			case 31: SetPlayerCheckpoint(playerid,1689.7596,-727.2466,50.2180,5.0);
			case 32: SetPlayerCheckpoint(playerid,1595.3744,-1342.5131,30.6973,5.0);
			case 33: SetPlayerCheckpoint(playerid,1466.4141,-2114.4692,13.9812,5.0);
			case 34: SetPlayerCheckpoint(playerid,1330.2975,-2508.7739,13.9623,5.0);
			case 35: SetPlayerCheckpoint(playerid,2021.5179,-2687.0737,11.6836,5.0);
			case 36: SetPlayerCheckpoint(playerid,2177.1055,-2512.6152,13.9603,5.0);
			case 37: SetPlayerCheckpoint(playerid,2259.9341,-2318.0386,13.9603,5.0);
			case 38: SetPlayerCheckpoint(playerid,2313.5403,-2332.9009,13.9708,5.0);
			case 39:
			{
				if(IsPlayerInRangeOfPoint(playerid, 7.0, 2313.5403,-2332.9009,13.9708) && oyuncuData[playerid][oTruckerBasari] == true)
				{
					RemovePlayerFromVehicle(playerid);
					ASpawn(aracid);
					truckerseviyeucte[playerid] = -1;
					oyuncuData[playerid][oTirGuzergah] = 0;

					oyuncuData[playerid][oTruckerEXP]++;
					if(oyuncuData[playerid][oTruckerEXP] > 9)
					{
						if(oyuncuData[playerid][oTruckerSeviye] < 20)
						{
							oyuncuData[playerid][oTruckerSeviye]++;
							oyuncuData[playerid][oTruckerEXP] = 0;
							SunucuMesaji(playerid, "Trucker seviyesi yükseldi, %d seviyeye ulaþtýn.", oyuncuData[playerid][oTruckerSeviye]);
						}
					}
					new seviyeucreti = oyuncuData[playerid][oTruckerSeviye] * 5;
					if(oyuncuData[playerid][oMeslekPaketi] < 1)
					{
						ParaEkle(playerid, TRUCKER_UC_UC_UCRET + seviyeucreti);
						SunucuMesaji(playerid, "Trucker turunu tamamladýn ve $%d kazandýn.", TRUCKER_UC_UC_UCRET + seviyeucreti);
					}
					else
					{
						ParaEkle(playerid, TRUCKER_UC_UC_UCRET + YuzdeHesapla(TRUCKER_UC_UC_UCRET, MESLEK_PAKET_YUZDE) + seviyeucreti);
						SunucuMesaji(playerid, "Trucker turunu tamamladýn ve $%d kazandýn.", TRUCKER_UC_UC_UCRET + YuzdeHesapla(TRUCKER_UC_UC_UCRET, MESLEK_PAKET_YUZDE) + seviyeucreti);
					}
					Log_Kaydet("loglar/truckerlog.txt", "[%s] %s adli kisi trucker gorevini tamamladi.(Seviye 3 - Rota 3)", Tarih(), OyuncuIsim(playerid));
					OyuncuKaydet(playerid);
				}
				else
				{
					RemovePlayerFromVehicle(playerid);
					ASpawn(aracid);
					truckerseviyeucte[playerid] = -1;
					oyuncuData[playerid][oTirGuzergah] = 0;
				}
			}
		}
		truckerseviyeucte[playerid]++;
	}
	else if(truckerseviyeucte[playerid] > 0 && oyuncuData[playerid][oTirGuzergah] == 4 && AracBilgi[aracid][aracMeslek] == 5)
	{
		switch(truckerseviyeucte[playerid])
		{
			case 1: SetPlayerCheckpoint(playerid,2193.0386,-2493.3599,13.9812,5.0);
			case 2: SetPlayerCheckpoint(playerid,2157.6243,-2565.5125,13.9600,5.0);
			case 3: SetPlayerCheckpoint(playerid,1886.2538,-2667.7773,6.4555,5.0);
			case 4: SetPlayerCheckpoint(playerid,1388.2574,-2647.6523,13.9605,5.0);
			case 5: SetPlayerCheckpoint(playerid,1348.5642,-2321.6531,13.9694,5.0);
			case 6: SetPlayerCheckpoint(playerid,1565.5442,-2121.5569,16.4188,5.0);
			case 7: SetPlayerCheckpoint(playerid,1623.7657,-1311.4343,36.5975,5.0);
			case 8: SetPlayerCheckpoint(playerid,1709.3153,-727.0371,49.9015,5.0);
			case 9: SetPlayerCheckpoint(playerid,1680.0419,-254.3365,43.8495,5.0);
			case 10: SetPlayerCheckpoint(playerid,1652.9088,234.9391,30.6233,5.0);
			case 11: SetPlayerCheckpoint(playerid,1807.6393,801.2388,11.6903,5.0);
			case 12: SetPlayerCheckpoint(playerid,1694.0847,855.0585,8.5291,5.0);
			case 13: SetPlayerCheckpoint(playerid,1366.2566,901.5901,9.7629,5.0);
			case 14: SetPlayerCheckpoint(playerid,1061.9543,808.6851,11.2980,5.0);
			case 15: SetPlayerCheckpoint(playerid,493.9411,729.4000,4.7306,5.0);
			case 16: SetPlayerCheckpoint(playerid,215.4491,1005.9780,27.4136,5.0);
			case 17: SetPlayerCheckpoint(playerid,104.8579,1198.5237,19.0432,5.0);
			case 18: SetPlayerCheckpoint(playerid,-0.6696,1200.7866,19.8020,5.0);
			case 19: SetPlayerCheckpoint(playerid,-164.5204,1200.8369,20.1727,5.0);
			case 20: SetPlayerCheckpoint(playerid,-198.3436,1217.0078,20.3267,5.0);
			case 21: SetPlayerCheckpoint(playerid,-251.2710,1214.4012,20.3273,5.0);
			case 22:
			{
				if(IsPlayerInRangeOfPoint(playerid, 7.0, -251.2710,1214.4012,20.3273))
				{
					new kod[16], sayi, kodsayi;
					sayi = randomEx(1, 6);
					kodsayi = randomEx(1, 40);
					switch(sayi)
					{
						case 1: format(kod, sizeof kod, "AXG%d", kodsayi);
						case 2: format(kod, sizeof kod, "FJX%d", kodsayi);
						case 3: format(kod, sizeof kod, "AIH%d", kodsayi);
						case 4: format(kod, sizeof kod, "MGJ%d", kodsayi);
						case 5: format(kod, sizeof kod, "LMA%d", kodsayi);
					}
					format(oyuncuData[playerid][oTruckerKod], 16, "%s", kod);
					oyuncuData[playerid][oTruckerKodiste] = true;
					SCM_Ex(playerid, RENK_TURUNCU, "/truckerkod %s komutunu kullanarak devam edebilirsin!", kod);
					TogglePlayerControllable(playerid, false);
				}
			}
			case 23: SetPlayerCheckpoint(playerid,-234.7582,1096.9130,20.1796,5.0);
			case 24: SetPlayerCheckpoint(playerid,-197.5054,1029.2592,20.1735,5.0);
			case 25: SetPlayerCheckpoint(playerid,-219.7556,870.3978,11.1084,5.0);
			case 26: SetPlayerCheckpoint(playerid,-258.3839,786.3494,17.4132,5.0);
			case 27: SetPlayerCheckpoint(playerid,-136.8000,817.0888,21.9300,5.0);
			case 28: SetPlayerCheckpoint(playerid,-114.1288,784.5250,21.5514,5.0);
			case 29: SetPlayerCheckpoint(playerid,-219.5429,719.7932,26.5485,5.0);
			case 30: SetPlayerCheckpoint(playerid,-289.6148,687.4278,19.2855,5.0);
			case 31: SetPlayerCheckpoint(playerid,-268.4766,616.0925,13.5601,5.0);
			case 32: SetPlayerCheckpoint(playerid,-201.2259,639.2897,8.4716,5.0);
			case 33: SetPlayerCheckpoint(playerid,-145.3930,627.0481,2.6747,5.0);
			case 34: SetPlayerCheckpoint(playerid,-137.0312,494.1468,11.6492,5.0);
			case 35: SetPlayerCheckpoint(playerid,-195.4792,271.7186,12.6623,5.0);
			case 36: SetPlayerCheckpoint(playerid,-172.7409,229.9652,11.4197,5.0);
			case 37: SetPlayerCheckpoint(playerid,169.8607,61.8761,2.6631,5.0);
			case 38: SetPlayerCheckpoint(playerid,459.3660,186.6429,11.3385,5.0);
			case 39: SetPlayerCheckpoint(playerid,673.5344,309.9205,20.4718,5.0);
			case 40: SetPlayerCheckpoint(playerid,964.9085,387.6770,20.4676,5.0);
			case 41: SetPlayerCheckpoint(playerid,1178.6144,542.8265,20.4673,5.0);
			case 42: SetPlayerCheckpoint(playerid,1326.0238,468.7421,20.4714,5.0);
			case 43: SetPlayerCheckpoint(playerid,1351.7919,466.5488,20.6811,5.0);
			case 44: SetPlayerCheckpoint(playerid,1381.0172,456.0935,20.4992,5.0);
			case 45:
			{
				SetTimerEx("truckermola", 10000, false, "d", playerid);
				GameTextForPlayer(playerid, "MOLA VERDINIZ...", 10000, 3);
				TogglePlayerControllable(playerid, false);
			}
			case 46: SetPlayerCheckpoint(playerid,1462.7124,401.9902,20.4712,5.0);
			case 47: SetPlayerCheckpoint(playerid,1722.8203,383.3743,20.3689,5.0);
			case 48: SetPlayerCheckpoint(playerid,1837.6926,369.0763,19.6360,5.0);
			case 49: SetPlayerCheckpoint(playerid,1985.1427,348.1333,26.6706,5.0);
			case 50: SetPlayerCheckpoint(playerid,2043.1344,276.9829,26.0015,5.0);
			case 51: SetPlayerCheckpoint(playerid,2145.6064,238.6397,15.1400,5.0);
			case 52: SetPlayerCheckpoint(playerid,2319.6897,211.6018,26.4519,5.0);
			case 53: SetPlayerCheckpoint(playerid,2346.2468,273.0859,26.9211,5.0);
			case 54: SetPlayerCheckpoint(playerid,2355.1685,383.6717,27.7373,5.0);
			case 55: SetPlayerCheckpoint(playerid,2383.4814,330.7140,33.2388,5.0);
			case 56: SetPlayerCheckpoint(playerid,1982.0582,314.9564,34.4578,5.0);
			case 57: SetPlayerCheckpoint(playerid,1704.8571,288.7428,19.3101,5.0);
			case 58: SetPlayerCheckpoint(playerid,1593.9320,345.1902,23.0278,5.0);
			case 59: SetPlayerCheckpoint(playerid,1659.3356,337.8549,30.8851,5.0);
			case 60: SetPlayerCheckpoint(playerid,1635.2971,-31.4602,37.2109,5.0);
			case 61: SetPlayerCheckpoint(playerid,1659.8929,-313.7876,40.8691,5.0);
			case 62: SetPlayerCheckpoint(playerid,1682.8148,-745.5133,52.1305,5.0);
			case 63:
			{
				SetTimerEx("truckerariza", 15000, false, "d", playerid);
				GameTextForPlayer(playerid, "MOTOR ARIZASI, BIRAZ BEKLE...", 15000, 3);
				TogglePlayerControllable(playerid, false);
			}
			case 64: SetPlayerCheckpoint(playerid,1591.2015,-1408.3851,29.1561,5.0);
			case 65: SetPlayerCheckpoint(playerid,1612.6801,-1819.8228,27.1190,5.0);
			case 66: SetPlayerCheckpoint(playerid,1554.4766,-2105.6948,16.1917,5.0);
			case 67: SetPlayerCheckpoint(playerid,1329.8481,-2313.2861,13.9676,5.0);
			case 68: SetPlayerCheckpoint(playerid,1477.7635,-2686.2866,12.1117,5.0);
			case 69: SetPlayerCheckpoint(playerid,2042.9072,-2687.1633,12.9070,5.0);
			case 70: SetPlayerCheckpoint(playerid,2177.0527,-2567.2476,13.9597,5.0);
			case 71: SetPlayerCheckpoint(playerid,2178.3450,-2451.0229,13.9600,5.0);
			case 72: SetPlayerCheckpoint(playerid,2236.8999,-2341.1833,13.9601,5.0);
			case 73: SetPlayerCheckpoint(playerid,2310.8123,-2329.5364,13.9678,5.0);
			case 74:
			{
				if(IsPlayerInRangeOfPoint(playerid, 7.0, 2310.8123,-2329.5364,13.9678) && oyuncuData[playerid][oTruckerBasari] == true)
				{
					RemovePlayerFromVehicle(playerid);
					ASpawn(aracid);
					truckerseviyeucte[playerid] = -1;
					oyuncuData[playerid][oTirGuzergah] = 0;

					oyuncuData[playerid][oTruckerEXP]++;
					if(oyuncuData[playerid][oTruckerEXP] > 9)
					{
						if(oyuncuData[playerid][oTruckerSeviye] < 20)
						{
							oyuncuData[playerid][oTruckerSeviye]++;
							oyuncuData[playerid][oTruckerEXP] = 0;
							SunucuMesaji(playerid, "Trucker seviyesi yükseldi, %d seviyeye ulaþtýn.", oyuncuData[playerid][oTruckerSeviye]);
						}
					}
					new seviyeucreti = oyuncuData[playerid][oTruckerSeviye] * 5;
					if(oyuncuData[playerid][oMeslekPaketi] < 1)
					{
						ParaEkle(playerid, TRUCKER_UC_DORT_UCRET + seviyeucreti);
						SunucuMesaji(playerid, "Trucker turunu tamamladýn ve $%d kazandýn.", TRUCKER_UC_DORT_UCRET + seviyeucreti);
					}
					else
					{
						ParaEkle(playerid, TRUCKER_UC_DORT_UCRET + YuzdeHesapla(TRUCKER_UC_DORT_UCRET, MESLEK_PAKET_YUZDE) + seviyeucreti);
						SunucuMesaji(playerid, "Trucker turunu tamamladýn ve $%d kazandýn.", TRUCKER_UC_DORT_UCRET + YuzdeHesapla(TRUCKER_UC_DORT_UCRET, MESLEK_PAKET_YUZDE) + seviyeucreti);
					}
					Log_Kaydet("loglar/truckerlog.txt", "[%s] %s adli kisi trucker gorevini tamamladi.(Seviye 3 - Rota 4)", Tarih(), OyuncuIsim(playerid));
					OyuncuKaydet(playerid);
				}
				else
				{
					RemovePlayerFromVehicle(playerid);
					ASpawn(aracid);
					truckerseviyeucte[playerid] = -1;
					oyuncuData[playerid][oTirGuzergah] = 0;
				}
			}
		}
		truckerseviyeucte[playerid]++;
	}
	return 1;
}

public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
	if(GetPVarInt(playerid, "CurrentPickup") != pickupid)
		{
			/* --- Ev Textdraw Gizleme--- */
			SetPVarInt(playerid, "CurrentPickup", pickupid);
			TextDrawHideForPlayer(playerid, TD_AD_HeadBox);
		    TextDrawHideForPlayer(playerid, TD_AD_BoxThree);
		    TextDrawHideForPlayer(playerid, TD_AD_Seller);
			PlayerTextDrawHide(playerid, TD_AD_Price[playerid]);
			PlayerTextDrawHide(playerid, TD_AD_CityZip[playerid]);
			PlayerTextDrawHide(playerid, TD_AD_Headline[playerid]);
			PlayerTextDrawHide(playerid, TD_AD_PriceValue[playerid]);
			PlayerTextDrawHide(playerid, TD_AD_SellerValue[playerid]);
			PlayerTextDrawHide(playerid, TD_AD_HousenumberStreet[playerid]);
			PlayerTextDrawHide(playerid, TD_AD_TaxesValue[playerid]);
			PlayerTextDrawHide(playerid, TD_AD_Taxes[playerid]);

			///////////////////////////////////////

			for(new i = 0; i < MAKSIMUM_EV; i++)
			{
				if(EvBilgi[i][evPickup] == pickupid)
				{
					if(EvBilgi[i][evSahip] == 0)
					{
						new content[100];
					    format(content, sizeof(content), "%s %i", EvBilgi[i][evAdres], i);
					    PlayerTextDrawSetString(playerid, TD_AD_HousenumberStreet[playerid], content);
					    format(content, sizeof(content), "Vice City, Florida %d", i+15000);
					    PlayerTextDrawSetString(playerid, TD_AD_CityZip[playerid], content);
					    format(content, sizeof(content), "$%i", EvBilgi[i][evFiyat]);
				     	PlayerTextDrawSetString(playerid, TD_AD_PriceValue[playerid], content);
				     	PlayerTextDrawSetString(playerid, TD_AD_SellerValue[playerid], "Vice Bankasi");
						PlayerTextDrawSetString(playerid, TD_AD_Headline[playerid], "Satilik Mulk");
						PlayerTextDrawSetString(playerid, TD_AD_Price[playerid], "Fiyat:");

						TextDrawShowForPlayer(playerid, TD_AD_HeadBox);
						TextDrawShowForPlayer(playerid, TD_AD_BoxThree);
						TextDrawShowForPlayer(playerid, TD_AD_Seller);
						PlayerTextDrawShow(playerid, TD_AD_Price[playerid]);
						PlayerTextDrawShow(playerid, TD_AD_CityZip[playerid]);
						PlayerTextDrawShow(playerid, TD_AD_Headline[playerid]);
						PlayerTextDrawShow(playerid, TD_AD_PriceValue[playerid]);
						PlayerTextDrawShow(playerid, TD_AD_SellerValue[playerid]);
						PlayerTextDrawShow(playerid, TD_AD_HousenumberStreet[playerid]);

						PlayerTextDrawSetString(playerid, TD_Mid_Info[playerid], "~b~Satilik!~n~~w~ ~g~/satinal ~w~yazarak~n~satin alabilirsiniz.");
						PlayerTextDrawShow(playerid, TD_Mid_Info[playerid]);
						InfoTimerVar[playerid] = SetTimerEx("InfoTimer", 2000, false, "i", playerid);
						if(EvBilgi[i][evKiralik] == 1 && EvBilgi[i][evKiraci] == 0)
						{
							format(content, sizeof(content), "~b~Bu ev kiralik: ~w~$%d", EvBilgi[i][evKiraUcret]);
							PlayerTextDrawSetString(playerid, TD_Mid_Info[playerid], content);
							PlayerTextDrawShow(playerid, TD_Mid_Info[playerid]);
						}
						else if(EvBilgi[i][evKiralik] == 1 && EvBilgi[i][evKiraci] > 0)
						{
							format(content, sizeof(content), "~b~Kiraci: ~w~%s", EvBilgi[i][evKiraciIsim]);
							PlayerTextDrawSetString(playerid, TD_Mid_Info[playerid], content);
							PlayerTextDrawShow(playerid, TD_Mid_Info[playerid]);
						}
					}
					else
					{
						new content[100], evindurumu[24];
					    format(content, sizeof(content), "%s %i", EvBilgi[i][evAdres], i);
					    PlayerTextDrawSetString(playerid, TD_AD_HousenumberStreet[playerid], content);
					    format(content, sizeof(content), "Vice City, Florida %d", i+15000);
					    PlayerTextDrawSetString(playerid, TD_AD_CityZip[playerid], content);
						PlayerTextDrawSetString(playerid, TD_AD_Headline[playerid], "Mulk");
						PlayerTextDrawSetString(playerid, TD_AD_Price[playerid], "Sahip:");
						format(content, sizeof(content), "%s", EvBilgi[i][evSahipIsim]);
				     	PlayerTextDrawSetString(playerid, TD_AD_PriceValue[playerid], content);
				     	PlayerTextDrawSetString(playerid, TD_AD_Taxes[playerid], "Durum:");
				     	switch(EvBilgi[i][evDurum])
				     	{
				     		case 1: format(evindurumu, sizeof(evindurumu), "Kilitsiz");
				     		case 2: format(evindurumu, sizeof(evindurumu), "Kilitli");
				     		case 3: format(evindurumu, sizeof(evindurumu), "Bakim/Tadilat");
				     		case 4: format(evindurumu, sizeof(evindurumu), "Vergi Muhru");
				     	}
				     	format(content, sizeof(content), "%s", evindurumu);
				     	PlayerTextDrawSetString(playerid, TD_AD_TaxesValue[playerid], content);

						TextDrawShowForPlayer(playerid, TD_AD_HeadBox);
						TextDrawShowForPlayer(playerid, TD_AD_BoxThree);
						PlayerTextDrawShow(playerid, TD_AD_Price[playerid]);
						PlayerTextDrawShow(playerid, TD_AD_PriceValue[playerid]);
						PlayerTextDrawShow(playerid, TD_AD_Taxes[playerid]);
						PlayerTextDrawShow(playerid, TD_AD_TaxesValue[playerid]);
						PlayerTextDrawShow(playerid, TD_AD_CityZip[playerid]);
						PlayerTextDrawShow(playerid, TD_AD_Headline[playerid]);
						PlayerTextDrawShow(playerid, TD_AD_HousenumberStreet[playerid]);
						InfoTimerVar[playerid] = SetTimerEx("InfoTimer", 2000, false, "i", playerid);
						if(EvBilgi[i][evKiralik] == 1 && EvBilgi[i][evKiraci] == 0)
						{
							format(content, sizeof(content), "~b~Bu ev kiralik: ~w~$%d", EvBilgi[i][evKiraUcret]);
							PlayerTextDrawSetString(playerid, TD_Mid_Info[playerid], content);
							PlayerTextDrawShow(playerid, TD_Mid_Info[playerid]);
						}
						else if(EvBilgi[i][evKiralik] == 1 && EvBilgi[i][evKiraci] > 0)
						{
							format(content, sizeof(content), "~b~Kiraci: ~w~%s", EvBilgi[i][evKiraciIsim]);
							PlayerTextDrawSetString(playerid, TD_Mid_Info[playerid], content);
							PlayerTextDrawShow(playerid, TD_Mid_Info[playerid]);
						}
					}
					break;
				}
			}
			for(new i = 0; i < MAKSIMUM_ISYERI; i++)
			{
				if(IsyeriBilgi[i][isyeriPickup] == pickupid)
				{
					if(IsyeriBilgi[i][isyeriSahip] == 0)
					{
						new content[100];
					    format(content, sizeof(content), "Kapi No: %i", i);
					    PlayerTextDrawSetString(playerid, TD_AD_HousenumberStreet[playerid], content);
					    format(content, sizeof(content), "Vice City, Florida %d", i+30000);
					    PlayerTextDrawSetString(playerid, TD_AD_CityZip[playerid], content);
					    format(content, sizeof(content), "$%i", IsyeriBilgi[i][isyeriFiyat]);
				     	PlayerTextDrawSetString(playerid, TD_AD_PriceValue[playerid], content);
				     	PlayerTextDrawSetString(playerid, TD_AD_SellerValue[playerid], "Vice Bankasi");
						PlayerTextDrawSetString(playerid, TD_AD_Headline[playerid], "Satilik Isyeri");
						PlayerTextDrawSetString(playerid, TD_AD_Price[playerid], "Fiyat:");

						TextDrawShowForPlayer(playerid, TD_AD_HeadBox);
						TextDrawShowForPlayer(playerid, TD_AD_BoxThree);
						TextDrawShowForPlayer(playerid, TD_AD_Seller);
						PlayerTextDrawShow(playerid, TD_AD_Price[playerid]);
						PlayerTextDrawShow(playerid, TD_AD_CityZip[playerid]);
						PlayerTextDrawShow(playerid, TD_AD_Headline[playerid]);
						PlayerTextDrawShow(playerid, TD_AD_PriceValue[playerid]);
						PlayerTextDrawShow(playerid, TD_AD_SellerValue[playerid]);
						PlayerTextDrawShow(playerid, TD_AD_HousenumberStreet[playerid]);

						PlayerTextDrawSetString(playerid, TD_Mid_Info[playerid], "~b~Satilik!~n~~w~ ~g~/satinal ~w~yazarak~n~satin alabilirsiniz.");
						PlayerTextDrawShow(playerid, TD_Mid_Info[playerid]);
						InfoTimerVar[playerid] = SetTimerEx("InfoTimer", 2000, false, "i", playerid);
					}
					else
					{
						new content[120], evindurumu[24];
					    format(content, sizeof(content), "%s", IsyeriBilgi[i][isyeriAd]);
					    for (new a, l = strlen(content); a != l; a++)
						{
							switch(content[a])
							{
								case 'ý': content[a] = 'i';
								case 'ð': content[a] = 'g';
								case 'ü': content[a] = 'u';
								case 'þ': content[a] = 's';
								case 'ö': content[a] = 'o';
								case 'ç': content[a] = 'c';
								case 'Ð': content[a] = 'G';
								case 'Ü': content[a] = 'U';
								case 'Þ': content[a] = 'S';
								case 'Ý': content[a] = 'I';
								case 'Ö': content[a] = 'O';
								case 'Ç': content[a] = 'C';
							}
						}
					    PlayerTextDrawSetString(playerid, TD_AD_HousenumberStreet[playerid], content);
					    format(content, sizeof(content), "Isyeri Turu: %s", isyeriturisim(i));
					    PlayerTextDrawSetString(playerid, TD_AD_CityZip[playerid], content);
					    format(content, sizeof(content), "Kapi No: %i", i);
						PlayerTextDrawSetString(playerid, TD_AD_Headline[playerid], content);
						PlayerTextDrawSetString(playerid, TD_AD_Price[playerid], "Sahip:");
						format(content, sizeof(content), "%s", IsyeriBilgi[i][isyeriSahipIsim]);
				     	PlayerTextDrawSetString(playerid, TD_AD_PriceValue[playerid], content);
				     	PlayerTextDrawSetString(playerid, TD_AD_Taxes[playerid], "Durum:");
				     	switch(IsyeriBilgi[i][isyeriDurum])
				     	{
				     		case 1: format(evindurumu, sizeof(evindurumu), "Kilitsiz");
				     		case 2: format(evindurumu, sizeof(evindurumu), "Kilitli");
				     		case 3: format(evindurumu, sizeof(evindurumu), "Bakim/Tadilat");
				     		case 4: format(evindurumu, sizeof(evindurumu), "Muhurlu");
				     	}
				     	format(content, sizeof(content), "%s", evindurumu);
				     	PlayerTextDrawSetString(playerid, TD_AD_TaxesValue[playerid], content);

						TextDrawShowForPlayer(playerid, TD_AD_HeadBox);
						TextDrawShowForPlayer(playerid, TD_AD_BoxThree);
						PlayerTextDrawShow(playerid, TD_AD_Price[playerid]);
						PlayerTextDrawShow(playerid, TD_AD_PriceValue[playerid]);
						PlayerTextDrawShow(playerid, TD_AD_Taxes[playerid]);
						PlayerTextDrawShow(playerid, TD_AD_TaxesValue[playerid]);
						PlayerTextDrawShow(playerid, TD_AD_CityZip[playerid]);
						PlayerTextDrawShow(playerid, TD_AD_Headline[playerid]);
						PlayerTextDrawShow(playerid, TD_AD_HousenumberStreet[playerid]);
						InfoTimerVar[playerid] = SetTimerEx("InfoTimer", 2000, false, "i", playerid);
						if(IsyeriBilgi[i][isyeriOrtak] > 0)
						{
							SunucuMesaji(playerid, "Bu iþyerinin bir ortaðý var.(%s)", IsyeriBilgi[i][isyeriOrtakIsim]);
						}
						if(IsyeriBilgi[i][iGirisUcret] > 0)
						{
							format(content, sizeof(content), "~b~Giris Ucreti: ~w~$%d", IsyeriBilgi[i][iGirisUcret]);
							PlayerTextDrawSetString(playerid, TD_Mid_Info[playerid], content);
							PlayerTextDrawShow(playerid, TD_Mid_Info[playerid]);
						}
					}
					break;
				}
			}
		}
		///////////////////////////////////////

		if(pickupid == firmacuvalpickup)
		{
			if(oyuncuData[playerid][oFirma] > -1 && FirmaInfo[oyuncuData[playerid][oFirma]][fAlan] == 2)
			{
				if(oyuncuData[playerid][oCuval] != 0) return hataMesaji(playerid, "Elinizde zaten bir çuval var.");
				oyuncuData[playerid][oCuval] = 1;
				SetPlayerAttachedObject(playerid, 6, 2060, 17, -0.083999, 0.534000, -0.025999, 99.599990, 85.500015, 79.700012);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
				SunucuMesaji(playerid, "Çuvalý aldýn, þimdi bagaja koy. ((/cuval koy))");
			}
		}
		if(pickupid == tahtapickup)
		{
			new str[150], str2[150], taraci[45], taraci2[45], sayi = 0;
			for(new r = 0; r < sizeof(tahtaverisi) ; r++)
			{
				if(tahtaverisi[r][taracseviye] < oyuncuData[playerid][oHirsizlikYetenek] + 1) {
					if(sayi < 7)
					{
						format(taraci, sizeof(taraci), "%s(%d$)\n", tahtaverisi[r][taracisim], tahtaverisi[r][taracfiyat]);
						strcat(str, taraci);
					}
					else
					{
						format(taraci2, sizeof(taraci2), "%s(%d$)\n", tahtaverisi[r][taracisim], tahtaverisi[r][taracfiyat]);
						strcat(str2, taraci2);
					}
					sayi ++;
				}
			}
			tmpobj1[playerid] = CreateDynamicObject(19482, 2375.0366,-1913.3895,13.5132, 0.000000, 0.000000, 0.499963, -1, -1, -1, 300.00, 300.00);
			SetDynamicObjectMaterialText(tmpobj1[playerid], 0, str, 130, "Ariel", 25, 0, 0xFFFFFFFF, 0x00000000, 0);
			if(sayi > 6)
			{
				tmpobj2[playerid] = CreateDynamicObject(19482, 2375.0366,-1913.3895,13.5132, 0.000000, 0.000000, 1.199973, -1, -1, -1, 300.00, 300.00);
				SetDynamicObjectMaterialText(tmpobj2[playerid], 0, str2, 130, "Ariel", 25, 0, 0xFFFFFFFF, 0x00000000, 0);
			}
			SetTimerEx("tahtasifirtimer", 8000, 0, "i", playerid);
		}
		return 1;
	}

	public OnPlayerEnterRaceCheckpoint(playerid)
	{
		DisablePlayerRaceCheckpoint(playerid);
		return 1;
	}


	public OnVehicleMod(playerid, vehicleid, componentid)
	{
		printf("[MODIFIYE]: Araç %d, %s tarafýndan modifiye edildi takýlan parça; %d", vehicleid, OyuncuIsim(playerid), componentid);
		if(GetPlayerInterior(playerid) == 0) return Kick(playerid), 0;
    //SaveComponent(playerid, vehicleid, componentid);
		return 1;
	}

	public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
	{
		new id = Arac_IDBul(vehicleid);
		if(id != -1)
		{
			if(AracBilgi[vehicleid][aracSahip] == oyuncuData[playerid][oID])
			{
				AracBilgi[vehicleid][aracPaintjob] = paintjobid + 1;
				static query[2300];
				mysql_format(g_SQL, query, sizeof(query), "UPDATE `araclar` SET `aracRenk1` = '%d', `aracRenk2` = '%d', `aracPaintjob` = '%d' WHERE `aracID` = '%d' LIMIT 1",
					AracBilgi[vehicleid][aracRenk1],
					AracBilgi[vehicleid][aracRenk2],
					AracBilgi[vehicleid][aracPaintjob],
					AracBilgi[vehicleid][aracID]
					);
			}
			ChangeVehiclePaintjob(vehicleid, AracBilgi[id][aracPaintjob]);
		}
		return 1;
	}

	public OnVehicleRespray(playerid, vehicleid, color1, color2)
	{
		new id = Arac_IDBul(vehicleid);
		if(id != -1)
		{
			if(AracBilgi[vehicleid][aracSahip] == oyuncuData[playerid][oID])
			{
				AracBilgi[id][aracRenk1] = color1;
				AracBilgi[id][aracRenk2] = color2;
				if(color1 == 0) AracBilgi[vehicleid][aracPaintjob] = 0;
				static query[2300];
				mysql_format(g_SQL, query, sizeof(query), "UPDATE `araclar` SET `aracRenk1` = '%d', `aracRenk2` = '%d', `aracPaintjob` = '%d' WHERE `aracID` = '%d' LIMIT 1",
					AracBilgi[vehicleid][aracRenk1],
					AracBilgi[vehicleid][aracRenk2],
					AracBilgi[vehicleid][aracPaintjob],
					AracBilgi[vehicleid][aracID]
					);
			}
			ChangeVehicleColor(vehicleid, AracBilgi[id][aracRenk1], AracBilgi[id][aracRenk2]);
		}
		return 1;
	}

	public OnPlayerSelectedMenuRow(playerid, row)
	{
		return 1;
	}

	public OnPlayerExitedMenu(playerid)
	{
		return 1;
	}

	public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
	{
		foreach(new x : Player) if(GetPlayerState(x) == PLAYER_STATE_SPECTATING && oyuncuData[x][oIzlenen] == playerid) {
			PlayerSpectatePlayer(x, playerid);
			SetPlayerInterior(x, newinteriorid);
			SetPlayerVirtualWorld(x, GetPlayerVirtualWorld(playerid));
		}

		foreach(new i : Player)
		{
			if(oyuncuData[i][oGazMaskedurum] == 1)
			{
				ShowPlayerNameTagForPlayer(playerid, i, false);
			}
			if(oyuncuData[i][oKarMaskedurum] == 1)
			{
				ShowPlayerNameTagForPlayer(playerid, i, false);
			}
			if(oyuncuData[i][oGizliIsim] == true)
			{
				ShowPlayerNameTagForPlayer(playerid, i, false);
			}
		}
		if(oyuncuData[playerid][oGazMaskedurum] == 1)
		{
			foreach(new i : Player)
			{
				ShowPlayerNameTagForPlayer(i, playerid, false);
			}
		}
		if(oyuncuData[playerid][oKarMaskedurum] == 1)
		{
			foreach(new i : Player)
			{
				ShowPlayerNameTagForPlayer(i, playerid, false);
			}
		}
		if(oyuncuData[playerid][oGizliIsim] == true)
		{
			foreach(new i : Player)
			{
				ShowPlayerNameTagForPlayer(i, playerid, false);
			}
		}
		TogglePlayerControllable(playerid, 0);
		SetTimerEx("oyuncucoz", 2500, false, "i", playerid);
		return true;
	}

	public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
	{
		if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED && newkeys & KEY_JUMP && !(oldkeys & KEY_JUMP))
			return ApplyAnimation(playerid, "GYMNASIUM", "gym_jog_falloff", 4.0, 0, 1, 1, 0, 0, 1);
		if (((newkeys & KEY_WALK && newkeys & KEY_UP) || (newkeys & KEY_WALK && newkeys & KEY_DOWN) || (newkeys & KEY_WALK && newkeys & KEY_LEFT) || (newkeys & KEY_WALK && newkeys & KEY_RIGHT))
			|| ((oldkeys & KEY_WALK && newkeys & KEY_UP) || (oldkeys & KEY_WALK && newkeys & KEY_DOWN) || (oldkeys & KEY_WALK && newkeys & KEY_LEFT) || (oldkeys & KEY_WALK && newkeys & KEY_RIGHT))
			|| ((newkeys & KEY_WALK && oldkeys & KEY_UP) || (newkeys & KEY_WALK && oldkeys & KEY_DOWN) || (newkeys & KEY_WALK && oldkeys & KEY_LEFT) || (newkeys & KEY_WALK && oldkeys & KEY_RIGHT))
			&& GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
			{walktime[playerid] = SetTimerEx("WalkAnim",ytimerhiz,0,"d",playerid);}


		if(newkeys & KEY_FIRE && oyuncuData[playerid][oIcecek] > 0)
		{
			if(IcecekBeklemeSuresi[playerid] > 0) return hataMesaji(playerid, "Yeniden içmek için %d saniye beklemelisin.", IcecekBeklemeSuresi[playerid]);
			if(GetPlayerAnimationIndex(playerid) != 15 && GetPlayerAnimationIndex(playerid) != 16 && !IcecekBeklemeSuresi[playerid])
			{
				if(oyuncuData[playerid][oIcecekHak] > 0) {
					if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DRINK_BEER)
					{
						CanYukselt(playerid, GetPVarInt(playerid, "IcecekCani"));
					}
					oyuncuData[playerid][oIcecekHak]--;
					IcecekBeklemeSuresi[playerid] += 2;
					if(oyuncuData[playerid][oSusuzluk] > 90) return false;
					oyuncuData[playerid][oSusuzluk] += 10;
					return true;
				}
				DeletePVar(playerid, "IcecekCani");
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				oyuncuData[playerid][oIcecek] = 0;
				SunucuMesaji(playerid, "Þiþe bitti.");
			}
		}

		static id;

		if(newkeys & KEY_CTRL_BACK)
		{
			if(IsPlayerInAnyVehicle(playerid))
			{
				new idcg = GateBul(playerid);
				if(idcg != -1)
				{
					cmd(playerid, 0, "gate");
				}
			}
		}
		if(newkeys & KEY_NO && IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return arac_FarKontrol(playerid, Arac_Yakin(playerid));
		if(newkeys & KEY_NO)
		{
			if(AsansorKumanda(playerid) != -1)
			{
				ShowPlayerDialog(playerid, DIALOG_ASANSOR_KAT, DIALOG_STYLE_LIST, "Asansör Katlarý:", "Zemin Kat\nIkinci Kat\nÜçüncü Kat", "Onayla", "Kapat");
			}
			else if(OtelOdasi_Bul(playerid) != -1)
			{
				new idb = OtelOdasi_Bul(playerid);
				if(!strcmp(otelOda[idb][oda_Sahip], OyuncuIsim(playerid), true))
				{
					static emote[128], emote2[128];
					format(emote, sizeof(emote), "%03d. numaralý otel odasý kapýsýný dýþarýdan kilitledi.", idb);
					format(emote2, sizeof(emote2), "%03d. numaralý otel odasý kapýsýnýn kilidini dýþarýdan açtý.", idb);
					switch(otelOda[idb][oda_Kilit])
					{
						case false:otelOda[idb][oda_Kilit] = true, GameTextForPlayer(playerid, "~r~Kapi kilitlendi", 750, 4), cmd(playerid, 1, emote), OtelOda_TextUP();
						case true:otelOda[idb][oda_Kilit] = false, GameTextForPlayer(playerid, "~g~Kapi kilidi acildi", 750, 4), cmd(playerid, 1, emote2), OtelOda_TextUP();
					}
				}
			}
			else if(OtelOdasi_Ic_Bul(playerid) != -1)
			{
				new idc = GetPlayerVirtualWorld(playerid);
				if(!strcmp(otelOda[idc][oda_Sahip], OyuncuIsim(playerid), true))
				{
					static emote[128], emote2[128];
					format(emote, sizeof(emote), "%03d. numaralý otel odasý kapýsýný içeriden kilitledi.", idc);
					format(emote2, sizeof(emote2), "%03d. numaralý otel odasý kapýsýnýn kilidini içeriden açtý.", idc);
					switch(otelOda[idc][oda_Kilit])
					{
						case false:otelOda[idc][oda_Kilit] = true, GameTextForPlayer(playerid, "~r~Kapi kilitlendi", 750, 4), cmd(playerid, 1, emote);
						case true:otelOda[idc][oda_Kilit] = false, GameTextForPlayer(playerid, "~g~Kapi kilidi acildi", 750, 4), cmd(playerid, 1, emote2);
					}
				}
			}
		}
		if(newkeys & KEY_NO && !IsPlayerInAnyVehicle(playerid) && GetPVarInt(playerid, "kilidikiriyor") == 1) {
			if(pinaktif[playerid] == 1) {
				new  pind;

				for(new i = 0; i < sizeof(pinveri) ; i++)
				{
					if(secilenpin[playerid] == pinveri[i][pininid]) pind = pinveri[i][pininid];
				}
				if(kilitY[playerid] == 353.000000 && pind == 4) {
					SetPVarInt(playerid, "kilidikiriyor", 0);
					GameTextForPlayer(playerid, "~g~KILIT KIRILDI!", 750, 4);
					PlayerTextDrawDestroy(playerid, pikilit[0][playerid]);
					PlayerTextDrawDestroy(playerid, pikilit[1][playerid]);
					PlayerTextDrawDestroy(playerid, pikilit[2][playerid]);
					PlayerTextDrawDestroy(playerid, pikilit[3][playerid]);
					PlayerTextDrawHide(playerid, pikilit[4][playerid]);
					TextDrawHideForPlayer(playerid, kilit_0);
					KillTimer(kilitinterval[playerid]);
					KillTimer(kilitkirtimer[playerid]);
					KillTimer(kilitsure[playerid]);
					ClearAnimations(playerid);
					TogglePlayerControllable(playerid, true);
					new aid = GetPVarInt(playerid, "karacid");
					static engine, lights, alarm, doors, bonnet, boot, objective;
					GetVehicleParamsEx(AracBilgi[aid][aracYarat], engine, lights, alarm, doors, bonnet, boot, objective);
					AracBilgi[aid][aracKilit] = false;
					Arac_Kaydet(aid);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					cmd(playerid, 1, "yanýndaki aracýn kilidini kýrar.");
					SetVehicleParamsEx(AracBilgi[aid][aracYarat], engine, lights, alarm, 0, bonnet, boot, objective);
					/*if(oyuncuData[playerid][oHirsizlikYetenek] < 10) {
						oyuncuData[playerid][oHirsizlikYetenekEXP]++;
						if(oyuncuData[playerid][oHirsizlikYetenekEXP] > 2)
						{
							oyuncuData[playerid][oHirsizlikYetenekEXP] = 0;
							oyuncuData[playerid][oHirsizlikYetenek]++;
							SunucuMesaji(playerid, "Hýrsýzlýk yeteneðiniz yükseldi! Yeni hýrsýzlýk seviyeniz: %d", oyuncuData[playerid][oHirsizlikYetenek]);
						}
					} */
				}
				else
				{
					secilenpin[playerid] ++;
					kilitY[playerid] = 363.000000;
				}
			}
			else
			{
				new pinid, Float:pinPosX;
				for(new i = 0; i < sizeof(pinveri) ; i++)
				{
					if(secilenpin[playerid] == pinveri[i][pininid]) pinid = pinveri[i][pininid], pinPosX = pinveri[i][PinX];
				}
				PinGeriCek(playerid, pinid, pinPosX);
			}
		}
		if(newkeys & KEY_AIM && GetPVarInt(playerid, "anim") != 0)
		{
			if(oyuncuData[playerid][oHapisSure][0] < 1 && oyuncuData[playerid][oYarali] != true && oyuncuData[playerid][oDonduruldu] < 1)
			{
				ClearAnimations(playerid);
				if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_SMOKE_CIGGY)
				{
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				}
				switch(oyuncuData[playerid][oGeciciKiyafet]) {
					case 0: SetPlayerSkin(playerid, oyuncuData[playerid][oKiyafet]);
					default: SetPlayerSkin(playerid, oyuncuData[playerid][oGeciciKiyafet]);
				}
				DeletePVar(playerid, "anim");
				SetPVarInt(playerid, "anim", 0);
			}
		}
	#if TOPALLAMA   true
		if(newkeys & KEY_JUMP || KEY_HANDBRAKE)
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
			{
				if(BacakKontrolu(playerid) == 1)
				{
					ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.0, 1, 1, 1, 1, 0);
					SetTimerEx("YerdenKalk", 2000, false, "d", playerid);
					BilgiText(playerid, "~w~Bacaðýnýzdan ~y~~h~yaralýsýnýz~w~, tedavi olmadan ~r~zýplayamaz~w~, ~r~koþamazsýnýz");
				}
			}
		}
	#endif

		if(newkeys & KEY_YES)
		{
			if(IsPlayerInAnyVehicle(playerid)) return cmd(playerid, 0, "arac motor");
			if(!IsPlayerInAnyVehicle(playerid))
			{
				if(AktoreYakinmi(playerid) != -1)
				{
					AktorMenusu(playerid, npcData[AktoreYakinmi(playerid)][npcTur]);
				}
			}

			if(IsPlayerInRangeOfPoint(playerid, 2.0, -376.9299,2242.3718,42.6185)) // trap house
    		{
				TogglePlayerControllable(playerid, false);
				SetTimerEx("oyuncucoz", 2000, false, "i", playerid);
	        	SetPlayerPos(playerid, 2187.9700,-1244.8140,1529.1060);
    		}
			if(IsPlayerInRangeOfPoint(playerid,2.0, 2187.9700,-1244.8140,1529.1060)) // trap house
			{
				SetPlayerPos(playerid, -376.9299,2242.3718,42.6185);
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
			}

			if(GetPVarInt(playerid, "TamirciID") != -1)
			{
				new idt = GetPVarInt(playerid, "TamirciID"), str[512], query[512];
				GetPlayerPos(playerid, tamirciData[idt][tamiricPos][0], tamirciData[idt][tamiricPos][1], tamirciData[idt][tamiricPos][2]);
				GetPlayerFacingAngle(playerid, tamirciData[idt][tamiricPos][3]);
				format(str, sizeof(str), "%.1f|%.1f|%.1f|%.1f", tamirciData[idt][tamirPos][0], tamirciData[idt][tamirPos][1], tamirciData[idt][tamirPos][2], tamirciData[idt][tamirPos][3]);
				mysql_format(g_SQL, query, sizeof(query), "UPDATE `tamirciler` SET `IcKisim` = '%s' WHERE `id` = '%d' LIMIT 1", str, idt);
				mysql_query(g_SQL, query);
				ShowPlayerDialog(playerid, BOS_MESAJ, DIALOG_STYLE_MSGBOX, "{FFFFFF}Tamirci Oluþturma {32B66A}(Baþarýlý)", "{FFFFFF}Iç pozisyon baþarýyla ayarlandý, tamirhane kullanýlabilir durumda.", "Onayla", "");
				SetPVarInt(playerid, "TamirciID", -1);
			}

			if(GetPVarInt(playerid, "asansorTusAyarla") != -1)
			{
				new liftid = GetPVarInt(playerid, "asansorTusAyarla");
				GetPlayerPos(playerid, AsansorData[liftid][asansorTus][0], AsansorData[liftid][asansorTus][1], AsansorData[liftid][asansorTus][2]);

				CreateDynamic3DTextLabel("[ {F5E600}Asansör Kumandasý {FFFFFF}]\n\n{FFFFFF}Eriþim için {DDDDDD}N{FFFFFF} tuþuna basýnýz.", -1, AsansorData[liftid][asansorTus][0], AsansorData[liftid][asansorTus][1], AsansorData[liftid][asansorTus][2], 6.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);

				SunucuMesaji(playerid, "Asansör kumandasý ayarlandý, 'N' ile eriþebilirsiniz.");
				SetPVarInt(playerid, "asansorTusAyarla", -1);
			}

			if(AsansorYakin(playerid) == 1) cmd(playerid, 0, "asansor");
			if((id = Bina_Yakin(playerid)) != -1)
			{
				if(BinaBilgi[id][binaDurum] != 1) return hataMesaji(playerid, "Bu binaya giriþ yapamazsýn.");
				if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Araç içerisindeyken binaya giriþ yapamazsýn.");
				TogglePlayerControllable(playerid, false);
				SetTimerEx("oyuncucoz", 2000, false, "i", playerid);
				SetPlayerPos(playerid, BinaBilgi[id][bIPos][0], BinaBilgi[id][bIPos][1], BinaBilgi[id][bIPos][2]);
				SetPlayerFacingAngle(playerid, BinaBilgi[id][bIPos][3]);
				SetPlayerInterior(playerid, BinaBilgi[id][bInterior]);
				SetPlayerVirtualWorld(playerid, BinaBilgi[id][bVW]);
				SetCameraBehindPlayer(playerid);
				return 1;
			}
			else if((id = Oyuncu_BinaKapida(playerid)) != -1)
			{
				if(BinaBilgi[id][binaDurum] != 1)
					return hataMesaji(playerid, "Bu binadan çýkýþ yapamazsýn.");
	        //cmd(playerid, 1, "kapýyý aralar ve binadan çýkar.");
				SetPlayerPos(playerid, BinaBilgi[id][bPos][0], BinaBilgi[id][bPos][1], BinaBilgi[id][bPos][2]);
				SetPlayerFacingAngle(playerid, BinaBilgi[id][bPos][3] - 180.0);
				SetPlayerInterior(playerid, BinaBilgi[id][bDisInt]);
				SetPlayerVirtualWorld(playerid, BinaBilgi[id][bDisVW]);
				SetCameraBehindPlayer(playerid);
				TogglePlayerControllable(playerid, false);
				SetTimerEx("oyuncucoz", 5500, false, "i", playerid);
				return 1;
			}
			else if((id = NoktaBul(playerid)) != -1)
			{
	        //cmd(playerid, 1, "kapýyý aralar ve binadan çýkar.");
				SetPlayerPos(playerid, TeleportData[id][teldestX], TeleportData[id][teldestY], TeleportData[id][teldestZ]);
				SetPlayerInterior(playerid, TeleportData[id][teldestInt]);
				SetPlayerVirtualWorld(playerid, TeleportData[id][teldestVW]);
				SetCameraBehindPlayer(playerid);
				TogglePlayerControllable(playerid, false);
				SetTimerEx("oyuncucoz", 5500, false, "i", playerid);
				return 1;
			}
			else if((id = NoktaCikisBul(playerid)) != -1)
			{
	        //cmd(playerid, 1, "kapýyý aralar ve binadan çýkar.");
				SetPlayerPos(playerid, TeleportData[id][telX], TeleportData[id][telY], TeleportData[id][telZ]);
				SetPlayerInterior(playerid, TeleportData[id][telInt]);
				SetPlayerVirtualWorld(playerid, TeleportData[id][telVW]);
				SetCameraBehindPlayer(playerid);
				TogglePlayerControllable(playerid, false);
				SetTimerEx("oyuncucoz", 5500, false, "i", playerid);
				return 1;
			}
			else if((id = Ev_Yakin(playerid)) != -1)
			{
				if(EvBilgi[id][evDurum] == 2) return hataMesaji(playerid, "Bu ev kilitli olduðu için giriþ yapamýyorsunuz.");
				if(EvBilgi[id][evDurum] == 3) return hataMesaji(playerid, "Bu ev bakýmda olduðu için giriþ yapamýyorsunuz.");
				if(EvBilgi[id][evDurum] == 4) return hataMesaji(playerid, "Bu ev vergi mühründe olduðu için giriþ yapamýyorsunuz.");
				if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Araç içerisindeyken eve giriþ yapamazsýn.");
				InfoGizle(playerid);
				SetPlayerPos(playerid, EvBilgi[id][evIcPos][0], EvBilgi[id][evIcPos][1], EvBilgi[id][evIcPos][2]);
				SetPlayerFacingAngle(playerid, EvBilgi[id][evIcPos][3]);
				SetPlayerInterior(playerid, EvBilgi[id][evInterior]);
				SetPlayerVirtualWorld(playerid, EvBilgi[id][evVW]);
				if(EvBilgi[id][evLamba] == true) {
					PlayerTextDrawShow(playerid, oyuncuData[playerid][oTextdraw][2]);
				}
				SetCameraBehindPlayer(playerid);
				if(HirsizDurum[playerid] == true) {
					hirsiztime[playerid] = SetTimerEx("HirsizAnim",ytimerhiz,1,"i",playerid);
				}
				TogglePlayerControllable(playerid, false);
				SetTimerEx("oyuncucoz", 5500, false, "i", playerid);
				return 1;
			}
			else if((id = Oyuncu_EvKapida(playerid)) != -1)
			{
				if(EvBilgi[id][evDurum] == 2) return hataMesaji(playerid, "Bu ev kilitli olduðu için çýkýþ yapamýyorsunuz.");
				if(EvBilgi[id][evDurum] == 3) return hataMesaji(playerid, "Satýlýk evlere giriþ yapýlamaz.");
				SetPlayerPos(playerid, EvBilgi[id][evPos][0], EvBilgi[id][evPos][1], EvBilgi[id][evPos][2]);
				SetPlayerFacingAngle(playerid, EvBilgi[id][evPos][3] - 180.0);
				SetPlayerInterior(playerid, EvBilgi[id][evDisInt]);
				SetPlayerVirtualWorld(playerid, EvBilgi[id][evDisVW]);
				PlayerTextDrawHide(playerid, oyuncuData[playerid][oTextdraw][2]);
				SetCameraBehindPlayer(playerid);
				TogglePlayerControllable(playerid, false);
				SetTimerEx("oyuncucoz", 5500, false, "i", playerid);
				return 1;
			}
			else if((id = Isyeri_Yakin(playerid)) != -1)
			{
				if(IsyeriBilgi[id][isyeriDurum] == 2) return hataMesaji(playerid, "Bu iþyeri kilitli olduðu için giriþ yapamýyorsunuz.");
				if(IsyeriBilgi[id][isyeriDurum] == 3) return hataMesaji(playerid, "Bu iþyeri bakýmda olduðu için giriþ yapamýyorsunuz.");
				if(IsyeriBilgi[id][isyeriDurum] == 4) return hataMesaji(playerid, "Bu iþyeri mühürlenmiþ.");
				if(IsyeriBilgi[id][isyeriSahip] != oyuncuData[playerid][oID] && IsyeriBilgi[id][isyeriOrtak] != oyuncuData[playerid][oID]) {
					if(IsyeriBilgi[id][iGirisUcret] > oyuncuData[playerid][oPara])
						return hataMesaji(playerid, "Giriþ ücretini karþýlayamadýðýn için içeri giremiyorsunuz.");

					ParaEkle(playerid, -IsyeriBilgi[id][iGirisUcret]);
					IsyeriBilgi[id][isyeriKasa] += IsyeriBilgi[id][iGirisUcret];
					Isyeri_Kaydet(id);

				}
				if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Araç içerisindeyken iþyerine giriþ yapamazsýn.");
				InfoGizle(playerid);
				SetPlayerPos(playerid, IsyeriBilgi[id][isyeriIcPos][0], IsyeriBilgi[id][isyeriIcPos][1], IsyeriBilgi[id][isyeriIcPos][2]);
				SetPlayerFacingAngle(playerid, IsyeriBilgi[id][isyeriIcPos][3]);
				SetPlayerInterior(playerid, IsyeriBilgi[id][isyeriInterior]);
				SetPlayerVirtualWorld(playerid, IsyeriBilgi[id][isyeriVW]);
				SetCameraBehindPlayer(playerid);
				TogglePlayerControllable(playerid, false);
				SetTimerEx("oyuncucoz", 5500, false, "i", playerid);
				if(!isnull(IsyeriBilgi[id][isyeriMuzik])) PlayAudioStreamForPlayer(playerid, IsyeriBilgi[id][isyeriMuzik]);
				return 1;
			}

			else if((id = Oyuncu_IsyeriKapida(playerid)) != -1)
			{
				if(IsyeriBilgi[id][isyeriDurum] == 2) return hataMesaji(playerid, "Bu iþyeri kilitli olduðu için çýkýþ yapamýyorsunuz.");
				if(IsyeriBilgi[id][isyeriDurum] == 4) return hataMesaji(playerid, "Bu iþyeri mühürlenmiþ.");

				SetPlayerPos(playerid, IsyeriBilgi[id][isyeriPos][0], IsyeriBilgi[id][isyeriPos][1], IsyeriBilgi[id][isyeriPos][2]);
				SetPlayerFacingAngle(playerid, IsyeriBilgi[id][isyeriPos][3] - 180.0);
				SetPlayerInterior(playerid, IsyeriBilgi[id][isyeriDisInt]);
				SetPlayerVirtualWorld(playerid, IsyeriBilgi[id][isyeriDisVW]);
				SetCameraBehindPlayer(playerid);
				StopAudioStreamForPlayer(playerid);
				TogglePlayerControllable(playerid, false);
				SetTimerEx("oyuncucoz", 5500, false, "i", playerid);
				return 1;
			}
			else if(OtelOdasi_Bul(playerid) != -1)
			{
				if(otelOda[OtelOdasi_Bul(playerid)][oda_Fiyat] == -1) return hataMesaji(playerid, "Bu oda hazýr deðil, girilemez.");
				if(!strcmp(otelOda[OtelOdasi_Bul(playerid)][oda_Sahip], "-", true)) return hataMesaji(playerid, "Oda sahibi mevcut deðil, içeri girilemez.");
				if(otelOda[OtelOdasi_Bul(playerid)][oda_Kilit] == true) return hataMesaji(playerid, "Kapý kilitli olduðu için odaya giremezsiniz.");
				new resepsiyon = otelOda[OtelOdasi_Bul(playerid)][oda_Resepsiyon];
				new yildiz = resepsData[resepsiyon][rspYildiz]-1;
				SetPlayerPos(playerid, otelInt[yildiz][otelIntPOS][0], otelInt[yildiz][otelIntPOS][1], otelInt[yildiz][otelIntPOS][2]);
				SetPlayerInterior(playerid, otelInt[yildiz][otelInterior]);
				SetPlayerVirtualWorld(playerid, OtelOdasi_Bul(playerid));
			}
			else if(OtelOdasi_Ic_Bul(playerid) != -1)
			{
				new ida = OtelOdasi_Ic_Bul(playerid);
				if(otelOda[GetPlayerVirtualWorld(playerid)][oda_Kilit] == true) return hataMesaji(playerid, "Kapý kilitli olduðu için odadan çýkamazsýnýz.");
				SetPlayerPos(playerid, otelOda[ida][oda_Pos][0], otelOda[ida][oda_Pos][1], otelOda[ida][oda_Pos][2]);
				SetPlayerInterior(playerid, otelOda[ida][oda_disInt]);
				SetPlayerVirtualWorld(playerid, otelOda[ida][oda_disVW]);
			}
		}
		else if(newkeys & KEY_WALK || newkeys & KEY_FIRE)
		{
			if(IsPlayerInAnyVehicle(playerid))
			{
				if(HizLimit[GetPlayerVehicleID(playerid)] > 0)
				{
					HizLimit[GetPlayerVehicleID(playerid)] = 0;
					SunucuMesaji(playerid, "Hýz limiti açýkken CTRL veya ALT tuþunu kullandýðýnýz için, limit devre dýþý kaldý.");
				}
			}
		}
			else if(newkeys & KEY_SUBMISSION)
		{
				if(oyuncuData[playerid][oCiftlik] != -1 && GetPVarInt(playerid, "CiftlikBicimIslem") == 1)
				{
				if(GetPlayerProgressBarValue(playerid, bicimprog[playerid]) >= GetPVarInt(playerid, "CiftlikEkinler"))
				{
				new cid = oyuncuData[playerid][oCiftlik];
				SunucuMesaji(playerid, "Baþarýyla tarlanýzda ekili olan %s bitkisini biçtiniz.", ekinlerveri[CiftlikInfo[cid][cUrun]][ekinisim]);
				Doluluk[playerid] = 0;
				CiftlikInfo[cid][cUrun] = 0;
				CiftlikInfo[cid][cOlgunlasma] = 0;
				HidePlayerProgressBar(playerid, bicimprog[playerid]);
				DestroyPlayerProgressBar(playerid, bicimprog[playerid]);
				TextDrawHideForPlayer(playerid, ciftlik_0);
				TextDrawHideForPlayer(playerid, ciftlik_1);
				SetPVarInt(playerid, "CiftlikBicimIslem", 0);
				DeletePVar(playerid, "CiftlikBicimIslem");
				SetPVarInt(playerid, "CiftlikEkinler", 0);
				DeletePVar(playerid, "CiftlikEkinler");
				CiftlikInfo[oyuncuData[playerid][oCiftlik]][cIslem] = false;
				Ciftlik_Kaydet(cid);
				return 1;
				}
				new query[110], Cache:VeriCek, rows;
				mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `ekinler` WHERE `ciftlikid` = '%d'", oyuncuData[playerid][oCiftlik]);
				VeriCek = mysql_query(g_SQL, query);
				rows = cache_num_rows();
				if(rows)
				{
					for (new i = 0; i < rows; i ++)
				{
					if(GetVehicleDistanceFromPoint(GetPlayerVehicleID(playerid), vericek_float(i, "x"), vericek_float(i, "y"), vericek_float(i, "z")) < 4.0)
					{
					new idx = vericek_int(i, "objeid");
					cache_delete(VeriCek);
					Doluluk[playerid] += 1;
					SetPlayerProgressBarValue(playerid, bicimprog[playerid], Doluluk[playerid]);
					DestroyDynamicObject(idx);
					mysql_format(g_SQL, query, sizeof(query), "DELETE FROM `ekinler` WHERE `objeid` = '%d'", idx);
					mysql_query(g_SQL, query);
					UrunYarat(playerid, oyuncuData[playerid][oCiftlik]);
					break;
					}
				}	
				}
				}
		}
		else if(newkeys & KEY_FIRE)
		{
			if(oyuncuData[playerid][oSigaraIciyor] == 0 || IsPlayerInAnyVehicle(playerid)) return 0;
			if(oyuncuData[playerid][oSigaraKalanHak] < 1)
			{
				oyuncuData[playerid][oSigaraKalanHak] = 0;
				cmd(playerid, 1, "sigarasýný yere atar ve üstüne basarak söndürür.");
				ClearAnimations(playerid);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				oyuncuData[playerid][oSigaraIciyor] = 0;
			}
			else
			{
				oyuncuData[playerid][oSigaraKalanHak]--;
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
			}
		}
		return 1;
	}

	public OnRconLoginAttempt(ip[], password[], success)
	{
		new kickstatus = 0, pip[16];
		for(new i = GetPlayerPoolSize(); i != -1; --i)
        {
            GetPlayerIp(i, pip, sizeof(pip));
            if(!strcmp(ip, pip, true))
            {
                Log_Kaydet("loglar/rconlogin.txt", "[%s] %s, rcon girisi yapmaya calisti. Denedigi Sifre: %s | IP: %s", Tarih(),  OyuncuIsim(i), password, ip);
                //if(oyuncuData[i][oForumID] != 1 && oyuncuData[i][oForumID] != 2 && oyuncuData[i][oForumID] != 3 && oyuncuData[i][oForumID] != 6)
                for(new a; a < sizeof(YetkiliForumIDleri); a++)
                {
	                if(YetkiliForumIDleri[a][yetkiliforumidsi] == oyuncuData[i][oForumID])
	                {
	                	kickstatus++;
	            	}
            	}
            	if(kickstatus == 0) Kick(i);
            }
        }
		return 1;
	}

	function KilometreBenzin()
	{
		foreach(new i : Player)
		{
			if(IsPlayerInAnyVehicle(i))
			{
				new playerid = i, textstr[256];
				format(textstr, sizeof(textstr), "%.2f lt", AracBilgi[GetPlayerVehicleID(playerid)][aracBenzin]);
				PlayerTextDrawSetString(playerid, AracGosterge[4][playerid], textstr);
				format(textstr, sizeof(textstr), "%.2f km", AracBilgi[GetPlayerVehicleID(playerid)][aracKM]);
				PlayerTextDrawSetString(playerid, AracGosterge[5][playerid], textstr);
		    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER &&  Arac_IDBul(GetPlayerVehicleID(playerid)) != -1)// && AracZaman[GetPlayerVehicleID(playerid)] < tickcount())
		    {
		    	new ids = Arac_IDBul(GetPlayerVehicleID(playerid)), aracid = GetPlayerVehicleID(playerid), test[32];
		    	format(test, sizeof(test), "0.00%.0f", AracHizKontrol(playerid));
				//AracZaman[aracid] = tickcount() + 1000;
		    	AracBilgi[ids][aracKM] += GetVehicleDistanceFromPoint(aracid,  AracSonPos[aracid][0], AracSonPos[aracid][1], AracSonPos[aracid][2]) / 5000;
		    	GetVehiclePos(aracid, AracSonPos[aracid][0], AracSonPos[aracid][1], AracSonPos[aracid][2]);
		    	if(IsEngineVehicle(GetPlayerVehicleID(playerid)) && AracBilgi[ids][aracTur] != 1 && AracBilgi[ids][aracBenzin] < 0.01) SetEngineStatus(aracid, false);
		    	else if(AracBilgi[aracid][aracBenzin] > 0.00 && AracBilgi[aracid][aracMeslek] == -1 && AracBilgi[aracid][aracTur] != 1 && IsEngineVehicle(GetPlayerVehicleID(playerid)) && aracbirlikturbul(GetPlayerVehicleID(playerid)) != BIRLIK_POLIS && aracbirlikturbul(GetPlayerVehicleID(playerid)) != BIRLIK_MEDIKAL && AracBilgi[aracid][aracKiralik] != 1) AracBilgi[aracid][aracBenzin] -= OyuncuHiziniCek(playerid)/2500.0;
		    }
		    if(GetPlayerVehicleID(playerid) != SonArac[playerid] && GetTickCount() - DegistirmeSuresi[playerid] < 5000)
		    {
		    	DegistirilenArac[playerid]++;
				#if ANTI_HILE   true
		    	if(DegistirilenArac[playerid] > 5)
		    	{
		    		SCM_ExAll(RENK_YETKILI, "[YETKÝLÝ ÝÞLEM]: {FFFFFF}Sistem, %s adlý kiþiyi oyundan attý. sebep: Hile (#006)", OyuncuIsim(playerid));
		    		return KickEx(playerid);
		    	}
				#endif
		    }
		    else DegistirilenArac[playerid] = 0;
		    SonArac[playerid] = GetPlayerVehicleID(playerid);
		    DegistirmeSuresi[playerid] = GetTickCount();
		}
	}
	return 1;
}

public OnPlayerUpdate(playerid)
{
	g_Paused[playerid] = GetTickCount();
	if (GetPlayerWeapon(playerid) == 42)
	{
		static yanginkeys[3];
		GetPlayerKeys(playerid, yanginkeys[0], yanginkeys[1], yanginkeys[2]);
		if(yanginkeys[0] & KEY_FIRE)
		{
			static Float:fX, Float:fY, Float:fZ;
			for (new i = 0; i < MAX_YANGIN; i++)
			{
				GetDynamicObjectPos(yanginData[i][yanginobjesi][i], fX, fY, fZ);
				if((IsValidDynamicObject(yanginData[i][yanginobjesi][i]) && IsPlayerInRangeOfPoint(playerid, 4.0, fX, fY, fZ)) && ++ yanginData[i][yanginsonmesi][i] == 30)
				{
					DestroyDynamicObject(yanginData[i][yanginobjesi][i]);
					yanginData[i][yanginsonmesi][i] = 0;
				}
			}

		}
	}
	if(GetPlayerAnimationIndex(playerid) == 1660)
	{
		if(SprunkKullanim[playerid] == false)
		{
			SprunkKullanim[playerid] = true;
			new Float:HP;
			GetPlayerHealth(playerid, HP);
			SetPVarFloat(playerid, "sprunkmakinaengel", HP);
			SetPVarInt(playerid, "sprunkzamangetir", GetTickCount() + 3150);
		}
	}
	if(SprunkKullanim[playerid] == true)
	{
		if(GetPVarInt(playerid, "sprunkzamangetir") <= GetTickCount())
		{
			SetPlayerHealth(playerid, GetPVarFloat(playerid, "sprunkmakinaengel"));
			SprunkKullanim[playerid] = false;
		}
	}
	if(oyuncuData[playerid][oKontrol] == false) TogglePlayerControllable(playerid, false);
	if(GetPlayerAnimationIndex(playerid) == 747 && GetPlayerWeapon(playerid) == 4 || GetPlayerAnimationIndex(playerid) == 748 && GetPlayerWeapon(playerid) == 4) {
		SilahSilEx(playerid, 4);
		ClearAnimations(playerid);
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
		new textstr[256];
		format(textstr, sizeof(textstr), "%d km/h", OyuncuHiziniCek(playerid));
		PlayerTextDrawSetString(playerid, AracGosterge[3][playerid], textstr);
	}
	static Keys, zud, lrn;
	GetPlayerKeys(playerid, Keys, zud, lrn);

    //SCM_Ex(playerid, -1, "%d - %d - %d", GetVehicleModel(oyuncuData[playerid][oGeciciArac]), AracFiyatiCek_Galeri(playerid), aracsecimi[playerid]);

	if (GetPVarInt(playerid, "YatGir") == 1)
	{
		new yatid = GetPVarInt(playerid, "YatID");

		static Float:x, Float:y, Float:z;

		if (zud < 0)
		{
			GetObjectPos(YatInfo[yatid][yObje], x, y, z);
			x += (0.5 * floatsin(-YatInfo[yatid][yrZ], degrees));
			y += (0.5 * floatcos(-YatInfo[yatid][yrZ], degrees));
			MoveDynamicObject(YatInfo[yatid][yObje], x, y, z, 6.0);
			GetObjectPos(YatInfo[yatid][yObje], YatInfo[yatid][yX], YatInfo[yatid][yY], YatInfo[yatid][yZ]);
			return 1;
		}
		else if (zud > 0)
		{
			GetObjectPos(YatInfo[yatid][yObje], x, y, z);
			x -= (1.0 * floatsin(-YatInfo[yatid][yrZ], degrees));
			y -= (1.0 * floatcos(-YatInfo[yatid][yrZ], degrees));
			MoveDynamicObject(YatInfo[yatid][yObje], x, y, z, 6.0);
			GetObjectPos(YatInfo[yatid][yObje], YatInfo[yatid][yX], YatInfo[yatid][yY], YatInfo[yatid][yZ]);
			return 1;
		}
		if (lrn < 0)
		{
			GetObjectRot(YatInfo[yatid][yObje], x, y, z);
			z += 0.5;
			SetDynamicObjectRot(YatInfo[yatid][yObje], x, y, z);
			YatInfo[yatid][yrZ] = z;
			return 1;
		}
		else if (lrn > 0)
		{
			GetObjectRot(YatInfo[yatid][yObje], x, y, z);
			z -= 0.5;
			SetDynamicObjectRot(YatInfo[yatid][yObje], x, y, z);
			YatInfo[yatid][yrZ] = z;
			return 1;
		}
	}

	if(GetPlayerMoney(playerid) != oyuncuData[playerid][oPara]) ResetPlayerMoney(playerid), GivePlayerMoney(playerid, oyuncuData[playerid][oPara]);
	if(GetPlayerScore(playerid) != oyuncuData[playerid][oSeviye]) SetPlayerScore(playerid, oyuncuData[playerid][oSeviye]);
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS)
	{
		if(GetPlayerWeapon(playerid) != GetPVarInt(playerid, "OyuncuGecerliSilah") && SHKGereksinim(playerid) != 1)
		{
			OyuncuSilahDegistirdi(playerid, GetPVarInt(playerid, "OyuncuGecerliSilah"), GetPlayerWeapon(playerid));
			SetPVarInt(playerid, "OyuncuGecerliSilah", GetPlayerWeapon(playerid));
		}
	}

	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && HizLimit[GetPlayerVehicleID(playerid)])
	{
		new a, b, c;
		GetPlayerKeys(playerid, a, b ,c);
		if(a == 8 && AracinLimitiniCek(GetPlayerVehicleID(playerid), 0) > HizLimit[GetPlayerVehicleID(playerid)])
		{
			new yenihiz = AracinLimitiniCek(GetPlayerVehicleID(playerid), 0) - HizLimit[GetPlayerVehicleID(playerid)];
			AracHiziDegistir(GetPlayerVehicleID(playerid), -yenihiz);
		}
	}

	#if ASILI_SILAHLAR_DURUMU   true
	new silahid[13], silahmermi[13];
	for(new i ; i < 13; i ++){ GetPlayerWeaponData(playerid, i, silahid[i], silahmermi[i]); }
		if(silahid[5] && silahmermi[5] > 0)
		{
			if(GetPlayerWeapon(playerid) != silahid[5])
			{
				if(!IsPlayerAttachedObjectSlotUsed(playerid, 8))
				{
					switch(silahid[5])
					{
						case 30, 31: SetPlayerAttachedObject(playerid, 8, SilahObjeModelleri(silahid[5]), 1, 0.1820, 0.1830, -0.1289, -164.1002, 149.7000, -14.6999);
					}
				}
			}
			else
			{
				if(IsPlayerAttachedObjectSlotUsed(playerid, 8))
				{
					switch(silahid[5])
					{
						case 30, 31: RemovePlayerAttachedObject(playerid, 8);
					}
				}
			}
		}
		else RemovePlayerAttachedObject(playerid, 8);
		if(silahid[3] && silahmermi[3] > 0)
		{
			if(GetPlayerWeapon(playerid) != silahid[3])
			{
				if(!IsPlayerAttachedObjectSlotUsed(playerid, 9))
				{
					switch(silahid[3])
					{
						case 25: SetPlayerAttachedObject(playerid, 9, SilahObjeModelleri(silahid[3]), 1, 0.1820, 0.1830, -0.1289, -164.1002, 149.7000, -14.6999);
					}
				}
			}
			else
			{
				if(IsPlayerAttachedObjectSlotUsed(playerid, 9))
				{
					switch(silahid[3])
					{
						case 25: RemovePlayerAttachedObject(playerid, 9);
					}
				}
			}
		}
		else RemovePlayerAttachedObject(playerid, 9);
 	#endif
		return 1;
	}

	public OnPlayerStreamIn(playerid, forplayerid)
	{
		if(oyuncuData[playerid][oGazMaskedurum] == 0)
		{
			ShowPlayerNameTagForPlayer(forplayerid, playerid, 1);
		}
		else
		{
			ShowPlayerNameTagForPlayer(forplayerid, playerid, 0);
		}
		if(OyuncuBirlikTuru(playerid) == BIRLIK_POLIS && OyuncuBirlikTuru(forplayerid) == BIRLIK_POLIS && oyuncuData[playerid][oIsbasi] == true && oyuncuData[forplayerid][oIsbasi] == true)
		{
			SetPlayerMarkerForPlayer(forplayerid, playerid, 0x8D8DFFFF);
		}
		return 1;
	}

	public OnPlayerStreamOut(playerid, forplayerid)
	{
		ShowPlayerNameTagForPlayer(forplayerid, playerid, 0);
		return 1;
	}

	public OnVehicleStreamIn(vehicleid, forplayerid)
	{
    /*static aracid;
    aracid = Arac_IDBul(vehicleid);
    if(aracid > -1) {
		if(oyuncuData[forplayerid][oPDgps] == true && aracbirlikturbul(vehicleid) == BIRLIK_POLIS && OyuncuBirlikTuru(forplayerid) == BIRLIK_POLIS)
	        SetVehicleParamsForPlayer(vehicleid, forplayerid, 1, 0);
    }*/
	    return 1;
	}

	public OnVehicleStreamOut(vehicleid, forplayerid)
	{
		return 1;
	}

	public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
	{
		SetPVarInt(playerid, "dialog", -1);
		if(strfind(inputtext, "%", true) != -1) return hataMesaji(playerid, "Dialoglarda hatalý karakter kullanýlamaz."); // bunu sakýn kapatmayýn
		if(dialogid == PDPC_ISIMSORGU)
		{
			if(response)
			{
		    	MDC_IsimSorgula(playerid, inputtext);
			}
		}
		if(dialogid == PDPC_PLAKASORGU)
		{
			if(response)
			{
		    	MDC_PlakaSorgula(playerid, inputtext);
			}
		}
		if(dialogid == PDPC_EVSORGULA)
		{
			if(response)
			{
				new evidsi;
				for(new i = 0; i < MAKSIMUM_EV; i++)
				{
					if(strval(inputtext) == i) evidsi = EvBilgi[i][evID]; break;
				}
			    MDC_EvSorgula(playerid, evidsi);
			}
		}
		if(dialogid == PDPC_ISSORGULA)
		{
			if(response)
			{
				new isyeriidsi;
				for(new i = 0; i < MAKSIMUM_ISYERI; i++)
				{
					if(strval(inputtext) == i) isyeriidsi = IsyeriBilgi[i][isyeriID]; break;
				}
			    MDC_IsSorgula(playerid, isyeriidsi);
			}
		}
		if(dialogid == PDPC_NOSORGULA)
		{
			if(response)
			{
			    MDC_NumaraSorgula(playerid, strval(inputtext));
			}
		}
		if(dialogid == PDPC_BOLOKAYIT)
		{
			if(response)
			{
			    switch(listitem)
			    {
			        case 0:{
	                    ShowPlayerDialog(playerid, PDPC_BOLOOLUSTUR, DIALOG_STYLE_INPUT, MDC_BASLIK, "{FFFFFF}BOLO kaydý oluþturmak için sadece gördüðünüz bilgileri yazýn {cdcdcd}(128 karakter){FFFFFF}:", "Oluþtur", "Iptal");
			  		}
			        case 1:{
			        //
	                    BoloKaydiListe(playerid);
			        }
			    }
			}
		}
		if(dialogid == PDPC_BOLOSIL)
	 	{
			if(response)
			{
			    printf("%d", strval(inputtext));
			    new query[128];
			    mysql_format(g_SQL, query, sizeof(query), "DELETE FROM `bolokayitlari` WHERE `id` = '%d'", strval(inputtext));
			    mysql_query(g_SQL, query);
			    ShowPlayerDialog(playerid, PDPC_BOLOSAYFA, DIALOG_STYLE_MSGBOX, MDC_BASLIK, "{FFFFFF}Veritabanýndan BOLO kaydý baþarýyla kaldýrýldý.", "Geri Dön", "");
	  		}
	 	}
	 	if(dialogid == PDPC_BOLOSAYFA)
	 	{
	        BoloKaydiListe(playerid);
	 	}
		if(dialogid == PDPC_BOLOOLUSTUR)
	 	{
			if(response)
			{
			    new str[512];
			    format(MDC_Bolo[playerid], 128, inputtext);
			    format(str, sizeof(str), "%s{FFFFFF}Kayýt doðrudan sistemde listelenecektir, eksiksiz olduðuna emin misiniz?\n", str);
			    format(str, sizeof(str), "%s{FFFFFF}BOLO>: \n\n\t%s\n", str, MDC_Bolo[playerid]);
			    ShowPlayerDialog(playerid, PDPC_BOLOKABULET, DIALOG_STYLE_MSGBOX, MDC_BASLIK, str, "Evet", "Hayýr");
	  		}
	 	}
	 	if(dialogid == PDPC_BOLOKABULET)
	 	{
	 	    if(response)
			{
				new query[400];
				mysql_format(g_SQL, query, sizeof(query), "INSERT INTO `bolokayitlari` (`bolo`, `memur`, `tarih`) VALUES ('%e', '%e', '%s')", MDC_Bolo[playerid], OyuncuIsim(playerid, 1), SQLTarih());
				mysql_query(g_SQL, query);
				ShowPlayerDialog(playerid, BOS_MESAJ, DIALOG_STYLE_MSGBOX, MDC_BASLIK, "{FFFFFF}BOLO kaydý baþarýyla oluþturuldu.", "Kapat", "");
			}
	 	}
		if(dialogid == PDPC_SICILSAYFA)
		{
		    if(response)
		    {
				switch(listitem)
				{
				    case 0:pdpc_sayfa[playerid]++;
				    case 1:
					{

						pdpc_sayfa[playerid]--;
						if(pdpc_sayfa[playerid] < 1)
						{
						    pdpc_sayfa[playerid] = 0;
						    //SendClientMessage(playerid, -1, "Ýlk sayfadasýnýz.");
						}
					}
				}
	            Sicil_Kayitlari(playerid, SicilIsim_Cek[playerid], pdpc_sayfa[playerid]);
		    }
		}
		switch(dialogid)
		{
			case DIALOG_MOBILYA_LISTELE:
			{
				if(!response)
					return 	Dialog_Show(playerid, dekor_menu, DIALOG_STYLE_LIST, "> Dekor", "Eþyalarý listele\nYeni eþya al\n", "Seç", "Kapat");

				new ev = -1, isletme = -1;
				if(response && (ev = Oyuncu_Evde(playerid)) != -1 && Ev_SahipKontrol(playerid, ev) || (isletme = Oyuncu_Isyerinde(playerid)) != -1 && Isyeri_SahipKontrol(playerid, isletme) || EvBilgi[ev][evAnahtar] == oyuncuData[playerid][oID] || EvBilgi[ev][evKiraci] == oyuncuData[playerid][oID] || IsyeriBilgi[isletme][isyeriOrtak] == oyuncuData[playerid][oID])
				{
					new dekorid = strval(inputtext);
					oyuncuData[playerid][duzenlenenMobilya] = dekorid;
					SetPVarInt(playerid, "islem_dekor", dekorid), SetPVarInt(playerid, "isletme", isletme), SetPVarInt(playerid, "ev", ev);
					Dialog_Show(playerid, dekor_islem, DIALOG_STYLE_LIST, "> Dekor, liste, iþlem", "> Hareket ettir\n> Pozisyon\n> Texture\n> Kopyala\n> Kaldýr", "Seç", "Geri");
					}
				}
				case SAHIP_OLDUGUM_GATELER:
				{
					if(!response) return false;
					SetPVarInt(playerid, "Gatelerim_ID", strval(inputtext));
					ShowPlayerDialog(playerid, GATELERIMIN_AYARLARI, DIALOG_STYLE_LIST, "Gate Ýþlemleriniz", "Kapý Þifresini Deðiþtir", "Devam", "Geri");
				}
				case GATELERIMIN_AYARLARI:
				{
					if(!response) return Gatelerim_Menu(playerid);
					SetPVarInt(playerid, "Gatelerim_IslemID", listitem);
					switch(listitem)
					{
						case 0:{ShowPlayerDialog(playerid, GATELERIMI_DUZENLIYORUM, DIALOG_STYLE_INPUT, "{FF00FF}Iþlem: {FFFFFF}Kapý Þifresini Deðiþtir","{FFFFFF}Kapý þifresini kutucuða giriniz, silmek için {E6D799}boþ{FFFFFF} býrakýp onaylayýn.","Onayla","Kapat");}
					}
				}
				case GATELERIMI_DUZENLIYORUM:
				{
					if(!response) return Gatelerim_Menu(playerid);
					new id = GetPVarInt(playerid, "Gatelerim_ID");
					switch(GetPVarInt(playerid, "Gatelerim_IslemID"))
					{
						case 0: format(gateData[id][gateSifre], 32, inputtext);
					}
					GateKaydet(id);
				}
				case GATE_DIALOG:
				{
					if(response)
					{
						new id = GetPVarInt(playerid, "GateDuzenleID");
						SetPVarInt(playerid, "GateIslemID", listitem);
						switch(listitem)
						{
							case 0:{GateDuzenliyorum[playerid] = 1; EditDynamicObject(playerid, gateData[id][gateObje]);}
							case 1:{GateDuzenliyorum[playerid] = 2; EditDynamicObject(playerid, gateData[id][gateObje]);}

							case 3:{ShowPlayerDialog(playerid, GATE_DIALOG_X, DIALOG_STYLE_INPUT, "{FFFFFF}Kapý Hýzý","{FFFFFF}Kapý hýzýný deðiþtirmek için aþaðýya deðer giriniz.","Onayla","Kapat");}
							case 4:{ShowPlayerDialog(playerid, GATE_DIALOG_X, DIALOG_STYLE_INPUT, "{FFFFFF}Eriþim Uzaklýðý","{FFFFFF}Kapýy eriþim parametresini deðiþtirmek için aþaðýya deðer giriniz.","Onayla","Kapat");}

							case 5:{ShowPlayerDialog(playerid, GATE_DIALOG_X, DIALOG_STYLE_INPUT, "{FFFFFF}Kapý Þifresi","{FFFFFF}Kapý þifresini kutucuða giriniz, silmek için {E6D799}boþ{FFFFFF} býrakýp onaylayýn.","Onayla","Kapat");}

							case 6:{ShowPlayerDialog(playerid, GATE_DIALOG_X, DIALOG_STYLE_INPUT, "{FFFFFF}Virtual Deðeri","{FFFFFF}Kapýya ait virtual deðerini kutucuða girip onayla tuþuna basýn.","Onayla","Kapat");}
							case 7:{ShowPlayerDialog(playerid, GATE_DIALOG_X, DIALOG_STYLE_INPUT, "{FFFFFF}Interior Deðeri","{FFFFFF}Kapýya ait interior deðerini kutucuða girip onayla tuþuna basýn.","Onayla","Kapat");}
							case 8:{ShowPlayerDialog(playerid, GATE_DIALOG_X, DIALOG_STYLE_INPUT, "{FFFFFF}Obje Modeli","{FFFFFF}Kapý modelini kutucuða girip onayla tuþuna basýn.","Onayla","Kapat");}

							case 10:{ShowPlayerDialog(playerid, GATE_DIALOG_X, DIALOG_STYLE_INPUT, "{FFFFFF}Gate Sahibi","{FFFFFF}Kapýnýn sahibini kutucuða girip onayla tuþuna basýn.","Onayla","Kapat");}
							case 11:{ShowPlayerDialog(playerid, GATE_DIALOG_X, DIALOG_STYLE_INPUT, "{FFFFFF}Gate Birliði","{FFFFFF}Kapý için birlik ID girip onayla Kutucuðuna tuþuna basýn.","Onayla","Kapat");		}

							case 13:
							{
							//if(gateData[id][gateAcikPos][0] == gateData[id][gateKapaliPos][0] && gateData[id][gateAcikPos][1] == gateData[id][gateKapaliPos][1] && gateData[id][gateAcikPos][2] == gateData[id][gateKapaliPos][2]) return SendClientMessage(playerid, -1, "{EC6C6C}<!>{FFFFFF} Bu kapý henüz ayarlanmamýþ.");
								if(gateData[id][gateHiz] == 0) return SendClientMessage(playerid, -1, "{EC6C6C}<!>{FFFFFF} Bu kapýnýn hýzý ayarlý deðil.");
								if(gateData[id][gateDurum] == true)
								{
									MoveDynamicObject(gateData[id][gateObje], gateData[id][gateKapaliPos][0], gateData[id][gateKapaliPos][1], gateData[id][gateKapaliPos][2], gateData[id][gateHiz], gateData[id][gateKapaliPos][3], gateData[id][gateKapaliPos][4], gateData[id][gateKapaliPos][5]);
									gateData[id][gateDurum] = false;
								}
								else
								{
									MoveDynamicObject(gateData[id][gateObje], gateData[id][gateAcikPos][0], gateData[id][gateAcikPos][1], gateData[id][gateAcikPos][2], gateData[id][gateHiz], gateData[id][gateAcikPos][3], gateData[id][gateAcikPos][4], gateData[id][gateAcikPos][5]);
									gateData[id][gateDurum] = true;
								}
								GateDuzenleMenu(playerid);
							}
							case 14:
							{
								SetPlayerPos(playerid,gateData[id][gateKapaliPos][0], gateData[id][gateKapaliPos][1] + 0.5, gateData[id][gateKapaliPos][2] + 2.1);
								SetPlayerVirtualWorld(playerid,gateData[id][gateVirtual]); SetPlayerInterior(playerid,gateData[id][gateInterior]);
							}
							default:GateDuzenleMenu(playerid);
						}
					}
				}
				case GATE_DIALOG_X:
				{
					if(response)
					{
						new x = GetPVarInt(playerid, "GateIslemID"),
						id = GetPVarInt(playerid, "GateDuzenleID");
						switch(x)
						{
							case 3:gateData[id][gateHiz] = floatstr(inputtext);
							case 4:gateData[id][gateUzaklik] = floatstr(inputtext);
							case 5:
							{
								if(strlen(inputtext) <= 0)
								{
									format(gateData[id][gateSifre], 32, "-");
								}
								else format(gateData[id][gateSifre], 32, inputtext);
							}
							case 6:
							{
								gateData[id][gateVirtual] = strval(inputtext);
								if(IsValidDynamicObject(gateData[id][gateObje])){DestroyDynamicObject(gateData[id][gateObje]);}
								gateData[id][gateDurum] = false;
								gateData[id][gateObje] = CreateDynamicObject(gateData[id][gateObjeModel], gateData[id][gateKapaliPos][0],\
									gateData[id][gateKapaliPos][1], gateData[id][gateKapaliPos][2], gateData[id][gateKapaliPos][3],\
									gateData[id][gateKapaliPos][4], gateData[id][gateKapaliPos][5], gateData[id][gateVirtual], gateData[id][gateInterior]);
							}
							case 7:
							{
								gateData[id][gateInterior] = strval(inputtext);
								if(IsValidDynamicObject(gateData[id][gateObje])){DestroyDynamicObject(gateData[id][gateObje]);}
								gateData[id][gateDurum] = false;
								gateData[id][gateObje] = CreateDynamicObject(gateData[id][gateObjeModel], gateData[id][gateKapaliPos][0],\
									gateData[id][gateKapaliPos][1], gateData[id][gateKapaliPos][2], gateData[id][gateKapaliPos][3],\
									gateData[id][gateKapaliPos][4], gateData[id][gateKapaliPos][5], gateData[id][gateVirtual], gateData[id][gateInterior]);
							}
							case 8:
							{
								gateData[id][gateObjeModel] = strval(inputtext);
								if(IsValidDynamicObject(gateData[id][gateObje])){DestroyDynamicObject(gateData[id][gateObje]);}
								gateData[id][gateDurum] = false;
								gateData[id][gateObje] = CreateDynamicObject(gateData[id][gateObjeModel], gateData[id][gateKapaliPos][0],\
									gateData[id][gateKapaliPos][1], gateData[id][gateKapaliPos][2], gateData[id][gateKapaliPos][3],\
									gateData[id][gateKapaliPos][4], gateData[id][gateKapaliPos][5], gateData[id][gateVirtual], gateData[id][gateInterior]);
							}
							case 10:
							{
								format(gateData[id][gateSahip], 32, inputtext);
								if(IsValidDynamicObject(gateData[id][gateObje])){DestroyDynamicObject(gateData[id][gateObje]);}
								gateData[id][gateDurum] = false;
								gateData[id][gateObje] = CreateDynamicObject(gateData[id][gateObjeModel], gateData[id][gateKapaliPos][0],\
									gateData[id][gateKapaliPos][1], gateData[id][gateKapaliPos][2], gateData[id][gateKapaliPos][3],\
									gateData[id][gateKapaliPos][4], gateData[id][gateKapaliPos][5], gateData[id][gateVirtual], gateData[id][gateInterior]);
							}
							case 11:
							{
								gateData[id][gateBirlik] = strval(inputtext);
								if(IsValidDynamicObject(gateData[id][gateObje])){DestroyDynamicObject(gateData[id][gateObje]);}
								gateData[id][gateDurum] = false;
								gateData[id][gateObje] = CreateDynamicObject(gateData[id][gateObjeModel], gateData[id][gateKapaliPos][0],\
									gateData[id][gateKapaliPos][1], gateData[id][gateKapaliPos][2], gateData[id][gateKapaliPos][3],\
									gateData[id][gateKapaliPos][4], gateData[id][gateKapaliPos][5], gateData[id][gateVirtual], gateData[id][gateInterior]);
							}
						}
						GateKaydet(id);
						GateDuzenleMenu(playerid);
					}
				}
				case ARAC_KIRALA_SURE:
				{
					if(!response) return false;

					new aracid = GetPVarInt(playerid, "Kirala_AracID"), gerekliucret, topla = listitem + 1;
					gerekliucret = topla * AracBilgi[aracid][aKiraUcret];

					if(oyuncuData[playerid][oPara] < gerekliucret) return hataMesaji(playerid, "Bu aracý kiralamak için yeterli paran yok.");
					if(AracBilgi[aracid][aracKiralik] == 0) return hataMesaji(playerid, "Bu araç kiralýk deðil.");
					if(AracBilgi[aracid][aracAnahtar] > -1) return hataMesaji(playerid, "Bu araç zaten kiralanmýþ.");
					if(AracBilgi[aracid][aracFirma] < 0 && FirmaInfo[AracBilgi[aracid][aracFirma]][fAlan] != 3) return hataMesaji(playerid, "Bu araç kiralanamaz.");

					AracBilgi[aracid][aracAnahtar] = oyuncuData[playerid][oID];
					AracBilgi[aracid][aKiraZaman] = 60 * topla;
					Arac_Kaydet(aracid);
					ParaEkle(playerid, -gerekliucret);
					FirmaParaEkle(AracBilgi[aracid][aracFirma], topla * AracBilgi[aracid][aKiraUcret]);
					FirmaMesaji(AracBilgi[aracid][aracFirma], "[FÝRMA]: Firma araçlarýndan bir tanesi kiralandý.");
					SunucuMesaji(playerid, "Araç %d saatliðine kiralandý, iyi yolculuklar!", listitem + 1);
				}
				case DIALOG_BIRLIK_ARACLARI:
				{
					if(!response) return false;
					/*new aracsql = oyuncuData[playerid][pBirlikAID][listitem];
					if(AracDurumuCek(aracsql) == 0)
					{
						new query[80];
						mysql_format(g_SQL, query, sizeof(query), "UPDATE `araclar` SET `aracBirlik` = '-1' WHERE `aracID` = '%d'", aracsql);
						mysql_query(g_SQL, query);
						BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikaraci]--;
						Birlik_Kaydet(oyuncuData[playerid][oBirlik]);
						BilgiText(playerid, "~r~~h~~h~Arac birlikten basariyla cikarildi.");
					}
					else
					{
						new aracid = AracDurumuCek(aracsql);
						AracBilgi[aracid][aracBirlik] = -1;
						Arac_Kaydet(aracid);
						BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikaraci]--;
						Birlik_Kaydet(oyuncuData[playerid][oBirlik]);
						BilgiText(playerid, "~r~~h~~h~Arac birlikten basariyla cikarildi.");
					}*/
					SunucuMesaji(playerid, "Aracý seçtiniz.");
				}
				case DIALOG_PDPC_ARANMAVERI:
				{
					if(!response) return false;
					switch(listitem) {
						case 0: {ArananlarListesi(playerid);}
						case 1: {DialogGoster(playerid, DIALOG_MDC_SUC, DIALOG_STYLE_INPUT, "> PDPC - Suç Ekle", "Lütfen suç eklenecek kiþinin ismini veya ID'sini girin;", "Sorgula", "Kapat");}
					}
				}
						case DIALOG_CIFTLIK_EKIM:
				{
					if(!response) return false;
					new cid = oyuncuData[playerid][oCiftlik];
					if(cid == -1) return hataMesaji(playerid, "Lütfen tarlanýza girip tekrar deneyin.");
					if(CiftlikInfo[cid][cIslem]) return hataMesaji(playerid, "Tarla þuan zaten birisi tarafýndan ekilip & biçiliyor.");
					if(oyuncuData[playerid][oPara] < ekinlerveri[listitem + 1][ekinfiyat] * floatround(floatdiv(CiftlikInfo[cid][cDonum], 5.0), floatround_ceil)) return hataMesaji(playerid, "Tohum masrafýný karþýlayamýyorsunuz.");
					ciftlikprog[playerid] = CreatePlayerProgressBar(playerid,228.00, 28.00, 201.50, 7.19, -8582401, 100.0);
					ShowPlayerProgressBar(playerid, ciftlikprog[playerid]);
					SetPlayerProgressBarMaxValue(playerid, ciftlikprog[playerid], CiftlikInfo[cid][cDonum]);
					ciftlikUpdater[playerid] = SetTimerEx("CiftlikBar", 2000, true, "iii", playerid, cid, listitem + 1);
					CiftlikInfo[cid][cIslem] = true;
					SetPVarInt(playerid, "oncekiciftlik", cid);
					TextDrawShowForPlayer(playerid, ciftlik_0);
					TextDrawShowForPlayer(playerid, ciftlik_1);
					ParaEkle(playerid, -(ekinlerveri[listitem + 1][ekinfiyat] * floatround(floatdiv(CiftlikInfo[cid][cDonum], 5.0),floatround_ceil)));
					CiftlikInfo[cid][cUrun] = listitem + 1;
					CiftlikInfo[cid][cOlgunlasma] = ekinlerveri[listitem + 1][ekinzaman];
					UyariMesaji(playerid, "Tarlaya %s bitkisini ekmeye baþladýnýz, tarlanýn toplam dönümü: %.2f", ekinlerveri[listitem + 1][ekinisim], CiftlikInfo[cid][cDonum]);
					Ciftlik_Kaydet(cid);
					SetPVarInt(playerid, "CiftlikEkimIslem", 1);
				}
				case DIALOG_BALIKONAY:
				{
					if(response)
					{
						new kod;
						kod = GetPVarInt(playerid, "antibot");
						if(strlen(inputtext) > 1 && strval(inputtext) == kod) {
							oyuncuData[playerid][oyemsayisi]--;
							SendClientMessage(playerid, RENK_GRI, "{FFFFFF}Balýk tutuyorsunuz...");
							baliktutuyor[playerid] = true;
							TogglePlayerControllable(playerid, 0);
							ApplyAnimation(playerid,"SWORD","sword_block",50.0,0,1,0,1,1);
							if(GetPVarInt(playerid, "TeknedeBalikTutuyor") == 1)
							{
								oyuncuData[playerid][oBalikTutmaTimer] = SetTimerEx("OyuncuBalikTutuyor", 10 * 1000, false, "i", playerid);
							}
							else
							{
								oyuncuData[playerid][oBalikTutmaTimer] = SetTimerEx("OyuncuBalikTutuyor", 25 * 1000, false, "i", playerid);
							}
							DeletePVar(playerid, "antibot");
							oyuncuData[playerid][oBalikIzin] = false;
							SetPVarInt(playerid, "TeknedeBalikTutuyor", 0);
							DeletePVar(playerid, "TeknedeBalikTutuyor");
						}
						else
						{
							new icerik[120];
							hataMesaji(playerid, "Kodu hatalý girdiniz, lütfen doðru bir þekilde tekrar girin.");
							format(icerik, sizeof(icerik), "Lütfen balýk tutabilmeye devam edebilmek için kodu girin {F5E600}(%d):", kod);
							ShowPlayerDialog(playerid, DIALOG_BALIKONAY, DIALOG_STYLE_INPUT, "Anti-Bot",icerik, "Tamam", "Iptal");
							oyuncuData[playerid][oBalikIzin] = true;
						}
					}
					else
					{
						oyuncuData[playerid][oBalikIzin] = true;
						DeletePVar(playerid, "TeknedeBalikTutuyor");
					}
				}
				case DIALOG_SEYYAR_SEKERLEME:
				{
					if(!response) return DeletePVar(playerid, "seyid");
					new sid = GetPVarInt(playerid, "seyid");
					switch(listitem) {
						case 0: {
							if(oyuncuData[playerid][oPara] < 5) return hataMesaji(playerid, "Bu ürünü alabilmek için yeterli paranýz bulunmuyor.");
							ItemEkle(playerid, 17, 1);
							ParaEkle(playerid, -5);
							TezgahParaEkle(sid, 5);
							SunucuMesaji(playerid, "Çikolata adlý ürünü baþarýyla satýn aldýnýz, ürün envanterinize eklendi.");
						}
						case 1: {
							if(oyuncuData[playerid][oPara] < 3) return hataMesaji(playerid, "Bu ürünü alabilmek için yeterli paranýz bulunmuyor.");
							ItemEkle(playerid, 20, 1);
							ParaEkle(playerid, -3);
							TezgahParaEkle(sid, 3);
							SunucuMesaji(playerid, "Muz adlý ürünü baþarýyla satýn aldýnýz, ürün envanterinize eklendi.");
						}
						case 2: {
							if(oyuncuData[playerid][oPara] < 10) return hataMesaji(playerid, "Bu ürünü alabilmek için yeterli paranýz bulunmuyor.");
							ItemEkle(playerid, 22, 1);
							ParaEkle(playerid, -10);
							TezgahParaEkle(sid, 10);
							SunucuMesaji(playerid, "Donut adlý ürünü baþarýyla satýn aldýnýz, ürün envanterinize eklendi.");
						}
						case 3: {
							if(oyuncuData[playerid][oPara] < 20) return hataMesaji(playerid, "Bu ürünü alabilmek için yeterli paranýz bulunmuyor.");
							ItemEkle(playerid, 25, 1);
							ParaEkle(playerid, -20);
							TezgahParaEkle(sid, 20);
							SunucuMesaji(playerid, "Pasta adlý ürünü baþarýyla satýn aldýnýz, ürün envanterinize eklendi.");
						}
					}
				}
				case DIALOG_SEYYAR_BALIK:
				{
					if(!response) return DeletePVar(playerid, "seyid");
					new sid = GetPVarInt(playerid, "seyid");
					switch(listitem) {
						case 0: {
							if(oyuncuData[playerid][oPara] < 25) return hataMesaji(playerid, "Bu ürünü alabilmek için yeterli paranýz bulunmuyor.");
							ItemEkle(playerid, 23, 1);
							ParaEkle(playerid, -25);
							TezgahParaEkle(sid, 25);
							SunucuMesaji(playerid, "Somon Balýðý adlý ürünü baþarýyla satýn aldýnýz, ürün envanterinize eklendi.");
						}
						case 1: {
							if(oyuncuData[playerid][oPara] < 15) return hataMesaji(playerid, "Bu ürünü alabilmek için yeterli paranýz bulunmuyor.");
							ItemEkle(playerid, 21, 1);
							ParaEkle(playerid, -15);
							TezgahParaEkle(sid, 15);
							SunucuMesaji(playerid, "Noodle adlý ürünü baþarýyla satýn aldýnýz, ürün envanterinize eklendi.");
						}
					}
				}
				case DIALOG_SEYYAR_SANS:
				{
					if(!response) return DeletePVar(playerid, "seyid");
					new sid = GetPVarInt(playerid, "seyid");
					switch(listitem) {
						case 0: {
							if(oyuncuData[playerid][oPara] < 100) return hataMesaji(playerid, "Bu ürünü alabilmek için yeterli paranýz bulunmuyor.");
							if(ItemMiktarKontrol(playerid, 110) > 2) return hataMesaji(playerid, "Envanterinde üç adetten fazla loto bileti bulunduramazsýn.");
							ItemEkle(playerid, 110, 1);
							ParaEkle(playerid, -100);
							TezgahParaEkle(sid, 100);
							SunucuMesaji(playerid, "Loto Bileti  adlý ürünü baþarýyla satýn aldýnýz, ürün envanterinize eklendi.");
						}
						case 1: {
							if(oyuncuData[playerid][oPara] < 20) return hataMesaji(playerid, "Bu ürünü alabilmek için yeterli paranýz bulunmuyor.");
							ItemEkle(playerid, 111, BiletOlustur());
							ParaEkle(playerid, -20);
							TezgahParaEkle(sid, 20);
							SunucuMesaji(playerid, "Yýlbaþý Bileti  adlý ürünü baþarýyla satýn aldýnýz, ürün envanterinize eklendi.");
						}
					}
				}
				case DIALOG_SEYYAR_FASTFOOD:
				{
					if(!response) return DeletePVar(playerid, "seyid");
					new sid = GetPVarInt(playerid, "seyid");
					switch(listitem) {
						case 0: {
							if(oyuncuData[playerid][oPara] < 5) return hataMesaji(playerid, "Bu ürünü alabilmek için yeterli paranýz bulunmuyor.");
							ItemEkle(playerid, 18, 1);
							ParaEkle(playerid, -5);
							TezgahParaEkle(sid, 5);
							SunucuMesaji(playerid, "Patates Cipsi adlý ürünü baþarýyla satýn aldýnýz, ürün envanterinize eklendi.");
						}
						case 1: {
							if(oyuncuData[playerid][oPara] < 20) return hataMesaji(playerid, "Bu ürünü alabilmek için yeterli paranýz bulunmuyor.");
							ItemEkle(playerid, 19, 1);
							ParaEkle(playerid, -20);
							TezgahParaEkle(sid, 20);
							SunucuMesaji(playerid, "Ýtalyan Pizza adlý ürünü baþarýyla satýn aldýnýz, ürün envanterinize eklendi.");
						}
						case 2: {
							if(oyuncuData[playerid][oPara] < 15) return hataMesaji(playerid, "Bu ürünü alabilmek için yeterli paranýz bulunmuyor.");
							ItemEkle(playerid, 24, 1);
							ParaEkle(playerid, -15);
							TezgahParaEkle(sid, 15);
							SunucuMesaji(playerid, "Burger adlý ürünü baþarýyla satýn aldýnýz, ürün envanterinize eklendi.");
						}
					}
				}
				case DIALOG_SEYYAR_ICECEK:
				{
					if(!response) return DeletePVar(playerid, "seyid");
					new sid = GetPVarInt(playerid, "seyid");
					switch(listitem) {
						case 0: {
							if(oyuncuData[playerid][oPara] < 5) return hataMesaji(playerid, "Bu ürünü alabilmek için yeterli paranýz bulunmuyor.");
							ItemEkle(playerid, 8, 1);
							ParaEkle(playerid, -5);
							TezgahParaEkle(sid, 5);
							SunucuMesaji(playerid, "Soda adlý ürünü baþarýyla satýn aldýnýz, ürün envanterinize eklendi.");
						}
						case 1: {
							if(oyuncuData[playerid][oPara] < 5) return hataMesaji(playerid, "Bu ürünü alabilmek için yeterli paranýz bulunmuyor.");
							ItemEkle(playerid, 13, 1);
							ParaEkle(playerid, -5);
							TezgahParaEkle(sid, 5);
							SunucuMesaji(playerid, "Gazoz adlý ürünü baþarýyla satýn aldýnýz, ürün envanterinize eklendi.");
						}
						case 2: {
							if(oyuncuData[playerid][oPara] < 7) return hataMesaji(playerid, "Bu ürünü alabilmek için yeterli paranýz bulunmuyor.");
							ItemEkle(playerid, 12, 1);
							ParaEkle(playerid, -7);
							TezgahParaEkle(sid, 7);
							SunucuMesaji(playerid, "Kola adlý ürünü baþarýyla satýn aldýnýz, ürün envanterinize eklendi.");
						}
						case 3: {
							if(oyuncuData[playerid][oPara] < 15) return hataMesaji(playerid, "Bu ürünü alabilmek için yeterli paranýz bulunmuyor.");
							ItemEkle(playerid, 4, 1);
							ParaEkle(playerid, -15);
							TezgahParaEkle(sid, 15);
							SunucuMesaji(playerid, "Bira adlý ürünü baþarýyla satýn aldýnýz, ürün envanterinize eklendi.");
						}
					}
				}
				case DIALOG_SEYYAR_KASA:
				{
					if(!response) return false;
					new sid = GetPVarInt(playerid, "seyyarid");
					if(listitem == 0)
					{
						new icerik[200];
						format(icerik, sizeof(icerik), "{FFFFFF}Kasa {23BD00}[%d$]{FFFFFF}\nParayý Çek", SeyyarInfo[sid][sKasa]);
						ShowPlayerDialog(playerid, DIALOG_SEYYAR_KASA, DIALOG_STYLE_LIST, "{F5E600}Tezgah Kasasý", icerik, "Seç", "Iptal");
					}
					else if(listitem == 1)
					{
						if(SeyyarInfo[sid][sKasa] < 1) return hataMesaji(playerid, "Tezgah kasasýnda hiç para bulunmuyor.");
						new query[180];
						if(SeyyarInfo[sid][sTur] == 3)
						{
							ParaEkle(playerid, SeyyarInfo[sid][sKasa] / 2);
						}
						else
						{
							ParaEkle(playerid, SeyyarInfo[sid][sKasa]);
						}
						SeyyarInfo[sid][sKasa] = 0;
						mysql_format(g_SQL, query, sizeof(query), "UPDATE `seyyarlar` SET `kasa` = %d WHERE `id` = %d", SeyyarInfo[sid][sKasa], sid);
						mysql_query(g_SQL, query);
						SunucuMesaji(playerid, "Tezgah kasasýnda bulunan tüm parayý çektiniz.");
					}
				}
				case DIALOG_TNOKTA_ISIM:
				{
					if(!response) return false;
					if(strlen(inputtext) < 1) return ShowPlayerDialog(playerid, DIALOG_TNOKTA_ISIM, DIALOG_STYLE_INPUT, "Teleport Noktasý Ýsim", "Teleport noktanýza geçerli bir isim verin örnek:(Havana Club Teras)", "Yarat", "Iptal");
					new id = Iter_Free(Teleportlar);
					if(id < 0) return hataMesaji(playerid, "Daha fazla teleport noktasý kurulamaz.");
					new Float:pos[3],Float:destpos[3], tnoktavw[2], tnoktaint[2], query[310];
					pos[0] = GetPVarFloat(playerid, "telportX");
					pos[1] = GetPVarFloat(playerid, "telportY");
					pos[2] = GetPVarFloat(playerid, "telportZ");
					destpos[0] = GetPVarFloat(playerid, "telportdestX");
					destpos[1] = GetPVarFloat(playerid, "telportdestY");
					destpos[2] = GetPVarFloat(playerid, "telportdestZ");
					tnoktavw[0] = GetPVarInt(playerid, "telportVW");
					tnoktavw[1] = GetPVarInt(playerid, "telportdestVW");
					tnoktaint[0] = GetPVarInt(playerid, "telportInt");
					tnoktaint[1] = GetPVarInt(playerid, "telportdestInt");
					//TeleportData[id][telPickup] = CreateDynamicPickup(1318, 23, pos[0],pos[1],pos[2], tnoktavw[0], tnoktaint[0]);
					//TeleportData[id][teldestPickup] = CreateDynamicPickup(1318, 23, destpos[0],destpos[1],destpos[2], tnoktavw[1], tnoktaint[1]);
					//format(string, sizeof(string), "{006F81}[TELEPORT NOKTASI]\nID: {FFFFFF}%d\n{006F81}Ýsim: {FFFFFF}%s", id, inputtext);
					//TeleportData[id][telLabel] = CreateDynamic3DTextLabel(string, 0x79BFA3FF, pos[0], pos[1], pos[2], 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, tnoktavw[0], tnoktaint[0]);
					//format(string2, sizeof(string2), "{006F81}[TELEPORT NOKTASI]\nID: {FFFFFF}%d\n{006F81}Ýsim: {FFFFFF}%s", id, inputtext);
					//TeleportData[id][teldestLabel] = CreateDynamic3DTextLabel(string2, 0x79BFA3FF, destpos[0], destpos[1], destpos[2], 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, tnoktavw[1], tnoktaint[1]);
					format(TeleportData[id][telIsim], 64, "%s", inputtext);
					TeleportData[id][telID] = id;
					TeleportData[id][telX] = pos[0];
					TeleportData[id][telY] = pos[1];
					TeleportData[id][telZ] = pos[2];
					TeleportData[id][teldestX] = destpos[0];
					TeleportData[id][teldestY] = destpos[1];
					TeleportData[id][teldestZ] = destpos[2];
					TeleportData[id][telInt] = tnoktaint[0];
					TeleportData[id][telVW] = tnoktavw[0];
					TeleportData[id][teldestInt] = tnoktaint[1];
					TeleportData[id][teldestVW] = tnoktavw[1];

					mysql_format(g_SQL, query, sizeof(query), "INSERT INTO `teleportlar` (`id`,`isim`, `x`, `y`, `z`, `vw`, `interior`, `dx`, `dy`, `dz`, `dvw`, `dinterior`) VALUES('%d', '%e', '%.4f', '%.4f', '%.4f', '%d', '%d', '%.4f', '%.4f', '%.4f', '%d', '%d')", id, inputtext, pos[0], pos[1], pos[2], tnoktavw[0], tnoktaint[0], destpos[0], destpos[1], destpos[2], tnoktavw[1], tnoktaint[1]);
					mysql_query(g_SQL, query);
					DeletePVar(playerid, "telportX");
					DeletePVar(playerid, "telportY");
					DeletePVar(playerid, "telportZ");
					DeletePVar(playerid, "telportdestX");
					DeletePVar(playerid, "telportdestY");
					DeletePVar(playerid, "telportdestZ");
					DeletePVar(playerid, "telportVW");
					DeletePVar(playerid, "telportdestVW");
					DeletePVar(playerid, "telportInt");
					DeletePVar(playerid, "telportdestInt");
					SetPVarInt(playerid, "telportayarladi", 0);
					SetPVarInt(playerid, "telportdestayarladi", 0);
					Iter_Add(Teleportlar, id);
					SunucuMesaji(playerid, "Yeni bir teleport noktasý yarattýn. (ID: %d | Ýsim: %s)", id, inputtext);
				}
				case DIALOG_SEYYAR_SATINAL:
				{
					if(!response) return false;
					new icerik[250];
					format(icerik, sizeof(icerik), "{FFFFFF}Tezgah Modeli: {F5E600}%s{FFFFFF}\nFiyat: {23BD00}%s{FFFFFF}\nBu tezgahý satýn almak istiyor musunuz?{FFFFFF}", TezgahTuru(listitem), NumaraFormati(seyyarveri[listitem][1]));
					ShowPlayerDialog(playerid, DIALOG_SEYYAR_SATINAL_ONAY, DIALOG_STYLE_MSGBOX, "{F5E600}Tezgah Satýn Alma", icerik, "Evet","Hayýr");
					SetPVarInt(playerid, "SeyyarListitem", listitem);
				}
				case DIALOG_SEYYAR_SATINAL_ONAY:
				{
					if(!response) return false;
					new seyyarid = GetPVarInt(playerid, "SeyyarListitem");
					if(oyuncuData[playerid][oPara] < seyyarveri[seyyarid][1]) return hataMesaji(playerid, "Bu tezgahý alabilmek için yeterli miktarda paranýz bulunmuyor.");
					new id = Iter_Free(Seyyar);
					if(id < 0) return hataMesaji(playerid, "Daha fazla tezgah kurulamaz.");
					new Float:pos[3],string[180], query[250];
					GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
					GetXYInFrontOfPlayer(playerid, pos[0], pos[1], 0.5);
					SeyyarInfo[id][sObje] = CreateDynamicObject(seyyarveri[seyyarid][0],pos[0],pos[1] + 3.5,pos[2],0.0,0.0,0.0,GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid), -1,50.0);
					format(SeyyarInfo[id][sSahip], MAX_PLAYER_NAME, "%s", oyuncuData[playerid][oIsim]);
					SeyyarInfo[id][sID] = id;
					SeyyarInfo[id][sX] = pos[0];
					SeyyarInfo[id][sY] = pos[1];
					SeyyarInfo[id][sZ] = pos[2];
					SeyyarInfo[id][sInt] = GetPlayerInterior(playerid);
					SeyyarInfo[id][sVw] = GetPlayerVirtualWorld(playerid);
					SeyyarInfo[id][sKasa] = 0;
					SeyyarInfo[id][sTur] = seyyarid;
					ParaEkle(playerid, -(seyyarveri[seyyarid][1]));

					mysql_format(g_SQL, query, sizeof(query), "INSERT INTO `seyyarlar` (`id`,`sahip`, `x`, `y`, `z`, `vw`, `interior`, `tur`) VALUES('%d', '%e', '%f', '%f', '%f', '%d', '%d', '%d')", id, SeyyarInfo[id][sSahip], SeyyarInfo[id][sX], SeyyarInfo[id][sY], SeyyarInfo[id][sZ], SeyyarInfo[id][sVw], SeyyarInfo[id][sInt], SeyyarInfo[id][sTur]);
					mysql_query(g_SQL, query);
					format(string, sizeof(string), "{C24748}[TEZGAH]\nID: {FFFFFF}%d\n{C24748}Tür: {FFFFFF}%s\n{C24748}Sahip: {FFFFFF}%s\n'/satinal'", id, TezgahTuru(seyyarid), oyuncuData[playerid][oIsim]);
					SeyyarInfo[id][sLabel] = CreateDynamic3DTextLabel(string, 0x79BFA3FF, pos[0], pos[1], (pos[2] - 0.50), 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);
					SetPVarInt(playerid, "seyyarid", id);
					SetPVarInt(playerid, "seyyarduzenliyor", 1);
					EditDynamicObject(playerid, SeyyarInfo[id][sObje]);
					Iter_Add(Seyyar, id);
					SunucuMesaji(playerid, "Tezgahýnýzý kurdunuz, þimdi pozisyonunu düzenleyebilirsiniz.");
				}
				case DIALOG_TEKNE_SATINAL:
				{
					if(!response) return false;
					new icerik[250];
					format(icerik, sizeof(icerik), "{FFFFFF}Tekne Modeli: {F5E600}%s{FFFFFF}\nFiyat: {23BD00}%s{FFFFFF}\nBu tekneyi satýn almak istiyor musunuz?{FFFFFF}", AracModel(tekneveri[listitem][0]), NumaraFormati(tekneveri[listitem][1]));
					ShowPlayerDialog(playerid, DIALOG_TEKNE_SATINAL_ONAY, DIALOG_STYLE_MSGBOX, "{F5E600}Tekne Satýn Alma", icerik, "Evet","Hayýr");
					SetPVarInt(playerid, "TekneListitem", listitem);
				}
				case DIALOG_TEKNE_SATINAL_ONAY:
				{
					if(!response) return false;
					new teknelist = GetPVarInt(playerid, "TekneListitem"),
					renk1 = random(125),
					renk2 = random(125),
					galeriarac = tekneveri[teknelist][0],
					galeriaracfiyat = tekneveri[teknelist][1];
					if(oyuncuData[playerid][oPara] < galeriaracfiyat) return hataMesaji(playerid, "Bu aracý alabilmek için yeterli miktarda paranýz bulunmuyor.");
					Arac_Yarat(oyuncuData[playerid][oID], galeriarac, 198.7666,-1931.9899,-0.3283,269.8962, renk1, renk2, galeriaracfiyat);

					ParaEkle(playerid, -galeriaracfiyat);
					SunucuMesaji(playerid, "%s model tekneyi %s fiyatýna satýn aldýn, tekneni iskelede bulabilirsin.", AracModel(galeriarac), NumaraFormati(galeriaracfiyat));
					Log_Kaydet("loglar/satinalma.txt", "[%s] %s, %s model araci satin aldi. Odedigi Para: %s", Tarih(), OyuncuIsim(playerid), AracModel(galeriarac), NumaraFormati(galeriaracfiyat));
					DeletePVar(playerid,"TekneListitem");
					new str[150];
					format(str, sizeof(str), "```[%s] %s, %s model araci satin aldi. Odedigi Para: %s```", Tarih(), OyuncuIsim(playerid), AracModel(galeriarac), NumaraFormati(galeriaracfiyat));
					DCC_SendChannelMessage(araclog, str);
				}
					case DIALOG_TEKIPMAN_SATINAL:
				{
					if(!response) return false;
					new icerik[250];
					format(icerik, sizeof(icerik), "{FFFFFF}Ekipman Modeli: {F5E600}%s{FFFFFF}\nFiyat: {23BD00}%s{FFFFFF}\nBu tarým ekipmanýný satýn almak istiyor musunuz?{FFFFFF}", AracModel(tekipmanveri[listitem][0]), NumaraFormati(tekipmanveri[listitem][1]));
					ShowPlayerDialog(playerid, DIALOG_TEKIPMAN_SATINAL_ONAY, DIALOG_STYLE_MSGBOX, "{F5E600}Tarým Ekipman Satýn Alma", icerik, "Evet","Hayýr");
					SetPVarInt(playerid, "TekipmanListitem", listitem);
				}
				case DIALOG_TEKIPMAN_SATINAL_ONAY:
				{
					if(!response) return false;
					new teknelist = GetPVarInt(playerid, "TekipmanListitem"),
					renk1 = random(125),
					renk2 = random(125),
					galeriarac = tekipmanveri[teknelist][0],
					galeriaracfiyat = tekipmanveri[teknelist][1];
					if(oyuncuData[playerid][oPara] < galeriaracfiyat) return hataMesaji(playerid, "Bu aracý alabilmek için yeterli miktarda paranýz bulunmuyor.");
					Arac_Yarat(oyuncuData[playerid][oID], galeriarac, -377.3776,-1415.7684,25.8495,357.3842, renk1, renk2, galeriaracfiyat);

					ParaEkle(playerid, -galeriaracfiyat);
					SunucuMesaji(playerid, "%s model tarým ekipmanýný %s fiyatýna satýn aldýn, ekipman spawn edildi.", AracModel(galeriarac), NumaraFormati(galeriaracfiyat));
					Log_Kaydet("loglar/satinalma.txt", "[%s] %s, %s model araci satin aldi. Odedigi Para: %s", Tarih(), OyuncuIsim(playerid), AracModel(galeriarac), NumaraFormati(galeriaracfiyat));
					DeletePVar(playerid,"TekipmanListitem");
					new str[150];
					format(str, sizeof(str), "```[%s] %s, %s model araci satin aldi. Odedigi Para: %s```", Tarih(), OyuncuIsim(playerid), AracModel(galeriarac), NumaraFormati(galeriaracfiyat));
					DCC_SendChannelMessage(araclog, str);
				}
				case DIALOG_444_SECIM:
				{
					if(!response) return false;
					foreach(new i : Player)
					{
						if(oyuncuData[i][oMeslek] == 4)
						{
							if(oyuncuData[i][oTaksiIsbasi] == true)
							{
								SCM_Ex(i, RENK_OZELSARI, "- - - - - Vice Taksiciler Kooperatifi - - - - -");
								SCM_Ex(i, 0xdeb514FF, " Bir müþteri taksi çaðýrýyor!");
								SCM_Ex(i, 0xdeb514FF, " Mesaj: {FFFFFF}%s", inputtext);
								SCM_Ex(i, 0xdeb514FF, " Müþteri Numarasý: %d | Müþteri: %s (%d)", oyuncuData[playerid][oTelefonNumarasi], OyuncuIsim(playerid), playerid);
								SCM_Ex(i, RENK_OZELSARI, "- - - - - - - - - - - - - - - - - - - - - - - -");
								SCM_Ex(i, 0x1ddbf1FF, " Taksi çaðrýsýný kabul etmek için \"/musterikabul %d\".", playerid);
							}
						}
					}
					SCM_Ex(playerid, 0x4dcf84FF, "* Ýþ baþýnda bulunan taksicilere çaðrýnýz ve konumunuz iletildi. En kýsa sürede size ulaþacaðýz!");
					oyuncuData[playerid][oTaksiCagrisi] = true;
					format(oyuncuData[playerid][oTaksiCagriKonum], 128, inputtext);
				}
				case OTEL_ODA_SURE_SECIM:
				{
					if(response)
					{
						switch(listitem)
						{
							case 0: oyuncuData[playerid][oOtelSaat] = 1;
							case 1: oyuncuData[playerid][oOtelSaat] = 2;
							case 2: oyuncuData[playerid][oOtelSaat] = 3;
							case 3: oyuncuData[playerid][oOtelSaat] = 4;
							case 4: oyuncuData[playerid][oOtelSaat] = 5;
							case 5: oyuncuData[playerid][oOtelSaat] = 6;
							case 6: oyuncuData[playerid][oOtelSaat] = 7;
							case 7: oyuncuData[playerid][oOtelSaat] = 8;
						}
						new str[1024];
						strcat(str, "{FFFFFF}Kapý NO\t{FFFFFF}Fiyat\t{FFFFFF}Durum\n");
						new resepsiyon = Resepsiyon_Bul(playerid);
						foreach(new i : OtelOdalari)
						{
							if(otelOda[i][oda_Resepsiyon] == resepsiyon)
							{
								if(otelOda[i][oda_Fiyat] != -1)
								{
									format(str, sizeof(str), "%s%03d.\t%s\t%s\n", str, i, NumaraFormati(otelOda[i][oda_Fiyat]*oyuncuData[playerid][oOtelSaat]), OtelOdasiKiralamaDurumu(i));
								}
							}
						}
						ShowPlayerDialog(playerid, OTEL_ODA_KIRALA, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Resepsiyon: {CDCDCD}Kiralanacak odayý seçiniz.", str, "Kirala", "Kapat");
					}
				}
				case OTEL_ODA_KIRALA:
				{
					if(!response) return false;
					OdaKontrol(playerid, strval(inputtext));
				}
				case OTEL_ODA_KIRALA_X:
				{
					if(!response) return false;
					new odano = GetPVarInt(playerid, "otel_OdaNO"), fiyat = GetPVarInt(playerid, "otel_Fiyat");
					if(oyuncuData[playerid][oPara] < fiyat) return hataMesaji(playerid, "Bu odayý kiralayabilecek kadar paranýz bulunmuyor.");
					if(OtelOdasi_KiralamaKontrol(playerid) != -1) return hataMesaji(playerid, "Bu resepsiyonda kiralamýþ olduðunuz bir oda mevcut, daha fazla kiralayamazsýnýz.");
					if(otelOda[odano][oda_Sure] > 0)
					{
						if(strcmp(otelOda[odano][oda_Sahip], OyuncuIsim(playerid), true))
						{
							hataMesaji(playerid, "Bu oda baþkasý tarafýndan kiralanmýþ.");
							return 1;
						}
					}
					ParaEkle(playerid, -fiyat);
					resepsData[otelOda[odano][oda_Resepsiyon]][rspKasa] += fiyat;
					format(otelOda[odano][oda_Sahip], MAX_PLAYER_NAME, OyuncuIsim(playerid));
					otelOda[odano][oda_Sure] = OTEL_KIRA_SURE * oyuncuData[playerid][oOtelSaat];
					Otel_Kaydet(odano);
					OtelOda_TextUP();
					SunucuMesaji(playerid, "Oda NO %03d. baþarýyla kiralandý, odanýzý artýk kullanabilirsiniz.", odano);
				}
				case RESEPSIYON_DUZENLE:
				{
					if(!response) return false;
					switch(listitem)
					{
						case 2:OtelKasa_CekYatir(playerid);
						default:cmd(playerid, 0, "resepsiyon");
					}
				}
				case RESEPSIYON_KASA:
				{
					if(!response) return cmd(playerid, 0, "resepsiyon");
					new str[512], resepsiyon = Resepsiyon_Bul(playerid);
					switch(listitem)
					{
						case 0:
						{
							format(str, sizeof(str), "{dddddd}Kasada {108453}%s{dddddd} miktarýnda para bulunmaktadýr. Çekilecek tutarý giriniz:", NumaraFormati(resepsData[resepsiyon][rspKasa]));
							ShowPlayerDialog(playerid, RESEPSIYON_KASA_CEK, DIALOG_STYLE_INPUT, "{ffffff}Resepsiyon Kasasý: {cdcdcd}Para Çek", str, "Çek", "{b5251c}Iptal");
						}
						case 1:
						{
							format(str, sizeof(str), "{dddddd}Kasada {108453}%s{dddddd} miktarýnda para bulunmaktadýr. Yatýrýlacak tutarý giriniz:", NumaraFormati(resepsData[resepsiyon][rspKasa]));
							ShowPlayerDialog(playerid, RESEPSIYON_KASA_YATIR, DIALOG_STYLE_INPUT, "{ffffff}Resepsiyon Kasasý: {cdcdcd}Para Yatýr", str, "Yatýr", "{b5251c}Iptal");
						}
					}
				}
				case RESEPSIYON_KASA_CEK:
				{
					if(!response) return cmd(playerid, 0, "resepsiyon");
					new resepsiyon = Resepsiyon_Bul(playerid);
	        //if(resepsData[resepsiyon][rspKasa] <= 0) return hataMesaji(playerid, "Kasada çekilebilecek hiç para yok.");
					if(strval(inputtext) <= 0) return hataMesaji(playerid, "Girilen miktar hatalý, tekrar deneyiniz.");
					if(strval(inputtext) > resepsData[resepsiyon][rspKasa]) return hataMesaji(playerid, "Girilen miktar kasada bulunmuyor.");

					resepsData[resepsiyon][rspKasa]-=strval(inputtext);
					ParaEkle(playerid, strval(inputtext));
				}
				case RESEPSIYON_KASA_YATIR:
				{
					if(!response) return cmd(playerid, 0, "resepsiyon");
					new resepsiyon = Resepsiyon_Bul(playerid);
	        //if(resepsData[resepsiyon][rspKasa] <= 0) return hataMesaji(playerid, "Kasada çekilebilecek hiç para yok.");
					if(strval(inputtext) <= 0) return hataMesaji(playerid, "Girilen miktar hatalý, tekrar deneyiniz.");
					if(strval(inputtext) > oyuncuData[playerid][oPara]) return hataMesaji(playerid, "Girilen miktar üzerinizde bulunmuyor.");

					resepsData[resepsiyon][rspKasa]+=strval(inputtext);
					ParaEkle(playerid, -strval(inputtext));
				}
			}
			switch(dialogid)
			{
				case DIALOG_ASANSOR_KAT:
				{
					switch(listitem)
					{
						case 0 :
						{
							if(KatKontrol(playerid, AsansorKumanda(playerid)) == listitem+1) return hataMesaji(playerid, "Zaten bu kattasýnýz!");
						}
						case 1 :
						{
							if(KatKontrol(playerid, AsansorKumanda(playerid)) == listitem+1) return hataMesaji(playerid, "Zaten bu kattasýnýz!");
						}
						case 2 :
						{
							if(KatKontrol(playerid, AsansorKumanda(playerid)) == listitem+1) return hataMesaji(playerid, "Zaten bu kattasýnýz!");
						}
					}
				}
				
					case DIALOG_ARAC_EKINLER:
				{
				if(!response) { return DeletePVar(playerid, "ekinaracid"); }
				new query[90], Cache:VeriCek, rows , aracid;
				aracid = GetPVarInt(playerid, "ekinaracid");
				mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `aracekinler` WHERE `aracid` = '%d'", AracBilgi[aracid][aracID]);
				VeriCek = mysql_query(g_SQL, query);
				rows = cache_num_rows();
				DeletePVar(playerid, "ekinaracid");
				if(rows)
				{
				new urun,sqlid, msg[95];
				for(new i = 0; i < rows; i++ ) {
				if(i == listitem) {
				urun = vericek_int(i, "ekintur");
				sqlid = vericek_int(i, "SQLID");
				cache_delete(VeriCek);
				oyuncuData[playerid][oEkin] = urun;
				ApplyAnimation(playerid, "CARRY", "liftup05", 4.1, 0, 1, 1, 0, 0, 1);
				SetPlayerAttachedObject(playerid, 6, 2901, 6, 0.116999, 0.076999, -0.251000, -3.499999, 76.900024, -20.800006);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
				format(msg, sizeof(msg), "** %s aracýn bagajýndan %s adlý ekini çýkarýr.", OyuncuIsim(playerid), ekinlerveri[urun][ekinisim]);
				SetPlayerChatBubble(playerid, msg, RENK_PEMBE, 12.0, 10000);
				SendClientMessage(playerid, RENK_PEMBE, msg);
				strins(msg, "> ", 3);
				mysql_format(g_SQL, query, sizeof(query), "DELETE FROM `aracekinler` WHERE `SQLID` = '%d'", sqlid);
				mysql_query(g_SQL, query);
				break;
				}
				}
				}
				}

				case DIALOG_SELAMLAS:
				{
					if(!response) { return 1; }
					if(GetPlayerState(playerid) != 1) return 1;
					if(YakinlikKontrol(playerid, GetPVarInt(playerid,"hsID"), 1.5)) {

						new
						Float: PosFloats[3],
						shakeOffer = GetPVarInt(playerid,"hsID");

						if(!IsPlayerConnected(shakeOffer)) return 1;

						PlayerFacePlayer(playerid, shakeOffer);
						GetPlayerPos(shakeOffer, PosFloats[0], PosFloats[1], PosFloats[2]);
						GetXYInFrontOfPlayer(shakeOffer, PosFloats[0], PosFloats[1], 0.5);
						SetPlayerPos(playerid, PosFloats[0], PosFloats[1], PosFloats[2]);
						ApplyAnimation(shakeOffer,"GANGS","hndshkfa_swt",4.0,0,0,0,0,0);
						ApplyAnimation(playerid,"GANGS","hndshkfa_swt",4.0,0,0,0,0,0);
						DeletePVar(playerid,"hsID");
					}
					else
					{
						hataMesaji(playerid,"Kiþiye yakýn olmalýsýnýz.");
					}
				}
				case DIALOG_GALERI_RENK1:
				{
					if(response)
					{
						if(strval(inputtext) < 0 || strval(inputtext) > 255)
							return hataMesaji(playerid, "Geçersiz bir renk girdiniz, renk ID'leri 0 ilâ 255 arasýndadýr."),ShowPlayerDialog(playerid, DIALOG_GALERI_RENK1, DIALOG_STYLE_INPUT, "Araç Rengi", "Aracýnýzýn ikinci renk kodunu girin:", "Tamam", "Iptal");
						SetPVarInt(playerid, "agRenk1", strval(inputtext));
						ShowPlayerDialog(playerid, DIALOG_GALERI_RENK2, DIALOG_STYLE_INPUT, "Araç Rengi", "Aracýnýzýn 2. renk kodunu girin:", "Tamam", "Iptal");
					}
					else
					{
						TogglePlayerControllable(playerid, true);
						SetPlayerVirtualWorld(playerid, 0);
					}
				}

				case DIALOG_GALERI_RENK2:
				{
					if(response)
					{
						if(strval(inputtext) < 0 || strval(inputtext) > 255)
							return hataMesaji(playerid, "Geçersiz bir renk girdiniz, renk ID'leri 0 ilâ 255 arasýndadýr."),ShowPlayerDialog(playerid, DIALOG_GALERI_RENK2, DIALOG_STYLE_INPUT, "Araç Rengi", "Aracýnýzýn ikinci renk kodunu girin:", "Tamam", "Iptal");
						new id = Iter_Free(Araclar);
						if(id < 0) return hataMesaji(playerid, "Üzgünüm, sunucunun araç slotlarý þu an dolu. Lütfen daha sonra tekrar dene.");
						new galeriarac = GetPVarInt(playerid, "SectigiArac"), galeriaracfiyat = GetPVarInt(playerid, "AracinUcret");
						if(oyuncuData[playerid][oPara] < galeriaracfiyat) return hataMesaji(playerid, "Bu aracý alabilmek için yeterli miktarda paranýz bulunmuyor."), SetPlayerVirtualWorld(playerid, 0),TogglePlayerControllable(playerid, true);
						if(galeriarac == 424 || galeriarac == 434 || galeriarac == 457 || galeriarac == 460 || galeriarac == 495 || galeriarac == 522 || galeriarac == 409 || galeriarac == 441) {
							if(oyuncuData[playerid][oVIP] < 1) return SunucuMesaji(playerid, "Bu araçlar VIP üyelere özeldir."), SetPlayerVirtualWorld(playerid, 0),TogglePlayerControllable(playerid, true);
						}
						new renk1 = GetPVarInt(playerid, "agRenk1");
						Arac_Yarat(oyuncuData[playerid][oID], galeriarac, 951.2847,-1745.4594,13.5469,88.0971, renk1, strval(inputtext), galeriaracfiyat);

						ParaEkle(playerid, -galeriaracfiyat);
						SunucuMesaji(playerid, "%s model aracý %s fiyatýna satýn aldýn, aracýn dýþarýdaki park alanýnda.", AracModel(galeriarac), NumaraFormati(galeriaracfiyat));
						Log_Kaydet("loglar/satinalma.txt", "[%s] %s, %s model araci satin aldi. Odedigi Para: %s", Tarih(), OyuncuIsim(playerid), AracModel(galeriarac), NumaraFormati(galeriaracfiyat));
						SetPlayerPos(playerid, 951.8502,-1705.6200,13.6137);
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
						SetCameraBehindPlayer(playerid);
						UnfreezePlayer(playerid);
						new str[150];
						format(str, sizeof(str), "```[%s] %s, %s model araci satin aldi. Odedigi Para: %s```", Tarih(), OyuncuIsim(playerid), AracModel(galeriarac), NumaraFormati(galeriaracfiyat));
						DCC_SendChannelMessage(araclog, str);
						return DeletePVar(playerid, "agRenk1"),DeletePVar(playerid, "SectigiArac"),DeletePVar(playerid, "AracinUcret");
					}
					else
					{
						TogglePlayerControllable(playerid, true);
						SetPlayerVirtualWorld(playerid, 0);
					}
				}

				case DIALOG_GALERI_ACIKLAMA:
				{
					if(response)
					{
						SetTimerEx("imlecgetir", 750, false, "d", playerid);
					}
					else { SetTimerEx("imlecgetir", 750, false, "d", playerid); }
				}

				case DIALOG_ENVANTER_ESYA_SAT:
				{
					if(response)
					{
						static oid,slot,ucret;
						oid = GetPVarInt(playerid, "envoid"), slot = GetPVarInt(playerid, "envslot"), ucret = GetPVarInt(playerid, "envucret");
						if(oyuncuData[playerid][oPara] < ucret) return hataMesaji(playerid, "Üzerinizde yeterli miktarda para bulunmuyor.");
						ItemEkle(playerid, EnvanterData[oid][i_tip][slot], EnvanterData[oid][i_var][slot]);
						ItemSil(oid, slot);
						SunucuMesaji(oid, "Eþya satma isteðiniz kabul edildi ve eþyanýz karþýlýðýnda %d$ aldýnýz.", ucret);
						SunucuMesaji(playerid, "%d$ karþýlýðýnda eþyayý baþarýyla satýn aldýnýz.", ucret);
						ParaEkle(oid, ucret);
						ParaEkle(playerid, -ucret);
					}
					else
					{
						static oid;
						oid = GetPVarInt(playerid, "envoid");
						SunucuMesaji(oid, "Eþya satma isteðinizi karþý taraf geri çevirdi.");
						SunucuMesaji(playerid, "Eþya satma/satýn alma iþlemini sonlandýrdýnýz.");
					}
				}
				case DIALOG_ENVANTER_SIGARA:
				{
					if(response)
					{
						new sayfa = GetPVarInt(playerid, "sayfa");
						switch(listitem)
						{
							case 0 :
							{
								if(ItemVarMi(playerid,3) < 1) return hataMesaji(playerid, "Sigara, puro vb. ürünleri yakabilmek için çakmaða ihtiyacýnýz var.");
								new query[80];
								mysql_format(g_SQL, query, sizeof(query), "** %s çakmaðý ile sigarasýný yakar.", OyuncuIsim(playerid));
								ProxDetector(12, playerid, query, RENK_PEMBE);
								SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
								SunucuMesaji(playerid, "Sol týk kullanarak sigaradan dumanlanabilirsin.");
								ItemMiktarAzalt(playerid, 1, 1);
							}
							case 1 :
							{
								EvEsyaBirak(playerid, sayfa);
							}
							case 2 :
							{
								ItemSil(playerid, sayfa);
								SunucuMesaji(playerid, "Eþyanýzý baþarýyla sildiniz.");
							}
						}
					}
				}
				case DIALOG_ENVANTER_MASKE:
				{
					if(response)
					{
						new sayfa = GetPVarInt(playerid, "sayfa");
						switch(listitem)
						{
							case 0 :
							{
								if(oyuncuData[playerid][oKarMaskedurum] == 0)
								{
									oyuncuData[playerid][oKarMaskedurum] = 1;
									SunucuMesaji(playerid,"Kar maskenizi taktýnýz.");
									foreach(new i : Player)
									{
										ShowPlayerNameTagForPlayer(i, playerid, false);
									}
									new test = random(99999);
									format(oyuncuData[playerid][oGazMaskeisim],64,"KarMaskesi_%d",test);
								}
								else
								{
									oyuncuData[playerid][oKarMaskedurum] = 0;
									SunucuMesaji(playerid,"Kar maskenizi çýkardýnýz.");
									foreach(new i : Player)
									{
										ShowPlayerNameTagForPlayer(i, playerid, true);
									}
									format(oyuncuData[playerid][oKarMaskeisim],64,"Yok");
								}
							}
							case 1 :
							{
								EvEsyaBirak(playerid, sayfa);
							}
							case 2 :
							{
								ItemSil(playerid, sayfa);
								SunucuMesaji(playerid, "Eþyanýzý baþarýyla sildiniz.");
							}
						}
					}
				}
				case DIALOG_ENVANTER_CRAFT:
				{
					if(response)
					{
						new sayfa = GetPVarInt(playerid, "sayfa");
						switch(listitem)
						{
							case 0 :
							{
								if(!EnvanterData[playerid][i_craft][sayfa])
								{
									SunucuMesaji(playerid, "%s adlý ürünü craft listenize eklediniz. (/craft)", ItemArray[ EnvanterData[playerid][i_tip][sayfa] - 1 ][iisim]);
									EnvanterData[playerid][i_craft][sayfa] = true;
								}
								else
								{
									SunucuMesaji(playerid, "%s adlý ürünü craft listesinden çýkardýnýz.", ItemArray[ EnvanterData[playerid][i_tip][sayfa] - 1 ][iisim]);
									EnvanterData[playerid][i_craft][sayfa] = false;
								}
							}
							case 1 :
							{
								ItemSil(playerid, sayfa);
								SunucuMesaji(playerid, "Eþyanýzý baþarýyla sildiniz.");
							}
						}
					}
				}
				case DIALOG_UYUS_KULLAN:
				{
					if(response)
					{
						new sayfa = GetPVarInt(playerid, "sayfa");
						switch(listitem)
						{
							case 0:
							{
								new mestring[128];
								format(mestring, sizeof mestring, "%s türündeki uyuþturucusundan tüketir.", ItemArray[ EnvanterData[playerid][i_tip][sayfa] - 1 ][iisim]);
								cmd(playerid, 1, mestring);

								UyusturucuKullan(playerid, ItemArray[ EnvanterData[playerid][i_tip][sayfa] - 1 ][iid]);

								new bagimlilik, uyusturucuad[60];
								format(uyusturucuad, sizeof(uyusturucuad), "%s", ItemArray[ EnvanterData[playerid][i_tip][sayfa] - 1 ][iisim]);

								if(!strcmp(uyusturucuad, "Marijuana"))
								{
									bagimlilik = 2;
								}
								else if(!strcmp(uyusturucuad, "Kokain"))
								{
									bagimlilik = 5;
								}
								else if(!strcmp(uyusturucuad, "Kristal Meth"))
								{
									bagimlilik = 5;
								}
								else if(!strcmp(uyusturucuad, "Eroin"))
								{
									bagimlilik = 5;
								}
								else if(!strcmp(uyusturucuad, "Ekstazi"))
								{
									bagimlilik = 3;
								}
								else if(!strcmp(uyusturucuad, "LSD"))
								{
									bagimlilik = 3;
								}
								else if(!strcmp(uyusturucuad, "Amfetamin"))
								{
									bagimlilik = 3;
								}
								else if(!strcmp(uyusturucuad, "PCP"))
								{
									bagimlilik = 2;
								}
								else if(!strcmp(uyusturucuad, "Ketamina"))
								{
									bagimlilik = 2;
								}
								else if(!strcmp(uyusturucuad, "Meth"))
								{
									bagimlilik = 5;
								}
								else if(!strcmp(uyusturucuad, "Crack"))
								{
									bagimlilik = 3;
								}
								else if(!strcmp(uyusturucuad, "Purple Drank"))
								{
									bagimlilik = 3;
								}
								SunucuMesaji(playerid, "Baðýmlýlýk durumunda deðiþiklik var. (ESKÝ: %d, EKLENEN: %d, YENÝ: %d)", oyuncuData[playerid][oBagimlilik], bagimlilik, oyuncuData[playerid][oBagimlilik] + bagimlilik);
								oyuncuData[playerid][oBagimlilik] += bagimlilik;
								oyuncuData[playerid][oBagimlilikEtki] = 6;
								oyuncuData[playerid][oBagimlilikTimer] = -1;

								ItemSlotMiktarAzalt(playerid, sayfa, 1);
							}
							case 1:
							{
								EvEsyaBirak(playerid, sayfa);
							}
							case 2:
							{
								ItemSil(playerid, sayfa);
								SunucuMesaji(playerid, "Uyuþturucu baþarýyla yok edildi.");
							}
						}
					}
				}
					case DIALOG_MARI_KULLAN:
				{
					if(response)
					{
						new sayfa = GetPVarInt(playerid, "sayfa");
						switch(listitem)
						{
							case 0:
							{
								new mestring[128];
								format(mestring, sizeof mestring, "%s türündeki uyuþturucusundan tüketir.", ItemArray[ EnvanterData[playerid][i_tip][sayfa] - 1 ][iisim]);
								cmd(playerid, 1, mestring);
								UyusturucuKullan(playerid, ItemArray[ EnvanterData[playerid][i_tip][sayfa] - 1 ][iid]);
								ItemSlotMiktarAzalt(playerid, sayfa, 1);
							}
							case 1:
							{
								hataMesaji(playerid, "Devredýþý.");
								//BirakilanItemYarat(playerid, sayfa);
							}
							case 2:
							{
								ItemSil(playerid, sayfa);
								SunucuMesaji(playerid, "Uyuþturucu baþarýyla yok edildi.");
							}
						}
					}
				}
					case DIALOG_KOVAN_SORGULA:
				{
					if(response)
					{
						new sayfa = GetPVarInt(playerid, "sayfa");
						switch(listitem)
						{
							case 0:
							{
								if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return hataMesaji(playerid, "Polis memuru deðilsin.");
								if(!IsPlayerInRangeOfPoint(playerid, 2.0, 2024.5134,2963.4453,5284.8750)) return hataMesaji(playerid, "Adli týp noktasýnda deðilsiniz.");
								new query[256], Cache:VeriCek, sonuc = 0, isims[64],silahid,oyuncuid,string[250];
								mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `player_weapons` WHERE `weapon_id` = '%d'", EnvanterData[playerid][i_var][sayfa]);
								VeriCek = mysql_query(g_SQL, query);
								if(cache_num_rows())
								{
								silahid = vericek_int(0, "weapon_gameid");
								oyuncuid = vericek_int(0, "weapon_userid");
								sonuc = 1;
								}	
								cache_delete(VeriCek);
								if(sonuc)
								{
								mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `oyuncular` WHERE `ID` = '%d'", oyuncuid);
								VeriCek = mysql_query(g_SQL, query);	
								format(isims, 64, "%s", vericek_varchar(0, "isim"));
								format(string, sizeof(string), "{FFFFFF}Kovan Sorgu Sonuçlarý\nSilah Modeli: %s\nSilah Sahibi: {F5E600}%s{FFFFFF}", SilahIsim(silahid),isims);
								ShowPlayerDialog(playerid, BOS_MESAJ, DIALOG_STYLE_MSGBOX, "Kovan Sorgu Sonuçlarý", string, "Tamam","");
								cache_delete(VeriCek);
								}
							}
							case 1:
							{
								ItemSil(playerid, sayfa);
								SunucuMesaji(playerid, "Mermi kovaný baþarýyla yok edildi.");
							}
						}
					}
				}
				case DIALOG_KOKB_KULLAN:
				{
					if(response)
					{
						new sayfa = GetPVarInt(playerid, "sayfa");
						switch(listitem)
						{
							case 0:
							{
								if(MasaBul(playerid) == -1) return hataMesaji(playerid, "Herhangi bir masanýn yakýnýnda deðilsiniz.");
								if(EnvanterData[playerid][i_var][sayfa] < 10) return hataMesaji(playerid, "Dönüþtürme yapabilmek için en az 10 gram koko bitkisi demeti olmalýdýr.");
								if(ItemMiktarKontrol(playerid, 113) < 1) return hataMesaji(playerid, "Dönüþtürme yapabilmek için kimyasal sodaya ihtiyacýnýz var.");
								ItemSlotMiktarAzalt(playerid, sayfa, 10);
								ItemEkle(playerid, 35, 1);
								new query[96];
								mysql_format(g_SQL, query, sizeof(query), "** %s Koko bitkisi dolu kaba kimyasal soda döker ve karýþtýrýr.", OyuncuIsim(playerid));
								SetPlayerChatBubble(playerid, query, RENK_PEMBE, 12.0, 10000);
								SendClientMessage(playerid, RENK_PEMBE, query);
								SunucuMesaji(playerid, "10 gram Koko bitkisini 1 gram 'Kokain' maddesine baþarýyla dönüþtürdünüz.");
 							}
							 case 1:
							{
								ItemSil(playerid, sayfa);
								SunucuMesaji(playerid, "Eþya baþarýyla yok edildi.");
							}
						}
					}
				}
				case DIALOG_TRAPHOUSE:
				{
					if(response)
					{
						switch(listitem)
						{
							case 0:
							{
							if(oyuncuData[playerid][oPara] < 300) return hataMesaji(playerid, "Yeterli miktarda paranýz bulunmuyor.");
							ItemEkle(playerid, 112, 1);
							ParaEkle(playerid, -300);
							SunucuMesaji(playerid, "300$ karþýlýðýnda Marijuana tohumu satýn aldýnýz.");
							}
							case 1:
							{
							if(oyuncuData[playerid][oPara] < 350) return hataMesaji(playerid, "Yeterli miktarda paranýz bulunmuyor.");
							ItemEkle(playerid, 115, 1);
							ParaEkle(playerid, -350);
							SunucuMesaji(playerid, "350$ karþýlýðýnda Koko bitkisi tohumu satýn aldýnýz.");
							}
							case 2:
							{
							if(oyuncuData[playerid][oPara] < 200) return hataMesaji(playerid, "Yeterli miktarda paranýz bulunmuyor.");
							ItemEkle(playerid, 113, 1);
							ParaEkle(playerid, -200);
							SunucuMesaji(playerid, "200$ karþýlýðýnda kimyasal soda satýn aldýnýz.");
							}
							case 3:
							{
							if(oyuncuData[playerid][oPara] < 100) return hataMesaji(playerid, "Yeterli miktarda paranýz bulunmuyor.");
							if(ItemMiktarKontrol(playerid, 114) > 0) return hataMesaji(playerid, "Üzerinizdeki uyuþturucu paketinin tamamýný satmadan yeni paket alamazsýnýz.");
							switch(oyuncuData[playerid][oVIP])
							{
							case 0: {
							ItemEkle(playerid, 114, 5);
							SunucuMesaji(playerid, "100$ karþýlýðýnda 5 adet uyuþturucu paketi satýn aldýnýz.");
							}
							case 1: {
							ItemEkle(playerid, 114, 8);
							SunucuMesaji(playerid, "100$ karþýlýðýnda 8 adet uyuþturucu paketi satýn aldýnýz.");
							}
							}
							ParaEkle(playerid, -100);
							}
						}	
					}
				}
				case DIALOG_TOHUM_KULLAN:
				{
					if(response)
					{
						new sayfa = GetPVarInt(playerid, "sayfa");
						switch(listitem)
						{
							case 0:
							{
							if(oyuncuData[playerid][oGiris] == false) return hataMesaji(playerid, "Giriþ yapmadan bu komutu kullanamazsýn.");
							if(KomutUygunlukKontrol(playerid) == 0) return UygunDegilMesaj(playerid);
							if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu komut araç içerisinde kullanýlamaz.");
							static id;
							if((id = Oyuncu_Isyerinde(playerid)) != -1 || Oyuncu_Evde(playerid) != -1) {
							if(id != -1 && IsyeriBilgi[id][isyeriTur] != 16) return hataMesaji(playerid, "Ýþyerinizin türü bu iþlemi desteklemiyor.");
							
							for(new weed = 0; weed < sizeof(WeedInfo); weed++)
							{
								if(WeedInfo[weed][weedPlanted] == 0 && WeedInfo[weed][weedTime] == 0)
								{
									new Float:pos[3];
									GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
									GetXYInFrontOfPlayer(playerid, pos[0], pos[1], 0.75);
									ApplyAnimation(playerid, "BOMBER","BOM_Plant_In",4.0,0,0,0,0,0);
									WeedInfo[weed][weedObject] = CreateDynamicObject(-2099, pos[0], pos[1], pos[2]-0.47, 0, 0, 0, GetPlayerVirtualWorld(playerid), -1);
									WeedInfo[weed][weedX] = pos[0];
									WeedInfo[weed][weedY] = pos[1];
									WeedInfo[weed][weedZ] = pos[2]-0.47;
									WeedInfo[weed][weedWorld] = GetPlayerVirtualWorld(playerid);
									WeedInfo[weed][weedTime] = 30;
									WeedInfo[weed][weedPlanted] = 1;
									WeedInfo[weed][weedType] = 0;
									SunucuMesaji(playerid,"Marijuana ektiniz, '30' dakika içerisinde toplayabilirsiniz.");
									UyariMesaji(playerid, "Marijuanalarýnýzý zamanýnda toplamazsanýz çürüyebilir.");
									ItemSil(playerid, sayfa);
									return 1;
								}
							}
							} else { return hataMesaji(playerid, "Herhangi bir laboratuvarda deðilsiniz."); }
							ItemSil(playerid, sayfa);
							}
							case 1:
							{
								EvEsyaBirak(playerid, sayfa);
							}
							case 2:
							{
								ItemSil(playerid, sayfa);
								SunucuMesaji(playerid, "Tohum baþarýyla yok edildi.");
							}
						}
					}
				}
				case DIALOG_KOKO_KULLAN:
				{
					if(response)
					{
						new sayfa = GetPVarInt(playerid, "sayfa");
						switch(listitem)
						{
							case 0:
							{
							if(oyuncuData[playerid][oGiris] == false) return hataMesaji(playerid, "Giriþ yapmadan bu komutu kullanamazsýn.");
							if(KomutUygunlukKontrol(playerid) == 0) return UygunDegilMesaj(playerid);
							if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu komut araç içerisinde kullanýlamaz.");
							static id;
							if((id = Oyuncu_Isyerinde(playerid)) != -1 || Oyuncu_Evde(playerid) != -1) {
							if(id != -1 && IsyeriBilgi[id][isyeriTur] != 16) return hataMesaji(playerid, "Ýþyerinizin türü bu iþlemi desteklemiyor.");
							
							for(new weed = 0; weed < sizeof(WeedInfo); weed++)
							{
								if(WeedInfo[weed][weedPlanted] == 0 && WeedInfo[weed][weedTime] == 0)
								{
									new Float:pos[3];
									GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
									GetXYInFrontOfPlayer(playerid, pos[0], pos[1], 0.75);
									ApplyAnimation(playerid, "BOMBER","BOM_Plant_In",4.0,0,0,0,0,0);
									WeedInfo[weed][weedObject] = CreateDynamicObject(-2099, pos[0], pos[1], pos[2]-0.47, 0, 0, 0, GetPlayerVirtualWorld(playerid), -1);
									WeedInfo[weed][weedX] = pos[0];
									WeedInfo[weed][weedY] = pos[1];
									WeedInfo[weed][weedZ] = pos[2]-0.47;
									WeedInfo[weed][weedWorld] = GetPlayerVirtualWorld(playerid);
									WeedInfo[weed][weedTime] = 30;
									WeedInfo[weed][weedPlanted] = 1;
									WeedInfo[weed][weedType] = 1;
									SunucuMesaji(playerid,"Koko bitkisi ektiniz, '30' dakika içerisinde toplayabilirsiniz.");
									UyariMesaji(playerid, "Koko bitkinizi zamanýnda toplamazsanýz çürüyebilir.");
									ItemSil(playerid, sayfa);
									return 1;
								}
							}
							} else { return hataMesaji(playerid, "Herhangi bir laboratuvarda deðilsiniz."); }
							ItemSil(playerid, sayfa);
							}
							case 1:
							{
								EvEsyaBirak(playerid, sayfa);
							}
							case 2:
							{
								ItemSil(playerid, sayfa);
								SunucuMesaji(playerid, "Tohum baþarýyla yok edildi.");
							}
						}
					}
				}
					case DIALOG_BOLGE_UYUS:
				{
					if(response)
					{
						new sayfa = GetPVarInt(playerid, "sayfa");
						switch(listitem)
						{
							case 0:
							{
								if(GetPVarInt(playerid, "usatis") == 0)
								{
								if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Uyuþturucu satýþý araçtayken yapýlamaz.");
								if(!IsPlayerInAnyDynamicArea(playerid) || oyuncuData[playerid][oBolge] == -1) return hataMesaji(playerid, "Bu komutu yanlýzca birlik bölgesinde kullanabilirsiniz.");
								if(BolgeInfo[oyuncuData[playerid][oBolge]][bBirlik] != oyuncuData[playerid][oBirlik]) return hataMesaji(playerid, "Bu komutu yanlýzca kendi birlik bölgenizde kullanabilirsiniz.");
								if(OyuncuBirlikTuru(playerid) == BIRLIK_POLIS || OyuncuBirlikTuru(playerid) == BIRLIK_MEDIKAL || OyuncuBirlikTuru(playerid) == BIRLIK_DEVLET) return hataMesaji(playerid, "Birlik türünüz bunu desteklemiyor.");
								if(!SatisUygunlukKontrol(playerid)) return hataMesaji(playerid, "Uyuþturucu satýþý sadece 18.00 ile 06.00 saatleri arasýnda yapýlabilir.");
								oyuncuData[playerid][oUmiktar] = 0;
								BilgiText(playerid, "~g~~h~Satilan Uyusturucu: ~w~0 gr", 59000);
								SetPVarInt(playerid, "usatis", 1);
								SunucuMesaji(playerid, "Bölgenizde bulunan alýcýlara uyuþturucu satmaya baþladýnýz.");
								AnimOynat(playerid, "DEALER", "DEALER_DEAL", 4.0, 1, 0, 0, 0, 0, 1);
								SunucuMesaji(playerid, "Kalan uyuþturucu paketi sayýnýz: %d adet.", (EnvanterData[playerid][i_var][sayfa] - 1));
								ItemSlotMiktarAzalt(playerid, sayfa, 1);
								SCM_Ex(playerid, -1, "{C9C936}Mahalle Lideri:{FFFFFF}Pekala adamým, polislere enselenmeden tüm mallarý elden çýkar.");
								}
								else
								{
								SunucuMesaji(playerid, "Uyuþturucu satmayý býraktýnýz, satýlan uyuþturucu miktarý: %d gr", oyuncuData[playerid][oUmiktar]);
								ParaEkle(playerid, oyuncuData[playerid][oUmiktar] * 10);
								oyuncuData[playerid][oUmiktar] = 0;
								BilgiText(playerid, "~g~~h~Uyusturucular Satildi!", 1000);
								new query[110], Cache:GetCache, satissayisi;
								mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM oyuncular WHERE ID = '%d'", oyuncuData[playerid][oID]);
								GetCache = mysql_query(g_SQL, query);	
								cache_get_value_name_int(0, "SatilanUyusturucu", satissayisi);
								cache_delete(GetCache);
								satissayisi++;
								mysql_format(g_SQL, query, sizeof(query), "UPDATE oyuncular SET SatilanUyusturucu = '%d' WHERE ID = '%d'", satissayisi, oyuncuData[playerid][oID]);
								mysql_query(g_SQL, query);
								DeletePVar(playerid, "usatis");
								}
							}
							case 1:
							{
								ItemSil(playerid, sayfa);
								SunucuMesaji(playerid, "Uyuþturucu paketi baþarýyla yok edildi.");
							}
						}
					}
				}
				case DIALOG_KSODA_KULLAN:
				{
					if(response)
					{
						new sayfa = GetPVarInt(playerid, "sayfa");
						switch(listitem)
						{
							case 0:
							{
								EvEsyaBirak(playerid, sayfa);
							}
							case 1:
							{
								ItemSil(playerid, sayfa);
								SunucuMesaji(playerid, "Tohum baþarýyla yok edildi.");
							}
						}
					}
				}
				case DIALOG_SILAH_KULLAN:
				{
					if(response)
					{
						new sayfa = GetPVarInt(playerid, "sayfa");
						switch(listitem)
						{
							case 0:
							{
								if(OyuncuBirlikTuru(playerid) == BIRLIK_POLIS || OyuncuBirlikTuru(playerid) == BIRLIK_MEDIKAL || OyuncuBirlikTuru(playerid) == BIRLIK_DEVLET) return hataMesaji(playerid, "Oluþum türünüz bu seçeneði desteklemiyor.");
								new silahmodel;
								switch(ItemArray[ EnvanterData[playerid][i_tip][sayfa] - 1 ][iid])
								{
									case 99: silahmodel = 24;
									case 100: silahmodel = 22;
									case 101: silahmodel = 30;
									case 102: silahmodel = 28;
									case 103: silahmodel = 25;
								}
								if(SilahSlotKontrol(playerid, SilahSlotBul[silahmodel]) && SilahSlotBul[silahmodel] != 0) return hataMesaji(playerid, "Bu silah türünden bir silah üstünüzde zaten bulunuyor. Envantere/araca býrakmayý deneyin.");
								if(oyuncuData[playerid][oSeviye] < 3) return hataMesaji(playerid, "Bu seviyedeyken eline silah alamazsýn.");
								new string[128], mermi = EnvanterData[playerid][i_var][sayfa];
								if(mermi <= 0) return hataMesaji(playerid, "Seçmiþ olduðunuz %s model silahýn mermisi bitmiþ durumdadýr, elinize alamazsýnýz.", SilahIsim(silahmodel));

								format(string, sizeof string, "%s model silahýný eline alýr.", ItemArray[ EnvanterData[playerid][i_tip][sayfa] - 1 ][iisim]);
								cmd(playerid, 1, string);
								ItemSil(playerid, sayfa);
							}
							case 1:
							{
								if(OyuncuBirlikTuru(playerid) == BIRLIK_POLIS || OyuncuBirlikTuru(playerid) == BIRLIK_MEDIKAL || OyuncuBirlikTuru(playerid) == BIRLIK_DEVLET) return hataMesaji(playerid, "Oluþum türünüz bu seçeneði desteklemiyor.");
								//BirakilanItemYarat(playerid, sayfa);
								hataMesaji(playerid, "Devredýþý.");
							}
							case 2:
							{
								new str[256], silahmodel;
							//printf("iarray: %d", ItemArray[ EnvanterData[playerid][i_tip][sayfa] - 1 ][iid]);
								switch(ItemArray[ EnvanterData[playerid][i_tip][sayfa] - 1 ][iid])
								{
									case 99: silahmodel = 24;
									case 100: silahmodel = 22;
									case 101: silahmodel = 30;
									case 102: silahmodel = 28;
									case 103: silahmodel = 25;
								}
							//printf("model: %d", silahmodel);
								SetPVarInt(playerid, "Env_Silah", silahmodel);
								if(MermiDataCek(silahmodel) == -1) return hataMesaji(playerid, "Bu silahýn mermisi elimde yok.");
								new mermifiyat = mermiTCData[MermiDataCek(silahmodel)][slhSarjorFiyat];
							//printf("%s", NumaraFormati(mermifiyat));
								format(str, sizeof(str), "{FFFFFF}%s model silaha, bir þarjor mermi satýn almak istiyor musun?\n\n{FFFFFF}Þarjor Fiyatý: {CDCDCD}%s", SilahIsim(silahmodel), NumaraFormati(mermifiyat));
								ShowPlayerDialog(playerid, ENVANTER_MERMI_SATINAL, DIALOG_STYLE_MSGBOX, "{BAAF2C}Tommy Guy:{FFFFFF} Þu iþi hýzlýca bitirelim..", str, "Onayla", "Iptal");
							}
						}
					}
				}
				case DIALOG_DEODORANT_KULLAN:
				{
					if(response)
					{
						new sayfa = GetPVarInt(playerid, "sayfa");
						switch(listitem)
						{
							case 0:
							{
								cmd(playerid, 1, "yanýnda taþýdýðý deodorantý çýkartýp pis kokusunu giderir.");
								oyuncuData[playerid][oBirikenKoku] = 0;
								oyuncuData[playerid][oKokuDurum] = 0;
								ItemSlotMiktarAzalt(playerid, sayfa, 1);
							}
							case 1:
							{
								EvEsyaBirak(playerid, sayfa);
							}
							case 2:
							{
								ItemSil(playerid, sayfa);
								SunucuMesaji(playerid, "Deodorant baþarýyla yok edildi.");
							}
						}
					}
				}
				case DIALOG_LOTO_BILET:
				{
					if(response)
					{
						new rand = random(7);
						if(strval(inputtext) == rand)
						{
							SunucuMesaji(playerid, "Tahmin: %d / Gelen: %d | Tebrikler sayýyý doðru tahmin ederek $500 kazandýnýz!", strval(inputtext), rand);
							ParaEkle(playerid, 500);
						}
						else
						{
							SunucuMesaji(playerid, "Tahmin: %d / Gelen: %d | Malesef sayýyý doðru tahmin edemediniz, tekrar deneyin.", strval(inputtext), rand);
						}
					}
				}
				case DIALOG_ENVANTER_LOTO:
				{
					if(response)
					{
						new sayfa = GetPVarInt(playerid, "sayfa");
						switch(listitem)
						{
							case 0:
							{
								new query[95];
								mysql_format(g_SQL, query, sizeof(query), "** %s cebinden %s çýkarýr ve inceler.", OyuncuIsim(playerid),ItemArray[ EnvanterData[playerid][i_tip][sayfa] - 1 ][iisim]);
								SetPlayerChatBubble(playerid, query, RENK_PEMBE, 12.0, 10000);
								SendClientMessage(playerid, RENK_PEMBE, query);
								strins(query, "> ", 3);

								ShowPlayerDialog(playerid, DIALOG_LOTO_BILET, DIALOG_STYLE_INPUT, "Loto Bileti", "Lütfen (0 - 6) sayýlarý(dahil) arasýnda bir sayý girin:", "Oyna", "Iptal");
								ItemSil(playerid, sayfa);
							}
							case 1:
							{
								EvEsyaBirak(playerid, sayfa);
							}
							case 2:
							{
								ItemSil(playerid, sayfa);
								SunucuMesaji(playerid, "Loto bileti baþarýyla yok edildi.");
							}
						}
					}
				}
				case DIALOG_ENVANTER_YILBASI:
				{
					if(response)
					{
						new sayfa = GetPVarInt(playerid, "sayfa");
						switch(listitem)
						{
							case 0:
							{
								new query[95],bilet[20];
								mysql_format(g_SQL, query, sizeof(query), "** %s cebinden %s çýkarýr ve inceler.", OyuncuIsim(playerid),ItemArray[ EnvanterData[playerid][i_tip][sayfa] - 1 ][iisim]);
								SetPlayerChatBubble(playerid, query, RENK_PEMBE, 12.0, 10000);
								SendClientMessage(playerid, RENK_PEMBE, query);
								strins(query, "> ", 3);
								TextDrawShowForPlayer(playerid, bilet_0);
								TextDrawShowForPlayer(playerid, bilet_2);
								format(bilet, sizeof(bilet), "%d", EnvanterData[playerid][i_var][sayfa]);
								PlayerTextDrawSetString(playerid, bilet_1[playerid], bilet);
								PlayerTextDrawShow(playerid, bilet_1[playerid]);
								SunucuMesaji(playerid, "Yýlbaþý biletinizi incelediniz, 5 saniye sonra otomatik kapanacaktýr.");
								SetTimerEx("biletsakla", 5000, false, "i", playerid);
							}
							case 1:
							{
								ItemSil(playerid, sayfa);
								SunucuMesaji(playerid, "Yýlbaþý bileti baþarýyla yok edildi.");
							}
						}
					}
				}
				case ENVANTER_MERMI_SATINAL:
				{
					if(response)
					{
						new sayfa = GetPVarInt(playerid, "sayfa"), silahmodel = GetPVarInt(playerid, "Env_Silah");
						new mermifiyat = mermiTCData[MermiDataCek(silahmodel)][slhSarjorFiyat];
						if(oyuncuData[playerid][oPara] < mermifiyat) return hataMesaji(playerid, "Bu ücreti karþýlayamýyorsunuz.");
						ParaEkle(playerid, -mermifiyat);
						ItemMiktarArttir(playerid, sayfa, mermiTCData[MermiDataCek(silahmodel)][slhSarjor]);
					}
				}
				case DIALOG_KAMERA_KULLAN:
				{
					new sayfa = GetPVarInt(playerid, "sayfa");
					switch(listitem)
					{
						case 0:
						{
							SilahVer(playerid, 43, 200);
							cmd(playerid, 1, "kamerasýný eline alýr.");
						}
						case 1:
						{
							EvEsyaBirak(playerid, sayfa);
						}
						case 2:
						{
							ItemSil(playerid, sayfa);
							SunucuMesaji(playerid, "Kamera baþarýyla yok edildi.");
						}
					}
				}
				case DIALOG_KIYAFET_POSET:
				{
					new sayfa = GetPVarInt(playerid, "sayfa");
					if(response)
					{
						switch(listitem)
						{
							case 0:
							{
								if(SoyunmaKabiniYakin(playerid) == 0) return hataMesaji(playerid, "Bir soyunma kabinine yakýn deðilsin. Burada üstünü deðiþemezsin.");
								new eskikiyafet = oyuncuData[playerid][oKiyafet], yenikiyafet = EnvanterData[playerid][i_var][sayfa];
								oyuncuData[playerid][oKiyafet] = yenikiyafet;
								SetPlayerSkin(playerid, oyuncuData[playerid][oKiyafet]);
								ItemSifirla(playerid, 106);
								ItemEkle(playerid, 106, eskikiyafet);
								cmd(playerid, 1, "poþetten kýyafetlerini alarak giyinir, eski kýyafetlerini poþete yerleþtirir.");
							}
							case 1:
							{
								ItemSifirla(playerid, 106);
								SunucuMesaji(playerid, "Kýyafet poþetini baþarýyla yok ettin. Yenisini ayarlayabilirsin.");
							}
						}
					}
				}
				case DIALOG_PAWNSHOP:
				{
					if(response)
					{
						new success;
						switch(listitem)
						{
							case 0 :
							{
								if(oyuncuData[playerid][oPara] < 150) return hataMesaji(playerid, "Üzerinizde yeterli miktarda para bulunmuyor. (150$)");
								success = ItemEkle(playerid, 87, 1);
								if(success != 0){
								SunucuMesaji(playerid, "Eþyayý 150$ karþýlýðýnda satýn alarak envanterinize eklediniz.");
								ParaEkle(playerid, -150); }
							}
							case 1 :
							{
								if(oyuncuData[playerid][oPara] < 150) return hataMesaji(playerid, "Üzerinizde yeterli miktarda para bulunmuyor. (150$)");
								success = ItemEkle(playerid, 88, 1);
								if(success != 0){
								SunucuMesaji(playerid, "Eþyayý 150$ karþýlýðýnda satýn alarak envanterinize eklediniz.");
								ParaEkle(playerid, -150); }
							}
							case 2 :
							{
								if(oyuncuData[playerid][oPara] < 150) return hataMesaji(playerid, "Üzerinizde yeterli miktarda para bulunmuyor. (150$)");
								success = ItemEkle(playerid, 89, 1);
								if(success != 0){
								SunucuMesaji(playerid, "Eþyayý 150$ karþýlýðýnda satýn alarak envanterinize eklediniz.");
								ParaEkle(playerid, -150); }
							}
							case 3 :
							{
								if(oyuncuData[playerid][oPara] < 150) return hataMesaji(playerid, "Üzerinizde yeterli miktarda para bulunmuyor. (150$)");
								success = ItemEkle(playerid, 91, 1);
								if(success != 0){
								SunucuMesaji(playerid, "Eþyayý 150$ karþýlýðýnda satýn alarak envanterinize eklediniz.");
								ParaEkle(playerid, -150); }
							}
							case 4 :
							{
								if(oyuncuData[playerid][oPara] < 150) return hataMesaji(playerid, "Üzerinizde yeterli miktarda para bulunmuyor. (150$)");
								success = ItemEkle(playerid, 90, 1);
								if(success != 0){
								SunucuMesaji(playerid, "Eþyayý 150$ karþýlýðýnda satýn alarak envanterinize eklediniz.");
								ParaEkle(playerid, -150); }
							}
							case 5 :
							{
								if(oyuncuData[playerid][oPara] < 150) return hataMesaji(playerid, "Üzerinizde yeterli miktarda para bulunmuyor. (150$)");
								success = ItemEkle(playerid, 50, 1);
								if(success != 0){
								SunucuMesaji(playerid, "Eþyayý 150$ karþýlýðýnda satýn alarak envanterinize eklediniz.");
								ParaEkle(playerid, -150); }
							}
							case 6 :
							{
								if(oyuncuData[playerid][oPara] < 150) return hataMesaji(playerid, "Üzerinizde yeterli miktarda para bulunmuyor. (150$)");
								success = ItemEkle(playerid, 72, 1);
								if(success != 0){
								SunucuMesaji(playerid, "Eþyayý 150$ karþýlýðýnda satýn alarak envanterinize eklediniz.");
								ParaEkle(playerid, -150); }
							}
							case 7 :
							{
								if(oyuncuData[playerid][oPara] < 150) return hataMesaji(playerid, "Üzerinizde yeterli miktarda para bulunmuyor. (150$)");
								success = ItemEkle(playerid, 92, 1);
								if(success != 0){
								SunucuMesaji(playerid, "Eþyayý 150$ karþýlýðýnda satýn alarak envanterinize eklediniz.");
								ParaEkle(playerid, -150); }
							}
							case 8 :
							{
								if(oyuncuData[playerid][oPara] < 150) return hataMesaji(playerid, "Üzerinizde yeterli miktarda para bulunmuyor. (150$)");
								success = ItemEkle(playerid, 97, 1);
								if(success != 0){
								SunucuMesaji(playerid, "Eþyayý 150$ karþýlýðýnda satýn alarak envanterinize eklediniz.");
								ParaEkle(playerid, -150); }
							}
							case 9 :
							{
								if(oyuncuData[playerid][oPara] < 150) return hataMesaji(playerid, "Üzerinizde yeterli miktarda para bulunmuyor. (150$)");
								success = ItemEkle(playerid, 98, 1);
								if(success != 0){
								SunucuMesaji(playerid, "Eþyayý 150$ karþýlýðýnda satýn alarak envanterinize eklediniz.");
								ParaEkle(playerid, -150); }
							}
							case 10 :
							{
								if(oyuncuData[playerid][oPara] < 150) return hataMesaji(playerid, "Üzerinizde yeterli miktarda para bulunmuyor. (150$)");
								success = ItemEkle(playerid, 96, 1);
								if(success != 0){
								SunucuMesaji(playerid, "Eþyayý 150$ karþýlýðýnda satýn alarak envanterinize eklediniz.");
								ParaEkle(playerid, -150); }
							}
							case 11 :
							{
								if(oyuncuData[playerid][oPara] < 500) return hataMesaji(playerid, "Üzerinizde yeterli miktarda para bulunmuyor. (500$)");
								oyuncuData[playerid][oTezgah] = 1;
								SunucuMesaji(playerid, "Craft masasý satýn aldýnýz, kurmak için (/craftmasa kur).");
								ParaEkle(playerid, -500);
							}
							case 12:
							{
								if(oyuncuData[playerid][oPara] < 500) return hataMesaji(playerid, "Üzerinizde yeterli miktarda para bulunmuyor. (500$)");
								success = ItemEkle(playerid, 31, 5);
								if(success != 0){
								SunucuMesaji(playerid, "Eþyayý 500$ karþýlýðýnda satýn alarak envanterinize 5 kullaným hakkýyla eklediniz.");
								ParaEkle(playerid, -500); }
							}
						}
					}
				}
				case DIALOG_ELKOYDUM:
				{
					if(response)
					{
						new sayfa = GetPVarInt(playerid, "sayfa"),karsioyuncu = GetPVarInt(playerid, "ustarakarsi");
						new query[95];
						mysql_format(g_SQL, query, sizeof(query), "** %s %s adlý ürüne el koyar.", OyuncuIsim(playerid),ItemArray[ EnvanterData[karsioyuncu][i_tip][sayfa] - 1 ][iisim]);
						ProxDetector(12, playerid, query, RENK_PEMBE);
						ItemSil(karsioyuncu, sayfa);
						DeletePVar(playerid, "ustarakarsi");
						SunucuMesaji(playerid, "Eþyaya baþarýyla el koydunuz.");
					}
				}

				case DIALOG_ENVANTER_ICKI:
				{
					if(response)
					{
						new sayfa = GetPVarInt(playerid, "sayfa");
						switch(listitem)
						{
							case 0 :
							{
								new query[95];
								mysql_format(g_SQL, query, sizeof(query), "** %s %s adlý ürünün kapaðýný açar ve içmeye hazýr hale getirir.", OyuncuIsim(playerid),ItemArray[ EnvanterData[playerid][i_tip][sayfa] - 1 ][iisim]);
								ProxDetector(12, playerid, query, RENK_PEMBE);
								SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
								ItemSil(playerid, sayfa);
							}
							case 1 :
							{
								EvEsyaBirak(playerid, sayfa);
							}
							case 2 :
							{
								ItemSil(playerid, sayfa);
								SunucuMesaji(playerid, "Eþyanýzý baþarýyla sildiniz.");
							}
						}
					}
				}

				case DIALOG_ARACMODKALDIR:
				{
					if( response ) {
						new vehicleid = GetPVarInt(playerid, "modifiyecomparac");
						switch(listitem) {
							case 0: {
								if(AracBilgi[vehicleid][aracParca][6] == 0) return hataMesaji(playerid, "Bu araçta bu modifiyeden bulunmuyor.");
								RemoveVehicleComponent(vehicleid,AracBilgi[vehicleid][aracParca][6]);
								AracBilgi[vehicleid][aracParca][6] = 0;
								ModifiyeKaydet(playerid, vehicleid);
								SunucuMesaji(playerid, "Parça araçtan baþarýyla söküldü.");
							}
							case 1: {
								if(AracBilgi[vehicleid][aracParca][10] == 0) return hataMesaji(playerid, "Bu araçta bu modifiyeden bulunmuyor.");
								RemoveVehicleComponent(vehicleid,AracBilgi[vehicleid][aracParca][6]);
								AracBilgi[vehicleid][aracParca][10] = 0;
								ModifiyeKaydet(playerid, vehicleid);
								SunucuMesaji(playerid, "Parça araçtan baþarýyla söküldü.");
							}
							case 2: {
								if(AracBilgi[vehicleid][aracParca][11] == 0) return hataMesaji(playerid, "Bu araçta bu modifiyeden bulunmuyor.");
								RemoveVehicleComponent(vehicleid,AracBilgi[vehicleid][aracParca][6]);
								AracBilgi[vehicleid][aracParca][11] = 0;
								ModifiyeKaydet(playerid, vehicleid);
								SunucuMesaji(playerid, "Parça araçtan baþarýyla söküldü.");
							}
							case 3: {
								if(AracBilgi[vehicleid][aracParca][2] == 0) return hataMesaji(playerid, "Bu araçta bu modifiyeden bulunmuyor.");
								RemoveVehicleComponent(vehicleid,AracBilgi[vehicleid][aracParca][6]);
								AracBilgi[vehicleid][aracParca][2] = 0;
								ModifiyeKaydet(playerid, vehicleid);
								SunucuMesaji(playerid, "Parça araçtan baþarýyla söküldü.");
							}
							case 4: {
								if(AracBilgi[vehicleid][aracParca][0] == 0) return hataMesaji(playerid, "Bu araçta bu modifiyeden bulunmuyor.");
								RemoveVehicleComponent(vehicleid,AracBilgi[vehicleid][aracParca][6]);
								AracBilgi[vehicleid][aracParca][0] = 0;
								ModifiyeKaydet(playerid, vehicleid);
								SunucuMesaji(playerid, "Parça araçtan baþarýyla söküldü.");
							}
							case 5: {
								if(AracBilgi[vehicleid][aracParca][3] == 0) return hataMesaji(playerid, "Bu araçta bu modifiyeden bulunmuyor.");
								RemoveVehicleComponent(vehicleid,AracBilgi[vehicleid][aracParca][6]);
								AracBilgi[vehicleid][aracParca][3] = 0;
								ModifiyeKaydet(playerid, vehicleid);
								SunucuMesaji(playerid, "Parça araçtan baþarýyla söküldü.");
							}
							case 6: {
								if(AracBilgi[vehicleid][aracParca][7] == 0) return hataMesaji(playerid, "Bu araçta bu modifiyeden bulunmuyor.");
								RemoveVehicleComponent(vehicleid,AracBilgi[vehicleid][aracParca][6]);
								AracBilgi[vehicleid][aracParca][7] = 0;
								ModifiyeKaydet(playerid, vehicleid);
								SunucuMesaji(playerid, "Parça araçtan baþarýyla söküldü.");
							}
							case 7: {
								if(AracBilgi[vehicleid][aracParca][8] == 0) return hataMesaji(playerid, "Bu araçta bu modifiyeden bulunmuyor.");
								RemoveVehicleComponent(vehicleid,AracBilgi[vehicleid][aracParca][6]);
								AracBilgi[vehicleid][aracParca][8] = 0;
								ModifiyeKaydet(playerid, vehicleid);
								SunucuMesaji(playerid, "Parça araçtan baþarýyla söküldü.");
							}
							case 8: {
								if(AracBilgi[vehicleid][aracParca][9] == 0) return hataMesaji(playerid, "Bu araçta bu modifiyeden bulunmuyor.");
								RemoveVehicleComponent(vehicleid,AracBilgi[vehicleid][aracParca][6]);
								AracBilgi[vehicleid][aracParca][9] = 0;
								ModifiyeKaydet(playerid, vehicleid);
								SunucuMesaji(playerid, "Parça araçtan baþarýyla söküldü.");
							}
							case 9: {
								if(AracBilgi[vehicleid][aracParca][5] == 0) return hataMesaji(playerid, "Bu araçta bu modifiyeden bulunmuyor.");
								RemoveVehicleComponent(vehicleid,AracBilgi[vehicleid][aracParca][6]);
								AracBilgi[vehicleid][aracParca][5] = 0;
								ModifiyeKaydet(playerid, vehicleid);
								SunucuMesaji(playerid, "Parça araçtan baþarýyla söküldü.");
							}
						}
						new Float:araccani, aracsqlid = AracBilgi[vehicleid][aracID];
						GetVehicleHealth(AracBilgi[vehicleid][aracYarat], araccani);
						GetVehicleZAngle(AracBilgi[vehicleid][aracYarat], AracBilgi[vehicleid][aracPos][3]);

						Arac_Kaydet(vehicleid); ModifiyeKaydet(playerid, vehicleid);

						new aracgg = AracBilgi[vehicleid][aracYarat];

						Iter_Remove(Araclar, aracgg);
						DestroyVehicle(aracgg);
						AracVeriSifirla(aracgg);

						AracSpawnla(aracsqlid);
					}
				}
				case DIALOG_ARACMOD:
				{
					if( response ) {
						new vehicleid = GetPVarInt(playerid, "modifiyecomparac"), Float:Pos[ 6 ];

						TPInfo[ playerid ][ tID ] = -1;

						switch( listitem ) {
							case 0: {

								for( new i = 0; i < MAX_PARCA; i++ ) {
									if( cInfo[ i ][ cTip ] == CARMODTYPE_EXHAUST ) {
										if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
											TPInfo[ playerid ][ tID ] = i;
											break;
										}
									}
								}
								if( TPInfo[ playerid ][ tID ] == -1 ) return hataMesaji( playerid, "Bu araca uygun parça bulunmuyor."),ShowPlayerDialog(playerid, DIALOG_ARACMOD, DIALOG_STYLE_LIST, "Modifiye Parçalarý", "Egzos\nÖn Tampon\nArka Tampon\nTavan\nRüzgarlýk\nYan Etekler\nJantlar\nStereo\nHidrolik\nNitro", "Seç", "Iptal");
								if(AracBilgi[vehicleid][aracParca][6] > 0) return hataMesaji( playerid, "Araca modifiye atmadan önce varolan parçayý kaldýrýn."),ShowPlayerDialog(playerid, DIALOG_ARACMOD, DIALOG_STYLE_LIST, "Modifiye Parçalarý", "Egzos\nÖn Tampon\nArka Tampon\nTavan\nRüzgarlýk\nYan Etekler\nJantlar\nStereo\nHidrolik\nNitro", "Seç", "Iptal");
								new cid = TPInfo[ playerid ][ tID ];
								TPInfo[ playerid ][ tType ] = CARMODTYPE_EXHAUST;
								TPInfo[ playerid ][ tPaintjob ] = false;

								TogglePlayerControllable( playerid, false );
								TuningTDControl( playerid, true );

								format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cIsim ] );
								PlayerTextDrawSetString( playerid, AracModifye[ playerid ][ 3 ], globalstring );
								format( globalstring, sizeof( globalstring ), "%d$", cInfo[ cid ][ cFiyat ] );
								PlayerTextDrawSetString( playerid, AracModifye[ playerid ][ 6 ], globalstring );

								AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

								GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], -2, -5, 0 );
								SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

								GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
								SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

								SelectTextDraw( playerid, RENK_DO );
							}
							case 1: {

								for( new i = 0; i < MAX_PARCA; i++ ) {
									if( cInfo[ i ][ cTip ] == CARMODTYPE_FRONT_BUMPER ) {
										if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
											TPInfo[ playerid ][ tID ] = i;
											break;
										}
									}
								}
								if( TPInfo[ playerid ][ tID ] == -1 ) return hataMesaji( playerid, "Bu araca uygun parça bulunmuyor." ),ShowPlayerDialog(playerid, DIALOG_ARACMOD, DIALOG_STYLE_LIST, "Modifiye Parçalarý", "Egzos\nÖn Tampon\nArka Tampon\nTavan\nRüzgarlýk\nYan Etekler\nJantlar\nStereo\nHidrolik\nNitro", "Seç", "Iptal");
								if(AracBilgi[vehicleid][aracParca][10] > 0) return hataMesaji( playerid, "Araca modifiye atmadan önce varolan parçayý kaldýrýn."),ShowPlayerDialog(playerid, DIALOG_ARACMOD, DIALOG_STYLE_LIST, "Modifiye Parçalarý", "Egzos\nÖn Tampon\nArka Tampon\nTavan\nRüzgarlýk\nYan Etekler\nJantlar\nStereo\nHidrolik\nNitro", "Seç", "Iptal");
								new cid = TPInfo[ playerid ][ tID ];
								TPInfo[ playerid ][ tType ] = CARMODTYPE_FRONT_BUMPER;
								TPInfo[ playerid ][ tPaintjob ] = false;

								TogglePlayerControllable( playerid, false );
								TuningTDControl( playerid, true );

								format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cIsim ] );
								PlayerTextDrawSetString( playerid, AracModifye[ playerid ][ 3 ], globalstring );
								format( globalstring, sizeof( globalstring ), "%d$", cInfo[ cid ][ cFiyat ] );
								PlayerTextDrawSetString( playerid, AracModifye[ playerid ][ 6 ], globalstring );

								AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

								GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 0, 6, 0.5 );
								SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

								GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
								SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

								SelectTextDraw( playerid, RENK_DO );
							}
							case 2: {

								for( new i = 0; i < MAX_PARCA; i++ ) {
									if( cInfo[ i ][ cTip ] == CARMODTYPE_REAR_BUMPER ) {
										if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
											TPInfo[ playerid ][ tID ] = i;
											break;
										}
									}
								}
								if( TPInfo[ playerid ][ tID ] == -1 ) return hataMesaji( playerid, "Bu araca uygun parça bulunmuyor." ),ShowPlayerDialog(playerid, DIALOG_ARACMOD, DIALOG_STYLE_LIST, "Modifiye Parçalarý", "Egzos\nÖn Tampon\nArka Tampon\nTavan\nRüzgarlýk\nYan Etekler\nJantlar\nStereo\nHidrolik\nNitro", "Seç", "Iptal");
								if(AracBilgi[vehicleid][aracParca][11] > 0) return hataMesaji( playerid, "Araca modifiye atmadan önce varolan parçayý kaldýrýn."),ShowPlayerDialog(playerid, DIALOG_ARACMOD, DIALOG_STYLE_LIST, "Modifiye Parçalarý", "Egzos\nÖn Tampon\nArka Tampon\nTavan\nRüzgarlýk\nYan Etekler\nJantlar\nStereo\nHidrolik\nNitro", "Seç", "Iptal");
								new cid = TPInfo[ playerid ][ tID ];
								TPInfo[ playerid ][ tType ] = CARMODTYPE_REAR_BUMPER;
								TPInfo[ playerid ][ tPaintjob ] = false;

								TogglePlayerControllable( playerid, false );
								TuningTDControl( playerid, true );

								format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cIsim ] );
								PlayerTextDrawSetString( playerid, AracModifye[ playerid ][ 3 ], globalstring );
								format( globalstring, sizeof( globalstring ), "%d$", cInfo[ cid ][ cFiyat ] );
								PlayerTextDrawSetString( playerid, AracModifye[ playerid ][ 6 ], globalstring );

								AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

								GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 0, -6, 0.5 );
								SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

								GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
								SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

								SelectTextDraw( playerid, RENK_DO );
							}
							case 3: {

								for( new i = 0; i < MAX_PARCA; i++ ) {
									if( cInfo[ i ][ cTip ] == CARMODTYPE_ROOF ) {
										if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
											TPInfo[ playerid ][ tID ] = i;
											break;
										}
									}
								}
								if( TPInfo[ playerid ][ tID ] == -1 ) return hataMesaji( playerid, "Bu araca uygun parça bulunmuyor."),ShowPlayerDialog(playerid, DIALOG_ARACMOD, DIALOG_STYLE_LIST, "Modifiye Parçalarý", "Egzos\nÖn Tampon\nArka Tampon\nTavan\nRüzgarlýk\nYan Etekler\nJantlar\nStereo\nHidrolik\nNitro", "Seç", "Iptal");
								if(AracBilgi[vehicleid][aracParca][2] > 0) return hataMesaji( playerid, "Araca modifiye atmadan önce varolan parçayý kaldýrýn."),ShowPlayerDialog(playerid, DIALOG_ARACMOD, DIALOG_STYLE_LIST, "Modifiye Parçalarý", "Egzos\nÖn Tampon\nArka Tampon\nTavan\nRüzgarlýk\nYan Etekler\nJantlar\nStereo\nHidrolik\nNitro", "Seç", "Iptal");
								new cid = TPInfo[ playerid ][ tID ];
								TPInfo[ playerid ][ tType ] = CARMODTYPE_ROOF;
								TPInfo[ playerid ][ tPaintjob ] = false;

								TogglePlayerControllable( playerid, false );
								TuningTDControl( playerid, true );

								format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cIsim ] );
								PlayerTextDrawSetString( playerid, AracModifye[ playerid ][ 3 ], globalstring );
								format( globalstring, sizeof( globalstring ), "%d$", cInfo[ cid ][ cFiyat ] );
								PlayerTextDrawSetString( playerid, AracModifye[ playerid ][ 6 ], globalstring );

								AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

								GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 0, 6, 2 );
								SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

								GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
								SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

								SelectTextDraw( playerid, RENK_DO );
							}
							case 4: {

								for( new i = 0; i < MAX_PARCA; i++ ) {
									if( cInfo[ i ][ cTip ] == CARMODTYPE_SPOILER ) {
										if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
											TPInfo[ playerid ][ tID ] = i;
											break;
										}
									}
								}
								if( TPInfo[ playerid ][ tID ] == -1 ) return hataMesaji( playerid, "Bu araca uygun parça bulunmuyor."),ShowPlayerDialog(playerid, DIALOG_ARACMOD, DIALOG_STYLE_LIST, "Modifiye Parçalarý", "Egzos\nÖn Tampon\nArka Tampon\nTavan\nRüzgarlýk\nYan Etekler\nJantlar\nStereo\nHidrolik\nNitro", "Seç", "Iptal");
								if(AracBilgi[vehicleid][aracParca][0] > 0) return hataMesaji( playerid, "Araca modifiye atmadan önce varolan parçayý kaldýrýn."),ShowPlayerDialog(playerid, DIALOG_ARACMOD, DIALOG_STYLE_LIST, "Modifiye Parçalarý", "Egzos\nÖn Tampon\nArka Tampon\nTavan\nRüzgarlýk\nYan Etekler\nJantlar\nStereo\nHidrolik\nNitro", "Seç", "Iptal");
								new cid = TPInfo[ playerid ][ tID ];
								TPInfo[ playerid ][ tType ] = CARMODTYPE_SPOILER;
								TPInfo[ playerid ][ tPaintjob ] = false;

								TogglePlayerControllable( playerid, false );
								TuningTDControl( playerid, true );

								format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cIsim ] );
								PlayerTextDrawSetString( playerid, AracModifye[ playerid ][ 3 ], globalstring );
								format( globalstring, sizeof( globalstring ), "%d$", cInfo[ cid ][ cFiyat ] );
								PlayerTextDrawSetString( playerid, AracModifye[ playerid ][ 6 ], globalstring );

								AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

								GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 0, -6, 2 );
								SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

								GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
								SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

								SelectTextDraw( playerid, RENK_DO );
							}
							case 5: {

								for( new i = 0; i < MAX_PARCA; i++ ) {
									if( cInfo[ i ][ cTip ] == CARMODTYPE_SIDESKIRT ) {
										if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
											TPInfo[ playerid ][ tID ] = i;
											break;
										}
									}
								}
								if( TPInfo[ playerid ][ tID ] == -1 ) return hataMesaji( playerid, "Bu araca uygun parça bulunmuyor."),ShowPlayerDialog(playerid, DIALOG_ARACMOD, DIALOG_STYLE_LIST, "Modifiye Parçalarý", "Egzos\nÖn Tampon\nArka Tampon\nTavan\nRüzgarlýk\nYan Etekler\nJantlar\nStereo\nHidrolik\nNitro", "Seç", "Iptal");
								if(AracBilgi[vehicleid][aracParca][3] > 0) return hataMesaji( playerid, "Araca modifiye atmadan önce varolan parçayý kaldýrýn."),ShowPlayerDialog(playerid, DIALOG_ARACMOD, DIALOG_STYLE_LIST, "Modifiye Parçalarý", "Egzos\nÖn Tampon\nArka Tampon\nTavan\nRüzgarlýk\nYan Etekler\nJantlar\nStereo\nHidrolik\nNitro", "Seç", "Iptal");
								new cid = TPInfo[ playerid ][ tID ];
								TPInfo[ playerid ][ tType ] = CARMODTYPE_SIDESKIRT;
								TPInfo[ playerid ][ tPaintjob ] = false;

								TogglePlayerControllable( playerid, false );
								TuningTDControl( playerid, true );

								format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cIsim ] );
								PlayerTextDrawSetString( playerid, AracModifye[ playerid ][ 3 ], globalstring );
								format( globalstring, sizeof( globalstring ), "%d$", cInfo[ cid ][ cFiyat ] );
								PlayerTextDrawSetString( playerid, AracModifye[ playerid ][ 6 ], globalstring );

								AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

								GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 4, 0, 0.5 );
								SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

								GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
								SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

								SelectTextDraw( playerid, RENK_DO );
							}
							case 6: {

								for( new i = 0; i < MAX_PARCA; i++ ) {
									if( cInfo[ i ][ cTip ] == CARMODTYPE_WHEELS ) {
										if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
											TPInfo[ playerid ][ tID ] = i;
											break;
										}
									}
								}
								if( TPInfo[ playerid ][ tID ] == -1 ) return hataMesaji( playerid, "Bu araca uygun parça bulunmuyor."),ShowPlayerDialog(playerid, DIALOG_ARACMOD, DIALOG_STYLE_LIST, "Modifiye Parçalarý", "Egzos\nÖn Tampon\nArka Tampon\nTavan\nRüzgarlýk\nYan Etekler\nJantlar\nStereo\nHidrolik\nNitro", "Seç", "Iptal");
								if(AracBilgi[vehicleid][aracParca][7] > 0) return hataMesaji( playerid, "Araca modifiye atmadan önce varolan parçayý kaldýrýn."),ShowPlayerDialog(playerid, DIALOG_ARACMOD, DIALOG_STYLE_LIST, "Modifiye Parçalarý", "Egzos\nÖn Tampon\nArka Tampon\nTavan\nRüzgarlýk\nYan Etekler\nJantlar\nStereo\nHidrolik\nNitro", "Seç", "Iptal");
								new cid = TPInfo[ playerid ][ tID ];
								TPInfo[ playerid ][ tType ] = CARMODTYPE_WHEELS;
								TPInfo[ playerid ][ tPaintjob ] = false;

								TogglePlayerControllable( playerid, false );
								TuningTDControl( playerid, true );

								format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cIsim ] );
								PlayerTextDrawSetString( playerid, AracModifye[ playerid ][ 3 ], globalstring );
								format( globalstring, sizeof( globalstring ), "%d$", cInfo[ cid ][ cFiyat ] );
								PlayerTextDrawSetString( playerid, AracModifye[ playerid ][ 6 ], globalstring );

								AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

								GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 4, 0, 0.5 );
								SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

								GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
								SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

								SelectTextDraw( playerid, RENK_DO );
							}
							case 7: {

								for( new i = 0; i < MAX_PARCA; i++ ) {
									if( cInfo[ i ][ cTip ] == CARMODTYPE_STEREO ) {
										if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
											TPInfo[ playerid ][ tID ] = i;
											break;
										}
									}
								}
								if( TPInfo[ playerid ][ tID ] == -1 ) return hataMesaji( playerid, "Bu araca uygun parça bulunmuyor."),ShowPlayerDialog(playerid, DIALOG_ARACMOD, DIALOG_STYLE_LIST, "Modifiye Parçalarý", "Egzos\nÖn Tampon\nArka Tampon\nTavan\nRüzgarlýk\nYan Etekler\nJantlar\nStereo\nHidrolik\nNitro", "Seç", "Iptal");
								if(AracBilgi[vehicleid][aracParca][8] > 0) return hataMesaji( playerid, "Araca modifiye atmadan önce varolan parçayý kaldýrýn."),ShowPlayerDialog(playerid, DIALOG_ARACMOD, DIALOG_STYLE_LIST, "Modifiye Parçalarý", "Egzos\nÖn Tampon\nArka Tampon\nTavan\nRüzgarlýk\nYan Etekler\nJantlar\nStereo\nHidrolik\nNitro", "Seç", "Iptal");
								new cid = TPInfo[ playerid ][ tID ];
								TPInfo[ playerid ][ tType ] = CARMODTYPE_STEREO;
								TPInfo[ playerid ][ tPaintjob ] = false;

								TogglePlayerControllable( playerid, false );
								TuningTDControl( playerid, true );

								format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cIsim ] );
								PlayerTextDrawSetString( playerid, AracModifye[ playerid ][ 3 ], globalstring );
								format( globalstring, sizeof( globalstring ), "%d$", cInfo[ cid ][ cFiyat ] );
								PlayerTextDrawSetString( playerid, AracModifye[ playerid ][ 6 ], globalstring );

								AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

								GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 0, -6, 2 );
								SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

								GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
								SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

								SelectTextDraw( playerid, RENK_DO );
							}
							case 8: {

								for( new i = 0; i < MAX_PARCA; i++ ) {
									if( cInfo[ i ][ cTip ] == CARMODTYPE_HYDRAULICS ) {
										if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
											TPInfo[ playerid ][ tID ] = i;
											break;
										}
									}
								}
								if( TPInfo[ playerid ][ tID ] == -1 ) return hataMesaji( playerid, "Bu araca uygun parça bulunmuyor."),ShowPlayerDialog(playerid, DIALOG_ARACMOD, DIALOG_STYLE_LIST, "Modifiye Parçalarý", "Egzos\nÖn Tampon\nArka Tampon\nTavan\nRüzgarlýk\nYan Etekler\nJantlar\nStereo\nHidrolik\nNitro", "Seç", "Iptal");
								if(AracBilgi[vehicleid][aracParca][9] > 0) return hataMesaji( playerid, "Araca modifiye atmadan önce varolan parçayý kaldýrýn."),ShowPlayerDialog(playerid, DIALOG_ARACMOD, DIALOG_STYLE_LIST, "Modifiye Parçalarý", "Egzos\nÖn Tampon\nArka Tampon\nTavan\nRüzgarlýk\nYan Etekler\nJantlar\nStereo\nHidrolik\nNitro", "Seç", "Iptal");
								new cid = TPInfo[ playerid ][ tID ];
								TPInfo[ playerid ][ tType ] = CARMODTYPE_HYDRAULICS;
								TPInfo[ playerid ][ tPaintjob ] = false;

								TogglePlayerControllable( playerid, false );
								TuningTDControl( playerid, true );

								format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cIsim ] );
								PlayerTextDrawSetString( playerid, AracModifye[ playerid ][ 3 ], globalstring );
								format( globalstring, sizeof( globalstring ), "%d$", cInfo[ cid ][ cFiyat ] );
								PlayerTextDrawSetString( playerid, AracModifye[ playerid ][ 6 ], globalstring );

								AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

								GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 2, 2, 2 );
								SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

								GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
								SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

								SelectTextDraw( playerid, RENK_DO );
							}
							case 9: {

								for( new i = 0; i < MAX_PARCA; i++ ) {
									if( cInfo[ i ][ cTip ] == CARMODTYPE_NITRO ) {
										if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
											TPInfo[ playerid ][ tID ] = i;
											break;
										}
									}
								}
								if( TPInfo[ playerid ][ tID ] == -1 ) return hataMesaji( playerid, "Bu araca uygun parça bulunmuyor."),ShowPlayerDialog(playerid, DIALOG_ARACMOD, DIALOG_STYLE_LIST, "Modifiye Parçalarý", "Egzos\nÖn Tampon\nArka Tampon\nTavan\nRüzgarlýk\nYan Etekler\nJantlar\nStereo\nHidrolik\nNitro", "Seç", "Iptal");
								if(AracBilgi[vehicleid][aracParca][5] > 0) return hataMesaji( playerid, "Araca modifiye atmadan önce varolan parçayý kaldýrýn."),ShowPlayerDialog(playerid, DIALOG_ARACMOD, DIALOG_STYLE_LIST, "Modifiye Parçalarý", "Egzos\nÖn Tampon\nArka Tampon\nTavan\nRüzgarlýk\nYan Etekler\nJantlar\nStereo\nHidrolik\nNitro", "Seç", "Iptal");
								new cid = TPInfo[ playerid ][ tID ];
								TPInfo[ playerid ][ tType ] = CARMODTYPE_NITRO;
								TPInfo[ playerid ][ tPaintjob ] = false;

								TogglePlayerControllable( playerid, false );
								TuningTDControl( playerid, true );

								format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cIsim ] );
								PlayerTextDrawSetString( playerid, AracModifye[ playerid ][ 3 ], globalstring );
								format( globalstring, sizeof( globalstring ), "%d$", cInfo[ cid ][ cFiyat ] );
								PlayerTextDrawSetString( playerid, AracModifye[ playerid ][ 6 ], globalstring );

								AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

                                                GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 0, -6, 2 ); // done
                                                SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

                                                GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
                                                SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

                                                SelectTextDraw( playerid, RENK_DO );
                                            }
                                        }
                                    }
                                    else if( !response ) {
                                    	SetCameraBehindPlayer( playerid );
                                    	SetPVarInt(playerid, "modifiyeyapiyor", 0);
                                    }
                                }
                                case DIALOG_ENVANTER_MAYMUNCUK:
                                {
                                	if(response)
                                	{
                                		new sayfa = GetPVarInt(playerid, "sayfa");
                                		switch(listitem)
                                		{
                                			case 0 :
                                			{
                                				EvEsyaBirak(playerid, sayfa);
                                			}
                                			case 1 :
                                			{
                                				ItemSil(playerid, sayfa);
                                				SunucuMesaji(playerid, "Eþyanýzý baþarýyla sildiniz.");
                                			}
                                		}
                                	}
                                }
                                case DIALOG_YEDEK_ANAHTAR:
                                {
                                	if(response)
                                	{
                                		new sayfa = GetPVarInt(playerid, "sayfa");
                                		switch(listitem)
                                		{
                                			case 0 :
                                			{
                                				if(AracDurumuCek(EnvanterData[playerid][i_var][sayfa]) == 0) return hataMesaji(playerid, "Bu anahtara atanan araç spawn olmamýþ.");
                                				new aracid = AracSQLBul(EnvanterData[playerid][i_var][sayfa]), icerik[250];
                                				if(aracid == -1) return hataMesaji(playerid, "Anahtarýn ait olduðu araç bulunamadý.");
                                				format(icerik, sizeof(icerik), "{FFFFFF}Araç Modeli: {F5E600}%s{FFFFFF}\nPlaka: {F5E600}%s{FFFFFF}\nAnahtar ID: {F5E600}%d{FFFFFF}", AracModel(AracBilgi[aracid][aracModel]), AracBilgi[aracid][aracPlaka], EnvanterData[playerid][i_var][sayfa]);
                                				ShowPlayerDialog(playerid, BOS_MESAJ, DIALOG_STYLE_MSGBOX, "{F5E600}Anahtar Bilgileri", icerik, "Tamam","");
                                			}
                                			case 1 :
                                			{
                                				if(AracDurumuCek(EnvanterData[playerid][i_var][sayfa]) == 0) return hataMesaji(playerid, "Bu anahtara atanan araç spawn olmamýþ.");
                                				new aracid = AracSQLBul(EnvanterData[playerid][i_var][sayfa]);
                                				if(aracid == -1) return hataMesaji(playerid, "Anahtarýn ait olduðu araç bulunamadý.");
                                				if(AracBilgi[aracid][aracSahip] != oyuncuData[playerid][oID]) return hataMesaji(playerid, "Anahtarý baþkasýna verebilmek için aracýn sahibi olmalýsýnýz.");
                                				oyuncuData[playerid][oAnahtarOnay] = 1;
                                				IpucuMesaji(playerid, "Anahtarý vermek için '/esyaver [playerid] [%d]' komutunu kullanýn.", sayfa);
                                			}
                                			case 2 :
                                			{
                                				ItemSil(playerid, sayfa);
                                				SunucuMesaji(playerid, "Eþyanýzý baþarýyla sildiniz.");
                                			}
                                		}
                                	}
                                }
                                case DIALOG_PENSE:
                                {
                                	if(response)
                                	{
                                		new sayfa = GetPVarInt(playerid, "sayfa");
                                		switch(listitem)
                                		{
                                			case 0 :
                                			{
                                				oyuncuData[playerid][oPenseOnay] = true;
                                				SunucuMesaji(playerid, "Kelepçe kýrma onayý aldýnýz þimdi '/kelepcekir [oyuncuid]' komutunu kullanýn.");
                                			}
                                			case 1 :
                                			{
                                				ItemSil(playerid, sayfa);
                                				SunucuMesaji(playerid, "Eþyanýzý baþarýyla sildiniz.");
                                			}
                                		}
                                	}
                                }
                                case DIALOG_CRAFTMALZEME:
                                {
                                	if(response)
                                	{
                                		new sayfa = GetPVarInt(playerid, "sayfa");
                                		switch(listitem)
                                		{
                                			case 0 :
                                			{
                                				EvEsyaBirak(playerid, sayfa);
                                			}
                                			case 1 :
                                			{
                                				ItemSil(playerid, sayfa);
                                				SunucuMesaji(playerid, "Eþyanýzý baþarýyla sildiniz.");
                                			}
                                		}
                                	}
                                }
                                case DIALOG_ENVANTER_KOLAGAZOZ:
                                {
                                	if(response)
                                	{
                                		new sayfa = GetPVarInt(playerid, "sayfa");
                                		switch(listitem)
                                		{
                                			case 0 :
                                			{
                                				new query[95];
                                				format(query, sizeof(query), "** %s %s adlý ürünün kapaðýný açar ve içmeye hazýr hale getirir.", OyuncuIsim(playerid),ItemArray[ EnvanterData[playerid][i_tip][sayfa] - 1 ][iisim]);
                                				ProxDetector(12, playerid, query, RENK_PEMBE);
                                				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
                                				CanYukselt(playerid, 10);
                                				ItemSil(playerid, sayfa);
                                			}
                                			case 1 :
                                			{
                                				EvEsyaBirak(playerid, sayfa);
                                			}
                                			case 2 :
                                			{
                                				ItemSil(playerid, sayfa);
                                				SunucuMesaji(playerid, "Eþyanýzý baþarýyla sildiniz.");
                                			}
                                		}
                                	}
                                }
                                case DIALOG_ENVANTER_YIYECEK:
                                {
                                	if(response)
                                	{
                                		new sayfa = GetPVarInt(playerid, "sayfa");
                                		switch(listitem)
                                		{
                                			case 0 :
                                			{
                                				new query[95];
                                				format(query, sizeof(query), "** %s, %s adlý ürünü çýkarýr ve aðzýna doðru götürerek yer.", OyuncuIsim(playerid),ItemArray[ EnvanterData[playerid][i_tip][sayfa] - 1 ][iisim]);
                                				ProxDetector(12, playerid, query, RENK_PEMBE);
                                				ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 1, 1, 0, 0, 1);
                                				switch(EnvanterData[playerid][i_tip][sayfa]) {
                                					case 17 .. 18: {
                                						CanYukselt(playerid, 5);
                                					}
                                					case 20,22: {
                                						CanYukselt(playerid, 10);
                                					}
                                					case 21: {
                                						CanYukselt(playerid, 20);
                                					}
                                					case 23: {
                                						CanYukselt(playerid, 50);
                                					}
                                					case 24: {
                                						CanYukselt(playerid, 15);
                                					}
                                					case 19: {
                                						CanYukselt(playerid, 30);
                                					}
                                				}
                                				ItemSil(playerid, sayfa);
                                			}
                                			case 1 :
                                			{
                                				EvEsyaBirak(playerid, sayfa);
                                			}
                                			case 2 :
                                			{
                                				ItemSil(playerid, sayfa);
                                				SunucuMesaji(playerid, "Eþyanýzý baþarýyla sildiniz.");
                                			}
                                		}
                                	}
                                }
                                case DIALOG_ENVANTER_CAKMAK:
                                {
                                	if(response)
                                	{
                                		new sayfa = GetPVarInt(playerid, "sayfa");
                                		switch(listitem)
                                		{
                                			case 0 :
                                			{
                                				EvEsyaBirak(playerid, sayfa);
                                			}
                                			case 1 :
                                			{
                                				ItemSil(playerid, sayfa);
                                				SunucuMesaji(playerid, "Eþyanýzý baþarýyla sildiniz.");
                                			}
                                		}
                                	}
                                }
                                case DIALOG_REKLAM:
                                {
                                	if(response)
                                	{
                                		if(strlen(inputtext) >= 5)
                                		{
                                			if(oyuncuData[playerid][oPara] >= 2 * strlen(inputtext))
                                			{
                                				new buffer[225],
                                				message[128],
                                				len = strlen(inputtext);

                                				ParaEkle(playerid, -(2 * strlen(inputtext)));

                                				strcat(message, inputtext);
                                				if(len + 16 > 128)
                                				{
                                					strmid(buffer, message, 0, 128 - 16 - 4);
                                					format(buffer, sizeof(buffer), "[%s - Reklam]: %s ...", FirmaInfo[oyuncuData[playerid][oMedyatercih]][fIsim], buffer);
                                					strdel(message, 0, 128 - 16 - 4);
                                					format(message, sizeof(message), "[%s - Reklam]: ... %s", FirmaInfo[oyuncuData[playerid][oMedyatercih]][fIsim], message);
                                					SendClientMessageToAll(RENK_REKLAM, buffer);
                                					SendClientMessageToAll(RENK_REKLAM, message);
                                				}
                                				else
                                				{
                                					format(message, 128, "[%s - Reklam]: %s", FirmaInfo[oyuncuData[playerid][oMedyatercih]][fIsim], message);
                                					SendClientMessageToAll(RENK_REKLAM, message);
                                				}

                                			}
                                			else
                                			{
                                				hataMesaji(playerid, "Reklam vermek için yeterli paranýz bulunmamaktadýr.");
                                			}
                                		}
                                		else
                                		{
                                			ShowPlayerDialog(playerid, DIALOG_REKLAM, DIALOG_STYLE_INPUT, "{F2DA4E}Reklam", "Lütfen reklam metninizi giriniz: (Harf Baþý Ücret: 2$)", "Seç", "Iptal");
                                			hataMesaji(playerid, "Reklamýnýz 5 karakterden kýsa olamaz.");
                                		}
                                	}
                                }
                                case DIALOG_MTERCIH:
                                {
                                	if(response)
                                	{
                                		oyuncuData[playerid][oMedyatercih] = oyuncuData[playerid][pFirmaSecID][listitem];
                                		OyuncuKaydet(playerid);
                                		SunucuMesaji(playerid, "Medya firmasý seçiminizi baþarýyla yaptýnýz.");
                                	}
                                }
                            }
                            if(dialogid == DIALOG_CRAFT_LISTE)
                            {
                            	if(response)
                            	{
                            		new tid = GetPVarInt(playerid, "cTezgahID");
                            		if(ItemCraftKontrol(playerid, 87) > 0 && ItemCraftKontrol(playerid, 88) > 0 && ItemCraftKontrol(playerid, 89) > 0 && ItemCraftKontrol(playerid, 91) < 1 && ItemCraftKontrol(playerid, 90) < 1 && ItemCraftKontrol(playerid, 50) < 1 && ItemCraftKontrol(playerid, 97) < 1)
                            		{
                            			if(oyuncuData[playerid][oUretimYetenek] < 3) return hataMesaji(playerid, "Bu eþyalarla üretim yapabilmek için üretim yeteneðiniz en az 3 seviye olmalýdýr.");
                            			ItemSifirla(playerid, 87), ItemSifirla(playerid, 88), ItemSifirla(playerid, 89);
                            			SetTimerEx("craftyapiyor", 60000, false, "id", playerid, 52);
                            			GameTextForPlayer(playerid, "~w~CRAFT YAPILIYOR...", 1200000, 4);
                            			oyuncuData[playerid][oCraft] = true;
                            			ApplyAnimation(playerid,"BD_FIRE","wash_up",4.1, 1, 1, 1, 1, 1, 1);
                            			TogglePlayerControllable(playerid, false);
                            			TezgahInfo[tid][tGeciciLabel] = CreateDynamic3DTextLabel("[CRAFT YAPILIYOR]", 0x79BFA3FF,  TezgahInfo[tid][tX],TezgahInfo[tid][tY],TezgahInfo[tid][tZ] + 0.4, 3.0);
                            		}
                            		else if(ItemCraftKontrol(playerid, 91) > 0 && ItemCraftKontrol(playerid, 87) > 0 && ItemCraftKontrol(playerid, 88) > 0 && ItemCraftKontrol(playerid, 89) > 0
                            			&& ItemCraftKontrol(playerid, 90) > 0 && ItemCraftKontrol(playerid, 50) > 0 && ItemCraftKontrol(playerid, 97) < 1 && ItemCraftKontrol(playerid, 98) < 1 && ItemCraftKontrol(playerid, 96) < 1)
                            		{
                            			if(oyuncuData[playerid][oUretimYetenek] < 4) return hataMesaji(playerid, "Bu eþyalarla üretim yapabilmek için üretim yeteneðiniz en az 5 seviye olmalýdýr.");
                            			ItemSifirla(playerid, 91), ItemSifirla(playerid, 50), ItemSifirla(playerid, 87), ItemSifirla(playerid, 88), ItemSifirla(playerid, 89),  ItemSifirla(playerid, 90);
                            			SetTimerEx("craftyapiyor", 60000, false, "id", playerid, 49);
                            			GameTextForPlayer(playerid, "~w~CRAFT YAPILIYOR...", 1200000, 4);
                            			oyuncuData[playerid][oCraft] = true;
                            			ApplyAnimation(playerid,"BD_FIRE","wash_up",4.1, 1, 1, 1, 1, 1, 1);
                            			TogglePlayerControllable(playerid, false);
                            			TezgahInfo[tid][tGeciciLabel] = CreateDynamic3DTextLabel("[CRAFT YAPILIYOR]", 0x79BFA3FF,  TezgahInfo[tid][tX],TezgahInfo[tid][tY],TezgahInfo[tid][tZ] + 0.4, 3.0);
                            		}
                            		else if(ItemCraftKontrol(playerid, 72) > 0 && ItemCraftKontrol(playerid, 87) > 0 && ItemCraftKontrol(playerid, 88) > 0 && ItemCraftKontrol(playerid, 92) > 0 && ItemCraftKontrol(playerid, 89) < 1 && ItemCraftKontrol(playerid, 90) < 1 && ItemCraftKontrol(playerid, 97) < 1)
                            		{
                            			if(oyuncuData[playerid][oUretimYetenek] < 2) return hataMesaji(playerid, "Bu eþyalarla üretim yapabilmek için üretim yeteneðiniz en az 2 seviye olmalýdýr.");
                            			ItemSifirla(playerid, 72), ItemSifirla(playerid, 87), ItemSifirla(playerid, 88), ItemSifirla(playerid, 92);
                            			SetTimerEx("craftyapiyor", 60000, false, "id", playerid, 53);
                            			GameTextForPlayer(playerid, "~w~CRAFT YAPILIYOR...", 1200000, 4);
                            			oyuncuData[playerid][oCraft] = true;
                            			ApplyAnimation(playerid,"BD_FIRE","wash_up",4.1, 1, 1, 1, 1, 1, 1);
                            			TogglePlayerControllable(playerid, false);
                            			TezgahInfo[tid][tGeciciLabel] = CreateDynamic3DTextLabel("[CRAFT YAPILIYOR]", 0x79BFA3FF,  TezgahInfo[tid][tX],TezgahInfo[tid][tY],TezgahInfo[tid][tZ] + 0.4, 3.0);
                            		}
                            		else if(ItemCraftKontrol(playerid, 97) > 0 && ItemCraftKontrol(playerid, 88) > 0 && ItemCraftKontrol(playerid, 89) > 0 && ItemCraftKontrol(playerid, 90) < 1)
                            		{
                            			if(oyuncuData[playerid][oUretimYetenek] < 6) return hataMesaji(playerid, "Bu eþyalarla üretim yapabilmek için üretim yeteneðiniz en az 2 seviye olmalýdýr.");
                            			ItemSifirla(playerid, 97), ItemSifirla(playerid, 87), ItemSifirla(playerid, 88), ItemSifirla(playerid, 89);
                            			SetTimerEx("craftyapiyor", 60000, false, "id", playerid, 93);
                            			GameTextForPlayer(playerid, "~w~CRAFT YAPILIYOR...", 1200000, 4);
                            			oyuncuData[playerid][oCraft] = true;
                            			ApplyAnimation(playerid,"BD_FIRE","wash_up",4.1, 1, 1, 1, 1, 1, 1);
                            			TogglePlayerControllable(playerid, false);
                            			TezgahInfo[tid][tGeciciLabel] = CreateDynamic3DTextLabel("[CRAFT YAPILIYOR]", 0x79BFA3FF,  TezgahInfo[tid][tX],TezgahInfo[tid][tY],TezgahInfo[tid][tZ] + 0.4, 3.0);
                            		}
                            		else if(ItemCraftKontrol(playerid, 98) > 0 && ItemCraftKontrol(playerid, 90) > 0 && ItemCraftKontrol(playerid, 92) > 0 )
                            		{
                            			if(oyuncuData[playerid][oUretimYetenek] < 5) return hataMesaji(playerid, "Bu eþyalarla üretim yapabilmek için üretim yeteneðiniz en az 2 seviye olmalýdýr.");
                            			ItemSifirla(playerid, 98), ItemSifirla(playerid, 90), ItemSifirla(playerid, 88), ItemSifirla(playerid, 92);
                            			SetTimerEx("craftyapiyor", 60000, false, "id", playerid, 94);
                            			GameTextForPlayer(playerid, "~w~CRAFT YAPILIYOR...", 1200000, 4);
                            			oyuncuData[playerid][oCraft] = true;
                            			ApplyAnimation(playerid,"BD_FIRE","wash_up",4.1, 1, 1, 1, 1, 1, 1);
                            			TogglePlayerControllable(playerid, false);
                            			TezgahInfo[tid][tGeciciLabel] = CreateDynamic3DTextLabel("[CRAFT YAPILIYOR]", 0x79BFA3FF,  TezgahInfo[tid][tX],TezgahInfo[tid][tY],TezgahInfo[tid][tZ] + 0.4, 3.0);
                            		}
                            		else if(ItemCraftKontrol(playerid, 96) > 0 && ItemCraftKontrol(playerid, 88) > 0 && ItemCraftKontrol(playerid, 91) > 0 )
                            		{
                            			if(oyuncuData[playerid][oUretimYetenek] < 2) return hataMesaji(playerid, "Bu eþyalarla üretim yapabilmek için üretim yeteneðiniz en az 2 seviye olmalýdýr.");
                            			ItemSifirla(playerid, 98), ItemSifirla(playerid, 96), ItemSifirla(playerid, 88), ItemSifirla(playerid, 91);
                            			SetTimerEx("craftyapiyor", 60000, false, "id", playerid, 95);
                            			GameTextForPlayer(playerid, "~w~CRAFT YAPILIYOR...", 1200000, 4);
                            			oyuncuData[playerid][oCraft] = true;
                            			ApplyAnimation(playerid,"BD_FIRE","wash_up",4.1, 1, 1, 1, 1, 1, 1);
                            			TogglePlayerControllable(playerid, false);
                            			TezgahInfo[tid][tGeciciLabel] = CreateDynamic3DTextLabel("[CRAFT YAPILIYOR]", 0x79BFA3FF,  TezgahInfo[tid][tX],TezgahInfo[tid][tY],TezgahInfo[tid][tZ] + 0.4, 3.0);
                            		}
                            		else if(ItemCraftKontrol(playerid, 87) > 0 && ItemCraftKontrol(playerid, 98) > 0 && ItemCraftKontrol(playerid, 90) > 0 && ItemCraftKontrol(playerid, 89) > 0 && ItemCraftKontrol(playerid, 92) < 1)
                            		{
                            			if(oyuncuData[playerid][oUretimYetenek] < 5) return hataMesaji(playerid, "Bu eþyalarla üretim yapabilmek için üretim yeteneðiniz en az 2 seviye olmalýdýr.");
                            			ItemSifirla(playerid, 87), ItemSifirla(playerid, 98), ItemSifirla(playerid, 90), ItemSifirla(playerid, 89);
                            			SetTimerEx("craftyapiyor", 60000, false, "id", playerid, 51);
                            			GameTextForPlayer(playerid, "~w~CRAFT YAPILIYOR...", 1200000, 4);
                            			oyuncuData[playerid][oCraft] = true;
                            			ApplyAnimation(playerid,"BD_FIRE","wash_up",4.1, 1, 1, 1, 1, 1, 1);
                            			TogglePlayerControllable(playerid, false);
                            			TezgahInfo[tid][tGeciciLabel] = CreateDynamic3DTextLabel("[CRAFT YAPILIYOR]", 0x79BFA3FF,  TezgahInfo[tid][tX],TezgahInfo[tid][tY],TezgahInfo[tid][tZ] + 0.4, 3.0);
                            		}
                            		else if(ItemCraftKontrol(playerid, 87) > 0 && ItemCraftKontrol(playerid, 88) > 0 && ItemCraftKontrol(playerid, 92) < 1 && ItemCraftKontrol(playerid, 89) < 1)
                            		{
                            			if(oyuncuData[playerid][oUretimYetenek] < 2) return hataMesaji(playerid, "Bu eþyalarla üretim yapabilmek için üretim yeteneðiniz en az 2 seviye olmalýdýr.");
                            			ItemSifirla(playerid, 87), ItemSifirla(playerid, 98), ItemSifirla(playerid, 90), ItemSifirla(playerid, 89);
                            			SetTimerEx("craftyapiyor", 60000, false, "id", playerid, 32);
                            			GameTextForPlayer(playerid, "~w~CRAFT YAPILIYOR...", 1200000, 4);
                            			oyuncuData[playerid][oCraft] = true;
                            			ApplyAnimation(playerid,"BD_FIRE","wash_up",4.1, 1, 1, 1, 1, 1, 1);
                            			TogglePlayerControllable(playerid, false);
                            			TezgahInfo[tid][tGeciciLabel] = CreateDynamic3DTextLabel("[CRAFT YAPILIYOR]", 0x79BFA3FF,  TezgahInfo[tid][tX],TezgahInfo[tid][tY],TezgahInfo[tid][tZ] + 0.4, 3.0);
                            		}
                            		else
                            		{
                            			for (new i = 0; i < MAX_ITEM; i++)
                            			{
                            				if (EnvanterData[playerid][i_aktif][i] && EnvanterData[playerid][i_craft][i]) {
                            					oyuncuData[playerid][pEnvanterAgirlik] = floatsub(oyuncuData[playerid][pEnvanterAgirlik],ItemArray[ EnvanterData[playerid][i_tip][i] - 1 ][igram]);
                            					EnvanterData[playerid][i_tip][i] = 0;
                            					EnvanterData[playerid][i_var][i] = 0;
                            					EnvanterData[playerid][i_aktif][i] = false;
                            					EnvanterData[playerid][i_craft][i] = false;
                            					new query[180];
                            					mysql_format(g_SQL, query, sizeof(query), "DELETE FROM `itemler` WHERE `slot` = '%d' AND `oyuncu` = '%e'", i, oyuncuData[playerid][oIsim]);
                            					mysql_query(g_SQL, query);
                            					SetTimerEx("craftyapiyor", 60000, false, "id", playerid, 0);
                            					GameTextForPlayer(playerid, "~w~CRAFT YAPILIYOR...", 1200000, 4);
                            					oyuncuData[playerid][oCraft] = true;
                            					ApplyAnimation(playerid,"BD_FIRE","wash_up",4.1, 1, 1, 1, 1, 1, 1);
                            					TogglePlayerControllable(playerid, false);
                            					TezgahInfo[tid][tGeciciLabel] = CreateDynamic3DTextLabel("[CRAFT YAPILIYOR]", 0x79BFA3FF,  TezgahInfo[tid][tX],TezgahInfo[tid][tY],TezgahInfo[tid][tZ] + 0.4, 3.0);
                            				}
                            			}
                            		}
                            	}
                            }
                            if(dialogid == DIALOG_USTUNUARADIM)
                            {
                            	if(response)
                            	{
                            		new karsioyuncu = GetPVarInt(playerid, "ustarakarsi");
                            		if(!EnvanterData[karsioyuncu][i_aktif][listitem]) return hataMesaji(playerid, "Bu slotta eþya bulunmuyor.");
                            		new item_isim[60];
                            		SetPVarInt(playerid, "sayfa", listitem);
                            		format (item_isim, sizeof(item_isim), "{90C3D4}%s", ItemArray[ EnvanterData[karsioyuncu][i_tip][listitem] - 1 ][iisim]);
                            		if(response)
                            		{
                            			if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return hataMesaji(playerid, "Kiþinin üzerindeki eþyaya iþlem yapamazsýn.");
                            			ShowPlayerDialog(playerid,DIALOG_ELKOYDUM,DIALOG_STYLE_LIST,item_isim,"El Koy","Seç","Iptal");
                            		}
                            	}
                            }
                            if(dialogid == DIALOG_MOBILYA_SATINAL)
                            {

                            	if(response)
                            	{
                            		new kategoriID = GetPVarInt(playerid, "PVar_MobilyaKategori");
                            		new sayi;
                            		for (new i = 0; i < sizeof(mobilyaveri); i++)
                            		{
                            			if(mobilyaveri[i][mobilyaTur] == kategoriID)
                            			{
                            				if(listitem != sayi)
                            				{
                            					sayi++;
                            				}
                            				else
                            				{
                            					SetPVarInt(playerid, "PVar_MobilyaModel", mobilyaveri[i][mobilyaModel]);
                            					SetPVarInt(playerid, "PVar_MobilyaFiyat", mobilyaveri[i][mobilyaFiyat]);
                            					DeletePVar(playerid, "PVar_MobilyaKategori");
                            					return Dialog_Show(playerid, DIALOG_SATINAL_ONAY, DIALOG_STYLE_MSGBOX, "Mobilya Satýn Al", "%s isimli mobilyayý $%d fiyatýna almak istediðine emin misin?", "Onayla", "Red", mobilyaveri[i][mobilyaIsim], mobilyaveri[i][mobilyaFiyat]);
                            				}
                            			}
                            		}
                            	}
                            	else if(!response){
                            		DekorMenuGoster(playerid);
                            	}
                            }

                            if(dialogid == DIALOG_ENVANTER)
                            {
                            	if(response)
                            	{
                            		if(!EnvanterData[playerid][i_aktif][listitem]) return hataMesaji(playerid, "Bu slotta eþya bulunmuyor.");
									new item_isim[85];
                            		SetPVarInt(playerid, "sayfa", listitem);
                            		format (item_isim, sizeof(item_isim), "{90C3D4}%s", ItemArray[ EnvanterData[playerid][i_tip][listitem] - 1 ][iisim]);
                            		SunucuMesaji(playerid, "Eþya Ýsim: %s - Eþya Slot: %d", ItemArray[ EnvanterData[playerid][i_tip][listitem] - 1 ][iisim], listitem);
									if(response)
                            		{
                            			switch(ItemArray[EnvanterData[playerid][i_tip][listitem] - 1][iid])
                            			{
                            				case 1 .. 2: {
                            					ShowPlayerDialog(playerid,DIALOG_ENVANTER_SIGARA, DIALOG_STYLE_LIST,item_isim,"Yak\nEve Býrak\nÇöpe At","Seç","Iptal");
                            				}
                            				case 3: {
                            					ShowPlayerDialog(playerid,DIALOG_ENVANTER_CAKMAK,DIALOG_STYLE_LIST,item_isim,"Eve Býrak\nÇöpe At","Seç","Iptal");
                            				}
                            				case 4,5,6,7,9,10,11: {
                            					ShowPlayerDialog(playerid,DIALOG_ENVANTER_ICKI,DIALOG_STYLE_LIST,item_isim,"Ýçkiyi Ýç\nEve Býrak\nÇöpe At","Seç","Iptal");
                            				}
                            				case 8,12,13: {
                            					ShowPlayerDialog(playerid,DIALOG_ENVANTER_KOLAGAZOZ,DIALOG_STYLE_LIST,item_isim,"Ýçeceði Ýç\nEve Býrak\nÇöpe At","Seç","Iptal");
                            				}
                            				case 17 .. 24: {
                            					ShowPlayerDialog(playerid,DIALOG_ENVANTER_YIYECEK,DIALOG_STYLE_LIST,item_isim,"Yiyeceði Ye\nEve Býrak\nÇöpe At","Seç","Iptal");
                            				}
                            				case 32: {
                            					ShowPlayerDialog(playerid,DIALOG_ENVANTER_MAYMUNCUK,DIALOG_STYLE_LIST,item_isim,"Eve Býrak\nÇöpe At","Seç","Iptal");
                            				}
                            				case 86: {
                            					ShowPlayerDialog(playerid,DIALOG_ENVANTER_MASKE,DIALOG_STYLE_LIST,item_isim,"Maske Tak/Çýkar\nEve Býrak\nÇöpe At","Seç","Iptal");
                            				}
                            				case 50,72,87,88,89,90,91,92,96,97,98: {
                            					ShowPlayerDialog(playerid,DIALOG_ENVANTER_CRAFT,DIALOG_STYLE_LIST,item_isim,"Craft Listesine Ekle/Çýkar\nÇöpe At","Seç","Iptal");
                            				}
                            				case 49,51,52,53,93,94,95: {
                            					ShowPlayerDialog(playerid,DIALOG_CRAFTMALZEME,DIALOG_STYLE_LIST,item_isim,"Eve Býrak\nÇöpe At","Seç","Iptal");
                            				}
											case 34:
                            				{	
                            					format (item_isim, sizeof(item_isim), "{90C3D4}%s | %d gram", ItemArray[ EnvanterData[playerid][i_tip][listitem] - 1 ][iisim], EnvanterData[playerid][i_var][listitem]);
                            					ShowPlayerDialog(playerid,DIALOG_UYUS_KULLAN,DIALOG_STYLE_LIST,item_isim,"Tüket\nEve Býrak\nYok Et","Seç","Iptal");
                            				}
                            				case 35,37,38,39,55,56,57,58,59,60:
                            				{
												format (item_isim, sizeof(item_isim), "{90C3D4}%s | %d gram", ItemArray[ EnvanterData[playerid][i_tip][listitem] - 1 ][iisim], EnvanterData[playerid][i_var][listitem]);
                            					ShowPlayerDialog(playerid,DIALOG_UYUS_KULLAN,DIALOG_STYLE_LIST,item_isim,"Tüket\nEve Býrak\nYok Et","Seç","Iptal");
                            				}
                            				case 99,100,101,102,103:
                            				{
                            					new durum = 0;
                            					if(!IsPlayerInAnyVehicle(playerid))
                            					{
                            						if(AktoreYakinmi(playerid) != -1)
                            						{
                            							if(npcData[AktoreYakinmi(playerid)][npcTur] == 2)
                            							{
                            								durum++;
                            								ShowPlayerDialog(playerid, DIALOG_SILAH_KULLAN, DIALOG_STYLE_LIST, item_isim, "Eline Al\nYere Býrak\nÞarjor Satýn Al", "Seç", "Iptal");
                            							}
                            						}
                            					}
                            					if(!durum) ShowPlayerDialog(playerid, DIALOG_SILAH_KULLAN, DIALOG_STYLE_LIST, item_isim, "Eline Al\nEve Býrak", "Seç", "Iptal");
                            				}
                            				case 104:
                            				{
                            					ShowPlayerDialog(playerid, DIALOG_KAMERA_KULLAN, DIALOG_STYLE_LIST, item_isim, "Eline Al\nEve Býrak\nÇöpe At", "Seç", "Iptal");
                            				}
                            				case 106:
                            				{
                            					ShowPlayerDialog(playerid, DIALOG_KIYAFET_POSET, DIALOG_STYLE_LIST, item_isim, "Giyin\nÇöpe At", "Seç", "Ýptal");
                            				}
                            				case 107:
                            				{
                            					ShowPlayerDialog(playerid, DIALOG_YEDEK_ANAHTAR, DIALOG_STYLE_LIST, item_isim, "Anahtar Bilgileri\nAnahtar Ver\nAnahtarý Kýr", "Seç", "Ýptal");
                            				}
                            				case 108:
                            				{
                            					ShowPlayerDialog(playerid, DIALOG_PENSE, DIALOG_STYLE_LIST, item_isim, "Kelepçe Kýr\nÇöpe At", "Seç", "Ýptal");
                            				}
                            				case 109:
                            				{
                            					ShowPlayerDialog(playerid, DIALOG_DEODORANT_KULLAN, DIALOG_STYLE_LIST, item_isim, "Kullan\nEve Býrak\nÇöpe At", "Seç", "Ýptal");
                            				}
                            				case 110:
                            				{
                            					ShowPlayerDialog(playerid, DIALOG_ENVANTER_LOTO, DIALOG_STYLE_LIST, item_isim, "Kullan\nEve Býrak\nÇöpe At", "Seç", "Ýptal");
                            				}
                            				case 111:
                            				{
                            					ShowPlayerDialog(playerid, DIALOG_ENVANTER_YILBASI, DIALOG_STYLE_LIST, item_isim, "Ýncele\nÇöpe At", "Seç", "Ýptal");
                            				}
											case 112:
                            				{
                            					ShowPlayerDialog(playerid, DIALOG_TOHUM_KULLAN, DIALOG_STYLE_LIST, item_isim, "Marijuana Dik\nEve Býrak\nÇöpe At", "Seç", "Ýptal");
                            				}
											case 113:
                            				{
                            					ShowPlayerDialog(playerid, DIALOG_KSODA_KULLAN, DIALOG_STYLE_LIST, item_isim, "Eve Býrak\nÇöpe At", "Seç", "Ýptal");
                            				}
											case 114:
                            				{
                            					ShowPlayerDialog(playerid, DIALOG_BOLGE_UYUS, DIALOG_STYLE_LIST, item_isim, "Satýþý Baþlat/Bitir\nÇöpe At", "Seç", "Ýptal");
                            				}
											case 115:
                            				{
                            					ShowPlayerDialog(playerid, DIALOG_KOKO_KULLAN, DIALOG_STYLE_LIST, item_isim, "Koko Bitkisi Dik\nEve Býrak\nÇöpe At", "Seç", "Ýptal");
                            				}
											case 116:
                            				{	
                            					ShowPlayerDialog(playerid,DIALOG_KOKB_KULLAN,DIALOG_STYLE_LIST,item_isim,"Dönüþtür > Kokain\nYok Et","Seç","Iptal");
                            				}
											case 117:
                            				{	
                            					ShowPlayerDialog(playerid,DIALOG_KOVAN_SORGULA,DIALOG_STYLE_LIST,item_isim,"Mermi Kovanýný Sorgulat\nYok Et","Seç","Iptal");
                            				}
                            				case 118:
                            				{
                            					Dialog_Show(playerid, tamirkitikullan, DIALOG_STYLE_LIST, item_isim, "Tamir Kiti Kullan\nYok Et", "Seç", "Iptal");
                            				}
                            			}
                            		}
                            	}
                            }
                            if(dialogid == DIALOG_NPC_OLUSTUR)
                            {
                            	if(response)
                            	{
                            		npcYaratt(playerid, listitem);
                            	}
                            }
                            if(dialogid == AKTOR_MERMICI)
                            {
                            	if(response)
                            	{
                            		new silahid = mermiTCData[listitem][slhModelID], mermi = mermiTCData[listitem][slhSarjor], str[512];
                            		//if(oyuncuData[playerid][oSilah][SilahSlotBul[silahid]] != silahid) return BilgiText(playerid, "~r~~h~Mermisini almak istediðiniz silah üzerinizde bulunmuyor");
                            		if(oyuncuData[playerid][oPara] < mermiTCData[listitem][slhSarjorFiyat]) return hataMesaji(playerid, "Yeterli miktarda paran yok.");
                            		//if(oyuncuData[playerid][oMermi][SilahSlotBul[silahid]] > mermiTCData[listitem][slhSarjor]) return BilgiText(playerid, "~r~~h~Daha fazla þarjor alýnamaz");
                            		
                            		new query[250], Cache:kontrol;
                            		mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM player_weapons WHERE weapon_userid = %d AND weapon_gameid = %d AND weapon_statusid = %d", oyuncuData[playerid][oID], silahid, SILAH_OYUNCU_USTUNDE);
                            		kontrol = mysql_query(g_SQL, query);
                            		new rows = cache_num_rows();
                            		new mermikontrol;
                            		if(rows > 0)
                            		{
                            			cache_get_value_name_int(0, "weapon_ammo", mermikontrol);
										if(mermikontrol >= mermiTCData[listitem][slhSarjor]) return BilgiText(playerid, "~r~~h~Daha fazla þarjor alýnamaz");
										new toplammermi = mermi + mermikontrol;
										if(toplammermi > mermiTCData[listitem][slhSarjor])
										{
											toplammermi = mermiTCData[listitem][slhSarjor];
										}

                            			mysql_format(g_SQL, query, sizeof(query), "UPDATE player_weapons SET weapon_ammo = %d WHERE weapon_userid = %d AND weapon_gameid = %d AND weapon_statusid = %d", toplammermi, oyuncuData[playerid][oID], silahid, SILAH_OYUNCU_USTUNDE);
                            			mysql_tquery(g_SQL, query);

                            			format(str, sizeof(str), "~y~~h~%s~w~ için 30lu ~b~~h~%s~w~ satýn alýndý", mermiTCData[listitem][slhIsim], mermiTCData[listitem][slhSarjor], mermiTCData[listitem][slhSarjorTuru]);
	                            		BilgiText(playerid, str);
	                            		ParaEkle(playerid, -mermiTCData[listitem][slhSarjorFiyat]);
	                            		mermiciMesaji(playerid, "Soran olursa beni tanýmýyorsun, kaybol.");

										mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `player_weapons` WHERE `weapon_userid` = '%d' AND `weapon_statusid` = '%d'", oyuncuData[playerid][oID], SILAH_OYUNCU_USTUNDE);
										mysql_tquery(g_SQL, query, "OnPlayerGetWeapons", "d", playerid);
                            		}
                            		else
                            		{
                            			BilgiText(playerid, "~r~~h~Mermisini almak istediðiniz silah üzerinizde bulunmuyor");
                            		}
                            		cache_delete(kontrol);
                            	}
                            }

                            if(dialogid == AKTOR_SILAHCI_X)
                            {
                            	if(response)
                            	{
                            		new listid = GetPVarInt(playerid, "SilahTuccariList"), query[512];
                            		if(silahTCData[listid][slhModelID] == 25) if(ItemVarMi(playerid, 49) < 1 || ItemVarMi(playerid, 52) < 1 || ItemVarMi(playerid, 53) < 1 || ItemVarMi(playerid, 51) < 1 || ItemVarMi(playerid, 93) < 1) return tuccarMesaji(playerid, "Malzemelerin eksik olduðu için silahý yapamam. (Kabza,Gövde,Namlu,Gerdel,Fiþek Yataðý)");
                            		if(silahTCData[listid][slhModelID] == 22) if(ItemVarMi(playerid, 49) < 1 || ItemVarMi(playerid, 52) < 1 || ItemVarMi(playerid, 53) < 1 || ItemVarMi(playerid, 95) < 1) return tuccarMesaji(playerid, "Malzemelerin eksik olduðu için silahý yapamam. (Kabza,Gövde,Namlu,Sürgü Takýmý)");
                            		if(silahTCData[listid][slhModelID] == 28) if(ItemVarMi(playerid, 49) < 1 || ItemVarMi(playerid, 52) < 1 || ItemVarMi(playerid, 53) < 1 || ItemVarMi(playerid, 94) < 1) return tuccarMesaji(playerid, "Malzemelerin eksik olduðu için silahý yapamam. (Kabza,Gövde,Namlu,Hatve)");
                            		if(oyuncuData[playerid][oPara] < silahTCData[listid][slhFiyat] + silahTCData[listid][slhKapora]) return tuccarMesaji(playerid, "Sen benimle dalga mý geçiyorsun? Model + kapora ücretini görmedin mi! Ücreti tamamlamadan gözüme gözükme.");
                            		if(silahTCData[listid][slhModelID] == 25) ItemSifirla(playerid, 49), ItemSifirla(playerid, 52), ItemSifirla(playerid, 53),ItemSifirla(playerid,51),ItemSifirla(playerid, 93);
                            		if(silahTCData[listid][slhModelID] == 22) ItemSifirla(playerid, 49), ItemSifirla(playerid, 52), ItemSifirla(playerid, 53),ItemSifirla(playerid, 95);
                            		if(silahTCData[listid][slhModelID] == 28) ItemSifirla(playerid, 49), ItemSifirla(playerid, 52), ItemSifirla(playerid, 53),ItemSifirla(playerid, 94);
                            		oyuncuData[playerid][oSiparis][0] = silahTCData[listid][slhModelID];
                            		oyuncuData[playerid][oSiparis][1] = gettime() + silahTCData[listid][slhSaat] * 3600;
                            		ParaEkle(playerid, -(silahTCData[listid][slhFiyat] + silahTCData[listid][slhKapora]));
                            		Log_Kaydet("loglar/cptvice.txt", "[%s] %s adli kisi %d model silah icin $%d para ile siparis verdi.", Tarih(), OyuncuIsim(playerid), oyuncuData[playerid][oSiparis][0], silahTCData[listid][slhFiyat] + silahTCData[listid][slhKapora]);
                            		mysql_format(g_SQL, query, sizeof(query), "UPDATE `oyuncular` SET `SiparisModel` = '%d', `SiparisZaman` = '%d' WHERE `ID` = '%d' LIMIT 1", oyuncuData[playerid][oSiparis][0], oyuncuData[playerid][oSiparis][1], oyuncuData[playerid][oID]);
                            		mysql_tquery(g_SQL, query);
                            		tuccarMesaji(playerid, "Bu iþ tamam, artýk silahýnýn üretim durumunu kontrol edebilirsin.");
                            	}
                            }
                            if(dialogid == AKTOR_SILAHCI_Y)
                            {
                            	if(response)
                            	{
                            		new dataid = SilahDataCek(oyuncuData[playerid][oSiparis][0]);
                            		new silahid = silahTCData[dataid][slhModelID];
                            		new Cache:silahVericek, query[280];
									mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM player_weapons WHERE weapon_userid = %d AND weapon_statusid = %d AND weapon_gameid = %d", oyuncuData[playerid][oID], SILAH_OYUNCU_USTUNDE, silahid);
									silahVericek = mysql_query(g_SQL, query);
									new rowsx = cache_num_rows();
									cache_delete(silahVericek);
									if(rowsx) return tuccarMesaji(playerid, "Üzerinde %s taþýyorsun, gelen sipariþi teslim alabilmek için üstündekini bir yere býrakýp gel.", silahTCData[dataid][slhIsim]);
									new Cache:kontrol;
								    mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM player_weapons WHERE weapon_userid = '%d' AND `weapon_statusid` = '%d'", oyuncuData[playerid][oID], SILAH_OYUNCU_USTUNDE);
								    kontrol = mysql_query(g_SQL, query);
								    new rows = cache_num_rows();
								    if(rows > 1)
								    {
									 	return hataMesaji(playerid, "Üstünde maksimum iki adet silah bulundurabilirsin."), cache_delete(kontrol);
								    }
									cache_delete(kontrol);

                            		new Cache:GetWCache, silahsayisi;
                            		VeritabaniSilahVer(playerid, silahTCData[dataid][slhModelID], silahTCData[dataid][slhSarjor]);
                            		SilahlariVer(playerid);
                            		mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM oyuncular WHERE ID = '%d'", oyuncuData[playerid][oID]);
                            		GetWCache = mysql_query(g_SQL, query);
                            		cache_get_value_name_int(0, "AlinanSilah", silahsayisi);
                            		cache_delete(GetWCache);
                            		silahsayisi++;
                            		mysql_format(g_SQL, query, sizeof(query), "UPDATE oyuncular SET AlinanSilah = '%d' WHERE ID = '%d'", silahsayisi, oyuncuData[playerid][oID]);
                            		mysql_query(g_SQL, query);
                            		Log_Kaydet("loglar/cptvice.txt", "[%s] %s adli kisi %d model silahÝ teslim aldi.", Tarih(), OyuncuIsim(playerid), oyuncuData[playerid][oSiparis][0]);
                            		oyuncuData[playerid][oSiparis][0] = 0; oyuncuData[playerid][oSiparis][1] = 0;
                            		mysql_format(g_SQL, query, sizeof(query), "UPDATE `oyuncular` SET `SiparisModel` = '%d', `SiparisZaman` = '%d' WHERE `ID` = '%d' LIMIT 1", oyuncuData[playerid][oSiparis][0], oyuncuData[playerid][oSiparis][1], oyuncuData[playerid][oID]);
                            		mysql_tquery(g_SQL, query);                
                            		tuccarMesaji(playerid, "Benimle etkileþim kurduðun için sana bir adet dolu %s hediye ettim.", silahTCData[dataid][slhSarjorTuru]);
                            		tuccarMesaji(playerid, "Oyuncaðýný güle güle kullan moruk, tekrar lazým olursa buralardayým!");
                            	}
                            }
                            if(dialogid == AKTOR_SILAHCI)
                            {
                            	if(response)
                            	{
                            		switch(listitem)
                            		{
                            			case 0..sizeof(silahTCData) - 1:
                            			{

                            				if(oyuncuData[playerid][oSiparis][0] < 1)
                            				{
                            					SetPVarInt(playerid, "SilahTuccariList", listitem);
                            					new str[1024], kaporaucret = silahTCData[listitem][slhKapora];
                            					format(str, sizeof(str), "%s{FFFFFF} Öncelikle silahlarý üretebilmek için bazý malzemelere ihtiyacým var, bunlarý temin etmelisin.\n", str);
                            					format(str, sizeof(str), "%s{FFFFFF} Sipariþini verdiðin silahýn teslimat süresi, saatlik süre tabirinde azalacak.\n", str);
                            					format(str, sizeof(str), "%s{FFFFFF} Aklýn burada kalmasýn. Sipariþ elime ulaþtýðýnda, seni bilgilendiririm dostum.\n", str);
                            					format(str, sizeof(str), "%s{FFFFFF} Seçtiðin silah sana göre %s ama, iþi bilen birine benziyorsun.\n\n", str, silahTCData[listitem][slhBilgisi]);

                            					format(str, sizeof(str), "%s{007830} {FFFFFF}Sipariþini vereceðin silah, {2D747B}%d{FFFFFF} saat sonunda elinde olacak.\n", str, silahTCData[listitem][slhSaat]);
                            					format(str, sizeof(str), "%s{337830} {FFFFFF}Ayrýca senden bu sipariþ için {337830}%s{FFFFFF} kapora ücreti alacaðým.\n", str, NumaraFormati(kaporaucret));
                            					ShowPlayerDialog(playerid, AKTOR_SILAHCI_X, DIALOG_STYLE_MSGBOX, "{E41E01}CPT. Vice: {FFFFFF}Bana silah ürettirebilmek için bu bilgilere sahip olmalýsýn moruk.", str, "Kabul Et", "Iptal");
                            				}
                            				else tuccarMesaji(playerid, "Önceden sipariþ vermiþsin, sipariþinin teslim olmasýný bekle. Sipariþini kontrol etmek için kontrol noktasýna bak!");
                            			}
                            			case sizeof(silahTCData) + 1:
                            			{
                            				new str[256];
                            				if(oyuncuData[playerid][oSiparis][0] == 0)
                            				{
                            					format(str, sizeof(str), "%s{FFFFFF} Yakýn zamanda sipariþ vermemiþsin, listeye dönerek sipariþ verebilirsin.\n", str);
                            					ShowPlayerDialog(playerid, BOS_MESAJ, DIALOG_STYLE_MSGBOX, "{E41E01}CPT. Vice: {FFFFFF}Sipariþ ettiðin birþeyler var mý bakalým..", str, "Anladým", "");
                            				}
                            				else SilahTuccariSiparis(playerid, oyuncuData[playerid][oSiparis][0]);
                            			}
                            			default:AktorMenusu(playerid, 0);
                            		}
                            	}
                            }
                            if(dialogid == DIALOG_KAYIT)
                            {
                            	if(response)
                            	{
                            		if(strlen(inputtext) > 3)
                            		{
                            			static query[512], isim[MAX_PLAYER_NAME];
                            			GetPlayerName(playerid, isim, sizeof(isim));
                            			mysql_format(g_SQL, query, sizeof(query),"INSERT INTO `oyuncular` (`isim`, `sifre`) VALUES ('%e', '%e')", isim, MD5_Hash(inputtext));
                            			mysql_tquery(g_SQL, query, "OyuncuYaratildi", "d", playerid);
                            			OyuncuCinsiyetSec(playerid);
                            		}
                            		else DialogGoster(playerid, DIALOG_KAYIT, DIALOG_STYLE_PASSWORD, "{FFFFFF}Kayýt{1ACAFD} » {FFFFFF}Þifre Oluþtur", "{B70000}HATA: {FFFFFF}Girdiðin þifre en az 4 harfli olmalýdýr!\nSunucuya kayýt olmak için lütfen aþaðýya þifrenizi girin;", "Kayýt Ol", "Çýk");
                            	}
                            	else if(!response) KickEx(playerid);
                            	return 1;
                            }
                            else if(dialogid == TAMIRCI_DIALOG)
                            {
                            	if(response)
                            	{
                            		SetPVarInt(playerid, "TamirciID", GetPVarInt(playerid, "TamirciIDX"));
                            		ShowPlayerDialog(playerid, BOS_MESAJ, DIALOG_STYLE_MSGBOX, "{FFFFFF}Tamirci Oluþturma", "{FFFFFF}Iç kýsmý ayarlamak için istediðin bölgeye gidip, bakýþ açýna göre ayarla '{9FBBEE}Y{FFFFFF}' tuþuna bas.", "Kapat", "");
                            	}
                            }

                            else if(dialogid == DIALOG_GIRIS)
                            {
                            	if(response)
                            	{
                            		if(isnull(inputtext) || strlen(inputtext) < 2)
                            		{
                            			new str[MAX_PLAYER_NAME + 1 + 85];
										format(str, sizeof(str), "{FFFFFF}Sunucuya hoþgeldin {015668}%s\n{FFFFFF}Hesabýna giriþ yapabilmek için kutucuðu doldurmalýsýn.", OyuncuIsim(playerid, 1));
										return	ShowPlayerDialog(playerid, DIALOG_GIRIS, DIALOG_STYLE_PASSWORD, "Nitro Roleplay - Giriþ Yap", str, "Onayla", "Çýkýþ");
									}
									else
									{
	                            		static query[512];
										mysql_format(g_SQL, query, sizeof(query), "SELECT `forumid` FROM `hesaplar` WHERE `forumid` = '%d' AND `sifre` = '%e'", oyuncuData[playerid][oForumID], MD5_Hash(inputtext));
										return mysql_tquery(g_SQL, query, "GirisTest", "d", playerid);
									}
								}
								else if(!response)
								{
									Kick(playerid);
								}
                            }
                            else if(dialogid == DIALOG_SIFREDEGISTIR) {
                            	if(!response) return false;
                            	if(strlen(inputtext) < 3) return DialogGoster(playerid, DIALOG_SIFREDEGISTIR, DIALOG_STYLE_PASSWORD, "> Þifre Deðiþtir", "{B70000}HATA: {FFFFFF}Þifren en az 3 haneli olmalýdýr\nLütfen yeni þifrenizi aþaðýya girin;", "Tamam", "Kapat");

                            	static mysql[144];
                            	format(mysql, sizeof(mysql), "UPDATE `oyuncular` SET `sifre` = '%s' WHERE `ID` = '%d'", MD5_Hash(inputtext), oyuncuData[playerid][oID]);
                            	mysql_tquery(g_SQL, mysql);
                            	SunucuMesaji(playerid, "Þifreni %s olarak güncelledin.", inputtext);
                            	return true;

                            }
                            else if(dialogid == DIALOG_CINSIYET)
                            {                         	
                            	if(response)
                            	{
                            		oyuncuData[playerid][oCinsiyet] = 1;
                            		SunucuMesaji(playerid, "Cinsiyetin erkek olarak ayarlandý.");
                            	}
                            	else if(!response)
                            	{
                            		oyuncuData[playerid][oCinsiyet] = 2;
                            		SunucuMesaji(playerid, "Cinsiyetin kadýn olarak ayarlandý.");
                            	}
                            	DialogGoster(playerid, DIALOG_BOYSEC, DIALOG_STYLE_INPUT, "Boy Seçimi", "Karakterinizin boyunu cm cinsinden girin(örn: 182):", "Onayla", "Ýptal");
                            }
                            else if(dialogid == DIALOG_BOYSEC)
                            {
                            	if(response)
                            	{
                            		if(strval(inputtext) < 150 || strval(inputtext) > 220 || isnull(inputtext)) return DialogGoster(playerid, DIALOG_BOYSEC, DIALOG_STYLE_INPUT, "Boy Seçimi", "HATA: Boy deðeri 150 ve 220 arasýnda olmalýdýr.\nKarakterinizin boyunu cm cinsinden girin(örn: 182):", "Onayla", "Ýptal");
                            		oyuncuData[playerid][oyuncuboy] = strval(inputtext);
                            		new boyquery[130];
                            		mysql_format(g_SQL, boyquery, sizeof(boyquery), "UPDATE oyuncular SET Boy = '%d' WHERE ID = '%d'", oyuncuData[playerid][oyuncuboy], oyuncuData[playerid][oID]);
									mysql_query(g_SQL, boyquery);
                            		DialogGoster(playerid, DIALOG_KILOSEC, DIALOG_STYLE_INPUT, "Kilo Seçimi", "Karakterinizin kilosunu kg cinsinden girin(örn: 80):", "Onayla", "Ýptal");
                            	}
                            	else if(!response)
                            	{
                            		DialogGoster(playerid, DIALOG_BOYSEC, DIALOG_STYLE_INPUT, "Boy Seçimi", "Karakterinizin boyunu cm cinsinden girin(örn: 182):", "Onayla", "Ýptal");
                            	}
                            }
                            else if(dialogid == DIALOG_KILOSEC)
                            {
                            	if(response)
                            	{
                            		if(strval(inputtext) < 20 || strval(inputtext) > 250 || isnull(inputtext)) return DialogGoster(playerid, DIALOG_KILOSEC, DIALOG_STYLE_INPUT, "Kilo Seçimi", "HATA: Kilo deðeri 20 ve 250 arasýnda olmalýdýr.\nKarakterinizin kilosunu kg cinsinden girin(örn: 80)", "Onayla", "Ýptal");
                            		oyuncuData[playerid][oyuncukilo] = strval(inputtext);
                            		new kiloquery[128];
									mysql_format(g_SQL, kiloquery, sizeof(kiloquery), "UPDATE oyuncular SET Kilo = '%d' WHERE ID = '%d'", oyuncuData[playerid][oyuncukilo], oyuncuData[playerid][oID]);
									mysql_query(g_SQL, kiloquery);
                            		DialogGoster(playerid, DIALOG_GOZRENGISEC, DIALOG_STYLE_LIST, "Göz Rengi Seçimi", "Açýk Kahverengi\nKahverengi\nMavi\nYeþil\nEla\nKehribar", "Onayla", "Ýptal");	
                            	}
                            	else if(!response)
                            	{
                            		DialogGoster(playerid, DIALOG_KILOSEC, DIALOG_STYLE_INPUT, "Kilo Seçimi", "Karakterinizin kilosunu kg cinsinden girin(örn: 80):", "Onayla", "Ýptal");
                            	}
                            }
                            else if(dialogid == DIALOG_GOZRENGISEC)
                            {
                            	if(response)
                            	{
                            		new gozquery[128], gozrenk[32];
                            		switch(listitem)
                            		{
                            			case 0: gozrenk = "Açýk Kahverengi";
                            			case 1: gozrenk = "Kahverengi";
                            			case 2: gozrenk = "Mavi";
                            			case 3: gozrenk = "Yeþil";
                            			case 4: gozrenk = "Ela";
                            			case 5: gozrenk = "Kehribar";
                            			default: gozrenk = "Kýrmýzý";
                            		}
                            		mysql_format(g_SQL, gozquery, sizeof(gozquery), "UPDATE oyuncular SET GozRengi = '%e' WHERE ID = '%d'", gozrenk, oyuncuData[playerid][oID]);
                            		mysql_tquery(g_SQL, gozquery);
                            		DialogGoster(playerid, DIALOG_SACRENGISEC, DIALOG_STYLE_LIST, "Saç Rengi Seçimi", "Siyah\nSarýþýn\nKumral\nDiðer", "Onayla", "Ýptal");
                            	}
                            	else if(!response)
                            	{
                            		DialogGoster(playerid, DIALOG_GOZRENGISEC, DIALOG_STYLE_LIST, "Göz Rengi Seçimi", "Açýk Kahverengi\nKahverengi\nMavi\nYeþil\nEla\nKehribar", "Onayla", "Ýptal");
                            	}
                            }
                            else if(dialogid == DIALOG_SACRENGISEC)
                            {
                            	if(response)
                            	{
                            		new sacquery[128], sacrenk[32];
                            		switch(listitem)
                            		{
                            			case 0: sacrenk = "Siyah";
                            			case 1: sacrenk = "Sarýþýn";
                            			case 2: sacrenk = "Kumral";
                            			case 3: sacrenk = "Diðer";
                            		}
                            		mysql_format(g_SQL, sacquery, sizeof(sacquery), "UPDATE oyuncular SET sacrengi = '%e' WHERE ID = '%d'", sacrenk, oyuncuData[playerid][oID]);
                            		mysql_tquery(g_SQL, sacquery);
                            		new kokenler1[1024];
		                            kokenler1[0] = 0;
	                            	for(new x; x < sizeof(Kokenler); x++)
	                            	{
	                            		format(kokenler1, sizeof(kokenler1), "%s%s\n", kokenler1, Kokenler[x][Ulke]);
	                            	}
	                            	DialogGoster(playerid, DIALOG_DOGUMYERI, DIALOG_STYLE_LIST, "{FFFFFF}Kayýt {1ACAFD}» {FFFFFF} Doðum Yeri", kokenler1, "Seç", "");
                            	}
                            	else if(!response)
                            	{
                            		DialogGoster(playerid, DIALOG_SACRENGISEC, DIALOG_STYLE_LIST, "Saç Rengi Seçimi", "Siyah\nSarýþýn\nKumral\nDiðer", "Onayla", "Ýptal");
                            	}
                            }  
                            else if(dialogid == DIALOG_DOGUMYERI) {
                            	if(response || !response) {
                            		format(oyuncuData[playerid][oDogumYeri], 32, "%s", inputtext);
                            		SunucuMesaji(playerid, "Doðum yerini %s olarak deðiþtirdin.", inputtext);
                            		DialogGoster(playerid, DIALOG_DOGUMTARIHI, DIALOG_STYLE_INPUT, "{FFFFFF}Kayýt {1ACAFD}» {FFFFFF} Doðum Tarihi", "{FFFFFF}Oluþturacaðýnýz karakterin kendine ait bir doðum tarihi olmalýdýr.\n\n{FFFFFF}Lütfen aþaðýya karakterinize ait {4B8D73}GG.AA.YYYY{FFFFFF} formatýnda doðum tarihinizi giriniz.", "Onayla", "");
                            	}
                            }
                            else if(dialogid == DIALOG_DOGUMTARIHI) {
                            	if (!response)
                            	{
                            		DialogGoster(playerid, DIALOG_DOGUMTARIHI, DIALOG_STYLE_INPUT, "{FFFFFF}Kayýt{1ACAFD} » {FFFFFF}Doðum Tarihi", "{FF0000}Bu ekraný ESC tuþu ile kapatamazsýnýz, kaydolmak için tarih giriniz.\n\n{FFFFFF}Oluþturacaðýnýz karakterin kendine ait bir doðum tarihi olmalýdýr.\n\nLütfen aþaðýya {4B8D73}GG.AA.YYYY{FFFFFF} formatýnda tarih giriniz.", "Onayla", "");
                            	}
                            	if(response) {

                            		new gunler, aylar, yillar;
                            		static const ayCekimleri[] = {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
                            		if (sscanf(inputtext, "p<.>ddd", gunler, aylar, yillar)) {
                            			DialogGoster(playerid, DIALOG_DOGUMTARIHI, DIALOG_STYLE_INPUT, "{FFFFFF}Kayýt{1ACAFD} » {FFFFFF}Doðum Tarihi", "{FF0000}Girdiðiniz tarihin aralarýnda '.' içermelidir.\n\n{FFFFFF}Oluþturacaðýnýz karakterin kendine ait bir doðum tarihi olmalýdýr.\n\n{FFFFFF}Lütfen aþaðýya karakterinize ait {4B8D73}GG.AA.YYYY{FFFFFF} formatýnda doðum tarihinizi giriniz.", "Onayla", "");
                            		}
			else if (yillar < 1919 || yillar > 2000) {//100 sene ve 18+ yaþ
				DialogGoster(playerid, DIALOG_DOGUMTARIHI, DIALOG_STYLE_INPUT, "{FFFFFF}Kayýt{1ACAFD} » {FFFFFF}Doðum Tarihi", "{FF0000}Girdiðiniz doðum yýlý 1919 - 2000 arasý olmalýdýr.\n\n{FFFFFF}Oluþturacaðýnýz karakterin kendine ait bir doðum tarihi olmalýdýr.\n\n{FFFFFF}Lütfen aþaðýya karakterinize ait {4B8D73}GG.AA.YYYY{FFFFFF} formatýnda doðum tarihinizi giriniz.", "Onayla", "");
			}
			else if (aylar < 1 || aylar > 12) {
				DialogGoster(playerid, DIALOG_DOGUMTARIHI, DIALOG_STYLE_INPUT, "{FFFFFF}Kayýt{1ACAFD} » {FFFFFF}Doðum Tarihi", "{FF0000}Girdiðiniz ay formatý, 1-12 arasý olmalýdýr.\n\n{FFFFFF}Oluþturacaðýnýz karakterin kendine ait bir doðum tarihi olmalýdýr.\n\n{FFFFFF}Lütfen aþaðýya karakterinize ait {4B8D73}GG.AA.YYYY{FFFFFF} formatýnda doðum tarihinizi giriniz.", "Onayla", "");
			}
			else if (gunler < 1 || gunler > ayCekimleri[aylar - 1]) {
				DialogGoster(playerid, DIALOG_DOGUMTARIHI, DIALOG_STYLE_INPUT, "{FFFFFF}Kayýt{1ACAFD} » {FFFFFF}Doðum Tarihi", "{FF0000}Girdiðiniz gün formatý ay tarihiyle uyuþmuyor.\n\n{FFFFFF}Oluþturacaðýnýz karakterin kendine ait bir doðum tarihi olmalýdýr.\n\n{FFFFFF}Lütfen aþaðýya karakterinize ait {4B8D73}GG.AA.YYYY{FFFFFF} formatýnda doðum tarihinizi giriniz.", "Onayla", "");
			}
			else {
				new query[145];
				mysql_format(g_SQL, query, sizeof(query), "UPDATE oyuncular SET karakteryas = '%d' WHERE ID = '%d'", 2020-yillar, oyuncuData[playerid][oID]);
				mysql_tquery(g_SQL, query);
				format(oyuncuData[playerid][oDogumTarihi], 32, inputtext);
				SunucuMesaji(playerid, "Doðum tarihini %s olarak seçtin.", inputtext);
				OyuncuTenRengiSec(playerid);
			}
		}
	}
	else if(dialogid == DIALOG_TEN_RENGI) {
		if(response) {
		    oyuncuData[playerid][oTenRengi] = listitem + 1;
		   if(listitem == 0 && oyuncuData[playerid][oCinsiyet] == 2) ShowModelSelectionMenu(playerid, kadinkayitbeyaz, "Kadýn Skinleri");
		   else if(listitem == 0 && oyuncuData[playerid][oCinsiyet] == 1) ShowModelSelectionMenu(playerid, erkekkayitbeyaz, "Erkek Skinleri");
		   else if(listitem == 1 && oyuncuData[playerid][oCinsiyet] == 2) ShowModelSelectionMenu(playerid, kadinkayitsiyah, "Kadýn Skinleri");
		   else if(listitem == 1 && oyuncuData[playerid][oCinsiyet] == 1) ShowModelSelectionMenu(playerid, erkekkayitsiyah, "Erkek Skinleri");
		}
		else if(!response) {
			OyuncuTenRengiSec(playerid);
		}
	}
	if(dialogid == DIALOG_SUNUCU) {
		if(response) {
			if(listitem == 0) {
				if(sunucukilit) {
					sunucukilit = false;
					SendRconCommand("password 0");
					YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s adlý yönetici sunucu þifresini kaldýrdý.", oyuncuData[playerid][oAdminNick]);
				}
				else if(!sunucukilit) {
					DialogGoster(playerid, DIALOG_SUNUCU2, DIALOG_STYLE_INPUT, "> Sunucu þifresi", "Lütfen eklemek istediðin þifreyi aþaðýya girin;", "Seç", "Ýptal");
				}
			}
			else if(listitem == 1) {
				DialogGoster(playerid, DIALOG_SUNUCU1, DIALOG_STYLE_INPUT, "> Sunucu ismi deðiþtir", "Deðiþtirilecek isimi girin;", "Seç", "Ýptal");
			}
		}
		else if(!response) SunucuMesaji(playerid, "Sunucu üzerinde iþlem yapmaktan vazgeçtin.");
		return true;
	}
	if(dialogid == DIALOG_SUNUCU1) {
		if(response) {
			static rcon[128];
			format(rcon, sizeof(rcon), "hostname %s", inputtext);
			SendRconCommand(rcon);
			SunucuMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s adlý yönetici sunucu ismini %s olarak deðiþtirdi.", oyuncuData[playerid][oAdminNick], inputtext);
		}
		else if(!response) {
			cmd(playerid, 0, "sunucu");
		}
	}
	else if(dialogid == DIALOG_SUNUCU2) {
		if(response) {
			if(!strcmp(inputtext, "0", true)) return hataMesaji(playerid, "Bu þifre geçersizdir.");
			if(strlen(inputtext) > 20) return hataMesaji(playerid, "Þifre en fazla 20 harfli olabilir.");
			sunucukilit = true;
			static rcon[48];
			format(rcon, sizeof(rcon), "password %s", inputtext);
			SendRconCommand(rcon);
			YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s adlý yönetici sunucuyu þifreledi. (%s)", oyuncuData[playerid][oAdminNick], inputtext);
		}
	}
	else if(dialogid == DIALOG_GRAFITI)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0, 1:
				{
					Grafiti_Secenek(playerid, listitem);
				}
				case 3:
				{
					new id = Iter_Free(Grafitiler), stringcekf[256], stringcekm[256];
					if(id < 0) return hataMesaji(playerid, "Sunucunun yeterli seviyede grafiti kapasitesi kalmadý.");
					GetPVarString(playerid, "GraffitiYazi", stringcekm, sizeof(stringcekm));
					if(strlen(stringcekm) < 3) return hataMesaji(playerid, "Graffiti metin deðeri 3'ten küçük olamaz."), Grafiti_Menu(playerid), 1;
					GetPVarString(playerid, "GraffitiFont", stringcekf, sizeof(stringcekf));
					if(strlen(stringcekf) < 3) return hataMesaji(playerid, "Graffiti font deðeri seçilmemiþ."), Grafiti_Menu(playerid), 1;
					Grafiti_Yarat(playerid, id);
				}
				default:Grafiti_Menu(playerid);
			}
		}
	}
	else if(dialogid == DIALOG_GRF_YAZI)
	{
		if(response)
		{
			if(strval(inputtext) < 3)
				SetPVarString(playerid, "GraffitiYazi", inputtext);
			Grafiti_Menu(playerid);
		}
	}
	if(dialogid == PDPC_ARANANLAR)
	{
		if(response)
		{
		    switch(listitem)
		    {
		        case 0:{
                    ShowPlayerDialog(playerid, PDPC_ARANANSUC, DIALOG_STYLE_INPUT, MDC_BASLIK, "{FFFFFF}APB kaydý oluþturmak için þahýs adý girin {cdcdcd}(Ad_Soyad){FFFFFF}:", "Oluþtur", "Iptal");
		  		}
		        case 1:{
		        //
                    ArananlarListesi(playerid);
		        }
		    }
		}
	}
 	if(dialogid == PDPC_ARANANSUC)
 	{
 	    if(response)
		{
		    if(strlen(inputtext) < 2) return ShowPlayerDialog(playerid, PDPC_ARANANSUC, DIALOG_STYLE_INPUT, MDC_BASLIK, "{FFFFFF}APB kaydý oluþturmak için þahýs adý girin {cdcdcd}(Ad_Soyad){FFFFFF}:", "Oluþtur", "Iptal");
			format(VCPD_KontrolStr[playerid], 32, inputtext);
			ShowPlayerDialog(playerid, PDPC_ARANANEKLE, DIALOG_STYLE_INPUT, MDC_BASLIK, "{FFFFFF}APB kaydý oluþturmak için iþlediði suçu veya suç kodunu girin {FFFFFF}:", "Oluþtur", "Iptal");
		}
 	}
 	if(dialogid == PDPC_ARANANEKLE)
 	{
 	    if(response)
		{
			new query[128 * 3], Cache:VeriCek;
			printf("%s", VCPD_KontrolStr[playerid]);
			mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `oyuncular` WHERE `isim` = '%e'", VCPD_KontrolStr[playerid]);
			VeriCek = mysql_query(g_SQL, query);
			new rows = cache_num_rows();
			if(rows)
			{
				mysql_format(g_SQL, query, sizeof(query), "INSERT INTO `suckayitlari` (`isim`, `suc`, `tarih`, `ekleyen`) VALUES ('%e', '%e', '%s', '%e')", VCPD_KontrolStr[playerid], inputtext, Tarih(), OyuncuIsim(playerid));
				mysql_query(g_SQL, query);
			    ShowPlayerDialog(playerid, BOS_MESAJ, DIALOG_STYLE_MSGBOX, MDC_BASLIK, "{FFFFFF}APB kaydý baþarýyla oluþturuldu.", "Kapat", "");
			}
			else ShowPlayerDialog(playerid, BOS_MESAJ, DIALOG_STYLE_MSGBOX, MDC_BASLIK, "{FFFFFF}APB kaydý oluþturma baþarýsýz.\n\n{DCD218}|!|{FFFFFF} Girilen ad ve soyad, bir bileþenle eþleþmedi. {CDCDCD}(HATA)", "Kapat", "");
			cache_delete(VeriCek);
		}
 	}
	if(dialogid == ANIMASYON_LISTESI_X)
	{
		if(response) return cmd(playerid, 0, "anims");
	}
	if(dialogid == ANIMASYON_LISTESI)
	{
		if(response)
		{
			new str[4000];
			strcat(str, "Ingilizce\tTürkçe\n");
			strcat(str, "{D9BE9B}-» {FFFFFF}/box\t{D9BE9B}-» {FFFFFF}/boks\n");
			strcat(str, "{D9BE9B}-» {FFFFFF}/washhands\t{D9BE9B}-» {FFFFFF}/elleriyika\n");
			strcat(str, "{D9BE9B}-» {FFFFFF}/crabs\t{D9BE9B}-» {FFFFFF}/kasin\n");
			strcat(str, "{D9BE9B}-» {FFFFFF}/salute\t{D9BE9B}-» {FFFFFF}/selamdur\n");
			strcat(str, "{D9BE9B}-» {FFFFFF}/jerkoff\t{D9BE9B}-» {FFFFFF}/bosal\n");
			strcat(str, "{D9BE9B}-» {FFFFFF}/stop\t{D9BE9B}-» {FFFFFF}/dur\n");
			strcat(str, "{D9BE9B}-» {FFFFFF}/rap\t{D9BE9B}-» {FFFFFF}-\n");
			strcat(str, "{D9BE9B}-» {FFFFFF}/wank\t{D9BE9B}-» {FFFFFF}/31cek\n");
			strcat(str, "{D9BE9B}-» {FFFFFF}/chat\t{D9BE9B}-» {FFFFFF}/sohbet\n");
			strcat(str, "{D9BE9B}-» {FFFFFF}/sit\t{D9BE9B}-» {FFFFFF}/otur\n");
			strcat(str, "{D9BE9B}-» {FFFFFF}/bat\t{D9BE9B}-» {FFFFFF}/beyzbol\n");
			strcat(str, "{D9BE9B}-» {FFFFFF}/lean\t{D9BE9B}-» {FFFFFF}/yaslan\n");
			strcat(str, "{D9BE9B}-» {FFFFFF}/gesture\t{D9BE9B}-» {FFFFFF}/jest\n");
			strcat(str, "{D9BE9B}-» {FFFFFF}/lay\t{D9BE9B}-» {FFFFFF}/yereotur\n");
			strcat(str, "{D9BE9B}-» {FFFFFF}/wave\t{D9BE9B}-» {FFFFFF}/elsalla\n");
			strcat(str, "{D9BE9B}-» {FFFFFF}/signal\t{D9BE9B}-» {FFFFFF}/sinyal\n");
			strcat(str, "{D9BE9B}-» {FFFFFF}/nobreath\t{D9BE9B}-» {FFFFFF}/soluklan\n");
			strcat(str, "{D9BE9B}-» {FFFFFF}/fall\t{D9BE9B}-» {FFFFFF}/yeredus\n");
			strcat(str, "{D9BE9B}-» {FFFFFF}/pedmove\t{D9BE9B}-» {FFFFFF}/yuruyus\n");
			strcat(str, "{D9BE9B}-» {FFFFFF}/stripclub\t{D9BE9B}-» {FFFFFF}/stripklub\n");
			strcat(str, "{D9BE9B}-» {FFFFFF}/smoke\t{D9BE9B}-» {FFFFFF}-\n");
			strcat(str, "{D9BE9B}-» {FFFFFF}/dj\t{D9BE9B}-» {FFFFFF}-\n");
			strcat(str, "{D9BE9B}-» {FFFFFF}/reload\t{D9BE9B}-» {FFFFFF}/sarjor\n");
			strcat(str, "{D9BE9B}-» {FFFFFF}/tag\t{D9BE9B}-» {FFFFFF}/etiket\n");
			strcat(str, "{D9BE9B}-» {FFFFFF}/deal\t{D9BE9B}-» {FFFFFF}/anlasma\n");
			strcat(str, "{D9BE9B}-» {FFFFFF}/crossarms\t{D9BE9B}-» {FFFFFF}/caprazkol\n");
			strcat(str, "{D9BE9B}-» {FFFFFF}/cheer\t{D9BE9B}-» {FFFFFF}/tezahurat\n");
			strcat(str, "{D9BE9B}-» {FFFFFF}/siteat\t{D9BE9B}-» {FFFFFF}/yemekye\n");
			strcat(str, "{D9BE9B}-» {FFFFFF}/bar\t{D9BE9B}-» {FFFFFF}-\n");
			strcat(str, "{D9BE9B}-» {FFFFFF}/dance\t{D9BE9B}-» {FFFFFF}/dans\n");
			strcat(str, "{D9BE9B}-» {FFFFFF}/spank\t{D9BE9B}-» {FFFFFF}/saplak\n");
			strcat(str, "{D9BE9B}-» {FFFFFF}/sexy\t{D9BE9B}-» {FFFFFF}/seksi\n");
			strcat(str, "{D9BE9B}-» {FFFFFF}/holdup\t{D9BE9B}-» {FFFFFF}/geciktim\n");
			strcat(str, "{D9BE9B}-» {FFFFFF}/copa\t{D9BE9B}-» {FFFFFF}/polis\n");
			strcat(str, "{D9BE9B}-» {FFFFFF}/misc\t{D9BE9B}-» {FFFFFF}/yereuzan\n");
			strcat(str, "{D9BE9B}-» {FFFFFF}/snatch\t{D9BE9B}-» {FFFFFF}/kapmak\n");
			strcat(str, "{D9BE9B}-» {FFFFFF}/blowjob\t{D9BE9B}-» {FFFFFF}/oralsex\n");
			strcat(str, "{D9BE9B}-» {FFFFFF}/kiss\t{D9BE9B}-» {FFFFFF}/op\n");
			strcat(str, "{D9BE9B}-» {FFFFFF}/idles\t{D9BE9B}-» {FFFFFF}/bosta\n");
			strcat(str, "{D9BE9B}-» {FFFFFF}/sunbathe\t{D9BE9B}-» {FFFFFF}/gunbatimi\n");
			strcat(str, "{D9BE9B}-» {FFFFFF}/lowrider\t{D9BE9B}-» {FFFFFF}/alcaksurucu\n");
			strcat(str, "{D9BE9B}-» {FFFFFF}/carchat\t{D9BE9B}-» {FFFFFF}/aracsohbet\n");
			strcat(str, "{D9BE9B}-» {FFFFFF}/aim\t{D9BE9B}-» {FFFFFF}/nisanal\n");
			ShowPlayerDialog(playerid, ANIMASYON_LISTESI_X, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Animasyonlar - II.", str, "Önceki", "Kapat");
		}
	}
	else if(dialogid == GRAFFITI_SIL)
	{
		if(!response)
		{
			new id = GetPVarInt(playerid, "GrafitiSecID");
			Grafiti_Sil(id);
			SunucuMesaji(playerid, "Seçilen graffiti baþarýyla kaldýrýldý.");
		}
	}
	else if(dialogid == DIALOG_GRF_FONT)
	{
		if(response)
		{
			SetPVarString(playerid, "GraffitiFont", inputtext);
			Grafiti_Menu(playerid);
		}
	}
	else if(dialogid == DIALOG_FIRMA) {
		if(response) {
			new firma = (GetPVarInt(playerid, "FirmaYonetimi") != 0) ? GetPVarInt(playerid, "FirmaYonetimi") : oyuncuData[playerid][oFirma],
			icerik[500];
			switch (listitem)
			{
				case 0: {
					format(icerik, sizeof(icerik), "{FFFFFF}Firma Ýsmi: {F5E600}%s{FFFFFF}\nFirma Türü: {F5E600}%s{FFFFFF}\nFirma Kasasý: {23BD00}%s{FFFFFF}\nAktif Kontrat: -\nÞuanda oyunda olan iþçi sayýsý: {F5E600}%d{FFFFFF}", FirmaInfo[firma][fIsim], FirmaAlani(FirmaInfo[firma][fAlan]),
						NumaraFormati(FirmaInfo[firma][fKasa]), Firma_Cevrimici(firma));
					ShowPlayerDialog(playerid, DIALOG_FIRMA_BILGI, DIALOG_STYLE_MSGBOX, "{F5E600}Firma Bilgileri", icerik, "Tamam","");
				}
				case 1: {
					if(oyuncuData[playerid][oFirmarutbe] == 10)
					{
						format(icerik, sizeof(icerik), "{FFFFFF}Para Koy\nPara Çýkar\nMaaþ Ayarla {23BD00}[%d$]{FFFFFF}\nMaaþ Ödemesi Yap", FirmaInfo[firma][fMaas]);
						ShowPlayerDialog(playerid, DIALOG_FIRMA_KASA, DIALOG_STYLE_LIST, "{F5E600}Firma Kasasý", icerik, "Seç", "Iptal");
					}
				}
				case 2: {
					new iceriks[64];
					for(new i = 0; i < sizeof(Kontratlar) ; i++) {
						if(FirmaInfo[firma][fAlan] == Kontratlar[i][kontalan]) {
							if(FirmaInfo[firma][fKontrat][i] == 1) {
								format(iceriks, sizeof(icerik), "%s\n%s", iceriks, Kontratlar[i][kontbaslik]);
							}
						}
					}
					ShowPlayerDialog(playerid, DIALOG_FIRMA_KONTRATLAR, DIALOG_STYLE_LIST, "{F5E600}Firma Kontratlarý", iceriks, "Seç", "Iptal");
				}
				case 3: {
					ShowPlayerDialog(playerid, DIALOG_FIRMA_AYRIL, DIALOG_STYLE_MSGBOX, "{F5E600}Firma'dan Ayrýlma", "Gerçekten mevcut firmanýzdan ayrýlmak istiyor musunuz?", "Evet","Iptal");
				}
				case 4: {
					FirmaLiderMenu(playerid);
					SetPVarInt(playerid, "FirmaYonetimi", oyuncuData[playerid][oFirma]);
				}
			}
		}
	}

	else if(dialogid == DIALOG_FIRMA_KONTRATLAR) {
		if(response) {
			new firma = (GetPVarInt(playerid, "FirmaYonetimi") != 0) ? GetPVarInt(playerid, "FirmaYonetimi") : oyuncuData[playerid][oFirma],
			iceriks[220];
			for(new i = 0; i < sizeof(Kontratlar) ; i++) {
				if(FirmaInfo[firma][fAlan] == Kontratlar[i][kontalan]) {
					if(!strcmp(inputtext, Kontratlar[i][kontbaslik], true)) {
						format(iceriks, sizeof(iceriks), "%s\n%s", iceriks, Kontratlar[i][konticerik]);
						SetPVarInt(playerid, "kontgor", Kontratlar[i][kontid]);
					}
				}
			}
			ShowPlayerDialog(playerid, DIALOG_FIRMA_KONTRATGOR, DIALOG_STYLE_MSGBOX, "{F5E600}Firma Kontratlarý", iceriks, "Ýþaretle", "Iptal");

		}
	}

	else if(dialogid == DIALOG_FIRMA_KONTRATGOR) {
		if(response) {
			new kid = GetPVarInt(playerid, "kontgor");
			SetPlayerCheckpoint(playerid, Kontratlar[kid][kontX], Kontratlar[kid][kontY], Kontratlar[kid][kontZ], 3.0);
			SunucuMesaji(playerid, "Seçtiðiniz kontratýn baþlangýç noktasý haritanýzda iþaretlendi.");
		}
	}

	else if(dialogid == DIALOG_FIRMA_AYRIL) {
		if(response) {
			//new firma = GetPVarInt(playerid, "FirmaYonetimi");
			if(oyuncuData[playerid][oFirmarutbe] < 10)
			{
				if(oyuncuData[playerid][oFirmaisbasi] == true)
				{
					oyuncuData[playerid][oFirmaisbasi] = false;
					oyuncuData[playerid][oGeciciKiyafet] = 0;
					SetPlayerSkin(playerid, oyuncuData[playerid][oKiyafet]);
				}
				oyuncuData[playerid][oFirma] = -1;
				oyuncuData[playerid][oFirmarutbe] = 0;
				UyariMesaji(playerid, "Mevcut firmanýzdan istifa ettiniz.");
			}
			else if(oyuncuData[playerid][oFirmarutbe] == 10)
			{
				/*new query[128];

				mysql_format(g_SQL, query, sizeof(query), "DELETE FROM `firmalar` WHERE `id` = %i", FirmaInfo[firma][fID]);
				mysql_query(g_SQL, query);

				mysql_format(g_SQL, query, sizeof(query), "DELETE FROM `firmarutbeleri` WHERE `id` = %i", FirmaInfo[firma][fID]);
				mysql_query(g_SQL, query);

				mysql_format(g_SQL, query, sizeof(query), "UPDATE `oyuncular` SET `firma` = 0, `firmarutbe` = 0 WHERE `firma` = %i", FirmaInfo[firma][fID]);
				mysql_query(g_SQL, query);

				FirmaMesaji(firma, "[FÝRMA]: Firma patronu iflas açýkladý ve tüm iþçiler iþten çýkarýldý.");

				if(oyuncuData[playerid][oFirmaisbasi] == true)
				{
					oyuncuData[playerid][oFirmaisbasi] = false;
					oyuncuData[playerid][oGeciciKiyafet] = 0;
					SetPlayerSkin(playerid, oyuncuData[playerid][oKiyafet]);
				}

				foreach(new i : Player) {
					if(oyuncuData[i][oFirma] == firma) {
						oyuncuData[i][oFirma] = -1;
						oyuncuData[i][oFirmarutbe] = 0;
					}
				}

				foreach(new i : Araclar) if(AracBilgi[i][aracFirma] == firma) {
					Firmaarac_TamamenSil(i);
				}

				DestroyDynamicPickup(FirmaInfo[firma][fPickupb]);
				DestroyDynamic3DTextLabel(FirmaInfo[firma][fLabelb]);

				Iter_Remove(Firma, firma);

				FirmaInfo[firma][fID] = -1;
				FirmaInfo[firma][fLiderrutbe] = 0;
				FirmaInfo[firma][fKasa] = 0;
				format(FirmaInfo[firma][fNot], 200, "%s", EOS);
				format(FirmaInfo[firma][fIsim], 40, "%s", EOS);*/
				UyariMesaji(playerid, "Þu an sistem firma kapatmaya izin vermiyor.");
			}
		}
	}

	else if(dialogid == DIALOG_FIRMA_KASA) {
		if(response) {
			new firma = (GetPVarInt(playerid, "FirmaYonetimi") != 0) ? GetPVarInt(playerid, "FirmaYonetimi") : oyuncuData[playerid][oFirma],
			query[195];

			if(oyuncuData[playerid][oFirma] != firma) return hataMesaji(playerid, "Firma kasasýnda iþlem yapmaya yetkiniz bulunmuyor.");
			switch(listitem) {
				case 0: {
					ShowPlayerDialog(playerid, DIALOG_FIRMA_KASA_KOY, DIALOG_STYLE_INPUT, "{F5E600}Firma Kasasý", "Lütfen firma kasasýna koymak istediðiniz para miktarýný girin:", "Tamam", "Iptal");
				}
				case 1: {
					ShowPlayerDialog(playerid, DIALOG_FIRMA_KASA_CIKAR, DIALOG_STYLE_INPUT, "{F5E600}Firma Kasasý", "Lütfen firma kasasýndan çýkarmak istediðiniz miktarý girin:", "Tamam", "Iptal");
				}
				case 2: {
					ShowPlayerDialog(playerid, DIALOG_FIRMA_MAAS_AYARLA, DIALOG_STYLE_INPUT, "{F5E600}Firma Kasasý", "Lütfen iþçilerinize verilecek maaþ miktarýný girin:\n(En az 250$, en fazla 1000$ olabilir.)", "Tamam", "Iptal");
				}
				case 3: {
					if(Iter_Contains(Firma, firma)) {
						if(FirmaInfo[firma][fKasa] < 1) return hataMesaji(playerid, "Firma kasanýzda hiç para bulunmuyor.");
						if(FirmaInfo[firma][fKasa] < Firma_Cevrimici(firma) * FirmaInfo[firma][fMaas]) return hataMesaji(playerid, "Kasada iþçilerin maaþýný karþýlayabilecek kadar para bulunmuyor.");
						foreach(new i : Player) {
							if(FirmaInfo[firma][fID] == oyuncuData[i][oFirma]) {
								ParaEkle(i, FirmaInfo[firma][fMaas]);
								SunucuMesaji(i, "Firmanýz size '%i$' miktarýnda maaþ ödemesi yaptý.", FirmaInfo[firma][fMaas]);
								mysql_format(g_SQL, query, sizeof(query), "UPDATE `firmalar` SET `kasa` = %i WHERE `id` = %i", FirmaInfo[firma][fKasa], firma);
								mysql_query(g_SQL, query);
							}
						}
						FirmaParaEkle(firma, -(Firma_Cevrimici(firma) * FirmaInfo[firma][fMaas]));
						UyariMesaji(playerid, "Firma olarak oyunda olan iþçilerinize toplamda '%i$' maaþ ödemesi yaptýnýz.", Firma_Cevrimici(firma) * FirmaInfo[firma][fMaas]);
					}
				}
			}
		}
	}

	else if(dialogid == DIALOG_FIRMA_MAAS_AYARLA) {
		if(response) {
			if(IsNumeric(inputtext) && strval(inputtext) > 249 && strval(inputtext) < 1001) {
				new para = strval(inputtext);
				new firma = (GetPVarInt(playerid, "FirmaYonetimi") != 0) ? GetPVarInt(playerid, "FirmaYonetimi") : oyuncuData[playerid][oFirma];
				if(para > 0) {
					new query[90];
					FirmaInfo[firma][fMaas] = para;

					mysql_format(g_SQL, query, sizeof(query), "UPDATE `firmalar` SET `maas` = %i WHERE `id` = %i", FirmaInfo[firma][fMaas], firma);
					mysql_query(g_SQL, query);

					SunucuMesaji(playerid, "Ýþçilere verilecek maaþý '%i$' olarak ayarladýnýz.", para);
				} else {
					hataMesaji(playerid, "Lütfen 0'dan büyük, numerik bir deðer girin.");
				}
			} else {
				hataMesaji(playerid, "Geçerli bir maaþ miktarý girin.");
			}
		}
	}

	else if(dialogid == DIALOG_FIRMA_KASA_KOY) {
		if(response) {
			if(strlen(inputtext) != 0 && IsNumeric(inputtext)) {
				new para = strval(inputtext);
				if(para > 0) {
					if(oyuncuData[playerid][oPara] < para) return hataMesaji(playerid, "Üzerinizde yeterli miktarda para bulunmuyor.");
					new query[90];
					new firma = (GetPVarInt(playerid, "FirmaYonetimi") != 0) ? GetPVarInt(playerid, "FirmaYonetimi") : oyuncuData[playerid][oFirma];
					FirmaParaEkle(firma, para);

					mysql_format(g_SQL, query, sizeof(query), "UPDATE `firmalar` SET `kasa` = %i WHERE `id` = %i", FirmaInfo[firma][fKasa], firma);
					mysql_query(g_SQL, query);

					SunucuMesaji(playerid, "Kasaya %i$ miktarýnda para koydunuz.", para);
					ParaEkle(playerid, -para, YONTEM_FIRMAKASA_KOY);
				} else {
					hataMesaji(playerid, "Lütfen 0'dan büyük, numerik bir deðer girin.");
				}
			} else {
				hataMesaji(playerid, "Kasaya koymak istediðiniz para miktarýný girin.");
			}
		}
	}

	else if(dialogid == DIALOG_FIRMA_KASA_CIKAR) {
		if(response) {
			if(strlen(inputtext) != 0 && IsNumeric(inputtext)) {
				new para = strval(inputtext);
				new firma = (GetPVarInt(playerid, "FirmaYonetimi") != 0) ? GetPVarInt(playerid, "FirmaYonetimi") : oyuncuData[playerid][oFirma];
				if(para > 0) {
					if(FirmaInfo[firma][fKasa] < para) return hataMesaji(playerid,"Kasada miktarda para bulunmuyor.");
					new query[90];
					FirmaParaEkle(firma, -para);

					mysql_format(g_SQL, query, sizeof(query), "UPDATE `firmalar` SET `kasa` = %i WHERE `id` = %i", FirmaInfo[firma][fKasa], firma);
					mysql_query(g_SQL, query);

					SunucuMesaji(playerid, "Kasadan %i$ miktarýnda para çýkardýnýz.", para);
					ParaEkle(playerid, para, YONTEM_FIRMAKASA_CEK);
				} else {
					hataMesaji(playerid, "Lütfen 0'dan büyük, numerik bir deðer girin.");
				}
			} else {
				hataMesaji(playerid, "Kasadan almak istediðiniz para miktarýný girin.");
			}
		}
	}
	else if(dialogid == DIALOG_FIRMA_MENU) {
		if(response) {
			new b = GetPVarInt(playerid, "FirmaMenusu"),
			baslik[95];
			switch(listitem) {
				case 0: {
					if(oyuncuData[playerid][oFirma] < 0) return hataMesaji(playerid, "Herhangi bir firma bünyesinde çalýþmýyorsunuz.");
					if(FirmaInfo[b][fID] != oyuncuData[playerid][oFirma]) return hataMesaji(playerid, "Bu firma bünyesinde çalýþmadýðýnýz için burada iþbaþý yapamazsýnýz.");
					if(oyuncuData[playerid][oFirmaisbasi] == true)
					{
						oyuncuData[playerid][oFirmaisbasi] = false;
						oyuncuData[playerid][oGeciciKiyafet] = 0;
						SetPlayerSkin(playerid, oyuncuData[playerid][oKiyafet]);
						SunucuMesaji(playerid, "Ýþbaþýndan çýktýnýz.");
						if(FirmaInfo[oyuncuData[playerid][oFirma]][fAlan] == 1)
						{
							SetPlayerColor(playerid, RENK_VARSAYILAN);
						}
					}
					else
					{
						if(FirmaInfo[oyuncuData[playerid][oFirma]][fAlan] == 1)
						{
							oyuncuData[playerid][oFirmaisbasi] = true;
							SunucuMesaji(playerid, "Ýþbaþý yaptýnýz, artýk firmanýz için çalýþmaya baþlayabilirsiniz.");
						}
						else
						{
							oyuncuData[playerid][oFirmaisbasi] = true;
							SunucuMesaji(playerid, "Ýþbaþý yaptýnýz, artýk firmanýz için çalýþmaya baþlayabilirsiniz.");
						}
					}
				}
				case 1: {
					if(oyuncuData[playerid][oFirma] > -1) return hataMesaji(playerid, "Zaten bir firma bünyesinde çalýþýyorsunuz.");
					if(FirmaInfo[b][fAlimlar] < 1) return hataMesaji(playerid, "Bu firma iþçi alýmý yapmýyor.");
					format(baslik, sizeof(baslik), "{F5E600}%s - Ýþ Baþvurusu ID: %d", FirmaInfo[b][fIsim], b);
					ShowPlayerDialog(playerid, DIALOG_FIRMA_BASVURU, DIALOG_STYLE_MSGBOX, baslik, "{FFFFFF}Bu firma bünyesinde çalýþmak istiyor musunuz?", "Evet", "Hayýr");
				}
			}
		}
	}
	else if(dialogid == DIALOG_FIRMA_BASVURU) {
		if(response) {
			new firma = GetPVarInt(playerid, "FirmaMenusu"),
			query[195];

			oyuncuData[playerid][oFirma] = firma;
			oyuncuData[playerid][oFirmarutbe] = 1;

			mysql_format(g_SQL, query, sizeof(query), "UPDATE `oyuncular` SET `firma` = '%d', `firmarutbe` = 1 WHERE `isim` = '%e'", firma, oyuncuData[playerid][oIsim]);
			mysql_query(g_SQL, query);

			SunucuMesaji(playerid, "Tebrikler! Artýk '%s' adlý firma bünyesinde çalýþýyorsunuz.", FirmaInfo[firma][fIsim]);
			SunucuMesaji(playerid, "/firma yazarak firmanýza ait kontratlarý ve bilgileri görebilirsiniz.");
		}
	}
	else if(dialogid == DIALOG_FIRMA_NOT) {
		if(response) {
			if(strlen(inputtext) >= 128 || strlen(inputtext) == 0) {
				hataMesaji(playerid, "Faction duyurusu en fazla 128 karakter uzunluðunda olabilir.");
				ShowPlayerDialog(playerid, DIALOG_FIRMA_NOT, DIALOG_STYLE_INPUT, "{F5E600}Firma Yönetimi", "Lütfen belirlemek istediðiniz Firma duyurusunu giriniz:", "Tamam", "Iptal");
			} else {
				new firma = (GetPVarInt(playerid, "FirmaYonetimi") != 0) ? GetPVarInt(playerid, "FirmaYonetimi") : oyuncuData[playerid][oFirma],
				query[195],
				msg[150];

				mysql_format(g_SQL, query, sizeof(query), "UPDATE `firmalar` SET `not` = '%s' WHERE `id` = %i", inputtext, FirmaInfo[firma][fID]);
				mysql_query(g_SQL, query);

				format(FirmaInfo[firma][fNot], 200, "%s", inputtext);
				format(msg, sizeof(msg), "Firma Duyurusu: %s", inputtext);
				foreach(new i : Player) {
					if(oyuncuData[i][oFirma] == firma) {
						SendClientMessage(i, RENK_FIRMA, msg);
					}
				}

				FirmaLiderMenu(playerid);
			}
		} else {
			FirmaLiderMenu(playerid);
		}
	}
	else if(dialogid == DIALOG_FIRMA_RUTBELER) {
		if(response) {
			SetPVarInt(playerid, "FirmaRutbeYonetimi", listitem + 1);
			ShowPlayerDialog(playerid, DIALOG_FIRMA_RUTBE_YONET, DIALOG_STYLE_INPUT, "{F5E600}Firma Yönetimi", "Lütfen Firma rütbesini belirleyiniz (Max. 30 karakter):", "Tamam", "Iptal");
		} else {
			FirmaLiderMenu(playerid);
		}
	}
	else if(dialogid == DIALOG_FIRMA_SKINLER) {
		if(response) {
			SetPVarInt(playerid, "FirmaSkinYonetimi", listitem + 1);
			ShowPlayerDialog(playerid, DIALOG_FIRMA_SKIN_YONET, DIALOG_STYLE_INPUT, "{F5E600}Firma Yönetimi", "Lütfen bu rütbeye atamak istediðiniz skinin ID'sini girin:", "Tamam", "Iptal");
		} else {
			FirmaLiderMenu(playerid);
		}
	}
	else if(dialogid == DIALOG_FIRMA_SKIN_YONET) {
		if(response) {
			if(strval(inputtext) < 1 || strval(inputtext) == 74 || strval(inputtext) > 273) {
				hataMesaji(playerid, "Hatalý skin ID girdiniz.");
				ShowPlayerDialog(playerid, DIALOG_FIRMA_SKIN_YONET, DIALOG_STYLE_INPUT, "{F5E600}Firma Yönetimi", "Lütfen Firma rütbesini belirleyiniz (Max. 30 karakter):", "Tamam", "Iptal");
			} else {
				new firma = (GetPVarInt(playerid, "FirmaYonetimi") != 0) ? GetPVarInt(playerid, "FirmaYonetimi") : oyuncuData[playerid][oFirma],
				rutbe = GetPVarInt(playerid, "FirmaSkinYonetimi"),
				query[110];

				FirmaSkin[firma][rutbe] = strval(inputtext);
				mysql_format(g_SQL, query, sizeof(query), "UPDATE `firmarutbeleri` SET `skin` = '%d' WHERE `rutbe` = %i AND `id` = %i", strval(inputtext), rutbe, FirmaInfo[firma][fID]);
				mysql_query(g_SQL, query);
				UyariMesaji(playerid, "[%i] No'lu rütbenin skinini '%d' yaptýnýz.", rutbe, strval(inputtext));
				FirmaLiderMenu(playerid);
			}
		} else {
			new firma = (GetPVarInt(playerid, "FirmaYonetimi") != 0) ? GetPVarInt(playerid, "FirmaYonetimi") : oyuncuData[playerid][oFirma];
			format(gVar3000, sizeof(gVar3000), "%s", EOS);
			for(new i = 1; i != 30; i++) {
				if(!isnull(FirmaRutbe[firma][i])) {
					if(isnull(gVar3000)) {
						format(gVar3000, sizeof(gVar3000), "%i. %s", i, FirmaRutbe[firma][i]);
					} else {
						format(gVar3000, sizeof(gVar3000), "%s\n%i. %s", gVar3000, i, FirmaRutbe[firma][i]);
					}
				} else {
					break;
				}
			}

			ShowPlayerDialog(playerid, DIALOG_FIRMA_SKINLER, DIALOG_STYLE_LIST, "{F5E600}Firma Yönetimi", gVar3000, "Seç", "Iptal");
			format(gVar3000, sizeof(gVar3000), "%s", EOS);
		}
	}
	else if(dialogid == DIALOG_FIRMA_RUTBE_YONET) {
		if(response) {
			if(strlen(inputtext) == 0 || strlen(inputtext) > 30) {
				hataMesaji(playerid, "Maximum 30 karakter kullanabilirsiniz.");
				ShowPlayerDialog(playerid, DIALOG_FIRMA_RUTBE_YONET, DIALOG_STYLE_INPUT, "{F5E600}Firma Yönetimi", "Lütfen Firma rütbesini belirleyiniz (Max. 30 karakter):", "Tamam", "Iptal");
			} else {
				new firma = (GetPVarInt(playerid, "FirmaYonetimi") != 0) ? GetPVarInt(playerid, "FirmaYonetimi") : oyuncuData[playerid][oFirma],
				rutbe = GetPVarInt(playerid, "FirmaRutbeYonetimi"),
				query[110];

				format(FirmaRutbe[firma][rutbe], 30, "%s", inputtext);
				mysql_format(g_SQL, query, sizeof(query), "UPDATE `firmarutbeleri` SET `isim` = '%e' WHERE `rutbe` = %i AND `id` = %i", inputtext, rutbe, FirmaInfo[firma][fID]);
				mysql_query(g_SQL, query);
				UyariMesaji(playerid, "[%i] No'lu rütbenin ismini '%s' yaptýnýz.", rutbe, inputtext);
				FirmaLiderMenu(playerid);
			}
		} else {
			new firma = (GetPVarInt(playerid, "FirmaYonetimi") != 0) ? GetPVarInt(playerid, "FirmaYonetimi") : oyuncuData[playerid][oFirma];
			format(gVar3000, sizeof(gVar3000), "%s", EOS);
			for(new i = 1; i != 30; i++) {
				if(!isnull(FirmaRutbe[firma][i])) {
					if(isnull(gVar3000)) {
						format(gVar3000, sizeof(gVar3000), "%i. %s", i, FirmaRutbe[firma][i]);
					} else {
						format(gVar3000, sizeof(gVar3000), "%s\n%i. %s", gVar3000, i, FirmaRutbe[firma][i]);
					}
				} else {
					break;
				}
			}

			ShowPlayerDialog(playerid, DIALOG_FIRMA_RUTBELER, DIALOG_STYLE_LIST, "{F5E600}Firma Yönetimi", gVar3000, "Seç", "Iptal");
			format(gVar3000, sizeof(gVar3000), "%s", EOS);
		}
	}
	else if(dialogid == DIALOG_FIRMA_LIDER_ISLEMY)
	{
		if(response)
		{
			if(GetPVarInt(playerid, "FirmaLider_IslemY") == 0)
			{
				new hedef_isim[256], query[256];
				listitem += 1;
				GetPVarString(playerid, "fLider_SecilenISIM", hedef_isim, sizeof(hedef_isim));

				if(OyuncuIDcek(hedef_isim) != INVALID_PLAYER_ID)
				{
					oyuncuData[OyuncuIDcek(hedef_isim)][oFirmarutbe] = listitem;
				}
				else
				{
					mysql_format(g_SQL, query, sizeof(query), "UPDATE `oyuncular` SET `firmarutbe` = '%d' WHERE `isim` = '%e'", listitem, hedef_isim);
					mysql_query(g_SQL, query);
				}
				SunucuMesaji(playerid, "%s adlý kiþinin firma rütbesini %s olarak deðiþtirdiniz.", hedef_isim, FirmaRutbe[oyuncuData[playerid][oFirma]][listitem]);
			}
		}
	}
	else if(dialogid == DIALOG_FIRMA_LIDER_ISLEMX)
	{
		if(response)
		{
			SetPVarInt(playerid, "FirmaLider_IslemY", listitem);
			switch(listitem)
			{
				case 0:
				{
					new rutbeler[1024];
					for(new i = 1; i <= FirmaInfo[oyuncuData[playerid][oFirma]][fLiderrutbe]; i++) {
						format(rutbeler, sizeof(rutbeler), "%s%s\n", rutbeler, FirmaRutbe[oyuncuData[playerid][oFirma]][i]);
					}
					ShowPlayerDialog(playerid, DIALOG_FIRMA_LIDER_ISLEMY, DIALOG_STYLE_LIST, "Rütbe Deðiþtir", rutbeler, "Seç", "Iptal");
				}
				case 1:
				{
					new hedef_isim[256], query[256], firmastr[256];
					GetPVarString(playerid, "fLider_SecilenISIM", hedef_isim, sizeof(hedef_isim));

					if(OyuncuIDcek(hedef_isim) != INVALID_PLAYER_ID)
					{
						oyuncuData[OyuncuIDcek(hedef_isim)][oFirmarutbe] = 0;
						oyuncuData[OyuncuIDcek(hedef_isim)][oFirma] = -1;
					}
					else
					{
						mysql_format(g_SQL, query, sizeof(query), "UPDATE `oyuncular` SET `firma` = '-1', `firmarutbe` = '0' WHERE `isim` = '%e'", hedef_isim);
						mysql_query(g_SQL, query);

					}
					format(firmastr, sizeof(firmastr), "[FÝRMA]: Firma iþçisi %s, %s tarafýndan iþten çýkarýldý.", hedef_isim, OyuncuIsim(playerid, 1));
					FirmaMesaji(oyuncuData[playerid][oFirma], firmastr);
				}
			}
		}
	}
	else if(dialogid == DIALOG_FIRMA_LIDER_ISLEM)
	{
		if(response)
		{
			if(!strcmp(OyuncuIsim(playerid, 1), inputtext, true)) return hataMesaji(playerid, "Kendi üzerinde iþlem yapamazsýn.");
			SetPVarString(playerid, "fLider_SecilenISIM", inputtext);
			ShowPlayerDialog(playerid, DIALOG_FIRMA_LIDER_ISLEMX, DIALOG_STYLE_LIST, inputtext, "Rütbe Deðiþtir\nFirmadan Kov", "Seç", "Geri");
		}
		else FirmaLiderMenu(playerid);
	}
	else if(dialogid == DIALOG_FIRMA_LIDER) {
		if(response) {
			switch(listitem) {
				case 0:
				{
					new query[256], Cache:VeriCek, string[2048], sayi;
					mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `oyuncular` WHERE `firma` = '%d' ORDER By `firmarutbe` DESC", oyuncuData[playerid][oFirma]);
					VeriCek = mysql_query(g_SQL, query);
					new rows = cache_num_rows();
					strcat(string, "Isim\tRütbe\tHesap\n");
					if(rows)
					{
						while(sayi < rows)
						{
							format(string, sizeof(string), "%s%s\t%s(%d)\t%s\n", string, vericek_varchar(sayi, "isim"), FirmaRutbe[vericek_int(sayi, "firma")][vericek_int(sayi, "firmarutbe")], vericek_int(sayi, "firmarutbe"), (OyuncuIDcek(vericek_varchar(sayi, "isim")) != INVALID_PLAYER_ID) ? ("{73EB65}Çevrimiçi") : ("{AFAFAF}Çevrimdýþý"));
							sayi++;
						}
					}
					cache_delete(VeriCek);
					if(!sayi) return hataMesaji(playerid, "Firmanýzda listelenebilecek çalýþan bulunamadý.");
					new baslik[60];
					format(baslik, sizeof(baslik), "Firma Çalýþanlarý (%d)", sayi);
					ShowPlayerDialog(playerid, DIALOG_FIRMA_LIDER_ISLEM, DIALOG_STYLE_TABLIST_HEADERS, baslik, string, "Seç", "Geri");
				}
				case 1: {
					ShowPlayerDialog(playerid, DIALOG_FIRMA_NOT, DIALOG_STYLE_INPUT, "{F5E600}Firma Yönetimi", "Lütfen Firma duyurusunu giriniz:", "Tamam", "Iptal");
				}
				case 2: {
					new firma = (GetPVarInt(playerid, "FirmaYonetimi") != 0) ? GetPVarInt(playerid, "FirmaYonetimi") : oyuncuData[playerid][oFirma];
					format(gVar3000, sizeof(gVar3000), "%s", EOS);
					for(new i = 1; i != 30; i++) {
						if(!isnull(FirmaRutbe[firma][i])) {
							if(isnull(gVar3000)) {
								format(gVar3000, sizeof(gVar3000), "%i. %s", i, FirmaRutbe[firma][i]);
							} else {
								format(gVar3000, sizeof(gVar3000), "%s\n%i. %s", gVar3000, i, FirmaRutbe[firma][i]);
							}
						} else {
							break;
						}
					}

					ShowPlayerDialog(playerid, DIALOG_FIRMA_RUTBELER, DIALOG_STYLE_LIST, "{F5E600}Firma Yönetimi", gVar3000, "Seç", "Iptal");
					format(gVar3000, sizeof(gVar3000), "%s", EOS);
				}
				case 3: {
					new firma = (GetPVarInt(playerid, "FirmaYonetimi") != 0) ? GetPVarInt(playerid, "FirmaYonetimi") : oyuncuData[playerid][oFirma];
					format(gVar3000, sizeof(gVar3000), "%s", EOS);
					for(new i = 1; i != 30; i++) {
						if(!isnull(FirmaRutbe[firma][i])) {
							if(isnull(gVar3000)) {
								format(gVar3000, sizeof(gVar3000), "%i. %s", i, FirmaRutbe[firma][i]);
							} else {
								format(gVar3000, sizeof(gVar3000), "%s\n%i. %s", gVar3000, i, FirmaRutbe[firma][i]);
							}
						} else {
							break;
						}
					}

					ShowPlayerDialog(playerid, DIALOG_FIRMA_SKINLER, DIALOG_STYLE_LIST, "{F5E600}Firma Yönetimi", gVar3000, "Seç", "Iptal");
					SunucuMesaji(playerid, "Lütfen iþbaþý skinini ayarlamak istediðiniz rütbeyi seçin.");
					format(gVar3000, sizeof(gVar3000), "%s", EOS);
				}
				case 4: {
					new firma = (GetPVarInt(playerid, "FirmaYonetimi") != 0) ? GetPVarInt(playerid, "FirmaYonetimi") : oyuncuData[playerid][oFirma],
					msg[130];

					switch(FirmaInfo[firma][fChat]) {
						case 0: {
							if(oyuncuData[playerid][oFirma] == firma) {
								format(msg, sizeof(msg), "%s %s Firma kanalý konuþmasýný kapattý.", GetFirmaRutbe(playerid), OyuncuIsim(playerid));
							}

							FirmaInfo[firma][fChat] = 1;
						}
						case 1: {
							if(oyuncuData[playerid][oFirma] == firma) {
								format(msg, sizeof(msg), "%s %s Firma kanalý konuþmasýný aktif hale getirdi.", GetFirmaRutbe(playerid), OyuncuIsim(playerid));
							}

							FirmaInfo[firma][fChat] = 0;
						}
					}

					foreach(new i : Player) {
						if(oyuncuData[i][oFirma] == firma) {
							SendClientMessage(i, RENK_FIRMA, msg);
						}
					}
				}
				case 5: {
					ShowPlayerDialog(playerid, DIALOG_FIRMA_ARAC, DIALOG_STYLE_LIST, "{F5E600}Firma Yönetimi", "Araç Satýn Al\nAraç Vergilerini Öde\nAraç Sat\nAraçlarý Respawn Et\nKira Durumu Sýfýrla\nAraçlarý Listele", "Seç", "Iptal");
				}
				case 6: {
					if(oyuncuData[playerid][oAdmin] < 6) return YetkinizYok(playerid);
					new firma = (GetPVarInt(playerid, "FirmaYonetimi") != 0) ? GetPVarInt(playerid, "FirmaYonetimi") : oyuncuData[playerid][oFirma];
					if(IsValidDynamic3DTextLabel(FirmaInfo[firma][fLabelb]))
					{
						DestroyDynamic3DTextLabel(FirmaInfo[firma][fLabelb]);
					}
					if(IsValidDynamicPickup(FirmaInfo[firma][fPickupb]))
					{
						DestroyDynamicPickup(FirmaInfo[firma][fPickupb]);
					}
					new Float:X, Float:Y, Float:Z, interior, vw, query[250], labelString[150];
					GetPlayerPos(playerid, X,Y,Z), interior = GetPlayerInterior(playerid), vw = GetPlayerVirtualWorld(playerid);
					FirmaInfo[firma][fiX] = X;
					FirmaInfo[firma][fiY] = Y;
					FirmaInfo[firma][fiZ] = Z;
					FirmaInfo[firma][fiVw] = vw;
					FirmaInfo[firma][fiInt] = interior;
					FirmaInfo[firma][fPickupb] = CreateDynamicPickup(1210, 23, FirmaInfo[firma][fiX], FirmaInfo[firma][fiY], FirmaInfo[firma][fiZ],FirmaInfo[firma][fiVw],FirmaInfo[firma][fiInt]);
					format(labelString, sizeof(labelString), "[{F5E600}%s{FFFFFF}]\nFirma menüsüne eriþmek için {F5E600}'/fmenu'{FFFFFF}", FirmaInfo[firma][fIsim]);
					FirmaInfo[firma][fLabelb] = CreateDynamic3DTextLabel(labelString, -1, FirmaInfo[firma][fiX], FirmaInfo[firma][fiY], FirmaInfo[firma][fiZ] + 0.8, 3, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, FirmaInfo[firma][fiVw],FirmaInfo[firma][fiInt]);

					mysql_format(g_SQL, query, sizeof(query), "UPDATE `firmalar` SET `x` = %f, `y` = %f, `z` = %f, `vw` = %i, `interior` = %i WHERE `id` = %i", FirmaInfo[firma][fiX],FirmaInfo[firma][fiY],FirmaInfo[firma][fiZ],FirmaInfo[firma][fiVw],FirmaInfo[firma][fiInt], FirmaInfo[firma][fID]);
					mysql_query(g_SQL, query);
					SunucuMesaji(playerid, "Firmayý baþarýyla bulunduðunuz konuma taþýdýnýz.");
				}
			}
		}
	}

	else if(dialogid == DIALOG_FIRMA_ARAC)
	{
		if(response)
		{
			new firma = (GetPVarInt(playerid, "FirmaYonetimi") != 0) ? GetPVarInt(playerid, "FirmaYonetimi") : oyuncuData[playerid][oFirma];
			switch(listitem)
			{
				case 0: {
					switch(FirmaInfo[firma][fAlan])
					{
						case 0: {
							ShowModelSelectionMenu(playerid, firmalojistik, "Hastane Araclari");
						}
						case 1: {
							ShowModelSelectionMenu(playerid, firmamedya, "Medya Araclari");
						}
						case 2: {
							ShowModelSelectionMenu(playerid, firmasilah, "Lojistik Araclari");
						}
						case 3: {
							ShowModelSelectionMenu(playerid, firmarent, "Rent A Car Araclari");
						}
						case 4: {
							ShowModelSelectionMenu(playerid, firmatamir, "Tamirhane Araclari");
						}
						case 5: {
							ShowModelSelectionMenu(playerid, firmataksi, "Hukuk Araclari");
						}
					}
				}
				case 1: {
					new sayi = 0, total = 0;
					foreach(new i : Araclar) if(AracBilgi[i][aracFirma] == FirmaInfo[firma][fID]) {
								total += AracBilgi[i][aracVergi];
								sayi++;
							}
					if(sayi == 0) return hataMesaji(playerid, "Firmaya ait vergisi ödenebilecek araç bulunamadý.");
					if(oyuncuData[playerid][oPara] < total) return hataMesaji(playerid, "Vergileri ödemek için %s paraya ihtiyacýnýz var.", NumaraFormati(total));
					ParaEkle(playerid, -total);
					foreach(new i : Araclar) if(AracBilgi[i][aracFirma] == FirmaInfo[firma][fID]) {
						AracBilgi[i][aracVergi] = 0;
					}

					SunucuMesaji(playerid, "Firma araçlarýnýn %s vergisini ödediniz.", NumaraFormati(total));
					FirmaMesaji(firma, "[FÝRMA] Firma yetkilisi tarafýndan tüm firma araçlarýnýn vergisi ödendi.");
				}
				case 2: {
					if(!IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Herhangi bir aracýn içerisinde deðilsin.");
					if(oyuncuData[playerid][oGiris] == false) return hataMesaji(playerid, "Þu anda bu iþlemi kullanamazsýn.");
					if(KomutUygunlukKontrol(playerid) == 0) return UygunDegilMesaj(playerid);
					//if(oyuncuData[playerid][oAdminDurum]) return hataMesaji(playerid, "Yönetici iþbaþýndayken bu komutu kullanamazsýn.");

					static aracid, icerik[100], fiyat;
					aracid = GetPlayerVehicleID(playerid);
					if(AracBilgi[aracid][aracFirma] == firma)
					{
						for(new i = 0; i < sizeof(faracveri) ; i++)
						{
							if(GetVehicleModel(aracid) == faracveri[i][0]) fiyat = faracveri[i][1];
						}
						format(icerik, sizeof(icerik), "{F5E600}%s{FFFFFF} marka firma aracýný {23BD00}%s{FFFFFF} karþýlýðýnda sisteme satmak istiyor musunuz? ", GetVehicleModel(aracid), NumaraFormati(fiyat / 2));
						ShowPlayerDialog(playerid, DIALOG_FIRMA_ARAC_SAT, DIALOG_STYLE_MSGBOX, "{F5E600}Firma Yönetimi",icerik, "Evet", "Hayýr");
					}
					else hataMesaji(playerid, "Bu araç firmanýza ait deðil.");
				}
				case 3: {
					static sayi;
					sayi = 0;
					foreach(new i : Araclar) if(AracBilgi[i][aracFirma] == FirmaInfo[firma][fID]) {
						if(SurucuBul(AracBilgi[i][aracYarat]) == INVALID_PLAYER_ID)
						{

							ASpawn(AracBilgi[i][aracYarat]);
							sayi++;
						}
					}
					if(sayi == 0) return hataMesaji(playerid, "Firmaya ait spawnlanabilecek araç bulunmuyor veya tüm araçlar kullanýmda.");

					SunucuMesaji(playerid, "%d adet araç spawnlandý.", sayi);
					FirmaMesaji(firma, "[FÝRMA] Firma yetkilisi tarafýndan firma araçlarý respawnlandý.");
				}
				case 4: {
					if(FirmaInfo[firma][fAlan] != 3) return hataMesaji(playerid, "Firma türünüz Rent A Car firmasý deðil.");
					static sayi;
					sayi = 0;
					foreach(new i : Araclar) if(AracBilgi[i][aracFirma] == FirmaInfo[firma][fID]) {
						AracBilgi[i][aracKiralik] = 0;
						AracBilgi[i][aKiraZaman] = 0;
						AracBilgi[i][aracAnahtar] = -1;
						AracBilgi[i][aracKilit] = 0;
						ASpawn(AracBilgi[i][aracYarat]);
						Arac_Kaydet(i);
						sayi++;
					}
					if(sayi == 0) return hataMesaji(playerid, "Firmaya ait kira sýfýrlanacak araç bulunmuyor.");

					SunucuMesaji(playerid, "%d adet aracýn kira durumlarý sýfýrlandý.", sayi);
					FirmaMesaji(firma, "[FÝRMA] Firma yetkilisi tarafýndan firma araçlarý kira durumlarý sýfýrlandý.");
				}
				case 5:
				{
					new aracsayi = 0, aracstr[256];
					aracstr[0] = 0;
					new Float:x, Float:y, Float:z;
					strcat(aracstr, "Model\tID\tPlaka\tVergi\n");
					foreach(new i : Araclar) if(AracBilgi[i][aracFirma] == FirmaInfo[firma][fID])
					{
						GetVehiclePos(i, x, y, z);
						format(aracstr, sizeof(aracstr), "%s%s\t%d\t%s\t%s\n", aracstr, AracModel(AracBilgi[i][aracModel]), i, AracBilgi[i][aracPlaka], NumaraFormati(AracBilgi[i][aracVergi]));
						aracsayi++;
					}
					if(aracsayi == 0) return hataMesaji(playerid, "Firmaya ait araç bulunmuyor.");
					Dialog_Show(playerid, firmaaraclistesi, DIALOG_STYLE_TABLIST_HEADERS, "Firmaya Ait Araçlar", aracstr, "Ýþaretle", "Çýkýþ");
				}
			}
		}
	}

	else if(dialogid == DIALOG_FIRMA_ARAC_SAT)
	{
		if(response)
		{
			new firma = (GetPVarInt(playerid, "FirmaYonetimi") != 0) ? GetPVarInt(playerid, "FirmaYonetimi") : oyuncuData[playerid][oFirma];
			if(!IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Herhangi bir aracýn içerisinde deðilsin.");
			static aracid, fiyat;
			aracid = GetPlayerVehicleID(playerid);
			new modelid = GetVehicleModel(aracid);
			if(AracBilgi[aracid][aracFirma] == firma)
			{
				if(FirmaInfo[firma][fAlan] == 3)
				{
					if(modelid == 476 || modelid == 469 || modelid == 487 || modelid == 511 || modelid == 512 || modelid == 513 || modelid == 519 || modelid == 593)
					{
						for(new i = 0; i < sizeof(ucakveri); i++)
						{
							if(modelid == ucakveri[i][0]) fiyat = ucakveri[i][1];
						}
					}
					else if(modelid == 473 || modelid == 446 || modelid == 452 || modelid == 453 || modelid == 484 || modelid == 493)
					{
						for(new i = 0; i < sizeof(tekneveri); i++)
						{
							if(modelid == tekneveri[i][0]) fiyat = tekneveri[i][1];
						}
					}
					else if(modelid == 531 || modelid == 532)
					{
						for(new i = 0; i < sizeof(tekipmanveri); i++)
						{
							if(modelid == tekipmanveri[i][0]) fiyat = tekipmanveri[i][1];
						}
					}
					else
					{	
						for(new i = 0; i < sizeof(SatilikAraclar); i++)
						{
							if(modelid == SatilikAraclar[i][0]) fiyat = SatilikAraclar[i][1];
						}
					}
				}
				else
				{
					for(new i = 0; i < sizeof(faracveri) ; i++)
					{
						if(GetVehicleModel(aracid) == faracveri[i][0]) fiyat = faracveri[i][1];
					}
				}
				Firmaarac_Sil(Arac_IDBul(aracid));
				SunucuMesaji(playerid, "%s marka firma aracýný %s karþýlýðýnda sisteme sattýnýz.", GetVehicleModel(aracid),  NumaraFormati(fiyat / 2));
				SunucuMesaji(playerid, "Satýþ bedeli firmanýzýn kasasýna baþarýyla eklendi.");
				FirmaParaEkle(firma, fiyat / 2);
			}
			else hataMesaji(playerid, "Bu araç firmanýza ait deðil.");
		}
	}

	else if(dialogid == DIALOG_FIRMA_ARAC_SATINAL)
	{
		if(response)
		{
			ShowPlayerDialog(playerid, DIALOG_FIRMA_ARACR1, DIALOG_STYLE_INPUT, "{F5E600}Araç Satýn Alma", "Aracýnýzýn 1. renk kodunu girin:", "Tamam", "Iptal");
		}
	}
	else if(dialogid == DIALOG_FIRMA_ARACR1)
	{
		if(response)
		{
			if(strval(inputtext) < 0 || strval(inputtext) > 255)
				return hataMesaji(playerid, "Geçersiz bir renk girdiniz, renk ID'leri 0 ilâ 255 arasýndadýr."),ShowPlayerDialog(playerid, DIALOG_FIRMA_ARACR1, DIALOG_STYLE_INPUT, "{F5E600}Araç Satýn Alma", "Aracýnýzýn 1. renk kodunu girin:", "Tamam", "Iptal");
			SetPVarInt(playerid, "aRenk1", strval(inputtext));
			ShowPlayerDialog(playerid, DIALOG_FIRMA_ARACR2, DIALOG_STYLE_INPUT, "{F5E600}Araç Satýn Alma", "Aracýnýzýn 2. renk kodunu girin:", "Tamam", "Iptal");
		}
	}

	else if(dialogid == DIALOG_FIRMA_ARACR2)
	{
		if(response)
		{
			if(strval(inputtext) < 0 || strval(inputtext) > 255)
				return hataMesaji(playerid, "Geçersiz bir renk girdiniz, renk ID'leri 0 ilâ 255 arasýndadýr."),ShowPlayerDialog(playerid, DIALOG_FIRMA_ARACR2, DIALOG_STYLE_INPUT, "{F5E600}Araç Satýn Alma", "Aracýnýzýn 1. renk kodunu girin:", "Tamam", "Iptal");
			new arenk1 = GetPVarInt(playerid, "aRenk1"),
			arenk2 = strval(inputtext),
			Float:pX,
			Float:pY,
			Float:pZ,
			aracid,
			fiyat,
			query[150],
			firma = (GetPVarInt(playerid, "FirmaYonetimi") != 0) ? GetPVarInt(playerid, "FirmaYonetimi") : oyuncuData[playerid][oFirma],
			modelid = GetPVarInt(playerid,"farac");
			if(GetPVarInt(playerid, "firmarentaracal") == 1)
			{
				if(modelid == 476 || modelid == 469 || modelid == 487 || modelid == 511 || modelid == 512 || modelid == 513 || modelid == 519 || modelid == 593)
				{
					for(new i = 0; i < sizeof(ucakveri); i++)
					{
						if(modelid == ucakveri[i][0]) fiyat = ucakveri[i][1];
					}
				}
				else if(modelid == 473 || modelid == 446 || modelid == 452 || modelid == 453 || modelid == 484 || modelid == 493)
				{
					for(new i = 0; i < sizeof(tekneveri); i++)
					{
						if(modelid == tekneveri[i][0]) fiyat = tekneveri[i][1];
					}
				}
				else if(modelid == 531 || modelid == 532)
				{
					for(new i = 0; i < sizeof(tekipmanveri); i++)
					{
						if(modelid == tekipmanveri[i][0]) fiyat = tekipmanveri[i][1];
					}
				}
				else
				{	
					for(new i = 0; i < sizeof(SatilikAraclar); i++)
					{
						if(modelid == SatilikAraclar[i][0]) fiyat = SatilikAraclar[i][1];
					}
				}
			}
			else
			{
				for(new i = 0; i < sizeof(faracveri) ; i++)
				{
					if(modelid == faracveri[i][0]) fiyat = faracveri[i][1];
				}
			}
			DeletePVar(playerid, "firmarentaracal");
			if(FirmaInfo[firma][fKasa] < fiyat) return hataMesaji(playerid, "Firma kasanýzda bu araca alabilecek miktarda para bulunmuyor.");
			FirmaParaEkle(firma, -fiyat);
			GetPlayerPos(playerid, pX,pY,pZ);

			if(modelid == 476 || modelid == 469 || modelid == 487 || modelid == 511 || modelid == 512 || modelid == 513 || modelid == 519 || modelid == 593)
			{
				aracid = CreateVehicle(modelid, 1923.4004,-2261.8364,13.5584,179.4807, arenk1, arenk2, -1);
				AracBilgi[aracid][aracPos][0] = 1923.4004;
				AracBilgi[aracid][aracPos][1] = -2261.8364;
				AracBilgi[aracid][aracPos][2] = 13.5584;
				AracBilgi[aracid][aracPos][3] = 179.4807;
			}
			else if(modelid == 473 || modelid == 446 || modelid == 452 || modelid == 453 || modelid == 484 || modelid == 493)
			{
				aracid = CreateVehicle(modelid, 198.7666,-1931.9899,-0.3283,269.8962, arenk1, arenk2, -1);
				AracBilgi[aracid][aracPos][0] = 198.7666;
				AracBilgi[aracid][aracPos][1] = -1931.9899;
				AracBilgi[aracid][aracPos][2] = -0.3283;
				AracBilgi[aracid][aracPos][3] = 269.8962;
			}
			else
			{
				aracid = CreateVehicle(modelid, pX,pY + 2,pZ,90.6922, arenk1, arenk2, -1);
				AracBilgi[aracid][aracPos][0] = pX;
				AracBilgi[aracid][aracPos][1] = pY + 2;
				AracBilgi[aracid][aracPos][2] = pZ;
				AracBilgi[aracid][aracPos][3] = 90.6922;
			}
			AracBilgi[aracid][aracYarat] = aracid;
			AracBilgi[aracid][aracKullanimda] = true;
			AracBilgi[aracid][aracModel] = modelid;
			AracBilgi[aracid][aracTur] = 0;
			AracBilgi[aracid][aracSahip] = 0;
			AracBilgi[aracid][araccalintisure] = 0;
			AracBilgi[aracid][kilitseviye] = 0;
			AracBilgi[aracid][alarmseviye] = 0;
			AracBilgi[aracid][aracSigorta] = 5;
			AracBilgi[aracid][aracRadyoDurum] = false;
			AracBilgi[aracid][aracRenk1] = arenk1;
			AracBilgi[aracid][aracRenk2] = arenk2;
			//AracBilgi[aracid][aracOzelPlaka] = 0;
			AracBilgi[aracid][aracPaintjob] = -1;
			AracBilgi[aracid][aracKilit] = false;
			AracBilgi[aracid][aracAnahtar] = -1;
			AracBilgi[aracid][aracKiralik] = 0;
			AracBilgi[aracid][aKiraUcret] = 0;
			AracBilgi[aracid][aracMeslek] = -1;
			AracBilgi[aracid][aracKM] = 0.00;
			AracBilgi[aracid][aracBenzin] = 75.0;
			AracBilgi[aracid][aracFiyat] = 0;
			AracBilgi[aracid][aracCani] = 999.9;
			AracBilgi[aracid][aracBirlik] = -1;
			AracBilgi[aracid][aracFirma] = firma;

			SetVehicleHealth(aracid, AracBilgi[aracid][aracCani]);
			for(new mod_i = 0; mod_i < 14; mod_i++){AracBilgi[aracid][aracParca][mod_i] = 0;}
				AracBilgi[aracid][aracInt] = GetPlayerInterior(SQL_AktiflikKontrol(0));
			AracBilgi[aracid][aracWorld] = GetPlayerVirtualWorld(SQL_AktiflikKontrol(0));
			mysql_tquery(g_SQL, "INSERT INTO `araclar` (`aracModel`) VALUES(0)", "AracYaratildi", "d", aracid);
			Iter_Add(Araclar, aracid);
			Arac_Kaydet(aracid);
			mysql_format(g_SQL, query, sizeof(query), "UPDATE `firmalar` SET `kasa` = %i WHERE `id` = %i", FirmaInfo[firma][fKasa], firma);
			mysql_query(g_SQL, query);
			SunucuMesaji(playerid, "Firmanýza baþarýyla bir araç satýn aldýnýz, araç bedeli firma kasanýzdan tahsil edilmiþtir.");
			SunucuMesaji(playerid, "Araç iþ merkezinin otoparkýndadýr, aracýnýzý uygun bir yere park etmeyi unutmayýnýz.");
		}
	}

	else if(dialogid == DIALOG_FIRMA_KUR)
	{
		if(response)
		{
			new dialogMsg[150];
			format(dialogMsg, sizeof(dialogMsg), "{FFFFFF}Firma Alaný: {F5E600}%s{FFFFFF}\nFirma Kurma Bedeli: {23BD00}%s{FFFFFF}\nBu bilgilere dayanarak bir firma kurmak istiyor musunuz?", FirmaAlani(listitem), NumaraFormati(fTurveri[listitem][fTurBedel]));
			ShowPlayerDialog(playerid, DIALOG_FIRMA_KUR_ONAY, DIALOG_STYLE_MSGBOX, "{F5E600}Firma Kurma", dialogMsg, "Evet","Hayýr");
			SetPVarInt(playerid, "firmatur", listitem);
		}
	}
	else if(dialogid == DIALOG_FIRMA_KUR_ONAY)
	{
		if(response)
		{
			ShowPlayerDialog(playerid, DIALOG_FIRMA_KUR_ISIM, DIALOG_STYLE_INPUT, "{F5E600}Firma Kurma", "Lütfen firmanýz için bir isim belirleyin:", "Tamam", "Iptal");
		}
	}
	else if(dialogid == DIALOG_FIRMA_KUR_ISIM) {
		if(response) {
			if(strlen(inputtext) < 40 && strlen(inputtext) > 0) {
				new tur = GetPVarInt(playerid, "firmatur");
				if(oyuncuData[playerid][oPara] < fTurveri[tur][fTurBedel]) return hataMesaji(playerid,"Üzerinizde bu miktarda para bulunmuyor.");
				new query[96];
				mysql_format(g_SQL, query, sizeof(query), "SELECT NULL FROM `firmalar` WHERE `isim` = '%e'", inputtext);
				mysql_tquery(g_SQL, query, "FirmaYarat", "isi", playerid, inputtext, tur);
			} else {
				hataMesaji(playerid, "Firma ismi en az 1 en fazla 40 karakter olabilir.");
				ShowPlayerDialog(playerid, DIALOG_FIRMA_KUR_ISIM, DIALOG_STYLE_INPUT, "{F5E600}Firma Kurma", "Lütfen firmanýz için bir isim belirleyin:", "Tamam", "Iptal");
			}
		}
	}
	/*else if(dialogid == DIALOG_KARAVAN_SATINAL)
	{
		if(response)
		{
			new aracid = Arac_IDBul(GetPlayerVehicleID(playerid));
			if(!Arac_SahipKontrol(playerid, aracid)) return hataMesaji(playerid, "Aracýn sahibi deðilsin, karavan alamazsýn.");
			if(oyuncuData[playerid][oPara] < 40000) return hataMesaji(playerid, "Yeterli miktarda paranýz bulunmuyor.");
			ParaEkle(playerid, -40000);
			new query[300];
			new i = GetKaravanID();

			KaravanInfo[i][kID] = i;
			KaravanInfo[i][kObje] = CreateDynamicObject(-2007, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0); //CreateObject(-2007, 0, 0, 0, 0, 0, 0);
			format(KaravanInfo[i][kSahip], 40, "%s", oyuncuData[playerid][oIsim]);
			KaravanInfo[i][kX] = 0;
			KaravanInfo[i][kY] = 0;
			KaravanInfo[i][kZ] = 0;
			KaravanInfo[i][krX] = 0;
			KaravanInfo[i][krY] = 0;
			KaravanInfo[i][krZ] = 0;
			KaravanInfo[i][kAktif] = 1;
			KaravanInfo[i][kBaglandi] = 1;
			KaravanInfo[i][kKasa] = 0;
			KaravanInfo[i][kKapidurum] = 0;
			KaravanInfo[i][kKapi] = CreateDynamicObject(-2008, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0); //CreateObject(-2008, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
			AttachDynamicObjectToObject(KaravanInfo[i][kKapi], KaravanInfo[i][kObje], 1.637408, 0.916593, 0.915793, 0.0, 0.0, 0.0);
			AttachDynamicObjectToVehicle(KaravanInfo[i][kObje], GetPlayerVehicleID(playerid),-0.364999,-8.445145,-0.364999,0.000000,0.000000,0.000000);
			mysql_format(g_SQL, query, sizeof(query), "INSERT INTO `karavanlar` (`id`, `x`, `y`, `z`, `rz`, `sahip` ) VALUES('%d', '%f', '%f', '%f', '%f', '%s')", KaravanInfo[i][kID], KaravanInfo[i][kX], KaravanInfo[i][kY], KaravanInfo[i][kZ], KaravanInfo[i][krZ], oyuncuData[playerid][oIsim]);
			mysql_tquery(g_SQL, query, "OnCreateKaravan", "i", playerid);
		}
	} */
	else if(dialogid == DIALOG_ANKESOR_ARA) {
		if(response) {
			new numara = strval(inputtext);
			if(numara < 1 || numara > 9999999) return hataMesaji(playerid, "Geçersiz numara.");
			new h = GetPVarInt(playerid, "AnkesorID");
			if(AnkesorInfo[h][aCaliyor] == 1) return hataMesaji(playerid, "Ankesörlü telefon çalarken arama yapamazsýnýz.");
			if(numara == 911) {
				DialogGoster(playerid, DIALOG_911_SECIM, DIALOG_STYLE_MSGBOX, "> 911", "Aþaðýdaki servislerden hangisine ulaþmak istiyorsunuz?", "VCPD", "Hastane");
				return 1;
			}
			foreach(new i : Player) if(oyuncuData[i][oTelefonNumarasi] == numara) {
				if(oyuncuData[i][oTelefonDurum] == false || oyuncuData[i][oIzlenen] != INVALID_PLAYER_ID)
					return hataMesaji(playerid, "Aradýðýnýz numara þu anda çaðrý kabul etmemektedir lütfen daha sonra tekrar deneyin.");

				if(oyuncuData[i][oArama] > -1)
					return hataMesaji(playerid, "Hat meþgul çalýyor.");

				if(oyuncuData[i][oArama] == 0)
					return hataMesaji(playerid, "Hat meþgul çalýyor.");

				cmd(playerid, 1, "ankesörlü telefonu alýr ve bir arama yapar.");
				cmd(i, 2, "Telefonu çalmaktadýr.");
				SetPVarInt(playerid, "AnkersordenAriyor", 1);
				SetPVarInt(i,"AnkesorID", h);
				AnkesorInfo[h][aKisi] = playerid;
				AnkesorInfo[h][aAktif] = 1;
				oyuncuData[i][oArama] = AnkesorInfo[h][aNumara];
				oyuncuData[playerid][oArama] = AnkesorInfo[h][aNumara];
				UyariMesaji(i, "Telefonunuz çalýyor! Arayan: Bilinmeyen Numara");
				kullanimMesaji(i, "Cevap vermek için /cevapla, reddetmek için /tkapat komutunu kullanýn.");
				PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
				PlayerPlaySoundEx(i, 23000);
				SetPVarInt(i,"AnkesordenAraniyor", 1);
				if(!IsPlayerInAnyVehicle(playerid) && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_NONE)
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
			}
			if(oyuncuData[playerid][oArama] == -1) {
				hataMesaji(playerid, "Aradýðýnýz numaraya þu anda ulaþýlamýyor lütfen daha sonra tekrar deneyin.");
			}

		}
	}
	else if(dialogid == DIALOG_ANKESOR)
	{
		if(response)
		{
			new h = GetPVarInt(playerid, "AnkesorID");
			new oyuncuid = AnkesorInfo[h][aArayan];
			switch(listitem)
			{
				case 0:
				{
					ShowPlayerDialog(playerid, DIALOG_ANKESOR_ARA, DIALOG_STYLE_INPUT, "Ankesörlü Telefon", "Aramak istediðiniz telefon numarasýný girin:", "Tamam", "Iptal");
				}
				case 1:
				{
					if(AnkesorInfo[h][aCaliyor] == 0) return hataMesaji(playerid, "Ankesörlü telefonu þuanda kimse aramýyor.");
					if(AnkesorInfo[h][aAktif] == 1) return hataMesaji(playerid, "Ankesörlü telefon þuanda kullanýmda.");
					KillTimer(ankesortime[oyuncuid]);
					SunucuMesaji(oyuncuid, "Ankesörlü telefonu birisi açtý.");
					AnkesorInfo[h][aKisi] = playerid;
					oyuncuData[playerid][oArama] = AnkesorInfo[h][aNumara];
					oyuncuData[oyuncuid][oArama] = AnkesorInfo[h][aNumara];
					SunucuMesaji(playerid, "Telefona cevap verdin.");
					SetPVarInt(playerid, "AnkesorleKonusuyor", 1);
					SetPVarInt(playerid, "AnkesorCevaplandi", 1);
					SetPVarInt(oyuncuid, "AnkesorCevaplandi", 1);
					AnkesorInfo[h][aAktif] = 1;
					AnkesorInfo[h][aCaliyor] = 0;

					if(!IsPlayerInAnyVehicle(playerid) && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_NONE)
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);

					if(!IsPlayerInAnyVehicle(AnkesorInfo[h][aArayan]) && GetPlayerSpecialAction(AnkesorInfo[h][aArayan]) == SPECIAL_ACTION_NONE)
						SetPlayerSpecialAction(AnkesorInfo[h][aArayan], SPECIAL_ACTION_USECELLPHONE);
				}
				case 2:
				{
					if (AnkesorInfo[h][aAktif] == 0 && AnkesorInfo[h][aCaliyor] == 0) return hataMesaji(playerid, "Ankesörlü telefon zaten kapalý.");
					if (AnkesorInfo[h][aAktif] == 1 && AnkesorInfo[h][aCaliyor] == 0 && AnkesorInfo[h][aKisi] != playerid) return hataMesaji(playerid, "Ankesörlü telefonu konuþan kiþi kapatabilir.");
					if (AnkesorInfo[h][aAktif] == 0 && AnkesorInfo[h][aCaliyor] == 1)
					{
						SunucuMesaji(playerid, "Ankesörlü telefonu kapattýn.");
						SunucuMesaji(oyuncuid, "Ankesörlü telefon kapandý.");
						SetPVarInt(oyuncuid, "AnkesorleKonusuyor", 0);
						oyuncuData[oyuncuid][oArama] = -1;
						SetPVarInt(oyuncuid, "AnkesorCevaplandi", 0);
						KillTimer(ankesortime[oyuncuid]);
						SetPlayerSpecialAction(oyuncuid, SPECIAL_ACTION_STOPUSECELLPHONE),oyuncuid = -1;
					}
					if (AnkesorInfo[h][aAktif] == 1 && AnkesorInfo[h][aCaliyor] == 0 && AnkesorInfo[h][aKisi] == playerid)
					{
						SunucuMesaji(playerid, "Telefonu kapattýn.");
						AnkesorInfo[h][aCaliyor] = 0;
						oyuncuData[playerid][oArama] = -1;
						AnkesorInfo[h][aAktif] = 0;
						AnkesorInfo[h][aKisi] = -1;
						SetPVarInt(playerid, "AnkesorleKonusuyor", 0);
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
						SetPVarInt(playerid, "AnkesorCevaplandi", 0);
						SetPVarInt(playerid, "AnkesorAcildi", 0);
						SunucuMesaji(oyuncuid, "Ankesörlü telefon kapandý.");
						SetPVarInt(oyuncuid, "AnkesorleKonusuyor", 0);
						oyuncuData[oyuncuid][oArama] = -1;
						SetPVarInt(oyuncuid, "AnkesorCevaplandi", 0);
						SetPVarInt(oyuncuid, "AnkesorAcildi", 0);
						SetPlayerSpecialAction(oyuncuid, SPECIAL_ACTION_STOPUSECELLPHONE),AnkesorInfo[h][aArayan] = -1;
					}
				}
			}
		}
	}
	else if(dialogid == DIALOG_GARAJSAHIP)
	{
		if(response)
		{
			new id = GetPVarInt(playerid, "GarajID"),labelString[100],MesajString[100],query[100];
			if(strlen(inputtext) != 0 || strlen(inputtext) > MAX_PLAYER_NAME) {
				format(GarajInfo[id][gSahip], 24, "%s", inputtext);
				GarajInfo[id][gKilit] = 0;
				mysql_format(g_SQL, query, sizeof(query), "UPDATE `garajlar` SET `sahip` = '%e' WHERE `id` = %i", GarajInfo[id][gSahip], id);
				mysql_query(g_SQL, query);
				format(labelString, sizeof(labelString), "[{43D91A}AÇIK{FFFFFF}]\n{AFAFAF}[GARAJ(%d)]\n[SAHÝP]{FFFFFF} %s", id, GarajInfo[id][gSahip]);
				UpdateDynamic3DTextLabelText(GarajInfo[id][gLabel], -1, labelString);
				format(MesajString,sizeof(MesajString),"%d ID'li garajýn sahibini '%s' yaptýnýz.",id, inputtext);
				SendClientMessage(playerid,RENK_ACIKYESIL,MesajString);
				SetPVarInt(playerid, "GarajID", -1);
			} else {
				hataMesaji(playerid, "Lütfen garajýn sahibi yapmak istediðiniz kiþinin ismini doðru bir þekilde girin.");
				ShowPlayerDialog(playerid, DIALOG_GARAJSAHIP, DIALOG_STYLE_INPUT, "{F5E600}Garaj Düzenleme", "Lütfen garajýn sahibi yapmak istediðiniz kiþinin adýný girin:(Isým_Soyisim)","Tamam","Iptal");
			}
		}
	}
	else if(dialogid == DIALOG_GARAJINT)
	{
		if(response)
		{
			new id = GetPVarInt(playerid, "GarajID"), query[100];
			switch(listitem)
			{
				case 0:
				{
					GarajInfo[id][gInt] = 0;
					mysql_format(g_SQL, query, sizeof(query), "UPDATE `garajlar` SET `interior` = '%d' WHERE `id` = '%d'", GarajInfo[id][gInt], id);
					mysql_query(g_SQL, query);
					SetPVarInt(playerid, "GarajID", -1);
				}
				case 1:
				{
					GarajInfo[id][gInt] = 1;
					mysql_format(g_SQL, query, sizeof(query), "UPDATE `garajlar` SET `interior` = '%d' WHERE `id` = '%d'", GarajInfo[id][gInt], id);
					mysql_query(g_SQL, query);
					SetPVarInt(playerid, "GarajID", -1);
				}
			}
		}
	}
	else if(dialogid == DIALOG_GARAJBIRLIK)
	{
		if(response)
		{
			new id = GetPVarInt(playerid, "GarajID"),query[100];
			if(strval(inputtext) < -1 || isnull(inputtext)) return hataMesaji(playerid, "Hatalý veya boþ ID girdiniz."), SetPVarInt(playerid, "GarajID", -1);
			GarajInfo[id][gBirlik] = strval(inputtext);
			mysql_format(g_SQL, query, sizeof(query), "UPDATE `garajlar` SET `birlik` = %i WHERE `id` = %i", GarajInfo[id][gBirlik], id);
			mysql_query(g_SQL, query);
			SCM_Ex(playerid, RENK_KLASIK, "%d ID'li garajýn sahibi olarak %d ID'li birliði ayarladýn.", id, strval(inputtext));
			SetPVarInt(playerid, "GarajID", -1);
		}
		else
		{
			SetPVarInt(playerid, "GarajID", -1);
		}
	}
	else if(dialogid == DIALOG_GARAJ_KASA) {
		if(response) {
			switch(listitem) {
				case 0: {
					ShowPlayerDialog(playerid, DIALOG_GARAJ_KASA_KOY, DIALOG_STYLE_INPUT, "{F5E600}Garaj Kasasý", "Kasanýn içerisine ne kadar para koymak istiyorsunuz?", "Tamam", "Iptal");
				}
				case 1: {
					ShowPlayerDialog(playerid, DIALOG_GARAJ_KASA_CIKAR, DIALOG_STYLE_INPUT, "{F5E600}Garaj Kasasý", "Kasanýn içerisinden ne kadar para çýkarmak istiyorsunuz?", "Tamam", "Iptal");
				}
				case 2: {
					new gid = GetPVarInt(playerid, "garajid"), dialogMsg[128];
					format(dialogMsg, sizeof(dialogMsg), "Garaj kasasýnda bulunan para miktarý: {23BD00}%i${FFFFFF}", GarajInfo[gid][gKasa]);
					ShowPlayerDialog(playerid, DIALOG_YAT_KASA_BILGI, DIALOG_STYLE_MSGBOX, "{F5E600}Garaj Kasasý", dialogMsg, "Tamam","");
				}
			}
		}
	}

	else if(dialogid == DIALOG_GARAJ_KASA_KOY) {
		if(response) {
			if(strlen(inputtext) != 0 && IsNumeric(inputtext)) {
				new para = strval(inputtext);
				if(para > 0) {
					if(oyuncuData[playerid][oPara] < para) return hataMesaji(playerid, "Üzerinizde yeterli miktarda para bulunmuyor.");
					new query[90];
					new gid = GetPVarInt(playerid, "garajid");
					GarajInfo[gid][gKasa] += para;

					mysql_format(g_SQL, query, sizeof(query), "UPDATE `garajlar` SET `kasa` = %i WHERE `id` = %i", GarajInfo[gid][gKasa], gid);
					mysql_tquery(g_SQL, query, "", "", playerid);

					format(query, sizeof(query), "Kasaya %i$ miktarýnda para koydunuz.", para);
					SendClientMessage(playerid, RENK_BEYAZ, query);
					ParaEkle(playerid, -para);
				} else {
					hataMesaji(playerid, "Lütfen 0'dan büyük, numerik bir deðer girin.");
				}
			} else {
				hataMesaji(playerid, "Kasaya koymak istediðiniz para miktarýný girin.");
			}
		}
	}

	else if(dialogid == DIALOG_GARAJ_KASA_CIKAR) {
		if(response) {
			if(strlen(inputtext) != 0 && IsNumeric(inputtext)) {
				new para = strval(inputtext);
				new gid = GetPVarInt(playerid, "garajid");
				if(para > 0) {
					if(GarajInfo[gid][gKasa] < para) return hataMesaji(playerid,  "Kasada miktarda para bulunmuyor.");
					new query[90];
					GarajInfo[gid][gKasa] -= para;

					mysql_format(g_SQL, query, sizeof(query), "UPDATE `garajlar` SET `kasa` = %i WHERE `id` = %i", GarajInfo[gid][gKasa], gid);
					mysql_tquery(g_SQL, query, "", "");

					format(query, sizeof(query), "Kasadan %i$ miktarýnda para çýkardýnýz.", para);
					SendClientMessage(playerid, RENK_BEYAZ, query);
					ParaEkle(playerid, para);
				} else {
					hataMesaji(playerid, "Lütfen 0'dan büyük, numerik bir deðer girin.");
				}
			} else {
				hataMesaji(playerid, "Kasadan çýkarmak istediðiniz para miktarýný girin.");
			}
		}
	}
	else if(dialogid == DIALOG_GARAJDUZENLE)
	{
		if(response)
		{
			new id = GetPVarInt(playerid, "GarajID");
			switch(listitem)
			{
				case 0:
				{
					ShowPlayerDialog(playerid, DIALOG_GARAJSAHIP, DIALOG_STYLE_INPUT, "{F5E600}Garaj Düzenleme", "Lütfen garajýn sahibi yapmak istediðiniz kiþinin adýný girin:(Isým_Soyisim)","Tamam","Iptal");
				}
				case 1:
				{
					DialogGoster(playerid, DIALOG_GARAJINT, DIALOG_STYLE_LIST, "Garaj Interior", "Genel\nKiþisel", "Seç", "Ýptal");
				}
				case 2:
				{
					new query[100],labelString[100];
					if (GarajInfo[id][gKilit] == 0)
					{
						GarajInfo[id][gKilit] = 1;
						format(labelString, sizeof(labelString), "[{F00E0E}KÝLÝTLÝ{FFFFFF}]\n{AFAFAF}[GARAJ(%d)]\n[SAHÝP]{FFFFFF} %s", id, GarajInfo[id][gSahip]);
						UpdateDynamic3DTextLabelText(GarajInfo[id][gLabel], -1, labelString);
						SunucuMesaji(playerid, "Garajýn kapýsýný kilitlediniz.");
						mysql_format(g_SQL, query, sizeof(query), "UPDATE `garajlar` SET `kilit` = %i WHERE `id` = %i", GarajInfo[id][gKilit], id);
						mysql_tquery(g_SQL, query, "", "");
					}
					else
					{
						GarajInfo[id][gKilit] = 0;
						format(labelString, sizeof(labelString), "[{43D91A}AÇIK{FFFFFF}]\n{AFAFAF}[GARAJ(%d)]\n[SAHÝP]{FFFFFF} %s", id, GarajInfo[id][gSahip]);
						UpdateDynamic3DTextLabelText(GarajInfo[id][gLabel], -1, labelString);
						SunucuMesaji(playerid, "Garajýn kapýsýnýn kilidini açtýnýz.");
						mysql_format(g_SQL, query, sizeof(query), "UPDATE `garajlar` SET `kilit` = %i WHERE `id` = %i", GarajInfo[id][gKilit], id);
						mysql_tquery(g_SQL, query, "", "");
					}
				}
				case 3:
				{
					ShowPlayerDialog(playerid, DIALOG_GARAJBIRLIK, DIALOG_STYLE_INPUT, "{F5E600}Garaj Düzenleme", "Garajýn sahibi olarak ayarlamak istediðin birlik ID'sini gir:", "Tamam", "Iptal");
				}
				case 4:
				{
					if(!Iter_Contains(Garajlar, id)) return hataMesaji(playerid, "Belirtilen ID'de garaj mevcut deðil.");
					if (GarajInfo[id][gKapasite] > 0) return hataMesaji(playerid, "Garajýn içerisinde araç varken garajý silemezsiniz.");
					if(id != -1)
					{
						static string[64];
						format(string, sizeof(string), "DELETE FROM `garajlar` WHERE `id` = '%d'", id);
						mysql_tquery(g_SQL, string);

						if(IsValidDynamic3DTextLabel(GarajInfo[id][gLabel]))
							DestroyDynamic3DTextLabel(GarajInfo[id][gLabel]);

						if(IsValidDynamicPickup(GarajInfo[id][gPickup]))
							DestroyDynamicPickup(GarajInfo[id][gPickup]);

						GarajInfo[id][gKilit] = 0;
						GarajInfo[id][gKasa] = 0;
						GarajInfo[id][gX] = 0;
						GarajInfo[id][gY] = 0;
						GarajInfo[id][gZ] = 0;
						GarajInfo[id][gVw] = 0;
						GarajInfo[id][gInt] = -1;
						format(GarajInfo[id][gSahip], 24, "Yok");
						GarajInfo[id][gKapasite] = 0;
						GarajInfo[id][gBirlik] = -1;
						GarajInfo[id][gID] = -1;
						Iter_Remove(Garajlar, id);
						SetPVarInt(playerid, "GarajID", -1);
					}
				}
			}
		} else { SetPVarInt(playerid, "GarajID", -1); }
	}
	else if(dialogid == DIALOG_GARAJKUR)
	{
		if(response)
		{
			for(new i = 0; i != MAX_GARAJ; i++) {
				if(GarajInfo[i][gPickup] == 0) {
					new Float:X,Float:Y,Float:Z,query[250],labelString[100];
					GetPlayerPos(playerid, X,Y,Z);

					GarajInfo[i][gID] = i;
					GarajInfo[i][gPickup] = CreateDynamicPickup(19132, 23,X, Y, Z, -1,-1,-1, 50.0);
					format(GarajInfo[i][gSahip], 24, "Yok");
					GarajInfo[i][gVw] = i + 1;
					GarajInfo[i][gInt] = listitem;
					GarajInfo[i][gKilit] = 0;
					GarajInfo[i][gKasa] = 0;
					GarajInfo[i][gKapasite] = 0;
					GarajInfo[i][gBirlik] = -1;

					GarajInfo[i][gX] = X;
					GarajInfo[i][gY] = Y;
					GarajInfo[i][gZ] = Z;

					Iter_Add(Garajlar, i);

					format(labelString, sizeof(labelString), "[{43D91A}AÇIK{FFFFFF}]\n{AFAFAF}[GARAJ(%d)]\n[SAHÝP]{FFFFFF} Yok", i);
					GarajInfo[i][gLabel] = CreateDynamic3DTextLabel(labelString, -1, X, Y, Z+0.8, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);

					mysql_format(g_SQL, query, sizeof(query), "INSERT INTO `garajlar` (`id`, `x`, `y`, `z`, `sahip`, `vw`, `interior`, `birlik`) VALUES('%d', '%f', '%f', '%f', '%e', '%d', '%d', '%d')", GarajInfo[i][gID], GarajInfo[i][gX], GarajInfo[i][gY], GarajInfo[i][gZ],  GarajInfo[i][gSahip], GarajInfo[i][gVw],GarajInfo[i][gInt],GarajInfo[i][gBirlik]);
					mysql_tquery(g_SQL, query, "OnCreateGaraj", "i", playerid);
					return 1;
				}
			}
		}
	}
	else if(dialogid == DIALOG_MALZEMEDUKKANI)
	{
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					if(oyuncuData[playerid][oPara] > 1499)
					{
						if(GetBosSlot(playerid) < MAX_ITEM && oyuncuData[playerid][pEnvanterAgirlik] < MAX_AGIRLIK) {
							ParaEkle(playerid, -1500);
							ItemEkle(playerid, 32, 1);
							SendClientMessage(playerid, RENK_ACIKYESIL, "1500$ karþýlýðýnda maymuncuk aldýnýz, envanterinizde bulabilirsiniz.");
						}
						else hataMesaji(playerid, "Envanterinizde boþ slot yok veya aðýrlýk limitini aþtýnýz.");
					}
					else
					{
						hataMesaji(playerid, "Yeterli paranýz bulunmamaktadýr.");
					}
				}
			}
		}
	}
	else if(dialogid == DIALOG_YAT_RADYO) {
		if(response) {
			if(strlen(inputtext) > 0) {
				new yatid = GetPVarInt(playerid, "Yatid"),
				msg[65];

				format(msg, sizeof(msg), "** > %s müzik çalarý açar.", OyuncuIsim(playerid));
				SendClientMessage(playerid, RENK_PEMBE, msg);
				strdel(msg, 3, 4);
				SetPlayerChatBubble(playerid, msg, RENK_PEMBE, 12.0, 10000);
				ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 1, 1, 0, 0, 1);
				YatInfo[yatid][yRadyo] = 1;
				foreach(new i : Player) {
					new Float:X,Float:Y,Float:Z;
					GetAttachedObjectPos(YatInfo[yatid][yObje], 4.358591, -9.824934, 3.768443,X,Y,Z);
				//GetPlayerPos(playerid, o_Pos[0], o_Pos[1], o_Pos[2]);
				//printf("YPS: %f, %f, %f", X,Y,Z), printf("OPS: %f, %f, %f", o_Pos[0], o_Pos[1], o_Pos[2]);

					if(IsPlayerInRangeOfPoint(i, 35, X, Y, Z))
					{
						PlayAudioStreamForPlayer(i, inputtext, X, Y, Z, 35.0, 1);
					}
				}
			} else {
				SendClientMessage(playerid, RENK_GRI, "Dinlemek istediðiniz istasyonun URL adresini girin.");
				ShowPlayerDialog(playerid, DIALOG_YAT_RADYO, DIALOG_STYLE_INPUT, "{F5E600}Müzik Çalar", "Dinlemek istediðiniz istasyonun URL adresini giriniz:", "Tamam", "Iptal");
			}
		}
	}
	else if(dialogid == DIALOG_YAT_KASA) {
		if(response) {
			switch(listitem) {
				case 0: {
					ShowPlayerDialog(playerid, DIALOG_YAT_KASA_KOY, DIALOG_STYLE_INPUT, "{F5E600}Yat Kasasý", "Kasanýn içerisine ne kadar para koymak istiyorsunuz?", "Tamam", "Iptal");
				}
				case 1: {
					ShowPlayerDialog(playerid, DIALOG_YAT_KASA_CIKAR, DIALOG_STYLE_INPUT, "{F5E600}Yat Kasasý", "Kasanýn içerisinden ne kadar para çýkarmak istiyorsunuz?", "Tamam", "Iptal");
				}
				case 2: {
					new yatid = GetPVarInt(playerid, "Yatid"), dialogMsg[128];
					format(dialogMsg, sizeof(dialogMsg), "Yat kasasýnda bulunan para miktarý: {23BD00}%i${FFFFFF}", YatInfo[yatid][yPara]);
					ShowPlayerDialog(playerid, DIALOG_YAT_KASA_BILGI, DIALOG_STYLE_MSGBOX, "{F5E600}Yat Kasasý", dialogMsg, "Tamam","");
				}
			}
		}
	}

	else if(dialogid == DIALOG_YAT_KASA_KOY) {
		if(response) {
			if(strlen(inputtext) != 0 && IsNumeric(inputtext)) {
				new para = strval(inputtext);
				if(para > 0) {
					if(oyuncuData[playerid][oPara] < para) return SendClientMessage(playerid, RENK_GRI, "Üzerinizde yeterli miktarda para bulunmuyor.");
					new query[90];
					new yatid = GetPVarInt(playerid, "Yatid");
					YatInfo[yatid][yPara] += para;

					mysql_format(g_SQL, query, sizeof(query), "UPDATE `yatlar` SET `para` = %i WHERE `id` = %i", YatInfo[yatid][yPara], yatid);
					mysql_tquery(g_SQL, query, "", "", playerid);

					format(query, sizeof(query), "Kasaya %i$ miktarýnda para koydunuz.", para);
					SendClientMessage(playerid, RENK_BEYAZ, query);
					format(query, sizeof(query), "kasaya bir miktar para koyar.");
					cmd(playerid, 1, query);
					ParaEkle(playerid, -para);
				} else {
					SendClientMessage(playerid, RENK_GRI, "Lütfen 0'dan büyük, numerik bir deðer girin.");
				}
			} else {
				SendClientMessage(playerid, RENK_GRI, "Kasaya koymak istediðiniz para miktarýný girin.");
			}
		}
	}

	else if(dialogid == DIALOG_YAT_KASA_CIKAR) {
		if(response) {
			if(strlen(inputtext) != 0 && IsNumeric(inputtext)) {
				new para = strval(inputtext);
				new yatid = GetPVarInt(playerid, "Yatid");
				if(para > 0) {
					if(YatInfo[yatid][yPara] < para) return SendClientMessage(playerid, RENK_GRI, "Kasada miktarda para bulunmuyor.");
					new query[90];
					YatInfo[yatid][yPara] -= para;

					mysql_format(g_SQL, query, sizeof(query), "UPDATE `yatlar` SET `para` = %i WHERE `id` = %i", YatInfo[yatid][yPara], yatid);
					mysql_tquery(g_SQL, query, "", "");

					format(query, sizeof(query), "Kasadan %i$ miktarýnda para çýkardýnýz.", para);
					SendClientMessage(playerid, RENK_BEYAZ, query);
					format(query, sizeof(query), "kasadan bir miktar para çýkarýr.");
					cmd(playerid, 1, query);
					ParaEkle(playerid, para);
				} else {
					SendClientMessage(playerid, RENK_GRI, "Lütfen 0'dan büyük, numerik bir deðer girin.");
				}
			} else {
				SendClientMessage(playerid, RENK_GRI, "Kasadan çýkarmak istediðiniz para miktarýný girin.");
			}
		}
	}
	else if(dialogid == DIALOG_YAT_SATINAL) {
		if(response) {
			if(strlen(inputtext) > 0 || strlen(inputtext) < 13) {
				new query[300];
				new i = GetYatID();


				YatInfo[i][yID] = i;
			YatInfo[i][yObje] = CreateDynamicObject(-2005, 126.6020, -1833.4073, -0.5358+5, 0, 0, 176.5665); //CreateObject(-2005, 126.6020, -1833.4073, -0.5358+5, 0, 0, 176.5665);
			format(YatInfo[i][ySahip], 40, "%s", oyuncuData[playerid][oIsim]);
			YatInfo[i][yX] = 126.6020;
			YatInfo[i][yY] = -1833.4073;
			YatInfo[i][yZ] = -0.5358+5;
			YatInfo[i][yrX] = 0;
			YatInfo[i][yrY] = 0;
			YatInfo[i][yrZ] = 176.5665;
			YatInfo[i][yAktif] = 1;
			YatInfo[i][yKullanimda] = 0;
			YatInfo[i][yRadyo] = 0;
			YatInfo[i][yPara] = 0;
			format(YatInfo[i][yIsim], 40, "%s", inputtext);
			YatInfo[i][yReis] = CreateDynamicObject(19482, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0); //CreateObject(19482, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
			SetDynamicObjectMaterialText(YatInfo[i][yReis], 0, inputtext, 130, "Ariel", 60, 1, 0xFFFFFFFF, 0x00000000, 0);
			AttachDynamicObjectToObject(YatInfo[i][yReis], YatInfo[i][yObje], -6.261342, 12.250880, -2.792347, -1.200000, 0.899999, 173.800033);
			YatInfo[i][yAttach] = CreateDynamicObject(2232, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0); //CreateObject(2232, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
			AttachDynamicObjectToObject(YatInfo[i][yAttach], YatInfo[i][yObje], 4.358591, -9.824934, 3.768443, 0.0, 0.0, -89.900032);
			YatInfo[i][yKasa] = CreateDynamicObject(1829, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0); //CreateObject(1829, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
			AttachDynamicObjectToObject(YatInfo[i][yKasa], YatInfo[i][yObje], -4.126798, -0.237221, 0.848311, 0.000000, 0.000000, 0.000000);
			mysql_format(g_SQL, query, sizeof(query), "INSERT INTO `yatlar` (`id`, `x`, `y`, `z`, `rz`, `sahip`, `isim`) VALUES('%d', '%f', '%f', '%f', '%f', '%e', '%e')", YatInfo[i][yID], YatInfo[i][yX], YatInfo[i][yY], YatInfo[i][yZ], YatInfo[i][yrZ], oyuncuData[playerid][oIsim], inputtext);
			mysql_tquery(g_SQL, query, "OnCreateYat", "i", playerid);
			CancelSelectTextDraw(playerid);
			ParaEkle(playerid, -1000000);
		} else {
			SendClientMessage(playerid, RENK_GRI, "Lütfen yatýnýz için 0 karakterden fazla, 13 karakterden az bir isim belirleyin.");
			ShowPlayerDialog(playerid, DIALOG_YAT_SATINAL, DIALOG_STYLE_INPUT, "{F5E600}Cortez's Yacht Club", "Lütfen yatýnýz için bir isim belirleyin(En fazla 12 karakter):", "Tamam", "Iptal");
		}
	}
}
else if(dialogid == ARACLARIM_MENU)
{
	if(response)
	{
		new aracid = AracDurumuCek(AracSlotSQL[playerid][listitem]);
		new Cache:GetCache, rows, query[200];
		mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM impounded_cars WHERE car_sqlid = '%d'", AracBilgi[aracid][aracID]);
		GetCache = mysql_query(g_SQL, query);
		cache_get_row_count(rows);
		if(!rows)
		{
			if(AracDurumuCek(AracSlotSQL[playerid][listitem]) == 0)
			{
				AracSpawnla(AracSlotSQL[playerid][listitem]);
				BilgiText(playerid, "~g~~h~~h~Aracýnýz baþarýyla en son park noktasýnda spawnlandý.");
			}
			else
			{
				new Float:arrPos[3];
				if(GetVehicleVirtualWorld(aracid) == 0)
				{
					GetVehiclePos(aracid, arrPos[0], arrPos[1], arrPos[2]);
					SetPlayerCheckpoint(playerid, arrPos[0], arrPos[1], arrPos[2], 5);
					SunucuMesaji(playerid, "Aracýnýn pozisyonu haritada iþaretlendi.");
				}
				else
				{
					new garajid = -1;
					for(new i = 0; i < MAX_GARAJ; i++) if(GarajInfo[i][gVw] == GetVehicleVirtualWorld(aracid))
					{
						garajid = i;
					}
					if(garajid == -1) return SunucuMesaji(playerid, "Aracýnýz bir garajda görünüyor.");
					SunucuMesaji(playerid, "Aracýnýz bir garajda görünüyor. Garaj ID'si: %d", garajid);
					SetPlayerCheckpoint(playerid, GarajInfo[garajid][gX], GarajInfo[garajid][gY], GarajInfo[garajid][gZ], 5.0);
				}
			}
		}
		else if(rows)
		{
			SunucuMesaji(playerid, "Aracýnýz çekilmiþ. Ödeme yaparak teslim almanýz gerekiyor.");
			SunucuMesaji(playerid, "$1000 karþýlýðýnda '/araccikar' ile çýkartabilirsiniz.");
		}
		cache_delete(GetCache);
	}
}
else if(dialogid == ARACCEZA_MENU)
{
	if(response)
	{
		new aracid = AracDurumuCek(AracSlotSQL[playerid][listitem]);
		if(AracDurumuCek(AracSlotSQL[playerid][listitem]) == 0)
		{
			hataMesaji(playerid, "Bu araç spawn olmamýþ durumda, /araclarim yazýp tekrar deneyin.");
		}
		else
		{
			new sorgu[128];
			mysql_format(g_SQL, sorgu, sizeof(sorgu), "SELECT * FROM `araccezalari` WHERE `aracPlaka` = '%e'", AracBilgi[aracid][aracPlaka]);
			mysql_tquery(g_SQL, sorgu, "AracCezaArat", "ds", playerid, AracBilgi[aracid][aracPlaka]);
			SetPVarInt(playerid, "cezaaracid", aracid);

		}
	}
}
else if(dialogid == DIALOG_S_BIRLIK)
{
	if(response) {
		new birlikid = oyuncuData[playerid][oBirlik];
		switch(listitem) {
			case 0:
			{
				new icerik[300];
				format(icerik, sizeof(icerik), "{FFFFFF}Birlik Ýsmi: {F5E600}%s{FFFFFF}\nBirlik Türü: {F5E600}%s{FFFFFF}\nID: {F5E600}%d{FFFFFF}\nSeviye: {F5E600}%d{FFFFFF}\nAktif üye: {F5E600}%d{FFFFFF}", BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikAd], birlikturadi(oyuncuData[playerid][oBirlik]), oyuncuData[playerid][oBirlik], BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikLevel], Birlik_Cevrimici(oyuncuData[playerid][oBirlik]));
				ShowPlayerDialog(playerid, BOS_MESAJ, DIALOG_STYLE_MSGBOX, "{F5E600}Birlik Bilgileri", icerik, "Tamam", "");
			}
			case 1:
			{
				if(BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikMaksRutbe] - 1 > oyuncuData[playerid][oBirlikRutbe])
					return hataMesaji(playerid, "Yeterli rütbeye sahip deðilsin."), cmd(playerid, 0, "birlik");
				new query[256], Cache:VeriCek, string[1536], sayi;
				mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `oyuncular` WHERE `birlik` = '%d' ORDER By `birlikrutbe` DESC", oyuncuData[playerid][oBirlik]);
				VeriCek = mysql_query(g_SQL, query);
				new rows = cache_num_rows();
				strcat(string, "Isim\tRütbe\tHesap\n");
				if(rows)
				{
					while(sayi < rows)
					{
						format(string, sizeof(string), "%s%s\t%d\t%s\n", string, vericek_varchar(sayi, "isim"), vericek_int(sayi, "birlikrutbe"), (OyuncuIDcek(vericek_varchar(sayi, "isim")) != INVALID_PLAYER_ID) ? ("{73EB65}Çevrimiçi") : ("{AFAFAF}Çevrimdýþý"));
						sayi++;
					}
				}
				cache_delete(VeriCek);
				if(!sayi) return hataMesaji(playerid, "Birliðinizde listelenebilecek üye bulunamadý.");
				new baslik[60];
				format(baslik, sizeof(baslik), "Birlik Üyeleri (%d)", sayi);
				ShowPlayerDialog(playerid, DIALOG_S_UYELER, DIALOG_STYLE_TABLIST_HEADERS, baslik, string, "Seç", "Geri");
			}
			case 2:
			{
				if(BirlikBilgi[birlikid][birlikMaksRutbe] - 3 < oyuncuData[playerid][oBirlikRutbe]) {
					switch(BirlikBilgi[birlikid][oKanal]) {
						case 1: {
							BirlikBilgi[birlikid][oKanal] = 0;
							foreach(new i : Player) if(oyuncuData[i][oBirlik] == birlikid) {
								SCM_Ex(i, RENK_SERVER, "BIRLIK: {FFFFFF}%s adlý birlik yetkilisi birlik kanalýný kapattý.", OyuncuIsim(playerid));
							}
							Birlik_Kaydet(birlikid);
							cmd(playerid, 0, "birlik");
						}
						case 0: {
							BirlikBilgi[birlikid][oKanal] = 1;
							foreach(new i : Player) if(oyuncuData[i][oBirlik] == birlikid) {
								SCM_Ex(i, RENK_SERVER, "BIRLIK: {FFFFFF}%s adlý birlik yetkilisi birlik kanalýný açtý.", OyuncuIsim(playerid));
							}
							Birlik_Kaydet(birlikid);
							cmd(playerid, 0, "birlik");
						}
					}
				}
				else return hataMesaji(playerid, "Yeterli rütbeye sahip deðilsin.");
			}
			case 3:
			{
				if(BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikMaksRutbe] - 3 < oyuncuData[playerid][oBirlikRutbe]) {
					DialogGoster(playerid, DIALOG_BIRLIK_DAVET, DIALOG_STYLE_INPUT, "> Birlik Davet", "Birliðine davet etmek istediðin kiþinin ismini veya ID'sini girin;", "Seç", "Ýptal");
				}
				else return hataMesaji(playerid, "Yeterli rütbeye sahip deðilsin.");
			}
			case 4:
			{
				if(BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikMaksRutbe] - 1 > oyuncuData[playerid][oBirlikRutbe])
					return hataMesaji(playerid, "Yeterli rütbeye sahip deðilsin."), cmd(playerid, 0, "birlik");
				BirlikRutbeDuzenle(playerid);
			}
			case 5:hataMesaji(playerid, "Bu bölüm aktif deðil."), cmd(playerid, 0, "birlik");
			case 6:
			{
				if(BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikMaksRutbe] - 1 > oyuncuData[playerid][oBirlikRutbe])
					return hataMesaji(playerid, "Yeterli rütbeye sahip deðilsin."), cmd(playerid, 0, "birlik");

				return DialogGoster(playerid, DIALOG_BIRLIK_DUYURU, DIALOG_STYLE_INPUT, "> Birlik - Duyuru Düzenle", "Lütfen yeni birlik duyuru metnini girin;\nKaldýrmak için boþluða \"Yok\" yazýn.", "Tamam", "Geri");

			}
			case 7:
			{
				if(OyuncuBirlikTuru(playerid) == BIRLIK_POLIS || OyuncuBirlikTuru(playerid) == BIRLIK_MEDIKAL) return hataMesaji(playerid, "Devlet oluþumlarý bu fonksiyonu kullanamaz.");
				if(BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikMaksRutbe] - 3 < oyuncuData[playerid][oBirlikRutbe]) {
					BirlikAraclariniGoster(playerid);
				}
				else return hataMesaji(playerid, "Yeterli rütbeye sahip deðilsin.");
			}
			case 8:DialogGoster(playerid, DIALOG_BIRLIK_AYRIL, DIALOG_STYLE_MSGBOX, "> Birlik Ayrýl", "Birliðinden/Oluþumunuzdan ayrýlmak istediðine emin misin?", "Ayrýl", "Ýptal");
			default:cmd(playerid, 0, "birlik");
		}
	}
}
else if(dialogid == DIALOG_S_UYELER)
{
	if(response)
	{
	    //if(!strcmp(OyuncuIsim(playerid, 1), inputtext, true)) return hataMesaji(playerid, "Kendi üzerinde iþlem yapamazsýn.");
		SetPVarString(playerid, "bLider_SecilenISIM", inputtext);
		ShowPlayerDialog(playerid, DIALOG_S_UYEISLEM, DIALOG_STYLE_LIST, inputtext, "Rütbe Deðiþtir\nBirlikten Kov", "Seç", "Geri");
	}
}
else if(dialogid == DIALOG_S_UYEISLEMX)
{
	if(response)
	{
		new hedef_isim[256], query[350];
		listitem += 1;
		GetPVarString(playerid, "bLider_SecilenISIM", hedef_isim, sizeof(hedef_isim));
		if(!strcmp(oyuncuData[playerid][oIsim], hedef_isim, true)) return hataMesaji(playerid, "Kendi rütbenizi deðiþtiremezsiniz.");
		if(OyuncuIDcek(hedef_isim) != INVALID_PLAYER_ID)
		{
			oyuncuData[OyuncuIDcek(hedef_isim)][oBirlikRutbe] = listitem;
		}
		else
		{
			mysql_format(g_SQL, query, sizeof(query), "UPDATE `oyuncular` SET `birlikrutbe` = '%d', `birlikrutbead` = '%e' WHERE `isim` = '%e'", listitem, inputtext, hedef_isim);
			mysql_query(g_SQL, query);
		}
		BirlikMesaji(oyuncuData[playerid][oBirlik], RENK_OLUSUM, "[BIRLIK] %s, %s adlý kiþinin rütbesini %s olarak deðiþtirdi.", OyuncuIsim(playerid, 1), hedef_isim, inputtext);
	}
}
else if(dialogid == DIALOG_S_UYEISLEM)
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				new rutbeler[1024];
				format(rutbeler, sizeof(rutbeler), "%s%s\n", rutbeler, BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikR1]);
				format(rutbeler, sizeof(rutbeler), "%s%s\n", rutbeler, BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikR2]);
				format(rutbeler, sizeof(rutbeler), "%s%s\n", rutbeler, BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikR3]);
				format(rutbeler, sizeof(rutbeler), "%s%s\n", rutbeler, BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikR4]);
				format(rutbeler, sizeof(rutbeler), "%s%s\n", rutbeler, BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikR5]);
				format(rutbeler, sizeof(rutbeler), "%s%s\n", rutbeler, BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikR6]);
				format(rutbeler, sizeof(rutbeler), "%s%s\n", rutbeler, BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikR7]);
				format(rutbeler, sizeof(rutbeler), "%s%s\n", rutbeler, BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikR8]);
				format(rutbeler, sizeof(rutbeler), "%s%s\n", rutbeler, BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikR9]);
				format(rutbeler, sizeof(rutbeler), "%s%s\n", rutbeler, BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikR10]);
				format(rutbeler, sizeof(rutbeler), "%s%s\n", rutbeler, BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikR11]);
				format(rutbeler, sizeof(rutbeler), "%s%s\n", rutbeler, BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikR12]);
				format(rutbeler, sizeof(rutbeler), "%s%s\n", rutbeler, BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikR13]);
				format(rutbeler, sizeof(rutbeler), "%s%s\n", rutbeler, BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikR14]);
				format(rutbeler, sizeof(rutbeler), "%s%s\n", rutbeler, BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikR15]);
				format(rutbeler, sizeof(rutbeler), "%s%s\n", rutbeler, BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikR16]);
				format(rutbeler, sizeof(rutbeler), "%s%s\n", rutbeler, BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikR17]);
				format(rutbeler, sizeof(rutbeler), "%s%s\n", rutbeler, BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikR18]);
				format(rutbeler, sizeof(rutbeler), "%s%s\n", rutbeler, BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikR19]);
				format(rutbeler, sizeof(rutbeler), "%s%s\n", rutbeler, BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikR20]);
				ShowPlayerDialog(playerid, DIALOG_S_UYEISLEMX, DIALOG_STYLE_LIST, "Rütbe Deðiþtir", rutbeler, "Seç", "Iptal");
			}
			case 1:
			{
				new hedef_isim[256], query[300];
				GetPVarString(playerid, "bLider_SecilenISIM", hedef_isim, sizeof(hedef_isim));

				if(OyuncuIDcek(hedef_isim) != INVALID_PLAYER_ID)
				{
					BirlikSifirla(OyuncuIDcek(hedef_isim));
				}
				else
				{
					mysql_format(g_SQL, query, sizeof(query), "UPDATE `oyuncular` SET `birlik` = '-1', `birlikrutbe` = '0' WHERE `isim` = '%e'", hedef_isim);
					mysql_query(g_SQL, query);
				}
				BirlikMesaji(oyuncuData[playerid][oBirlik], RENK_OLUSUM, "[BIRLIK] %s, %s adlý kiþiyi birlikten kovdu.", OyuncuIsim(playerid, 1), hedef_isim);
			}
		}
	}
}
else if(dialogid == DIALOG_BIRLIK) {
	if(response) {
		new birlikid = oyuncuData[playerid][oBirlik], sayi = 0;
		sayi = 0;
		switch(listitem) {
			case 0: {
				if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS && OyuncuBirlikTuru(playerid) != BIRLIK_DEVLET && OyuncuBirlikTuru(playerid) != BIRLIK_MEDIKAL)
					SunucuMesaji(playerid, "Birlik Adý: %s | Birlik Amaç: %s | Birlik Seviyesi: %d", BirlikBilgi[birlikid][birlikAd], birlikturadi(birlikid), BirlikBilgi[birlikid][birlikLevel]);
				else SunucuMesaji(playerid, "Birlik Adý: %s | Birlik Türü: %s", BirlikBilgi[birlikid][birlikAd], birlikturadi(birlikid));
			}
			case 1: {
				foreach(new i : Player) if(oyuncuData[i][oBirlik] == birlikid && i != playerid) {
					SunucuMesaji(playerid, "Ýsim: %s | ID: %d | Rütbe: %s", OyuncuIsim(i), i, OyuncuRutbeAdi(i)), sayi++;
				}
				if(!sayi) return hataMesaji(playerid, "Senden baþka aktif birlik üyesi bulunmuyor.");
			}
			case 2: {
				if(BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikMaksRutbe] - 3 < oyuncuData[playerid][oBirlikRutbe]) {
					DialogGoster(playerid, DIALOG_BIRLIK_DAVET, DIALOG_STYLE_INPUT, "> Birlik Davet", "Birliðine davet etmek istediðin kiþinin ismini veya ID'sini girin;", "Seç", "Ýptal");
				}
				else return hataMesaji(playerid, "Yeterli rütbeye sahip deðilsin.");
			}
			case 3: {
				if(BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikMaksRutbe] - 3 < oyuncuData[playerid][oBirlikRutbe]) {
					DialogGoster(playerid, DIALOG_BIRLIK_KOV, DIALOG_STYLE_INPUT, "> Birlik Kov", "Birliðinden atmak istediðin kiþinin ismini veya ID'sini girin;", "Seç", "Ýptal");
				}
				else return hataMesaji(playerid, "Yeterli rütbeye sahip deðilsin.");
			}
			case 4: {
				if(BirlikBilgi[birlikid][birlikMaksRutbe] - 3 < oyuncuData[playerid][oBirlikRutbe]) {
					switch(BirlikBilgi[birlikid][oKanal]) {
						case 1: {
							BirlikBilgi[birlikid][oKanal] = 0;
							foreach(new i : Player) if(oyuncuData[i][oBirlik] == birlikid) {
								SCM_Ex(i, RENK_SERVER, "BIRLIK: {FFFFFF}%s adlý birlik yetkilisi birlik kanalýný kapattý.", OyuncuIsim(playerid));
							}
							Birlik_Kaydet(birlikid);
							cmd(playerid, 0, "birlik");
						}
						case 0: {
							BirlikBilgi[birlikid][oKanal] = 1;
							foreach(new i : Player) if(oyuncuData[i][oBirlik] == birlikid) {
								SCM_Ex(i, RENK_SERVER, "BIRLIK: {FFFFFF}%s adlý birlik yetkilisi birlik kanalýný açtý.", OyuncuIsim(playerid));
							}
							Birlik_Kaydet(birlikid);
							cmd(playerid, 0, "birlik");
						}
					}
				}
				else return hataMesaji(playerid, "Yeterli rütbeye sahip deðilsin.");
			}
			case 5: BirlikRutbeDuzenle(playerid);
			case 6: {
				if(BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikMaksRutbe] - 3 > oyuncuData[playerid][oBirlikRutbe])
					return hataMesaji(playerid, "Yeterli rütbeye sahip deðilsin."), cmd(playerid, 0, "birlik");

				DialogGoster(playerid, DIALOG_BIRLIK_RUTBEVER, DIALOG_STYLE_INPUT, "> Rütbe Ver", "Rütbe vermek istediðin oyuncunun ismini veya ID'sini girin;", "Seç", "Geri");
			}
			case 7: {
				if(BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikMaksRutbe] - 1 > oyuncuData[playerid][oBirlikRutbe])
					return hataMesaji(playerid, "Yeterli rütbeye sahip deðilsin."), cmd(playerid, 0, "birlik");

				return DialogGoster(playerid, DIALOG_BIRLIK_DUYURU, DIALOG_STYLE_INPUT, "> Birlik - Duyuru Düzenle", "Lütfen yeni birlik duyuru metnini girin;\nKaldýrmak için boþluða \"Yok\" yazýn.", "Tamam", "Geri");
			}
		}
		if(!strcmp(inputtext, "Ayrýl", true)) DialogGoster(playerid, DIALOG_BIRLIK_AYRIL, DIALOG_STYLE_MSGBOX, "> Birlik Ayrýl", "Birliðinden/Oluþumunuzdan ayrýlmak istediðine emin misin?", "Ayrýl", "Ýptal");
	}
}
else if(dialogid == DIALOG_BIRLIK_DUYURU) {
	if(!response) return cmd(playerid, 0, "birlik");

	if(!strcmp(inputtext, "Yok", true))
	{
		BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikDuyuru][0] = 0;
		Birlik_Kaydet(oyuncuData[playerid][oBirlik]);
		return SunucuMesaji(playerid, "Duyuru kaldýrýldý.");
	}
	else if(strlen(inputtext) < 6 || strlen(inputtext) > 48) return hataMesaji(playerid, "Girilen duyuru en az 6 en fazla 48 harfli olmalýdýr.");
	else {
		static birlikid;
		birlikid = oyuncuData[playerid][oBirlik];
		format(BirlikBilgi[birlikid][birlikDuyuru], 48, "%s", inputtext);
		Birlik_Kaydet(birlikid);
		SunucuMesaji(playerid, "Birlik duyurusu güncellendi.");
		foreach(new o : Player) if(oyuncuData[o][oBirlik] == birlikid) BirlikDuyuruMesaji(o, "%s", inputtext);
		return true;
	}
}
else if(dialogid == DIALOG_BIRLIK_AYRIL) {
	if(response) {
		new birlikid = oyuncuData[playerid][oBirlik];
		foreach(new i : Player) if(oyuncuData[i][oBirlik] == birlikid && i != playerid) {
			SCM_Ex(i, RENK_SERVER, "BIRLIK: {FFFFFF}%s adlý oyuncu birlikten ayrýldý.", OyuncuIsim(playerid));
		}
		SunucuMesaji(playerid, "%s adlý birlikten/oluþumdan kendi isteðinle ayrýldýn.", BirlikBilgi[birlikid][birlikAd]);
		BirlikSifirla(playerid);
	}
	else if(!response) return SunucuMesaji(playerid, "Birliðinden/Oluþumunuzdan ayrýlmaktan vazgeçtin.");
}
else if(dialogid == DIALOG_BIRLIK_DAVET) {
	if(response) {
		static oyuncu, yazi[256];
		if(sscanf(inputtext, "u", oyuncu))
			return DialogGoster(playerid, DIALOG_BIRLIK_DAVET, DIALOG_STYLE_INPUT, "> Birlik Davet", "{B70000}HATA: {FFFFFF}Geçersiz oyuncu.\nBirliðine davet etmek istediðin kiþinin ismini veya ID'sini girin;", "Seç", "Ýptal");

		if(!IsPlayerConnected(oyuncu))
			return DialogGoster(playerid, DIALOG_BIRLIK_DAVET, DIALOG_STYLE_INPUT, "> Birlik Davet", "{B70000}HATA: {FFFFFF}Geçersiz oyuncu.\nBirliðine davet etmek istediðin kiþinin ismini veya ID'sini girin;", "Seç", "Ýptal");

		if(oyuncu == playerid)
			return DialogGoster(playerid, DIALOG_BIRLIK_DAVET, DIALOG_STYLE_INPUT, "> Birlik Davet", "{B70000}HATA: {FFFFFF}Kendine davet yollayamazsýn.\nBirliðine davet etmek istediðin kiþinin ismini veya ID'sini girin;", "Seç", "Ýptal");

		if(oyuncuData[oyuncu][oKarakterDurum] == 2) 
			return DialogGoster(playerid, DIALOG_BIRLIK_DAVET, DIALOG_STYLE_INPUT, "> Birlik Davet", "{B70000}HATA: {FFFFFF}Alt karakterler birliðe davet edilemez.\nBirliðine davet etmek istediðin kiþinin ismini veya ID'sini girin;", "Seç", "Ýptal");

		if(oyuncuData[oyuncu][oBirlik] > -1)
			return DialogGoster(playerid, DIALOG_BIRLIK_DAVET, DIALOG_STYLE_INPUT, "> Birlik Davet", "{B70000}HATA: {FFFFFF}Girilen oyuncu baþka bir birlik üyesi!\nBirliðine davet etmek istediðin kiþinin ismini veya ID'sini girin;", "Seç", "Ýptal");

		oyuncuData[oyuncu][oBirlikDavetEden] = playerid;
		SunucuMesaji(playerid, "%s adlý oyuncuyu birliðine davet ettin.", OyuncuIsim(oyuncu));
		format(yazi, sizeof(yazi), "%s adlý birliðe %s tarafýndan davet edildin.\n{E9E600}BÝLGÝ:{FFFFFF} Katýlmak için onayla tuþunu kullan.", BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikAd], OyuncuIsim(playerid));
		DialogGoster(oyuncu, DIALOG_BIRLIK_DAVET1, DIALOG_STYLE_MSGBOX, "> Birlik Davet", yazi, "Onayla", "Reddet");
	}
}
else if(dialogid == DIALOG_BIRLIK_DAVET1) {
	if(response) {
		new birlikdavet = oyuncuData[playerid][oBirlikDavetEden], birlikid = oyuncuData[birlikdavet][oBirlik];
		oyuncuData[playerid][oBirlik] = birlikid;
		oyuncuData[playerid][oBirlikRutbe] = 1;
		BirlikMesaji(oyuncuData[playerid][oBirlik], RENK_OLUSUM, "[BIRLIK] %s, %s tarafýndan birliðe dahil edildi.", OyuncuIsim(playerid), OyuncuIsim(birlikdavet));
		oyuncuData[playerid][oBirlikDavetEden] = -1;
		OyuncuKaydet(playerid);
		Birlik_Kaydet(birlikid);
	}
	else if(!response) {
		new birlikdavet = oyuncuData[playerid][oBirlikDavetEden];
		SunucuMesaji(playerid, "%s adlý kiþinin davetini reddettin.", OyuncuIsim(birlikdavet));
		SunucuMesaji(oyuncuData[playerid][oBirlikDavetEden], "%s birlik davetini reddetti.", OyuncuIsim(playerid));
		oyuncuData[playerid][oBirlikDavetEden] = -1;
	}
	OyuncuKaydet(playerid);
}
else if(dialogid == DIALOG_BIRLIK_KOV) {
	if(response) {
		new oyuncuid, birlikid = oyuncuData[playerid][oBirlik];
		if(sscanf(inputtext, "u", oyuncuid))
			return DialogGoster(playerid, DIALOG_BIRLIK_KOV, DIALOG_STYLE_INPUT, "> Birlik Kov", "{B70000}HATA: {FFFFFF}Geçersiz oyuncu.\nBirliðinden atmak istediðin kiþinin ismini veya ID'sini girin;", "Seç", "Ýptal");

		if(!IsPlayerConnected(oyuncuid))
			return DialogGoster(playerid, DIALOG_BIRLIK_KOV, DIALOG_STYLE_INPUT, "> Birlik Kov", "{B70000}HATA: {FFFFFF}Geçersiz oyuncu.\nBirliðinden atmak istediðin kiþinin ismini veya ID'sini girin;", "Seç", "Ýptal");

		if(oyuncuid == playerid)
			return DialogGoster(playerid, DIALOG_BIRLIK_KOV, DIALOG_STYLE_INPUT, "> Birlik Kov", "{B70000}HATA: {FFFFFF}Kendini atamazsýn.\nBirliðinden atmak istediðin kiþinin ismini veya ID'sini girin;", "Seç", "Ýptal");

		if(oyuncuData[oyuncuid][oBirlik] != oyuncuData[playerid][oBirlik])
			return DialogGoster(playerid, DIALOG_BIRLIK_KOV, DIALOG_STYLE_INPUT, "> Birlik Kov", "{B70000}HATA: {FFFFFF}Senin birliðinde olmayan birisini atamazsýn.\nBirliðinden atmak istediðin kiþinin ismini veya ID'sini girin;", "Seç", "Ýptal");

		if(oyuncuData[playerid][oBirlikRutbe] != BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikMaksRutbe])
		{
			if(oyuncuData[oyuncuid][oBirlikRutbe] >= oyuncuData[playerid][oBirlikRutbe])
				return DialogGoster(playerid, DIALOG_BIRLIK_KOV, DIALOG_STYLE_INPUT, "> Birlik Kov", "{B70000}HATA: {FFFFFF}Kendinden yüksek veya eþit rütbedeki birisini kovamazsýn.\nBirliðinden atmak istediðin kiþinin ismini veya ID'sini girin;", "Seç", "Ýptal");
		}
		BirlikSifirla(oyuncuid);
		BirlikMesaji(oyuncuData[playerid][oBirlik], RENK_OLUSUM, "[BIRLIK] %s, %s tarafýndan birlikten atýldý.", OyuncuIsim(oyuncuid), OyuncuIsim(playerid));
		Birlik_Kaydet(oyuncuData[playerid][oBirlik]);
		SunucuMesaji(playerid, "%s adlý kiþiyi birlikten/oluþumdan attýn.", OyuncuIsim(oyuncuid));
		SunucuMesaji(oyuncuid, "%s tarafýndan %s adlý birlikten/oluþumdan atýldýn.", OyuncuIsim(playerid), BirlikBilgi[birlikid][birlikAd]);
	}
}
else if(dialogid == DIALOG_BIRLIK_RDUZENLE) {
	if(response) {
		oyuncuData[playerid][oDuzenlenenRutbe] = listitem;
		DialogGoster(playerid, DIALOG_BIRLIK_RDUZENLE + 1, DIALOG_STYLE_INPUT, "> Rütbe Düzenle", "Yeni rütbe adýný girin;", "Seç", "Ýptal");
	}
}
else if(dialogid == DIALOG_BIRLIK_RDUZENLE + 1) {
	if(response) {
		if(isnull(inputtext)) return DialogGoster(playerid, DIALOG_BIRLIK_RDUZENLE + 1, DIALOG_STYLE_INPUT, "> Rütbe Düzenle", "Yeni rütbe adýný girin;", "Seç", "Ýptal");
		new birlikid = oyuncuData[playerid][oBirlik];
		switch(oyuncuData[playerid][oDuzenlenenRutbe]) {
			case 0: format(BirlikBilgi[birlikid][birlikR1], 32, "%s", inputtext);
			case 1: format(BirlikBilgi[birlikid][birlikR2], 32, "%s", inputtext);
			case 2: format(BirlikBilgi[birlikid][birlikR3], 32, "%s", inputtext);
			case 3: format(BirlikBilgi[birlikid][birlikR4], 32, "%s", inputtext);
			case 4: format(BirlikBilgi[birlikid][birlikR5], 32, "%s", inputtext);
			case 5: format(BirlikBilgi[birlikid][birlikR6], 32, "%s", inputtext);
			case 6: format(BirlikBilgi[birlikid][birlikR7], 32, "%s", inputtext);
			case 7: format(BirlikBilgi[birlikid][birlikR8], 32, "%s", inputtext);
			case 8: format(BirlikBilgi[birlikid][birlikR9], 32, "%s", inputtext);
			case 9: format(BirlikBilgi[birlikid][birlikR10], 32, "%s", inputtext);
			case 10: format(BirlikBilgi[birlikid][birlikR11], 32, "%s", inputtext);
			case 11: format(BirlikBilgi[birlikid][birlikR12], 32, "%s", inputtext);
			case 12: format(BirlikBilgi[birlikid][birlikR13], 32, "%s", inputtext);
			case 13: format(BirlikBilgi[birlikid][birlikR14], 32, "%s", inputtext);
			case 14: format(BirlikBilgi[birlikid][birlikR15], 32, "%s", inputtext);
			case 15: format(BirlikBilgi[birlikid][birlikR16], 32, "%s", inputtext);
			case 16: format(BirlikBilgi[birlikid][birlikR17], 32, "%s", inputtext);
			case 17: format(BirlikBilgi[birlikid][birlikR18], 32, "%s", inputtext);
			case 18: format(BirlikBilgi[birlikid][birlikR19], 32, "%s", inputtext);
			case 19: format(BirlikBilgi[birlikid][birlikR20], 32, "%s", inputtext);
		}
		SunucuMesaji(playerid, "Rütbe %d, %s olarak yeniden adlandýrýldý.", oyuncuData[playerid][oDuzenlenenRutbe] + 1, inputtext);
		Birlik_Kaydet(birlikid);
	}
	else if(!response) {
		cmd(playerid, 0, "birlik");
	}
}
else if(dialogid == DIALOG_BIRLIK_RUTBEVER) {
	if(response) {
		static oyuncu;
		if(sscanf(inputtext, "u", oyuncu))
			return DialogGoster(playerid, DIALOG_BIRLIK_RUTBEVER, DIALOG_STYLE_INPUT, "> Rütbe Ver", "Rütbe vermek istediðin oyuncunun ismini veya ID'sini girin;", "Seç", "Geri");

		if(!IsPlayerConnected(oyuncu))
			return DialogGoster(playerid, DIALOG_BIRLIK_RUTBEVER, DIALOG_STYLE_INPUT, "> Rütbe Ver", "{B70000}HATA: {FFFFFF}Girilen oyuncu geçersiz.\n\nRütbe vermek istediðin oyuncunun ismini veya ID'sini girin;", "Seç", "Geri");

		if(oyuncu == playerid)
			return DialogGoster(playerid, DIALOG_BIRLIK_RUTBEVER, DIALOG_STYLE_INPUT, "> Rütbe Ver", "{B70000}HATA: {FFFFFF}Kendi rütbeni deðiþtiremezsin.\n\nRütbe vermek istediðin oyuncunun ismini veya ID'sini girin;", "Seç", "Geri");

		if(oyuncuData[oyuncu][oBirlik] != oyuncuData[playerid][oBirlik])
			return DialogGoster(playerid, DIALOG_BIRLIK_RUTBEVER, DIALOG_STYLE_INPUT, "> Rütbe Ver", "{B70000}HATA: {FFFFFF}Girilen oyuncu senin birliðinde deðil.\n\nRütbe vermek istediðin oyuncunun ismini veya ID'sini girin;", "Seç", "Geri");

		DialogGoster(playerid, DIALOG_BIRLIK_RUTBEVER1, DIALOG_STYLE_INPUT, "> Rütbe Ver", "Oyuncuya vermek istediðin rütbe sayýsýný girin;", "Seç", "Geri");
		oyuncuData[playerid][oDuzenlenenRutbe] = oyuncu;
	}
	else if(!response) {
		cmd(playerid, 0, "birlik");
	}
}
else if(dialogid == DIALOG_BIRLIK_RUTBEVER1) {
	if(response) {
		new rutbe, oyuncu = oyuncuData[playerid][oDuzenlenenRutbe];
		if(sscanf(inputtext, "d", rutbe))
			return DialogGoster(playerid, DIALOG_BIRLIK_RUTBEVER1, DIALOG_STYLE_INPUT, "> Rütbe Ver", "{B70000}HATA: {FFFFFF}Lütfen geçerli bir rütbe girin.\n\nOyuncuya vermek istediðin rütbe sayýsýný girin;", "Seç", "Geri");

		if(rutbe < 1 || rutbe > BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikMaksRutbe])
			return DialogGoster(playerid, DIALOG_BIRLIK_RUTBEVER1, DIALOG_STYLE_INPUT, "> Rütbe Ver", "{B70000}HATA: {FFFFFF}Belirtilen rütbe sýfýrýn altýnda olamaz veya maksimum rütbeyi aþamaz!\n\nOyuncuya vermek istediðin rütbe sayýsýný girin;", "Seç", "Geri");

		if(oyuncuData[playerid][oBirlikRutbe] != BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikMaksRutbe])
		{
			if(oyuncuData[oyuncu][oBirlikRutbe] >= oyuncuData[playerid][oBirlikRutbe])
				return DialogGoster(playerid, DIALOG_BIRLIK_RUTBEVER1, DIALOG_STYLE_INPUT, "> Rütbe Ver", "{B70000}HATA: {FFFFFF}Kendinden yüksek veya eþit birinin rütbesini düzenleyemezsin!\n\nOyuncuya vermek istediðin rütbe sayýsýný girin;", "Seç", "Geri");
		}
		oyuncuData[oyuncu][oBirlikRutbe] = rutbe;
		BirlikMesaji(oyuncuData[playerid][oBirlik], RENK_OLUSUM, "[BIRLIK] %s, %s adlý kiþinin rütbesini %s olarak deðiþtirdi.", OyuncuIsim(playerid), OyuncuIsim(oyuncu), OyuncuRutbeAdi(oyuncu));
	}
	else if(!response) {
		cmd(playerid, 0, "birlik");
	}
}
else if(dialogid == DIALOG_POLIS_DEVRIYE)
{
	if(response)
	{
		SilahlariSifirlaEx(playerid);
		switch(listitem)
		{
			case 0:
			{
				cmd(playerid, 1, "dolaptan birinci sýnýf ekipmanlarý alýr.");
				ZirhDuzenle(playerid, 30);
				SilahVer(playerid, 24, 100);
			}
			case 1:
			{
				cmd(playerid, 1, "dolaptan ikinci sýnýf ekipmanlarý alýr.");
				ZirhDuzenle(playerid, 50);
				SilahVer(playerid, 24, 100);
			}
			case 2:
			{
				cmd(playerid, 1, "dolaptan üçüncü sýnýf ekipmanlarý alýr.");
				ZirhDuzenle(playerid, 100);
				SilahVer(playerid, 24, 100);
				SilahVer(playerid, 31, 330);
			}
		}

		oyuncuData[playerid][oIsbasi] = true;
		SetPlayerColor(playerid, RENK_PDISBASI);
		SilahVer(playerid, 3, 1);
		SilahVer(playerid, 41, 500);

		foreach(new i : Player) if(OyuncuBirlikTuru(i) == BIRLIK_POLIS && oyuncuData[playerid][oIsbasi] == true)
		{
			SetPlayerMarkerForPlayer(i, playerid, 0x8D8DFFFF);
		}
	}
}
else if(dialogid == DIALOG_MEDIKAL_DOLAP)
{
	if(!response) return 0;
	switch(listitem)
	{
		case 0:
		{
			if(oyuncuData[playerid][oIsbasi] == true) {
				cmd(playerid, 1, "ekipmanlarýný býrakýr.");
				oyuncuData[playerid][oIsbasi] = false;
				SilahlariSifirlaEx(playerid);
				SetPlayerColor(playerid, RENK_VARSAYILAN);
				ZirhDuzenle(playerid, 0);
				oyuncuData[playerid][oGeciciKiyafet] = 0;
				SetPlayerSkin(playerid, oyuncuData[playerid][oKiyafet]);
			}
			else
			{
				cmd(playerid, 1, "dolap kapaðýný aralayýp ekipmanlarýný ve üniformasýný giyinir.");
				SilahlariSifirlaEx(playerid);
				oyuncuData[playerid][oIsbasi] = true;

				SetPlayerColor(playerid, RENK_VCFD);
			}
		}
		case 1:
		{
			if(oyuncuData[playerid][oCinsiyet] == 1) {
				switch(oyuncuData[playerid][oTenRengi]) {
					case 1: ShowModelSelectionMenu(playerid, fderkekbeyaz, "Uniforma Sec");
					case 2: ShowModelSelectionMenu(playerid, fderkeksiyah, "Uniforma Sec");
				}
			}
			else if(oyuncuData[playerid][oCinsiyet] == 2) {
				switch(oyuncuData[playerid][oTenRengi]) {
					case 1: ShowModelSelectionMenu(playerid, fdkadinbeyaz, "Uniforma Sec");
					case 2: ShowModelSelectionMenu(playerid, fdkadinsiyah, "Uniforma Sec");
				}
			}
		}
		case 2:
		{
			SilahVer(playerid, WEAPON_FIREEXTINGUISHER, 20000);
		}
		case 3:
		{
			new stringg[856],baslik[256], durum[128];
			strcat(stringg, "Eþya\tBölge\tDurum\n");
			for(new x;x<MAX_AKSESUAR;x++)
			{
				new name[64];
				format(name, sizeof(name), "-");

				for(new i;i<sizeof(HoldingObjectsAll);i++)
				{
					if(HoldingObjectsAll[i][holdingmodelid] == oyuncakData[playerid][x][ptModelID])
					{
						format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
					}
				}
				if(oyuncakData[playerid][x][ptRealID] != 0)
				{
					format(durum, sizeof(durum), "{FF0000}Dolu");
				}
				else format(durum, sizeof(durum), "{80FF00}Boþ");
				format(stringg, sizeof(stringg), "%s%s\t%s\t%s\n", stringg, name, KemikKisimlari[oyuncakData[playerid][x][ptBone]], durum);
			}
			format(baslik, sizeof(baslik), "{9CBBC5}Aksesuar:{FFFFFF} Slot Seç");
			DialogGoster(playerid, FDAKSESUARAL, DIALOG_STYLE_TABLIST_HEADERS, baslik, stringg, "Seç", "Iptal");
		}
	}
}
else if(dialogid == DIALOG_POLIS_DOLAP) {
	if(!response) return 0;

	if(!strcmp(inputtext, "Ýþbaþý", true)) {
		if(oyuncuData[playerid][oIsbasi] == true) {
			cmd(playerid, 1, "ekipmanlarýný býrakýr.");
			BirlikMesajiEx(BIRLIK_POLIS, RENK_TELSIZ, "** HQ: %s %s iþbaþýndan ayrýldý.", OyuncuRutbeAdi(playerid), OyuncuIsim(playerid));
			oyuncuData[playerid][oIsbasi] = false;
			SilahlariSifirla(playerid);
			SilahVer(playerid, 24, 70);
			SetPlayerColor(playerid, RENK_VARSAYILAN);
			ZirhDuzenle(playerid, 0);
			oyuncuData[playerid][oGeciciKiyafet] = 0;
			SetPlayerSkin(playerid, oyuncuData[playerid][oKiyafet]);
			//DestroyDynamic3DTextLabel(pdrozet[playerid]);
		}
		else
		{
			cmd(playerid, 1, "dolap kapaðýný aralayýp ekipmanlarýný ve üniformasýný giyinir.");
			BirlikMesajiEx(BIRLIK_POLIS, RENK_TELSIZ, "** HQ: %s %s þu anda iþbaþýnda.", OyuncuRutbeAdi(playerid), OyuncuIsim(playerid));

			SilahlariSifirla(playerid);
			ZirhDuzenle(playerid, 25);

			VeritabaniSilahVer(playerid, 24, 100);
			SunucuMesaji(playerid, "Jop ve biber gazýný ekipmanlar arasýndan almayý unutma.");
			oyuncuData[playerid][oIsbasi] = true;

			SetPlayerColor(playerid, RENK_PDISBASI);
			/*new string[64];
			format(string, sizeof(string), "[%s]", OyuncuRutbeAdi(playerid));
			pdrozet[playerid] = CreateDynamic3DTextLabelEx(string, RENK_APOLET, 0, 0, -20, 25, playerid);
			Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, pdrozet[playerid], E_STREAMER_ATTACH_OFFSET_Z, 0.37);*/
			foreach(new i : Player) if(OyuncuBirlikTuru(i) == BIRLIK_POLIS && oyuncuData[playerid][oIsbasi] == true)
			{
				SetPlayerMarkerForPlayer(i, playerid, 0x8D8DFFFF);
			}

			if(oyuncuData[playerid][oCinsiyet] == 1)
			{
				if(oyuncuData[playerid][oTenRengi] == 1)
				{
					oyuncuData[playerid][oGeciciKiyafet] = 280;
					OyuncuKaydet(playerid);
					SetPlayerSkin(playerid, 280);
				}
				else if(oyuncuData[playerid][oTenRengi] == 2)
				{
					oyuncuData[playerid][oGeciciKiyafet] = 265;
					OyuncuKaydet(playerid);
					SetPlayerSkin(playerid, 265);
				}
			}
			else if(oyuncuData[playerid][oCinsiyet] == 2)
			{
				if(oyuncuData[playerid][oTenRengi] == 1)
				{
					oyuncuData[playerid][oGeciciKiyafet] = 306;
					OyuncuKaydet(playerid);
					SetPlayerSkin(playerid, 306);
				}
				else if(oyuncuData[playerid][oTenRengi] == 2)
				{
					oyuncuData[playerid][oGeciciKiyafet] = 307;
					OyuncuKaydet(playerid);
					SetPlayerSkin(playerid, 307);
				}
			}
				// DialogGoster(playerid, DIALOG_POLIS_DEVRIYE, DIALOG_STYLE_TABLIST_HEADERS, "> LSPD - Ýþ Baþý", "Ekipman Türü\nTekli Devriye Ekipmaný\nÇiftli Devriye Ekipmaný\nOperasyon Ekipmaný", "Seç", "Ýptal");

		}
	}
	if(!strcmp(inputtext, "Ekipmanlar", true)) {
		if(oyuncuData[playerid][oIsbasi] == false) return hataMesaji(playerid, "Ýþbaþýnda deðilken ekipman alamazsýn.");

		DialogGoster(playerid, DIALOG_POLIS_EKIPMAN, DIALOG_STYLE_TABLIST_HEADERS, "> VCPD - Ekipman", "Ekipman Adý\t\tAdet\nDesert Eagle\t\t(Mermi: 200)\nShotgun\t\t(Mermi: 400)\nMP5\t\t(Mermi: 1000)\nM4\t\t(Mermi: 500)\nSprey\t\t(Mermi: 1000)\nKamera\t\t(Mermi: 100)\n9mm\t\t(Mermi: 200)\nJop\t\t(Mermi: 1)", "Seç", "Ýptal");
	}
	if(!strcmp(inputtext, "Aksesuarlar", true))
	{
		cmd(playerid, 0, "pdaksesuar");
	}
	if(!strcmp(inputtext, "Çelik Yelek", true)) {
		if(techizatizni == false && oyuncuData[playerid][oBirlikRutbe] < 11) return hataMesaji(playerid, "Bu seçenek teðmen ve üzeri rütbeler tarafýndan kullanýlabilir.");
		if(oyuncuData[playerid][oIsbasi] == false) return hataMesaji(playerid, "Ýþbaþýnda deðilken zýrh alamazsýn.");

		ZirhDuzenle(playerid, 100);
		cmd(playerid, 1, "dolabý aralar ve içerisinden çelik yeleðini alýr, üzerine geçirir.");
	}
	if(!strcmp(inputtext, "Üniformalar", true)) {
		if(oyuncuData[playerid][oIsbasi] == false) return hataMesaji(playerid, "Ýþbaþýnda deðilken üniforma alamazsýn.");

		if(oyuncuData[playerid][oCinsiyet] == 1) {
			switch(oyuncuData[playerid][oTenRengi]) {
				case 1: ShowModelSelectionMenu(playerid, uniformaerkekbeyaz, "Uniforma Sec");
				case 2: ShowModelSelectionMenu(playerid, uniformaerkeksiyah, "Uniforma Sec");
			}
		}
		else if(oyuncuData[playerid][oCinsiyet] == 2) {
			switch(oyuncuData[playerid][oTenRengi]) {
				case 1: ShowModelSelectionMenu(playerid, uniformakadinbeyaz, "Uniforma Sec");
				case 2: ShowModelSelectionMenu(playerid, uniformakadinsiyah, "Uniforma Sec");
			}
		}
	}
	if(!strcmp(inputtext, "Aðrý Kesici", true)) CanDuzenle(playerid, 100);
	if(!strcmp(inputtext, "Silah Sýfýrla", true)) SilahlariSifirla(playerid), SunucuMesaji(playerid, "Silahlarýný býraktýn.");
	if(!strcmp(inputtext, "Beanbag Býrak", true)) {
		if(oyuncuData[playerid][oBeanbag] == false) return hataMesaji(playerid, "Beanbag tüfeðiniz yok, dolaba býrakamazsýnýz.");

		oyuncuData[playerid][oBeanbag] = false;

		SetPlayerArmedWeapon(playerid, oyuncuData[playerid][oSilah][3]);
		cmd(playerid, 1, "iki eliyle tuttuðu beanbag tüfeðini sýrtýna asar.");
	}
}
else if(dialogid == DIALOG_POLIS_EKIPMAN) {
	if(response) {
		if(oyuncuData[playerid][oIsbasi] == false)
			return hataMesaji(playerid, "Ýþbaþýnda deðilsin.");

		switch(listitem) {
			case 0: VeritabaniSilahVer(playerid, WEAPON_DEAGLE, 200);
			case 1: VeritabaniSilahVer(playerid, WEAPON_SHOTGUN, 400);
			case 2: VeritabaniSilahVer(playerid, WEAPON_MP5, 1000);
			case 3: VeritabaniSilahVer(playerid, WEAPON_M4, 500);
			case 4: VeritabaniSilahVer(playerid, WEAPON_SPRAYCAN, 1000);
			case 5: VeritabaniSilahVer(playerid, WEAPON_CAMERA, 100);
			case 6: VeritabaniSilahVer(playerid, WEAPON_COLT45, 150);
			case 7: VeritabaniSilahVer(playerid, WEAPON_NITESTICK, 1);
		}
	}
	else if(!response) {
		cmd(playerid, 0, "dolap");
	}
}
else if(dialogid == DIALOG_EV_SAHIP) {
	if(!response) return false;
	new id = Oyuncu_Evde(playerid);

	if(!strcmp(inputtext, "Kilit Durumunu Deðiþtir", true)) {
		switch(EvBilgi[id][evDurum]) {
			case 1: {
				EvBilgi[id][evDurum] = 2;
				Ev_Yenile(id);
				cmd(playerid, 1, "evin kapýsýný kilitler.");
			}
			case 2: {
				EvBilgi[id][evDurum] = 1;
				Ev_Yenile(id);
				cmd(playerid, 1, "evin kapýsýnýn kilidini açar.");
			}
			default: hataMesaji(playerid, "Bu evin kilit durumunu deðiþtiremezsin.");
		}
	}
	else if(!strcmp(inputtext, "Lamba Durumunu Deðiþtir", true)) cmd(playerid, 0, "evlamba");

	else if(!strcmp(inputtext, "Kapý Pozisyonu Ayarla", true)) {
		if(Ev_SahipKontrol(playerid, Oyuncu_Evde(playerid)))
		{
			GetPlayerPos(playerid, EvBilgi[id][evIcPos][0], EvBilgi[id][evIcPos][1], EvBilgi[id][evIcPos][2]);
			GetPlayerFacingAngle(playerid, EvBilgi[id][evIcPos][3]);

			EvBilgi[id][evInterior] = GetPlayerInterior(playerid);
			SetPlayerVirtualWorld(playerid, EvBilgi[id][evVW]);

			Ev_Kaydet(id);
		}
		else hataMesaji(playerid, "Ýç pozisyonu deðiþtirebilmek için ev sahibi olmalýsýnýz.");
	}
	else if(!strcmp(inputtext, "Silah Envanter", true))
	{
		new query[70];

		mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `house_inventory` WHERE `inventory_house` LIKE '%d'", EvBilgi[id][evID]);
		mysql_tquery(g_SQL, query, "OnPlayerCheckHouseInventory", "dd", playerid, id);
	}
	else if(!strcmp(inputtext, "Eþya Envanter", true))
	{
		new query[90];

		mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM ev_envanter WHERE EvId = '%d'", EvBilgi[id][evID]);
		mysql_tquery(g_SQL, query, "EvEnvanterKontrol", "dd", playerid, id);
	}
}
else if(dialogid == DIALOG_EV_KAPI) {
	if(!response) return false;
	new id = Ev_Yakin(playerid), id2;
	if(!strcmp(inputtext, "Zil Çal", true)) {
		foreach(new i : Player) {
			id2 = Oyuncu_Evde(i);
			if(id2 == id) {
				SCM_Ex(i, RENK_DO, "* Zil çalýyor. (( Ev ))");
			}
		}
		cmd(playerid, 1, "zile basar.");
	}
	else if(!strcmp(inputtext, "Kilit Durumunu Deðiþtir", true)) {
		if(Ev_SahipKontrol(playerid, id) || EvBilgi[id][evKiraci] == oyuncuData[playerid][oID]) {
			switch(EvBilgi[id][evDurum]) {
				case 1: {
					EvBilgi[id][evDurum] = 2;
					Ev_Yenile(id);
					cmd(playerid, 1, "evin kapýsýný kilitler.");
				}
				case 2: {
					EvBilgi[id][evDurum] = 1;
					Ev_Yenile(id);
					cmd(playerid, 1, "evin kapýsýnýn kilidini açar.");
				}
				default: hataMesaji(playerid, "Bu evin kilit durumunu deðiþtiremezsin.");
			}
		}
		else return hataMesaji(playerid, "Bu evin sahibi ya da kiracýsý deðilsin.");
	}
	else if(!strcmp(inputtext, "Dekor Deðiþtir", true)) {
		if(!Ev_SahipKontrol(playerid, Ev_Yakin(playerid)))
			return hataMesaji(playerid, "Bu seçeneði sadece ev sahibi kullanabilir.");

		return DialogGoster(playerid, DIALOG_EV_DEKOR, DIALOG_STYLE_INPUT, "> Dekor Deðiþtir", "Forum konusundan ev dekorlarýna ulaþabilirsiniz.\nBuraya 0 deðerini girerseniz eviniz boþ depo haline gelir, kendiniz sýfýrdan dekore edersiniz.\nLütfen dekor numarasýný girin:", "Tamam", "Ýptal");
	}
	else if(!strcmp(inputtext, "Kira durumunu deðiþtir", true)) {
		if(!Ev_SahipKontrol(playerid, Ev_Yakin(playerid)))
			return hataMesaji(playerid, "Bu seçeneði sadece ev sahibi kullanabilir.");

		switch(EvBilgi[id][evKiralik]) {
			case 0: SunucuMesaji(playerid, "Ev artýk kiralanabilir."), EvBilgi[id][evKiralik] = 1;
			case 1: SunucuMesaji(playerid, "Ev artýk kiralanamaz."), EvBilgi[id][evKiralik] = 0;
		}
		EvBilgi[id][evKiraciIsim][0] = 0;
		Ev_Yenile(id);
		return Ev_Kaydet(id);
	}
	else if(!strcmp(inputtext, "Kira ücretini deðiþtir", true)) {
		if(!Ev_SahipKontrol(playerid, Ev_Yakin(playerid)))
			return hataMesaji(playerid, "Bu seçeneði sadece ev sahibi kullanabilir.");

		if(EvBilgi[id][evKiralik] == 0) return hataMesaji(playerid, "Bu ev kiralýk deðil.");
		return DialogGoster(playerid, DIALOG_KIRA_UCRET, DIALOG_STYLE_INPUT, "> Kira Ücretini Deðiþtir", "Lütfen yeni kira ücretini girin:", "Tamam", "Ýptal");
	}
	else if(!strcmp(inputtext, "Kiracý Çýkart", true)) {
		if(Ev_SahipKontrol(playerid, id)) {
			if(EvBilgi[id][evKiraci] == 0) return hataMesaji(playerid, "Kiracýn yok.");

			EvBilgi[id][evKiraci] = 0;
			SunucuMesaji(playerid, "%s adlý kiracýný çýkarttýn.", EvBilgi[id][evKiraciIsim]);
			EvBilgi[id][evKiraciIsim][0] = 0;
			Ev_Kaydet(id);
			return Ev_Yenile(id);
		}
		else return hataMesaji(playerid, "Bu evin sahibi deðilsin.");
	}
	else if(!strcmp(inputtext, "Evi Sisteme Sat", true)) {
		if(oyuncuData[playerid][oSatisYapiyor] == true) return hataMesaji(playerid, "Þu anda bir satýþ iþlemi gerçekleþtiriyorsunuz.");
		if(Ev_SahipKontrol(playerid, id)) {
			new itemCheck = 0;
			for(new a; a < MAX_ITEM; a++)
			{
				if(EvEnvanterData[id][i_aktif][a]){
					itemCheck++;
					}
			}
			if(itemCheck > 0) return hataMesaji(playerid, "Ev envanterinde eþya varken evi satamazsýn. Önce eþyalarý almalýsýn.");
			new onaystring[128];
			if(oyuncuData[playerid][oEkonomiPaketi] < 1)
			{
				format(onaystring, sizeof(onaystring), "Evini %s karþýlýðýnda sisteme satmak istediðinden emin misin?", NumaraFormati(YuzdeHesapla(EvBilgi[id][evFiyat], SERVER_YUZDE)));
			}
			else
			{
  				format(onaystring, sizeof(onaystring), "Evini %s karþýlýðýnda sisteme satmak istediðinden emin misin?", NumaraFormati(YuzdeHesapla(EvBilgi[id][evFiyat], VIP_YUZDE)));
			}
			Dialog_Show(playerid, evsistemesatonay, DIALOG_STYLE_MSGBOX, "Evi Sisteme Sat", onaystring, "Onayla", "Ýptal");
		}
		else return hataMesaji(playerid, "Bu evin sahibi deðilsin.");
	}
	else if(!strcmp(inputtext, "Kiracýlýktan Ayrýl", true)) {
		if(oyuncuData[playerid][oGiris] == false) return hataMesaji(playerid, "Þu anda bu seçeneði kullanamazsýn.");
		if(KomutUygunlukKontrol(playerid) == 0) return UygunDegilMesaj(playerid);
		//if(oyuncuData[playerid][oAdminDurum]) return hataMesaji(playerid, "Yönetici iþbaþýndayken bu seçeneði kullanamazsýn.");
		if(EvBilgi[id][evKiraci] != oyuncuData[playerid][oID]) return hataMesaji(playerid, "Bu evin kiracýsý deðilsin.");
		EvBilgi[id][evKiraci] = 0;
		EvBilgi[id][evKiraciIsim][0] = 0;
		Ev_Kaydet(id);
		Ev_Yenile(id);
		SunucuMesaji(playerid, "Kiracýlýktan kendi isteðinle ayrýldýn.");
	}
	else if(!strcmp(inputtext, "Evi Kirala", true)) {
		if(EvBilgi[id][evKiralik] == 0) return hataMesaji(playerid, "Bu ev kiralanamaz.");
		if(EvBilgi[id][evKiraci] != 0) return hataMesaji(playerid, "Bu ev kiralanmýþ.");
		if(oyuncuData[playerid][oPara] < EvBilgi[id][evKiraUcret]) return hataMesaji(playerid, "Kira seçeneði karþýlayamýyorsun.");
		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu seçeneði araçta kullanýlamaz.");
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT || oyuncuData[playerid][oGiris] == false) return hataMesaji(playerid, "Þu an bu seçeneði kullanamazsýn.");
		if(oyuncuData[playerid][oHapisSure][0] > 0 || oyuncuData[playerid][oHapisSure][1] > 0) return hataMesaji(playerid, "Hapiste bu seçeneði kullanamazsýn.");
		if(oyuncuData[playerid][oGozalti] > 0) return hataMesaji(playerid, "Gözaltýndayken bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu seçeneði kullanamazsýn.");

		EvBilgi[id][evKiraci] = oyuncuData[playerid][oID];
		format(EvBilgi[id][evKiraciIsim], 32, "%s", OyuncuIsim(playerid));
		ParaEkle(playerid, -EvBilgi[id][evKiraUcret]);
		EvBilgi[id][evKasa] += EvBilgi[id][evKiraUcret];
		Ev_Kaydet(id);
		Ev_Yenile(id);
	}
}
else if(dialogid == DIALOG_KIRA_UCRET) {
	if(!response) return false;
	new ucret;
	if(sscanf(inputtext, "d", ucret))
		return DialogGoster(playerid, DIALOG_KIRA_UCRET, DIALOG_STYLE_INPUT, "> Kira Ücretini Deðiþtir", "Lütfen yeni kira ücretini girin:", "Tamam", "Ýptal");

	if(ucret < 20 || ucret > 500)
		return DialogGoster(playerid, DIALOG_KIRA_UCRET, DIALOG_STYLE_INPUT, "> Kira Ücretini Deðiþtir", "{B70000}HATA: {FFFFFF}Girilen kira ücreti geçersiz. (20-500)\nLütfen yeni kira ücretini girin:", "Tamam", "Ýptal");

	new evid = Ev_Yakin(playerid);
	EvBilgi[evid][evKiraUcret] = ucret;
	Ev_Yenile(evid);
	return Ev_Kaydet(evid);
}
else if(dialogid == DIALOG_EV_DEKOR) {
	if(!response)
		return 0;

	static dekorid;
	if(sscanf(inputtext, "d", dekorid))
		return DialogGoster(playerid, DIALOG_EV_DEKOR, DIALOG_STYLE_INPUT, "> Dekor Deðiþtir", "Forum konusundan ev dekorlarýna ulaþabilirsiniz.\nBuraya 0 deðerini girerseniz eviniz boþ depo haline gelir, kendiniz sýfýrdan dekore edersiniz.\nLütfen dekor numarasýný girin:", "Tamam", "Ýptal");

	if(dekorid < 0 || dekorid > 28)
		return DialogGoster(playerid, DIALOG_EV_DEKOR, DIALOG_STYLE_INPUT, "> Dekor Deðiþtir", "{B70000}Girilen dekor numarasý yanlýþ.\n{FFFFFF}Forum konusundan ev dekorlarýna ulaþabilirsiniz.\nBuraya 0 deðerini girerseniz eviniz boþ depo haline gelir, kendiniz sýfýrdan dekore edersiniz.\nLütfen dekor numarasýný girin:", "Tamam", "Ýptal");

	dekordegistir(playerid, Ev_Yakin(playerid), dekorid);
}
else if(dialogid == DIALOG_EHLIYET_AYRIL) {
	if(response) {
		EhliyetTestiiptal(playerid);
		UyariMesaji(playerid, "Ehliyet testini iptal ettin.");
	}
	else if(!response) {
		PutPlayerInVehicle(playerid, oyuncuData[playerid][oSonBinilenArac], 0);
	}
}
else if(dialogid == DIALOG_GIYIM) {
	if(response)
	{
		if(listitem == 0)
		{
			if(oyuncuData[playerid][oCinsiyet] == 1) {
				switch(oyuncuData[playerid][oTenRengi]) {
					case 1 : {
						switch(oyuncunungiyim[playerid]) {
							case 1: ShowModelSelectionMenu(playerid, erkekbeyazorta, "Erkek Kiyafet");
							case 2: ShowModelSelectionMenu(playerid, erkekbeyazorta, "Erkek Kiyafet");
							case 3: ShowModelSelectionMenu(playerid, erkekbeyazorta, "Erkek Kiyafet");
						}
					}
					case 2: {
						switch(oyuncunungiyim[playerid]) {
							case 1: ShowModelSelectionMenu(playerid, erkeksiyahorta, "Erkek Kiyafet");
							case 2: ShowModelSelectionMenu(playerid, erkeksiyahorta, "Erkek Kiyafet");
							case 3: ShowModelSelectionMenu(playerid, erkeksiyahorta, "Erkek Kiyafet");
						}
					}
				}
			}
			else if(oyuncuData[playerid][oCinsiyet] == 2) {
				switch(oyuncuData[playerid][oTenRengi]) {
					case 1: {
						switch(oyuncunungiyim[playerid]) {
							case 1: ShowModelSelectionMenu(playerid, kadinbeyazorta, "Kadin Kiyafet");
							case 2: ShowModelSelectionMenu(playerid, kadinbeyazorta, "Kadin Kiyafet");
							case 3: ShowModelSelectionMenu(playerid, kadinbeyazorta, "Kadin Kiyafet");
						}
					}
					case 2: {
						switch(oyuncunungiyim[playerid]) {
							case 1: ShowModelSelectionMenu(playerid, kadinsiyahorta, "Kadin Kiyafet");
							case 2: ShowModelSelectionMenu(playerid, kadinsiyahorta, "Kadin Kiyafet");
							case 3: ShowModelSelectionMenu(playerid, kadinsiyahorta, "Kadin Kiyafet");
						}
					}
				}
			}
		}
		else if(listitem == 1)
		{
			new stringg[856],baslik[256], durum[128];
			strcat(stringg, "Eþya\tBölge\tDurum\n");
			for(new x;x<MAX_AKSESUAR;x++)
			{
				new name[64];
				format(name, sizeof(name), "-");

				for(new i;i<sizeof(HoldingObjectsAll);i++)
				{
					if(HoldingObjectsAll[i][holdingmodelid] == oyuncakData[playerid][x][ptModelID])
					{
						format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
					}
				}
				if(oyuncakData[playerid][x][ptRealID] != 0)
				{
					format(durum, sizeof(durum), "{FF0000}Dolu");
				}
				else format(durum, sizeof(durum), "{80FF00}Boþ");
				format(stringg, sizeof(stringg), "%s%s\t%s\t%s\n", stringg, name, KemikKisimlari[oyuncakData[playerid][x][ptBone]], durum);
			}
			format(baslik, sizeof(baslik), "{9CBBC5}Aksesuar:{FFFFFF} Slot Seç");
			DialogGoster(playerid, AKSESUARSATINAL2, DIALOG_STYLE_TABLIST_HEADERS, baslik, stringg, "Seç", "Iptal");
		}
		else if(listitem == 2)
		{
			if(oyuncuData[playerid][oCinsiyet] == 1) {
				switch(oyuncuData[playerid][oTenRengi]) {
					case 1: ShowModelSelectionMenu(playerid, erkekdolapbeyaz, "Erkek Kiyafet");
					case 2: ShowModelSelectionMenu(playerid, erkekdolapsiyah, "Erkek Kiyafet");
				}
			}
			else if(oyuncuData[playerid][oCinsiyet] == 2) {
				switch(oyuncuData[playerid][oTenRengi]) {
					case 1: ShowModelSelectionMenu(playerid, kadindolapbeyaz, "Kadin Kiyafet");
					case 2: ShowModelSelectionMenu(playerid, kadindolapsiyah, "Kadin Kiyafet");
				}
			}
		}
		else if(listitem == 3)
		{
			if(oyuncuData[playerid][oCinsiyet] == 1) {
				ShowModelSelectionMenu(playerid, erkekvip, "Erkek Vip Kiyafet");
			}
			else if(oyuncuData[playerid][oCinsiyet] == 2) {
				ShowModelSelectionMenu(playerid, kadinvip, "Erkek Vip Kiyafet");
			}
		}
		else if(listitem == 4)
		{
			new stringg[856],baslik[256], durum[128];
			strcat(stringg, "Eþya\tBölge\tDurum\n");
			for(new x;x<MAX_AKSESUAR;x++)
			{
				new name[64];
				format(name, sizeof(name), "-");

				for(new i;i<sizeof(HoldingObjectsAll);i++)
				{
					if(HoldingObjectsAll[i][holdingmodelid] == oyuncakData[playerid][x][ptModelID])
					{
						format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
					}
				}
				if(oyuncakData[playerid][x][ptRealID] != 0)
				{
					format(durum, sizeof(durum), "{FF0000}Dolu");
				}
				else format(durum, sizeof(durum), "{80FF00}Boþ");
				format(stringg, sizeof(stringg), "%s%s\t%s\t%s\n", stringg, name, KemikKisimlari[oyuncakData[playerid][x][ptBone]], durum);
			}
			format(baslik, sizeof(baslik), "{9CBBC5}Aksesuar:{FFFFFF} Slot Seç");
			DialogGoster(playerid, DIALOG_OZELAKSESUAR, DIALOG_STYLE_TABLIST_HEADERS, baslik, stringg, "Seç", "Iptal");
		}
	}
}

else if(dialogid == AKSESUARSATINAL2)
{
	if(response)
	{
		if(oyuncakData[playerid][listitem][ptModelID] != 0) return DialogGoster(playerid, BOS_MESAJ, DIALOG_STYLE_MSGBOX, "{FF0000}Hata Meydana Geldi", "{FFFFFF}Seçmiþ olduðunuz slot dolu,lütfen baþka bir slot seçin veya silin.", "Onayla", "");

		secilenslot[playerid] = listitem;
		ShowModelSelectionMenu(playerid, Aksesuarlar, "Aksesuarlar");
	}
}
else if(dialogid == DIALOG_OZELAKSESUAR)
{
	if(response)
	{
		if(oyuncakData[playerid][listitem][ptModelID] != 0) return DialogGoster(playerid, BOS_MESAJ, DIALOG_STYLE_MSGBOX, "{FF0000}Hata Meydana Geldi", "{FFFFFF}Seçmiþ olduðunuz slot dolu,lütfen baþka bir slot seçin veya silin.", "Onayla", "");

		secilenslot[playerid] = listitem;
		ShowModelSelectionMenu(playerid, ozelaksesuarlar, "Ozel Aksesuarlar");
	}
}
else if(dialogid == PDAKSESUARAL)
{
	if(response)
	{
		if(oyuncakData[playerid][listitem][ptModelID] != 0) return DialogGoster(playerid, BOS_MESAJ, DIALOG_STYLE_MSGBOX, "{FF0000}Hata Meydana Geldi", "{FFFFFF}Seçmiþ olduðunuz slot dolu,lütfen baþka bir slot seçin veya silin.", "Onayla", "");

		secilenslot[playerid] = listitem;
		ShowModelSelectionMenu(playerid, pdaksesuarlar, "PD Aksesuarlar");
	}
}
else if(dialogid == FDAKSESUARAL)
{
	if(response)
	{
		if(oyuncakData[playerid][listitem][ptModelID] != 0) return DialogGoster(playerid, BOS_MESAJ, DIALOG_STYLE_MSGBOX, "{FF0000}Hata Meydana Geldi", "{FFFFFF}Seçmiþ olduðunuz slot dolu,lütfen baþka bir slot seçin veya silin.", "Onayla", "");

		secilenslot[playerid] = listitem;
		ShowModelSelectionMenu(playerid, fdaksesuarlar, "FD Aksesuarlari");
	}
}
else if(dialogid == AKSESUAR_RENK)
{
	if(!response) return cmd(playerid, 0, "aks");
	if(response)
	{
		if(oyuncakData[playerid][listitem][ptModelID] == 0)
		{
			DialogGoster(playerid, BOS_MESAJ, DIALOG_STYLE_MSGBOX, "{FF0000}Hata Meydana Geldi", "{FFFFFF}Seçmiþ olduðunuz slot dolu,lütfen baþka bir slot seçin veya silin.", "Onayla", "");
		}
		else
		{
			secilenslot[playerid] = listitem;
			new testStr[sizeof(aksRenkListesi) * 32];
			for(new i = 0; i < sizeof(aksRenkListesi); i++)
			{
				format(testStr, sizeof(testStr), "%s{%06x}%s\n", testStr, aksRenkListesi[i][aksRenk] >>> 8, aksRenkListesi[i][aksAD]);
			}
			DialogGoster(playerid, AKSESUAR_RENK_II, DIALOG_STYLE_LIST, "{9CBBC5}Aksesuar:{FFFFFF} Renk", testStr, "Deðiþtir", "Kapat");
		}
	}
}
else if(dialogid == AKSESUAR_RENK_II)
{
	if(response)
	{
		if(oyuncakData[playerid][secilenslot[playerid]][ptModelID] == 18656) return hataMesaji(playerid, "Bu aksesuarýn rengi deðiþtirilemez.");
		oyuncakData[playerid][secilenslot[playerid]][ptRenk] = aksRenkListesi[listitem][aksHex];
		RemovePlayerAttachedObject(playerid, secilenslot[playerid]);
		SetPlayerAttachedObject(playerid, secilenslot[playerid], oyuncakData[playerid][secilenslot[playerid]][ptModelID], oyuncakData[playerid][secilenslot[playerid]][ptBone], oyuncakData[playerid][secilenslot[playerid]][ptPosX], oyuncakData[playerid][secilenslot[playerid]][ptPosY], oyuncakData[playerid][secilenslot[playerid]][ptPosZ],
			oyuncakData[playerid][secilenslot[playerid]][ptRotX], oyuncakData[playerid][secilenslot[playerid]][ptRotY], oyuncakData[playerid][secilenslot[playerid]][ptRotZ], oyuncakData[playerid][secilenslot[playerid]][ptScaleX], oyuncakData[playerid][secilenslot[playerid]][ptScaleY], oyuncakData[playerid][secilenslot[playerid]][ptScaleZ],
			oyuncakData[playerid][secilenslot[playerid]][ptRenk]);
		BilgiText(playerid, "~g~~h~Aksesuar rengi degistirildi", 2500);
		AksesuarKaydet(playerid);
	}
}
else if(dialogid == AKSESUAR)
{
	if(response)
	{
		AksesuarMenusu(playerid, listitem);
	}
}

else if(dialogid == AKSESUARDUZENLE)
{
	if(!response) return cmd(playerid, 0, "aks");
	if(response)
	{
		if(oyuncakData[playerid][listitem][ptModelID] == 0) {
			DialogGoster(playerid, BOS_MESAJ, DIALOG_STYLE_MSGBOX, "{FF0000}Hata Meydana Geldi", "{FFFFFF}Seçmiþ olduðunuz slot dolu,lütfen baþka bir slot seçin veya silin.", "Onayla", "");
		}
		else {
			secilenslot[playerid] = listitem;
			ShowEditMenu(playerid);
		}
	}
}
else if(dialogid == AKSESUARDUZENLE2)
{
	if(response) switch(listitem) {
		case 0: DialogGoster(playerid, AKSESUARKEMIK, DIALOG_STYLE_LIST, "{9CBBC5}Aksesuar:{FFFFFF} Bölge Seçin", "Omurga\nKafa\nSol Üstkol\nSað Üstkol\nSol El\nSað El\nSol Uyluk\nSað Uyluk\nSol Ayak\nSað Ayak\nSað Baldýr\nSol Baldýr\nSol Önkol\nSað Önkol\nSol Köprücük\nSað Köprücük\nBoyun\nÇene", "Seç", "Kapat");
		case 1: EditAttachedObject(playerid, secilenslot[playerid]);
	}
	else
	{
		new stringg[856],baslik[256], durum[128];
		strcat(stringg, "Eþya\tBölge\tDurum\n");
		for(new x;x<MAX_AKSESUAR;x++)
		{
			new name[64];
			format(name, sizeof(name), "-");

			for(new i;i<sizeof(HoldingObjectsAll);i++)
			{
				if(HoldingObjectsAll[i][holdingmodelid] == oyuncakData[playerid][x][ptModelID])
				{
					format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
				}
			}
			if(oyuncakData[playerid][x][ptRealID] != 0)
			{
				if(oyuncakData[playerid][x][ptKullanim] == 1) format(durum, sizeof(durum), "Kullanýmda");
				if(oyuncakData[playerid][x][ptKullanim] == 0) format(durum, sizeof(durum), "Takýlý Deðil");
			}
			else format(durum, sizeof(durum), "Boþ");
			format(stringg, sizeof(stringg), "%s%s\t%s\t%s\n", stringg, name, KemikKisimlari[oyuncakData[playerid][x][ptBone]], durum);
		}
		format(baslik, sizeof(baslik), "{9CBBC5}Aksesuar:{FFFFFF} Düzenle");
		DialogGoster(playerid, AKSESUARDUZENLE, DIALOG_STYLE_TABLIST_HEADERS, baslik, stringg, "Düzenle", "Kapat");
	}
	AksesuarKaydet(playerid);
}

else if(dialogid == AKSESUARKEMIK)
{
	if(response)
	{
		oyuncakData[playerid][secilenslot[playerid]][ptBone] = listitem+1;
		if(oyuncakData[playerid][secilenslot[playerid]][ptBone] > 18 || oyuncakData[playerid][secilenslot[playerid]][ptBone] < 1) {
			oyuncakData[playerid][secilenslot[playerid]][ptBone] = 1;
		}
	}
	ShowEditMenu(playerid);
	AksesuarKaydet(playerid);
}
else if(dialogid == AKSESUARKONTROL)
{
	if(!response) return cmd(playerid, 0, "aks");
	if(response)
	{
		if(oyuncakData[playerid][listitem][ptModelID] == 0)
		{
			DialogGoster(playerid, BOS_MESAJ, DIALOG_STYLE_MSGBOX, "{FF0000}Hata Meydana Geldi", "{FFFFFF}Seçmiþ olduðunuz slot boþ,lütfen baþka bir slot seçin veya silin.", "Onayla", "");
		}
		else
		{
			if(IsPlayerAttachedObjectSlotUsed(playerid, listitem))
			{
				new name[24];
				format(name, sizeof(name), "-");

				for(new i;i<sizeof(HoldingObjectsAll);i++)
				{
					if(HoldingObjectsAll[i][holdingmodelid] == oyuncakData[playerid][listitem][ptModelID])
					{
						format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
					}
				}
				oyuncakData[playerid][listitem][ptKullanim] = 0;
				AksesuarKaydet(playerid);
				BilgiText(playerid, "~r~~h~Secili aksesuar cikarildi", 2500);
				RemovePlayerAttachedObject(playerid, listitem);
			}
			else
			{
				if(oyuncakData[playerid][listitem][ptScaleX] == 0) {
					oyuncakData[playerid][listitem][ptScaleX] = 1.0;
					oyuncakData[playerid][listitem][ptScaleY] = 1.0;
					oyuncakData[playerid][listitem][ptScaleZ] = 1.0;
				}
				SetPlayerAttachedObject(playerid, listitem, oyuncakData[playerid][listitem][ptModelID], oyuncakData[playerid][listitem][ptBone], oyuncakData[playerid][listitem][ptPosX], oyuncakData[playerid][listitem][ptPosY], oyuncakData[playerid][listitem][ptPosZ],
					oyuncakData[playerid][listitem][ptRotX], oyuncakData[playerid][listitem][ptRotY], oyuncakData[playerid][listitem][ptRotZ], oyuncakData[playerid][listitem][ptScaleX], oyuncakData[playerid][listitem][ptScaleY], oyuncakData[playerid][listitem][ptScaleZ],
					oyuncakData[playerid][listitem][ptRenk]);
				new name[24];
				format(name, sizeof(name), "-");

				for(new i;i<sizeof(HoldingObjectsAll);i++)
				{
					if(HoldingObjectsAll[i][holdingmodelid] == oyuncakData[playerid][listitem][ptModelID])
					{
						format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
					}
				}
				oyuncakData[playerid][listitem][ptKullanim] = 1;
				AksesuarKaydet(playerid);
				BilgiText(playerid, "~b~~h~Secili aksesuar takildi", 2500);
			}
		}
		AksesuarMenusu(playerid, 0);
	}
}

else if(dialogid == AKSESUARSIL)
{
	if(!response) return cmd(playerid, 0, "aks");
	if(response)
	{
		if(oyuncakData[playerid][listitem][ptModelID] == 0) {
			DialogGoster(playerid, BOS_MESAJ, DIALOG_STYLE_MSGBOX, "{FF0000}Hata Meydana Geldi", "{FFFFFF}Seçmiþ olduðunuz slot dolu,lütfen baþka bir slot seçin veya silin.", "Onayla", "");
			return 1;
		}
		new szQuery[128];
		if(IsPlayerAttachedObjectSlotUsed(playerid, listitem)) { RemovePlayerAttachedObject(playerid, listitem); }
		mysql_format(g_SQL, szQuery, sizeof(szQuery),"DELETE FROM `aksesuarlar` WHERE Sahip = %d AND ID = %d", oyuncuData[playerid][oID], oyuncakData[playerid][listitem][ptRealID]);
		mysql_query(g_SQL, szQuery);

		oyuncakData[playerid][listitem][ptModelID] = 0;
		oyuncakData[playerid][listitem][ptBone] = 0;
		oyuncakData[playerid][listitem][ptRealID] = 0;
		oyuncakData[playerid][listitem][ptPosX] = 0.0;
		oyuncakData[playerid][listitem][ptPosY] = 0.0;
		oyuncakData[playerid][listitem][ptPosZ] = 0.0;
		oyuncakData[playerid][listitem][ptPosX] = 0.0;
		oyuncakData[playerid][listitem][ptPosY] = 0.0;
		oyuncakData[playerid][listitem][ptPosZ] = 0.0;
		BilgiText(playerid, "~r~~h~Secili aksesuar silindi", 2500);
	}
}

else if(dialogid == DIALOG_GIYIM_ONAY) {
	if(response)
	{
		if(oyuncuData[playerid][oPara] < GetPVarInt(playerid, "KiyafetUcret")) return hataMesaji(playerid, "Bu kýyafeti alabilmek için yeterli miktarda paranýz bulunmuyor.");
		new id = Oyuncu_Isyerinde(playerid);
		ParaEkle(playerid, -GetPVarInt(playerid, "KiyafetUcret"));
		oyuncuData[playerid][oKiyafet] = GetPVarInt(playerid, "SectigiKiyafet");
		IsyeriBilgi[id][isyeriKasa] += GetPVarInt(playerid, "KiyafetUcret");
		IsyeriBilgi[id][isyeriUrun]--;
		Isyeri_Kaydet(id);
		switch(oyuncuData[playerid][oGeciciKiyafet]) {
			case 0: SetPlayerSkin(playerid, oyuncuData[playerid][oKiyafet]);
			default: SetPlayerSkin(playerid, oyuncuData[playerid][oGeciciKiyafet]);
		}
		SunucuMesaji(playerid, "Yeni kýyafetini %s fiyatýna satýn aldýn.", NumaraFormati(GetPVarInt(playerid, "KiyafetUcret")));
		DeletePVar(playerid, "SectigiKiyafet");
		DeletePVar(playerid, "KiyafetUcret");
	}
}
else if(dialogid == DIALOG_ARAC_ONAY) {
	if(response)
	{
		if(SunshineSatisDurumu == false) return hataMesaji(playerid, "Bu araç galerinin elinde þu anda bulunmuyor."), TogglePlayerControllable(playerid, true);
		ShowPlayerDialog(playerid, DIALOG_GALERI_RENK1, DIALOG_STYLE_INPUT, "Araç Rengi", "Lütfen aracýnýzýn birinci renk kodunu girin:", "Ileri", "Iptal");
	}
	else
	{
		TogglePlayerControllable(playerid, true);
		SetPlayerVirtualWorld(playerid, 0);
	}
}
else if(dialogid == DIALOG_RESTAURANT) {
	if(!response) return false;
	new id = Oyuncu_Isyerinde(playerid);
	if(listitem == 0) {
		if(oyuncuData[playerid][oPara] < 35) return hataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsun.");
		if(OyuncuCan(playerid) <= 60) CanDuzenle(playerid, OyuncuCan(playerid)+40);
		else if(OyuncuCan(playerid) > 60) CanDuzenle(playerid, 100);
		ParaEkle(playerid, -35);
		SunucuMesaji(playerid, "Pizza satýn aldýn.");
		IsyeriBilgi[id][isyeriKasa] += 35;
		IsyeriBilgi[id][isyeriUrun]--;
		Isyeri_Kaydet(id);
	}
	else if(listitem == 1) {
		if(oyuncuData[playerid][oPara] < 20) return hataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsun.");
		if(OyuncuCan(playerid) <= 70) CanDuzenle(playerid, OyuncuCan(playerid)+30);
		else if(OyuncuCan(playerid) > 70) CanDuzenle(playerid, 100);
		ParaEkle(playerid, -20);
		SunucuMesaji(playerid, "Burger satýn aldýn.");
		IsyeriBilgi[id][isyeriKasa] += 20;
		IsyeriBilgi[id][isyeriUrun]--;
		Isyeri_Kaydet(id);
	}
	else if(listitem == 2) {
		if(oyuncuData[playerid][oPara] < 20) return hataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsun.");
		if(OyuncuCan(playerid) <= 70) CanDuzenle(playerid, OyuncuCan(playerid)+30);
		else if(OyuncuCan(playerid) > 70) CanDuzenle(playerid, 100);
		ParaEkle(playerid, -20);
		SunucuMesaji(playerid, "Tavuk satýn aldýn.");
		IsyeriBilgi[id][isyeriKasa] += 20;
		IsyeriBilgi[id][isyeriUrun]--;
		Isyeri_Kaydet(id);
	}
	else if(listitem == 3) {
		if(oyuncuData[playerid][oPara] < 1) return hataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsun.");
		if(oyuncuData[playerid][oSu] > 4) return hataMesaji(playerid, "En fazla 5 adet su alabilirsin.");

		ParaEkle(playerid, -1);
		oyuncuData[playerid][oSu]++;
		SunucuMesaji(playerid, "Su satýn aldýn. '/ic' komutuyla içebilirsin.");
		IsyeriBilgi[id][isyeriKasa] += 1;
		IsyeriBilgi[id][isyeriUrun]--;
		Isyeri_Kaydet(id);
	}
	else if(listitem == 4) {
		if(oyuncuData[playerid][oPara] < 1) return hataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsun.");
		if(oyuncuData[playerid][oGazoz] > 4) return hataMesaji(playerid, "En fazla 5 adet gazoz alabilirsin.");

		ParaEkle(playerid, -1);
		oyuncuData[playerid][oGazoz]++;
		SunucuMesaji(playerid, "Gazoz satýn aldýn. '/ic' komutuyla içebilirsin.");
		IsyeriBilgi[id][isyeriKasa] += 1;
		IsyeriBilgi[id][isyeriUrun]--;
		Isyeri_Kaydet(id);
	}
	else if(listitem == 5) {
		new ickifiyat = 15;
		if(oyuncuData[playerid][oPara] < ickifiyat) return hataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsun.");
		if(oyuncuData[playerid][oBira] > 1) return hataMesaji(playerid, "En fazla 1 adet bira alabilirsin.");

		ParaEkle(playerid, -ickifiyat);
		oyuncuData[playerid][oBira]++;
		SunucuMesaji(playerid, "Bira satýn aldýn. '/ic' komutuyla içebilirsin.");
		IsyeriBilgi[id][isyeriKasa] += ickifiyat;
		IsyeriBilgi[id][isyeriUrun]--;
		Isyeri_Kaydet(id);
	}
	else if(listitem == 6) {
		new ickifiyat = 55;
		if(oyuncuData[playerid][oPara] < ickifiyat) return hataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsun.");
		if(oyuncuData[playerid][oVodka] > 1) return hataMesaji(playerid, "En fazla 1 adet vodka alabilirsin.");

		ParaEkle(playerid, -ickifiyat);
		oyuncuData[playerid][oVodka]++;
		SunucuMesaji(playerid, "Vodka satýn aldýn. '/ic' komutuyla içebilirsin.");
		IsyeriBilgi[id][isyeriKasa] += ickifiyat;
		IsyeriBilgi[id][isyeriUrun]--;
		Isyeri_Kaydet(id);
	}
	else if(listitem == 7) {
		new ickifiyat = 73;
		if(oyuncuData[playerid][oPara] < ickifiyat) return hataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsun.");
		if(oyuncuData[playerid][oViski] > 1) return hataMesaji(playerid, "En fazla 1 adet viski alabilirsin.");

		ParaEkle(playerid, -ickifiyat);
		oyuncuData[playerid][oViski]++;
		SunucuMesaji(playerid, "Viski satýn aldýn. '/ic' komutuyla içebilirsin.");
		IsyeriBilgi[id][isyeriKasa] += ickifiyat;
		IsyeriBilgi[id][isyeriUrun]--;
		Isyeri_Kaydet(id);
	}
}
else if(dialogid == DIALOG_MARKET) {
	if(response) {
		new id = Oyuncu_Isyerinde(playerid);
		switch(listitem) {
			case 0: {
				if(oyuncuData[playerid][oPara] < 15)
					return hataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsunuz.");

				if(oyuncuData[playerid][oOdun] > MAKSIMUM_ODUN -1)
					return hataMesaji(playerid, "Üzerinde daha fazla odun bulunamaz.");

					//cmd(playerid, 1, "kasiyere $15 uzatýr ve poþeti alýr.");
				oyuncuData[playerid][oOdun]++;
				ParaEkle(playerid, -15);
				IsyeriBilgi[id][isyeriKasa] += 15;
				IsyeriBilgi[id][isyeriUrun]--;
				Isyeri_Kaydet(id);
			}
			case 1: {
				if(oyuncuData[playerid][oPara] < 8)
					return hataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsunuz.");

				if(GetBosSlot(playerid) < MAX_ITEM && oyuncuData[playerid][pEnvanterAgirlik] < MAX_AGIRLIK) {

					//cmd(playerid, 1, "kasiyere $8 uzatýr ve çakmaðý alýr.");
					ItemEkle(playerid, 3, 1);
					ParaEkle(playerid, -8);
					oyuncuData[playerid][oCakmak] = true;
					IsyeriBilgi[id][isyeriKasa] += 8;
					IsyeriBilgi[id][isyeriUrun]--;
					Isyeri_Kaydet(id);
				}
				else hataMesaji(playerid, "Envanterinizde boþ slot bulunmuyor veya aðýrlýk limiti aþýldý.");
			}
			case 2: {
				if(oyuncuData[playerid][oPara] < 20)
					return hataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsunuz.");

				if(GetBosSlot(playerid) < MAX_ITEM && oyuncuData[playerid][pEnvanterAgirlik] < MAX_AGIRLIK) {

					//cmd(playerid, 1, "kasiyere $20 uzatýr ve bir paket sigara alýr.");
					ItemEkle(playerid, 1, 20);
					ParaEkle(playerid, -20);
					IsyeriBilgi[id][isyeriKasa] += 20;
					IsyeriBilgi[id][isyeriUrun]--;
					Isyeri_Kaydet(id);
				}
				else hataMesaji(playerid, "Envanterinizde boþ slot bulunmuyor veya aðýrlýk limiti aþýldý.");
			}
			case 3: {
				if(oyuncuData[playerid][oSeviye] < 3)
					return hataMesaji(playerid, "Bu seviyedeyken sopa satýn alamazsýn.(Silah kullanamazsýn)");

				if(oyuncuData[playerid][oPara] < 60)
					return hataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsunuz.");

				VeritabaniSilahVer(playerid, WEAPON_BAT, 1);
				ParaEkle(playerid, -60);
				IsyeriBilgi[id][isyeriKasa] += 60;
				IsyeriBilgi[id][isyeriUrun]--;
				Isyeri_Kaydet(id);
			}
			case 4: {
				if(oyuncuData[playerid][oPara] < 250)
					return hataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsunuz.");

				if(oyuncuData[playerid][oTelefon] > 0)
					return hataMesaji(playerid, "Zaten telefonunuz var.");

					//cmd(playerid, 1, "kasiyere $500 uzatýr ve telefon kutusunu alýr.");
				oyuncuData[playerid][oTelefon] = 1;
				ParaEkle(playerid, -250);
				IsyeriBilgi[id][isyeriKasa] += 250;
				IsyeriBilgi[id][isyeriUrun]--;
				Isyeri_Kaydet(id);
			}
			case 5: {
				if(oyuncuData[playerid][oPara] < 25) return hataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsunuz.");
				if(oyuncuData[playerid][oTelefonNumarasi] > 0) return hataMesaji(playerid, "Zaten bir telefon numaranýz var.");
					//cmd(playerid, 1, "kasiyere $25 uzatýr ve sim kartýný alýr.");
				new telno = randomEx(1000000, 9999999), query[256];
				mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM oyuncular WHERE TelefonNumarasi = '%d'", telno);
				mysql_tquery(g_SQL, query, "telefonnoarat", "dd", playerid, telno);
				ParaEkle(playerid, -25);
				IsyeriBilgi[id][isyeriKasa] += 25;
				IsyeriBilgi[id][isyeriUrun]--;
				Isyeri_Kaydet(id);
			}
			case 6: {
				if(oyuncuData[playerid][oPara] < 500)
					return hataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsunuz.");

				if(oyuncuData[playerid][oMuzikKutusu] > 0)
					return hataMesaji(playerid, "Zaten boomboxun bulunuyor.");

					//cmd(playerid, 1, "kasiyere $500 uzatýr ve müzik kutusunu alýr.");
				oyuncuData[playerid][oMuzikKutusu] = 1;
				ParaEkle(playerid, -500);
				IsyeriBilgi[id][isyeriKasa] += 500;
				IsyeriBilgi[id][isyeriUrun]--;
				Isyeri_Kaydet(id);
			}
			case 7: {
				if(oyuncuData[playerid][oPara] < 30)
					return hataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsunuz.");

				if(oyuncuData[playerid][oKulaklik] > 0)
					return hataMesaji(playerid, "Zaten bir kulaklýðýnýz var.");

					//cmd(playerid, 1, "kasiyere $30 uzatýr ve kulaklýðý alýr.");
				oyuncuData[playerid][oKulaklik] = 1;
				ParaEkle(playerid, -30);
				IsyeriBilgi[id][isyeriKasa] += 30;
				IsyeriBilgi[id][isyeriUrun]--;
				Isyeri_Kaydet(id);
			}
			case 8: {
				if(oyuncuData[playerid][oPara] < 200)
					return hataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsunuz.");

				if(ItemVarMi(playerid, 104) > 0)
					return hataMesaji(playerid, "Zaten bir kameranýz var.");

					//cmd(playerid, 1, "kasiyere $30 uzatýr ve kulaklýðý alýr.");
				ItemEkle(playerid, 104, 1);
				ParaEkle(playerid, -200);
				IsyeriBilgi[id][isyeriKasa] += 200;
				IsyeriBilgi[id][isyeriUrun]--;
				Isyeri_Kaydet(id);
			}
			case 9: {
				if(oyuncuData[playerid][oPara] < 300)
					return hataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsunuz.");

				if(ItemVarMi(playerid, 105) > 0)
					return hataMesaji(playerid, "Zaten bir benzin bidonunuz var. Yalnýzca bir tane taþýyabilirsiniz.");

					//cmd(playerid, 1, "kasiyere $30 uzatýr ve kulaklýðý alýr.");
				ItemEkle(playerid, 105, 1);
				ParaEkle(playerid, -300);
				IsyeriBilgi[id][isyeriKasa] += 300;
				IsyeriBilgi[id][isyeriUrun]--;
				Isyeri_Kaydet(id);
			}
			case 10: {
				if(oyuncuData[playerid][oPara] < 80)
					return hataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsunuz.");

				if(ItemVarMi(playerid, 109) > 0) return hataMesaji(playerid, "Zaten bir deodorantýnýz var. Yalnýzca bir tane taþýyabilirsiniz.");

					//cmd(playerid, 1, "kasiyere $30 uzatýr ve kulaklýðý alýr.");
				ItemEkle(playerid, 109, 10);
				ParaEkle(playerid, -80);
				IsyeriBilgi[id][isyeriKasa] += 80;
				IsyeriBilgi[id][isyeriUrun]--;
				Isyeri_Kaydet(id);
			}
			case 11: {
				if(oyuncuData[playerid][oPara] < 350) return hataMesaji(playerid, "Bu ürünün ücretini karþýlayamýyorsunuz.");
				if(ItemVarMi(playerid, 118) > 1) return hataMesaji(playerid, "Maksimum iki tamir kiti taþýyabilirsiniz.");
				ItemEkle(playerid, 118, 1);
				ParaEkle(playerid, -350);
				IsyeriBilgi[id][isyeriKasa] += 350;
				IsyeriBilgi[id][isyeriUrun]--;
				Isyeri_Kaydet(id);
			}
		}
	}
}
else if(dialogid == ISYERI_ISIM)
{
	if(!response) return false;
	new id = Isyeri_Yakin(playerid);
	if(id == -1) id = Oyuncu_Isyerinde(playerid);
	SunucuMesaji(playerid, "%s adlý iþyerinin yeni ismi %s olarak deðiþtirildi.", IsyeriBilgi[id][isyeriAd], inputtext);
	format(IsyeriBilgi[id][isyeriAd], 128, inputtext);
	Isyeri_Kaydet(id); Isyeri_Yenile(id);
}
else if(dialogid == DIALOG_ISYERI) {
	if(!response) return false;

	new id = Isyeri_Yakin(playerid);
	if(id == -1) id = Oyuncu_Isyerinde(playerid);
	if(!strcmp(inputtext, "Iþ yeri Ismi Deðiþtir", true)) {
		DialogGoster(playerid, ISYERI_ISIM, DIALOG_STYLE_INPUT, "> Ýþ Yeri Adý", "Ýþ yerinizin yeni ismini belirleyin;", "Deðiþtir", "Iptal");
	}
	else if(!strcmp(inputtext, "Kilit Durumunu Deðiþtir", true)) {
		switch(IsyeriBilgi[id][isyeriDurum]) {
			case 1: {
				IsyeriBilgi[id][isyeriDurum] = 2;
				Isyeri_Yenile(id);
				cmd(playerid, 1, "iþyeri kapýsýný kilitler.");
			}
			case 2: {
				IsyeriBilgi[id][isyeriDurum] = 1;
				Isyeri_Yenile(id);
				cmd(playerid, 1, "iþyeri kapýsýnýn kilidini açar.");
			}
			default: hataMesaji(playerid, "Bu iþyerinin kilit durumunu deðiþtiremezsin.");
		}
	}
	else if(!strcmp(inputtext, "Giriþ Ücretini Deðiþtir", true)) {
		DialogGoster(playerid, DIALOG_GIRISUCRET, DIALOG_STYLE_INPUT, "> Giriþ Ücreti - Düzenle", "{B70000}UYARI: {FFFFFF}Girilen ücret 0 ilâ 750 dolar arasýnda olmalýdýr.\nLütfen olmasýný istediðin giriþ ücretin aþaðýdaki boþluða girin;", "Tamam", "Kapat");
		return true;
	}
	else if(!strcmp(inputtext, "Ortak Deðiþtir", true)) {
		if(Isyeri_SahipKontrol(playerid, id)) DialogGoster(playerid, DIALOG_ORTAKEKLE, DIALOG_STYLE_INPUT, "> Ýþyeri - Ortak", "Ortaðýn olmasýný istediðin kiþiyi girin;", "Tamam", "Iptal");
		else return hataMesaji(playerid, "Bu seçeneði sadece iþyeri sahibi kullanabilir.");
	}
	else if(!strcmp(inputtext, "Giriþ Konumunu Deðiþtir", true)){
		if(Isyeri_SahipKontrol(playerid, id)){ 
			GetPlayerPos(playerid, IsyeriBilgi[id][isyeriIcPos][0], IsyeriBilgi[id][isyeriIcPos][1], IsyeriBilgi[id][isyeriIcPos][2]);
			GetPlayerFacingAngle(playerid, IsyeriBilgi[id][isyeriIcPos][3]);
			IsyeriBilgi[id][isyeriInterior] = GetPlayerInterior(playerid);
			SetPlayerVirtualWorld(playerid, IsyeriBilgi[id][isyeriVW]);
			Isyeri_Kaydet(id);
		}
	}
	else if(!strcmp(inputtext, "Sisteme Sat", true)) {
		if(oyuncuData[playerid][oSatisYapiyor] == true) return hataMesaji(playerid, "Þu anda bir satýþ iþlemi gerçekleþtiriyorsunuz.");
		if(Isyeri_SahipKontrol(playerid, id)) {
			if(IsyeriBilgi[id][isyeriVergi] > 0) return hataMesaji(playerid, "Satmadan önce iþyerinin vergisini ödemelisiniz.");
			new asdstring[256];
			if(oyuncuData[playerid][oEkonomiPaketi] < 1)
			{
				format(asdstring, sizeof asdstring, "Ýþyerini %s karþýlýðýnda sisteme satmak istediðinden emin misin?", NumaraFormati(YuzdeHesapla(IsyeriBilgi[id][isyeriFiyat], SERVER_YUZDE)));
			}
			else
			{
				format(asdstring, sizeof asdstring, "Ýþyerini %s karþýlýðýnda sisteme satmak istediðinden emin misin?", NumaraFormati(YuzdeHesapla(IsyeriBilgi[id][isyeriFiyat], VIP_YUZDE)));
			}
			ShowPlayerDialog(playerid, DIALOG_ISYERI_SISTEM_ONAY, DIALOG_STYLE_MSGBOX, "> Ýþyerini Sisteme Sat", asdstring, "Onayla", "Ýptal");
		}
		else return hataMesaji(playerid, "Bu seçeneði sadece iþyeri sahibi kullanabilir.");
	}
	else if(!strcmp(inputtext, "Kasa Ýþlemleri", true)) {
		if(Isyeri_SahipKontrol(playerid, id)) {
			static bilgi[144];
			format(bilgi, sizeof(bilgi), "{FFFFFF}Para Çek\t(-%s)\nPara Yatýr\t(+%s)", NumaraFormati(IsyeriBilgi[id][isyeriKasa]), NumaraFormati(IsyeriBilgi[id][isyeriKasa]));
			return DialogGoster(playerid, DIALOG_ISYERIKASA, DIALOG_STYLE_TABLIST, "> Ýþyeri - Kasa", bilgi, "Seç", "Geri");
		}
		else return hataMesaji(playerid, "Bu seçeneði sadece iþyeri sahibi kullanabilir.");
	}
	else if(!strcmp(inputtext, "Ürün Al($500)", true))
	{
		if(oyuncuData[playerid][oGiris] == false) return hataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
		if(KomutUygunlukKontrol(playerid) == 0) return UygunDegilMesaj(playerid);
		if(IsyeriBilgi[id][isyeriSahip] != oyuncuData[playerid][oID]) return hataMesaji(playerid, "Bu iþyerinin sahibi deðilsin.");
		if(IsyeriBilgi[id][isyeriTur] == 4 || IsyeriBilgi[id][isyeriTur] == 6 || IsyeriBilgi[id][isyeriTur] == 8) return hataMesaji(playerid, "Bu iþyeri türü ürün satýn alýmýný desteklemiyor.");
		if(oyuncuData[playerid][oPara] < 500) return hataMesaji(playerid, "Bu iþyerine ürün almak için yeterli miktarda paran yok.($500)");
		IsyeriBilgi[id][isyeriUrun] += 150;
		ParaEkle(playerid, -500);
		SunucuMesaji(playerid, "$500 ücret ödeyerek iþyerinize 150 ürün aldýnýz.");
	}
	else if(!strcmp(inputtext, "Ortak Çýkar", true)) {
		if(oyuncuData[playerid][oGiris] == false) return hataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
		if(KomutUygunlukKontrol(playerid) == 0) return UygunDegilMesaj(playerid);
		if(IsyeriBilgi[id][isyeriSahip] != oyuncuData[playerid][oID]) return hataMesaji(playerid, "Bu iþyerinin sahibi deðilsin.");
		if(IsyeriBilgi[id][isyeriOrtak] == 0) return hataMesaji(playerid, "Ortaðýn yok, bu seçeneði kullanamazsýn.");

		DialogGoster(playerid, DIALOG_ORTAK_CIKAR, DIALOG_STYLE_MSGBOX, "> Ýþyeri - Ortak", "Ýþyeri ortaðýný çýkartmak istiyor musun?", "{B70000}Evet", "Hayýr");
	}
	else if(!strcmp(inputtext, "Müzik Deðiþtir", true)) {
		if(oyuncuData[playerid][oGiris] == false) return hataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
		if(KomutUygunlukKontrol(playerid) == 0) return UygunDegilMesaj(playerid);
		if(IsyeriBilgi[id][isyeriSahip] != oyuncuData[playerid][oID] && IsyeriBilgi[id][isyeriOrtak] != oyuncuData[playerid][oID]) return hataMesaji(playerid, "Bu iþyerinin sahibi veya ortaðý deðilsin.");

		DialogGoster(playerid, DIALOG_MUZIK_DEGISTIR, DIALOG_STYLE_INPUT, "> Ýþyeri - Müzik", "Ýþyerinde çalmasýný istediðin müziðin linkini girin;\nKaldýrmak için \"Kaldýr\" yazýn.", "Tamam", "Ýptal");
	}
	else if(!strcmp(inputtext, "Benzin Ücreti Deðiþtir", true)) {
		if(oyuncuData[playerid][oGiris] == false) return hataMesaji(playerid, "Þu anda bu seçeneði kullanamazsýn.");
		if(oyuncuData[playerid][oDonduruldu] > 0) return hataMesaji(playerid, "Þu anda bu seçeneði kullanamazsýn.");
		if(oyuncuData[playerid][oHapisSure][0] > 0 || oyuncuData[playerid][oHapisSure][1] > 0) return hataMesaji(playerid, "Hapiste bu seçeneði kullanamazsýn.");
		if(oyuncuData[playerid][oGozalti] > 0) return hataMesaji(playerid, "Gözaltýndayken bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu seçeneði kullanamazsýn.");
		//if(oyuncuData[playerid][oAdminDurum]) return hataMesaji(playerid, "Yönetici iþbaþýndayken bu seçeneði kullanamazsýn.");
		if(IsyeriBilgi[id][isyeriSahip] != oyuncuData[playerid][oID]  && IsyeriBilgi[id][isyeriOrtak] != oyuncuData[playerid][oID]) return hataMesaji(playerid, "Bu iþyerinin sahibi deðilsin.");
		new sayi = 0;
		for(new i = 0; i < MAKSIMUM_BENZIN_POMPASI; i++) if(BenzinPompasi[id][pompaKullanimda] && BenzinPompasi[i][pompaIsyeri] == IsyeriBilgi[id][isyeriID]) sayi++;
			if(sayi == 0) return hataMesaji(playerid, "Ýþyerine baðlý pompa bulunamadýðý için bu seçeneði kullanamazsýn.");
		else DialogGoster(playerid, DIALOG_BENZIN_UCRET, DIALOG_STYLE_INPUT, "> Ýþyeri - Benzin Ücret", "Bu iþlemi tamamlarsan iþyerine baðlý tüm benzin pompalarýnýn ücreti deðiþecektir.\nFiyat en az $1 en fazla $10 olabilir.\nGirdiðin fiyat litre baþý fiyattýr.", "Tamam", "Ýptal");
	}
	else if(!strcmp(inputtext, "Ortaklýktan Ayrýl", true)) {
		if(oyuncuData[playerid][oGiris] == false) return hataMesaji(playerid, "Þu anda bu seçeneði kullanamazsýn.");
		if(oyuncuData[playerid][oDonduruldu] > 0) return hataMesaji(playerid, "Þu anda bu seçeneði kullanamazsýn.");
		if(oyuncuData[playerid][oHapisSure][0] > 0 || oyuncuData[playerid][oHapisSure][1] > 0) return hataMesaji(playerid, "Hapiste bu seçeneði kullanamazsýn.");
		if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu seçeneði kullanamazsýn.");
		//if(oyuncuData[playerid][oAdminDurum]) return hataMesaji(playerid, "Yönetici iþbaþýndayken bu seçeneði kullanamazsýn.");
		if(IsyeriBilgi[id][isyeriOrtak] != oyuncuData[playerid][oID]) return hataMesaji(playerid, "Bu iþyerinin ortaðý deðilsin.");

		DialogGoster(playerid, DIALOG_ORTAK_AYRIL, DIALOG_STYLE_MSGBOX, "> Ýþyeri - Ortak", "Ýþyeri ortaklýðýndan ayrýlmak istiyor musun?", "{B70000}Evet", "Hayýr");
	}
}
else if(dialogid == DIALOG_ISYERI_SISTEM_ONAY)
{
	if(!response) return 0;
	new id = Isyeri_Yakin(playerid);
	if(id == -1) id = Oyuncu_Isyerinde(playerid);
	if(Isyeri_SahipKontrol(playerid, id))
	{
		if(oyuncuData[playerid][oSatisYapiyor] == true) return hataMesaji(playerid, "Þu anda bir satýþ iþlemi gerçekleþtiriyorsunuz.");
		if(oyuncuData[playerid][oEkonomiPaketi] < 1)
		{
		ParaEkle(playerid, YuzdeHesapla(IsyeriBilgi[id][isyeriFiyat], SERVER_YUZDE));
		SunucuMesaji(playerid, "Ýþyerini baþarýyla sisteme sattýn. (%s)", NumaraFormati(YuzdeHesapla(IsyeriBilgi[id][isyeriFiyat], SERVER_YUZDE)));
		}
		else
		{
		ParaEkle(playerid, YuzdeHesapla(IsyeriBilgi[id][isyeriFiyat], VIP_YUZDE));
		SunucuMesaji(playerid, "Ýþyerini baþarýyla sisteme sattýn. (%s)", NumaraFormati(YuzdeHesapla(IsyeriBilgi[id][isyeriFiyat], VIP_YUZDE)));
		}
		new DB_Query[300];
		mysql_format(g_SQL, DB_Query, sizeof(DB_Query), "SELECT * FROM `furniture_data` WHERE `furniture_bizid` = '%d'", IsyeriBilgi[id][isyeriID]);
		mysql_tquery(g_SQL, DB_Query, "MobilyaTemizleIsyeri", "d", id);
		IsyeriBilgi[id][isyeriVergi] = 0;
		IsyeriBilgi[id][isyeriSahip] = 0;
		IsyeriBilgi[id][isyeriOrtak] = 0;
		IsyeriBilgi[id][isyeriDurum] = 1;
		IsyeriBilgi[id][isyeriSahipIsim][0] = 0;
		IsyeriBilgi[id][isyeriOrtakIsim][0] = 0;
		Isyeri_Yenile(id);
		Isyeri_Kaydet(id);
		if(oyuncuData[playerid][oEkonomiPaketi] < 1)
		{
		Log_Kaydet("loglar/isyeri_log.txt", "[%s] %s, %d ID'li(%s) isyerini sisteme satti. Aldigi Para: %s", Tarih(), OyuncuIsim(playerid), id, IsyeriBilgi[id][isyeriAd], NumaraFormati(YuzdeHesapla(IsyeriBilgi[id][isyeriFiyat], SERVER_YUZDE)));
		}
		else
		{
		Log_Kaydet("loglar/isyeri_log.txt", "[%s] %s, %d ID'li(%s) isyerini sisteme satti. Aldigi Para: %s", Tarih(), OyuncuIsim(playerid), id, IsyeriBilgi[id][isyeriAd], NumaraFormati(YuzdeHesapla(IsyeriBilgi[id][isyeriFiyat], VIP_YUZDE)));
		}
		if(Oyuncu_Isyerinde(playerid) != -1)
		{
			SetPlayerPos(playerid, IsyeriBilgi[id][isyeriPos][0], IsyeriBilgi[id][isyeriPos][1], IsyeriBilgi[id][isyeriPos][2]);
			SetPlayerFacingAngle(playerid, IsyeriBilgi[id][isyeriPos][3] - 180.0);
			TogglePlayerControllable(playerid, false);
			SetTimerEx("oyuncucoz", 2000, false, "i", playerid);
			SetPlayerInterior(playerid, IsyeriBilgi[id][isyeriDisInt]);
			SetPlayerVirtualWorld(playerid, IsyeriBilgi[id][isyeriDisVW]);
			SetCameraBehindPlayer(playerid);
		}
	}
}
else if(dialogid == DIALOG_BENZIN_UCRET) {
	if(!response) return false;

	new id = Isyeri_Yakin(playerid), ucret, sayi = 0;
	if(id == -1) id = Oyuncu_Isyerinde(playerid);
	if(sscanf(inputtext, "d", ucret))
		return DialogGoster(playerid, DIALOG_BENZIN_UCRET, DIALOG_STYLE_INPUT, "> Ýþyeri - Benzin Ücret", "Bu iþlemi tamamlarsan iþyerine baðlý tüm benzin pompalarýnýn ücreti deðiþecektir.\nFiyat en az $1 en fazla $10 olabilir.\nGirdiðin fiyat litre baþý fiyattýr.", "Tamam", "Ýptal");

	if(ucret < 1 || ucret > 10)
		return DialogGoster(playerid, DIALOG_BENZIN_UCRET, DIALOG_STYLE_INPUT, "> Ýþyeri - Benzin Ücret", "{B70000}HATA: {FFFFFF}Geçersiz ücret!\n\nBu iþlemi tamamlarsan iþyerine baðlý tüm benzin pompalarýnýn ücreti deðiþecektir.\nFiyat en az $1 en fazla $10 olabilir.\nGirdiðin fiyat litre baþý fiyattýr.", "Tamam", "Ýptal");

	for(new i = 0; i < MAKSIMUM_BENZIN_POMPASI; i++) if(BenzinPompasi[id][pompaKullanimda] && BenzinPompasi[i][pompaIsyeri] == IsyeriBilgi[id][isyeriID]) {
		BenzinPompasi[i][pompaUcret] = ucret;
		Pompa_Yenile(i);
		Pompa_Kaydet(i);
		sayi++;
	}
	if(sayi == 0) return hataMesaji(playerid, "Ýþyerine baðlý pompa bulunamadýðý için iþlem iptal edildi.");
	SunucuMesaji(playerid, "%s adet iþyerine baðlý pompanýn litre ücreti %s olarak deðiþtirildi.", NumaraFormati(sayi, ""), NumaraFormati(ucret));
}
else if(dialogid == DIALOG_MUZIK_DEGISTIR) {
	if(!response) return false;

	new id = Isyeri_Yakin(playerid);
	if(id == -1) id = Oyuncu_Isyerinde(playerid);
	if(!strcmp(inputtext, "Kaldýr", true)) {
		IsyeriBilgi[id][isyeriMuzik][0] = 0;
		return SunucuMesaji(playerid, "Ýþyeri müziðini kaldýrdýn.");
	}
	if(strlen(inputtext) > 128) return hataMesaji(playerid, "En fazla 128 karakterli bir link koyabilirsin.");
	if(strfind(inputtext, "http://") == -1 && strfind(inputtext, "https://") == -1) return hataMesaji(playerid, "Bu geçerli bir link deðil.");

	format(IsyeriBilgi[id][isyeriMuzik], 128, "%s", inputtext);
	Isyeri_Kaydet(id);
	return SunucuMesaji(playerid, "Link %s olarak deðiþtirildi.", inputtext);
}
else if(dialogid == DIALOG_ORTAKEKLE) {
	if(!response) return false;
	new ortakid;
	if(sscanf(inputtext, "d", ortakid))
		return DialogGoster(playerid, DIALOG_ORTAKEKLE, DIALOG_STYLE_INPUT, "> Ýþyeri - Ortak", "Ortaðýn olmasýný istediðin kiþiyi girin;", "Tamam", "Iptal");

	if(!IsPlayerConnected(ortakid))
		return DialogGoster(playerid, DIALOG_ORTAKEKLE, DIALOG_STYLE_INPUT, "> Ýþyeri - Ortak", "{B70000}HATA: {FFFFFF}Geçersiz oyuncu.\nOrtaðýn olmasýný istediðin kiþiyi girin;", "Tamam", "Iptal");

	if(!YakinlikKontrol(playerid, ortakid, 2.5))
		return DialogGoster(playerid, DIALOG_ORTAKEKLE, DIALOG_STYLE_INPUT, "> Ýþyeri - Ortak", "{B70000}HATA: {FFFFFF}Oyuncuya yakýn deðilsin.\nOrtaðýn olmasýný istediðin kiþiyi girin;", "Tamam", "Iptal");

	SunucuMesaji(playerid, "%s adlý oyuncuya ortaklýk teklifinde bulundunuz.", OyuncuIsim(ortakid));
	new bilgi[144], id = Isyeri_Yakin(playerid);
	if(id == -1) id = Oyuncu_Isyerinde(playerid);
	SetPVarInt(ortakid, "ortakgonderen", playerid);
	SetPVarInt(ortakid, "ortakisyeri", id);
	format(bilgi, sizeof(bilgi), "%s adlý oyuncu sana iþyeri için ortaklýk teklifinde bulundu.\nID\tÝsim\n%d\t%s", OyuncuIsim(playerid), id, IsyeriBilgi[id][isyeriAd]);
	return DialogGoster(ortakid, DIALOG_ORTAKONAY, DIALOG_STYLE_MSGBOX, "> Ýþyeri - Ortak", bilgi, "Kabul", "Red");
}
else if(dialogid == DIALOG_ORTAKONAY) {
	if(!response) {
		SunucuMesaji(GetPVarInt(playerid, "ortakgonderen"), "%s iþyeri ortak teklifini reddetti.", OyuncuIsim(playerid));
		SunucuMesaji(playerid, "%s adlý oyuncunun iþyeri ortak teklifini redettin.", OyuncuIsim(GetPVarInt(playerid, "ortakgonderen")));
		DeletePVar(playerid, "ortakgonderen");
		return DeletePVar(playerid, "ortakisyeri");
	}
	else {
		new id = GetPVarInt(playerid, "ortakisyeri");
		IsyeriBilgi[id][isyeriOrtak] = oyuncuData[playerid][oID];
		format(IsyeriBilgi[id][isyeriOrtakIsim], 32, "%s", OyuncuIsim(playerid));
		Isyeri_Yenile(id);
		Isyeri_Kaydet(id);
		SunucuMesaji(GetPVarInt(playerid, "ortakgonderen"), "%s iþyeri ortak teklifini kabul etti.", OyuncuIsim(playerid));
		SunucuMesaji(playerid, "%s adlý oyuncunun iþyeri ortak teklifini kabul ettin.", OyuncuIsim(GetPVarInt(playerid, "ortakgonderen")));
		DeletePVar(playerid, "ortakgonderen");
		return DeletePVar(playerid, "ortakisyeri");
	}
}
else if(dialogid == DIALOG_ISYERIKASA) {
	if(!response) return cmd(playerid, 0, "isyeri");

	switch(listitem) {
		case 0: DialogGoster(playerid, DIALOG_ISYERIKASA_CEK, DIALOG_STYLE_INPUT, "> Ýþyeri - Kasa", "{FFFFFF}Kasadan çekmek istediðin para miktarýný girin;", "Tamam", "Ýptal");
		case 1: DialogGoster(playerid, DIALOG_ISYERIKASA_YATIR, DIALOG_STYLE_INPUT, "> Ýþyeri - Kasa", "{FFFFFF}Kasaya yatýrmak istediðin para miktarýný girin;", "Tamam", "Ýptal");
	}
	return 1;
}
else if(dialogid == DIALOG_ISYERIKASA_CEK) {
	if(!response) return 1;

	static miktar;
	if(sscanf(inputtext, "d", miktar)) return DialogGoster(playerid, DIALOG_ISYERIKASA_CEK, DIALOG_STYLE_INPUT, "> Ýþyeri - Kasa", "{FFFFFF}Kasadan çekmek istediðin para miktarýný girin;", "Tamam", "Ýptal");
	if(miktar < 1) return DialogGoster(playerid, DIALOG_ISYERIKASA_CEK, DIALOG_STYLE_INPUT, "> Ýþyeri - Kasa", "{B70000}HATA: {FFFFFF}Girilen miktar geçersdir.\nKasadan çekmek istediðin para miktarýný girin;", "Tamam", "Ýptal");
	static id;
	id = Isyeri_Yakin(playerid);
	if(id == -1) id = Oyuncu_Isyerinde(playerid);
	if(IsyeriBilgi[id][isyeriKasa] < miktar) return DialogGoster(playerid, DIALOG_ISYERIKASA_CEK, DIALOG_STYLE_INPUT, "> Ýþyeri - Kasa", "{B70000}HATA: {FFFFFF}Kasada bu kadar para yok.\nKasadan çekmek istediðin para miktarýný girin;", "Tamam", "Ýptal");

	ParaEkle(playerid, miktar, YONTEM_KASA_CEK);
	OyuncuKaydet(playerid);
	IsyeriBilgi[id][isyeriKasa] -= miktar;
	Isyeri_Kaydet(id);
	SunucuMesaji(playerid, "Ýþyeri kasandan %s miktarýnda para çektin.", NumaraFormati(miktar));
	return 1;
}
else if(dialogid == DIALOG_ISYERIKASA_YATIR) {
	if(!response) return 1;

	static miktar;
	if(sscanf(inputtext, "d", miktar)) return DialogGoster(playerid, DIALOG_ISYERIKASA_YATIR, DIALOG_STYLE_INPUT, "> Ýþyeri - Kasa", "{FFFFFF}Kasaya yatýrmak istediðin para miktarýný girin;", "Tamam", "Ýptal");
	if(miktar < 1) return DialogGoster(playerid, DIALOG_ISYERIKASA_YATIR, DIALOG_STYLE_INPUT, "> Ýþyeri - Kasa", "{B70000}HATA: {FFFFFF}Girilen miktar geçersizdir.\nKasaya yatýrmak istediðin para miktarýný girin;", "Tamam", "Ýptal");
	if(oyuncuData[playerid][oPara] < miktar) return DialogGoster(playerid, DIALOG_ISYERIKASA_YATIR, DIALOG_STYLE_INPUT, "> Ýþyeri - Kasa", "{B70000}HATA: {FFFFFF}Bu paraya sahip deðilsin.\nKasaya yatýrmak istediðin para miktarýný girin;", "Tamam", "Ýptal");

	static id;
	id = Isyeri_Yakin(playerid);
	if(id == -1) id = Oyuncu_Isyerinde(playerid);
	ParaEkle(playerid, -miktar, YONTEM_KASA_KOY);
	OyuncuKaydet(playerid);
	IsyeriBilgi[id][isyeriKasa] += miktar;
	Isyeri_Kaydet(id);
	SunucuMesaji(playerid, "Ýþyeri kasana %s miktarýnda para yatýrdýn.", NumaraFormati(miktar));
	return 1;
}
else if(dialogid == DIALOG_GIRISUCRET) {
	if(!response) return 0;

	static ucret, id;
	if(sscanf(inputtext, "d", ucret))
		return DialogGoster(playerid, DIALOG_GIRISUCRET, DIALOG_STYLE_INPUT, "> Giriþ Ücreti - Düzenle", "{B70000}UYARI: {FFFFFF}Girilen ücret 0 ilâ 750 dolar arasýnda olmalýdýr.\nLütfen olmasýný istediðin giriþ ücretin aþaðýdaki boþluða girin;", "Tamam", "Kapat");

	if(ucret < 0 || ucret > 750)
		return DialogGoster(playerid, DIALOG_GIRISUCRET, DIALOG_STYLE_INPUT, "> Giriþ Ücreti - Düzenle", "{B70000}UYARI: {FFFFFF}Girilen ücret 0 ilâ 750 dolar arasýnda olmalýdýr.\nLütfen olmasýný istediðin giriþ ücretin aþaðýdaki boþluða girin;", "Tamam", "Kapat");

	id = Isyeri_Yakin(playerid);
	if(id == -1) id = Oyuncu_Isyerinde(playerid);

	IsyeriBilgi[id][iGirisUcret] = ucret;
	Isyeri_Kaydet(id);
	Isyeri_Yenile(id);
	SunucuMesaji(playerid, "%s adlý iþyerinin giriþ ücreti %s olarak deðiþtirildi.", IsyeriBilgi[id][isyeriAd], NumaraFormati(ucret));
}
else if(dialogid == DIALOG_BANKA) {
	if(!response) return 0;

	new detaylar[256];
	switch(listitem) {
		case 0: {
			format(detaylar, sizeof(detaylar), "{FFFFFF}Hesap Sahibi: \t%s\nHesap NO: \t%d\nBakiye: \t\t%s", OyuncuIsim(playerid), oyuncuData[playerid][oHesapNumarasi], NumaraFormati(oyuncuData[playerid][oBankaPara]));
			DialogGoster(playerid, 0, DIALOG_STYLE_MSGBOX, "Hesap Detaylarý", detaylar, "Kapat", "");
		}
		case 1: DialogGoster(playerid, DIALOG_BANKA_PARACEK, DIALOG_STYLE_INPUT, "ATM", "Lütfen hesabýndan çekmek istediðin para miktarýný girin;", "Çek", "Ýptal");
		case 2: DialogGoster(playerid, DIALOG_BANKA_PARAYATIR, DIALOG_STYLE_INPUT, "ATM", "Lütfen hesabýna yatýrmak istediðin para miktarýný girin;", "Yatýr", "Ýptal");
		case 3: DialogGoster(playerid, DIALOG_BANKA_TRANSFER, DIALOG_STYLE_INPUT, "ATM", "Lütfen transfer yapacaðýn hesap numarasýný girin;", "Seç", "Ýptal");
		case 4: {
			if(oyuncuData[playerid][oMevduat] == 0)
			{
				ShowPlayerDialog(playerid, DIALOG_BANKA_MEVDUAT_YATIR, DIALOG_STYLE_INPUT, "{3399FF}Banka", "Lütfen Mevduat hesabýna yatýrmak istediðiniz miktarý girin\ngireceðiniz deðer (50,000 - 100,000 $) arasýnda olmalýdýr:", "Tamam", "Iptal");
			}
			else
			{
				ShowPlayerDialog(playerid, DIALOG_BANKA_MEVDUAT_CEK, DIALOG_STYLE_MSGBOX, "{3399FF}Banka", "Gerçekten paranýzý mevduat hesabýndan çekmek istiyor musunuz?\nBu iþlemin geri dönüþü bulunmamaktadýr.", "Evet", "Hayýr");
			}
		}
	}
}
else if(dialogid == DIALOG_BANKA_MEVDUAT_YATIR) {
	if(response) {
		new money = strval(inputtext);
		if(IsNumeric(inputtext) && money >= 50000 && money <= 100000) {
			if(oyuncuData[playerid][oBankaPara] >= money) {
				oyuncuData[playerid][oBankaPara] -= money;
				oyuncuData[playerid][oMevduat] = money;
				SunucuMesaji(playerid, "Mevduat hesabýnýza %i$ miktarýnda para yatýrdýnýz, bankada kalan miktar: %i$.", money, oyuncuData[playerid][oBankaPara]);
			} else {
				ShowPlayerDialog(playerid, DIALOG_BANKA_MEVDUAT_YATIR, DIALOG_STYLE_INPUT, "{3399FF}Banka", "Lütfen Mevduat hesabýna yatýrmak istediðiniz miktarý girin\ngireceðiniz deðer (50,000 - 100,000 $) arasýnda olmalýdýr:", "Tamam", "Iptal");
				hataMesaji(playerid, "Banka hesabýnýzda bu miktarda para bulunmuyor.");
			}
		} else {
			ShowPlayerDialog(playerid, DIALOG_BANKA_MEVDUAT_YATIR, DIALOG_STYLE_INPUT, "{3399FF}Banka", "Lütfen Mevduat hesabýna yatýrmak istediðiniz miktarý girin\ngireceðiniz deðer (50,000 - 100,000 $) arasýnda olmalýdýr:", "Tamam", "Iptal");
			hataMesaji(playerid, "Gireceðiniz deðer 50,000 ve 100,000 $ arasýnda olmalýdýr.");
		}
	}
}
else if(dialogid == DIALOG_BANKA_MEVDUAT_CEK) {
	if(response) {
		oyuncuData[playerid][oBankaPara] += oyuncuData[playerid][oMevduat];
		oyuncuData[playerid][oMevduat] = 0;
		SunucuMesaji(playerid, "Mevduat hesabýnýzdan tüm paranýzý çektiniz, banka hesabýnýzdaki yeni miktar: %i$.", oyuncuData[playerid][oBankaPara]);
	}
}
else if(dialogid == DIALOG_BANKA_PARACEK) {
	if(!response) return 0;

	new miktar;

	if(sscanf(inputtext, "d", miktar))
		return DialogGoster(playerid, DIALOG_BANKA_PARACEK, DIALOG_STYLE_INPUT, "ATM", "Lütfen hesabýndan çekmek istediðin para miktarýný girin;", "Çek", "Ýptal");

	if(oyuncuData[playerid][oBankaPara] < miktar) return hataMesaji(playerid, "Banka hesabýnda girilen miktarda para yok.");
	if(miktar < 1) return hataMesaji(playerid, "Girilen miktar geçersiz.");

	oyuncuData[playerid][oBankaPara] -= miktar;
	ParaEkle(playerid, miktar, DIALOG_BANKA_PARACEK);
	SunucuMesaji(playerid, "Banka hesabýndan %s miktarýnda para çektin.", NumaraFormati(miktar));
}
else if(dialogid == DIALOG_BANKA_PARAYATIR) {
	if(!response)
		return 0;

	new miktar;
	if(sscanf(inputtext, "d", miktar))
		return DialogGoster(playerid, DIALOG_BANKA_PARAYATIR, DIALOG_STYLE_INPUT, "ATM", "Lütfen hesabýna yatýrmak istediðin para miktarýný girin;", "Yatýr", "Ýptal");

	if(oyuncuData[playerid][oPara] < miktar)
		return hataMesaji(playerid, "Üzerinde girdiðin miktarda para yok.");

	if(miktar < 1)
		return hataMesaji(playerid, "Girilen miktar geçersiz.");

	oyuncuData[playerid][oBankaPara] += miktar;
	ParaEkle(playerid, -miktar, DIALOG_BANKA_PARAYATIR);
	SunucuMesaji(playerid, "Banka hesabýna %s miktarýnda para yatýrdýn.", NumaraFormati(miktar));
}
else if(dialogid == DIALOG_BANKA_TRANSFER) {
	if(!response)
		return 0;

	new hesapno, sayi = 0, test[128];
	sayi = 0;

	if(sscanf(inputtext, "d", hesapno))
		return DialogGoster(playerid, DIALOG_BANKA_TRANSFER, DIALOG_STYLE_INPUT, "ÝÞLEM", "{B70000}HATA: {FFFFFF}Geçersiz hesap numarasý!\nLütfen transfer yapacaðýn hesap numarasýný girin;", "Seç", "Ýptal");

	format(test, sizeof(test), "%d", hesapno);
	new hesapnosayi = strlen(test);
	if(hesapnosayi < 6)
		return DialogGoster(playerid, DIALOG_BANKA_TRANSFER, DIALOG_STYLE_INPUT, "ÝÞLEM", "{B70000}HATA: {FFFFFF}Geçersiz hesap numarasý!\nLütfen transfer yapacaðýn hesap numarasýný girin;", "Seç", "Ýptal");

	foreach(new i : Player) if(oyuncuData[i][oHesapNumarasi] == hesapno) {
		SetPVarInt(playerid, "TransferEdilecekID", i);
		DialogGoster(playerid, DIALOG_BANKA_TRANSFERY, DIALOG_STYLE_INPUT, "ÝÞLEM", "Transfer yapmak istediðin miktarý girin;", "Tamam", "Ýptal");
		sayi++;
	}
	if(!sayi)
		return DialogGoster(playerid, DIALOG_BANKA_TRANSFER, DIALOG_STYLE_INPUT, "ÝÞLEM", "{B70000}HATA: {FFFFFF}Geçersiz hesap numarasý!\nLütfen transfer yapacaðýn hesap numarasýný girin;", "Seç", "Ýptal");
}
else if(dialogid == DIALOG_BANKA_TRANSFERY) {
	if(!response)
		return 0;

	new miktar;
	if(sscanf(inputtext, "d", miktar))
		return DialogGoster(playerid, DIALOG_BANKA_TRANSFERY, DIALOG_STYLE_INPUT, "ÝÞLEM", "{B70000}HATA: {FFFFFF}Lütfen geçerli bir miktar girin!\nTransfer yapmak istediðin miktarý girin;", "Tamam", "Ýptal");

	if(oyuncuData[playerid][oBankaPara] < miktar)
		return DialogGoster(playerid, DIALOG_BANKA_TRANSFERY, DIALOG_STYLE_INPUT, "ÝÞLEM", "{B70000}HATA: {FFFFFF}Banka hesabýnda bu kadar para yok!\nTransfer yapmak istediðin miktarý girin;", "Tamam", "Ýptal");

	if(miktar < 1)
		return DialogGoster(playerid, DIALOG_BANKA_TRANSFERY, DIALOG_STYLE_INPUT, "ÝÞLEM", "{B70000}HATA: {FFFFFF}Girilen miktar geçersiz.\nTransfer yapmak istediðin miktarý girin;", "Tamam", "Ýptal");

	new oyuncuid = GetPVarInt(playerid, "TransferEdilecekID");
	if(IsPlayerConnected(oyuncuid)) {
		oyuncuData[oyuncuid][oBankaPara] += miktar;
		oyuncuData[playerid][oBankaPara] -= miktar;
		Log_Kaydet("loglar/hesaptransfer.txt", "[%s] %s, %s adli kisinin banka hesabina %s para transfer etti.", Tarih(), OyuncuIsim(playerid), OyuncuIsim(oyuncuid), NumaraFormati(miktar));
		SunucuMesaji(oyuncuid, "%d numaralý banka hesabýndan banka hesabýna %s miktarýnda transfer gerçekleþti.", oyuncuData[playerid][oHesapNumarasi], NumaraFormati(miktar));
		SunucuMesaji(playerid, "%d numaralý banka hesabýna %s miktarýnda transfer gerçekleþtirdin.", oyuncuData[oyuncuid][oHesapNumarasi], NumaraFormati(miktar));
		DeletePVar(playerid, "TransferEdilecekID");
		new str[150];
		format(str, sizeof(str), "```[%s] %s, %s adli kisinin banka hesabina %s para transfer etti.```", Tarih(), OyuncuIsim(playerid), OyuncuIsim(oyuncuid), NumaraFormati(miktar));
		DCC_SendChannelMessage(bankatransfer, str);
	}
	else if(!IsPlayerConnected(oyuncuid)) {
		DeletePVar(playerid, "TransferEdilecekID");
		hataMesaji(playerid, "Girilen banka hesabýnýn sahibi artýk aktif deðil.");
		return 1;
	}
}
else if(dialogid == DIALOG_TELKONUM)
{
	if(response)
	{
		if(oyuncuData[playerid][oTelefonDurum] == false) return hataMesaji(playerid, "Telefonunuz kapalý olduðu için bu seçeneði kullanamazsýn.");

		if(oyuncuData[playerid][oArama] > -1) return hataMesaji(playerid, "Arama yaparken bu seçeneði kullanamazsýn.");

		new oyuncuid = strval(inputtext);
		if(!IsPlayerConnected(oyuncuid)) return hataMesaji(playerid, "Oyuncu ID'sini yanlýþ girdiniz.");
		SunucuMesaji(oyuncuid, "%s(ID:%d) adlý kiþi size konum göndermek istiyor. Kabul etmek için /konumkabul [oyuncu id]", oyuncuData[playerid][oIsim],playerid);
		SunucuMesaji(playerid, "Konum gönderme isteðiniz gönderildi. Karþýdaki kiþi kabul ettiðinde konumunuzu görebilecek.");
		SetPVarInt(playerid, "konumgonder", 1);
	}
}
else if(dialogid == DIALOG_TELEFON) {
	if(!response) return 0;

	if(listitem == 0) {
		if(oyuncuData[playerid][oTelefonDurum] == false)
			return hataMesaji(playerid, "Telefonunuz kapalý olduðu için bu seçeneði kullanamazsýn.");

		if(oyuncuData[playerid][oArama] > -1)
			return hataMesaji(playerid, "Arama yaparken bu seçeneði kullanamazsýn.");

		DialogGoster(playerid, DIALOG_ARAMA, DIALOG_STYLE_INPUT, "> Arama Yap", "Arama yapmak istediðin numarayý aþaðýdaki alana girin;", "Ara", "Kapat");
	}
	else if(listitem == 1) {
		if(oyuncuData[playerid][oTelefonDurum] == false)
			return hataMesaji(playerid, "Telefonunuz kapalý olduðu için bu seçeneði kullanamazsýn.");

		if(oyuncuData[playerid][oArama] > -1)
			return hataMesaji(playerid, "Arama yaparken bu seçeneði kullanamazsýn.");

		DialogGoster(playerid, DIALOG_MESAJ, DIALOG_STYLE_INPUT, "> Mesaj", "Mesaj yollamak numarayý aþaðýdaki alana girin;", "Ara", "Kapat");
	}
	else if(listitem == 2) {
		if(oyuncuData[playerid][oArama] > -1)
			cmd(playerid, 0, "kapat");

		switch(oyuncuData[playerid][oTelefonDurum]) {
			case false: oyuncuData[playerid][oTelefonDurum] = true, SunucuMesaji(playerid, "Telefonunu açtýn.");
			case true: oyuncuData[playerid][oTelefonDurum] = false, SunucuMesaji(playerid, "Telefonunu kapattýn.");
		}
	}
}
else if(dialogid == DIALOG_MESAJ) {
	if(response) {
		static numara;
		if(sscanf(inputtext, "d", numara))
			return DialogGoster(playerid, DIALOG_MESAJ, DIALOG_STYLE_INPUT, "> Mesaj", "Mesaj yollamak numarayý aþaðýdaki alana girin;", "Tamam", "Kapat");

		foreach(new i : Player) if(oyuncuData[i][oTelefonNumarasi] == numara) {
			SetPVarInt(playerid, "mNumara", numara);
			return DialogGoster(playerid, DIALOG_MESAJ2, DIALOG_STYLE_INPUT, "> Mesaj", "Lütfen mesaj metnini girin;", "Gönder", "Kapat");
		}
		UyariMesaji(playerid, "Geçersiz numara girdin.");
		DialogGoster(playerid, DIALOG_MESAJ, DIALOG_STYLE_INPUT, "> Mesaj", "Mesaj yollamak numarayý aþaðýdaki alana girin;", "Tamam", "Kapat");
	}
}
else if(dialogid == DIALOG_MESAJ2) {
	if(response) {
		if(isnull(inputtext))
			return DialogGoster(playerid, DIALOG_MESAJ2, DIALOG_STYLE_INPUT, "> Mesaj", "Lütfen mesaj metnini girin;", "Gönder", "Kapat");

		static numara, num;
		numara = GetPVarInt(playerid, "mNumara");
		num = -1;
		if(numara == 0)
			return hataMesaji(playerid, "Bu telefon numarasý geçersizdir!");

		if(numara == 911)
			return hataMesaji(playerid, "911 hattýna mesaj gönderemezsin.");

		if(oyuncuData[playerid][oPara] < SMS_UCRET) return hataMesaji(playerid, "SMS ücretini karþýlamýyorsunuz.");

		foreach(new i : Player) if(oyuncuData[i][oTelefonNumarasi] == numara) {
			if(oyuncuData[i][oTelefonDurum] == false || oyuncuData[i][oIzlenen] != INVALID_PLAYER_ID) return hataMesaji(playerid, "Mesaj iletilemedi.");
			SCM_Ex(i, RENK_SMS, "SMS alýndý. Numara: %d | Mesaj: %s", oyuncuData[playerid][oTelefonNumarasi], inputtext);
			cmd(i, 2, "Telefonundan mesaj bildirim sesi geldi.");
			cmd(playerid, 1, "telefonundaki tuþlara basarak mesaj gönderir.");
			SCM_Ex(playerid, RENK_SMS, "SMS gönderildi. Numara: %d | Mesaj: %s", oyuncuData[i][oTelefonNumarasi], inputtext);
			ParaEkle(playerid, -SMS_UCRET);
			num = i;
		}
		SetPVarInt(playerid, "mNumara", 0);
		if(num == -1)
			return UyariMesaji(playerid, "Mesaj iletilemedi.");

		UyariMesaji(playerid, "Mesaj iletildi.");
	}
}
else if(dialogid == DIALOG_ARAMA) {
	if(response) {
		static numara, num[144];
		if(sscanf(inputtext, "d", numara))
			return DialogGoster(playerid, DIALOG_ARAMA, DIALOG_STYLE_INPUT, "> Arama Yap", "Arama yapmak istediðin numarayý aþaðýdaki alana girin;", "Ara", "Kapat");

		format(num, sizeof(num), "ara %d", numara);
		cmd(playerid, 0, num);
	}
}
else if(dialogid == DIALOG_911_SECIM) {
	if(response) {
		DialogGoster(playerid, DIALOG_911_LSPD, DIALOG_STYLE_INPUT, "> 911 - VCPD", "Lütfen ihbarýnýzý girin;", "Tamam", "Ýptal");
	}
	else if(!response) {
		DialogGoster(playerid, DIALOG_911_LSFD, DIALOG_STYLE_INPUT, "> 911 - ASGH", "Lütfen ihbarýnýzý girin;", "Tamam", "Ýptal");
	}
}
else if(dialogid == DIALOG_911_LSFD) {
	if(!response)
		return 0;

	if(isnull(inputtext))
		return DialogGoster(playerid, DIALOG_911_LSFD, DIALOG_STYLE_INPUT, "> 911 - ASGH", "Lütfen ihbarýnýzý girin;", "Tamam", "Ýptal");
	new ihbarstring[128];
	format(ihbarstring, sizeof(ihbarstring), "(telefon) %s: %s", OyuncuIsim(playerid), inputtext);
	SendNearbyMessage(playerid, KONUSMA_MESAFESI, ihbarstring, -1, RENK_YAZI_1, RENK_YAZI_2, RENK_YAZI_3, RENK_YAZI_4);
	SetPVarString(playerid, "ihbar", inputtext);
	DialogGoster(playerid, DIALOG_911_LSFD_YER, DIALOG_STYLE_INPUT, "> 911 - ASGH", "Lütfen olay yerini belirtin;", "Tamam", "Ýptal");
}
else if(dialogid == DIALOG_911_LSFD_YER) {
	if(!response)
		return 0;
	if(!isnull(inputtext))
	{
		new ihbarstring[128];
		format(ihbarstring, sizeof(ihbarstring), "(telefon) %s: %s", OyuncuIsim(playerid), inputtext);
		SendNearbyMessage(playerid, KONUSMA_MESAFESI, ihbarstring, -1, RENK_YAZI_1, RENK_YAZI_2, RENK_YAZI_3, RENK_YAZI_4);
	}
	for (new i = 0; i != MAKSIMUM_BIRLIK; i ++) if(BirlikBilgi[i][birlikTur] == BIRLIK_MEDIKAL)
	{
		static ihbar[128];
		GetPVarString(playerid, "ihbar", ihbar, sizeof(ihbar));
		GetPlayerPos(playerid, oyuncuData[playerid][oPos][0], oyuncuData[playerid][oPos][1], oyuncuData[playerid][oPos][2]);
		BirlikMesaji(i, RENK_IHBAR, "[911 HATTI]");
		BirlikMesaji(i, RENK_IHBAR, "%s Ýsimli vatandaþ, %d telefon numarasý, lokasyon %s", OyuncuIsim(playerid), oyuncuData[playerid][oTelefonNumarasi], LokasyonBul(oyuncuData[playerid][oPos][0], oyuncuData[playerid][oPos][1], oyuncuData[playerid][oPos][2]));
		BirlikMesaji(i, RENK_IHBAR, "Ýhbar Ýçeriði: %s", ihbar);
		BirlikMesaji(i, RENK_IHBAR, "Ýhbar Lokasyonu: %s", inputtext);
		BirlikMesaji(i, RENK_IHBAR, "[911 HATTI]");
		DeletePVar(playerid, "ihbar");
		SunucuMesaji(playerid, "Ýhbarýnýz iletildi, en kýsa sürede size ulaþacaðýz");
	}
}
else if(dialogid == DIALOG_911_LSPD) {
	if(!response)
		return 0;

	if(isnull(inputtext)) return DialogGoster(playerid, DIALOG_911_LSPD, DIALOG_STYLE_INPUT, "> 911 - VCPD", "Lütfen ihbarýnýzý girin;", "Tamam", "Ýptal");
	if(strlen(inputtext) > 100) return DialogGoster(playerid, DIALOG_911_LSPD, DIALOG_STYLE_INPUT, "> 911 - VCPD", "HATA: Maksimum 100 karakter girebilirsiniz.\nLütfen ihbarýnýzý girin;", "Tamam", "Ýptal");
	new ihbarstring[128];
	format(ihbarstring, sizeof(ihbarstring), "(telefon) %s: %s", OyuncuIsim(playerid), inputtext);
	SendNearbyMessage(playerid, KONUSMA_MESAFESI, ihbarstring, -1, RENK_YAZI_1, RENK_YAZI_2, RENK_YAZI_3, RENK_YAZI_4);
	SetPVarString(playerid, "ihbar", inputtext);
	if(GetPVarInt(playerid, "dialog") == -1) DialogGoster(playerid, DIALOG_911_LSPD_YER, DIALOG_STYLE_INPUT, "> 911 - VCPD", "Lütfen olay yerini belirtin;", "Tamam", "Ýptal");
}
else if(dialogid == DIALOG_911_LSPD_YER) {
	if(!response)
		return 0;
	if(isnull(inputtext)) return DialogGoster(playerid, DIALOG_911_LSPD_YER, DIALOG_STYLE_INPUT, "> 911 - VCPD", "Boþ býrakýlamaz.\nLütfen olay yerini belirtin;", "Tamam", "Ýptal");
	new ihbarstring[128];
	format(ihbarstring, sizeof(ihbarstring), "(telefon) %s: %s", OyuncuIsim(playerid), inputtext);
	SendNearbyMessage(playerid, KONUSMA_MESAFESI, ihbarstring, -1, RENK_YAZI_1, RENK_YAZI_2, RENK_YAZI_3, RENK_YAZI_4);
	for (new i = 0; i != MAKSIMUM_BIRLIK; i ++) if(BirlikBilgi[i][birlikTur] == BIRLIK_POLIS)
	{
		static ihbar[128];
		GetPVarString(playerid, "ihbar", ihbar, sizeof(ihbar));
		GetPlayerPos(playerid, oyuncuData[playerid][oPos][0], oyuncuData[playerid][oPos][1], oyuncuData[playerid][oPos][2]);
		BirlikMesaji(i, COLOR_CIFTLIK, "[911] Ýhbar: %s", ihbar);
		BirlikMesaji(i, COLOR_CIFTLIK, "[911] Olay Yeri: %s | Ýhbar Sahibi: %s (%d) | Telefondan alýnan son sinyal: %s", inputtext, OyuncuIsim(playerid), playerid, LokasyonBul(oyuncuData[playerid][oPos][0], oyuncuData[playerid][oPos][1], oyuncuData[playerid][oPos][2]));
		BirlikMesaji(i, COLOR_CIFTLIK, "[911] Telefon Numarasý: %d", oyuncuData[playerid][oTelefonNumarasi]);
		DeletePVar(playerid, "ihbar");
		SunucuMesaji(playerid, "Ýhbarýnýz iletildi, en kýsa sürede size ulaþacaðýz");
	}
}
else if(dialogid == DIALOG_EVSAT) {
	static evid;
	evid = GetPVarInt(playerid, "satilanev");
	if(response) {
		if(!IsPlayerConnected(GetPVarInt(playerid, "evsatan"))) return hataMesaji(playerid, "Teklif yapan kiþi oyunda deðil.");
		if(oyuncuData[playerid][oPara] < GetPVarInt(playerid, "evfiyat"))
			{ oyuncuData[GetPVarInt(playerid, "evsatan")][oSatisYapiyor] = false, SetPVarInt(playerid, "evsatan", -1), SetPVarInt(playerid, "satilanev", -1), SetPVarInt(playerid, "evfiyat", -1);
		return hataMesaji(playerid, "Bu ev için yeterli paran yok."); }

		EvBilgi[evid][evSahip] = oyuncuData[playerid][oID];
		ParaEkle(playerid, -GetPVarInt(playerid, "evfiyat"));
		ParaEkle(GetPVarInt(playerid, "evsatan"), GetPVarInt(playerid, "evfiyat"));
		EvBilgi[evid][evSahipIsim][0] = 0;
		Ev_Yenile(evid);
		Ev_Kaydet(evid);
		oyuncuData[GetPVarInt(playerid, "evsatan")][oSatisYapiyor] = false;
		SunucuMesaji(playerid, "%s adlý kiþiden %s adresli evi %s fiyatýna satýn aldýn.", OyuncuIsim(GetPVarInt(playerid, "evsatan")), EvBilgi[evid][evAdres], NumaraFormati(GetPVarInt(playerid, "evfiyat")));
		SunucuMesaji(GetPVarInt(playerid, "evsatan"), "%s adlý oyuncu %s adresli evini %s fiyatýna satýn aldý.", OyuncuIsim(playerid), EvBilgi[evid][evAdres], NumaraFormati(GetPVarInt(playerid, "evfiyat")));
		Log_Kaydet("loglar/satmalog.txt", "[%s] %s adli kisi %s adli kisiye %d ID'li evi satti. Aldigi Para: %s", Tarih(), OyuncuIsim(GetPVarInt(playerid, "evsatan")), OyuncuIsim(playerid), evid, NumaraFormati(GetPVarInt(playerid, "evfiyat")));
		SetPVarInt(playerid, "evsatan", -1);
		SetPVarInt(playerid, "satilanev", -1);
		SetPVarInt(playerid, "evfiyat", -1);
		new str[150];
		format(str, sizeof(str), "```[%s] %s adli kisi %s adli kisiye %d ID'li evi satti. Aldigi Para: %s```", Tarih(), OyuncuIsim(GetPVarInt(playerid, "evsatan")), OyuncuIsim(playerid), evid, NumaraFormati(GetPVarInt(playerid, "evfiyat")));
		DCC_SendChannelMessage(evlog, str);
	}
	else if(!response) {
		if(!IsPlayerConnected(GetPVarInt(playerid, "evsatan")))
			return hataMesaji(playerid, "Teklif yapan kiþi oyunda deðil.");
		oyuncuData[GetPVarInt(playerid, "evsatan")][oSatisYapiyor] = false;
		SunucuMesaji(playerid, "%s adlý kiþinin %s adresli evi satma talebini reddettin.", OyuncuIsim(GetPVarInt(playerid, "evsatan")), EvBilgi[evid][evAdres]);
		SunucuMesaji(GetPVarInt(playerid, "evsatan"), "%s adlý oyuncu %s adresli evinin satma talebini reddetti.", OyuncuIsim(playerid), EvBilgi[evid][evAdres]);
		SetPVarInt(playerid, "evsatan", -1);
		SetPVarInt(playerid, "satilanev", -1);
		SetPVarInt(playerid, "evfiyat", -1);
	}
}
else if(dialogid == DIALOG_ARACSAT) {
	static aracid;
	aracid = GetPVarInt(playerid, "satilanarac");
	if(response) {
		if(!IsPlayerConnected(GetPVarInt(playerid, "aracsatan"))) return hataMesaji(playerid, "Teklif yapan kiþi oyunda deðil.");
		if(oyuncuData[playerid][oPara] < GetPVarInt(playerid, "aracfiyat"))
			{ oyuncuData[GetPVarInt(playerid, "aracsatan")][oSatisYapiyor] = false, SetPVarInt(playerid, "aracsatan", -1), SetPVarInt(playerid, "satilanarac", -1), SetPVarInt(playerid, "aracfiyat", -1);
		return hataMesaji(playerid, "Bu araç için yeterli paran yok."); }

		AracBilgi[aracid][aracSahip] = oyuncuData[playerid][oID];
		if(AracBilgi[aracid][aracBirlik] > -1)
		{
			BirlikBilgi[AracBilgi[aracid][aracBirlik]][birlikaraci]--;
			Birlik_Kaydet(AracBilgi[aracid][aracBirlik]);
		}
		AracBilgi[aracid][aracBirlik] = -1;
		AnahtarBul(AracBilgi[aracid][aracID]);
		ParaEkle(playerid, -GetPVarInt(playerid, "aracfiyat"), YONTEM_ARAC_SAT);
		ParaEkle(GetPVarInt(playerid, "aracsatan"), GetPVarInt(playerid, "aracfiyat"), YONTEM_ARAC_SAT);
		Arac_Kaydet(aracid);
		oyuncuData[GetPVarInt(playerid, "aracsatan")][oSatisYapiyor] = false;
		SunucuMesaji(playerid, "%s adlý kiþiden %s model aracý %s fiyatýna satýn aldýn.", OyuncuIsim(GetPVarInt(playerid, "aracsatan")), AracModel(AracBilgi[aracid][aracModel]), NumaraFormati(GetPVarInt(playerid, "aracfiyat")));
		SunucuMesaji(GetPVarInt(playerid, "aracsatan"), "%s adlý oyuncu %s model aracýný %s fiyatýna satýn aldý.", OyuncuIsim(playerid), AracModel(AracBilgi[aracid][aracModel]), NumaraFormati(GetPVarInt(playerid, "aracfiyat")));
		Log_Kaydet("loglar/satmalog.txt", "[%s] %s adli kisi %s adli kisiye %s model araci satti. Aldigi Para: %s", Tarih(), OyuncuIsim(GetPVarInt(playerid, "aracsatan")), OyuncuIsim(playerid), AracModel(AracBilgi[aracid][aracModel]), NumaraFormati(GetPVarInt(playerid, "aracfiyat")));
		SetPVarInt(playerid, "aracsatan", -1);
		SetPVarInt(playerid, "satilanarac", -1);
		SetPVarInt(playerid, "aracfiyat", -1);	
		new str[150];
		format(str, sizeof(str), "```[%s] %s adli kisi %s adli kisiye %s model araci satti. Aldigi Para: %s```", Tarih(), OyuncuIsim(GetPVarInt(playerid, "aracsatan")), OyuncuIsim(playerid), AracModel(AracBilgi[aracid][aracModel]), NumaraFormati(GetPVarInt(playerid, "aracfiyat")));
		DCC_SendChannelMessage(araclog, str);
	}
	else if(!response) {
		if(!IsPlayerConnected(GetPVarInt(playerid, "aracsatan")))
			return hataMesaji(playerid, "Teklif yapan kiþi oyunda deðil.");
		oyuncuData[GetPVarInt(playerid, "aracsatan")][oSatisYapiyor] = false;
		SunucuMesaji(playerid, "%s adlý kiþinin %s model aracý %s fiyatýna satma talebini reddettin.", OyuncuIsim(GetPVarInt(playerid, "aracsatan")), AracModel(AracBilgi[aracid][aracModel]), NumaraFormati(GetPVarInt(playerid, "aracfiyat")));
		SunucuMesaji(GetPVarInt(playerid, "aracsatan"), "%s adlý oyuncu %s model aracýný satma talebini reddetti.", OyuncuIsim(playerid), AracModel(AracBilgi[aracid][aracModel]));
		SetPVarInt(playerid, "aracsatan", -1);
		SetPVarInt(playerid, "satilanarac", -1);
		SetPVarInt(playerid, "aracfiyat", -1);
	}
}

else if(dialogid == DIALOG_FIRMAARACSAT)
{
	static aracid;
	aracid = GetPVarInt(playerid, "satilanarac");
	if(response)
	{
		if(!IsPlayerConnected(GetPVarInt(playerid, "aracsatan"))) return hataMesaji(playerid, "Teklif yapan kiþi oyunda deðil.");
		if(oyuncuData[playerid][oPara] < GetPVarInt(playerid, "aracfiyat"))
			{ oyuncuData[GetPVarInt(playerid, "aracsatan")][oSatisYapiyor] = false, SetPVarInt(playerid, "aracsatan", -1), SetPVarInt(playerid, "satilanarac", -1), SetPVarInt(playerid, "aracfiyat", -1);
		return hataMesaji(playerid, "Bu araç için yeterli paran yok."); }

		AracBilgi[aracid][aracSahip] = oyuncuData[playerid][oID];
		if(AracBilgi[aracid][aracBirlik] > -1)
		{
			BirlikBilgi[AracBilgi[aracid][aracBirlik]][birlikaraci]--;
			Birlik_Kaydet(AracBilgi[aracid][aracBirlik]);
		}
		AracBilgi[aracid][aracBirlik] = -1;
		AracBilgi[aracid][aracFirma] = -1;
		ParaEkle(playerid, -GetPVarInt(playerid, "aracfiyat"));
		FirmaParaEkle(oyuncuData[GetPVarInt(playerid, "aracsatan")][oFirma], GetPVarInt(playerid, "aracfiyat"));
		Arac_Kaydet(aracid);
		oyuncuData[GetPVarInt(playerid, "aracsatan")][oSatisYapiyor] = false;
		SunucuMesaji(playerid, "%s adlý kiþiden %s model aracý %s fiyatýna satýn aldýn.", OyuncuIsim(GetPVarInt(playerid, "aracsatan")), AracModel(AracBilgi[aracid][aracModel]), NumaraFormati(GetPVarInt(playerid, "aracfiyat")));
		SunucuMesaji(GetPVarInt(playerid, "aracsatan"), "%s adlý oyuncu %s model aracýný %s fiyatýna satýn aldý.", OyuncuIsim(playerid), AracModel(AracBilgi[aracid][aracModel]), NumaraFormati(GetPVarInt(playerid, "aracfiyat")));
		Log_Kaydet("loglar/satmalog.txt", "[%s] %s adli kisi %s adli kisiye %s model araci satti. Aldigi Para: %s", Tarih(), OyuncuIsim(GetPVarInt(playerid, "aracsatan")), OyuncuIsim(playerid), AracModel(AracBilgi[aracid][aracModel]), NumaraFormati(GetPVarInt(playerid, "aracfiyat")));
		SetPVarInt(playerid, "aracsatan", -1);
		SetPVarInt(playerid, "satilanarac", -1);
		SetPVarInt(playerid, "aracfiyat", -1);				
		new str[150];
		format(str, sizeof(str), "```[%s] %s adli kisi %s adli kisiye %s model araci satti. Aldigi Para: %s```", Tarih(), OyuncuIsim(GetPVarInt(playerid, "aracsatan")), OyuncuIsim(playerid), AracModel(AracBilgi[aracid][aracModel]), NumaraFormati(GetPVarInt(playerid, "aracfiyat")));
		DCC_SendChannelMessage(araclog, str);
	}
	else if(!response) 
	{
		if(!IsPlayerConnected(GetPVarInt(playerid, "aracsatan")))
			return hataMesaji(playerid, "Teklif yapan kiþi oyunda deðil.");
		oyuncuData[GetPVarInt(playerid, "aracsatan")][oSatisYapiyor] = false;
		SunucuMesaji(playerid, "%s adlý kiþinin %s model aracý %s fiyatýna satma talebini reddettin.", OyuncuIsim(GetPVarInt(playerid, "aracsatan")), AracModel(AracBilgi[aracid][aracModel]), NumaraFormati(GetPVarInt(playerid, "aracfiyat")));
		SunucuMesaji(GetPVarInt(playerid, "aracsatan"), "%s adlý oyuncu %s model aracýný satma talebini reddetti.", OyuncuIsim(playerid), AracModel(AracBilgi[aracid][aracModel]));
		SetPVarInt(playerid, "aracsatan", -1);
		SetPVarInt(playerid, "satilanarac", -1);
		SetPVarInt(playerid, "aracfiyat", -1);
	}
}
else if(dialogid == DIALOG_ISYERISAT) {
	static id;
	id = GetPVarInt(playerid, "satilanisyeri");
	if(response) {
		if(!IsPlayerConnected(GetPVarInt(playerid, "isyerisatan"))) return hataMesaji(playerid, "Teklif yapan kiþi oyunda deðil.");
		if(oyuncuData[playerid][oPara] < GetPVarInt(playerid, "isyerifiyat"))
			{ oyuncuData[GetPVarInt(playerid, "isyerisatan")][oSatisYapiyor] = false, SetPVarInt(playerid, "isyerisatan", -1), SetPVarInt(playerid, "satilanisyeri", -1), SetPVarInt(playerid, "isyerifiyat", -1);
		return hataMesaji(playerid, "Bu iþyeri için yeterli paran yok."); }

		IsyeriBilgi[id][isyeriSahip] = oyuncuData[playerid][oID];
		IsyeriBilgi[id][isyeriOrtak] = 0;
		ParaEkle(playerid, -GetPVarInt(playerid, "isyerifiyat"));
		ParaEkle(GetPVarInt(playerid, "isyerisatan"), GetPVarInt(playerid, "isyerifiyat"));
		IsyeriBilgi[id][isyeriSahipIsim][0] = 0;
		IsyeriBilgi[id][isyeriOrtakIsim][0] = 0;
		Isyeri_Yenile(id);
		Isyeri_Kaydet(id);
		oyuncuData[GetPVarInt(playerid, "isyerisatan")][oSatisYapiyor] = false;
		SunucuMesaji(playerid, "%s adlý kiþiden %s isimli iþyerini %s fiyatýna satýn aldýn.", OyuncuIsim(GetPVarInt(playerid, "isyerisatan")), IsyeriBilgi[id][isyeriAd], NumaraFormati(GetPVarInt(playerid, "isyerifiyat")));
		SunucuMesaji(GetPVarInt(playerid, "isyerisatan"), "%s adlý oyuncu %s adlý iþyerini %s fiyatýna satýn aldý.", OyuncuIsim(playerid), IsyeriBilgi[id][isyeriAd], NumaraFormati(GetPVarInt(playerid, "isyerifiyat")));
		Log_Kaydet("loglar/satmalog.txt", "[%s] %s adli kisi %s adli kisiye %d ID'li(%s) isyerini satti. Aldigi Para: %s", Tarih(), OyuncuIsim(GetPVarInt(playerid, "isyerisatan")), OyuncuIsim(playerid), id, IsyeriBilgi[id][isyeriAd], NumaraFormati(GetPVarInt(playerid, "isyerifiyat")));
		SetPVarInt(playerid, "isyerisatan", -1);
		SetPVarInt(playerid, "satilanisyeri", -1);
		SetPVarInt(playerid, "isyerifiyat", -1);
		new str[150];
		format(str, sizeof(str), "```[%s] %s adli kisi %s adli kisiye %d ID'li(%s) isyerini satti. Aldigi Para: %s```", Tarih(), OyuncuIsim(GetPVarInt(playerid, "isyerisatan")), OyuncuIsim(playerid), id, IsyeriBilgi[id][isyeriAd], NumaraFormati(GetPVarInt(playerid, "isyerifiyat")));
		DCC_SendChannelMessage(isyerilog, str);
	}
	else if(!response) {
		if(!IsPlayerConnected(GetPVarInt(playerid, "isyerisatan"))) return hataMesaji(playerid, "Teklif yapan kiþi oyunda deðil.");
		oyuncuData[GetPVarInt(playerid, "isyerisatan")][oSatisYapiyor] = false;
		SunucuMesaji(playerid, "%s adlý kiþinin %s adlý iþyerini satma talebini reddettin.", OyuncuIsim(GetPVarInt(playerid, "isyerisatan")), IsyeriBilgi[id][isyeriAd]);
		SunucuMesaji(GetPVarInt(playerid, "isyerisatan"), "%s adlý oyuncu %s adlý iþyerinin satma talebini reddetti.", OyuncuIsim(playerid), IsyeriBilgi[id][isyeriAd]);
		SetPVarInt(playerid, "isyerisatan", -1);
		SetPVarInt(playerid, "satilanisyeri", -1);
		SetPVarInt(playerid, "isyerifiyat", -1);
	}
}
else if(dialogid == DIALOG_ARACANAHTAR) {
	if(GetPVarInt(playerid, "anahtarsahip") == INVALID_PLAYER_ID || GetPVarInt(playerid, "aracid") == -1)
		return hataMesaji(playerid, "Bir hata oluþtuðu için iþlemin tamamlanamadý.");

	if(response) {
		static aracid, oyuncuid;
		aracid = GetPVarInt(playerid, "aracid");
		oyuncuid = GetPVarInt(playerid, "anahtarsahip");
		if(!YakinlikKontrol(playerid, oyuncuid, 5.0)) return hataMesaji(playerid, "Araç sahibine yakýn deðilsin.");

		if(AracBilgi[aracid][aracAnahtar] > -1) {
			hataMesaji(oyuncuid, "%s adlý kiþiye önerdiðin araç anahtarý talebinde bir hata oluþtu.", OyuncuIsim(playerid));
			hataMesaji(playerid, "%s adlý kiþinin önerdiði araç anahtarý talebinde bir hata oluþtu.", OyuncuIsim(oyuncuid));
		}
		else {
			AracBilgi[aracid][aracAnahtar] = oyuncuData[playerid][oID];
			Arac_Kaydet(aracid);
			SunucuMesaji(oyuncuid, "%s adlý kiþiye %s model aracýnýn anahtarýný verdin. (Araç ID: %d)", OyuncuIsim(playerid), AracModel(GetPlayerVehicleID(oyuncuid)), GetPlayerVehicleID(oyuncuid));
			SunucuMesaji(playerid, "%s adlý kiþi sana %s model aracýnýn anahtarýný verdi. (Araç ID: %d)", OyuncuIsim(oyuncuid), AracModel(GetPlayerVehicleID(oyuncuid)), GetPlayerVehicleID(oyuncuid));
		}
		SetPVarInt(playerid, "aracid", -1);
		SetPVarInt(playerid, "anahtarsahip", INVALID_PLAYER_ID);
	}
	if(!response) {
		static oyuncuid;
		oyuncuid = GetPVarInt(playerid, "anahtarsahip");
		if(!YakinlikKontrol(playerid, oyuncuid, 5.0))
			return hataMesaji(playerid, "Araç sahibine yakýn deðilsin.");

		hataMesaji(oyuncuid, "%s adlý kiþi anahtarý almayý reddetti.", OyuncuIsim(playerid));
		SunucuMesaji(playerid, "%s adlý oyuncunun anahtar teklifini reddettin.", OyuncuIsim(oyuncuid));
		SetPVarInt(playerid, "aracid", -1);
		SetPVarInt(playerid, "anahtarsahip", INVALID_PLAYER_ID);
	}
}
else if(dialogid == DIALOG_GOVASANSOR) {
	if(!response)
		return 0;

	switch(listitem) {
		case 0: {
			if(IsPlayerInRangeOfPoint(playerid, 3.0, 1493.4991, -1791.1809, 2981.3540))
				return hataMesaji(playerid, "Zaten bu kattasýn.");

			SetPlayerPos(playerid, 2131.507812, 1600.818481, 1008.359375);
			SetPlayerInterior(playerid, 1);
			SetPlayerVirtualWorld(playerid, 30000);
			SetTimerEx("Asansor", 3000, false, "dd", playerid, 0);
			oyuncuData[playerid][oAsansor] = 0;
		}
		case 1: {
			if(IsPlayerInRangeOfPoint(playerid, 3.0, 1493.6021, -1786.3867, 2676.0129))
				return hataMesaji(playerid, "Zaten bu kattasýn.");

			SetPlayerPos(playerid, 2131.507812, 1600.818481, 1008.359375);
			SetPlayerInterior(playerid, 1);
			SetPlayerVirtualWorld(playerid, 30000);
			SetTimerEx("Asansor", 3000, false, "dd", playerid, 1);
			oyuncuData[playerid][oAsansor] = 1;
		}
		case 2: {
			if(OyuncuBirlikTuru(playerid) != BIRLIK_DEVLET && OyuncuBirlikTuru(playerid) != BIRLIK_POLIS)
				return hataMesaji(playerid, "Bu bölüme giriþ iznin bulunmuyor.");

			if(IsPlayerInRangeOfPoint(playerid, 3.0, 1482.5685, -1848.7686, 3645.6270))
				return hataMesaji(playerid, "Zaten bu kattasýn.");

			SetPlayerPos(playerid, 2131.507812, 1600.818481, 1008.359375);
			SetPlayerInterior(playerid, 1);
			SetPlayerVirtualWorld(playerid, 30000);
			SetTimerEx("Asansor", 3000, false, "dd", playerid, 2);
			oyuncuData[playerid][oAsansor] = 2;
		}
	}
	TogglePlayerControllable(playerid, false);
	SetTimerEx("oyuncucoz", 1000, false, "i", playerid);
}
else if(dialogid == DIALOG_PDASANSOR) {
	if(!response)
		return 0;

	switch(listitem) {
		case 0: {
			if(IsPlayerInRangeOfPoint(playerid, 3.0, 193.8061,1915.0837,529.9813))
				return hataMesaji(playerid, "Zaten bu kattasýn.");

			SetPlayerPos(playerid, 2131.507812, 1600.818481, 1008.359375);
			SetPlayerInterior(playerid, 1);
			SetPlayerVirtualWorld(playerid, 15000);
			SetTimerEx("Asansor", 3000, false, "dd", playerid, 3);
			oyuncuData[playerid][oAsansor] = 3;
		}
		case 1: {
			if(IsPlayerInRangeOfPoint(playerid, 3.0, 2018.3427,1584.6659,6753.0479))
				return hataMesaji(playerid, "Zaten bu kattasýn.");

			SetPlayerPos(playerid, 2131.507812, 1600.818481, 1008.359375);
			SetPlayerInterior(playerid, 1);
			SetPlayerVirtualWorld(playerid, 15000);
			SetTimerEx("Asansor", 3000, false, "dd", playerid, 4);
			oyuncuData[playerid][oAsansor] = 4;
		}
		case 2: {
			if(IsPlayerInRangeOfPoint(playerid, 3.0, 1705.0577,946.5693,1129.9878) && GetPlayerVirtualWorld(playerid) == 95678)
				return hataMesaji(playerid, "Zaten bu kattasýn.");

			SetPlayerPos(playerid, 2131.507812, 1600.818481, 1008.359375);
			SetPlayerInterior(playerid, 1);
			SetPlayerVirtualWorld(playerid, 15000);
			SetTimerEx("Asansor", 3000, false, "dd", playerid, 5);
			oyuncuData[playerid][oAsansor] = 5;
		}
		case 3: {
			if(IsPlayerInRangeOfPoint(playerid, 3.0, 1705.0577,946.5693,1129.9878) && GetPlayerVirtualWorld(playerid) == 95679)
				return hataMesaji(playerid, "Zaten bu kattasýn.");

			SetPlayerPos(playerid, 2131.507812, 1600.818481, 1008.359375);
			SetPlayerInterior(playerid, 1);
			SetPlayerVirtualWorld(playerid, 15000);
			SetTimerEx("Asansor", 3000, false, "dd", playerid, 6);
			oyuncuData[playerid][oAsansor] = 6;
		}
		case 4: {
			if(IsPlayerInRangeOfPoint(playerid, 3.0, 1705.0577,946.5693,1129.9878) && GetPlayerVirtualWorld(playerid) == 95680)
				return hataMesaji(playerid, "Zaten bu kattasýn.");

			SetPlayerPos(playerid, 2131.507812, 1600.818481, 1008.359375);
			SetPlayerInterior(playerid, 1);
			SetPlayerVirtualWorld(playerid, 15000);
			SetTimerEx("Asansor", 3000, false, "dd", playerid, 7);
			oyuncuData[playerid][oAsansor] = 7;
		}
		case 5: {
			if(IsPlayerInRangeOfPoint(playerid, 3.0, 1579.3479,-1677.8439,62.2155))
				return hataMesaji(playerid, "Zaten bu kattasýn.");

			SetPlayerPos(playerid, 2131.507812, 1600.818481, 1008.359375);
			SetPlayerInterior(playerid, 1);
			SetPlayerVirtualWorld(playerid, 15000);
			SetTimerEx("Asansor", 3000, false, "dd", playerid, 10);
			oyuncuData[playerid][oAsansor] = 10;
		}
		case 6: {
			if(IsPlayerInRangeOfPoint(playerid, 3.0, 2268.0557,2448.6104,3.5313))
				return hataMesaji(playerid, "Zaten bu kattasýn.");

			SetPlayerPos(playerid, 2131.507812, 1600.818481, 1008.359375);
			SetPlayerInterior(playerid, 1);
			SetPlayerVirtualWorld(playerid, 15000);
			SetTimerEx("Asansor", 3000, false, "dd", playerid, 9);
			oyuncuData[playerid][oAsansor] = 9;
		}
		case 7: {
			if(IsPlayerInRangeOfPoint(playerid, 3.0, 2268.0027,2449.0930,-7.1953))
				return hataMesaji(playerid, "Zaten bu kattasýn.");

			SetPlayerPos(playerid, 2131.507812, 1600.818481, 1008.359375);
			SetPlayerInterior(playerid, 1);
			SetPlayerVirtualWorld(playerid, 15000);
			SetTimerEx("Asansor", 3000, false, "dd", playerid, 8);
			oyuncuData[playerid][oAsansor] = 8;
		}
		case 8: {
			if(IsPlayerInRangeOfPoint(playerid, 3.0, 1570.0018,-1678.4226,25.1468))
				return hataMesaji(playerid, "Zaten bu kattasýn.");

			SetPlayerPos(playerid, 2131.507812, 1600.818481, 1008.359375);
			SetPlayerInterior(playerid, 1);
			SetPlayerVirtualWorld(playerid, 15000);
			SetTimerEx("Asansor", 3000, false, "dd", playerid, 11);
			oyuncuData[playerid][oAsansor] = 11;
		}
	}
	TogglePlayerControllable(playerid, false);
	SetTimerEx("oyuncucoz", 1000, false, "i", playerid);
}
else if(dialogid == DIALOG_USTARAMA) {
	if(!response) {
		static oyuncuid;
		oyuncuid = GetPVarInt(playerid, "ustarayan");
		if(oyuncuid == INVALID_PLAYER_ID)
			return hataMesaji(playerid, "Talep eden kiþi üst arama esnasýnda oyundan çýktýðý için iþlem iptal edildi."), SetPVarInt(playerid, "ustarayan", INVALID_PLAYER_ID);

		UyariMesaji(oyuncuid, "%s adlý kiþi üst arama talebini reddetti.", OyuncuIsim(playerid));
		UyariMesaji(playerid, "%s adlý kiþinin üst arama talebini reddettin.", OyuncuIsim(oyuncuid));
		return 1;
	}
	static oyuncuid, silahid, mermi;
	oyuncuid = GetPVarInt(playerid, "ustarayan");
	if(oyuncuid == INVALID_PLAYER_ID) return hataMesaji(playerid, "Talep eden kiþi üst arama esnasýnda oyundan çýktýðý için iþlem iptal edildi.");

	for (new i = 0; i < 13; i ++)
	{
		GetPlayerWeaponData(playerid, i, silahid, mermi);
		if(silahid > 0) {
			SCM_Ex(oyuncuid, RENK_GRI, "* %s (%d mermi)", SilahIsim(silahid), mermi);
		}
	}
	SCM_Ex(oyuncuid, RENK_GRI, "Telefon: %s", (oyuncuData[playerid][oTelefon] == 0) ? ("{B70000}Yok") : ("{33AA33}Mevcut"));
	SCM_Ex(oyuncuid, RENK_GRI, "Para: %s", NumaraFormati(oyuncuData[playerid][oPara]));

	new	subString[3000],
	item_name[24],
	baslik[80],
	itemobjesi;
	format(baslik, sizeof(baslik), "Envanter - Agirlik: ~y~%.2f/%.2f kg", oyuncuData[playerid][pEnvanterAgirlik], MAX_AGIRLIK);
	for (new i = 0; i < MAX_ITEM; i++)
	{
		if (EnvanterData[playerid][i_aktif][i]) {
			format (item_name, sizeof(item_name), "%s", ItemArray[ EnvanterData[playerid][i_tip][i] - 1 ][iisim]);
			itemobjesi = ItemArray[ EnvanterData[playerid][i_tip][i] - 1 ][iobje];
			format(subString, sizeof(subString), "%s%d\n%s(%d)\n", subString, itemobjesi, item_name, i);
		}
		else if(!EnvanterData[playerid][i_aktif][i]) {
			format(subString, sizeof(subString), "%s%d\nBos Slot(%d)\n",subString, 18631, i);
		}
	}
	ShowPlayerDialog(oyuncuid, DIALOG_USTUNUARADIM, DIALOG_STYLE_PREVMODEL, baslik, subString, "Tamam", "Iptal");
	SetPVarInt(oyuncuid, "ustarakarsi", playerid);
	static emote[128];
	format(emote, sizeof(emote), "%s'nin üstünü aramaya baþlar.", OyuncuIsim(playerid));
	cmd(oyuncuid, 1, emote);
	SetPVarInt(playerid, "ustarayan", INVALID_PLAYER_ID);
}
else if(dialogid == DIALOG_UYUSTURUCULARIM) {
	if(!response)
		return 0;

	switch(listitem) {
		case 0: {
			if(oyuncuData[playerid][oUyusturucu][2] < 2)
				return hataMesaji(playerid, "Bu türde uyuþturucunuz yok.");

			oyuncuData[playerid][oUyusturucu][2] -= 2;
			if(OyuncuCan(playerid) < 21) CanDuzenle(playerid, OyuncuCan(playerid)+80);
			SetPlayerDrunkLevel(playerid, 30000);
			SetPlayerWeather(playerid, -66);
			ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0, 1);
			SetTimerEx("EtkiSifirla", 60 * 1000, false, "i", playerid);
		}
		case 1: {
			if(oyuncuData[playerid][oUyusturucu][1] < 2)
				return hataMesaji(playerid, "Bu türde uyuþturucunuz yok.");

			oyuncuData[playerid][oUyusturucu][1] -= 2;
			if(OyuncuCan(playerid) < 51) CanDuzenle(playerid, OyuncuCan(playerid)+50);
			SetPlayerDrunkLevel(playerid, 30000);
			SetPlayerWeather(playerid, -66);
			ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0, 1);
			SetTimerEx("EtkiSifirla", 60 * 1000, false, "i", playerid);
		}
		case 2: {
			if(oyuncuData[playerid][oUyusturucu][0] < 2)
				return hataMesaji(playerid, "Bu türde uyuþturucunuz yok.");

			oyuncuData[playerid][oUyusturucu][0] -= 2;
			SetPlayerWeather(playerid, -68);
			if(OyuncuCan(playerid) < 71) CanDuzenle(playerid, OyuncuCan(playerid)+30);
			SetPlayerDrunkLevel(playerid, 30000);
			SetPlayerWeather(playerid, -46);
			ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0, 1);
			SetTimerEx("EtkiSifirla", 60 * 1000, false, "i", playerid);
		}
	}
}
else if(dialogid == DIALOG_UYUSTURUCUVER) {
	if(!response) {
		static oyuncuid;
		oyuncuid = GetPVarInt(playerid, "uoneren");
		if(oyuncuid == INVALID_PLAYER_ID || !YakinlikKontrol(playerid, oyuncuid, 3.0))
			return hataMesaji(playerid, "Girilen kiþi sana yakýn olmadýðý için iþlem iptal edildi.");

		UyariMesaji(oyuncuid, "%s adlý kiþi uyuþturucu verme talebini redetti.", OyuncuIsim(playerid));
		UyariMesaji(playerid, "%s adlý kiþinin uyuþturucu verme talebini redettin.", OyuncuIsim(oyuncuid));
		SetPVarInt(playerid, "uoneren", INVALID_PLAYER_ID);
		SetPVarInt(playerid, "umiktar", 0);
		return 1;
	}
	static oyuncuid, tur, emote[144], miktar;
	oyuncuid = GetPVarInt(playerid, "uoneren");
	if(oyuncuid == INVALID_PLAYER_ID || !YakinlikKontrol(playerid, oyuncuid, 3.0)) {
		hataMesaji(playerid, "Girilen kiþi sana yakýn olmadýðý için iþlem iptal edildi.");
		SetPVarInt(playerid, "uoneren", INVALID_PLAYER_ID);
		SetPVarInt(playerid, "umiktar", 0);
		SetPVarInt(playerid, "utur", -1);
		return 1;
	}
	tur = GetPVarInt(playerid, "utur");
	miktar = GetPVarInt(playerid, "umiktar");
	if(tur != -1) {
		oyuncuData[oyuncuid][oUyusturucu][tur] -= miktar;
		oyuncuData[playerid][oUyusturucu][tur] += miktar;
		OyuncuKaydet(playerid);
		OyuncuKaydet(oyuncuid);
		format(emote, sizeof(emote), "%s adlý kiþiye %s miktarýnda %s kalite uyuþturucu verdi.", OyuncuIsim(playerid), NumaraFormati(miktar, ""), uturadi(tur));
		cmd(playerid, 1, emote);
		SetPVarInt(playerid, "uoneren", INVALID_PLAYER_ID);
		SetPVarInt(playerid, "umiktar", 0);
		SetPVarInt(playerid, "utur", -1);
	}
}
else if(dialogid == DIALOG_BIRLIKISLEM) {
	if(!response)
		return 0;

	if(listitem == 0) {
		if(oyuncuData[playerid][oBirlik] != -1)
			return hataMesaji(playerid, "Birliðin varken bu seçeneði kullanamazsýn.");

		    /*if(oyuncuData[playerid][oSeviye] < BIRLIK_LEVEL || oyuncuData[playerid][oPara] < BIRLIK_UCRET) {
			    hataMesaji(playerid, "Birlik kurmak için %d level olman ve %s miktarýnda paran olmasý gerekiyor.", BIRLIK_LEVEL, NumaraFormati(BIRLIK_UCRET));
			    return 1;
			}*/
			    DialogGoster(playerid, DIALOG_BIRLIKKUR, DIALOG_STYLE_INPUT, "> Birlik Kur", "Kurmak istediðin birlik ismini girin", "Tamam", "Ýptal");
			}
			if(listitem == 1) {
				if(!response)
					return 0;

				if(oyuncuData[playerid][oBirlik] == -1)
					return hataMesaji(playerid, "Birliðin yokken bu seçeneði kullanamazsýn.");

				if(OyuncuBirlikTuru(playerid) != BIRLIK_ONAYSIZ && OyuncuBirlikTuru(playerid) != BIRLIK_ONAYLI)
					return hataMesaji(playerid, "Birlik türün bu seçeneði desteklemiyor.");

				if(BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikMaksRutbe] - 1 > oyuncuData[playerid][oBirlikRutbe])
					return hataMesaji(playerid, "Bu seçeneði kullanmak için birlik lideri olman gerekiyor.");

				if(BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikLevel] < 1 || BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikLevel] > 5)
					return hataMesaji(playerid, "Birliðin bu levelden yukarýya taþýnamaz.");

				if(oyuncuData[playerid][oPara] < BirlikLevelUcret(oyuncuData[playerid][oBirlik]))
					return hataMesaji(playerid, "Yükseltim için gerekli ücreti karþýlayamýyorsun.");

				switch(BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikLevel])
				{
					case 1:
					{
						new ucret = BirlikLevelUcret(oyuncuData[playerid][oBirlik]);
						if(oyuncuData[playerid][oLiderlikYetenek] < 1) return hataMesaji(playerid, "Seviye yükseltilemedi. Yeterli liderlik yeteneðine sahip deðilsiniz.(1)");
						SunucuMesaji(playerid, "Birliðini yükseltmek için %s miktarýnda para ödedin.", NumaraFormati(BirlikLevelUcret(oyuncuData[playerid][oBirlik])));
						ParaEkle(playerid, -ucret);
						BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikLevel]++;
					}
					case 2:
					{
						new ucret = BirlikLevelUcret(oyuncuData[playerid][oBirlik]);
						if(oyuncuData[playerid][oLiderlikYetenek] < 3) return hataMesaji(playerid, "Seviye yükseltilemedi. Yeterli liderlik yeteneðine sahip deðilsiniz.(3)");
						SunucuMesaji(playerid, "Birliðini yükseltmek için %s miktarýnda para ödedin.", NumaraFormati(BirlikLevelUcret(oyuncuData[playerid][oBirlik])));
						ParaEkle(playerid, -ucret);
						BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikLevel]++;
					}
					case 3:
					{
						new ucret = BirlikLevelUcret(oyuncuData[playerid][oBirlik]);
						if(oyuncuData[playerid][oLiderlikYetenek] < 5) return hataMesaji(playerid, "Seviye yükseltilemedi. Yeterli liderlik yeteneðine sahip deðilsiniz.(5)");
						SunucuMesaji(playerid, "Birliðini yükseltmek için %s miktarýnda para ödedin.", NumaraFormati(BirlikLevelUcret(oyuncuData[playerid][oBirlik])));
						ParaEkle(playerid, -ucret);
						BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikLevel]++;
					}
					case 4:
					{
						new ucret = BirlikLevelUcret(oyuncuData[playerid][oBirlik]);
						if(oyuncuData[playerid][oLiderlikYetenek] < 7) return hataMesaji(playerid, "Seviye yükseltilemedi. Yeterli liderlik yeteneðine sahip deðilsiniz.(7)");
						SunucuMesaji(playerid, "Birliðini yükseltmek için %s miktarýnda para ödedin.", NumaraFormati(BirlikLevelUcret(oyuncuData[playerid][oBirlik])));
						ParaEkle(playerid, -ucret);
						BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikLevel]++;
					}
					case 5:
					{
						new ucret = BirlikLevelUcret(oyuncuData[playerid][oBirlik]);
						if(oyuncuData[playerid][oLiderlikYetenek] < 10) return hataMesaji(playerid, "Seviye yükseltilemedi. Yeterli liderlik yeteneðine sahip deðilsiniz.(10)");
						SunucuMesaji(playerid, "Birliðini yükseltmek için %s miktarýnda para ödedin.", NumaraFormati(BirlikLevelUcret(oyuncuData[playerid][oBirlik])));
						ParaEkle(playerid, -ucret);
						BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikLevel]++;
					}
				}
				Birlik_Kaydet(oyuncuData[playerid][oBirlik]);
			}
		}
		else if(dialogid == DIALOG_BIRLIKKUR) {
			if(!response)
				return 0;

			if(isnull(inputtext))
				return DialogGoster(playerid, DIALOG_BIRLIKKUR, DIALOG_STYLE_INPUT, "> Birlik Kur", "Kurmak istediðin birlik ismini girin", "Tamam", "Ýptal");

			if(strlen(inputtext) < 4 || strlen(inputtext) > 24)
				return DialogGoster(playerid, DIALOG_BIRLIKKUR, DIALOG_STYLE_INPUT, "> Birlik Kur", "{B70000}HATA: {FFFFFF}Birlik ismi en az 4, en fazla 24 karakterden oluþabilir.\nKurmak istediðin birlik ismini girin", "Tamam", "Ýptal");
			new query[180], Cache:VeriCek, rows;
			mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `birlikler` WHERE `birlikAd` = '%e'", inputtext);
			VeriCek = mysql_query(g_SQL, query);
			cache_get_row_count(rows);
			if(rows) return DialogGoster(playerid, DIALOG_BIRLIKKUR, DIALOG_STYLE_INPUT, "> Birlik Kur", "{B70000}HATA: {FFFFFF}Birlik ismi kullanýlýyor.\nKurmak istediðin birlik ismini girin", "Tamam", "Ýptal"), cache_delete(VeriCek);
			cache_delete(VeriCek);

			//ParaEkle(playerid, -BIRLIK_UCRET);
			SetPVarString(playerid, "BirlikKur_Isim", inputtext);
			ShowPlayerDialog(playerid, DIALOG_BIRLIK_KISALTMA, DIALOG_STYLE_INPUT, "> Birlik Kýsaltmasý", "Birliðinize maksimum 7 karakterli bir kýsaltma belirleyin:", "Devam", "Ýptal");
		}
		if(dialogid == DIALOG_BIRLIK_KISALTMA)
		{
			if(!response) return 0;
			if(isnull(inputtext)) return ShowPlayerDialog(playerid, DIALOG_BIRLIK_KISALTMA, DIALOG_STYLE_INPUT, "> Birlik Kýsaltmasý", "HATA: Boþ býraktýnýz!\nBirliðinize maksimum 9 karakterli bir kýsaltma belirleyin:", "Devam", "Ýptal");
			if(strlen(inputtext) > 7) return ShowPlayerDialog(playerid, DIALOG_BIRLIK_KISALTMA, DIALOG_STYLE_INPUT, "> Birlik Kýsaltmasý", "HATA: 7 karakteri aþtýnýz!\nBirliðinize maksimum 9 karakterli bir kýsaltma belirleyin:", "Devam", "Ýptal");
			SetPVarString(playerid, "BirlikKur_Kisaltma", inputtext);
			new string[256];
			strcat(string, "{9CB117}Kuruluþ Amacý\t{9CB117}Gereken Para\t{9CB117}Gereken Level\n");
			for(new i ; i < sizeof(BirlikAmaclari); i++)
			{
				format(string, sizeof(string), "%s %s\t%s\t%d\n", string, BirlikAmaclari[i][amac_Tur], NumaraFormati(BirlikAmaclari[i][amac_Fiyat]), BirlikAmaclari[i][amac_Level]);
			}
			ShowPlayerDialog(playerid, DIALOG_BIRLIK_AMAC, DIALOG_STYLE_TABLIST_HEADERS, "{FFCDCD}Kuruluþ amacý belirleyiniz:", string, "Belirle", "Iptal");
		}
		if(dialogid == DIALOG_BIRLIK_AMAC)
		{
			if(!response) return 0;
			if(listitem == 0) return 0;
			if(oyuncuData[playerid][oSeviye] < BirlikAmaclari[listitem][amac_Level]) return hataMesaji(playerid, "Üzgünüm. %s amaçlý birliði kurabilmek için seviyeniz yeterli deðil. (Gereken seviye: %d)", BirlikAmaclari[listitem][amac_Tur], BirlikAmaclari[listitem][amac_Level]);
			if(oyuncuData[playerid][oPara] < BirlikAmaclari[listitem][amac_Fiyat]) return hataMesaji(playerid, "Üzgünüm. %s amaçlý birliði kurabilmek için paranýz yeterli deðil. (Gereken para: %s)", BirlikAmaclari[listitem][amac_Tur], NumaraFormati(BirlikAmaclari[listitem][amac_Fiyat]));
			new isim[35], kisaltma[9];
			GetPVarString(playerid, "BirlikKur_Isim", isim, sizeof(isim));
			GetPVarString(playerid, "BirlikKur_Kisaltma", kisaltma, sizeof(kisaltma));
			new bid = Iter_Free(Birlikler);
			Birlik_Yarat(isim, listitem, kisaltma, playerid);
			SunucuMesaji(playerid, "Birliðin kuruldu. (BID: %d | Ýsim: %s | Kýsaltma: %s | Amaç: %s)", bid, BirlikBilgi[bid][birlikAd], BirlikBilgi[bid][birlikkisaltma], BirlikAmaclari[listitem][amac_Tur]);
			ParaEkle(playerid, -BirlikAmaclari[listitem][amac_Fiyat]);
			BirlikAyarla(playerid, bid);
			OyuncuKaydet(playerid);
		}
			if(dialogid == DIALOG_EVANAHTAR)
			{
				if(!response) {
					if(GetPVarInt(playerid, "evanahtaroneren") != INVALID_PLAYER_ID) {
						SunucuMesaji(GetPVarInt(playerid, "evanahtaroneren"), "%s adlý kiþi ev anahtarý verme talebini reddetti.", OyuncuIsim(playerid));
						SunucuMesaji(playerid, "%s adlý kiþinin ev anahtarý verme talebini reddettin.", OyuncuIsim(GetPVarInt(playerid, "evanahtaroneren")));
					}
					SetPVarInt(playerid, "evanahtaroneren", INVALID_PLAYER_ID);
				}
				else if(response) {
					if(GetPVarInt(playerid, "evanahtaroneren") == INVALID_PLAYER_ID) return hataMesaji(playerid, "Ev anahtarý talebini gönderen kiþi oyundan çýkmýþ.");
					if(!YakinlikKontrol(playerid, GetPVarInt(playerid, "evanahtaroneren"), 5.0)) return hataMesaji(playerid, "Ev anahtarý talebi gönderen kiþiye yakýn deðilsin."), SetPVarInt(playerid, "evanahtaroneren", INVALID_PLAYER_ID);
					static id;
					id = GetPVarInt(playerid, "evanahtarid");
					if(id != -1) {
						if(EvBilgi[id][evAnahtar] == 0) {
							EvBilgi[id][evAnahtar] = oyuncuData[playerid][oID];
							Ev_Kaydet(id);
							SunucuMesaji(playerid, "%s adlý kiþinin ev anahtarý verme talebini kabul ettin.", OyuncuIsim(GetPVarInt(playerid, "evanahtaroneren")));
							SunucuMesaji(GetPVarInt(playerid, "evanahtaroneren"), "%s adlý kiþi ev anahtarý verme talebini kabul etti.", OyuncuIsim(playerid));
						}
						else {
							hataMesaji(playerid, "%s adlý kiþinin önerdiði ev anahtarý talebinde bir hata oluþtu.", OyuncuIsim(GetPVarInt(playerid, "evanahtaroneren")));
							hataMesaji(GetPVarInt(playerid, "evanahtaroneren"), "%s adlý kiþiye önerdiðin ev anahtarý talebinde bir hata oluþtu.", OyuncuIsim(playerid));
						}
					}
					SetPVarInt(playerid, "evanahtaroneren", INVALID_PLAYER_ID);
					SetPVarInt(playerid, "evanahtarid", -1);
				}
			}
			else if(dialogid == DIALOG_GOVKASA) {
				if(!response) return false;

				switch(listitem) {
					case 0: DialogGoster(playerid, DIALOG_GOVPARACEK, DIALOG_STYLE_INPUT, "> Government - Kasa", "Lütfen kasadan çekmek istediðin miktarý girin;", "Çek", "Kapat");
					case 1: DialogGoster(playerid, DIALOG_GOVPARAYATIR, DIALOG_STYLE_INPUT, "> Government - Kasa", "Lütfen kasaya yatýrmak istediðin miktarý girin;", "Çek", "Kapat");
				}
			}
			else if(dialogid == DIALOG_GOVPARACEK) {
				if(!response) return false;
				static miktar;
				if(sscanf(inputtext, "d", miktar)) return DialogGoster(playerid, DIALOG_GOVPARACEK, DIALOG_STYLE_INPUT, "> Government - Kasa", "Lütfen kasadan çekmek istediðin miktarý girin;", "Çek", "Kapat");
				if(miktar < 1) return DialogGoster(playerid, DIALOG_GOVPARACEK, DIALOG_STYLE_INPUT, "> Government - Kasa", "{B70000}HATA: {FFFFFF}Geçersiz miktar.\nLütfen kasadan çekmek istediðin miktarý girin;", "Çek", "Kapat");
				static kasapara;
				kasapara = 0;
				if(dini_Exists(SUNUCU_DOSYA)) kasapara = dini_Int(SUNUCU_DOSYA, "GOVKASA");
				else {
					dini_Create(SUNUCU_DOSYA);
					dini_IntSet(SUNUCU_DOSYA, "GOVKASA", 0);
					kasapara = dini_Int(SUNUCU_DOSYA, "GOVKASA");
				}
				if(miktar > kasapara) return DialogGoster(playerid, DIALOG_GOVPARACEK, DIALOG_STYLE_INPUT, "> Government - Kasa", "{B70000}HATA: {FFFFFF}Kasada bu kadar para yok!\nLütfen kasadan çekmek istediðin miktarý girin;", "Çek", "Kapat");

				ParaEkle(playerid, miktar);
				dini_IntSet(SUNUCU_DOSYA, "GOVKASA", dini_Int(SUNUCU_DOSYA, "GOVKASA") - miktar);
				Log_Kaydet("loglar/kasa_log.txt", "[%s] %s adlý devlet yetkilisi kasadan %s miktarýnda para çekti.", Tarih(), OyuncuIsim(playerid), NumaraFormati(miktar));
			}
			else if(dialogid == DIALOG_GOVPARAYATIR) {
				if(!response) return false;
				static miktar;
				if(sscanf(inputtext, "d", miktar)) return DialogGoster(playerid, DIALOG_GOVPARAYATIR, DIALOG_STYLE_INPUT, "> Government - Kasa", "Lütfen kasaya yatýrmak istediðin miktarý girin;", "Yatýr", "Kapat");
				if(miktar < 1) return DialogGoster(playerid, DIALOG_GOVPARAYATIR, DIALOG_STYLE_INPUT, "> Government - Kasa", "{B70000}HATA: {FFFFFF}Geçersiz miktar.\nLütfen kasaya yatýrmak istediðin miktarý girin;", "Yatýr", "Kapat");
				if(oyuncuData[playerid][oPara] < miktar) return DialogGoster(playerid, DIALOG_GOVPARAYATIR, DIALOG_STYLE_INPUT, "> Government - Kasa", "{B70000}HATA: {FFFFFF}Üzerinde bu kadar para yok!\nLütfen kasaya yatýrmak istediðin miktarý girin;", "Yatýr", "Kapat");

				ParaEkle(playerid, -miktar);
				dini_IntSet(SUNUCU_DOSYA, "GOVKASA", dini_Int(SUNUCU_DOSYA, "GOVKASA") + miktar);
				Log_Kaydet("loglar/kasa_log.txt", "[%s] %s adlý devlet yetkilisi kasaya %s miktarýnda para yatýrdý.", Tarih(), OyuncuIsim(playerid), NumaraFormati(miktar));
			}
			else if(dialogid == DIALOG_MDC) {
				if(!response) return false;
				if(listitem == 0) ArananlarListesi(playerid);
				else if(listitem == 1) return DialogGoster(playerid, DIALOG_MDC_SUC, DIALOG_STYLE_INPUT, "> PDPC - Suç Ekle", "Lütfen suç eklenecek kiþinin ismini veya ID'sini girin;", "Sorgula", "Kapat");
				else if(listitem == 2) return DialogGoster(playerid, DIALOG_MDC_KISIARA, DIALOG_STYLE_INPUT, "> PDPC - Kiþi Sorgula","Lütfen aramak istediðiniz kiþinin adýný girin;", "Sorgula", "Kapat");
				else if(listitem == 3) return DialogGoster(playerid, DIALOG_MDC_VATANDASLIK, DIALOG_STYLE_INPUT, "> PDPC - Vatandaþlýk Numarasý Sorgulama", "Lütfen bilgi edinmek istediðin vatandaþlýk numarasýný girin;", "Sorgula", "Kapat");
				else if(listitem == 4) return DialogGoster(playerid, DIALOG_MDC_TELEFON, DIALOG_STYLE_INPUT, "> PDPC - Telefon Numarasý Sorgulama", "Sorgulamak istediðiniz numarayý girin;", "Sorgula", "Kapat");
				else if(listitem == 5) return DialogGoster(playerid, DIALOG_MDC_CEZA, DIALOG_STYLE_INPUT, "> PDPC - Ceza Geçmiþi Sorgulama", "Lütfen aramak istediðiniz kiþinin adýný girin;", "Sorgula", "Kapat");
			}
			else if(dialogid == DIALOG_MDC_CEZA) {
				if(!response) return false;
				if(isnull(inputtext)) return DialogGoster(playerid, DIALOG_MDC_CEZA, DIALOG_STYLE_INPUT, "> PDPC - Ceza Geçmiþi Sorgulama", "Lütfen aramak istediðiniz kiþinin adýný girin;", "Sorgula", "Kapat");

				for (new i = 0, len = strlen(inputtext); i < len; i ++) {
					if(inputtext[i] == '_') inputtext[i] = ' ';
				}
				CezaGoster(playerid, inputtext);
			}
			else if(dialogid == DIALOG_MDC_KISIARA) {
				if(!response) return false;
				if(isnull(inputtext)) return DialogGoster(playerid, DIALOG_MDC_KISIARA, DIALOG_STYLE_INPUT, "> PDPC - Kiþi Sorgula","Lütfen aramak istediðiniz kiþinin adýný girin;", "Sorgula", "Kapat");

				new sorgu[144];
				mysql_format(g_SQL, sorgu, sizeof(sorgu), "SELECT * FROM `oyuncular` WHERE `isim` = '%e'", inputtext);
				mysql_tquery(g_SQL, sorgu, "KisiSorgula", "sdd", inputtext, playerid, 0);
			}
			else if(dialogid == DIALOG_ARANMAKAYITLARI) {
				if(response) {
					new sorgu[144];
					mysql_format(g_SQL, sorgu, sizeof(sorgu), "SELECT * FROM `suckayitlari` WHERE `isim` = '%e'", inputtext);
					mysql_tquery(g_SQL, sorgu, "AranmaSorgula", "sd", inputtext, playerid);
				}
				//else if(!response) cmd(playerid, 0, "pdpc");
				return true;
			}
			else if(dialogid == DIALOG_MDC_KISISORGULA2) {
				if(!response) return false;

				//cmd(playerid, 0, "pdpc");
			}
			else if(dialogid == DIALOG_SUCKONTROL) {
				if(!response) return false;
				new query[128], Cache:VeriGetir;
				printf("Suç:  %d", MDC_SucluSQL[playerid][listitem]);
				mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `suckayitlari` WHERE `id` = '%d'", MDC_SucluSQL[playerid][listitem]);
				VeriGetir = mysql_query(g_SQL, query);
				if(cache_num_rows())
				{
					printf("Suçlu: %s", vericek_varchar(0, "isim"));
					BirlikMesajiEx(BIRLIK_POLIS, RENK_TELSIZ, "HQ: %s adlý memur %s kiþisinin %s adlý suç kaydýný sildi.", OyuncuIsim(playerid), vericek_varchar(0, "isim"), vericek_varchar(0, "suc"));
				}
				cache_delete(VeriGetir);

				mysql_format(g_SQL, query, sizeof(query), "DELETE FROM `suckayitlari` WHERE `id` = '%d'", MDC_SucluSQL[playerid][listitem]);
				mysql_query(g_SQL, query);
				BilgiText(playerid, "~g~~h~Kayit basariyla silindi");
				ArananlarListesi(playerid);
			}
			else if(dialogid == DIALOG_MDC_SUC) {
				if(!response) return false;
				static oyuncuid;
				if(sscanf(inputtext, "u", oyuncuid))
					return DialogGoster(playerid, DIALOG_MDC_SUC, DIALOG_STYLE_INPUT, "> PDPC - Suç Ekle", "Lütfen suç eklenecek kiþinin ismini veya ID'sini girin;", "Tamam", "Kapat");

				if(!IsPlayerConnected(oyuncuid))
					return DialogGoster(playerid, DIALOG_MDC_SUC, DIALOG_STYLE_INPUT, "> PDPC - Suç Ekle", "{B70000}HATA: {FFFFFF}Girilen oyuncu geçersiz.\nLütfen suç eklenecek kiþinin ismini veya ID'sini girin;", "Tamam", "Kapat");

				if(playerid == oyuncuid)
					return DialogGoster(playerid, DIALOG_MDC_SUC, DIALOG_STYLE_INPUT, "> PDPC - Suç Ekle", "{B70000}HATA: {FFFFFF}Kendine suç ekleyemezsin.\nLütfen suç eklenecek kiþinin ismini veya ID'sini girin;", "Tamam", "Kapat");

				if(OyuncuBirlikTuru(oyuncuid) == BIRLIK_POLIS)
					return DialogGoster(playerid, DIALOG_MDC_SUC, DIALOG_STYLE_INPUT, "> PDPC - Suç Ekle", "{B70000}HATA: {FFFFFF}Bir polis memuruna suç ekleyemezsin.\nLütfen suç eklenecek kiþinin ismini veya ID'sini girin;", "Tamam", "Kapat");

				if(oyuncuData[oyuncuid][oGiris] == false)
					return DialogGoster(playerid, DIALOG_MDC_SUC, DIALOG_STYLE_INPUT, "> PDPC - Suç Ekle", "{B70000}HATA: {FFFFFF}Oyuncu giriþ yapmamýþ.\nLütfen suç eklenecek kiþinin ismini veya ID'sini girin;", "Tamam", "Kapat");

				if(oyuncuData[oyuncuid][oHapisSure][0] != 0 || oyuncuData[oyuncuid][oHapisSure][1] != 0)
					return DialogGoster(playerid, DIALOG_MDC_SUC, DIALOG_STYLE_INPUT, "> PDPC - Suç Ekle", "{B70000}HATA: {FFFFFF}Girilen oyuncu hapiste, suç eklenemez.\nLütfen suç eklenecek kiþinin ismini veya ID'sini girin;", "Tamam", "Kapat");

				DialogGoster(playerid, DIALOG_MDC_SUCEKLE, DIALOG_STYLE_INPUT, "> PDPC - Suç Ekle", "Lütfen kiþinin suçunu girin;", "Tamam", "Kapat");
				return SetPVarInt(playerid, "mdcsucekle", oyuncuid);
			}
			else if(dialogid == DIALOG_MDC_SUCEKLE) {
				if(!response) return false;
				if(strlen(inputtext) < 3)
					return DialogGoster(playerid, DIALOG_MDC_SUCEKLE, DIALOG_STYLE_INPUT, "> PDPC - Suç Ekle", "Lütfen kiþinin suçunu girin;", "Tamam", "Kapat");

				static oyuncuid;
				oyuncuid = GetPVarInt(playerid, "mdcsucekle");
				if(!IsPlayerConnected(oyuncuid))
					return hataMesaji(playerid, "Veritabanýnda bir hata oluþtu."), DeletePVar(playerid, "mdcsucekle");

				static query[768];
				mysql_format(g_SQL, query, sizeof(query),"INSERT INTO `suckayitlari` (`isim`, `suc`, `tarih`, `ekleyen`) VALUES ('%e', '%e', '%s', '%e')", OyuncuIsim(oyuncuid), inputtext, Tarih(), OyuncuIsim(playerid));
				mysql_query(g_SQL, query);
				DeletePVar(playerid, "mdcsucekle");
				return SunucuMesaji(playerid, "%s adlý kiþiye %s sebebiyle aranma kaydý oluþturdun.", OyuncuIsim(oyuncuid), inputtext);
			}
			else if(dialogid == DIALOG_MDC_VATANDASLIK) {
				if(!response) return false;
				static vno;
				if(sscanf(inputtext, "d", vno))
					return DialogGoster(playerid, DIALOG_MDC_VATANDASLIK, DIALOG_STYLE_INPUT, "> PDPC - Vatandaþlýk Numarasý Sorgulama", "Lütfen bilgi edinmek istediðin vatandaþlýk numarasýný girin;", "Tamam", "Kapat");

				new sorgu[144], test[144];
				valstr(test, vno);
				mysql_format(g_SQL, sorgu, sizeof(sorgu), "SELECT * FROM `oyuncular` WHERE `VatandaslikNo` = '%d'", vno);
				mysql_tquery(g_SQL, sorgu, "KisiSorgula", "sdd", test, playerid, 1);
			}
			else if(dialogid == DIALOG_MDC_TELEFON) {
				if(!response) return false;
				static telefonnumarasi;
				if(sscanf(inputtext, "d", telefonnumarasi))
					return DialogGoster(playerid, DIALOG_MDC_TELEFON, DIALOG_STYLE_INPUT, "> PDPC - Telefon Numarasý Sorgulama", "Sorgulamak istediðiniz numarayý girin;", "Tamam", "Kapat");

				new sorgu[144], test[144];
				valstr(test, telefonnumarasi);
				mysql_format(g_SQL, sorgu, sizeof(sorgu), "SELECT * FROM `oyuncular` WHERE `TelefonNumarasi` = '%d'", telefonnumarasi);
				mysql_tquery(g_SQL, sorgu, "KisiSorgula", "sdd", test, playerid, 2);
			}
			else if(dialogid == DIALOG_GALERI) {
				if(!response) return false;

				static bilgi[144];
				SetPVarInt(playerid, "galerimodel", SatilikAraclar[listitem][0]);
				SetPVarInt(playerid, "galerifiyat", SatilikAraclar[listitem][1]);
				format(bilgi, sizeof(bilgi), "%s model aracý %s fiyatýna alacaksýn, onaylýyor musunuz?", AracModel(SatilikAraclar[listitem][0]), NumaraFormati(SatilikAraclar[listitem][1]));
				return DialogGoster(playerid, DIALOG_GALERI_SATINAL, DIALOG_STYLE_MSGBOX, "> Onayla", bilgi, "Onayla", "Kapat");
			}
			else if(dialogid == DIALOG_GALERI_SATINAL) {
				if(!response) { DeletePVar(playerid, "galerimodel"), DeletePVar(playerid, "galerifiyat"); return false; }
				if(oyuncuData[playerid][oPara] < GetPVarInt(playerid, "galerifiyat")) {
					hataMesaji(playerid, "Gerekli araç ücretini (%s) karþýlayamýyorsun.", NumaraFormati(GetPVarInt(playerid, "galerifiyat")));
					return DeletePVar(playerid, "galerimodel"), DeletePVar(playerid, "galerifiyat");
				}
				new id = Iter_Free(Araclar);
				if(id < 0) return hataMesaji(playerid, "Üzgünüm, sunucunun araç slotlarý þu an dolu. Lütfen daha sonra tekrar dene.");
				Arac_Yarat(oyuncuData[playerid][oID], GetPVarInt(playerid, "galerimodel"), 529.2513, -1286.3036, 17.2422, 270.0, random(255), random(255), GetPVarInt(playerid, "galerifiyat"));
				ParaEkle(playerid, -GetPVarInt(playerid, "galerifiyat"));
				SunucuMesaji(playerid, "%s model aracý %s fiyatýna satýn aldýn, aracýn dýþarýdaki park alanýnda.", AracModel(GetPVarInt(playerid, "galerimodel")), NumaraFormati(GetPVarInt(playerid, "galerifiyat")));
				return DeletePVar(playerid, "galerimodel"), DeletePVar(playerid, "galerifiyat");
			}
			else if(dialogid == DIALOG_ORTAK_AYRIL) {
				if(!response) return false;

				new id = Isyeri_Yakin(playerid);
				if(IsyeriBilgi[id][isyeriOrtak] != oyuncuData[playerid][oID]) return hataMesaji(playerid, "Bir hata oluþtu, lütfen tekrar dene.");
				IsyeriBilgi[id][isyeriOrtak] = 0;
				IsyeriBilgi[id][isyeriOrtakIsim][0] = 0;
				Isyeri_Yenile(id);
				Isyeri_Kaydet(id);
				SunucuMesaji(playerid, "Ortaklýktan kendi isteðinle ayrýldýn.");
				return 1;
			}
			else if(dialogid == DIALOG_KIRACI_AYRIL) {
				if(!response) return false;

				new id = Ev_Yakin(playerid);
				if(EvBilgi[id][evKiraci] != oyuncuData[playerid][oID]) return hataMesaji(playerid, "Bir hata oluþtu, lütfen tekrar dene.");
				EvBilgi[id][evKiraci] = 0;
				EvBilgi[id][evKiraciIsim][0] = 0;
				Ev_Kaydet(id);
				Ev_Yenile(id);
				SunucuMesaji(playerid, "Kiracýlýktan kendi isteðinle ayrýldýn.");
				return 1;
			}
			else if(dialogid == DIALOG_DILSEC) {
				if(!response) return false;

				oyuncuData[playerid][oEkstraDil] = listitem;
				OyuncuKaydet(playerid);
				SunucuMesaji(playerid, "Ýkincil dilini %s olarak seçtin.", inputtext);
			}
			else if(dialogid == DIALOG_ORTAK_CIKAR) {
				if(!response) return false;

				new id = Isyeri_Yakin(playerid);
				if(id == -1) id = Oyuncu_Isyerinde(playerid);
				if(IsyeriBilgi[id][isyeriSahip] != oyuncuData[playerid][oID]) return hataMesaji(playerid, "Bir hata oluþtu, lütfen tekrar dene.");
				IsyeriBilgi[id][isyeriOrtak] = 0;
				IsyeriBilgi[id][isyeriOrtakIsim][0] = 0;
				Isyeri_Yenile(id);
				Isyeri_Kaydet(id);
				return SunucuMesaji(playerid, "Ýþyeri ortaðýný kendi isteðinle çýkarttýn.");
			}
			else if(dialogid == DIALOG_CEZALAR) {
				if(!response) return 0;
				if(!strcmp(inputtext, "Kiþisel", true)) CezaArat1(playerid, OyuncuIsim(playerid, 1));
				if(!strcmp(inputtext, "Araç", true)) AracSorgu(playerid);
			}
			else if(dialogid == DIALOG_CEZA_KISISEL) {
				if(!response) return false;

				CezaOde(playerid, inputtext, 0);
			}
			else if(dialogid == DIALOG_CEZA_KISISEL_ODE) {
				if(!response) return false;

				CezaOde(playerid, cezaodemesebep[playerid], 1);
			}
			else if(dialogid == DIALOG_CEZA_ARAC) {
				if(!response) return false;
				new id = strval(inputtext);
				AracCezaOde(playerid, id, 0);
			}
			else if(dialogid == DIALOG_CEZA_ARAC_ODE) {
				if(!response) return false;
				new id = GetPVarInt(playerid, "PVar_CezaID");
				AracCezaOde(playerid, id, 1);
			}
			else if(dialogid == DIALOG_ELKOY) {
				printf(inputtext);
				if(!response) return false;
				if(ElKoy[playerid] == -1 || !IsPlayerConnected(ElKoy[playerid])) return hataMesaji(playerid, "Ýþlem yapýlan oyuncu oyunda olmadýðý için iþleminiz gerçekleþtirilemiyor.");
				new oyuncuid = ElKoy[playerid], emote[144];
				ElKoy[playerid] = -1;

				if(!strcmp(inputtext, "Ehliyet", true)) {
					if(!IsPlayerConnected(oyuncuid)) return hataMesaji(playerid, "Bir sorun oluþtu, tekrar deneyin.");
					if(oyuncuData[oyuncuid][oEhliyet] == false) return hataMesaji(playerid, "Oyuncunun zaten ehliyeti yok, el koyamazsýn.");

					oyuncuData[oyuncuid][oEhliyet] = false;
					format(emote, sizeof(emote), "%s adlý kiþinin ehliyetine el koydu.", OyuncuIsim(oyuncuid));
					cmd(playerid, 1, emote);
				}
				else if(!strcmp(inputtext, "Ruhsat", true)) {
					if(!IsPlayerConnected(oyuncuid)) return hataMesaji(playerid, "Bir sorun oluþtu, tekrar deneyin.");
					if(oyuncuData[oyuncuid][oRuhsat] == 0) return hataMesaji(playerid, "Oyuncunun zaten ruhsatý yok, el koyamazsýn.");

					oyuncuData[oyuncuid][oRuhsat] = 0;
					format(emote, sizeof(emote), "%s adlý kiþinin silah ruhsatýna el koydu.", OyuncuIsim(oyuncuid));
					cmd(playerid, 1, emote);
				}
				else if(!strcmp(inputtext, "Sopa", true)) {
					if(!IsPlayerConnected(oyuncuid)) return hataMesaji(playerid, "Bir sorun oluþtu, tekrar deneyin.");

					SilahSil(oyuncuid, WEAPON_BAT);
					format(emote, sizeof(emote), "%s adlý kiþinin sopasýna el koydu.", OyuncuIsim(oyuncuid));
					cmd(playerid, 1, emote);
				}
				else if(!strcmp(inputtext, "Silahlar", true)) {
					if(!IsPlayerConnected(oyuncuid)) return hataMesaji(playerid, "Bir sorun oluþtu, tekrar deneyin.");

					SilahlariSifirla(oyuncuid);
					format(emote, sizeof(emote), "%s adlý kiþinin silahlarýna el koydu.", OyuncuIsim(oyuncuid));
					cmd(playerid, 1, emote);
				}
				else if(!strcmp(inputtext, "Yüksek Kalite Uyuþturucu", true)) {
					if(!IsPlayerConnected(oyuncuid)) return hataMesaji(playerid, "Bir sorun oluþtu, tekrar deneyin.");
					if(oyuncuData[oyuncuid][oUyusturucu][2] == 0) return hataMesaji(playerid, "Oyuncunun üzerinde yüksek kalite uyuþturucu bulunmuyor.");

					oyuncuData[oyuncuid][oUyusturucu][2] = 0;
					format(emote, sizeof(emote), "%s adlý kiþinin yüksek kaliteli uyuþturucularýna el koydu.", OyuncuIsim(oyuncuid));
					cmd(playerid, 1, emote);
				}
				else if(!strcmp(inputtext, "Orta Kalite Uyuþturucu", true)) {
					if(!IsPlayerConnected(oyuncuid)) return hataMesaji(playerid, "Bir sorun oluþtu, tekrar deneyin.");
					if(oyuncuData[oyuncuid][oUyusturucu][1] == 0) return hataMesaji(playerid, "Oyuncunun üzerinde orta kalite uyuþturucu bulunmuyor.");

					oyuncuData[oyuncuid][oUyusturucu][1] = 0;
					format(emote, sizeof(emote), "%s adlý kiþinin orta kaliteli uyuþturucularýna el koydu.", OyuncuIsim(oyuncuid));
					cmd(playerid, 1, emote);
				}
				else if(!strcmp(inputtext, "Düþük Kalite Uyuþturucu", true)) {
					if(!IsPlayerConnected(oyuncuid)) return hataMesaji(playerid, "Bir sorun oluþtu, tekrar deneyin.");
					if(oyuncuData[oyuncuid][oUyusturucu][0] == 0) return hataMesaji(playerid, "Oyuncunun üzerinde düþük kalite uyuþturucu bulunmuyor.");

					oyuncuData[oyuncuid][oUyusturucu][0] = 0;
					format(emote, sizeof(emote), "%s adlý kiþinin düþük kaliteli uyuþturucularýna el koydu.", OyuncuIsim(oyuncuid));
					cmd(playerid, 1, emote);
				}
				else if(!strcmp(inputtext, "Tohum", true)) {
					if(!IsPlayerConnected(oyuncuid)) return hataMesaji(playerid, "Bir sorun oluþtu, tekrar deneyin.");
					if(oyuncuData[oyuncuid][oTohum] == 0) return hataMesaji(playerid, "Oyuncunun üzerinde uyuþturucu tohumu bulunmuyor.");

					oyuncuData[oyuncuid][oTohum] = 0;
					format(emote, sizeof(emote), "%s adlý kiþinin tohumlarýýna el koydu.", OyuncuIsim(oyuncuid));
					cmd(playerid, 1, emote);
				}
				BirlikMesajiEx(BIRLIK_POLIS, RENK_TELSIZ, "ELKOYMA: %s adlý memur %s kiþisinin %s maddesine el koydu.", OyuncuIsim(playerid), OyuncuIsim(oyuncuid), inputtext);
				OyuncuKaydet(oyuncuid);
			}
			else if(dialogid == DIALOG_BOOMBOX) {
				if(!response) return false;

				if(!strcmp(inputtext, "Yerleþtir", true))
				{
					if(BoomboxBilgi[playerid][boomboxKullanimda])
						return hataMesaji(playerid, "Zaten bir müzik kutusu koymuþsun.");

					if(Boombox_Yakin(playerid) != INVALID_PLAYER_ID)
						return hataMesaji(playerid, "Yakýnlarda zaten bir müzik kutusu var.");

					Boombox_Yerlestir(playerid);

					cmd(playerid, 1, "müzik kutusunu alýr ve yere koyar.");
					SunucuMesaji(playerid, "Müzik kutusunu koydun. (Ayarlarý  \"/boombox\" komutu ile yapabilirsin).");
				}
				else if(!strcmp(inputtext, "Kaldýr", true))
				{
					if(!BoomboxBilgi[playerid][boomboxKullanimda])
						return hataMesaji(playerid, "Yerleþtirilmiþ müzik kutun bulunmuyor.");

					if(!IsPlayerInRangeOfPoint(playerid, 3.0, BoomboxBilgi[playerid][boomboxPos][0], BoomboxBilgi[playerid][boomboxPos][1], BoomboxBilgi[playerid][boomboxPos][2]))
						return hataMesaji(playerid, "Müzik kutusunun yanýnda olmalýsýn.");

					Boombox_Kaldir(playerid);
					cmd(playerid, 1, "müzik kutusunu yerden alýr.");
				}
				else if(!strcmp(inputtext, "URL Deðiþtir", true))
				{
					DialogGoster(playerid, DIALOG_BOOMBOX_URL, DIALOG_STYLE_INPUT, "Boombox - URL Deðiþtir", "{FFFFFF}Lütfen yeni URL'yi aþaðýya giriniz.", "Tamam", "Kapat");
				}
			}
			else if(dialogid == DIALOG_BOOMBOX_URL) {
				if(!response) return false;
				if(isnull(inputtext)) return DialogGoster(playerid, DIALOG_BOOMBOX_URL, DIALOG_STYLE_INPUT, "Boombox - URL Deðiþtir", "{B70000}HATA: {FFFFFF}Alaný boþ býrakamazsýn.\nLütfen yeni URL'yi aþaðýya giriniz.", "Tamam", "Kapat");

				if(!BoomboxBilgi[playerid][boomboxKullanimda]) return hataMesaji(playerid, "Yerleþtirilmiþ müzik kutun bulunmuyor.");
				if(strfind(inputtext, "http://") == -1 && strfind(inputtext, "https://") == -1) return DialogGoster(playerid, DIALOG_BOOMBOX_URL, DIALOG_STYLE_INPUT, "Boombox - URL Deðiþtir", "{B70000}HATA: {FFFFFF}Lütfen geçerli bir url girin.\nLütfen yeni URL'yi aþaðýya giriniz.", "Tamam", "Kapat");
				if(!IsPlayerInRangeOfPoint(playerid, 3.0, BoomboxBilgi[playerid][boomboxPos][0], BoomboxBilgi[playerid][boomboxPos][1], BoomboxBilgi[playerid][boomboxPos][2]))
					return hataMesaji(playerid, "Müzik kutusunun yanýnda olmalýsýn.");

				Boombox_URLAyarla(playerid, inputtext);
				cmd(playerid, 1, "müzik kutusunu baþka bir radyo istasyonuna çevirir.");
			}
			else if(dialogid == DIALOG_BAGAJKIR) {
				new aracid = GetPVarInt(playerid, "BagajKir");

				if(!response) return SetTrunkStatus(aracid, false);
				if(!strcmp(inputtext, "Boþ Slot", true)) {
					hataMesaji(playerid, "Bagajýn bu slotunda herhangi bir þey bulunmuyor.");
					BagajGoster(playerid, aracid);
				}
				else
				{
					new MesajString[128];
          VeritabaniSilahVer(playerid, AracBilgi[aracid][aracSlot][listitem], AracBilgi[aracid][aracSlotVar][listitem]);//Burasý eþya türüne göre düzenlenecek.
          format(MesajString,sizeof(MesajString),"Aracýn bagajýndan %s(%d) isimli eþyayý çýkardýnýz.",SilahIsim(AracBilgi[aracid][aracSlot][listitem]),AracBilgi[aracid][aracSlotVar][listitem]);
          SendClientMessage(playerid,RENK_ACIKYESIL,MesajString);
          AracBilgi[aracid][aracSlot][listitem] = 0;
          AracBilgi[aracid][aracSlotVar][listitem] = 0;
          SlotKaydet(aracid);
          BagajGoster(playerid, aracid);
          new me[110];
          format(me, sizeof(me), "aracýn bagajýndan bir þey çýkarýr.");
          cmd(playerid, 1, me);
      }
  }
  else if(dialogid == DIALOG_ARACBAGAJ) {
  	new aracid = oyuncuData[playerid][oBagaj];

  	if(!response) return SetTrunkStatus(AracBilgi[aracid][aracYarat], false);
  	if(!strcmp(inputtext, "Boþ Slot", true)) {
  		SetPVarInt(playerid, "BagajSlot", listitem);
  		new liste[642];
  		format(liste, sizeof(liste), "Eþya\tAdet\n");
  		format(liste, sizeof(liste), "%sElinde Tuttuðun Silahý Býrak\n", liste);
  		if(oyuncuData[playerid][oUyusturucu][2] > 0) strcat(liste, "Yüksek Kalite Uyuþturucu\n");
  		if(oyuncuData[playerid][oUyusturucu][1] > 0) strcat(liste, "Orta Kalite Uyuþturucu\n");
  		if(oyuncuData[playerid][oUyusturucu][0] > 0) strcat(liste, "Düþük Kalite Uyuþturucu\n");
  		DialogGoster(playerid, DIALOG_BAGAJ_EKLE, DIALOG_STYLE_TABLIST_HEADERS, "Bagaj Eþya Ekleme", liste, "Seç", "Kapat");
  	}
  	else if(!strcmp(inputtext, "Beanbag Tüfeði", true)) {
  		if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return hataMesaji(playerid, "Polis deðilsin."), SetTrunkStatus(AracBilgi[aracid][aracYarat], false);
  		if(oyuncuData[playerid][oIsbasi] == false) return hataMesaji(playerid,"Ýþbaþý durumunda deðilken bu seçeneði kullanamazsýn."), SetTrunkStatus(AracBilgi[aracid][aracYarat], false);
  		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu seçenek araçta kullanýlamaz."), SetTrunkStatus(AracBilgi[aracid][aracYarat], false);
  		if(oyuncuData[playerid][oDonduruldu] > 0) return hataMesaji(playerid, "Þu anda bu komutu kullanamazsýn."), SetTrunkStatus(AracBilgi[aracid][aracYarat], false);

  		if(!oyuncuData[playerid][oBeanbag])
  		{
  			new silahid, mermi, hata = 0;
			for(new i = 0; i < 13; i++)
			{
				GetPlayerWeaponData(playerid, i, silahid, mermi);
				if(silahid == 25) hata++; break;
			}
			if(hata > 0) return hataMesaji(playerid, "Shotgun silahýna sahipken beanbag alamazsýnýz.");
  			oyuncuData[playerid][oBeanbag] = true;
  			GetPlayerWeaponData(playerid, 3, oyuncuData[playerid][oSilah][3], oyuncuData[playerid][oMermi][3]);
  			GivePlayerWeapon(playerid, 25, 99999);
  			cmd(playerid, 1, "araçtan beanbag tüfeðini iki eliyle alýr.");
  		}
  		else
  		{
  			oyuncuData[playerid][oBeanbag] = false;

  			SetPlayerArmedWeapon(playerid, oyuncuData[playerid][oSilah][3]);
  			cmd(playerid, 1, "iki eliyle tuttuðu beanbag tüfeðini aracýn bagajýna koyar.");
  		}
  		SetTrunkStatus(AracBilgi[aracid][aracYarat], false);
  	}
  	else if(!strcmp(inputtext, "M4", true)) 
  	{
  		if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return hataMesaji(playerid, "Polis deðilsin."), SetTrunkStatus(AracBilgi[aracid][aracYarat], false);
  		if(oyuncuData[playerid][oIsbasi] == false) return hataMesaji(playerid,"Ýþbaþý durumunda deðilken bu seçeneði kullanamazsýn."), SetTrunkStatus(AracBilgi[aracid][aracYarat], false);
  		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu seçenek araçta kullanýlamaz."), SetTrunkStatus(AracBilgi[aracid][aracYarat], false);
  		if(oyuncuData[playerid][oDonduruldu] > 0) return hataMesaji(playerid, "Þu anda bu komutu kullanamazsýn."), SetTrunkStatus(AracBilgi[aracid][aracYarat], false);
  		VeritabaniSilahVer(playerid, WEAPON_M4, 200);
  		SetTrunkStatus(AracBilgi[aracid][aracYarat], false);
  	}
  	else if(!strcmp(inputtext, "MP5", true))
  	{
  		if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return hataMesaji(playerid, "Polis deðilsin."), SetTrunkStatus(AracBilgi[aracid][aracYarat], false);
  		if(oyuncuData[playerid][oIsbasi] == false) return hataMesaji(playerid,"Ýþbaþý durumunda deðilken bu seçeneði kullanamazsýn."), SetTrunkStatus(AracBilgi[aracid][aracYarat], false);
  		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu seçenek araçta kullanýlamaz."), SetTrunkStatus(AracBilgi[aracid][aracYarat], false);
  		if(oyuncuData[playerid][oDonduruldu] > 0) return hataMesaji(playerid, "Þu anda bu komutu kullanamazsýn."), SetTrunkStatus(AracBilgi[aracid][aracYarat], false);
  		VeritabaniSilahVer(playerid, WEAPON_MP5, 300);
  		SetTrunkStatus(AracBilgi[aracid][aracYarat], false);
  	}
  	else if(!strcmp(inputtext, "Operasyon Yeleði", true))
  	{
  		if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return hataMesaji(playerid, "Polis deðilsin."), SetTrunkStatus(AracBilgi[aracid][aracYarat], false);
  		if(oyuncuData[playerid][oIsbasi] == false) return hataMesaji(playerid,"Ýþbaþý durumunda deðilken bu seçeneði kullanamazsýn."), SetTrunkStatus(AracBilgi[aracid][aracYarat], false);
  		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu seçenek araçta kullanýlamaz."), SetTrunkStatus(AracBilgi[aracid][aracYarat], false);
  		if(oyuncuData[playerid][oDonduruldu] > 0) return hataMesaji(playerid, "Þu anda bu komutu kullanamazsýn."), SetTrunkStatus(AracBilgi[aracid][aracYarat], false);
  		ZirhDuzenle(playerid, 100);
  		SetTrunkStatus(AracBilgi[aracid][aracYarat], false);
  	}
  	else
  	{
  		if(OyuncuBirlikTuru(playerid) == BIRLIK_POLIS)
  		{
  			BirlikMesaji(oyuncuData[playerid][oBirlik], RENK_TELSIZ, "%s tarafýndan %s plakalý araçtaki %d mermili %s model silaha el konuldu.", OyuncuIsim(playerid), AracBilgi[aracid][aracPlaka], AracBilgi[aracid][aracSlotVar][listitem], SilahIsim(AracBilgi[aracid][aracSlot][listitem]));
  			AracBilgi[aracid][aracSlot][listitem] = 0;
  			AracBilgi[aracid][aracSlotVar][listitem] = 0;
  			SlotKaydet(aracid);
  			SetTrunkStatus(AracBilgi[aracid][aracYarat], false);
  			cmd(playerid, 1, "araç bagajýndaki silaha el koyar.");
  			Log_Kaydet("loglar/aracsilahelkoyma.txt", "[%s] %s tarafindan %s plakali %s model aractaki %d mermili %s model silaha el konuldu.", Tarih(), OyuncuIsim(playerid), AracBilgi[aracid][aracPlaka], AracModel(GetVehicleModel(aracid)), AracBilgi[aracid][aracSlotVar][listitem], SilahIsim(AracBilgi[aracid][aracSlot][listitem]));
  		}
  		else
  		{
  			new Cache:silahVericek, query[280];
			mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM player_weapons WHERE weapon_userid = %d AND weapon_statusid = %d AND weapon_gameid = %d", oyuncuData[playerid][oID], SILAH_OYUNCU_USTUNDE, AracBilgi[aracid][aracSlot][listitem]);
			silahVericek = mysql_query(g_SQL, query);
			new rowsx = cache_num_rows();
			cache_delete(silahVericek);
			if(rowsx) return hataMesaji(playerid, "Bu silah zaten üstünde bulunuyor.");
		    new Cache:kontrol;
		    mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM player_weapons WHERE weapon_userid = '%d' AND `weapon_statusid` = '%d'", oyuncuData[playerid][oID], SILAH_OYUNCU_USTUNDE);
		    kontrol = mysql_query(g_SQL, query);
		    new rows = cache_num_rows();
		    if(rows < 2)
		    {
	  			new MesajString[128];
				VeritabaniSilahVer(playerid, AracBilgi[aracid][aracSlot][listitem], AracBilgi[aracid][aracSlotVar][listitem]);//Burasý eþya türüne göre düzenlenecek.
				format(MesajString,sizeof(MesajString),"Aracýn bagajýndan %s(%d) isimli eþyayý çýkardýnýz.",SilahIsim(AracBilgi[aracid][aracSlot][listitem]),AracBilgi[aracid][aracSlotVar][listitem]);
				SendClientMessage(playerid,RENK_ACIKYESIL,MesajString);
				AracBilgi[aracid][aracSlot][listitem] = 0;
				AracBilgi[aracid][aracSlotVar][listitem] = 0;
				SlotKaydet(aracid);
				SetTrunkStatus(AracBilgi[aracid][aracYarat], false);
				new me[110];
				format(me, sizeof(me), "aracýn bagajýndan bir þey çýkarýr.");
				cmd(playerid, 1, me);
			}
			else
			{
				hataMesaji(playerid, "Üstünde maksimum iki adet silah bulundurabilirsin.");
			}
			cache_delete(kontrol);
		}
	}
}
else if(dialogid == DIALOG_BAGAJ_EKLE) {
	new aracid = oyuncuData[playerid][oBagaj];
	new MesajString[128],silahid = GetPlayerWeapon(playerid), mermi = GetPlayerAmmo(playerid);

	if(!response) return SetTrunkStatus(AracBilgi[aracid][aracYarat], false),DeletePVar(playerid, "BagajSlot");
	else
	{
		if(OyuncuBirlikTuru(playerid) == BIRLIK_POLIS) return hataMesaji(playerid, "Polisler araca silah býrakamaz."), SetTrunkStatus(AracBilgi[aracid][aracYarat], false);
		if(silahid == 0) return hataMesaji(playerid, "Elinde bir silah bulunamadý."), SetTrunkStatus(AracBilgi[aracid][aracYarat], false);
		new query[250], Cache:kontrol, rows;
		mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM player_weapons WHERE weapon_userid = %d AND weapon_gameid = %d AND weapon_statusid = %d", oyuncuData[playerid][oID], silahid, SILAH_OYUNCU_USTUNDE);
		kontrol = mysql_query(g_SQL, query);
		cache_get_row_count(rows);
		if(!rows) return hataMesaji(playerid, "Elindeki silahýn kayýtlarýna ulaþýlamadý, bagaja koyamazsýn."), cache_delete(kontrol);
		cache_delete(kontrol);
		new slot = GetPVarInt(playerid, "BagajSlot");
		format(MesajString,sizeof(MesajString),"Aracýn bagajýna %s(%d) | Slot: %d isimli eþyayý koydunuz.",SilahIsim(silahid),mermi, slot+1);
		SendClientMessage(playerid,RENK_ACIKYESIL,MesajString);
		AracBilgi[aracid][aracSlot][slot] = silahid;
		AracBilgi[aracid][aracSlotVar][slot] = mermi;
		SlotKaydet(aracid);
		SetTrunkStatus(AracBilgi[aracid][aracYarat], false);
		DeletePVar(playerid, "BagajSlot");
		new me[110];
		format(me, sizeof(me), "aracýn bagajýna bir þey koyar.");
		cmd(playerid, 1, me);
		SetTrunkStatus(AracBilgi[aracid][aracYarat], false);
		Log_Kaydet("loglar/silahbugkontrol.txt", "[%s] %s bagaja silah birakti. Arac ID: %d - Silah: %d - Mermi: %d", Tarih(), OyuncuIsim(playerid), aracid, silahid, mermi);
		new str[175];
		format(str, sizeof(str), "```[%s] %s bagaja silah birakti. Arac ID: %d - Silah: %d - Mermi: %d```", Tarih(), OyuncuIsim(playerid), aracid, silahid, mermi);
		DCC_SendChannelMessage(silahlog, str);
		return SilahSil(playerid, silahid);
	}
}
else if(dialogid == DIALOG_REHBER)
{
	if(response)
	{
		SetPVarInt(playerid, "rehbersecimi", listitem);
		Dialog_Show(playerid, rehbersecim, DIALOG_STYLE_LIST, "Rehber Ýþlem", "Arama Yap\nSMS Gönder", "Seç", "Ýptal");
	}
}
else if(dialogid == DIALOG_ARAMASECIM)
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				if(oyuncuData[playerid][oTelefonDurum] == false) return hataMesaji(playerid, "Telefonunuz kapalýyken bu seçeneði kullanamazsýnýz.");
				static sayi, rehber[1024];
				sayi = 0;
				rehber[0] = 0;
				for(new i = 1; i != MAX_TELREHBER; i++)
				{
					format(rehber, sizeof(rehber), "%s[SLOT %d]\tNumara: %d\tÝsim: %s\n", rehber, i, RehberBilgi[playerid][i][rehbernumara], RehberBilgi[playerid][i][rehberisim]);
					sayi++;
				}
				if(!sayi) return hataMesaji(playerid, "Rehberinizde kimse yok. Kiþi eklemek için /rehberekaydet komutunu kullanýn.");
				DialogGoster(playerid, DIALOG_REHBER, DIALOG_STYLE_TABLIST, "Telefon Rehberiniz", rehber, "Seç", "Kapat");
			}
			case 1:
			{
				if(oyuncuData[playerid][oTelefonDurum] == false) return hataMesaji(playerid, "Telefonunuz kapalýyken bu seçeneði kullanamazsýnýz.");
				DialogGoster(playerid, DIALOG_ARAMA, DIALOG_STYLE_INPUT, "> Arama Yap", "Aramak istediðiniz numarayý girmelisiniz.", "Ara", "Kapat");
			}
		}
	}
}
else if(dialogid == DIALOG_HARITALARMENU)
{
	if(response)
	{
		if(oyuncuData[playerid][oTelefonDurum] == false) return hataMesaji(playerid, "Telefonunuz kapalýyken bu seçeneði kullanamazsýnýz.");
		DialogGoster(playerid, DIALOG_HARITAGPSLISTE, DIALOG_STYLE_LIST, "GPS Seçenekleri", "Konum Gönderme Seçeneði\nVice Haritasý Seçeneði", "Seç", "Çýkýþ");
	}
}
else if(dialogid == DIALOG_HARITAGPSLISTE)
{
	if(response)
	{
		if(oyuncuData[playerid][oTelefonDurum] == false) return hataMesaji(playerid, "Telefonunuz kapalýyken bu seçeneði kullanamazsýnýz.");
		switch(listitem)
		{
			case 0:
			{
				DialogGoster(playerid, DIALOG_HARITAKONUMGONDERME, DIALOG_STYLE_INPUT, "Konum Gönderme", "Konumunuzu göndermek istediðiniz kiþinin telefon numarasýný girin.", "Gönder", "Çýkýþ");
			}
			case 1:
			{
				DialogGoster(playerid, DIALOG_HARITAGPS, DIALOG_STYLE_LIST, "Vice Haritasý", "Ocean View Hotel\nMalibu Club\nSunshine Autos\nLittle Italy\nVice Arac Kiralama\nVice Hastanesi\
					\nSurucu Kursu\nVCFD\nVice Bank\nTrucker\nVice Sahili\nVice Taxi", "Seç", "Çýkýþ");
			}
		}
	}
}
else if(dialogid == DIALOG_HARITAGPS)
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				SetPlayerCheckpoint(playerid, 412.9284,-1761.9355,6.5618, 4.0);
				SunucuMesaji(playerid, "GPS uygulamasýndan Ocean View Hotel'i iþaretledin.");
			}
			case 1:
			{
				SetPlayerCheckpoint(playerid, 473.7273,-1832.9817,6.9653, 4.0);
				SunucuMesaji(playerid, "GPS uygulamasýndan Malibu'yu iþaretledin.");
			}
			case 2:
			{
				SetPlayerCheckpoint(playerid, 956.6868,-1717.6686,13.7653, 4.0);
				SunucuMesaji(playerid, "GPS uygulamasýndan Sunshine Autos'u iþaretledin.");
			}
			case 3:
			{
				SetPlayerCheckpoint(playerid, 1090.1901,-1736.4119,13.5562, 4.0);
				SunucuMesaji(playerid, "GPS uygulamasýndan Little Italy'i iþaretledin.");
			}
			case 4:
			{
				SetPlayerCheckpoint(playerid, 1221.2357,-1418.1776,13.2337, 4.0);
				SunucuMesaji(playerid, "GPS uygulamasýndan araç kiralamayý iþaretledin.");
			}
			case 5:
			{
				SetPlayerCheckpoint(playerid, 1186.3546,-1323.9396,13.5591, 4.0);
				SunucuMesaji(playerid, "GPS uygulamasýndan Vice Hastanesini iþaretledin.");
			}
			case 6:
			{
				SetPlayerCheckpoint(playerid, 963.7297,-1380.8394,13.3438, 4.0);
				SunucuMesaji(playerid, "GPS uygulamasýndan sürücü kursunu iþaretledin.");
			}
			case 7:
			{
				SetPlayerCheckpoint(playerid, 1714.0933,-1155.0222,23.8281, 4.0);
				SunucuMesaji(playerid, "GPS uygulamasýndan VCFD'i iþaretledin.");
			}
			case 8:
			{
				SetPlayerCheckpoint(playerid, 1380.0067,-1088.5553,27.3906, 4.0);
				SunucuMesaji(playerid, "GPS uygulamasýndan Vice Bank'i iþaretledin.");
			}
			case 9:
			{
				SetPlayerCheckpoint(playerid, 2493.4778,-2470.6365,17.8828, 4.0);
				SunucuMesaji(playerid, "GPS uygulamasýndan Trucker'ý iþaretledin.");
			}
			case 10:
			{
				SetPlayerCheckpoint(playerid, 154.4182,-2067.4985,3.6674, 4.0);
				SunucuMesaji(playerid, "GPS uygulamasýndan Vice Sahilini iþaretledin.");
			}
			case 11:
			{
				SetPlayerCheckpoint(playerid, 1285.2260,-1542.1401,13.5124, 4.0);
				SunucuMesaji(playerid, "Telefon uygulamasýndan Vice Taxi'yi iþaretledin.");
			}
		}
	}
}
else if(dialogid == DIALOG_HARITAKONUMGONDERME)
{
	if(response)
	{
		if(strval(inputtext) < 1000000 || strval(inputtext) > 9999999) return DialogGoster(playerid, DIALOG_HARITAKONUMGONDERME, DIALOG_STYLE_INPUT, "Konum Gönderme", "Hatalý numara. Lütfen 7 haneli bir telefon numarasý girin.", "Gönder", "Çýkýþ");
		foreach(new i : Player) if(oyuncuData[i][oTelefonNumarasi] == strval(inputtext))
		{
			oyuncuData[playerid][oKonumKisi] = i;
			SunucuMesaji(i, "(ID:%d - %s) %d numarasýnden size konum gönderme talebi geldi. Kabul etmek için /konumkabul %d yazmalýsýnýz.", playerid, OyuncuIsim(playerid), oyuncuData[playerid][oTelefonNumarasi], playerid);
			SunucuMesaji(playerid, "Konum gönderme isteðiniz gönderildi. Karþýdaki kiþi kabul ettiðinde konumunuzu görebilecek.");
			SetPVarInt(playerid, "konumgonder", 1);
		}
		if(oyuncuData[playerid][oKonumKisi] == -1) return DialogGoster(playerid, DIALOG_HARITAKONUMGONDERME, DIALOG_STYLE_INPUT, "Konum Gönderme", "Konumunuzu göndermek istediðiniz numaraya ulaþýlamadý.\nFarklý bir numara deneyin:", "Gönder", "Çýkýþ");
	}
}
else if(dialogid == DIALOG_MUZIKMENU)
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				DialogGoster(playerid, DIALOG_MUZIKRADYOLISTE, DIALOG_STYLE_LIST, "Radyo Ýstasyonlarý", "Underground 80's\nThe Trip\nLeft Coast 70's\nBagel Radio\nIndie Pop Rocks", "Oynat", "Çýkýþ");
			}
			case 1:
			{
				DialogGoster(playerid, DIALOG_MUZIKLISTE, DIALOG_STYLE_LIST, "Müzikleriniz", "Muzikler gelecek", "Oynat", "Çýkýþ");
			}
		}
	}
}
else if(dialogid == DIALOG_MUZIKRADYOLISTE)
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				if(oyuncuData[playerid][oKulaklikTakiyor] == false)
				{
					SunucuMesaji(playerid, "Kulaklýðýnýzý takmadan müzik dinleyemezsiniz. Takmak için /kulaklik kullanýn.");
					SunucuMesaji(playerid, "Eðer kulaklýðýnýz yoksa elektronik dükkanlarýndan satýn alabilirsiniz.");
				}
				else if(oyuncuData[playerid][oKulaklikTakiyor] == true)
				{
					StopAudioStreamForPlayer(playerid);
					PlayAudioStreamForPlayer(playerid, "http://somafm.com/u80s.pls");
					oyuncuData[playerid][oMuzikDinliyor] = true;
					cmd(playerid, 1, "telefonun müzik sekmesinden bir radyo istasyonuna baðlanýr ve kulaklýðýyla dinlemeye koyulur.");
					SunucuMesaji(playerid, "Kulaklýðýnýzla müzik dinliyorsunuz. Sizden baþka kimse duyamaz.");
					SunucuMesaji(playerid, "Müziði kapatmak için geri tuþuna veya çarpý tuþuna týklayabilirsiniz.");
				}
			}
			case 1:
			{
				if(oyuncuData[playerid][oKulaklikTakiyor] == false)
				{
					SunucuMesaji(playerid, "Kulaklýðýnýzý takmadan müzik dinleyemezsiniz. Takmak için /kulaklik kullanýn.");
					SunucuMesaji(playerid, "Eðer kulaklýðýnýz yoksa elektronik dükkanlarýndan satýn alabilirsiniz.");
				}
				else if(oyuncuData[playerid][oKulaklikTakiyor] == true)
				{
					StopAudioStreamForPlayer(playerid);
					PlayAudioStreamForPlayer(playerid, "http://somafm.com/thetrip.pls");
					oyuncuData[playerid][oMuzikDinliyor] = true;
					cmd(playerid, 1, "telefonun müzik sekmesinden bir radyo istasyonuna baðlanýr ve kulaklýðýyla dinlemeye koyulur.");
					SunucuMesaji(playerid, "Kulaklýðýnýzla müzik dinliyorsunuz. Sizden baþka kimse duyamaz.");
					SunucuMesaji(playerid, "Müziði kapatmak için '/muzikdurdur' komutunu kullanýn.");
				}
			}
			case 2:
			{
				if(oyuncuData[playerid][oKulaklikTakiyor] == false)
				{
					SunucuMesaji(playerid, "Kulaklýðýnýzý takmadan müzik dinleyemezsiniz. Takmak için /kulaklik kullanýn.");
					SunucuMesaji(playerid, "Eðer kulaklýðýnýz yoksa elektronik dükkanlarýndan satýn alabilirsiniz.");
				}
				else if(oyuncuData[playerid][oKulaklikTakiyor] == true)
				{
					StopAudioStreamForPlayer(playerid);
					PlayAudioStreamForPlayer(playerid, "http://somafm.com/seventies.pls");
					oyuncuData[playerid][oMuzikDinliyor] = true;
					cmd(playerid, 1, "telefonun müzik sekmesinden bir radyo istasyonuna baðlanýr ve kulaklýðýyla dinlemeye koyulur.");
					SunucuMesaji(playerid, "Kulaklýðýnýzla müzik dinliyorsunuz. Sizden baþka kimse duyamaz.");
					SunucuMesaji(playerid, "Müziði kapatmak için '/muzikdurdur' komutunu kullanýn.");
				}
			}
			case 3:
			{
				if(oyuncuData[playerid][oKulaklikTakiyor] == false)
				{
					SunucuMesaji(playerid, "Kulaklýðýnýzý takmadan müzik dinleyemezsiniz. Takmak için /kulaklik kullanýn.");
					SunucuMesaji(playerid, "Eðer kulaklýðýnýz yoksa elektronik dükkanlarýndan satýn alabilirsiniz.");
				}
				else if(oyuncuData[playerid][oKulaklikTakiyor] == true)
				{
					StopAudioStreamForPlayer(playerid);
					PlayAudioStreamForPlayer(playerid, "http://somafm.com/bagel.pls");
					oyuncuData[playerid][oMuzikDinliyor] = true;
					cmd(playerid, 1, "telefonun müzik sekmesinden bir radyo istasyonuna baðlanýr ve kulaklýðýyla dinlemeye koyulur.");
					SunucuMesaji(playerid, "Kulaklýðýnýzla müzik dinliyorsunuz. Sizden baþka kimse duyamaz.");
					SunucuMesaji(playerid, "Müziði kapatmak için '/muzikdurdur' komutunu kullanýn.");
				}
			}
			case 4:
			{
				if(oyuncuData[playerid][oKulaklikTakiyor] == false)
				{
					SunucuMesaji(playerid, "Kulaklýðýnýzý takmadan müzik dinleyemezsiniz. Takmak için /kulaklik kullanýn.");
					SunucuMesaji(playerid, "Eðer kulaklýðýnýz yoksa elektronik dükkanlarýndan satýn alabilirsiniz.");
				}
				else if(oyuncuData[playerid][oKulaklikTakiyor] == true)
				{
					StopAudioStreamForPlayer(playerid);
					PlayAudioStreamForPlayer(playerid, "http://somafm.com/indiepop.pls");
					oyuncuData[playerid][oMuzikDinliyor] = true;
					cmd(playerid, 1, "telefonun müzik sekmesinden bir radyo istasyonuna baðlanýr ve kulaklýðýyla dinlemeye koyulur.");
					SunucuMesaji(playerid, "Kulaklýðýnýzla müzik dinliyorsunuz. Sizden baþka kimse duyamaz.");
					SunucuMesaji(playerid, "Müziði kapatmak için '/muzikdurdur' komutunu kullanýn.");
				}
			}
		}
	}
}
else if(dialogid == DIALOG_ADMINPMUYARI)
{
	if(response)
	{
		static mesaj[128];
		strunpack(mesaj, admineatilanpm[playerid]);
		SCM_Ex(playerid, RENK_PM, "(( << %s (%d): %s ))", OyuncuIsim(pmatilanadmin[playerid]), pmatilanadmin[playerid], mesaj);
		SCM_Ex(pmatilanadmin[playerid], RENK_SARI, "(( >> %s (%d): %s ))", OyuncuIsim(playerid), playerid, mesaj);
		foreach(new i : Player) {
			if(oyuncuData[i][oAdmin] > 0 && oyuncuData[i][oPMIzlemeDurum] == true) {
				SCM_Ex(i, RENK_PM, "(( %s(%d) > %s(%d): %s ))", OyuncuIsim(playerid), playerid, OyuncuIsim(pmatilanadmin[playerid]), pmatilanadmin[playerid], mesaj);
			}
		}
	}
	else return SunucuMesaji(playerid, "Yöneticiye PM atmaktan vazgeçtiniz.");
}
else if(dialogid == DIALOG_YETENEKSIFIRLAONAY)
{
	if(response)
	{
		new yetenektoplami;
		yetenektoplami = oyuncuyetenektoplami(playerid);
		oyuncuData[playerid][oYetenekPuani] += yetenektoplami;
		oyuncuyeteneksifirla(playerid);
		OyuncuKaydet(playerid);
		SunucuMesaji(playerid, "Yeteneklerinizi sýfýrladýnýz. %d yetenek puaný hesabýnýza eklendi.", yetenektoplami);
	}
	else return SunucuMesaji(playerid, "Yeteneklerinizi sýfýrlamaktan vazgeçtiniz.");
}
else if(dialogid == DIALOG_KIYAFET_SLOT_BIR)
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				new eskiskin;
				eskiskin = oyuncuData[playerid][oKiyafet];
				oyuncuData[playerid][oKiyafet] = oyuncuData[playerid][oKiyafetDolabi][0];
				oyuncuData[playerid][oKiyafetDolabi][0] = eskiskin;
				SetPlayerSkin(playerid, oyuncuData[playerid][oKiyafet]);
				cmd(playerid, 1, "askýlýktan kýyafetlerini alýp giyinir.");
			}
			case 1:
			{
				oyuncuData[playerid][oKiyafetDolabi][0] = 0;
				cmd(playerid, 1, "askýlýktaki kýyafetleri kucaklayýp çöpe atar.");
				SunucuMesaji(playerid, "Birinci askýlýktaki kýyafetini sildin.");
			}
			case 2:
			{
				if(ItemVarMi(playerid, 106) > 0) return hataMesaji(playerid, "Üstünde yalnýzca bir kýyafet poþeti taþýyabilirsin.");
				ItemEkle(playerid, 106, oyuncuData[playerid][oKiyafetDolabi][0]);
				cmd(playerid, 1, "askýlýktaki kýyafeti alýp poþete yerleþtirir.");
			}
		}
	}
}
else if(dialogid == DIALOG_KIYAFET_SLOT_IKI)
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				new eskiskin;
				eskiskin = oyuncuData[playerid][oKiyafet];
				oyuncuData[playerid][oKiyafet] = oyuncuData[playerid][oKiyafetDolabi][1];
				oyuncuData[playerid][oKiyafetDolabi][1] = eskiskin;
				SetPlayerSkin(playerid, oyuncuData[playerid][oKiyafet]);
				cmd(playerid, 1, "askýlýktan kýyafetlerini alýp giyinir.");
			}
			case 1:
			{
				oyuncuData[playerid][oKiyafetDolabi][1] = 0;
				cmd(playerid, 1, "askýlýktaki kýyafetleri kucaklayýp çöpe atar.");
				SunucuMesaji(playerid, "Birinci askýlýktaki kýyafetini sildin.");
			}
			case 2:
			{
				if(ItemVarMi(playerid, 106) > 0) return hataMesaji(playerid, "Üstünde yalnýzca bir kýyafet poþeti taþýyabilirsin.");
				ItemEkle(playerid, 106, oyuncuData[playerid][oKiyafetDolabi][1]);
				cmd(playerid, 1, "askýlýktaki kýyafeti alýp poþete yerleþtirir.");
			}
		}
	}
}
else if(dialogid == DIALOG_KIYAFET_SLOT_UC)
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				new eskiskin;
				eskiskin = oyuncuData[playerid][oKiyafet];
				oyuncuData[playerid][oKiyafet] = oyuncuData[playerid][oKiyafetDolabi][2];
				oyuncuData[playerid][oKiyafetDolabi][2] = eskiskin;
				SetPlayerSkin(playerid, oyuncuData[playerid][oKiyafet]);
				cmd(playerid, 1, "askýlýktan kýyafetlerini alýp giyinir.");
			}
			case 1:
			{
				oyuncuData[playerid][oKiyafetDolabi][2] = 0;
				cmd(playerid, 1, "askýlýktaki kýyafetleri kucaklayýp çöpe atar.");
				SunucuMesaji(playerid, "Birinci askýlýktaki kýyafetini sildin.");
			}
			case 2:
			{
				if(ItemVarMi(playerid, 106) > 0) return hataMesaji(playerid, "Üstünde yalnýzca bir kýyafet poþeti taþýyabilirsin.");
				ItemEkle(playerid, 106, oyuncuData[playerid][oKiyafetDolabi][2]);
				cmd(playerid, 1, "askýlýktaki kýyafeti alýp poþete yerleþtirir.");
			}
		}
	}
}
else if(dialogid == DIALOG_TRUCKER_SECIM)
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				oyuncuData[playerid][oTirGuzergah] = 1;
				truckerseviyeucte[playerid] = 1;
				SetPlayerCheckpoint(playerid,2226.2485,-2436.2996,14.4044,5.0);
				DorseYuku[GetPlayerVehicleID(playerid)] = true;
				SetEngineStatus(GetPlayerVehicleID(playerid), true);
				SunucuMesaji(playerid, "Rota 1 yolunu seçerek yolculuða baþladýn. Hedef lokasyona dorseyi býrakýp geri dön.");
				Log_Kaydet("loglar/truckerlog.txt", "[%s] %s adli kisi trucker gorevine basladi(Seviye 3 - Rota 1)", Tarih(), OyuncuIsim(playerid));
			}
			case 1:
			{
				oyuncuData[playerid][oTirGuzergah] = 2;
				truckerseviyeucte[playerid] = 1;
				SetPlayerCheckpoint(playerid,2228.9231,-2430.4758,14.3898,5.0);
				DorseYuku[GetPlayerVehicleID(playerid)] = true;
				SetEngineStatus(GetPlayerVehicleID(playerid), true);
				SunucuMesaji(playerid, "Rota 2 yolunu seçerek yolculuða baþladýn. Hedef lokasyona dorseyi býrakýp geri dön.");
				Log_Kaydet("loglar/truckerlog.txt", "[%s] %s adli kisi trucker gorevine basladi(Seviye 3 - Rota 2)", Tarih(), OyuncuIsim(playerid));
			}
			case 2:
			{
				oyuncuData[playerid][oTirGuzergah] = 3;
				truckerseviyeucte[playerid] = 1;
				SetPlayerCheckpoint(playerid,2222.6470,-2479.0183,14.3784,5.0);
				DorseYuku[GetPlayerVehicleID(playerid)] = true;
				SetEngineStatus(GetPlayerVehicleID(playerid), true);
				SunucuMesaji(playerid, "Rota 3 yolunu seçerek yolculuða baþladýn. Hedef lokasyona dorseyi býrakýp geri dön.");
				Log_Kaydet("loglar/truckerlog.txt", "[%s] %s adli kisi trucker gorevine basladi(Seviye 3 - Rota 3)", Tarih(), OyuncuIsim(playerid));
			}
			case 3:
			{
				oyuncuData[playerid][oTirGuzergah] = 4;
				truckerseviyeucte[playerid] = 1;
				SetPlayerCheckpoint(playerid,2225.2827,-2441.8179,13.9820,5.0);
				DorseYuku[GetPlayerVehicleID(playerid)] = true;
				SetEngineStatus(GetPlayerVehicleID(playerid), true);
				SunucuMesaji(playerid, "Rota 4 yolunu seçerek yolculuða baþladýn. Hedef lokasyona dorseyi býrakýp geri dön.");
				Log_Kaydet("loglar/truckerlog.txt", "[%s] %s adli kisi trucker gorevine basladi(Seviye 3 - Rota 4)", Tarih(), OyuncuIsim(playerid));
			}
		}
		UyariMesaji(playerid, "Dorse yüklemeyi unutma, eðer hedefe dorsesiz gidersen görevi tamamlayamazsýn!");
	}
}
else if(dialogid == DIALOG_VICE_MARKET)
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				if(oyuncuData[playerid][oIsimDegisimHakki] < 1) return hataMesaji(playerid, "Ýsim deðiþim hakkýn yok.");
				ShowPlayerDialog(playerid, DIALOG_ISIM_DEGISIM, DIALOG_STYLE_INPUT, "Ýsim Deðiþimi", "Aþaðýdaki kutucuða yeni ismini gir.", "Devam", "Ýptal");
			}
			case 1:
			{
				if(oyuncuData[playerid][oPlakaDegisimHakki] < 1) return hataMesaji(playerid, "Plaka deðiþim hakkýn yok.");
				if(!IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Plaka deðiþimi için bir araçta olmalýsýn.");
				new aracid = GetPlayerVehicleID(playerid);
				if(!Arac_SahipKontrol(playerid, aracid)) return hataMesaji(playerid, "Bu aracýn sahibi deðilsin, plaka deðiþimini bu araçta kullanamazsýn.");
				ShowPlayerDialog(playerid, DIALOG_PLAKA_DEGISIM, DIALOG_STYLE_INPUT, "Plaka Deðiþimi", "Aþaðýdaki kutucuða yeni plakaný gir.", "Devam", "Ýptal");
			}
			case 2:
			{
				if(oyuncuData[playerid][oTelefonDegisimHakki] < 1) return hataMesaji(playerid, "Telefon numarasý deðiþim hakkýn yok.");
				if(oyuncuData[playerid][oTelefon] < 1) return hataMesaji(playerid, "Öncelikle bir telefon almalýsýn.");
				if(oyuncuData[playerid][oTelefonNumarasi] == 0) return hataMesaji(playerid, "Öncelikle bir simkart almalýsýn.");
				ShowPlayerDialog(playerid, DIALOG_TELEFON_DEGISIM, DIALOG_STYLE_INPUT, "Telefon Deðiþimi", "Aþaðýdaki kutucuða 7 haneli yeni telefon numaraný gir.", "Devam", "Ýptal");
			}
			case 3:
			{
				if(oyuncuData[playerid][oBisikletHakki] < 1) return hataMesaji(playerid, "Bisiklet alýmý hakkýn yok.");
				if(!IsPlayerInRangeOfPoint(playerid, 3.0, 957.7657,-1704.1384,13.6137)) return hataMesaji(playerid, "Bisiklet almak için Sunshine Autos'daki bisiklet alma noktasýnda olmalýsýn.");
				ShowPlayerDialog(playerid, DIALOG_BISIKLET_ALIM, DIALOG_STYLE_MSGBOX, "> Bisiklet Alýmý", "Bisiklet seçim ekranýna gitmek için bu sayfayý onaylayýn.", "Onayla", "Ýptal");
			}
			case 4:
			{
				if(oyuncuData[playerid][oBesYetenekPuani] < 1) return hataMesaji(playerid, "Dört yetenek puaný alým hakkýn yok.");
				ShowPlayerDialog(playerid, DIALOG_BESYPUANI_ALIM, DIALOG_STYLE_MSGBOX, "Yetenek Puaný Alýmý Onay Kutucuðu", "4 yetenek puanýný þimdi karakterine aktarmak istiyor musun?", "Onayla", "Ýptal");
			}
			case 5:
			{
				if(oyuncuData[playerid][oOnYetenekPuani] < 1) return hataMesaji(playerid, "Sekiz yetenek puaný alým hakkýn yok.");
				ShowPlayerDialog(playerid, DIALOG_ONYPUANI_ALIM, DIALOG_STYLE_MSGBOX, "Yetenek Puaný Alýmý Onay Kutucuðu", "8 yetenek puanýný þimdi karakterine aktarmak istiyor musun?", "Onayla", "Ýptal");
			}
			case 6:
			{
				if(oyuncuData[playerid][oOnBesYetenekPuani] < 1) return hataMesaji(playerid, "On beþ yetenek puaný alým hakkýn yok.");
				ShowPlayerDialog(playerid, DIALOG_ONBESYPUANI_ALIM, DIALOG_STYLE_MSGBOX, "Yetenek Puaný Alýmý Onay Kutucuðu", "15 yetenek puanýný þimdi karakterine aktarmak istiyor musun?", "Onayla", "Ýptal");
			}
			case 7:
			{
				if(oyuncuData[playerid][oYetenekSifirlamaHakki] < 1) return hataMesaji(playerid, "Yetenek sýfýrlama hakkýn yok.");
				ShowPlayerDialog(playerid, DIALOG_YETENEKSIFIRLAMA_ONAY, DIALOG_STYLE_MSGBOX, "Yetenek Sýfýrlama Onay Kutucuðu", "Yeteneðini sýfýrladýðýnda yetenek seviyelerin sýfýrlanýr.\nKas/güç ve vücut yeteneklerin sýfýrlanmaz!\nHarcadýðýn yetenek puanlarý ise karakterine iade edilir.\nYeteneklerini sýfýrlamak istiyor musun?", "Onayla", "Ýptal");
			}
			case 8:
			{
				if(oyuncuData[playerid][oBankaHesapDegisimHakki] < 1) return hataMesaji(playerid, "Hesap numarasý deðiþim hakkýn yok.");
				Dialog_Show(playerid, bankahesapnodegisim, DIALOG_STYLE_INPUT, "Banka Hesap Numarasý", "Yeni banka hesap numaranýzý girin:", "Onayla", "Ýptal");
			}
			case 9:
			{
				if(oyuncuData[playerid][oUcuncuDilHakki] < 1) return hataMesaji(playerid, "Üçüncü dil seçim hakkýn yok.");
				new icerik[512];
				icerik[0] = 0;
				for(new x; x < sizeof(kokendilleri); x++)
				{
					format(icerik, sizeof(icerik), "%s%s\n", icerik, kokendilleri[x][kokendili]);
				}
				Dialog_Show(playerid, ucuncudilsecimi, DIALOG_STYLE_LIST, "Üçüncü Dil", icerik, "Onayla", "Ýptal");
			}
			case 11:
			{
				if(oyuncuData[playerid][oViceCoin] < 300) return hataMesaji(playerid, "300 vCoin sahibi deðilsin, isim deðiþimi ürününü satýn alamazsýn.");
				oyuncuData[playerid][oIsimDegisimHakki]++;
				oyuncuData[playerid][oViceCoin] -= 300;
				SCM_Ex(playerid, RENK_KLASIK, "[!] {FFFFFF}300 vCoin karþýlýðýnda 1 isim deðiþim hakký kazandýn.");
				HesapKaydet(playerid);
			}
			default:Vice_MarketDialog(playerid);
		}
	}
}
else if(dialogid == DIALOG_YETENEKSIFIRLAMA_ONAY)
{
	if(response)
	{
		static eskiexp, eskiseviye, yenipuan;
		eskiexp = oyuncuData[playerid][oLiderlikYetenekEXP] + oyuncuData[playerid][oHirsizlikYetenekEXP] + oyuncuData[playerid][oUretimYetenekEXP] + oyuncuData[playerid][oSurusYetenekEXP] + oyuncuData[playerid][oKimyaYetenekEXP];
		eskiseviye = oyuncuData[playerid][oLiderlikYetenek] * 3 + oyuncuData[playerid][oHirsizlikYetenek] * 3 + oyuncuData[playerid][oUretimYetenek] * 3 + oyuncuData[playerid][oSurusYetenek] * 3 + oyuncuData[playerid][oKimyaYetenek] * 3;
		yenipuan = eskiexp + eskiseviye;
		oyuncuData[playerid][oYetenekPuani] += yenipuan;
		oyuncuData[playerid][oLiderlikYetenek] = 0;
		oyuncuData[playerid][oHirsizlikYetenek] = 0;
		oyuncuData[playerid][oUretimYetenek] = 0;
		oyuncuData[playerid][oSurusYetenek] = 0;
		oyuncuData[playerid][oKimyaYetenek] = 0;
		oyuncuData[playerid][oLiderlikYetenekEXP] = 0;
		oyuncuData[playerid][oHirsizlikYetenekEXP] = 0;
		oyuncuData[playerid][oUretimYetenekEXP] = 0;
		oyuncuData[playerid][oSurusYetenekEXP] = 0;
		oyuncuData[playerid][oKimyaYetenekEXP] = 0;
		OyuncuKaydet(playerid);
		oyuncuData[playerid][oYetenekSifirlamaHakki]--;
		HesapKaydet(playerid);
		SunucuMesaji(playerid, "Yeteneklerini baþarýyla sýfýrladýn. Yetenek puanlarýn iade edildi.");
		Log_Kaydet("loglar/vicemarket.txt", "[%s] %s yetenek sýfýrlama hakkýný kullandý.", Tarih(), OyuncuIsim(playerid));
	}
	else if(!response)
	{
		SunucuMesaji(playerid, "Yeteneklerini sýfýrlamaktan vazgeçtin.");
	}
}
else if(dialogid == DIALOG_BESYPUANI_ALIM)
{
	if(response)
	{
		oyuncuData[playerid][oYetenekPuani] += 4;
		OyuncuKaydet(playerid);
		oyuncuData[playerid][oBesYetenekPuani]--;
		HesapKaydet(playerid);
		SunucuMesaji(playerid, "Dört yetenek puanýný baþarýyla karakterine aktardýn.");
		Log_Kaydet("loglar/vicemarket.txt", "[%s] %s 4 yetenek puaný hakký kullandý.", Tarih(), OyuncuIsim(playerid));
	}
	else if(!response)
	{
		SunucuMesaji(playerid, "Dört yetenek puaný hakkýný kullanmaktan vazgeçtiniz.");
	}
}
else if(dialogid == DIALOG_ONYPUANI_ALIM)
{
	if(response)
	{
		oyuncuData[playerid][oYetenekPuani] += 8;
		OyuncuKaydet(playerid);
		oyuncuData[playerid][oOnYetenekPuani]--;
		HesapKaydet(playerid);
		SunucuMesaji(playerid, "Sekiz yetenek puanýný baþarýyla karakterine aktardýn.");
		Log_Kaydet("loglar/vicemarket.txt", "[%s] %s 8 yetenek puaný hakký kullandý.", Tarih(), OyuncuIsim(playerid));
	}
	else if(!response)
	{
		SunucuMesaji(playerid, "Sekiz yetenek puaný hakkýný kullanmaktan vazgeçtiniz.");
	}
}
else if(dialogid == DIALOG_ONBESYPUANI_ALIM)
{
	if(response)
	{
		oyuncuData[playerid][oYetenekPuani] += 15;
		OyuncuKaydet(playerid);
		oyuncuData[playerid][oOnBesYetenekPuani]--;
		HesapKaydet(playerid);
		SunucuMesaji(playerid, "On beþ yetenek puanýný baþarýyla karakterine aktardýn.");
		Log_Kaydet("loglar/vicemarket.txt", "[%s] %s 15 yetenek puaný hakký kullandý.", Tarih(), OyuncuIsim(playerid));
	}
	else if(!response)
	{
		SunucuMesaji(playerid, "On beþ yetenek puaný hakkýný kullanmaktan vazgeçtiniz.");
	}
}
else if(dialogid == DIALOG_BISIKLET_ALIM)
{
	if(response)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, 957.7657,-1704.1384,13.6137)) return hataMesaji(playerid, "Bisiklet almak için Sunshine Autos'daki bisiklet alma noktasýnda olmalýsýn.");
		ShowModelSelectionMenu(playerid, bisikletler, "Bisiklet Listesi");
	}
	else if(!response)
	{
		SunucuMesaji(playerid, "Bisiklet almaktan vazgeçtiniz.");
	}
}
else if(dialogid == DIALOG_BISIKLET_RENK_BIR)
{
	if(response)
	{
		if(strval(inputtext) < 0 || strval(inputtext) > 255) return ShowPlayerDialog(playerid, DIALOG_BISIKLET_RENK_BIR, DIALOG_STYLE_INPUT, "Hatalý renk girdiniz. Renk kodu 1 ve 255 arasýnda olmalý.\nBisikletinizin birinci rengini girin.", "Bisikletinizin birincil renk kodunu girin.", "Onayla", "Ýptal");
		oyuncuData[playerid][oBisikletRenkBir] = strval(inputtext);
		ShowPlayerDialog(playerid, DIALOG_BISIKLET_RENK_IKI, DIALOG_STYLE_INPUT, "Bisikletinizin ikincil rengini girin", "Bisikletinizin ikinci rengini girin.", "Onayla", "Ýptal");
	}
	else if(!response)
	{
		SunucuMesaji(playerid, "Bisiklet almaktan vazgeçtiniz.");
	}
}
else if(dialogid == DIALOG_BISIKLET_RENK_IKI)
{
	if(response)
	{
		if(strval(inputtext) < 0 || strval(inputtext) > 255) return ShowPlayerDialog(playerid, DIALOG_BISIKLET_RENK_IKI, DIALOG_STYLE_INPUT, "Hatalý renk girdiniz. Renk kodu 1 ve 255 arasýnda olmalý.\nBisikletinizin ikinci rengini girin.", "Bisikletinizin birincil renk kodunu girin.", "Onayla", "Ýptal");
		oyuncuData[playerid][oBisikletRenkIki] = strval(inputtext);
		new bisikletmodel[26], string[128];
		switch(oyuncuData[playerid][oSecilenBisiklet])
		{
			case 481:
			{
				bisikletmodel = "BMX";
			}
			case 509:
			{
				bisikletmodel = "Bike";
			}
			case 510:
			{
				bisikletmodel = "Mountain Bike";
			}
		}
		format(string, sizeof(string), "%s model bisikleti açmak istiyor musun?\nRenk 1: %d\nRenk 2: %d", bisikletmodel, oyuncuData[playerid][oBisikletRenkBir], oyuncuData[playerid][oBisikletRenkIki]);
		ShowPlayerDialog(playerid, DIALOG_BISIKLET_ALIM_ONAY, DIALOG_STYLE_MSGBOX, "Bisiklet Alýmý Onay Kutucuðu", string, "Onayla", "Ýptal");
	}
	else if(!response)
	{
		SunucuMesaji(playerid, "Bisiklet almaktan vazgeçtiniz.");
	}
}
else if(dialogid == DIALOG_BISIKLET_ALIM_ONAY)
{
	if(response)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, 957.7657,-1704.1384,13.6137)) return hataMesaji(playerid, "Bisiklet almak için Sunshine Autos'daki bisiklet alma noktasýnda olmalýsýn.");
		switch(oyuncuData[playerid][oSecilenBisiklet])
		{
			case 481:
			{
				Arac_Yarat(oyuncuData[playerid][oID], 481, 954.2031,-1745.8224,14.5469,83.1363, oyuncuData[playerid][oBisikletRenkBir], oyuncuData[playerid][oBisikletRenkIki], 0);
				oyuncuData[playerid][oBisikletHakki]--;
				HesapKaydet(playerid);
				SunucuMesaji(playerid, "Sunshine Autos park alanýnda yeni bisikletin seni bekliyor!");
			}
			case 509:
			{
				Arac_Yarat(oyuncuData[playerid][oID], 509, 954.2031,-1745.8224,14.5469,83.1363, oyuncuData[playerid][oBisikletRenkBir], oyuncuData[playerid][oBisikletRenkIki], 0);
				oyuncuData[playerid][oBisikletHakki]--;
				HesapKaydet(playerid);
				SunucuMesaji(playerid, "Sunshine Autos park alanýnda yeni bisikletin seni bekliyor!");
			}
			case 510:
			{
				Arac_Yarat(oyuncuData[playerid][oID], 510, 954.2031,-1745.8224,14.5469,83.1363, oyuncuData[playerid][oBisikletRenkBir], oyuncuData[playerid][oBisikletRenkIki], 0);
				oyuncuData[playerid][oBisikletHakki]--;
				HesapKaydet(playerid);
				SunucuMesaji(playerid, "Sunshine Autos park alanýnda yeni bisikletin seni bekliyor!");
			}
		}
		Log_Kaydet("loglar/vicemarket.txt", "[%s] %s bisiklet hakkýný kullandý.", Tarih(), OyuncuIsim(playerid));
	}
	else if(!response)
	{
		SunucuMesaji(playerid, "Bisiklet almaktan vazgeçtiniz.");
	}
}
else if(dialogid == DIALOG_TELEFON_DEGISIM)
{
	if(response)
	{
		if(isnull(inputtext)) return ShowPlayerDialog(playerid, DIALOG_TELEFON_DEGISIM, DIALOG_STYLE_INPUT, "Telefon Deðiþimi", "Numara kýsmýný boþ býrakamazsýn!\nAþaðýdaki kutucuða 7 haneli yeni telefon numaraný gir.", "Devam", "Ýptal");
		if(strval(inputtext) < 1000000 || strval(inputtext) > 9999999) return ShowPlayerDialog(playerid, DIALOG_TELEFON_DEGISIM, DIALOG_STYLE_INPUT, "Telefon Deðiþimi", "7 haneli bir telefon numarasý girmelisin!\nAþaðýdaki kutucuða 7 haneli yeni telefon numaraný gir.", "Devam", "Ýptal");
		oyuncuData[playerid][vicemarketyenitelefon] = strval(inputtext);
		new string[128];
		format(string, sizeof(string), "Þu anki telefon numaranýz: %d\nYeni numaranýz %d olacak, onaylýyor musunuz?", oyuncuData[playerid][oTelefonNumarasi], oyuncuData[playerid][vicemarketyenitelefon]);
		ShowPlayerDialog(playerid, DIALOG_TELEFON_DEGISIM_ONAY, DIALOG_STYLE_MSGBOX, "Telefon Deðiþim Onay Kutucuðu", string, "Onayla", "Ýptal");
	}
	else return SunucuMesaji(playerid, "Telefon numarasý deðiþtirmekten vazgeçtiniz.");
}
else if(dialogid == DIALOG_TELEFON_DEGISIM_ONAY)
{
	if(response)
	{
		new query[130];
		mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM oyuncular WHERE TelefonNumarasi = '%d'", oyuncuData[playerid][vicemarketyenitelefon]);
		mysql_tquery(g_SQL, query, "premiumtelnodegisim", "dd", playerid, oyuncuData[playerid][vicemarketyenitelefon]);
	}
	else return SunucuMesaji(playerid, "Telefon numarasý deðiþtirmekten vazgeçtiniz.");
}
else if(dialogid == DIALOG_ISIM_DEGISIM)
{
	if(response)
	{
		if(isnull(inputtext)) return ShowPlayerDialog(playerid, DIALOG_ISIM_DEGISIM, DIALOG_STYLE_INPUT, "Ýsim Deðiþimi", "Ýsim kýsmýný boþ býrakamazsýn!\nAþaðýdaki kutucuða yeni ismini gir.", "Devam", "Ýptal");
		if(strlen(inputtext) > 24 || strlen(inputtext) < 4) return ShowPlayerDialog(playerid, DIALOG_ISIM_DEGISIM, DIALOG_STYLE_INPUT, "Ýsim Deðiþimi", "Ýsim 32 karakterden büyük, 4 karakterden küçük olamaz!\nAþaðýdaki kutucuða yeni ismini gir.", "Devam", "Ýptal");
		format(oyuncuData[playerid][vicemarketyeniisim], 24, inputtext);
		new string[128];
		format(string, sizeof(string), "Þu anki isminiz: %s\nYeni isminiz %s olacak, onaylýyor musunuz?", oyuncuData[playerid][oIsim], oyuncuData[playerid][vicemarketyeniisim]);
		ShowPlayerDialog(playerid, DIALOG_ISIM_DEGISIM_ONAY, DIALOG_STYLE_MSGBOX, "Ýsim Deðiþimi Onay Kutucuðu", string, "Onayla", "Ýptal");
	}
	else return SunucuMesaji(playerid, "Ýsim deðiþtirmekten vazgeçtiniz.");
}
else if(dialogid == DIALOG_ISIM_DEGISIM_ONAY)
{
	if(response)
	{
		new query[140], alttire = 0;
		if(!RolePlayIsimKontrol(oyuncuData[playerid][vicemarketyeniisim])) return hataMesaji(playerid, "Girilen isim roleplay formatýna uygun deðil. Örn: Vice_Roleplay");
		for (new i = 0, len = strlen(oyuncuData[playerid][vicemarketyeniisim]); i < len; i ++) 
		{
			if(oyuncuData[playerid][vicemarketyeniisim][i] == '_') alttire++;
		}
		if(alttire > 1) return hataMesaji(playerid, "Girilen isim roleplay formatýna uygun deðil. Örn: Vice_Roleplay");
		mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM oyuncular WHERE isim = '%e'", oyuncuData[playerid][vicemarketyeniisim]);
		mysql_tquery(g_SQL, query, "premiumisimdegisimi", "ds", playerid, oyuncuData[playerid][vicemarketyeniisim]);
	}
	else return SunucuMesaji(playerid, "Ýsim deðiþtirmekten vazgeçtiniz.");
}
else if(dialogid == DIALOG_PLAKA_DEGISIM)
{
	if(response)
	{
		if(!IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Plaka deðiþimi için bir araçta olmalýsýn.");
		if(isnull(inputtext)) return ShowPlayerDialog(playerid, DIALOG_PLAKA_DEGISIM, DIALOG_STYLE_INPUT, "Plaka Deðiþimi", "Plakayý boþ býrakamazsýn!\nAþaðýdaki kutucuða yeni plakaný gir.", "Devam", "Ýptal");
		if(strlen(inputtext) > 12) return ShowPlayerDialog(playerid, DIALOG_PLAKA_DEGISIM, DIALOG_STYLE_INPUT, "Plaka Deðiþimi", "Plaka 12 karakterden büyük olamaz!\nAþaðýdaki kutucuða yeni plakaný gir.", "Devam", "Ýptal");
		format(oyuncuData[playerid][vicemarketyeniplaka], 12, inputtext);
		new string[128];
		format(string, sizeof(string), "Araç plakanýzý %s olarak deðiþtirmek istiyor musunuz?", oyuncuData[playerid][vicemarketyeniplaka]);
		ShowPlayerDialog(playerid, DIALOG_PLAKA_DEGISIM_ONAY, DIALOG_STYLE_MSGBOX, "Plaka Deðiþimi Onay Kutucuðu", string, "Onayla", "Ýptal");
	}
	else return SunucuMesaji(playerid, "Plaka deðiþtirmekten vazgeçtiniz.");
}
else if(dialogid == DIALOG_PLAKA_DEGISIM_ONAY)
{
	if(response)
	{
		if(!IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Plaka deðiþimi için bir araçta olmalýsýn.");
		new query[110], aracid;
		aracid = GetPlayerVehicleID(playerid);
		if(!Arac_SahipKontrol(playerid, aracid)) return hataMesaji(playerid, "Bu aracýn sahibi deðilsin, plaka deðiþimini bu araçta kullanamazsýn.");
		mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM araclar WHERE aracPlaka = '%e'", oyuncuData[playerid][vicemarketyeniplaka]);
		mysql_tquery(g_SQL, query, "premiumplakadegisimi", "dds", playerid, aracid, oyuncuData[playerid][vicemarketyeniplaka]);
	}
	else return SunucuMesaji(playerid, "Plaka deðiþtirmekten vazgeçtiniz.");
}
else if(dialogid == DIALOG_ARAC_GELISTIR)
{
	if(response)
	{
		new aracid = GetPlayerVehicleID(playerid);
		switch(listitem)
		{
			case 0:
			{
				if(!IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Araçta olmadýðýn için iþlem gerçekleþtirilemedi.");
				if(AracBilgi[aracid][alarmseviye] == 5) return hataMesaji(playerid, "Aracýnýn alarmý zaten en yüksek seviyede, yükseltemezsin.");
				switch(AracBilgi[aracid][alarmseviye])
				{
					case 0:
					{
						if(oyuncuData[playerid][oPara] < 1000) return hataMesaji(playerid, "Bu iþlem için yeterli miktarda paran yok.");
						AracBilgi[aracid][alarmseviye]++;
						ParaEkle(playerid, -1000);
						SunucuMesaji(playerid, "Geliþtirmeyi aracýna baþarýyla ekledin.");
					}
					case 1:
					{
						if(oyuncuData[playerid][oPara] < 2000) return hataMesaji(playerid, "Bu iþlem için yeterli miktarda paran yok.");
						AracBilgi[aracid][alarmseviye]++;
						ParaEkle(playerid, -2000);
						SunucuMesaji(playerid, "Geliþtirmeyi aracýna baþarýyla ekledin.");
					}
					case 2:
					{
						if(oyuncuData[playerid][oPara] < 4000) return hataMesaji(playerid, "Bu iþlem için yeterli miktarda paran yok.");
						AracBilgi[aracid][alarmseviye]++;
						ParaEkle(playerid, -4000);
						SunucuMesaji(playerid, "Geliþtirmeyi aracýna baþarýyla ekledin.");
					}
					case 3:
					{
						if(oyuncuData[playerid][oPara] < 6000) return hataMesaji(playerid, "Bu iþlem için yeterli miktarda paran yok.");
						AracBilgi[aracid][alarmseviye]++;
						ParaEkle(playerid, -6000);
						SunucuMesaji(playerid, "Geliþtirmeyi aracýna baþarýyla ekledin.");
					}
					case 4:
					{
						if(oyuncuData[playerid][oPara] < 8000) return hataMesaji(playerid, "Bu iþlem için yeterli miktarda paran yok.");
						AracBilgi[aracid][alarmseviye]++;
						ParaEkle(playerid, -8000);
						SunucuMesaji(playerid, "Geliþtirmeyi aracýna baþarýyla ekledin.");
					}
				}
			}
			case 1:
			{
				if(!IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Araçta olmadýðýn için iþlem gerçekleþtirilemedi.");
				if(AracBilgi[aracid][kilitseviye] == 5) return hataMesaji(playerid, "Aracýnýn kilidi zaten en yüksek seviyede, yükseltemezsin.");
				switch(AracBilgi[aracid][kilitseviye])
				{
					case 0:
					{
						if(oyuncuData[playerid][oPara] < 1000) return hataMesaji(playerid, "Bu iþlem için yeterli miktarda paran yok.");
						AracBilgi[aracid][kilitseviye]++;
						ParaEkle(playerid, -1000);
						SunucuMesaji(playerid, "Geliþtirmeyi aracýna baþarýyla ekledin.");
					}
					case 1:
					{
						if(oyuncuData[playerid][oPara] < 2500) return hataMesaji(playerid, "Bu iþlem için yeterli miktarda paran yok.");
						AracBilgi[aracid][kilitseviye]++;
						ParaEkle(playerid, -2500);
						SunucuMesaji(playerid, "Geliþtirmeyi aracýna baþarýyla ekledin.");
					}
					case 2:
					{
						if(oyuncuData[playerid][oPara] < 4000) return hataMesaji(playerid, "Bu iþlem için yeterli miktarda paran yok.");
						AracBilgi[aracid][kilitseviye]++;
						ParaEkle(playerid, -4000);
						SunucuMesaji(playerid, "Geliþtirmeyi aracýna baþarýyla ekledin.");
					}
					case 3:
					{
						if(oyuncuData[playerid][oPara] < 5000) return hataMesaji(playerid, "Bu iþlem için yeterli miktarda paran yok.");
						AracBilgi[aracid][kilitseviye]++;
						ParaEkle(playerid, -5000);
						SunucuMesaji(playerid, "Geliþtirmeyi aracýna baþarýyla ekledin.");
					}
					case 4:
					{
						if(oyuncuData[playerid][oPara] < 7000) return hataMesaji(playerid, "Bu iþlem için yeterli miktarda paran yok.");
						AracBilgi[aracid][kilitseviye]++;
						ParaEkle(playerid, -7000);
						SunucuMesaji(playerid, "Geliþtirmeyi aracýna baþarýyla ekledin.");
					}
				}
			}
			case 2:
			{
				if(!IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Araçta olmadýðýn için iþlem gerçekleþtirilemedi.");
				if(AracBilgi[aracid][aracSigorta] == 5) return hataMesaji(playerid, "Aracýn zaten sahip olabileceði maksimum sigortaya sahip, daha fazlasýný alamazsýn.");
				if(oyuncuData[playerid][oPara] < 1000) return hataMesaji(playerid, "Sigorta alýmý için yeterli miktarda paran yok.");
				AracBilgi[aracid][aracSigorta]++;
				ParaEkle(playerid, -1000);
				SunucuMesaji(playerid, "Aracýna baþarýyla sigorta eklettin. Aracýnýn %d mevcut sigortasý var.", AracBilgi[aracid][aracSigorta]);
			}
		}
	}
}
else if(dialogid == DIALOG_PDPC_KISI_SORGULA)
{
	if(!response) return 0;
	new query[104];
	mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `oyuncular` WHERE `isim` = '%e'", inputtext);
	mysql_tquery(g_SQL, query, "PDPCKisiSorgula", "d", playerid);
}
else if(dialogid == DIALOG_ARAC_SISTEME_SAT)
{
	if(!response) return 0;
	if(oyuncuData[playerid][oSatisYapiyor] == true) return hataMesaji(playerid, "Þu anda bir satýþ iþlemi gerçekleþtiriyorsunuz.");
	if(!IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bir araçta deðilsin.");
	new aracid = GetPlayerVehicleID(playerid), aracmodeli = GetVehicleModel(aracid), index = FiyatIndexCek(GetVehicleModel(aracid)), alacagipara;
	if(oyuncuData[playerid][oEkonomiPaketi] < 1)
	{
		alacagipara = YuzdeHesapla(SatilikAraclar[index][1], SERVER_YUZDE);
	}
	else
	{
		alacagipara = YuzdeHesapla(SatilikAraclar[index][1], VIP_YUZDE);
	}
	if(!Arac_SahipKontrol(playerid, aracid)) return hataMesaji(playerid, "Bu aracýn sahibi deðilsin.");
	Arac_Sil(Arac_IDBul(aracid));
	ParaEkle(playerid, alacagipara, YONTEM_ARAC_SISTEME_SAT);
	SunucuMesaji(playerid, "%s model aracýný %d dolar karþýlýðýnda galeriye sattýn.", AracModel(aracmodeli), alacagipara);
}
else if(dialogid == DIALOG_TRAILER1 || dialogid == DIALOG_TRAILER2 || dialogid == DIALOG_TRAILER3 || dialogid == DIALOG_TRAILER4)
{
	if(response || !response)
	{
		switch(dialogid)
		{
			case DIALOG_TRAILER1: ShowPlayerDialog(playerid, DIALOG_TRAILER1, DIALOG_STYLE_MSGBOX, "> Nitro Roleplay'e Hoþ Geldin", "Sunucumuza hoþ geldin. Eðer bu ekraný görüyorsan, artýk bir karakter oluþturma hakkýna sahipsin demektir.\nKarakterini yapýlandýrýrken yapacaðýn rollerin planýný gözden geçirmelisin.\nKarakter yapýlandýrma paketi satýn almak dýþýnda karakterinin özelliklerini deðiþtirmen pek mümkün deðil.\nSeçimlerini dikkatli yapmalýsýn.", "Anladým", "");
			case DIALOG_TRAILER2: ShowPlayerDialog(playerid, DIALOG_TRAILER2, DIALOG_STYLE_MSGBOX, "> Nitro Roleplay'e Hoþ Geldin", "Little Italy...\
				\nÝtalyan-Amerikan Kültür Derneði katkýlarýyla oluþturulmuþ mükemmel bir yer.\
				\nGüzel vakit geçirmek istiyorsan buraya uðrayabilirsin.\
				\nHer ihtimale karþý ücra köþelere dikkat etsen iyi olur...", "Anladým", "");
			case DIALOG_TRAILER3: ShowPlayerDialog(playerid, DIALOG_TRAILER3, DIALOG_STYLE_MSGBOX, "> Nitro Roleplay'e Hoþ Geldin", "Sunshine Autos, þehrin en büyük galerisi.\
				\nEðer bir araç sahibi olmak istiyorsan ilk zamanlarýnda yolun buraya mutlaka düþecektir.\
				\nParaný dikkatli harcamaya özen göstersen iyi olur, bu þehirde para pek kolay kazanýlmýyor.", "Anladým", "");
			case DIALOG_TRAILER4: ShowPlayerDialog(playerid, DIALOG_TRAILER4, DIALOG_STYLE_MSGBOX, "> Nitro Roleplay'e Hoþ Geldin", "Ocean Caddesi ve muhteþem sahil evleri...\
				\nSana anlatmadýðýmýz pek çok þey daha var, bunlarý kendin keþfetmeye ne dersin?\
				\nVice Þehrine hoþ geldin! Güzel günler bizi bekliyor...\
				\n\n10 saniye içinde karakter özelleþtirme ekranýna gönderileceksin.", "Anladým", "");
		}
	}
}

else if(dialogid == DIALOG_PDPC_PLAKASORGU)
{
    if(!response)
    {
        PlayerPlaySound(playerid, 6400, 0.0, 0.0, 0.0);
    }
    else
    {
        new query[95];
        mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM araclar WHERE aracPlaka = '%e'", inputtext);
        mysql_tquery(g_SQL, query, "PDPCPlakaSorgula", "d", playerid);
        Plaka_CezaKontrol(playerid, inputtext);
    }
}

else if(dialogid == DIALOG_ISYERI_SORGULA)
{
	if(response)
	{
		if(strval(inputtext) < 0 || isnull(inputtext)) return DialogGoster(playerid, DIALOG_ISYERI_SORGULA, DIALOG_STYLE_INPUT, "Ýþyeri Sorgulama", "Sorgulamak istediðiniz iþyerinin kapý numarasýný girin.", "Onayla", "Ýptal");
		if(IsyeriBilgi[strval(inputtext)][isyeriKullanimda] != true) return DialogGoster(playerid, DIALOG_ISYERI_SORGULA, DIALOG_STYLE_INPUT, "Ýþyeri Sorgulama", "Veritabanýnda böyle bir iþyeri bulunamadý.\nSorgulamak istediðiniz iþyerinin kapý numarasýný girin.", "Onayla", "Ýptal");
		new string[256], id = strval(inputtext);
		format(string, sizeof(string), "Kapý NO: %d\nAdý: %s\nVergi Borcu: %s\nSahibi: %s", IsyeriBilgi[id][isyeriID], IsyeriBilgi[id][isyeriAd], NumaraFormati(IsyeriBilgi[id][isyeriVergi]), IsyeriBilgi[id][isyeriSahipIsim]);
		DialogGoster(playerid, 0, DIALOG_STYLE_MSGBOX, "Ýþyeri Bilgileri", string, "Tamam", "");
	}
}
else if(dialogid == DIALOG_GIZLIDEPOBIR)
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				if(oyuncuData[playerid][oPara] < 50) return hataMesaji(playerid, "Yeterli miktarda paranýz yok.");
				if(ItemVarMi(playerid, 61) >= 6) return hataMesaji(playerid, "Bu maddeden daha fazla üstüne alamazsýn. Elindekileri kullan.");
				ItemEkle(playerid, 61, 1);
				ParaEkle(playerid, -50);
			}
			case 1:
			{
				if(oyuncuData[playerid][oPara] < 60) return hataMesaji(playerid, "Yeterli miktarda paranýz yok.");
				if(ItemVarMi(playerid, 67) >= 1) return hataMesaji(playerid, "Bu maddeden daha fazla üstüne alamazsýn. Elindekileri kullan.");
				ItemEkle(playerid, 67, 1);
				ParaEkle(playerid, -60);
			}
			case 2:
			{
				if(oyuncuData[playerid][oPara] < 60) return hataMesaji(playerid, "Yeterli miktarda paranýz yok.");
				if(ItemVarMi(playerid, 70) >= 1) return hataMesaji(playerid, "Bu maddeden daha fazla üstüne alamazsýn. Elindekileri kullan.");
				ItemEkle(playerid, 70, 1);
				ParaEkle(playerid, -60);
			}
			case 3:
			{
				if(oyuncuData[playerid][oPara] < 55) return hataMesaji(playerid, "Yeterli miktarda paranýz yok.");
				if(ItemVarMi(playerid, 85) >= 1) return hataMesaji(playerid, "Bu maddeden daha fazla üstüne alamazsýn. Elindekileri kullan.");
				ItemEkle(playerid, 85, 1);
				ParaEkle(playerid, -55);
			}
			case 4:
			{
				if(oyuncuData[playerid][oPara] < 75) return hataMesaji(playerid, "Yeterli miktarda paranýz yok.");
				if(ItemVarMi(playerid, 65) >= 1) return hataMesaji(playerid, "Bu maddeden daha fazla üstüne alamazsýn. Elindekileri kullan.");
				ItemEkle(playerid, 65, 1);
				ParaEkle(playerid, -75);
			}
			case 5:
			{
				if(oyuncuData[playerid][oPara] < 75) return hataMesaji(playerid, "Yeterli miktarda paranýz yok.");
				if(ItemVarMi(playerid, 66) >= 2) return hataMesaji(playerid, "Bu maddeden daha fazla üstüne alamazsýn. Elindekileri kullan.");
				ItemEkle(playerid, 66, 1);
				ParaEkle(playerid, -75);
			}
			case 6:
			{
				if(oyuncuData[playerid][oPara] < 85) return hataMesaji(playerid, "Yeterli miktarda paranýz yok.");
				if(ItemVarMi(playerid, 68) >= 1) return hataMesaji(playerid, "Bu maddeden daha fazla üstüne alamazsýn. Elindekileri kullan.");
				ItemEkle(playerid, 68, 1);
				ParaEkle(playerid, -85);
			}
			case 7:
			{
				if(oyuncuData[playerid][oPara] < 90) return hataMesaji(playerid, "Yeterli miktarda paranýz yok.");
				if(ItemVarMi(playerid, 69) >= 1) return hataMesaji(playerid, "Bu maddeden daha fazla üstüne alamazsýn. Elindekileri kullan.");
				ItemEkle(playerid, 69, 1);
				ParaEkle(playerid, -90);
			}
		}
	}
}
else if(dialogid == DIALOG_GIZLIDEPOIKI)
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				if(oyuncuData[playerid][oPara] < 85) return hataMesaji(playerid, "Yeterli miktarda paranýz yok.");
				if(ItemVarMi(playerid, 71) >= 1) return hataMesaji(playerid, "Bu maddeden daha fazla üstüne alamazsýn. Elindekileri kullan.");
				ItemEkle(playerid, 71, 1);
				ParaEkle(playerid, -85);
			}
			case 1:
			{
				if(oyuncuData[playerid][oPara] < 85) return hataMesaji(playerid, "Yeterli miktarda paranýz yok.");
				if(ItemVarMi(playerid, 72) >= 1) return hataMesaji(playerid, "Bu maddeden daha fazla üstüne alamazsýn. Elindekileri kullan.");
				ItemEkle(playerid, 72, 1);
				ParaEkle(playerid, -85);
			}
			case 2:
			{
				if(oyuncuData[playerid][oPara] < 90) return hataMesaji(playerid, "Yeterli miktarda paranýz yok.");
				if(ItemVarMi(playerid, 78) >= 1) return hataMesaji(playerid, "Bu maddeden daha fazla üstüne alamazsýn. Elindekileri kullan.");
				ItemEkle(playerid, 78, 1);
				ParaEkle(playerid, -90);
			}
			case 3:
			{
				if(oyuncuData[playerid][oPara] < 90) return hataMesaji(playerid, "Yeterli miktarda paranýz yok.");
				if(ItemVarMi(playerid, 79) >= 2) return hataMesaji(playerid, "Bu maddeden daha fazla üstüne alamazsýn. Elindekileri kullan.");
				ItemEkle(playerid, 79, 1);
				ParaEkle(playerid, -90);
			}
			case 4:
			{
				if(oyuncuData[playerid][oPara] < 90) return hataMesaji(playerid, "Yeterli miktarda paranýz yok.");
				if(ItemVarMi(playerid, 73) >= 1) return hataMesaji(playerid, "Bu maddeden daha fazla üstüne alamazsýn. Elindekileri kullan.");
				ItemEkle(playerid, 73, 1);
				ParaEkle(playerid, -90);
			}
			case 5:
			{
				if(oyuncuData[playerid][oPara] < 90) return hataMesaji(playerid, "Yeterli miktarda paranýz yok.");
				if(ItemVarMi(playerid, 74) >= 1) return hataMesaji(playerid, "Bu maddeden daha fazla üstüne alamazsýn. Elindekileri kullan.");
				ItemEkle(playerid, 74, 1);
				ParaEkle(playerid, -90);
			}
			case 6:
			{
				if(oyuncuData[playerid][oPara] < 90) return hataMesaji(playerid, "Yeterli miktarda paranýz yok.");
				if(ItemVarMi(playerid, 75) >= 1) return hataMesaji(playerid, "Bu maddeden daha fazla üstüne alamazsýn. Elindekileri kullan.");
				ItemEkle(playerid, 75, 1);
				ParaEkle(playerid, -90);
			}
			case 7:
			{
				if(oyuncuData[playerid][oPara] < 90) return hataMesaji(playerid, "Yeterli miktarda paranýz yok.");
				if(ItemVarMi(playerid, 76) >= 1) return hataMesaji(playerid, "Bu maddeden daha fazla üstüne alamazsýn. Elindekileri kullan.");
				ItemEkle(playerid, 76, 1);
				ParaEkle(playerid, -90);
			}
			case 8:
			{
				if(oyuncuData[playerid][oPara] < 90) return hataMesaji(playerid, "Yeterli miktarda paranýz yok.");
				if(ItemVarMi(playerid, 77) >= 1) return hataMesaji(playerid, "Bu maddeden daha fazla üstüne alamazsýn. Elindekileri kullan.");
				ItemEkle(playerid, 77, 1);
				ParaEkle(playerid, -90);
			}
		}
	}
}
else if(dialogid == DIALOG_GIZLIDEPOUC)
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				if(oyuncuData[playerid][oPara] < 95) return hataMesaji(playerid, "Yeterli miktarda paranýz yok.");
				if(ItemVarMi(playerid, 62) >= 1) return hataMesaji(playerid, "Bu maddeden daha fazla üstüne alamazsýn. Elindekileri kullan.");
				ItemEkle(playerid, 62, 1);
				ParaEkle(playerid, -95);
			}
			case 1:
			{
				if(oyuncuData[playerid][oPara] < 100) return hataMesaji(playerid, "Yeterli miktarda paranýz yok.");
				if(ItemVarMi(playerid, 63) >= 1) return hataMesaji(playerid, "Bu maddeden daha fazla üstüne alamazsýn. Elindekileri kullan.");
				ItemEkle(playerid, 63, 1);
				ParaEkle(playerid, -100);
			}
			case 2:
			{
				if(oyuncuData[playerid][oPara] < 100) return hataMesaji(playerid, "Yeterli miktarda paranýz yok.");
				if(ItemVarMi(playerid, 80) >= 1) return hataMesaji(playerid, "Bu maddeden daha fazla üstüne alamazsýn. Elindekileri kullan.");
				ItemEkle(playerid, 80, 1);
				ParaEkle(playerid, -100);
			}
			case 3:
			{
				if(oyuncuData[playerid][oPara] < 90) return hataMesaji(playerid, "Yeterli miktarda paranýz yok.");
				if(ItemVarMi(playerid, 81) >= 1) return hataMesaji(playerid, "Bu maddeden daha fazla üstüne alamazsýn. Elindekileri kullan.");
				ItemEkle(playerid, 81, 1);
				ParaEkle(playerid, -90);
			}
			case 4:
			{
				if(oyuncuData[playerid][oPara] < 95) return hataMesaji(playerid, "Yeterli miktarda paranýz yok.");
				if(ItemVarMi(playerid, 83) >= 1) return hataMesaji(playerid, "Bu maddeden daha fazla üstüne alamazsýn. Elindekileri kullan.");
				ItemEkle(playerid, 83, 1);
				ParaEkle(playerid, -95);
			}
			case 5:
			{
				if(oyuncuData[playerid][oPara] < 100) return hataMesaji(playerid, "Yeterli miktarda paranýz yok.");
				if(ItemVarMi(playerid, 64) >= 1) return hataMesaji(playerid, "Bu maddeden daha fazla üstüne alamazsýn. Elindekileri kullan.");
				ItemEkle(playerid, 64, 1);
				ParaEkle(playerid, -100);
			}
			case 6:
			{
				if(oyuncuData[playerid][oPara] < 100) return hataMesaji(playerid, "Yeterli miktarda paranýz yok.");
				if(ItemVarMi(playerid, 82) >= 1) return hataMesaji(playerid, "Bu maddeden daha fazla üstüne alamazsýn. Elindekileri kullan.");
				ItemEkle(playerid, 82, 1);
				ParaEkle(playerid, -100);
			}
		}
	}
}
else if(dialogid == DIALOG_AT_BAHIS)
{
	if(response)
	{
		if(isnull(inputtext)) return ShowPlayerDialog(playerid, DIALOG_AT_BAHIS, DIALOG_STYLE_INPUT, "At Yarýþý", "Boþ býrakýlamaz.\nAt yarýþýnda oynamak istediðiniz bahsi girin.\nMinimum $50, maksimum $1500 bahis oynayabilirsiniz.", "Devam", "Ýptal");
		if(strval(inputtext) < 50 || strval(inputtext) > 1500) return ShowPlayerDialog(playerid, DIALOG_AT_BAHIS, DIALOG_STYLE_INPUT, "At Yarýþý", "Hatalý bahis. Minimum 50, maksimum 1500 girmelisin.\nAt yarýþýnda oynamak istediðiniz bahsi girin.\nMinimum $50, maksimum $1500 bahis oynayabilirsiniz.", "Devam", "Ýptal");
		SetPVarInt(playerid, "atbahis", strval(inputtext));
		ShowPlayerDialog(playerid, DIALOG_AT_SECIM, DIALOG_STYLE_LIST, "At Seçimi", "Capo\nCortez\nMercedes\nSally Sandbags\nMayhew\nNick Nack Noo\nSparky Warky\nKing Simba", "Seç", "Ýptal");
	}
	else if(!response)
	{
		SunucuMesaji(playerid, "At yarýþý oynamaktan vazgeçtiniz.");
	}
}
else if(dialogid == DIALOG_ARAC_RADYO)
{
	if(response)
	{
		if(!IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Araçta olmalýsýnýz.");
		new aracid = Arac_IDBul(GetPlayerVehicleID(playerid));
		switch(listitem)
		{
			case 0:
			{
				AracRadyoDurdur(aracid);
				cmd(playerid, 1, "araç radyosunu kapatýr.");
			}
			case 1:
			{
				AracRadyoBaslat(aracid, "http://somafm.com/jollysoul.pls");
				cmd(playerid, 1, "araç radyosunu açar.");
			}
			case 2:
			{
				AracRadyoBaslat(aracid, "http://somafm.com/thetrip.pls");
				cmd(playerid, 1, "araç radyosunu açar.");
			}
			case 3:
			{
				AracRadyoBaslat(aracid, "http://somafm.com/xmasrocks.pls");
				cmd(playerid, 1, "araç radyosunu açar.");
			}
			case 4:
			{
				AracRadyoBaslat(aracid, "http://somafm.com/lush.pls");
				cmd(playerid, 1, "araç radyosunu açar.");
			}
			case 5:
			{
				AracRadyoBaslat(aracid, "http://somafm.com/u80s.pls");
				cmd(playerid, 1, "araç radyosunu açar.");
			}
			case 6:
			{
				AracRadyoBaslat(aracid, "http://somafm.com/fluid.pls");
				cmd(playerid, 1, "araç radyosunu açar.");
			}
			case 7:
			{
				AracRadyoBaslat(aracid, "http://somafm.com/indiepop.pls");
				cmd(playerid, 1, "araç radyosunu açar.");
			}
			case 8:
			{
				AracRadyoBaslat(aracid, "http://somafm.com/groovesalad.pls");
				cmd(playerid, 1, "araç radyosunu açar.");
			}
			case 9:
			{
				AracRadyoBaslat(aracid, "http://somafm.com/brfm.pls");
				cmd(playerid, 1, "araç radyosunu açar.");
			}
			case 10:
			{
				ShowPlayerDialog(playerid, DIALOG_ARAC_RADYO_URL, DIALOG_STYLE_INPUT, "URL Girin", "Aþaðýya açmak istediðiniz müzik URLsini girin.", "Oynat", "Ýptal");
			}
		}
	}
}
else if(dialogid == DIALOG_ARAC_RADYO_URL)
{
	if(response)
	{
		if(strlen(inputtext) > 128) return hataMesaji(playerid, "En fazla 128 karakterli bir link koyabilirsin.");
		if(strfind(inputtext, "http://") == -1 && strfind(inputtext, "https://") == -1) return hataMesaji(playerid, "Bu geçerli bir link deðil.");
		new aracid = Arac_IDBul(GetPlayerVehicleID(playerid));
		AracRadyoBaslat(aracid, inputtext);
	}
}
return true;
}

public Asansor(playerid, kat)
{
	switch(kat) {
		case 0: SetPlayerPos(playerid, 1493.4991, -1791.1809, 2981.3540), SetPlayerFacingAngle(playerid, 90);
		case 1: SetPlayerPos(playerid, 1493.6021, -1786.3867, 2676.0129), SetPlayerFacingAngle(playerid, 90);
		case 2: SetPlayerPos(playerid, 1482.5685, -1848.7686, 3645.6270), SetPlayerFacingAngle(playerid, 270);
		case 3: SetPlayerPos(playerid, 193.8061,1915.0837,529.9813), SetPlayerFacingAngle(playerid, 90);
		case 4: SetPlayerPos(playerid, 2018.3427,1584.6659,6753.0479), SetPlayerFacingAngle(playerid, 90);
		case 5: SetPlayerPos(playerid, 1705.0577,946.5693,1129.9878), SetPlayerFacingAngle(playerid, 270);
		case 6: SetPlayerPos(playerid, 1705.0577,946.5693,1129.9878), SetPlayerFacingAngle(playerid, 270);
		case 7: SetPlayerPos(playerid, 1705.0577,946.5693,1129.9878), SetPlayerFacingAngle(playerid, 90);
		case 8: SetPlayerPos(playerid, 2268.0027,2449.0930,-7.1953), SetPlayerFacingAngle(playerid, 90);
		case 9: SetPlayerPos(playerid, 2268.0557,2448.6104,3.5313), SetPlayerFacingAngle(playerid, 270);
		case 10: SetPlayerPos(playerid, 1579.3479,-1677.8439,62.2155), SetPlayerFacingAngle(playerid, 90);
		case 11: SetPlayerPos(playerid, 1570.0018,-1678.4226,25.1468), SetPlayerFacingAngle(playerid, 180);
	}
	oyuncuData[playerid][oAsansor] = -1;
	TogglePlayerControllable(playerid, false);
	SetTimerEx("oyuncucoz", 2000, false, "i", playerid);
	SetPlayerInterior(playerid, 1);
	if(kat == 10) SetPlayerVirtualWorld(playerid, 31457);
	else if(kat == 5) SetPlayerVirtualWorld(playerid, 95678);
	else if(kat == 6) SetPlayerVirtualWorld(playerid, 95679);
	else if(kat == 7) SetPlayerVirtualWorld(playerid, 95680);
	else if(kat == 11) SetPlayerVirtualWorld(playerid, 0), SetPlayerInterior(playerid, 0);
	else if(kat == 9) SetPlayerInterior(playerid, 0), SetPlayerVirtualWorld(playerid, pdgarajvw);
	else if(kat == 8) SetPlayerInterior(playerid, 0), SetPlayerVirtualWorld(playerid, pdgarajvw);
	else SetPlayerVirtualWorld(playerid, pdgarajvw);
	return 1;
}

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
	if(_:clickedid == INVALID_TEXT_DRAW)
	{
	    if(MDC_Ekrani[playerid] == true)
	    {
			for(new i; i < sizeof(MDC); i++) { PlayerTextDrawHide(playerid, MDC[i][playerid]); }
			MDC_Ekrani[playerid] = false;
		}
	}
	if(giristextdrawi[playerid] == true)
	{
		if (_:clickedid == INVALID_TEXT_DRAW)
		{
			SelectTextDraw(playerid, 0xFF0000FF);
		}
	}
	if(karaktersecimekrani[playerid] == true)
	{
		if(_:clickedid == INVALID_TEXT_DRAW)
		{
			SelectTextDraw(playerid, 0xFF0000FF);
		}
	}
	if(oyuncuData[playerid][pATMMenu] == true)
	{
		if(_:clickedid == INVALID_TEXT_DRAW)
		{
			oyuncuData[playerid][pATMMenu] = false;
			for(new i; i < sizeof(ATMTextDraw); i++) { PlayerTextDrawHide(playerid, ATMTextDraw[i][playerid]); }
				CancelSelectTextDraw(playerid);
			return 1;
		}
	}
	if(_:clickedid != INVALID_TEXT_DRAW)
	{
		if(clickedid == textdraw_1)
		{
			TextDrawHideForPlayer(playerid, textdraw_0);
			TextDrawHideForPlayer(playerid, textdraw_1);
			TextDrawHideForPlayer(playerid, textdraw_2);
			TextDrawHideForPlayer(playerid, textdraw_3);
			TextDrawHideForPlayer(playerid, textdraw_4);
			TextDrawHideForPlayer(playerid, textdraw_5);
			TextDrawHideForPlayer(playerid, textdraw_6);
			TextDrawHideForPlayer(playerid, textdraw_7);
			TextDrawHideForPlayer(playerid, textdraw_8);
			TextDrawHideForPlayer(playerid, textdraw_9);
			TextDrawHideForPlayer(playerid, textdraw_10);
			TextDrawHideForPlayer(playerid, textdraw_11);
			if(oyuncuData[playerid][oVIP] < 1) return hataMesaji(playerid, "Bu komuttan sadece VIP üyelikler yararlanabilir."),CancelSelectTextDraw(playerid);
			if(oyuncuData[playerid][oPara] < 1000000) return hataMesaji(playerid, "Yat alabilmek için yeterli paranýz bulunmamaktadýr.(1.000.000$)"),CancelSelectTextDraw(playerid);

			ShowPlayerDialog(playerid, DIALOG_YAT_SATINAL, DIALOG_STYLE_INPUT, "{F5E600}Cortez's Yacht Club", "Lütfen yatýnýz için bir isim belirleyin(En fazla 12 karakter):", "Tamam", "Iptal");

		}

		else if(clickedid == textdraw_2)
		{
			TextDrawHideForPlayer(playerid, textdraw_0);
			TextDrawHideForPlayer(playerid, textdraw_1);
			TextDrawHideForPlayer(playerid, textdraw_2);
			TextDrawHideForPlayer(playerid, textdraw_3);
			TextDrawHideForPlayer(playerid, textdraw_4);
			TextDrawHideForPlayer(playerid, textdraw_5);
			TextDrawHideForPlayer(playerid, textdraw_6);
			TextDrawHideForPlayer(playerid, textdraw_7);
			TextDrawHideForPlayer(playerid, textdraw_8);
			TextDrawHideForPlayer(playerid, textdraw_9);
			TextDrawHideForPlayer(playerid, textdraw_10);
			TextDrawHideForPlayer(playerid, textdraw_11);
			CancelSelectTextDraw(playerid);

		}
		else if(clickedid == telefonyenidraw[14])
		{
			TextDrawHideForPlayer(playerid, telefonyenidraw[0]);
			TextDrawHideForPlayer(playerid, telefonyenidraw[1]);
			TextDrawHideForPlayer(playerid, telefonyenidraw[2]);
			TextDrawHideForPlayer(playerid, telefonyenidraw[3]);
			TextDrawHideForPlayer(playerid, telefonyenidraw[4]);
			TextDrawHideForPlayer(playerid, telefonyenidraw[5]);
			TextDrawHideForPlayer(playerid, telefonyenidraw[6]);
			TextDrawHideForPlayer(playerid, telefonyenidraw[7]);
			TextDrawHideForPlayer(playerid, telefonyenidraw[8]);
			TextDrawHideForPlayer(playerid, telefonyenidraw[9]);
			TextDrawHideForPlayer(playerid, telefonyenidraw[10]);
			TextDrawHideForPlayer(playerid, telefonyenidraw[11]);
			TextDrawHideForPlayer(playerid, telefonyenidraw[12]);
			TextDrawHideForPlayer(playerid, telefonyenidraw[13]);
			TextDrawHideForPlayer(playerid, telefonyenidraw[14]);
			TextDrawHideForPlayer(playerid, telefonyenidraw[29]);
			if(oyuncumuzikmenusunde[playerid] == true)
			{
				TextDrawHideForPlayer(playerid, telefonyenidraw[15]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[16]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[17]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[18]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[19]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[20]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[21]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[22]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[23]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[24]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[25]);

				oyuncumuzikmenusunde[playerid] = false;
			}
			if(oyuncuseksenlerdinliyor[playerid] == true)
			{
				oyuncuseksenlerdinliyor[playerid] = false;
				oyuncuData[playerid][oMuzikDinliyor] = false;
				cmd(playerid, 1, "müziði durdurup telefon ekranýný kilitler, telefonunu cebine sokar.");
				StopAudioStreamForPlayer(playerid);
				TextDrawHideForPlayer(playerid, telefonyenidraw[26]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[27]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[28]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[30]);
			}
			if(oyuncuyetmislerdinliyor[playerid] == true)
			{
				oyuncuyetmislerdinliyor[playerid] = false;
				oyuncuData[playerid][oMuzikDinliyor] = false;
				cmd(playerid, 1, "müziði durdurup telefon ekranýný kilitler, telefonunu cebine sokar.");
				StopAudioStreamForPlayer(playerid);
				TextDrawHideForPlayer(playerid, telefonyenidraw[26]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[31]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[28]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[35]);
			}
			if(oyuncubageldinliyor[playerid] == true)
			{
				oyuncubageldinliyor[playerid] = false;
				oyuncuData[playerid][oMuzikDinliyor] = false;
				cmd(playerid, 1, "müziði durdurup telefon ekranýný kilitler, telefonunu cebine sokar.");
				StopAudioStreamForPlayer(playerid);
				TextDrawHideForPlayer(playerid, telefonyenidraw[26]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[32]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[28]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[36]);
			}
			if(oyuncuindiepopdinliyor[playerid] == true)
			{
				oyuncuindiepopdinliyor[playerid] = false;
				oyuncuData[playerid][oMuzikDinliyor] = false;
				cmd(playerid, 1, "müziði durdurup telefon ekranýný kilitler, telefonunu cebine sokar.");
				StopAudioStreamForPlayer(playerid);
				TextDrawHideForPlayer(playerid, telefonyenidraw[26]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[33]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[28]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[37]);
			}
			if(oyuncuthetripdinliyor[playerid] == true)
			{
				oyuncuthetripdinliyor[playerid] = false;
				oyuncuData[playerid][oMuzikDinliyor] = false;
				cmd(playerid, 1, "müziði durdurup telefon ekranýný kilitler, telefonunu cebine sokar.");
				StopAudioStreamForPlayer(playerid);
				TextDrawHideForPlayer(playerid, telefonyenidraw[26]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[34]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[28]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[38]);
			}
			CancelSelectTextDraw(playerid);
			SetPVarInt(playerid, "TelefonGoruntule", 0);
		}
		else if(clickedid == telefonyenidraw[2])
		{
			if(oyuncuData[playerid][oTelefonDurum] == false) return hataMesaji(playerid, "Telefonunuz kapalý olduðu için bu seçeneði kullanamazsýnýz.");

			if(oyuncuData[playerid][oArama] > -1) return hataMesaji(playerid, "Arama yaparken bu seçeneði kullanamazsýn.");

			Dialog_Show(playerid, smsekransecim, DIALOG_STYLE_LIST, "SMS Menüsü", "SMS Gönder\nSMS Geçmiþi(Giden)\nSMS Geçmiþi(Gelen)", "Seç", "Ýptal");
		}
		else if(clickedid == telefonyenidraw[6])
		{
			SunucuMesaji(playerid, "ViceNet geçici olarak pasif.");
		}
		else if(clickedid == telefonyenidraw[5])
		{
			new cuzdanstring[128];
			format(cuzdanstring, sizeof(cuzdanstring), "Banka hesabýnýzda %s miktarýnda para bulunuyor.", NumaraFormati(oyuncuData[playerid][oBankaPara]));
			DialogGoster(playerid, DIALOG_CUZDANUYGULAMA, DIALOG_STYLE_MSGBOX, "> Vice Bank Cüzdan Uygulamasý", cuzdanstring, "Çýkýþ Yap", "");
		}
		else if(clickedid == telefonyenidraw[1])
		{
			if(oyuncuData[playerid][oTelefonDurum] == false) return hataMesaji(playerid, "Telefonunuz kapalý olduðu için bu seçeneði kullanamazsýnýz.");
			if(oyuncuData[playerid][oArama] > -1) return hataMesaji(playerid, "Arama yaparken bu seçeneði kullanamazsýn.");

			DialogGoster(playerid, DIALOG_ARAMASECIM, DIALOG_STYLE_LIST, "> Telefon", "Telefon Rehberi\nArama Yap", "Seç", "Kapat");
		}
		else if(clickedid == telefonyenidraw[4])
		{
			if(oyuncuData[playerid][oTelefonDurum] == false) return hataMesaji(playerid, "Telefonunuz kapalý olduðu için bu seçeneði kullanamazsýnýz.");
			/* new Float:x, Float:y, Float:z, haritastring[200];
			GetPlayerPos(playerid, x, y, z);
			format(haritastring, sizeof(haritastring), "Þu anda bulunduðunuz konum: %s\nGPS ekraný için devam et seçeneðine dokunun.", konum); */
			DialogGoster(playerid, DIALOG_HARITALARMENU, DIALOG_STYLE_MSGBOX, "Haritalar", "Haritalar uygulamasýna hoþ geldiniz.\nUygulama özelliklerine eriþim için devam et seçeneðine dokunun.", "Devam Et", "Çýkýþ");
		}
		else if(clickedid == telefonyenidraw[3])
		{
			oyuncumuzikmenusunde[playerid] = true;
			TextDrawHideForPlayer(playerid, telefonyenidraw[1]);
			TextDrawHideForPlayer(playerid, telefonyenidraw[2]);
			TextDrawHideForPlayer(playerid, telefonyenidraw[3]);
			TextDrawHideForPlayer(playerid, telefonyenidraw[4]);
			TextDrawHideForPlayer(playerid, telefonyenidraw[5]);
			TextDrawHideForPlayer(playerid, telefonyenidraw[6]);
			TextDrawHideForPlayer(playerid, telefonyenidraw[7]);
			TextDrawHideForPlayer(playerid, telefonyenidraw[8]);
			TextDrawHideForPlayer(playerid, telefonyenidraw[9]);
			TextDrawHideForPlayer(playerid, telefonyenidraw[10]);
			TextDrawHideForPlayer(playerid, telefonyenidraw[11]);
			TextDrawHideForPlayer(playerid, telefonyenidraw[12]);
			TextDrawHideForPlayer(playerid, telefonyenidraw[13]);
			TextDrawShowForPlayer(playerid, telefonyenidraw[15]);
			TextDrawShowForPlayer(playerid, telefonyenidraw[16]);
			TextDrawShowForPlayer(playerid, telefonyenidraw[17]);
			TextDrawShowForPlayer(playerid, telefonyenidraw[18]);
			TextDrawShowForPlayer(playerid, telefonyenidraw[19]);
			TextDrawShowForPlayer(playerid, telefonyenidraw[20]);
			TextDrawShowForPlayer(playerid, telefonyenidraw[21]);
			TextDrawShowForPlayer(playerid, telefonyenidraw[22]);
			TextDrawShowForPlayer(playerid, telefonyenidraw[23]);
			TextDrawShowForPlayer(playerid, telefonyenidraw[24]);
			TextDrawShowForPlayer(playerid, telefonyenidraw[25]);
		}
		else if(clickedid == telefonyenidraw[29])
		{
			if(oyuncumuzikmenusunde[playerid] == true)
			{
				TextDrawHideForPlayer(playerid, telefonyenidraw[15]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[16]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[17]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[18]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[19]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[20]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[21]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[22]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[23]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[24]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[25]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[1]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[2]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[3]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[4]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[5]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[6]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[7]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[8]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[9]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[10]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[11]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[12]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[13]);
				oyuncumuzikmenusunde[playerid] = false;
			}
			else if(oyuncuseksenlerdinliyor[playerid] == true)
			{
				oyuncuData[playerid][oMuzikDinliyor] = false;
				oyuncuseksenlerdinliyor[playerid] = false;
				StopAudioStreamForPlayer(playerid);
				cmd(playerid, 1, "müziði durdurur, telefon menüsüne dönüþ yapar.");
				TextDrawHideForPlayer(playerid, telefonyenidraw[26]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[27]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[28]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[30]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[1]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[2]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[3]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[4]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[5]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[6]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[7]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[8]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[9]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[10]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[11]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[12]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[13]);
			}
			else if(oyuncuyetmislerdinliyor[playerid] == true)
			{
				oyuncuData[playerid][oMuzikDinliyor] = false;
				oyuncuyetmislerdinliyor[playerid] = false;
				StopAudioStreamForPlayer(playerid);
				cmd(playerid, 1, "müziði durdurur, telefon menüsüne dönüþ yapar.");
				TextDrawHideForPlayer(playerid, telefonyenidraw[26]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[31]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[28]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[35]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[1]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[2]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[3]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[4]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[5]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[6]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[7]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[8]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[9]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[10]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[11]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[12]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[13]);
			}
			else if(oyuncubageldinliyor[playerid] == true)
			{
				oyuncuData[playerid][oMuzikDinliyor] = false;
				oyuncubageldinliyor[playerid] = false;
				StopAudioStreamForPlayer(playerid);
				cmd(playerid, 1, "müziði durdurur, telefon menüsüne dönüþ yapar.");
				TextDrawHideForPlayer(playerid, telefonyenidraw[26]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[32]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[28]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[36]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[1]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[2]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[3]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[4]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[5]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[6]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[7]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[8]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[9]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[10]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[11]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[12]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[13]);
			}
			else if(oyuncuindiepopdinliyor[playerid] == true)
			{
				oyuncuData[playerid][oMuzikDinliyor] = false;
				oyuncuindiepopdinliyor[playerid] = false;
				StopAudioStreamForPlayer(playerid);
				cmd(playerid, 1, "müziði durdurur, telefon menüsüne dönüþ yapar.");
				TextDrawHideForPlayer(playerid, telefonyenidraw[26]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[33]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[28]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[37]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[1]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[2]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[3]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[4]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[5]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[6]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[7]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[8]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[9]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[10]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[11]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[12]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[13]);
			}
			else if(oyuncuthetripdinliyor[playerid] == true)
			{
				oyuncuData[playerid][oMuzikDinliyor] = false;
				oyuncuthetripdinliyor[playerid] = false;
				StopAudioStreamForPlayer(playerid);
				cmd(playerid, 1, "müziði durdurur, telefon menüsüne dönüþ yapar.");
				TextDrawHideForPlayer(playerid, telefonyenidraw[26]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[34]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[28]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[38]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[1]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[2]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[3]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[4]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[5]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[6]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[7]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[8]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[9]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[10]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[11]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[12]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[13]);
			}
		}
		else if(clickedid == telefonyenidraw[16])
		{
			if(oyuncuData[playerid][oKulaklikTakiyor] == false)
			{
				SunucuMesaji(playerid, "Kulaklýðýnýzý takmadan müzik dinleyemezsiniz. Takmak için /kulaklik kullanýn.");
				SunucuMesaji(playerid, "Eðer kulaklýðýnýz yoksa elektronik dükkanlarýndan satýn alabilirsiniz.");
			}
			else if(oyuncuData[playerid][oKulaklikTakiyor] == true)
			{
				StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://somafm.com/u80s.pls");
				oyuncuData[playerid][oMuzikDinliyor] = true;
				cmd(playerid, 1, "telefonun müzik sekmesinden bir radyo istasyonuna baðlanýr ve kulaklýðýyla dinlemeye koyulur.");
				SunucuMesaji(playerid, "Kulaklýðýnýzla müzik dinliyorsunuz. Sizden baþka kimse duyamaz.");
				SunucuMesaji(playerid, "Müziði kapatmak için geri tuþuna veya çarpý tuþuna týklayabilirsiniz.");
				TextDrawHideForPlayer(playerid, telefonyenidraw[15]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[16]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[17]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[18]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[19]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[20]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[21]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[22]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[23]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[24]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[25]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[26]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[27]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[28]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[30]);
				oyuncuseksenlerdinliyor[playerid] = true;
				oyuncumuzikmenusunde[playerid] = false;
			}

		}
		else if(clickedid == telefonyenidraw[17])
		{
			if(oyuncuData[playerid][oKulaklikTakiyor] == false)
			{
				SunucuMesaji(playerid, "Kulaklýðýnýzý takmadan müzik dinleyemezsiniz. Takmak için /kulaklik kullanýn.");
				SunucuMesaji(playerid, "Eðer kulaklýðýnýz yoksa elektronik dükkanlarýndan satýn alabilirsiniz.");
			}
			else if(oyuncuData[playerid][oKulaklikTakiyor] == true)
			{
				StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://somafm.com/seventies.pls");
				oyuncuData[playerid][oMuzikDinliyor] = true;
				cmd(playerid, 1, "telefonun müzik sekmesinden bir radyo istasyonuna baðlanýr ve kulaklýðýyla dinlemeye koyulur.");
				SunucuMesaji(playerid, "Kulaklýðýnýzla müzik dinliyorsunuz. Sizden baþka kimse duyamaz.");
				SunucuMesaji(playerid, "Müziði kapatmak için geri tuþuna veya çarpý tuþuna týklayabilirsiniz.");
				TextDrawHideForPlayer(playerid, telefonyenidraw[15]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[16]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[17]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[18]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[19]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[20]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[21]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[22]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[23]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[24]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[25]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[26]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[31]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[28]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[35]);
				oyuncuyetmislerdinliyor[playerid] = true;
				oyuncumuzikmenusunde[playerid] = false;
			}
		}
		else if(clickedid == telefonyenidraw[18])
		{
			if(oyuncuData[playerid][oKulaklikTakiyor] == false)
			{
				SunucuMesaji(playerid, "Kulaklýðýnýzý takmadan müzik dinleyemezsiniz. Takmak için /kulaklik kullanýn.");
				SunucuMesaji(playerid, "Eðer kulaklýðýnýz yoksa elektronik dükkanlarýndan satýn alabilirsiniz.");
			}
			else if(oyuncuData[playerid][oKulaklikTakiyor] == true)
			{
				StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://somafm.com/bagel.pls");
				oyuncuData[playerid][oMuzikDinliyor] = true;
				cmd(playerid, 1, "telefonun müzik sekmesinden bir radyo istasyonuna baðlanýr ve kulaklýðýyla dinlemeye koyulur.");
				SunucuMesaji(playerid, "Kulaklýðýnýzla müzik dinliyorsunuz. Sizden baþka kimse duyamaz.");
				SunucuMesaji(playerid, "Müziði kapatmak için geri tuþuna veya çarpý tuþuna týklayabilirsiniz.");
				TextDrawHideForPlayer(playerid, telefonyenidraw[15]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[16]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[17]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[18]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[19]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[20]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[21]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[22]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[23]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[24]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[25]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[26]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[32]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[28]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[36]);
				oyuncubageldinliyor[playerid] = true;
				oyuncumuzikmenusunde[playerid] = false;
			}
		}
		else if(clickedid == telefonyenidraw[19])
		{
			if(oyuncuData[playerid][oKulaklikTakiyor] == false)
			{
				SunucuMesaji(playerid, "Kulaklýðýnýzý takmadan müzik dinleyemezsiniz. Takmak için /kulaklik kullanýn.");
				SunucuMesaji(playerid, "Eðer kulaklýðýnýz yoksa elektronik dükkanlarýndan satýn alabilirsiniz.");
			}
			else if(oyuncuData[playerid][oKulaklikTakiyor] == true)
			{
				StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://somafm.com/indiepop.pls");
				oyuncuData[playerid][oMuzikDinliyor] = true;
				cmd(playerid, 1, "telefonun müzik sekmesinden bir radyo istasyonuna baðlanýr ve kulaklýðýyla dinlemeye koyulur.");
				SunucuMesaji(playerid, "Kulaklýðýnýzla müzik dinliyorsunuz. Sizden baþka kimse duyamaz.");
				SunucuMesaji(playerid, "Müziði kapatmak için geri tuþuna veya çarpý tuþuna týklayabilirsiniz.");
				TextDrawHideForPlayer(playerid, telefonyenidraw[15]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[16]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[17]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[18]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[19]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[20]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[21]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[22]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[23]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[24]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[25]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[26]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[33]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[28]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[37]);
				oyuncuindiepopdinliyor[playerid] = true;
				oyuncumuzikmenusunde[playerid] = false;

			}
		}
		else if(clickedid == telefonyenidraw[20])
		{
			if(oyuncuData[playerid][oKulaklikTakiyor] == false)
			{
				SunucuMesaji(playerid, "Kulaklýðýnýzý takmadan müzik dinleyemezsiniz. Takmak için /kulaklik kullanýn.");
				SunucuMesaji(playerid, "Eðer kulaklýðýnýz yoksa elektronik dükkanlarýndan satýn alabilirsiniz.");
			}
			else if(oyuncuData[playerid][oKulaklikTakiyor] == true)
			{
				StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, "http://somafm.com/thetrip.pls");
				oyuncuData[playerid][oMuzikDinliyor] = true;
				cmd(playerid, 1, "telefonun müzik sekmesinden bir radyo istasyonuna baðlanýr ve kulaklýðýyla dinlemeye koyulur.");
				SunucuMesaji(playerid, "Kulaklýðýnýzla müzik dinliyorsunuz. Sizden baþka kimse duyamaz.");
				SunucuMesaji(playerid, "Müziði kapatmak için geri tuþuna veya çarpý tuþuna týklayabilirsiniz.");
				TextDrawHideForPlayer(playerid, telefonyenidraw[15]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[16]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[17]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[18]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[19]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[20]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[21]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[22]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[23]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[24]);
				TextDrawHideForPlayer(playerid, telefonyenidraw[25]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[26]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[34]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[28]);
				TextDrawShowForPlayer(playerid, telefonyenidraw[38]);
				oyuncuthetripdinliyor[playerid] = true;
				oyuncumuzikmenusunde[playerid] = false;
			}
		}
		else if(clickedid == telefonyenidraw[7])
		{
			if(oyuncuData[playerid][oArama] > -1)
				cmd(playerid, 0, "kapat");

			switch(oyuncuData[playerid][oTelefonDurum]) {
				case false: oyuncuData[playerid][oTelefonDurum] = true, SunucuMesaji(playerid, "Telefonunu açtýn.");
				case true: oyuncuData[playerid][oTelefonDurum] = false, SunucuMesaji(playerid, "Telefonunu kapattýn.");
			}
		}
	}
	return 1;
}
public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	return 1;
}

public OnPlayerCommandReceived(playerid, cmd[], params[], flags)
{
	if(sonkomut[playerid] != 0 && gettime() - sonkomut[playerid] < 2)
	{
	hataMesaji(playerid, "Çok hýzlý komut deniyorsunuz, biraz bekleyin.");
	return 0;
	}
	if(oyuncuData[playerid][oGiris] == false) return hataMesaji(playerid, "Giriþ yapmadan komut kullanamazsýnýz."), 0;
	if(oyuncuData[playerid][oHapisSure][0] > 0) return hataMesaji(playerid, "OOC hapiste komut kullanamazsýn."), 0;
	//CMD LOG
	printf("[%s](komut) %s: /%s %s", Tarih(), OyuncuIsim(playerid), cmd, params);
	//DC LOG		
	new str2[15000];
	format(str2, sizeof(str2), "```[%s](komut) %s: /%s %s```", Tarih(), OyuncuIsim(playerid), cmd, params);
	DCC_SendChannelMessage(komutkullan, str2);
	return 1;
}

public OnPlayerCommandPerformed(playerid, cmd[], params[], result, flags)
{
	if(oyuncuData[playerid][oAdmin] < 1)
	{
		sonkomut[playerid] = gettime();
	}
	if(result == -1) return hataMesaji(playerid, "Sunucuda böyle bir komut bulunmamaktadýr.");
	return 1;
}

public isimarat(playerid, oyuncuid, isim[])
{
	static rows, fields;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(rows) {
		hataMesaji(playerid, "Bu isimde bir kullanýcý olduðu için isim deðiþtirilemiyor.");
	}
	else if(!rows) {
		SunucuMesaji(playerid, "%s adlý kiþinin ismini %s olarak deðiþtirdin.", OyuncuIsim(oyuncuid), isim);
		SetPlayerName(oyuncuid, isim);
		format(oyuncuData[oyuncuid][oIsim], 32, "%s", isim);
		OyuncuKaydet(oyuncuid);
		for (new i = 0; i < MAKSIMUM_EV; i ++) if(Ev_SahipKontrol(playerid, i)) {
			EvBilgi[i][evSahipIsim][0] = 0;
			Ev_Yenile(i);
		}
		for (new i = 0; i < MAKSIMUM_ISYERI; i ++) if(Isyeri_SahipKontrol(playerid, i)) {
			IsyeriBilgi[i][isyeriSahipIsim][0] = 0;
			Isyeri_Yenile(i);
		}
		for (new i = 0; i < MAKSIMUM_ISYERI; i ++) if(IsyeriBilgi[i][isyeriOrtak] == oyuncuData[playerid][oID]) {
			IsyeriBilgi[i][isyeriOrtakIsim][0] = 0;
			Isyeri_Yenile(i);
		}
		SunucuMesaji(oyuncuid, "%s adlý yönetici ismini %s olarak deðiþtirdi.", oyuncuData[playerid][oAdminNick], OyuncuIsim(oyuncuid));
	}
	return 1;
}

public premiumplakadegisimi(playerid, aracid, plaka[])
{
	static rows, fields;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(rows)
	{
		hataMesaji(playerid, "Bu plaka zaten kullanýmda.");
	}
	else if(!rows)
	{
		format(AracBilgi[aracid][aracPlaka], 12, "%s", oyuncuData[playerid][vicemarketyeniplaka]);
		SetVehicleNumberPlate(aracid, oyuncuData[playerid][vicemarketyeniplaka]);
		oyuncuData[playerid][oPlakaDegisimHakki]--;
		HesapKaydet(playerid);
	    //AracBilgi[aracid][aracOzelPlaka] = 1;
		GetVehiclePos(AracBilgi[aracid][aracYarat], AracBilgi[aracid][aracPos][0], AracBilgi[aracid][aracPos][1], AracBilgi[aracid][aracPos][2]);
		GetVehicleZAngle(AracBilgi[aracid][aracYarat], AracBilgi[aracid][aracPos][3]);
		Arac_Kaydet(aracid);
		Arac_Spawn(aracid);
		SunucuMesaji(playerid, "Plaka deðiþim ürününü kullanarak araç plakasýný deðiþtirdin.");
		SunucuMesaji(playerid, "Yeni araç plakasý: %s", oyuncuData[playerid][vicemarketyeniplaka]);
		IpucuMesaji(playerid, "Plaka deðiþimlerinde aracýnýn park lokasyonu deðiþir, tekrar yerine park etmelisin.");
		Log_Kaydet("loglar/vicemarket.txt", "[%s] %s plaka degistirme hakkini kullandi, yeni plaka: %s ", Tarih(), OyuncuIsim(playerid), oyuncuData[playerid][vicemarketyeniplaka]);
	}
	return 1;
}

public premiumtelnodegisim(playerid, telno)
{
	static rows, fields;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(rows)
	{
		hataMesaji(playerid, "Bu telefon numarasý zaten kullanýmda, farklý numara deneyin.");
	}
	else if(!rows)
	{
		oyuncuData[playerid][oTelefonNumarasi] = telno;
		oyuncuData[playerid][oTelefonDegisimHakki]--;
		HesapKaydet(playerid);
		OyuncuKaydet(playerid);
		SunucuMesaji(playerid, "Telefon numaraný baþarýyla deðiþtirdin, yeni numaran: %d", telno);
		Log_Kaydet("loglar/vicemarket.txt", "[%s] %s telefon numarasi degistirme hakkini kullandi, yeni numara: %s ", Tarih(), OyuncuIsim(playerid), telno);
	}
	return 1;
}

public premiumisimdegisimi(playerid, isim[])
{
	static rows, fields;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(rows) {
		hataMesaji(playerid, "Bu isim zaten kullanýlýyor.");
	}
	else if(!rows) {
		new Cache:verial, nrows, query[256], eforumid, success = 1;
		mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM ncler WHERE eskiisim = '%e'", isim);
		verial = mysql_query(g_SQL, query);
		cache_get_row_count(nrows);
		if(nrows)
		{
			cache_get_value_name_int(0, "forumid", eforumid);
			if(oyuncuData[playerid][oForumID] != eforumid)
			{
				success = 0;
			}
		}
		if(success == 1)
		{
			Log_Kaydet("loglar/NC.txt", "[%s] %s isim degistirme hakkini kullandi, yeni isim: %s ", Tarih(), OyuncuIsim(playerid), isim);
			new eskiisim[32];
			format(eskiisim, 32, oyuncuData[playerid][oIsim]);
			mysql_format(g_SQL, query, sizeof(query), "UPDATE `itemler` SET `oyuncu` = '%e' WHERE `oyuncu` = '%e'", isim, oyuncuData[playerid][oIsim]);
			mysql_query(g_SQL, query);
			for(new i = 0; i < MAX_GARAJ; i++)
			{
				if(!strcmp(GarajInfo[i][gSahip], oyuncuData[playerid][oIsim], true))
				{
					format(GarajInfo[i][gSahip], 24, "%s", isim);
					mysql_format(g_SQL, query, sizeof(query), "UPDATE `garajlar` SET `sahip` = '%e' WHERE `id` = %i", GarajInfo[i][gSahip], GarajInfo[i][gID]);
					mysql_query(g_SQL, query);
				}
			}
			SetPlayerName(playerid, isim);
			format(oyuncuData[playerid][oIsim], 24, "%s", isim);
			oyuncuData[playerid][oIsimDegisimHakki]--;
			oyuncuData[playerid][oKarakterYaratildi] = 0;
			oyuncuData[playerid][oEkstraDil] = 0;
			if(oyuncuData[playerid][oGozalti] == 1)
			{
				SetPlayerPos(playerid, 2010.4738,1586.9189,6753.0479);
			}
			oyuncuData[playerid][oGozalti] = 0;
			if(oyuncuData[playerid][oHapisSure][1] < 2)
			{
				SetPlayerPos(playerid, 1529.6327, -1683.8873, 13.3828);
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				PlayerTextDrawHide(playerid, HapisText[playerid]);
			}
			oyuncuData[playerid][oHapisSure][1] = 0;
			oyuncuData[playerid][oBagimlilik] = 0;
			oyuncuData[playerid][oBagimlilikEtki] = 0;
			HesapKaydet(playerid);
			OyuncuKaydet(playerid);
			for (new i = 0; i < MAKSIMUM_EV; i ++) if(Ev_SahipKontrol(playerid, i)) {
				EvBilgi[i][evSahipIsim][0] = 0;
				Ev_Yenile(i);
			}
			for (new i = 0; i < MAKSIMUM_ISYERI; i ++) if(Isyeri_SahipKontrol(playerid, i)) {
				IsyeriBilgi[i][isyeriSahipIsim][0] = 0;
				Isyeri_Yenile(i);
			}
			for (new i = 0; i < MAKSIMUM_ISYERI; i ++) if(IsyeriBilgi[i][isyeriOrtak] == oyuncuData[playerid][oID]) {
				IsyeriBilgi[i][isyeriOrtakIsim][0] = 0;
				Isyeri_Yenile(i);
			}
			for(new i = 0; i < MAX_CIFTLIK; i++) if(CiftlikInfo[i][cSahipID] == oyuncuData[playerid][oID])
			{
				format(CiftlikInfo[i][cSahip], 64, "%s", oyuncuData[playerid][oIsim]);
				Ciftlik_Kaydet(i);
			}
			mysql_format(g_SQL, query, sizeof(query), "INSERT INTO `ncler` (`eskiisim`, `forumid`, `tarih`, `eskiskin`, `eskiuyruk`) VALUES ('%e', '%d', '%s', '%d', '%e')", eskiisim, oyuncuData[playerid][oForumID], Tarih(), oyuncuData[playerid][oKiyafet], oyuncuData[playerid][oDogumYeri]);
			mysql_query(g_SQL, query);
			SunucuMesaji(playerid, "Ýsmin %s olarak deðiþtirildi. Oyundan çýkartýlýyorsun, lütfen tekrar giriþ yap.", isim);
			KickEx(playerid);
		}
		else
		{
			hataMesaji(playerid, "Bu isim alýnamaz.");
		}
		cache_delete(verial);
	}
	return 1;
}

/*forward OnCheatDetected(playerid, ip_address[], type, code);
public OnCheatDetected(playerid, ip_address[], type, code)
{
	if(type) BlockIpAddress(ip_address, 0);
	else
	{
		switch(code)
		{
			case 0..1,7..13:
			{
				YoneticiMesaji(RENK_ACIKKIRMIZI, "[ANTÝ HÝLE]: {FFFFFF}%s(%d) adlý kiþi %s hilesi yapýyor olabilir.", OyuncuIsim(playerid),playerid, AntiCheatName(code));
				oyuncuData[playerid][oHileUyari] ++;
				if(oyuncuData[playerid][oHileUyari] > 9) {
					new strtmp[sizeof KICK_MSG],oIP[16];
					format(strtmp, sizeof strtmp, KICK_MSG, code);
					SendClientMessage(playerid, RENK_TURUNCU, strtmp);
					GetPlayerIp(playerid, oIP, sizeof(oIP));
					Log_Kaydet("loglar/hileler.txt", "[%s] %s adlý kiþi %s hilesi sebebiyle kicklendi. IP: %s", Tarih(), OyuncuIsim(playerid), AntiCheatName(code), oIP);	
				}
				return 1;
			}
			case 2,3,6:
			{
				new isimcek[MAX_PLAYER_NAME];
				GetPlayerName(playerid, isimcek, sizeof(isimcek));
				if(strcmp(isimcek, "Nitro_", false, 3))
				{
					YoneticiMesaji(RENK_ACIKKIRMIZI, "[ANTÝ HÝLE]: {FFFFFF}%s(%d) adlý kiþi %s hilesi yapýyor olabilir.", OyuncuIsim(playerid),playerid, AntiCheatName(code));
				}
				else YoneticiMesaji(RENK_ACIKKIRMIZI, "[ANTÝ HÝLE]: {FFFFFF}%s(%d) adlý kiþi %s hilesi sebebiyle kicklendi.", OyuncuIsim(playerid),playerid, AntiCheatName(code)), Kick(playerid);

				oyuncuData[playerid][oHileUyari] ++;
				if(oyuncuData[playerid][oHileUyari] > 9) {
					new strtmp[sizeof KICK_MSG],oIP[16];
					format(strtmp, sizeof strtmp, KICK_MSG, code);
					SendClientMessage(playerid, RENK_TURUNCU, strtmp);
					GetPlayerIp(playerid, oIP, sizeof(oIP));
					Log_Kaydet("loglar/hileler.txt", "[%s] %s adlý kiþi %s hilesi sebebiyle kicklendi. IP: %s", Tarih(), OyuncuIsim(playerid), AntiCheatName(code), oIP);	
				}
				return 1;
			}
			case 40: SendClientMessage(playerid, -1, MAX_CONNECTS_MSG);
			case 41: SendClientMessage(playerid, -1, UNKNOWN_CLIENT_MSG);
			case 15:
			{
				new strtmp[sizeof KICK_MSG],oIP[16];
				format(strtmp, sizeof strtmp, KICK_MSG, code);
				SendClientMessage(playerid, RENK_TURUNCU, strtmp);
				GetPlayerIp(playerid, oIP, sizeof(oIP));
				AntiCheatKickWithDesync(playerid, code);
				Log_Kaydet("loglar/hileler.txt", "[%s] %s adlý kiþi %s hilesi sebebiyle kicklendi. IP: %s", Tarih(), OyuncuIsim(playerid), AntiCheatName(code), oIP);	
			}
		}

	}
	return 1;
}*/

public forumyasaklamaarat(playerid)
{
	static rows, query[128], ip[16];
	cache_get_row_count(rows);
	if(rows)
	{
		hataMesaji(playerid, "%s sebebiyle yasaklý olduðun için oyundan atýldýn.", vericek_varchar(0, "sebep"));
		KickEx(playerid);
	}
	else if(!rows)
	{
		GetPlayerIp(playerid, ip, sizeof(ip));
		mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM ipban WHERE ip = '%s'", ip);
		mysql_tquery(g_SQL, query, "ipyasaklamaarat", "d", playerid);
	}
	return 1;
}

public oyuncuaratasamabir(playerid)
{
	static rows, query[256];
	cache_get_row_count(rows);
	if(!rows)
	{
		hataMesaji(playerid, "Hesap bulunamadýðý için oyundan atýldýn.");
		KickEx(playerid);
	}
	else if(rows)
	{			
			if(IpOnayDurumu == true)
			{
				new Cache:getinfo, iponaydurum, onaylanmisip[16], oyuncuip[16];
				mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM hesaplar WHERE forumid = '%d'", oyuncuData[playerid][oForumID]);
				getinfo = mysql_query(g_SQL, query);
				cache_get_value_name_int(0, "IPOnayDurum", iponaydurum);
				cache_get_value_name(0, "OnayliIP", onaylanmisip);
				cache_delete(getinfo);
				if(iponaydurum > 0)
				{
					if(!strcmp(onaylanmisip, "0", true))
					{
						GetPlayerIp(playerid, oyuncuip, sizeof(oyuncuip));
						mysql_format(g_SQL, query, sizeof(query), "UPDATE hesaplar SET OnayliIP = '%s' WHERE forumid = '%d'", oyuncuip, oyuncuData[playerid][oForumID]);
						mysql_query(g_SQL, query);
						mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `oyuncular` WHERE `forumid` = '%d'", oyuncuData[playerid][oForumID]);
						mysql_tquery(g_SQL, query, "oyuncuarat", "d", playerid);
					}
					else
					{
						GetPlayerIp(playerid, oyuncuip, sizeof(oyuncuip));
						if(!strcmp(oyuncuip, onaylanmisip, true))
						{
							mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `oyuncular` WHERE `forumid` = '%d'", oyuncuData[playerid][oForumID]);
							mysql_tquery(g_SQL, query, "oyuncuarat", "d", playerid);
						}
						else
						{
							vcGuardMesaji(playerid, "IP doðrulamasýný geçemediniz. Eðer hesabýn sahibi sizseniz forum üzerinden IP doðrulamasýný yenileyiniz.");
							KickEx(playerid);	
						}
					}
				}
				else
				{
					vcGuardMesaji(playerid, "IP doðrulamasýný geçemediniz. Eðer hesabýn sahibi sizseniz forum üzerinden IP doðrulamasýný yenileyiniz.");
					KickEx(playerid);
				}
			}
			else
			{
				mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `oyuncular` WHERE `forumid` = '%d'", oyuncuData[playerid][oForumID]);
				mysql_tquery(g_SQL, query, "oyuncuarat", "d", playerid);
			}
			/*#if SQL_BAGLANTI == 2
			if(!strcmp(oyuncuip, ipkontrolu, true))
			{
				mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `oyuncular` WHERE `forumid` = '%d'", oyuncuData[playerid][oForumID]);
				mysql_tquery(g_SQL, query, "oyuncuarat", "d", playerid);
			}
			else
			{
				vcGuardMesaji(playerid, "Öncelikle forum üzerinden IP doðrulamasý yapmalýsýnýz.(vice-rp.com/forum/vcguard)");
				KickEx(playerid);
			}
			#elseif SQL_BAGLANTI == 1
				mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `oyuncular` WHERE `forumid` = '%d'", oyuncuData[playerid][oForumID]);
				mysql_tquery(g_SQL, query, "oyuncuarat", "d", playerid);
			#endif
			*/
	}
	return 1;
}

public ipyasaklamaarat(playerid)
{
	static rows, query[128];//, isim[MAX_PLAYER_NAME];
	cache_get_row_count(rows);
	if(rows)
	{
		hataMesaji(playerid, "IP adresin %s sebebiyle yasaklý olduðu için oyundan atýldýn.", vericek_varchar(0, "sebep"));
		KickEx(playerid);
	}
	else if(!rows)
	{
  		//GetPlayerName(playerid, isim, sizeof(isim));
		mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `hesaplar` WHERE `forumid` = '%d'", oyuncuData[playerid][oForumID]);
		mysql_tquery(g_SQL, query, "oyuncuaratasamabir", "d", playerid);
		PlayerTextDrawDestroy(playerid, TDEditor_PTD[playerid][0]);
		PlayerTextDrawDestroy(playerid, TDEditor_PTD[playerid][1]);
		PlayerTextDrawDestroy(playerid, TDEditor_PTD[playerid][2]);
		PlayerTextDrawDestroy(playerid, TDEditor_PTD[playerid][3]);
		PlayerTextDrawDestroy(playerid, TDEditor_PTD[playerid][4]);
	}
	return 1;
}

public ReklamYayinla(reklamid)
{
	static reklam[256];
	if(ReklamBilgi[reklamid][reklamfirma] == -1)
	{
		format(reklam, sizeof(reklam), "[NEWS] - %s", ReklamBilgi[reklamid][reklamyazi]);
		foreach(new i : Player)
		{
			if(oyuncuData[i][pReklam] == true)
			{
				SCM_Ex(i, RENK_REKLAM, reklam);
			}
		}
	}
	else if(ReklamBilgi[reklamid][reklamfirma] > -1)
	{
		format(reklam, sizeof(reklam), "[%s] - %s", FirmaInfo[ReklamBilgi[reklamid][reklamfirma]][fIsim], ReklamBilgi[reklamid][reklamyazi]);
		foreach(new i : Player)
		{
			if(oyuncuData[i][pReklam] == true)
			{
				SCM_Ex(i, RENK_REKLAM, reklam);
			}
		}
	}
	new query[340];
	mysql_format(g_SQL, query, sizeof(query), "INSERT INTO reklamkayit (reklammetin, reklamsahip) VALUES ('%e', '%e')", reklam, oyuncuData[ReklamBilgi[reklamid][reklamsahip]][oIsim]);
	mysql_query(g_SQL, query);
	//if(ReklamBilgi[reklamid][reklamvip]) DCMesaj(reklam,0);
	format(reklam, sizeof(reklam), "Reklam Sahibi: %s | %s", OyuncuIsim(ReklamBilgi[reklamid][reklamsahip]), Tarih());
	foreach(new i : Player)
		{
			if(oyuncuData[i][pReklam] == true)
			{
				SCM_Ex(i, RENK_REKLAM, reklam);
			}
		}
	format(ReklamBilgi[reklamid][reklamyazi], 128, "*");
	//if(ReklamBilgi[reklamid][reklamvip]) DCMesaj(reklam,0);
	//if(ReklamBilgi[reklamid][reklamvip]) DCMesaj(reklam,0);
	ReklamSil(reklamid);
	return 1;
}

/* public Karavanlarim(playerid)
{
	static rows;
	cache_get_row_count(rows);
	if(rows > 0)
	{
		new i = 0;
		format(gVar3000, sizeof(gVar3000), "%s", EOS);
		while(i != rows && i < MAX_KARAVAN && strlen(gVar3000) < 3000 - 175)
		{
			KaravanInfo[i][kID] = vericek_int(i, "id");

			if(isnull(gVar3000))
			{
				format(gVar3000, sizeof(gVar3000), "{FFFFFF}[{F5E600}KARAVAN{FFFFFF}] ID: {F5E600}%d{FFFFFF} - Lokasyon: {F5E600}%s{FFFFFF}", KaravanInfo[i][kID],LokasyonBul(KaravanInfo[i][kX], KaravanInfo[i][kY], KaravanInfo[i][kZ]));
			}
			else
			{
				format(gVar3000, sizeof(gVar3000), "%s\n{FFFFFF}[{F5E600}KARAVAN{FFFFFF}] ID: {F5E600}%d{FFFFFF} - Lokasyon: {F5E600}%s{FFFFFF}", gVar3000, KaravanInfo[i][kID],LokasyonBul(KaravanInfo[i][kX], KaravanInfo[i][kY], KaravanInfo[i][kZ]));
			}

			i++;
		}

		ShowPlayerDialog(playerid, DIALOG_KARAVANLAR, DIALOG_STYLE_LIST, "{F5E600}Karavanlarým", gVar3000, "Seç", "Iptal");
		format(gVar3000, sizeof(gVar3000), "%s", EOS);
	} else {
		hataMesaji(playerid, "Karavan sahibi deðilsiniz.");
	}
	return 1;
} */

public ParaKesDene(playerid, isim[], miktar)
{
	static query[128], rows, fields, eski;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) {
		for (new i = 0, len = strlen(isim); i < len; i ++) {
			if(isim[i] == '_') isim[i] = ' ';
		}
		hataMesaji(playerid, "%s adlý oyuncu veritabanýnda bulunamadý.", isim);
	}
	else if(rows) {

		eski = vericek_int(0, "Para");
		mysql_format(g_SQL, query, sizeof(query),"UPDATE `oyuncular` SET `Para` = %d WHERE `isim` = '%e'", eski - miktar, isim);
		mysql_query(g_SQL, query);
		for (new i = 0, len = strlen(isim); i < len; i ++) {
			if(isim[i] == '_') isim[i] = ' ';
		}
		SunucuMesaji(playerid, "%s adlý kiþiden %s miktarýnda para kesildi.", isim, NumaraFormati(miktar));
		YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s, %s adlý kiþiden offline olarak %s miktarýnda para kesti.", oyuncuData[playerid][oAdminNick], isim, NumaraFormati(miktar));
		Log_Kaydet("loglar/admin_log.txt", "[%s] %s, %s adlý kiþiden offline olarak %s miktarýnda para kesti.", Tarih(), oyuncuData[playerid][oAdminNick], isim, NumaraFormati(miktar));
	}
	return 1;
}

forward OfflineTransfer(playerid, isim[], miktar);
public OfflineTransfer(playerid, isim[], miktar)
{
	static query[128], rows, fields, eski;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) {
		for (new i = 0, len = strlen(isim); i < len; i ++) {
			if(isim[i] == '_') isim[i] = ' ';
		}
		hataMesaji(playerid, "%s adlý oyuncu veritabanýnda bulunamadý.", isim);
	}
	else if(rows) {
		if(oyuncuData[playerid][oBankaPara] < miktar) return hataMesaji(playerid, "Banka hesabýnýzda bu miktarda para yok.");
		eski = vericek_int(0, "BankaPara");
		mysql_format(g_SQL, query, sizeof(query),"UPDATE `oyuncular` SET `BankaPara` = %d WHERE `isim` = '%e'", eski + miktar, isim);
		mysql_query(g_SQL, query);
		for (new i = 0, len = strlen(isim); i < len; i ++) {
			if(isim[i] == '_') isim[i] = ' ';
		}
		oyuncuData[playerid][oBankaPara] -= miktar;
		SunucuMesaji(playerid, "%s adlý kiþiye %s miktarýnda para transfer edildi.", isim, NumaraFormati(miktar));
		Log_Kaydet("loglar/hesaptransfer.txt", "[%s] %s, %s adli kisinin banka hesabina %s para transfer etti.", Tarih(), OyuncuIsim(playerid), isim, NumaraFormati(miktar));
		new str[150];
		format(str, sizeof(str), "```[%s] %s, %s adli kisinin banka hesabina %s para transfer etti.```", Tarih(), OyuncuIsim(playerid), isim, NumaraFormati(miktar));
		DCC_SendChannelMessage(bankatransfer, str);
	}
	return 1;
}

function ForumID_Cek(isim[])
{
	new id, Cache:CekilenVeri, query[128];
	mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `oyuncular` WHERE `isim` = '%e'", isim);
	CekilenVeri = mysql_query(g_SQL, query);
	id = vericek_int(0, "forumid");
	cache_delete(CekilenVeri);
	return id;
}

public offlinebanla(playerid, isim[], sebep[])
{
	static query[300], rows, fields;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows)
	{
		hataMesaji(playerid, "%s adlý oyuncu veritabanýnda bulunamadý.", isim);
	}
	else if(rows)
	{
		mysql_format(g_SQL, query, sizeof(query), "UPDATE `oyuncular` SET `oyuncuban` = 1 WHERE `isim` = '%e'", isim);
		mysql_query(g_SQL, query);
		mysql_format(g_SQL, query, sizeof(query), "INSERT INTO `yasaklamalar` (`isim`, `yasaklayan`, `sebep`, `forumid`, `acilmatarihi`, `yasaklanmatarihi`) VALUES ('%e', '%e', '%e', '%d', '%d', '%s')", isim, OyuncuIsim(playerid, 1), sebep, ForumID_Cek(isim), 0, Tarih());
		mysql_query(g_SQL, query);
		for (new i = 0, len = strlen(isim); i < len; i ++) {
			if(isim[i] == '_') isim[i] = ' ';
		}
		SCM_ExAll(RENK_GRI, "[YASAKLAMA]: %s, %s adlý kiþiyi sunucudan yasakladý. Sebep: %s", oyuncuData[playerid][oAdminNick], isim, sebep);
		Log_Kaydet("loglar/banlamalar.txt", "[%s] %s(%s) adli kisi %s adli kisiyi %s sebebiyle sunucudan offline yasakladi.", Tarih(), OyuncuIsim(playerid), oyuncuData[playerid][oAdminNick], isim, sebep);
	}
	return 1;
}

public ParaDene(playerid, isim[], miktar)
{
	static query[128], rows, fields, eski;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) {
		for (new i = 0, len = strlen(isim); i < len; i ++) {
			if(isim[i] == '_') isim[i] = ' ';
		}
		hataMesaji(playerid, "%s adlý oyuncu veritabanýnda bulunamadý.", isim);
	}
	else if(rows) {

		eski = vericek_int(0, "Para");
		mysql_format(g_SQL, query, sizeof(query),"UPDATE `oyuncular` SET `Para` = %d WHERE `isim` = '%e'", eski + miktar, isim);
		mysql_query(g_SQL, query);
		for (new i = 0, len = strlen(isim); i < len; i ++) {
			if(isim[i] == '_') isim[i] = ' ';
		}
		SunucuMesaji(playerid, "%s adlý kiþiye %s miktarýnda para verildi.", isim, NumaraFormati(miktar));
		YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s, %s adlý kiþiye offline olarak %s miktarýnda para verdi.", oyuncuData[playerid][oAdminNick], isim, NumaraFormati(miktar));
		Log_Kaydet("loglar/admin_log.txt", "[%s] %s, %s adlý kiþiye offline olarak %s miktarýnda para verdi.", Tarih(), oyuncuData[playerid][oAdminNick], isim, NumaraFormati(miktar));
	}
	return 1;
}

public HapisDene(playerid, isim[], dakika, sebep[])
{
	static query[128], rows, fields;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows) {
		for (new i = 0, len = strlen(isim); i < len; i ++) {
			if(isim[i] == '_') isim[i] = ' ';
		}
		hataMesaji(playerid, "%s adlý oyuncu veritabanýnda bulunamadý.", isim);
	}
	else if(rows) {

		mysql_format(g_SQL, query, sizeof(query),"UPDATE `oyuncular` SET `Hapis` = %d WHERE `isim` = '%e'", dakika, isim);
		mysql_query(g_SQL, query);
		for (new i = 0, len = strlen(isim); i < len; i ++) {
			if(isim[i] == '_') isim[i] = ' ';
		}
		SunucuMesaji(playerid, "%s adlý kiþi %d dakika hapise atýldý.", isim, dakika);
		SCM_ExAll(RENK_YETKILI, "[YETKÝLÝ ÝÞLEM]: {FFFFFF}%s, %s adlý yetkili tarafýndan %d dakika cezalandýrýldý. Sebep: %s", isim, oyuncuData[playerid][oAdminNick], dakika, sebep);
		Log_Kaydet("loglar/admin_log.txt", "[%s] %s, %s adlý kiþiyi %d dakika cezalandýrdý. sebep: %s", Tarih(), oyuncuData[playerid][oAdminNick], isim, dakika, sebep);
	}
	return 1;
}

public oyuncuarat(playerid)
{
	static rows, fields;
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(!rows)
	{
		SohbetTemizle(playerid, false);
		SunucuMesaji(playerid, "Karakter bulunamadý, http://www.vice-rp.com/ üzerinden karakter baþvurusu yapýnýz.");
		KickEx(playerid);
		}
		else
		{
			SetPlayerColor(playerid, RENK_VARSAYILAN);
			SetPlayerCameraPos(playerid, 158.3348,-2098.9861,56.6490);
			SetPlayerCameraLookAt(playerid, 176.5682,-2053.3926,48.5751);
			GirisEkraniYukle(playerid);
			SelectTextDraw(playerid, 0xFF0000FF);
	    //if(!IsPlayerAdmin(playerid)) oyuncuData[playerid][oGirisTimer] = SetTimerEx("KickTimer", 45 * 1000, false, "d", playerid);
		}
		return 1;
	}

	public karaktersecimi(playerid)
	{
		new rows;
		cache_get_row_count(rows);
		if (oyuncuData[playerid][oKarakter] != 0)
		{
			oyuncuData[playerid][oKarakter] = 0;
		}
		for (new i = 0; i < rows; i ++) {
			format(OyuncuKarakter[playerid][i], MAX_PLAYER_NAME + 1, "%s", vericek_varchar(i, "isim"));
			format(OyuncuKarakterLokasyon[playerid][i], 36, "%s", vericek_varchar(i, "SonGiris"));
			OyuncuKarakterSkin[playerid][i] = vericek_int(i, "Kiyafet");
			OyuncuKarakterBoy[playerid][i] = vericek_int(i, "Boy");
			OyuncuKarakterKilo[playerid][i] = vericek_int(i, "Kilo");
			OyuncuKarakterSeviye[playerid][i] = vericek_int(i, "Level");
		}
		new string[100];
		format(string, sizeof string, "%s" , (!OyuncuKarakter[playerid][0][0]) ? ("Karakter_Yok") : (OyuncuKarakter[playerid][0]));
		PlayerTextDrawSetString(playerid, characterSelect[playerid][5], string);

		format(string, sizeof string, "%s", (!OyuncuKarakter[playerid][1][0]) ? ("Karakter_Yok") : (OyuncuKarakter[playerid][1]));
		PlayerTextDrawSetString(playerid, characterSelect[playerid][6], string);

		format(string, sizeof string, "%s", (!OyuncuKarakter[playerid][2][0]) ? ("Karakter_Yok") : (OyuncuKarakter[playerid][2]));
		PlayerTextDrawSetString(playerid, characterSelect[playerid][7], string);
		format(string, sizeof string, "%s", (!OyuncuKarakter[playerid][3][0]) ? ("Karakter_Yok") : (OyuncuKarakter[playerid][3]));
		PlayerTextDrawSetString(playerid, characterSelect[playerid][8], string);

		PlayerTextDrawSetPreviewModel(playerid, characterSelect[playerid][25], OyuncuKarakterSkin[playerid][0]);
		PlayerTextDrawSetPreviewModel(playerid, characterSelect[playerid][26], OyuncuKarakterSkin[playerid][1]);
		PlayerTextDrawSetPreviewModel(playerid, characterSelect[playerid][27], OyuncuKarakterSkin[playerid][2]);
		PlayerTextDrawSetPreviewModel(playerid, characterSelect[playerid][28], OyuncuKarakterSkin[playerid][3]);

		new seviye[30];
		format(seviye, sizeof seviye, "Seviye:_%d", OyuncuKarakterSeviye[playerid][0]);
		PlayerTextDrawSetString(playerid, characterSelect[playerid][1], seviye);

		format(seviye, sizeof seviye, "Seviye:_%d", OyuncuKarakterSeviye[playerid][1]);
		PlayerTextDrawSetString(playerid, characterSelect[playerid][2], seviye);

		format(seviye, sizeof seviye, "Seviye:_%d", OyuncuKarakterSeviye[playerid][2]);
		PlayerTextDrawSetString(playerid, characterSelect[playerid][3], seviye);

		format(seviye, sizeof seviye, "Seviye:_%d", OyuncuKarakterSeviye[playerid][3]);
		PlayerTextDrawSetString(playerid, characterSelect[playerid][4], seviye);

		format(seviye, sizeof seviye, "Boy:_%d", OyuncuKarakterBoy[playerid][0]);
		PlayerTextDrawSetString(playerid, characterSelect[playerid][9], seviye);

		format(seviye, sizeof seviye, "Boy:_%d", OyuncuKarakterBoy[playerid][1]);
		PlayerTextDrawSetString(playerid, characterSelect[playerid][12], seviye);

		format(seviye, sizeof seviye, "Boy:_%d", OyuncuKarakterBoy[playerid][2]);
		PlayerTextDrawSetString(playerid, characterSelect[playerid][15], seviye);

		format(seviye, sizeof seviye, "Boy:_%d", OyuncuKarakterBoy[playerid][3]);
		PlayerTextDrawSetString(playerid, characterSelect[playerid][18], seviye);

		format(seviye, sizeof seviye, "Kilo:_%d", OyuncuKarakterKilo[playerid][0]);
		PlayerTextDrawSetString(playerid, characterSelect[playerid][10], seviye);

		format(seviye, sizeof seviye, "Kilo:_%d", OyuncuKarakterKilo[playerid][1]);
		PlayerTextDrawSetString(playerid, characterSelect[playerid][13], seviye);

		format(seviye, sizeof seviye, "Kilo:_%d", OyuncuKarakterKilo[playerid][2]);
		PlayerTextDrawSetString(playerid, characterSelect[playerid][16], seviye);

		format(seviye, sizeof seviye, "Kilo:_%d", OyuncuKarakterKilo[playerid][3]);
		PlayerTextDrawSetString(playerid, characterSelect[playerid][19], seviye);

		format(seviye, sizeof seviye, "Son_Giris:_%s", OyuncuKarakterLokasyon[playerid][0]);
		PlayerTextDrawSetString(playerid, characterSelect[playerid][11], seviye);

		format(seviye, sizeof seviye, "Son_Giris:_%s", OyuncuKarakterLokasyon[playerid][1]);
		PlayerTextDrawSetString(playerid, characterSelect[playerid][14], seviye);

		format(seviye, sizeof seviye, "Son_Giris:_%s", OyuncuKarakterLokasyon[playerid][2]);
		PlayerTextDrawSetString(playerid, characterSelect[playerid][17], seviye);

		format(seviye, sizeof seviye, "Son_Giris:_%s", OyuncuKarakterLokasyon[playerid][3]);
		PlayerTextDrawSetString(playerid, characterSelect[playerid][20], seviye);

		for(new x = 0; x < 29; x++)
		{
			PlayerTextDrawShow(playerid, characterSelect[playerid][x]);
		}

		SelectTextDraw(playerid, 0xFF0000FF);
		karaktersecimekrani[playerid] = true;
		return 1;
	}

	public sahipvebirlikarat(playerid)
	{
		static rows, fields, mesaj[256], isim[64], aracid;
		cache_get_row_count(rows);
		cache_get_field_count(fields);
		aracid = Arac_IDBul(GetPlayerVehicleID(playerid));
		for (new i = 0; i != MAKSIMUM_BIRLIK; i ++) if(AracBilgi[aracid][aracBirlik] == BirlikBilgi[i][birlikID]) {
			format(mesaj, sizeof(mesaj), "%s", BirlikBilgi[i][birlikAd]);
		}
		if(rows) {
			format(isim, sizeof(isim), "%s", vericek_varchar(0, "isim"));
			for (new i = 0, len = strlen(isim); i < len; i ++) {
				if(isim[i] == '_') isim[i] = ' ';
			}
			SCM_Ex(playerid, -1, "{D5BE20}[ARAÇ]:{FFFFFF} Sahibi: %s / Modeli: %s / Kilometresi: %.2f", isim, AracModel(AracBilgi[aracid][aracModel]), AracBilgi[aracid][aracKM]);
			SCM_Ex(playerid, -1, "{D5BE20}[ARAÇ]:{FFFFFF} Plakasý: %s / Birliði: %s", AracBilgi[aracid][aracPlaka], mesaj);
			SCM_Ex(playerid, -1, "{D5BE20}[ARAÇ]:{FFFFFF} Vergi Borcu: %s/%s / Saatlik Vergi: %s", NumaraFormati(AracBilgi[aracid][aracVergi]), NumaraFormati(VergiAlgoritma(aracid, "max")), NumaraFormati(VergiAlgoritma(aracid, "saatlik")));
		}
		if(!rows) {
			SCM_Ex(playerid, -1, "{D5BE20}[ARAÇ]:{FFFFFF} Sahibi: Tespit Edilemedi / Modeli: %s / Kilometresi: %.2f", AracModel(AracBilgi[aracid][aracModel]), AracBilgi[aracid][aracKM]);
			SCM_Ex(playerid, -1, "{D5BE20}[ARAÇ]:{FFFFFF} Plakasý: %s / Birliði: %s", AracBilgi[aracid][aracPlaka], mesaj);
			SCM_Ex(playerid, -1, "{D5BE20}[ARAÇ]:{FFFFFF} Vergi Borcu: %s/%s / Saatlik Vergi: %s", NumaraFormati(AracBilgi[aracid][aracVergi]), NumaraFormati(VergiAlgoritma(aracid, "max")), NumaraFormati(VergiAlgoritma(aracid, "saatlik")));
		}
		return 1;
	}

	public sahiparat(playerid)
	{
		static rows, fields, isim[64], aracid;
		new ucret;
		cache_get_row_count(rows);
		cache_get_field_count(fields);
		aracid = Arac_IDBul(GetPlayerVehicleID(playerid));
		if(rows) {
			format(isim, sizeof(isim), "%s", vericek_varchar(0, "isim"));
			for (new i = 0, len = strlen(isim); i < len; i ++) {
				if(isim[i] == '_') isim[i] = ' ';
			}
			for(new i = 0; i < sizeof(SatilikAraclar) ; i++)
			{
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == SatilikAraclar[i][0]) {
					ucret = SatilikAraclar[i][1];
				}
			}
			SCM_Ex(playerid, -1, "{D5BE20}[ARAÇ]:{FFFFFF} Sahip: %s / Model: %s / Plaka: %s / Kilometre: %.2f", isim, AracModel(AracBilgi[aracid][aracModel]), AracBilgi[aracid][aracPlaka], AracBilgi[aracid][aracKM]);
			SCM_Ex(playerid, -1, "{D5BE20}[ARAÇ]:{FFFFFF} Vergi Borcu: %s/%s / Saatlik Vergi: %s / Fiyat: %s", NumaraFormati(AracBilgi[aracid][aracVergi]), NumaraFormati(VergiAlgoritma(aracid, "max")), NumaraFormati(VergiAlgoritma(aracid, "saatlik")), NumaraFormati(ucret));
		}
		if(!rows)
		{
			SCM_Ex(playerid, -1, "{D5BE20}[ARAÇ]:{FFFFFF} Sahibi: Tespit Edilemedi / Modeli: %s / Plakasý: %s / Kilometresi: %.2f", AracModel(AracBilgi[aracid][aracModel]), AracBilgi[aracid][aracPlaka], AracBilgi[aracid][aracKM]);
			SCM_Ex(playerid, -1, "{D5BE20}[ARAÇ]:{FFFFFF} Vergi Borcu: %s/%s / Saatlik Vergi: %s", NumaraFormati(AracBilgi[aracid][aracVergi]), NumaraFormati(VergiAlgoritma(aracid, "max")), NumaraFormati(VergiAlgoritma(aracid, "saatlik")));
		}
		return 1;
	}

	public yoneticiyasaklamaarat(playerid)
	{
		static rows, fields, isim[32], query[128];
		cache_get_row_count(rows);
		cache_get_field_count(fields);
		if(rows)
		{
			mysql_format(g_SQL, query, sizeof(query), "UPDATE `oyuncular` SET `oyuncuban` = '0' WHERE isim = `%s`", vericek_varchar(0, "isim"));
			mysql_tquery(g_SQL, query);
			format(isim, sizeof(isim), "%s", vericek_varchar(0, "isim"));
			for (new i = 0, len = strlen(isim); i < len; i ++) {
				if(isim[i] == '_') isim[i] = ' ';
			}
			mysql_format(g_SQL, query, sizeof(query), "DELETE FROM yasaklamalar WHERE isim = '%e'", vericek_varchar(0, "isim"));
			mysql_query(g_SQL, query);
			YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s adlý yönetici %s adlý oyuncunun yasaklamasýný kaldýrdý.", oyuncuData[playerid][oAdminNick], isim);
		}
		else if(!rows) hataMesaji(playerid, "Girilen oyuncu yasaklýlar listesinde bulunamadý.");
		return 1;
	}

	public yoneticiipyasaklamaarat(playerid)
	{
		static rows, fields, ip[16], query[128];
		cache_get_row_count(rows);
		cache_get_field_count(fields);
		if(rows)
		{
			mysql_format(g_SQL, query, sizeof(query), "UPDATE `ipban` SET `ip` = '0.0.0.0' WHERE `ip` = '%s'", vericek_varchar(0, "ip"));
			mysql_tquery(g_SQL, query);
			YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s adlý yönetici bir ip yasaklamasýný kaldýrdý. (IP: %s)", oyuncuData[playerid][oAdminNick], ip);
		}
		else if(!rows) hataMesaji(playerid, "Girilen ip yasaklýlar listesinde bulunamadý.");
		return 1;
	}

	function MotorKontrol(aracid) {
		new Float: can_kontrolarac;
		GetVehicleHealth(AracBilgi[aracid][aracYarat], can_kontrolarac);
		if(can_kontrolarac > 0 && can_kontrolarac < MOTOR_CAN) {
			AracDuzelt(AracBilgi[aracid][aracYarat]);
			SetVehicleHealth(AracBilgi[aracid][aracYarat], MOTOR_CAN);
			SetEngineStatus(AracBilgi[aracid][aracYarat], false);
			//printf("Düþük: %d", AracBilgi[aracid][aracYarat]);
		}
		return true;
	}

	forward KarakterDurumuCek(playerid);
	public KarakterDurumuCek(playerid)
	{
		new isim[32], oyuncuisim[32];
		format(isim, 32, vericek_varchar(0, "isim"));
		format(oyuncuisim, 32, oyuncuData[playerid][oIsim]);
		if(!strcmp(oyuncuData[playerid][oIsim], isim, true))
		{
			oyuncuData[playerid][oKarakterDurum] = 1;
		}
		else oyuncuData[playerid][oKarakterDurum] = 2;
		return 1;
	}

	forward RehberiYukle(playerid);
	public RehberiYukle(playerid)
	{
		new yukle, slot, rows;
		cache_get_row_count(rows);
		while(yukle < rows)
		{
			slot = vericek_int(yukle, "slot");
			RehberBilgi[playerid][slot][rehbernumara] = vericek_int(yukle, "rehbernumara");
			format(RehberBilgi[playerid][slot][rehberisim], 32, vericek_varchar(yukle, "rehberisim"));
			if(RehberBilgi[playerid][slot][rehbernumara] > 0)
			{
				RehberBilgi[playerid][slot][rehberID] = vericek_int(yukle, "rehberID");
				RehberBilgi[playerid][slot][rehberkullanimda] = true;
			}
			yukle++;
		}
		return 1;
	}

	public GirisTest(playerid)
	{
		if(!IsPlayerConnected(playerid)) return 0;
		static rows, fields;
		cache_get_row_count(rows);
		cache_get_field_count(fields);
		if(!rows)
		{
			SendClientMessage(playerid, RENK_KLASIK, "Hatalý þifre girdiniz, tekrar deneyin.");
			new str[MAX_PLAYER_NAME + 1 + 85];
			format(str, sizeof(str), "{FFFFFF}Sunucuya hoþgeldin {015668}%s\n{FFFFFF}Hesabýna giriþ yapabilmek için kutucuðu doldurmalýsýn.", OyuncuIsim(playerid, 1));
			ShowPlayerDialog(playerid, DIALOG_GIRIS, DIALOG_STYLE_PASSWORD, "Nitro Roleplay - Giriþ Yap", str, "Onayla", "Çýkýþ");
		}
		else if(rows)
		{
			static query[128];
			KillTimer(oyuncuData[playerid][oGirisTimer]);
			KillTimer(oyuncugiris[playerid]);
			SohbetTemizle(playerid, false);
			giristextdrawi[playerid] = false;
			mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `oyuncular` WHERE `forumid` = '%d' AND `oyuncuban` = '0'", oyuncuData[playerid][oForumID]);
			mysql_tquery(g_SQL, query, "karaktersecimi", "d", playerid);
		}
		return 1;
	}

	public HesapYukle(playerid)
	{
		oyuncuData[playerid][oAdmin] = vericek_int(0, "Admin");
		oyuncuData[playerid][oVicePoint] = vericek_int(0, "VicePoint");
		oyuncuData[playerid][oViceCoin] = vericek_int(0, "ViceCoin");
		oyuncuData[playerid][oBakilanSoru] = vericek_int(0, "BakilanSoru");
		oyuncuData[playerid][oBakilanRapor] = vericek_int(0, "BakilanRapor");
		oyuncuData[playerid][oPremiumSkin][0] = vericek_int(0, "oPremiumSkinBir");
		oyuncuData[playerid][oPremiumSkin][1] = vericek_int(0, "oPremiumSkinIki");
		oyuncuData[playerid][oPremiumSkin][2] = vericek_int(0, "oPremiumSkinUc");
		oyuncuData[playerid][oIsimDegisimHakki] = vericek_int(0, "IsimDegisimHakki");
		oyuncuData[playerid][oOzelSkinAksesuar] = vericek_int(0, "OzelSkinAksesuar");
		oyuncuData[playerid][oPlakaDegisimHakki] = vericek_int(0, "PlakaDegisimHakki");
		oyuncuData[playerid][oTelefonDegisimHakki] = vericek_int(0, "TelefonDegisimHakki");
		oyuncuData[playerid][oBankaHesapDegisimHakki] = vericek_int(0, "BankaHesapDegisimHakki");
		oyuncuData[playerid][oDortXExp] = vericek_int(0, "DortXExp");
		oyuncuData[playerid][oEkonomiPaketi] = vericek_int(0, "EkonomiPaketi");
		oyuncuData[playerid][oMeslekPaketi] = vericek_int(0, "MeslekPaketi");
		oyuncuData[playerid][oMaskeHakki] = vericek_int(0, "MaskeHakki");
		oyuncuData[playerid][oCoolAracPaketi] = vericek_int(0, "CoolAracPaketi");
		oyuncuData[playerid][oMobilyaPaketi] = vericek_int(0, "MobilyaPaketi");
		oyuncuData[playerid][oUcuncuDilHakki] = vericek_int(0, "UcuncuDilHakki");
		oyuncuData[playerid][oBisikletHakki] = vericek_int(0, "BisikletHakki");
		oyuncuData[playerid][oBesYetenekPuani] = vericek_int(0, "BesYetenekPuani");
		oyuncuData[playerid][oOnYetenekPuani] = vericek_int(0, "OnYetenekPuani");
		oyuncuData[playerid][oOnBesYetenekPuani] = vericek_int(0, "OnBesYetenekPuani");
		oyuncuData[playerid][oYetenekSifirlamaHakki] = vericek_int(0, "YetenekSifirlamaHakki");
		oyuncuData[playerid][oikixpayday] = vericek_int(0, "ikixpayday");
		oyuncuData[playerid][oVIP] = vericek_int(0, "VIP");
		format(oyuncuData[playerid][oGoogleIP], 17, vericek_varchar(0, "GoogleIP"));
		format(oyuncuData[playerid][oGoogleKod], 17, vericek_varchar(0, "GoogleKey"));
		oyuncuData[playerid][oGoogleDurum] = vericek_int(0, "GoogleDurum");
	}

	public OyuncuYukle(playerid)
	{
		SohbetTemizle(playerid, false);
		static query[256], kiyafet;
		oyuncuData[playerid][oID] = vericek_int(0, "ID");
		oyuncuData[playerid][oKarakterYaratildi] = vericek_int(0, "yaratildi");
		oyuncuData[playerid][oHelper] = vericek_int(0, "Tester");
		oyuncuData[playerid][oUcusLisansi] = vericek_int(0, "UcusLisansi");
		oyuncuData[playerid][oKiyafet] = vericek_int(0, "Kiyafet");
		oyuncuData[playerid][oGeciciKiyafet] = vericek_int(0, "GKiyafet");
		oyuncuData[playerid][oKarakterDurum] = vericek_int(0, "KarakterDurum");
		oyuncuData[playerid][oKiyafetDolabi][0] = vericek_int(0, "oKiyafetDolabiBir");
		oyuncuData[playerid][oKiyafetDolabi][1] = vericek_int(0, "oKiyafetDolabiIki");
		oyuncuData[playerid][oKiyafetDolabi][2] = vericek_int(0, "oKiyafetDolabiUc");
		oyuncuData[playerid][oyuncuboy] = vericek_int(0, "Boy");
		oyuncuData[playerid][oyuncukilo] = vericek_int(0, "Kilo");
		oyuncuData[playerid][oCan] = vericek_float(0, "Can");
		oyuncuData[playerid][oZirh] = vericek_float(0, "Zirh");
		oyuncuData[playerid][oPos][0] = vericek_float(0, "x");
		oyuncuData[playerid][oPos][1] = vericek_float(0, "y");
		oyuncuData[playerid][oPos][2] = vericek_float(0, "z");
		oyuncuData[playerid][oPos][3] = vericek_float(0, "a");
		oyuncuData[playerid][oPara] = vericek_int(0, "Para");
		oyuncuData[playerid][oGozalti] = vericek_int(0, "Gozalti");
		oyuncuData[playerid][oBirikenKoku] = vericek_int(0, "BirikenKoku");
		oyuncuData[playerid][oPDEhliyetUyari] = vericek_int(0, "PDEhliyetUyari");
		oyuncuData[playerid][oKokuDurum] = vericek_int(0, "KokuDurum");
		oyuncuData[playerid][oAracCalmaSiniri] = vericek_int(0, "oAracCalmaSiniri");
		oyuncuData[playerid][oVW] = vericek_int(0, "vw");
		oyuncuData[playerid][oInterior] = vericek_int(0, "interior");
		oyuncuData[playerid][oCinsiyet] = vericek_int(0, "Cinsiyet");
		oyuncuData[playerid][oSeviye] = vericek_int(0, "Level");
		oyuncuData[playerid][oExp] = vericek_int(0, "Exp");
		oyuncuData[playerid][oDakika] = vericek_int(0, "Dakika");
		oyuncuData[playerid][oMaasDakika] = vericek_int(0, "MaasDakika");
		oyuncuData[playerid][oOynamaSaati] = vericek_int(0, "OynamaSaati");
		//oyuncuData[playerid][oAclik] = vericek_int(0, "aclik");
		oyuncuData[playerid][oMevduat] = vericek_int(0, "mevduat");
		//oyuncuData[playerid][oSusuzluk] = vericek_int(0, "susuzluk");
		oyuncuData[playerid][oTruckerSeviye] = vericek_int(0, "oTruckerSeviye");
		oyuncuData[playerid][oTruckerEXP] = vericek_int(0, "oTruckerEXP");
		oyuncuData[playerid][oLiderlikYetenek] = vericek_int(0, "LiderlikYetenek");
		oyuncuData[playerid][oUretimYetenek] = vericek_int(0, "UretimYetenek");
		oyuncuData[playerid][oSurusYetenek] = vericek_int(0, "SurusYetenek");
		oyuncuData[playerid][oHirsizlikYetenek] = vericek_int(0, "HirsizlikYetenek");
		oyuncuData[playerid][oGucYetenek] = vericek_int(0, "GucYetenek");
		oyuncuData[playerid][oDayaniklilik] = vericek_int(0, "Dayaniklilik");
		oyuncuData[playerid][oDayaniklilikEXP] = vericek_int(0, "DayaniklilikEXP");
		oyuncuData[playerid][oKimyaYetenek] = vericek_int(0, "KimyaYetenek");
		oyuncuData[playerid][oLiderlikYetenekEXP] = vericek_int(0, "LiderlikEXP");
		oyuncuData[playerid][oUretimYetenekEXP] = vericek_int(0, "UretimEXP");
		oyuncuData[playerid][oSurusYetenekEXP] = vericek_int(0, "SurusEXP");
		oyuncuData[playerid][oHirsizlikYetenekEXP] = vericek_int(0, "HirsizlikEXP");
		oyuncuData[playerid][oGucYetenekEXP] = vericek_int(0, "GucEXP");
		oyuncuData[playerid][oKimyaYetenekEXP] = vericek_int(0, "KimyaEXP");
		oyuncuData[playerid][oYetenekPuani] = vericek_int(0, "YetenekPuani");
		oyuncuData[playerid][oBalik][0] = vericek_int(0, "Balik0");
		oyuncuData[playerid][oBalik][1] = vericek_int(0, "Balik1");
		oyuncuData[playerid][oBalik][2] = vericek_int(0, "Balik2");
		oyuncuData[playerid][oBalik][3] = vericek_int(0, "Balik3");
		oyuncuData[playerid][oBalik][4] = vericek_int(0, "Balik4");
		oyuncuData[playerid][oyemsayisi] = vericek_int(0, "Yemler");
		oyuncuData[playerid][balikexp] = vericek_int(0, "BalikEXP");
		oyuncuData[playerid][balikseviye] = vericek_int(0, "BalikSeviye");
		oyuncuData[playerid][oBirlik] = vericek_int(0, "birlik");
		oyuncuData[playerid][oBirlikRutbe] = vericek_int(0, "birlikrutbe");
		oyuncuData[playerid][oYaraliSure] = vericek_int(0, "yaralisure");
		oyuncuData[playerid][oTenRengi] = vericek_int(0, "TenRengi");
		oyuncuData[playerid][oKibrit] = vericek_int(0, "Kibrit");
		oyuncuData[playerid][oOdun] = vericek_int(0, "Odun");
		oyuncuData[playerid][oHesapNumarasi] = vericek_int(0, "HesapNumarasi");
		oyuncuData[playerid][oBankaPara] = vericek_int(0, "BankaPara");
		oyuncuData[playerid][oSigara] = vericek_int(0, "Sigara");
		oyuncuData[playerid][oFirma] = vericek_int(0, "firma");
		oyuncuData[playerid][oFirmarutbe] = vericek_int(0, "firmarutbe");
		oyuncuData[playerid][oMedyatercih] = vericek_int(0, "mtercih");

		oyuncuData[playerid][oSiparis][0] = vericek_int(0, "SiparisModel");
		oyuncuData[playerid][oSiparis][1] = vericek_int(0, "SiparisZaman");
		oyuncuData[playerid][oTelefon] = vericek_int(0, "Telefon");
		oyuncuData[playerid][oTelefonNumarasi] = vericek_int(0, "TelefonNumarasi");
		oyuncuData[playerid][oSaksi] = vericek_int(0, "Saksi");
		oyuncuData[playerid][oGubre] = vericek_int(0, "Gubre");
		oyuncuData[playerid][oVantilator] = vericek_int(0, "Vantilator");
		oyuncuData[playerid][oKulaklik] = vericek_int(0, "Kulaklik");
		oyuncuData[playerid][oTohum] = vericek_int(0, "Tohum");
		oyuncuData[playerid][oUyusturucu][0] = vericek_int(0, "UyusturucuC");
		oyuncuData[playerid][oUyusturucu][1] = vericek_int(0, "UyusturucuB");
		oyuncuData[playerid][oUyusturucu][2] = vericek_int(0, "UyusturucuA");
		oyuncuData[playerid][oGYMHak] = vericek_int(0, "GYMHak");
		oyuncuData[playerid][oBalikTutmaSinir] = vericek_int(0, "BalikTutmaSinir");
		oyuncuData[playerid][oUyusturucuOnay] = vericek_int(0, "UyusturucuOnay");
		oyuncuData[playerid][oMeslek] = vericek_int(0, "Meslek");
		oyuncuData[playerid][oHapisSure][0] = vericek_int(0, "Hapis");
		oyuncuData[playerid][oHapisSure][1] = vericek_int(0, "ICHapis");
		oyuncuData[playerid][oVatandaslikNo] = vericek_int(0, "VatandaslikNo");
		oyuncuData[playerid][oRuhsat] = vericek_int(0, "Ruhsat");
		oyuncuData[playerid][oHapisID] = vericek_int(0, "IDHapis");
		oyuncuData[playerid][oEkstraDil] = vericek_int(0, "EkstraDil");
		oyuncuData[playerid][oUcuncuDil] = vericek_int(0, "UcuncuDil");
		oyuncuData[playerid][oMuzikKutusu] = vericek_int(0, "boombox");
		oyuncuData[playerid][oAsansor] = vericek_int(0, "Asansor");
		oyuncuData[playerid][oKanama] = vericek_int(0, "Kanama");
		oyuncuData[playerid][oHelper] = vericek_int(0, "Helper");
		oyuncuData[playerid][oBagimlilik] = vericek_int(0, "bagimlilik");
		oyuncuData[playerid][oBagimlilikEtki] = vericek_int(0, "bagimlilikEtki");

		oyuncuData[playerid][oKonusmaAnimasyon] = vericek_int(0, "talkAnim");

		new rehberquery[256], karakterdurumquery[256];
		format(rehberquery, sizeof(rehberquery), "SELECT * FROM `rehberler` WHERE `ID` = '%d'", oyuncuData[playerid][oID]);
		mysql_tquery(g_SQL, rehberquery, "RehberiYukle", "d", playerid);
		format(karakterdurumquery, sizeof karakterdurumquery, "SELECT * FROM oyuncular WHERE oyuncuban = 0 AND forumid = '%d' order by id asc", oyuncuData[playerid][oForumID]);
		mysql_tquery(g_SQL, karakterdurumquery, "KarakterDurumuCek", "d", playerid);
		if(oyuncuData[playerid][oVatandaslikNo] == 0) {
			new vno6 = randomEx(10000000, 99999999);
			mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM oyuncular WHERE VatandaslikNo = '%d'", vno6);
			mysql_tquery(g_SQL, query, "vnoarat", "dd", playerid, vno6);
		}
		switch(vericek_bool(0, "isbasi")) {
			case 0: oyuncuData[playerid][oIsbasi] = false;
			case 1: oyuncuData[playerid][oIsbasi] = true;
		}
		switch(vericek_bool(0, "Ehliyet")) {
			case 0: oyuncuData[playerid][oEhliyet] = false;
			case 1: oyuncuData[playerid][oEhliyet] = true;
		}
		switch(vericek_bool(0, "Cakmak")) {
			case 0: oyuncuData[playerid][oCakmak] = false;
			case 1: oyuncuData[playerid][oCakmak] = true;
		}
		format(oyuncuData[playerid][oIsim], MAX_PLAYER_NAME, "%s", vericek_varchar(0, "isim"));
		format(oyuncuData[playerid][oAdminNick], 32, "%s", vericek_varchar(0, "AdminNick"));
		format(oyuncuData[playerid][oDogumYeri], 32, "%s", vericek_varchar(0, "DogumYeri"));
		format(oyuncuData[playerid][oDogumTarihi], 32, "%s", vericek_varchar(0, "dogumtarihi"));
		format(oyuncuData[playerid][oForumAdi], 24, "%s", vericek_varchar(0, "ForumAdi"));
		format(oyuncuData[playerid][oSonGiris], 36, "%s", vericek_varchar(0, "SonGiris"));
		oyuncuData[playerid][pEnvanterAgirlik] = 0.0;
		for (new e = 0; e < MAX_ITEM; e ++) {
			EnvanterData[playerid][i_tip][e] = 0;
			EnvanterData[playerid][i_var][e] = 0;
			EnvanterData[playerid][i_aktif][e] = false;
			EnvanterData[playerid][i_craft][e] = false;
		}
		for (new i = 0; i < 13; i ++) {
			format(query, sizeof(query), "Silah%d", i + 1);
			oyuncuData[playerid][oSilah][i] = vericek_int(0, query);

			format(query, sizeof(query), "Mermi%d", i + 1);
			oyuncuData[playerid][oMermi][i] = vericek_int(0, query);
		}
		mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `itemler` WHERE `oyuncu` = '%e'",  oyuncuData[playerid][oIsim]);
		mysql_tquery(g_SQL, query, "OnItemlerYuklendi", "d", playerid);
		oyuncuData[playerid][oAtYarisi] = vericek_int(0, "AtYarisi");
		oyuncuData[playerid][oAtBahis] = vericek_int(0, "AtBahis");
		oyuncuData[playerid][oOynananAt] = vericek_int(0, "OynananAt");
		CanDuzenle(playerid, oyuncuData[playerid][oCan]);
		ZirhDuzenle(playerid, oyuncuData[playerid][oZirh]);
		switch(oyuncuData[playerid][oGeciciKiyafet]) {
			case 0: kiyafet = oyuncuData[playerid][oKiyafet];
			default: kiyafet = oyuncuData[playerid][oGeciciKiyafet];
		}
		SetSpawnInfo(playerid, 0, kiyafet, oyuncuData[playerid][oPos][0], oyuncuData[playerid][oPos][1], oyuncuData[playerid][oPos][2], oyuncuData[playerid][oPos][3], 0, 0, 0, 0, 0, 0);
		SetPlayerName(playerid, oyuncuData[playerid][oIsim]);
		ResetPlayerMoney(playerid);
		GivePlayerMoney(playerid, oyuncuData[playerid][oPara]);
		SetPlayerInterior(playerid, oyuncuData[playerid][oInterior]);
		SetPlayerVirtualWorld(playerid, oyuncuData[playerid][oVW]);
		switch(oyuncuData[playerid][oKarakterYaratildi]) {
			case 0: { OyuncuCinsiyetSec(playerid); return 1; }
			case 2: { DialogGoster(playerid, 0, DIALOG_STYLE_MSGBOX, "> Bilgi", "Baþvurunuz daha incelenmediði için þu an giriþ yapamýyorsunuz.", "", ""); KickEx(playerid); return 1; }
		}
		oyuncuData[playerid][oIlkGiris] = true;
		oyuncuData[playerid][oGiris] = true;
		SpawnPlayer(playerid);
		SetTimerEx("skinduzelt", 100, false, "i", playerid);
		TogglePlayerControllable(playerid, true);
		new isminicek[64];
		GetPlayerName(playerid, isminicek, sizeof(isminicek));
		if(strfind(isminicek, "Nitro_", true) != -1) return KickEx(playerid);
		foreach(new i : Player) if(OyuncuBirlikTuru(playerid) == BIRLIK_POLIS && oyuncuData[i][oDestek] == true) SetPlayerMarkerForPlayer(playerid, i, 0xFF0000AA);
		if(oyuncuData[playerid][oHapisSure][0] > 0) HapiseAt(playerid);
		else if(oyuncuData[playerid][oHapisSure][1] > 0) ICHapiseAt(playerid, oyuncuData[playerid][oHapisID]);
		else if(oyuncuData[playerid][oHapisSure][0] < 2 && oyuncuData[playerid][oHapisSure][1] < 2) {
			TogglePlayerControllable(playerid, false);
			SetTimerEx("oyuncucoz", 2000, false, "i", playerid);
		}
		new oyundaquery[256];
		format(oyundaquery, sizeof oyundaquery, "UPDATE `hesaplar` SET `oyuncuoyunda` = 1 WHERE `forumid` = '%d'", oyuncuData[playerid][oForumID]);
		mysql_query(g_SQL, oyundaquery);
		if(oyuncuData[playerid][oIsbasi] == true && oyuncuData[playerid][oBirlik] > -1) {
			switch(OyuncuBirlikTuru(playerid)) {
				case BIRLIK_POLIS: {
					SetPlayerColor(playerid, RENK_PDISBASI);
				}
				case BIRLIK_MEDIKAL: {
					SetPlayerColor(playerid, RENK_VCFD);
				}
			}
		}
		if(oyuncuData[playerid][oKanama] == 1) return UyariMesaji(playerid, "Kanamanýz varken oyundan çýktýðýnýz için zorunlu olarak bayýldýnýz."), oyuncuData[playerid][oKanama] = 0, SetPlayerHealth(playerid, 0.0);
		if(oyuncuData[playerid][oAsansor] != -1) {
			SetPlayerPos(playerid, 2131.507812, 1600.818481, 1008.359375);
			SetPlayerInterior(playerid, 1);
			if(oyuncuData[playerid][oAsansor] < 3)SetPlayerVirtualWorld(playerid, 30000);
			else if(oyuncuData[playerid][oAsansor] > 2) SetPlayerVirtualWorld(playerid, 15000);
			SetTimerEx("Asansor", 10000, false, "dd", playerid, oyuncuData[playerid][oAsansor]);
			SunucuMesaji(playerid, "Oyundan çýktýðýnýzda asansördeydiniz.");
		}
		if(dini_Exists(SUNUCU_DOSYA)) { if(strcmp(dini_Get(SUNUCU_DOSYA, "DUYURU"), "Yok", true)) DuyuruMesaji(playerid, "%s", dini_Get(SUNUCU_DOSYA, "DUYURU")); }
		else {
			dini_Create(SUNUCU_DOSYA);
			dini_Set(SUNUCU_DOSYA, "DUYURU", SUNUCU_ADI);
			DuyuruMesaji(playerid, "%s", dini_Get(SUNUCU_DOSYA, "DUYURU"));
		}
		if(oyuncuData[playerid][oBirlik] > -1 && !isnull(BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikDuyuru])) BirlikDuyuruMesaji(playerid, "%s", BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikDuyuru]);

		PlayerTextDrawDestroy(playerid, TDEditor_PTD[playerid][0]);
		PlayerTextDrawDestroy(playerid, TDEditor_PTD[playerid][1]);
		PlayerTextDrawDestroy(playerid, TDEditor_PTD[playerid][2]);
		PlayerTextDrawDestroy(playerid, TDEditor_PTD[playerid][3]);
		PlayerTextDrawDestroy(playerid, TDEditor_PTD[playerid][4]);
		giristextdrawi[playerid] = false;


		PlayerTextDrawHide(playerid, GirisText[playerid]);
		format(oyuncuData[playerid][oSonGiris], 36, convertDate(gettime(), 4));
		SunucuMesaji(playerid, "Hesap verileriniz baþarýyla yüklendi, keyifli roller.");

		if(OyuncuBirlikTuru(playerid) == BIRLIK_POLIS && oyuncuData[playerid][oIsbasi] == true)
		{
			foreach(new i : Player) if(OyuncuBirlikTuru(i) == BIRLIK_POLIS)
			{
				SetPlayerMarkerForPlayer(i, playerid, 0x8D8DFFFF);
			}
		}

		if(oyuncuData[playerid][oAdmin] > 0) {
			//SunucuMesaji(playerid, "%s olarak giriþ yaptýn.", adminlevelisim(i, oyuncuData[playerid][oAdmin]));
			//SpecDrawlariYukle(playerid);
			YoneticiMesaji(COLOR_WHETSTONE, "[SÝSTEM] {C8C8C8}%s, %s olarak giriþ yaptý.", oyuncuData[playerid][oIsim], adminlevelisim(playerid, oyuncuData[playerid][oAdmin]));
		}

		//DC GÝRÝÞ LOG
	 	new str2[15000];
		format(str2, sizeof(str2), "```[%s] (%s) [Nitro_%s] Para(%s)```", Tarih(), oyuncuData[playerid][oIsim], oyuncuData[playerid][oForumID], oyuncuData[playerid][oPara]);
		DCC_SendChannelMessage(girlog, str2);

		new isimstring[64], zamanstring[64], yetenekstring[32], paydaystring[6];
		format(isimstring, sizeof isimstring, "%s", oyuncuData[playerid][oIsim]);
		PlayerTextDrawSetString(playerid, sagaltdraw[playerid][1], isimstring);
		format(zamanstring, sizeof zamanstring, "%s", Tarih());
		PlayerTextDrawSetString(playerid, sagaltdraw[playerid][2], zamanstring);
		format(yetenekstring, sizeof yetenekstring, "%d", oyuncuData[playerid][oYetenekPuani]);
		PlayerTextDrawSetString(playerid, sagaltdraw[playerid][3], yetenekstring);
		format(paydaystring, sizeof paydaystring, "%d", 60 - oyuncuData[playerid][oDakika]);
		PlayerTextDrawSetString(playerid, sagaltdraw[playerid][4], paydaystring);

		PlayerTextDrawShow(playerid, sagaltdraw[playerid][0]);
		PlayerTextDrawShow(playerid, sagaltdraw[playerid][1]);
		PlayerTextDrawShow(playerid, sagaltdraw[playerid][2]);
		PlayerTextDrawShow(playerid, sagaltdraw[playerid][3]);
		PlayerTextDrawShow(playerid, sagaltdraw[playerid][4]);

		SilahAyarla(playerid);
		/*if(GoogleOnayDurumu == true)
		{
			#if SQL_BAGLANTI == 2
			if(oyuncuData[playerid][oAdmin] > 0 || oyuncuData[playerid][oGoogleDurum] == 1)
			{
			new oyuncuip[16];
	        GetPlayerIp(playerid, oyuncuip, sizeof(oyuncuip));
			if(!strcmp(oyuncuip, oyuncuData[playerid][oGoogleIP], true))
			{
			    SunucuMesaji(playerid, "Çift faktörlü doðrulamanýz aktif, iyi oyunlar.");
		    	new queryxd[90];
			    mysql_format(g_SQL, queryxd, sizeof(queryxd), "UPDATE `hesaplar` SET `GoogleIP` = '%e' WHERE `forumid` = '%d'", oyuncuip, oyuncuData[playerid][oForumID]);
				mysql_query(g_SQL, queryxd);
			}
			else
			{
			    oyuncuData[playerid][oKarakterSecimTimer] = SetTimerEx("vcguardtimer", 30 * 1000, false, "i", playerid);
			    vcGuardMesaji(playerid, "Çift Faktörlü doðrulamanýzý yapmanýz için 30 saniyeniz bulunmaktadýr.");
				vcGuardMesaji(playerid, "Detaylý bilgi için VC-GUARD sayfasýný ziyaret edebilirsiniz. (vice-rp.com > VCP > VC-GUARD)");
				oyuncuData[playerid][oDogrulama] = GoogleAuthenticatorCode(oyuncuData[playerid][oGoogleKod], gettime());
				Dialog_Show(playerid, googleauth, DIALOG_STYLE_INPUT, "Çift Faktörlü Doðrulama", "{FFFFFF}Hesaplarýnýzýn güvenliði için çift aþamalý doðrulama sistemi kullanýlmaktadýr.\n{FFFFFF}Lütfen altý haneli {90C3D4}Google Authentication{FFFFFF} kodunuzu boþluk býrakmadan giriniz.", "Tamam", "Iptal");
			}
			}
			#elseif SQL_BAGLANTI == 1
			new oyuncuip[16];
	        GetPlayerIp(playerid, oyuncuip, sizeof(oyuncuip));
		    SunucuMesaji(playerid, "Çift faktörlü doðrulamanýz aktif, iyi oyunlar.");
	    	new queryxd[90];
		    mysql_format(g_SQL, queryxd, sizeof(queryxd), "UPDATE `hesaplar` SET `GoogleIP` = '%e' WHERE `forumid` = '%d'", oyuncuip, oyuncuData[playerid][oForumID]);
			mysql_query(g_SQL, queryxd);
			#endif
		}*/
		return 1;
	}

public C_Paused(playerid)
{
    if(GetTickCount()-g_Paused[playerid] > TIME_DIF && g_Requesting[playerid] != true && g_IsPaused[playerid] != true && InvalidStates(playerid) != 1)
    {
        g_IsPaused[playerid] = true;
    }
    else if(GetTickCount()-g_Paused[playerid] < TIME_DIF && g_Requesting[playerid] != true && g_IsPaused[playerid] != false && InvalidStates(playerid) != 1)
    {
        g_IsPaused[playerid] = false;
    }
    return 1;
}

stock GIsPlayerPaused(playerid) { return g_IsPaused[playerid]; }

stock InvalidStates(playerid)
{
    new pState = GetPlayerState(playerid);
    if(pState == 0 || pState == 7) return 1;
    else return 0;
}

	stock PlayerFacePlayer(playerid, targetplayerid)
	{
		new
		Float: Angle;

		GetPlayerFacingAngle(playerid, Angle);
		SetPlayerFacingAngle(targetplayerid, Angle+180);
		return 1;
	}

	public SunucuRestart() {
		foreach (new i : Player) {
			OyuncuKaydet(i);
			oyuncuData[i][oGiris] = false;
			new isim[MAX_PLAYER_NAME];
			format(isim, sizeof(isim), "%03d", oyuncuData[i][oID]);
			SetPlayerName(i, isim);
			if(!IsPlayerAdmin(i) && oyuncuData[i][oAdmin] < 1) KickEx(i);
		}
		if(sunucukilit == true) {
			sunucukilit = false;
			SendRconCommand("password 0");
		}
		SendRconCommand("gmx");
		return 1;
	}

	public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
	{
		if(response)
		{
			if(modelid != 18656)
			{
				if(fScaleX < 0.1) fScaleX = 0.1;
				if(fScaleX > 1.5) fScaleX = 1.5;
				if(fScaleY < 0.1) fScaleY = 0.1;
				if(fScaleY > 1.5) fScaleY = 1.5;
				if(fScaleZ < 0.1) fScaleZ = 0.1;
				if(fScaleZ > 1.5) fScaleZ = 1.5;
				if(fOffsetX < -100) fOffsetX = 0;
				if(fOffsetX > 100) fOffsetX = 100;
				if(fOffsetY < -100) fOffsetY = 0;
				if(fOffsetY > 100) fOffsetY = 100;
				if(fOffsetZ < -100) fOffsetZ = 0;
				if(fOffsetZ > 100) fOffsetZ = 100;
			}

			oyuncakData[playerid][secilenslot[playerid]][ptPosX] = fOffsetX;
			oyuncakData[playerid][secilenslot[playerid]][ptPosY] = fOffsetY;
			oyuncakData[playerid][secilenslot[playerid]][ptPosZ] = fOffsetZ;
			oyuncakData[playerid][secilenslot[playerid]][ptRotX] = fRotX;
			oyuncakData[playerid][secilenslot[playerid]][ptRotY] = fRotY;
			oyuncakData[playerid][secilenslot[playerid]][ptRotZ] = fRotZ;
			oyuncakData[playerid][secilenslot[playerid]][ptScaleX] = fScaleX;
			oyuncakData[playerid][secilenslot[playerid]][ptScaleY] = fScaleY;
			oyuncakData[playerid][secilenslot[playerid]][ptScaleZ] = fScaleZ;

			RemovePlayerAttachedObject(playerid, secilenslot[playerid]);
			SetPlayerAttachedObject(playerid, secilenslot[playerid], oyuncakData[playerid][secilenslot[playerid]][ptModelID],
				oyuncakData[playerid][secilenslot[playerid]][ptBone], oyuncakData[playerid][secilenslot[playerid]][ptPosX],
				oyuncakData[playerid][secilenslot[playerid]][ptPosY], oyuncakData[playerid][secilenslot[playerid]][ptPosZ],
				oyuncakData[playerid][secilenslot[playerid]][ptRotX], oyuncakData[playerid][secilenslot[playerid]][ptRotY],
				oyuncakData[playerid][secilenslot[playerid]][ptRotZ], oyuncakData[playerid][secilenslot[playerid]][ptScaleX],
				oyuncakData[playerid][secilenslot[playerid]][ptScaleY], oyuncakData[playerid][secilenslot[playerid]][ptScaleZ],
				oyuncakData[playerid][secilenslot[playerid]][ptRenk]);
			AksesuarKaydet(playerid);
			oyuncakData[playerid][secilenslot[playerid]][ptKullanim] = 1;
		}
		else
		{
			RemovePlayerAttachedObject(playerid, secilenslot[playerid]);
			SetPlayerAttachedObject(playerid, secilenslot[playerid], oyuncakData[playerid][secilenslot[playerid]][ptModelID],
				oyuncakData[playerid][secilenslot[playerid]][ptBone], oyuncakData[playerid][secilenslot[playerid]][ptPosX],
				oyuncakData[playerid][secilenslot[playerid]][ptPosY], oyuncakData[playerid][secilenslot[playerid]][ptPosZ],
				oyuncakData[playerid][secilenslot[playerid]][ptRotX], oyuncakData[playerid][secilenslot[playerid]][ptRotY],
				oyuncakData[playerid][secilenslot[playerid]][ptRotZ], oyuncakData[playerid][secilenslot[playerid]][ptScaleX],
				oyuncakData[playerid][secilenslot[playerid]][ptScaleY], oyuncakData[playerid][secilenslot[playerid]][ptScaleZ],
				oyuncakData[playerid][secilenslot[playerid]][ptRenk]);
			oyuncakData[playerid][secilenslot[playerid]][ptKullanim] = 1;
		}
		return 1;
	}

	stock AksesuarMenusu(playerid, listitem)
	{
		switch(listitem)
		{
			case 0:
			{
				new stringg[856],baslik[256], durum[128];
				strcat(stringg, "Eþya\tBölge\tDurum\n");
				for(new x;x<MAX_AKSESUAR;x++)
				{
					new name[64];
					format(name, sizeof(name), "-");

					for(new i;i<sizeof(HoldingObjectsAll);i++)
					{
						if(HoldingObjectsAll[i][holdingmodelid] == oyuncakData[playerid][x][ptModelID])
						{
							format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
						}
					}
					if(oyuncakData[playerid][x][ptRealID] != 0)
					{
						if(oyuncakData[playerid][x][ptKullanim] == 1) format(durum, sizeof(durum), "{28CA6D}Kullanýmda");
						if(oyuncakData[playerid][x][ptKullanim] == 0) format(durum, sizeof(durum), "{D05A22}Takýlý Deðil");
					}
					else format(durum, sizeof(durum), "Boþ");
					format(stringg, sizeof(stringg), "%s%s\t%s\t%s\n", stringg, name, KemikKisimlari[oyuncakData[playerid][x][ptBone]], durum);
				}

				format(baslik, sizeof(baslik), "{9CBBC5}Aksesuar:{FFFFFF} Kontrol");
				DialogGoster(playerid, AKSESUARKONTROL, DIALOG_STYLE_TABLIST_HEADERS, baslik, stringg, "Deðiþtir", "Geri");
			}
			case 1:
			{
				new stringg[856],baslik[256], durum[128];
				strcat(stringg, "Eþya\tBölge\tDurum\n");
				for(new x;x<MAX_AKSESUAR;x++)
				{
					new name[64];
					format(name, sizeof(name), "-");

					for(new i;i<sizeof(HoldingObjectsAll);i++)
					{
						if(HoldingObjectsAll[i][holdingmodelid] == oyuncakData[playerid][x][ptModelID])
						{
							format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
						}
					}
					if(oyuncakData[playerid][x][ptRealID] != 0)
					{
						if(oyuncakData[playerid][x][ptKullanim] == 1) format(durum, sizeof(durum), "Kullanýmda");
						if(oyuncakData[playerid][x][ptKullanim] == 0) format(durum, sizeof(durum), "Takýlý Deðil");
					}
					else format(durum, sizeof(durum), "Boþ");
					format(stringg, sizeof(stringg), "%s%s\t%s\t%s\n", stringg, name, KemikKisimlari[oyuncakData[playerid][x][ptBone]], durum);
				}
				format(baslik, sizeof(baslik), "{9CBBC5}Aksesuar:{FFFFFF} Düzenle");
				DialogGoster(playerid, AKSESUARDUZENLE, DIALOG_STYLE_TABLIST_HEADERS, baslik, stringg, "Düzenle", "Geri");
			}
			case 2:
			{
				new stringg[856],baslik[256], durum[128];
				strcat(stringg, "Eþya\tBölge\tDurum\n");
				for(new x;x<MAX_AKSESUAR;x++)
				{
					new name[64];
					format(name, sizeof(name), "-");

					for(new i;i<sizeof(HoldingObjectsAll);i++)
					{
						if(HoldingObjectsAll[i][holdingmodelid] == oyuncakData[playerid][x][ptModelID])
						{
							format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
						}
					}
					if(oyuncakData[playerid][x][ptRealID] != 0)
					{
						if(oyuncakData[playerid][x][ptKullanim] == 1) format(durum, sizeof(durum), "Kullanýmda");
						if(oyuncakData[playerid][x][ptKullanim] == 0) format(durum, sizeof(durum), "Takýlý Deðil");
					}
					else format(durum, sizeof(durum), "Boþ");
					format(stringg, sizeof(stringg), "%s%s\t%s\t%s\n", stringg, name, KemikKisimlari[oyuncakData[playerid][x][ptBone]], durum);
				}
				format(baslik, sizeof(baslik), "{9CBBC5}Aksesuar:{FFFFFF} Renk");
				DialogGoster(playerid, AKSESUAR_RENK, DIALOG_STYLE_TABLIST_HEADERS, baslik, stringg, "Ayarla", "Geri");

			}
			case 4:
			{
				new stringg[856],baslik[256], durum[128];
				strcat(stringg, "Eþya\tBölge\tDurum\n");
				for(new x;x<MAX_AKSESUAR;x++)
				{
					new name[64];
					format(name, sizeof(name), "-");

					for(new i;i<sizeof(HoldingObjectsAll);i++)
					{
						if(HoldingObjectsAll[i][holdingmodelid] == oyuncakData[playerid][x][ptModelID])
						{
							format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
						}
					}
					if(oyuncakData[playerid][x][ptRealID] != 0)
					{
						if(oyuncakData[playerid][x][ptKullanim] == 1) format(durum, sizeof(durum), "Kullanýmda");
						if(oyuncakData[playerid][x][ptKullanim] == 0) format(durum, sizeof(durum), "Takýlý Deðil");
					}
					else format(durum, sizeof(durum), "Boþ");
					format(stringg, sizeof(stringg), "%s%s\t%s\t%s\n", stringg, name, KemikKisimlari[oyuncakData[playerid][x][ptBone]], durum);
				}
				format(baslik, sizeof(baslik), "{9CBBC5}Aksesuar:{FFFFFF} Yok Et");
				DialogGoster(playerid, AKSESUARSIL, DIALOG_STYLE_TABLIST_HEADERS, baslik, stringg, "Sil", "Geri");

			}
			default:cmd(playerid, 0, "aks");
		}
		return 1;
	}

	stock ShowEditMenu(playerid)
	{
		if(IsPlayerAttachedObjectSlotUsed(playerid, secilenslot[playerid]))
		{
			RemovePlayerAttachedObject(playerid, secilenslot[playerid]);
		}
		if(oyuncakData[playerid][secilenslot[playerid]][ptScaleX] == 0) {
			oyuncakData[playerid][secilenslot[playerid]][ptScaleX] = 1.0;
			oyuncakData[playerid][secilenslot[playerid]][ptScaleY] = 1.0;
			oyuncakData[playerid][secilenslot[playerid]][ptScaleZ] = 1.0;
		}

		SetPlayerAttachedObject(playerid, secilenslot[playerid], oyuncakData[playerid][secilenslot[playerid]][ptModelID],
			oyuncakData[playerid][secilenslot[playerid]][ptBone], oyuncakData[playerid][secilenslot[playerid]][ptPosX],
			oyuncakData[playerid][secilenslot[playerid]][ptPosY], oyuncakData[playerid][secilenslot[playerid]][ptPosZ],
			oyuncakData[playerid][secilenslot[playerid]][ptRotX], oyuncakData[playerid][secilenslot[playerid]][ptRotY],
			oyuncakData[playerid][secilenslot[playerid]][ptRotZ], oyuncakData[playerid][secilenslot[playerid]][ptScaleX],
			oyuncakData[playerid][secilenslot[playerid]][ptScaleY], oyuncakData[playerid][secilenslot[playerid]][ptScaleZ],
			oyuncakData[playerid][secilenslot[playerid]][ptRenk]);

		new stringg[856];
		strcat(stringg, "Seçenek\t#\n");
		format(stringg, sizeof(stringg), "%sMevcut Kemik\t%s\nPozisyon Ayarý", stringg, KemikKisimlari[oyuncakData[playerid][secilenslot[playerid]][ptBone]]);
		DialogGoster(playerid, AKSESUARDUZENLE2, DIALOG_STYLE_TABLIST_HEADERS, "{9CBBC5}Aksesuar:{FFFFFF} Ayarla", stringg, "Seç", "Kapat");
	}

	function AksesuarYukle(playerid)
	{
		new rows, slot = 0;
		cache_get_row_count(rows);
		if(rows)
		{
			for(new i = 0; i < rows; i++)
			{
				cache_get_value_int(i, "ID", oyuncakData[playerid][slot][ptRealID]);
				cache_get_value_int(i, "ModelID", oyuncakData[playerid][slot][ptModelID]);
				cache_get_value_int(i, "Bone", oyuncakData[playerid][slot][ptBone]);
				if(oyuncakData[playerid][slot][ptBone] > 18 || oyuncakData[playerid][slot][ptBone] < 1) oyuncakData[playerid][slot][ptBone] = 1;
				cache_get_value_float(i, "PosX", oyuncakData[playerid][slot][ptPosX]);
				cache_get_value_float(i, "PosY", oyuncakData[playerid][slot][ptPosY]);
				cache_get_value_float(i, "PosZ", oyuncakData[playerid][slot][ptPosZ]);
				cache_get_value_float(i, "RotX", oyuncakData[playerid][slot][ptRotX]);
				cache_get_value_float(i, "RotY", oyuncakData[playerid][slot][ptRotY]);
				cache_get_value_float(i, "RotZ", oyuncakData[playerid][slot][ptRotZ]);
				cache_get_value_float(i, "ScaX", oyuncakData[playerid][slot][ptScaleX]);
				cache_get_value_float(i, "ScaY", oyuncakData[playerid][slot][ptScaleY]);
				cache_get_value_float(i, "ScaZ", oyuncakData[playerid][slot][ptScaleZ]);
				cache_get_value_name_int(i, "Renk", oyuncakData[playerid][slot][ptRenk]);
				cache_get_value_name_int(i, "Kullanim", oyuncakData[playerid][slot][ptKullanim]);
				if(oyuncakData[playerid][slot][ptKullanim] == 1)
				{
					SetPlayerAttachedObject(playerid, slot, oyuncakData[playerid][slot][ptModelID],
						oyuncakData[playerid][slot][ptBone], oyuncakData[playerid][slot][ptPosX],
						oyuncakData[playerid][slot][ptPosY], oyuncakData[playerid][slot][ptPosZ],
						oyuncakData[playerid][slot][ptRotX], oyuncakData[playerid][slot][ptRotY],
						oyuncakData[playerid][slot][ptRotZ], oyuncakData[playerid][slot][ptScaleX],
						oyuncakData[playerid][slot][ptScaleY], oyuncakData[playerid][slot][ptScaleZ],
						oyuncakData[playerid][slot][ptRenk]);
				}
				slot++;
			}
		}
		return 1;
	}

	function AksesuarKaydet(playerid)
	{
		new szQuery[128 * 4];
		for(new v = 0; v < MAX_AKSESUAR; v++) {
//printf("Numara: %d SQL: %d SLOT: %d", v, oyuncakData[playerid][v][ptRealID], secilenslot[playerid]);
			if(oyuncakData[playerid][v][ptRealID] >= 1) {
				format(szQuery, sizeof(szQuery), "UPDATE `aksesuarlar` SET ModelID = '%d', Bone = '%d', PosX = '%f', PosY = '%f', PosZ = '%f', RotX = '%f', RotY = '%f', RotZ = '%f', ScaX = '%f', ScaY = '%f', ScaZ = '%f', Renk = '%d', Kullanim = '%d' WHERE Sahip = '%d' AND ID = '%d'",
					oyuncakData[playerid][v][ptModelID], oyuncakData[playerid][v][ptBone], oyuncakData[playerid][v][ptPosX], oyuncakData[playerid][v][ptPosY], oyuncakData[playerid][v][ptPosZ], oyuncakData[playerid][v][ptRotX], oyuncakData[playerid][v][ptRotY], oyuncakData[playerid][v][ptRotZ],
					oyuncakData[playerid][v][ptScaleX], oyuncakData[playerid][v][ptScaleY], oyuncakData[playerid][v][ptScaleZ], oyuncakData[playerid][v][ptRenk], oyuncakData[playerid][v][ptKullanim], oyuncuData[playerid][oID], oyuncakData[playerid][v][ptRealID]);
				mysql_tquery(g_SQL, szQuery);
			}
		}

		return 1;
	}

	public OnPlayerModelSelection(playerid, response, listid, modelid)
	{
		static mesaj[256];
		if(listid == Aksesuarlar)
		{
			if(response)
			{
				if(oyuncuData[playerid][oPara] < 50) return hataMesaji(playerid, "Aksesuar satýn almak için paranýz yetersiz.");
				SetPVarInt(playerid, "secilenaksesuar", modelid);
				Dialog_Show(playerid, aksesuarsatinalonay, DIALOG_STYLE_MSGBOX, "Aksesuar Al", "$100 karþýlýðýnda aksesuarý satýn almak istediðinize emin misiniz?", "Onayla", "Ýptal");
			}
		}
		if(listid == ozelaksesuarlar)
		{
			if(response)
			{	
				if(oyuncuData[playerid][oPara] < 50) return hataMesaji(playerid, "Aksesuar satýn almak için paranýz yetersiz.($50)");
				oyuncakData[playerid][secilenslot[playerid]][ptModelID] = modelid;
				oyuncakData[playerid][secilenslot[playerid]][ptBone] = 2;
				oyuncakData[playerid][secilenslot[playerid]][ptPosX] = 0.0;
				oyuncakData[playerid][secilenslot[playerid]][ptPosY] = 0.0;
				oyuncakData[playerid][secilenslot[playerid]][ptPosZ] = 0.0;
				oyuncakData[playerid][secilenslot[playerid]][ptRotX] = 0.0;
				oyuncakData[playerid][secilenslot[playerid]][ptRotY] = 0.0;
				oyuncakData[playerid][secilenslot[playerid]][ptRotZ] = 0.0;
				oyuncakData[playerid][secilenslot[playerid]][ptScaleX] = 1.0;
				oyuncakData[playerid][secilenslot[playerid]][ptScaleY] = 1.0;
				oyuncakData[playerid][secilenslot[playerid]][ptScaleZ] = 1.0;
				new szQuery[512];
				format(szQuery, sizeof(szQuery),"INSERT INTO `aksesuarlar` (Sahip) VALUES (%d)", oyuncuData[playerid][oID]);
				mysql_tquery(g_SQL, szQuery, "OyuncakIDCek", "d", playerid);
				BilgiText(playerid, "~b~~h~~h~~h~Aksesuar alindi", 2500);
				ParaEkle(playerid, -50);
				AksesuarTimer[playerid] = SetTimerEx("AksesuarKaydet", 2000, false, "d", playerid);
			}
		}
		if(listid == pdaksesuarlar)
		{
			if(response)
			{
			oyuncakData[playerid][secilenslot[playerid]][ptModelID] = modelid;
			oyuncakData[playerid][secilenslot[playerid]][ptBone] = 2;
			oyuncakData[playerid][secilenslot[playerid]][ptPosX] = 0.0;
			oyuncakData[playerid][secilenslot[playerid]][ptPosY] = 0.0;
			oyuncakData[playerid][secilenslot[playerid]][ptPosZ] = 0.0;
			oyuncakData[playerid][secilenslot[playerid]][ptRotX] = 0.0;
			oyuncakData[playerid][secilenslot[playerid]][ptRotY] = 0.0;
			oyuncakData[playerid][secilenslot[playerid]][ptRotZ] = 0.0;
			oyuncakData[playerid][secilenslot[playerid]][ptScaleX] = 1.0;
			oyuncakData[playerid][secilenslot[playerid]][ptScaleY] = 1.0;
			oyuncakData[playerid][secilenslot[playerid]][ptScaleZ] = 1.0;
			new szQuery[512];
			format(szQuery, sizeof(szQuery),"INSERT INTO `aksesuarlar` (Sahip) VALUES (%d)", oyuncuData[playerid][oID]);
			mysql_tquery(g_SQL, szQuery, "OyuncakIDCek", "d", playerid);
			BilgiText(playerid, "~b~~h~~h~~h~Aksesuar alindi", 2500);
			AksesuarTimer[playerid] = SetTimerEx("AksesuarKaydet", 2000, false, "d", playerid);
			}
		}
		if(listid == fdaksesuarlar)
		{
			oyuncakData[playerid][secilenslot[playerid]][ptModelID] = modelid;
			oyuncakData[playerid][secilenslot[playerid]][ptBone] = 2;
			oyuncakData[playerid][secilenslot[playerid]][ptPosX] = 0.0;
			oyuncakData[playerid][secilenslot[playerid]][ptPosY] = 0.0;
			oyuncakData[playerid][secilenslot[playerid]][ptPosZ] = 0.0;
			oyuncakData[playerid][secilenslot[playerid]][ptRotX] = 0.0;
			oyuncakData[playerid][secilenslot[playerid]][ptRotY] = 0.0;
			oyuncakData[playerid][secilenslot[playerid]][ptRotZ] = 0.0;
			oyuncakData[playerid][secilenslot[playerid]][ptScaleX] = 1.0;
			oyuncakData[playerid][secilenslot[playerid]][ptScaleY] = 1.0;
			oyuncakData[playerid][secilenslot[playerid]][ptScaleZ] = 1.0;
			new szQuery[512];
			format(szQuery, sizeof(szQuery),"INSERT INTO `aksesuarlar` (Sahip) VALUES (%d)", oyuncuData[playerid][oID]);
			mysql_tquery(g_SQL, szQuery, "OyuncakIDCek", "d", playerid);
			BilgiText(playerid, "~b~~h~~h~~h~Aksesuar alindi", 2500);
			AksesuarTimer[playerid] = SetTimerEx("AksesuarKaydet", 2000, false, "d", playerid);
		}
		if(listid == araclarliste)
		{
			if(response)
			{
				static ucret;
				for(new i = 0; i < sizeof(SatilikAraclar) ; i++)
				{
					if(modelid == SatilikAraclar[i][0]) ucret = SatilikAraclar[i][1];
				}

				new aracsiniri, Cache:GetCache, rows, vquery[124];
				switch(oyuncuData[playerid][oVIP])
				{
				case 0: {
					if(modelid == 531 || modelid == 532 || modelid == 610) {aracsiniri = 8;}
					else {aracsiniri = 3;}
				}
				case 1: {
					if(modelid == 531 || modelid == 532 || modelid == 610) {aracsiniri = 13;}
					else {aracsiniri = 10;}
				}
				}
				mysql_format(g_SQL, vquery, sizeof(vquery), "SELECT * FROM araclar WHERE aracSahip = '%d' AND aracModel != '531' AND aracModel != '532' AND aracModel != '610'", oyuncuData[playerid][oID]);
				GetCache = mysql_query(g_SQL, vquery);
				cache_get_row_count(rows);
				if(rows >= aracsiniri) return hataMesaji(playerid, "Alabileceðiniz maksimum araç sýnýrýna ulaþtýnýz."), cache_delete(GetCache),TogglePlayerControllable(playerid, true);
				cache_delete(GetCache);

				format(mesaj, sizeof(mesaj), "Model: %s | Fiyat: %s\nAracý satýn almak ister misin?", AracModel(modelid), NumaraFormati(ucret));
				DialogGoster(playerid, DIALOG_ARAC_ONAY, DIALOG_STYLE_MSGBOX, "> Araç Onay", mesaj, "Satýn Al", "Vazgeç");
				SetPVarInt(playerid, "SectigiArac", modelid);
				SetPVarInt(playerid, "AracinUcret", ucret);
			}
			else
			{
				TogglePlayerControllable(playerid, true);
				SetPlayerVirtualWorld(playerid, 0);
			}
		}
		if(listid == coolaraclarliste)
		{
			if(response)
			{
				static ucret;
				for(new i = 0; i < sizeof(SatilikAraclar) ; i++)
				{
					if(modelid == SatilikAraclar[i][0]) ucret = SatilikAraclar[i][1];
				}

				format(mesaj, sizeof(mesaj), "Model: %s | Fiyat: %s\nAracý satýn almak ister misin?", AracModel(modelid), NumaraFormati(ucret));
				DialogGoster(playerid, DIALOG_ARAC_ONAY, DIALOG_STYLE_MSGBOX, "> Araç Onay", mesaj, "Satýn Al", "Vazgeç");
				SetPVarInt(playerid, "SectigiArac", modelid);
				SetPVarInt(playerid, "AracinUcret", ucret);
			}
			else
			{
				TogglePlayerControllable(playerid, true);
				SetPlayerVirtualWorld(playerid, 0);
			}
		}
		if(listid == erkekbeyazzengin || listid == erkekbeyazfakir || listid == erkekbeyazorta || listid == erkekvip)
		{
			if(response)
			{
				static ucret = 300;
				/*for(new i = 0; i < sizeof(ErkekKiyafetVerileri) ; i++)
				{
					if(modelid == ErkekKiyafetVerileri[i][0]) ucret = ErkekKiyafetVerileri[i][1];
				}*/

				format(mesaj, sizeof(mesaj), "Kýyafet: %d | Fiyat: %s\nKýyafeti satýn almak ister misin?", modelid, NumaraFormati(ucret));
				DialogGoster(playerid, DIALOG_GIYIM_ONAY, DIALOG_STYLE_MSGBOX, "> Kýyafet Onay", mesaj, "Satýn Al", "Vazgeç");
				SetPVarInt(playerid, "SectigiKiyafet", modelid);
				SetPVarInt(playerid, "KiyafetUcret", ucret);
			}
		}
		else if(listid == erkeksiyahfakir || listid == erkeksiyahorta || listid == erkeksiyahzengin)
		{
			if(response)
			{
				static ucret = 300;
				/*for(new i = 0; i < sizeof(ErkekKiyafetVerileri) ; i++)
				{
					if(modelid == ErkekKiyafetVerileri[i][0]) ucret = ErkekKiyafetVerileri[i][1];
				}*/

				format(mesaj, sizeof(mesaj), "Kýyafet: %d | Fiyat: %s\nKýyafeti satýn almak ister misin?", modelid, NumaraFormati(ucret));
				DialogGoster(playerid, DIALOG_GIYIM_ONAY, DIALOG_STYLE_MSGBOX, "> Kýyafet Onay", mesaj, "Satýn Al", "Vazgeç");
				SetPVarInt(playerid, "SectigiKiyafet", modelid);
				SetPVarInt(playerid, "KiyafetUcret", ucret);
			}
		}
		else if(listid == kadinbeyazfakir || listid == kadinbeyazorta || listid == kadinbeyazzengin || listid == kadinvip)
		{
			if(response)
			{
				static ucret = 300;
				/*for(new i = 0; i < sizeof(KadinKiyafetVerileri) ; i++)
				{
					if(modelid == KadinKiyafetVerileri[i][0]) ucret = KadinKiyafetVerileri[i][1];
				}*/

				format(mesaj, sizeof(mesaj), "Kýyafet: %d | Fiyat: %s\nKýyafeti satýn almak ister misin?", modelid, NumaraFormati(ucret));
				DialogGoster(playerid, DIALOG_GIYIM_ONAY, DIALOG_STYLE_MSGBOX, "> Kýyafet Onay", mesaj, "Satýn Al", "Vazgeç");
				SetPVarInt(playerid, "SectigiKiyafet", modelid);
				SetPVarInt(playerid, "KiyafetUcret", ucret);
			}
		}
		else if(listid == kadinsiyahfakir || listid == kadinsiyahorta || listid == kadinsiyahzengin)
		{
			if(response)
			{
				static ucret = 300;
				/*for(new i = 0; i != sizeof(KadinKiyafetVerileri) ; i++)
				{
					if(modelid == KadinKiyafetVerileri[i][0]) ucret = KadinKiyafetVerileri[i][1];
				}*/

				format(mesaj, sizeof(mesaj), "Kýyafet: %d | Fiyat: %s\nKýyafeti satýn almak ister misin?", modelid, NumaraFormati(ucret));
				DialogGoster(playerid, DIALOG_GIYIM_ONAY, DIALOG_STYLE_MSGBOX, "> Kýyafet Onay", mesaj, "Satýn Al", "Vazgeç");
				SetPVarInt(playerid, "SectigiKiyafet", modelid);
				SetPVarInt(playerid, "KiyafetUcret", ucret);
			}
		}
		else if(listid == erkekdolapbeyaz)
		{
			if(response)
			{
				static ucret = 300;
				/*for(new i = 0; i < sizeof(ErkekKiyafetVerileri) ; i++)
				{
					if(modelid == ErkekKiyafetVerileri[i][0]) ucret = ErkekKiyafetVerileri[i][1];
				}*/
				if(ucret > oyuncuData[playerid][oPara]) return hataMesaji(playerid, "Bu kýyafetin ücretini karþýlayamýyorsun.");
				if(oyuncuData[playerid][oKiyafetDolabi][0] == 0)
				{
					oyuncuData[playerid][oKiyafetDolabi][0] = modelid;
					OyuncuKaydet(playerid);
				}
				else if(oyuncuData[playerid][oKiyafetDolabi][1] == 0)
				{
					oyuncuData[playerid][oKiyafetDolabi][1] = modelid;
					OyuncuKaydet(playerid);
				}
				else if(oyuncuData[playerid][oKiyafetDolabi][2] == 0)
				{
					oyuncuData[playerid][oKiyafetDolabi][2] = modelid;
					OyuncuKaydet(playerid);
				}
				else return hataMesaji(playerid, "Dolabýnda kýyafet alacak yer kalmamýþ gibi görünüyor.");
				new id = Oyuncu_Isyerinde(playerid);
				ParaEkle(playerid, -ucret);
				IsyeriBilgi[id][isyeriKasa] += ucret;
				IsyeriBilgi[id][isyeriUrun]--;
				Isyeri_Kaydet(id);
			}
		}
		else if(listid == erkekdolapsiyah)
		{
			if(response)
			{
				static ucret = 300;
				/*for(new i = 0; i < sizeof(ErkekKiyafetVerileri) ; i++)
				{
					if(modelid == ErkekKiyafetVerileri[i][0]) ucret = ErkekKiyafetVerileri[i][1];
				}*/
				if(ucret > oyuncuData[playerid][oPara]) return hataMesaji(playerid, "Bu kýyafetin ücretini karþýlayamýyorsun.");
				if(oyuncuData[playerid][oKiyafetDolabi][0] == 0)
				{
					oyuncuData[playerid][oKiyafetDolabi][0] = modelid;
					OyuncuKaydet(playerid);
				}
				else if(oyuncuData[playerid][oKiyafetDolabi][1] == 0)
				{
					oyuncuData[playerid][oKiyafetDolabi][1] = modelid;
					OyuncuKaydet(playerid);
				}
				else if(oyuncuData[playerid][oKiyafetDolabi][2] == 0)
				{
					oyuncuData[playerid][oKiyafetDolabi][2] = modelid;
					OyuncuKaydet(playerid);
				}
				else return hataMesaji(playerid, "Dolabýnda kýyafet alacak yer kalmamýþ gibi görünüyor.");
				new id = Oyuncu_Isyerinde(playerid);
				ParaEkle(playerid, -ucret);
				IsyeriBilgi[id][isyeriKasa] += ucret;
				IsyeriBilgi[id][isyeriUrun]--;
				Isyeri_Kaydet(id);
			}
		}
		else if(listid == kadindolapbeyaz)
		{
			if(response)
			{
				static ucret = 300;
				/*for(new i = 0; i < sizeof(KadinKiyafetVerileri) ; i++)
				{
					if(modelid == KadinKiyafetVerileri[i][0]) ucret = KadinKiyafetVerileri[i][1];
				}*/
				if(ucret > oyuncuData[playerid][oPara]) return hataMesaji(playerid, "Bu kýyafetin ücretini karþýlayamýyorsun.");
				if(oyuncuData[playerid][oKiyafetDolabi][0] == 0)
				{
					oyuncuData[playerid][oKiyafetDolabi][0] = modelid;
					OyuncuKaydet(playerid);
				}
				else if(oyuncuData[playerid][oKiyafetDolabi][1] == 0)
				{
					oyuncuData[playerid][oKiyafetDolabi][1] = modelid;
					OyuncuKaydet(playerid);
				}
				else if(oyuncuData[playerid][oKiyafetDolabi][2] == 0)
				{
					oyuncuData[playerid][oKiyafetDolabi][2] = modelid;
					OyuncuKaydet(playerid);
				}
				else return hataMesaji(playerid, "Dolabýnda kýyafet alacak yer kalmamýþ gibi görünüyor.");
				new id = Oyuncu_Isyerinde(playerid);
				ParaEkle(playerid, -ucret);
				IsyeriBilgi[id][isyeriKasa] += ucret;
				IsyeriBilgi[id][isyeriUrun]--;
				Isyeri_Kaydet(id);
			}
		}
		else if(listid == kadindolapsiyah)
		{
			if(response)
			{
				static ucret = 300;
				/*for(new i = 0; i != sizeof(KadinKiyafetVerileri) ; i++)
				{
					if(modelid == KadinKiyafetVerileri[i][0]) ucret = KadinKiyafetVerileri[i][1];
				}*/
				if(ucret > oyuncuData[playerid][oPara]) return hataMesaji(playerid, "Bu kýyafetin ücretini karþýlayamýyorsun.");
				if(oyuncuData[playerid][oKiyafetDolabi][0] == 0)
				{
					oyuncuData[playerid][oKiyafetDolabi][0] = modelid;
					OyuncuKaydet(playerid);
				}
				else if(oyuncuData[playerid][oKiyafetDolabi][1] == 0)
				{
					oyuncuData[playerid][oKiyafetDolabi][1] = modelid;
					OyuncuKaydet(playerid);
				}
				else if(oyuncuData[playerid][oKiyafetDolabi][2] == 0)
				{
					oyuncuData[playerid][oKiyafetDolabi][2] = modelid;
					OyuncuKaydet(playerid);
				}
				else return hataMesaji(playerid, "Dolabýnda kýyafet alacak yer kalmamýþ gibi görünüyor.");
				new id = Oyuncu_Isyerinde(playerid);
				ParaEkle(playerid, -ucret);
				IsyeriBilgi[id][isyeriKasa] += ucret;
				IsyeriBilgi[id][isyeriUrun]--;
				Isyeri_Kaydet(id);
			}
		}
		else if(listid == kadinkayitbeyaz)
		{
			if(response)
			{
				oyuncuData[playerid][oKarakterYaratildi] = 1;
				oyuncuData[playerid][oKiyafet] = modelid;
				SetPlayerSkin(playerid, oyuncuData[playerid][oKiyafet]);
				CanDuzenle(playerid, 100);
				OyuncuSpawnla(playerid);
				new hesapno = randomEx(100000, 999999), query[256];
				mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM oyuncular WHERE HesapNumarasi = '%d'", hesapno);
				mysql_tquery(g_SQL, query, "hesapnoarat", "dd", playerid, hesapno);
				OyuncuKaydet(playerid);
				mysql_format(g_SQL, query, sizeof(query), "UPDATE `oyuncular` SET `KayitTarih` = '%s' WHERE `isim` = '%e'", convertDate(gettime()), OyuncuIsim(playerid, 1));
				mysql_query(g_SQL, query);
				SunucuMesaji(playerid, "Kayýt baþarýyla tamamlandý, Nitro Roleplay sunucusuna hoþ geldin.");
				new isimstring[64], zamanstring[64], yetenekstring[32], paydaystring[6];
				format(isimstring, sizeof isimstring, "%s", oyuncuData[playerid][oIsim]);
				PlayerTextDrawSetString(playerid, sagaltdraw[playerid][1], isimstring);
				format(zamanstring, sizeof zamanstring, "%s", Tarih());
				PlayerTextDrawSetString(playerid, sagaltdraw[playerid][2], zamanstring);
				format(yetenekstring, sizeof yetenekstring, "%d", oyuncuData[playerid][oYetenekPuani]);
				PlayerTextDrawSetString(playerid, sagaltdraw[playerid][3], yetenekstring);
				format(paydaystring, sizeof paydaystring, "%d", 60 - oyuncuData[playerid][oDakika]);
				PlayerTextDrawSetString(playerid, sagaltdraw[playerid][4], paydaystring);

				PlayerTextDrawShow(playerid, sagaltdraw[playerid][0]);
				PlayerTextDrawShow(playerid, sagaltdraw[playerid][1]);
				PlayerTextDrawShow(playerid, sagaltdraw[playerid][2]);
				PlayerTextDrawShow(playerid, sagaltdraw[playerid][3]);
				PlayerTextDrawShow(playerid, sagaltdraw[playerid][4]);
				ParaEkle(playerid, 400);
			}
			else if(!response)
			{
				SunucuMesaji(playerid, "Kayýt iþlemi iptal edildi, sunucudan çýkartýlýyorsunuz.");
				KickEx(playerid);
			}
		}
		else if(listid == erkekkayitbeyaz)
		{
			if(response)
			{
				oyuncuData[playerid][oKarakterYaratildi] = 1;
				oyuncuData[playerid][oKiyafet] = modelid;
				SetPlayerSkin(playerid, oyuncuData[playerid][oKiyafet]);
				CanDuzenle(playerid, 100);
				OyuncuSpawnla(playerid);
				new hesapno = randomEx(100000, 999999), query[256];
				mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM oyuncular WHERE HesapNumarasi = '%d'", hesapno);
				mysql_tquery(g_SQL, query, "hesapnoarat", "dd", playerid, hesapno);
				OyuncuKaydet(playerid);
				mysql_format(g_SQL, query, sizeof(query), "UPDATE `oyuncular` SET `KayitTarih` = '%s' WHERE `isim` = '%e'", convertDate(gettime()), OyuncuIsim(playerid, 1));
				mysql_query(g_SQL, query);
				SunucuMesaji(playerid, "Kayýt baþarýyla tamamlandý, Nitro Roleplay sunucusuna hoþ geldin.");
				new isimstring[64], zamanstring[64], yetenekstring[32], paydaystring[6];
				format(isimstring, sizeof isimstring, "%s", oyuncuData[playerid][oIsim]);
				PlayerTextDrawSetString(playerid, sagaltdraw[playerid][1], isimstring);
				format(zamanstring, sizeof zamanstring, "%s", Tarih());
				PlayerTextDrawSetString(playerid, sagaltdraw[playerid][2], zamanstring);
				format(yetenekstring, sizeof yetenekstring, "%d", oyuncuData[playerid][oYetenekPuani]);
				PlayerTextDrawSetString(playerid, sagaltdraw[playerid][3], yetenekstring);
				format(paydaystring, sizeof paydaystring, "%d", 60 - oyuncuData[playerid][oDakika]);
				PlayerTextDrawSetString(playerid, sagaltdraw[playerid][4], paydaystring);

				PlayerTextDrawShow(playerid, sagaltdraw[playerid][0]);
				PlayerTextDrawShow(playerid, sagaltdraw[playerid][1]);
				PlayerTextDrawShow(playerid, sagaltdraw[playerid][2]);
				PlayerTextDrawShow(playerid, sagaltdraw[playerid][3]);
				PlayerTextDrawShow(playerid, sagaltdraw[playerid][4]);
				ParaEkle(playerid, 400);
			}
			else if(!response)
			{
				SunucuMesaji(playerid, "Kayýt iþlemi iptal edildi, sunucudan çýkartýlýyorsunuz.");
				KickEx(playerid);
			}
		}
		else if(listid == kadinkayitsiyah)
		{
			if(response)
			{
				oyuncuData[playerid][oKarakterYaratildi] = 1;
				oyuncuData[playerid][oKiyafet] = modelid;
				SetPlayerSkin(playerid, oyuncuData[playerid][oKiyafet]);
				CanDuzenle(playerid, 100);
				OyuncuSpawnla(playerid);
				new hesapno = randomEx(100000, 999999), query[256];
				mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM oyuncular WHERE HesapNumarasi = '%d'", hesapno);
				mysql_tquery(g_SQL, query, "hesapnoarat", "dd", playerid, hesapno);
				OyuncuKaydet(playerid);
				mysql_format(g_SQL, query, sizeof(query), "UPDATE `oyuncular` SET `KayitTarih` = '%s' WHERE `isim` = '%e'", convertDate(gettime()), OyuncuIsim(playerid, 1));
				mysql_query(g_SQL, query);
				SunucuMesaji(playerid, "Kayýt baþarýyla tamamlandý, Nitro Roleplay sunucusuna hoþ geldin.");
				new isimstring[64], zamanstring[64], yetenekstring[32], paydaystring[6];
				format(isimstring, sizeof isimstring, "%s", oyuncuData[playerid][oIsim]);
				PlayerTextDrawSetString(playerid, sagaltdraw[playerid][1], isimstring);
				format(zamanstring, sizeof zamanstring, "%s", Tarih());
				PlayerTextDrawSetString(playerid, sagaltdraw[playerid][2], zamanstring);
				format(yetenekstring, sizeof yetenekstring, "%d", oyuncuData[playerid][oYetenekPuani]);
				PlayerTextDrawSetString(playerid, sagaltdraw[playerid][3], yetenekstring);
				format(paydaystring, sizeof paydaystring, "%d", 60 - oyuncuData[playerid][oDakika]);
				PlayerTextDrawSetString(playerid, sagaltdraw[playerid][4], paydaystring);

				PlayerTextDrawShow(playerid, sagaltdraw[playerid][0]);
				PlayerTextDrawShow(playerid, sagaltdraw[playerid][1]);
				PlayerTextDrawShow(playerid, sagaltdraw[playerid][2]);
				PlayerTextDrawShow(playerid, sagaltdraw[playerid][3]);
				PlayerTextDrawShow(playerid, sagaltdraw[playerid][4]);
				ParaEkle(playerid, 400);
			}
			else if(!response)
			{
				SunucuMesaji(playerid, "Kayýt iþlemi iptal edildi, sunucudan çýkartýlýyorsunuz.");
				KickEx(playerid);
			}
		}
		else if(listid == erkekkayitsiyah)
		{
			if(response)
			{
				oyuncuData[playerid][oKarakterYaratildi] = 1;
				oyuncuData[playerid][oKiyafet] = modelid;
				SetPlayerSkin(playerid, oyuncuData[playerid][oKiyafet]);
				CanDuzenle(playerid, 100);
				OyuncuSpawnla(playerid);
				new hesapno = randomEx(100000, 999999), query[256];
				mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM oyuncular WHERE HesapNumarasi = '%d'", hesapno);
				mysql_tquery(g_SQL, query, "hesapnoarat", "dd", playerid, hesapno);
				OyuncuKaydet(playerid);
				mysql_format(g_SQL, query, sizeof(query), "UPDATE `oyuncular` SET `KayitTarih` = '%s' WHERE `isim` = '%e'", convertDate(gettime()), OyuncuIsim(playerid, 1));
				mysql_query(g_SQL, query);
				SunucuMesaji(playerid, "Kayýt baþarýyla tamamlandý, Nitro Roleplay sunucusuna hoþ geldin.");
				new isimstring[64], zamanstring[64], yetenekstring[32], paydaystring[6];
				format(isimstring, sizeof isimstring, "%s", oyuncuData[playerid][oIsim]);
				PlayerTextDrawSetString(playerid, sagaltdraw[playerid][1], isimstring);
				format(zamanstring, sizeof zamanstring, "%s", Tarih());
				PlayerTextDrawSetString(playerid, sagaltdraw[playerid][2], zamanstring);
				format(yetenekstring, sizeof yetenekstring, "%d", oyuncuData[playerid][oYetenekPuani]);
				PlayerTextDrawSetString(playerid, sagaltdraw[playerid][3], yetenekstring);
				format(paydaystring, sizeof paydaystring, "%d", 60 - oyuncuData[playerid][oDakika]);
				PlayerTextDrawSetString(playerid, sagaltdraw[playerid][4], paydaystring);

				PlayerTextDrawShow(playerid, sagaltdraw[playerid][0]);
				PlayerTextDrawShow(playerid, sagaltdraw[playerid][1]);
				PlayerTextDrawShow(playerid, sagaltdraw[playerid][2]);
				PlayerTextDrawShow(playerid, sagaltdraw[playerid][3]);
				PlayerTextDrawShow(playerid, sagaltdraw[playerid][4]);
				ParaEkle(playerid, 400);
			}
			else if(!response)
			{
				SunucuMesaji(playerid, "Kayýt iþlemi iptal edildi, sunucudan çýkartýlýyorsunuz.");
				KickEx(playerid);
			}
		}
		else if(listid == fderkekbeyaz || listid == fderkeksiyah || listid == fdkadinbeyaz || listid == fdkadinsiyah)
		{
			if(response)
			{
				oyuncuData[playerid][oGeciciKiyafet] = modelid;
				SetPlayerSkin(playerid, modelid);
				cmd(playerid, 1, "üniformasýný deðiþtirerek iþbaþýna hazýr hale gelir.");
			}
		}
		else if(listid == uniformakadinsiyah || listid == uniformaerkeksiyah || listid == uniformaerkekbeyaz || listid == uniformakadinbeyaz)
		{
			if(response)
			{
				oyuncuData[playerid][oGeciciKiyafet] = modelid;
				OyuncuKaydet(playerid);
				SetPlayerSkin(playerid, modelid);
				SunucuMesaji(playerid, "Üniformaný deðiþtirdin.");
			}
		}
		else  if(listid == firmalojistik || listid == firmatamir || listid == firmamedya || listid == firmasilah || listid == firmataksi || listid == firmatamir)
		{
			if(response)
			{
				new icerik[250], fiyat;
				for(new i = 0; i < sizeof(faracveri) ; i++)
				{
					if(modelid == faracveri[i][0]) fiyat = faracveri[i][1];
				}
				format(icerik, sizeof(icerik), "{FFFFFF}Araç Modeli: {F5E600}%s{FFFFFF}\nFiyat: {23BD00}%s{FFFFFF}\nFirmanýz için bu aracý satýn almak istiyor musunuz?{FFFFFF}", AracModel(modelid), NumaraFormati(fiyat));
				ShowPlayerDialog(playerid, DIALOG_FIRMA_ARAC_SATINAL, DIALOG_STYLE_MSGBOX, "{F5E600}Firma Araç Satýn Alma", icerik, "Evet","Hayýr");
				SetPVarInt(playerid, "farac", modelid);
			}
		}
		else if(listid == firmarent)
		{
			if(response)
			{
				new icerik[250], fiyat;
				if(modelid == 476 || modelid == 469 || modelid == 487 || modelid == 511 || modelid == 512 || modelid == 513 || modelid == 519 || modelid == 593)
				{
					for(new i = 0; i < sizeof(ucakveri); i++)
					{
						if(modelid == ucakveri[i][0]) fiyat = ucakveri[i][1];
					}
				}
				else if(modelid == 473 || modelid == 446 || modelid == 452 || modelid == 453 || modelid == 484 || modelid == 493)
				{
					for(new i = 0; i < sizeof(tekneveri); i++)
					{
						if(modelid == tekneveri[i][0]) fiyat = tekneveri[i][1];
					}
				}
				else if(modelid == 531 || modelid == 532)
				{
					for(new i = 0; i < sizeof(tekipmanveri); i++)
					{
						if(modelid == tekipmanveri[i][0]) fiyat = tekipmanveri[i][1];
					}
				}
				else
				{	
					for(new i = 0; i < sizeof(SatilikAraclar); i++)
					{
						if(modelid == SatilikAraclar[i][0]) fiyat = SatilikAraclar[i][1];
					}
				}
				SetPVarInt(playerid, "firmarentaracal", 1);
				format(icerik, sizeof(icerik), "{FFFFFF}Araç Modeli: {F5E600}%s{FFFFFF}\nFiyat: {23BD00}%s{FFFFFF}\nFirmanýz için bu aracý satýn almak istiyor musunuz?{FFFFFF}", AracModel(modelid), NumaraFormati(fiyat));
				ShowPlayerDialog(playerid, DIALOG_FIRMA_ARAC_SATINAL, DIALOG_STYLE_MSGBOX, "{F5E600}Firma Araç Satýn Alma", icerik, "Evet","Hayýr");
				SetPVarInt(playerid, "farac", modelid);
			}
		}
		else if(listid == barikatsec)
		{
			if(response)
			{
				new id = Barikat_Yarat(playerid, modelid);
				if(id < 0) return hataMesaji(playerid, "Barikat slotu kalmadýðý için eklenemedi.");
				SunucuMesaji(playerid, "Barikatý ekledin. (ID: %d)", id);
			}
		}
		else if(listid == bisikletler)
		{
			if(response)
			{
				if(!IsPlayerInRangeOfPoint(playerid, 3.0, 957.7657,-1704.1384,13.6137)) return hataMesaji(playerid, "Bisiklet almak için Sunshine Autos'daki bisiklet alma noktasýnda olmalýsýn.");
				oyuncuData[playerid][oSecilenBisiklet] = modelid;
				ShowPlayerDialog(playerid, DIALOG_BISIKLET_RENK_BIR, DIALOG_STYLE_INPUT, "Bisikletinizin birinci rengini girin", "Bisikletinizin birincil renk kodunu girin.", "Onayla", "Ýptal");
			}
			else if(!response)
			{
				SunucuMesaji(playerid, "Bisiklet almaktan vazgeçtiniz.");
			}
		}
		return 1;
	}

	stock npc_Yarat(playerid, skin, tur = 0)
	{
		static Float:x, Float:y, Float:z, Float:angle;

		if(GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
		{
			for (new i = 0; i < MAX_AKTOR; i ++) if(!npcData[i][npcKullanim])
			{
				npcData[i][npcKullanim] = true;
				npcData[i][npcSkin] = skin;
				npcData[i][npcPos][0] = x + (1.5 * floatsin(-angle, degrees));
				npcData[i][npcPos][1] = y + (1.5 * floatcos(-angle, degrees));
				npcData[i][npcPos][2] = z;
				npcData[i][npcPos][3] = angle + 180;
				npcData[i][npcTur] = tur;
				format(npcData[i][npcAnimlib], 50, "none");
				format(npcData[i][npcAnimname], 50, "none");
				new str[512];
				switch(npcData[i][npcTur])
				{
					case 0:{
						format(str, sizeof(str), "%s",npcData[i][npcYazi]);
					}
					case 1:{
						format(str, sizeof(str), "[CPT. Vice]\n\n{F2F2F2}Dialog kurmak için {F2EE44}Y{F2F2F2} tuþuna basýnýz.");
					}
					case 2:{
						format(str, sizeof(str), "[Mermi Tüccarý]\n\n{F2F2F2}Dialog kurmak için {F2EE44}Y{F2F2F2} tuþuna basýnýz.");
					}
				}
				npcData[i][npcLabel] = CreateDynamic3DTextLabel(str, -1, npcData[i][npcPos][0], npcData[i][npcPos][1], npcData[i][npcPos][2] + 1.1, 6.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);
				npcData[i][npcAktor] = CreateActor(npcData[i][npcSkin], npcData[i][npcPos][0], npcData[i][npcPos][1], npcData[i][npcPos][2], npcData[i][npcPos][3]);
				mysql_tquery(g_SQL, "INSERT INTO `npcler` (`npcSkin`) VALUES (0)", "npcYaratildi", "d", i);
				return i;
			}
		}
		return -1;
	}

	function npcYaratildi(npcid)
	{
		if(npcid == -1 || !npcData[npcid][npcKullanim]) return 0;
		npcData[npcid][npcSQL] = cache_insert_id();
		npc_Kaydet(npcid);
		return 1;
	}

	stock npc_Kaydet(npcid)
	{
		static query[1280];

		mysql_format(g_SQL, query, sizeof(query), "UPDATE `npcler` SET `npcSkin` = '%d', `npcX` = '%f', `npcY` = '%f', `npcZ` = '%f', `npcR` = '%f',  `npcAnimlib` = '%s', `npcAnimname` = '%s', `npcLabel` = '%s', `npcTur` = '%d'",
			npcData[npcid][npcSkin],
			npcData[npcid][npcPos][0],
			npcData[npcid][npcPos][1],
			npcData[npcid][npcPos][2],
			npcData[npcid][npcPos][3],
			npcData[npcid][npcAnimlib],
			npcData[npcid][npcAnimname],
			npcData[npcid][npcYazi],
			npcData[npcid][npcTur]
			);
		mysql_format(g_SQL, query, sizeof(query), "%s WHERE `npcID` = '%d'", query, npcData[npcid][npcSQL]);
		return mysql_tquery(g_SQL, query);
	}


	cmd:cpsifirla(playerid, params[])
	{
		DisablePlayerCheckpoint(playerid);
		DisablePlayerRaceCheckpoint(playerid);
		return 1;
	}

	cmd:piyasa(playerid, params[])
	{
		if(oyuncuData[playerid][oDonduruldu] > 0) return hataMesaji(playerid, "Bu komut þu anda kullanýlamaz.");
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oHapisSure][0] > 0) return hataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
		for(new i = 0; i < 9; i++) {
		TextDrawShowForPlayer(playerid, tarim[i]);
		}
		PlayerTextDrawShow(playerid, tarim9[playerid]); 
		SelectTextDraw(playerid, 0xFF0000FF);
		return 1;
	}

	 CMD:sohbetanim(playerid, params[])
	{
		if(oyuncuData[playerid][oKonusmaAnimasyon] == 1)
		{
			oyuncuData[playerid][oKonusmaAnimasyon] = 0;
			SunucuMesaji(playerid, "Konuþma animasyonunu kapattýn.");
		}
		else
		{
			SunucuMesaji(playerid, "Konuþma animasyonunu açtýn.");
			oyuncuData[playerid][oKonusmaAnimasyon] = 1;
		}
		return 1;
	} 

	CMD:ehliyetuyar(playerid, params[])
	{
		if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return hataMesaji(playerid, "Polis deðilsin.");
		new oyuncuid;
		if(sscanf(params, "u", oyuncuid)) return kullanimMesaji(playerid, "/ehliyetuyar [id/isim]");
		if(!IsPlayerConnected(oyuncuid)) return hataMesaji(playerid, "Belirttiðin kiþi aktif deðil.");
		if(!YakinlikKontrol(playerid, oyuncuid, 6.0)) return hataMesaji(playerid, "Belirttiðin kiþiye yakýn deðilsin.");
		if(oyuncuData[oyuncuid][oEhliyet] != true) return hataMesaji(playerid, "Belirttiðin kiþinin ehliyeti yok. Uyaramazsýn.");
		oyuncuData[oyuncuid][oPDEhliyetUyari]++;
		BirlikMesaji(oyuncuData[playerid][oBirlik], RENK_TELSIZ, "[OPERATOR] %s adlý polis memuru %s'n ehliyetini uyardý. Ehliyet Uyarýsý: %d", OyuncuIsim(playerid), OyuncuIsim(oyuncuid), oyuncuData[oyuncuid][oPDEhliyetUyari]);
		SCM_Ex(oyuncuid, RENK_TELSIZ, "%s adlý polis memuru tarafýndan ehliyetiniz uyarýldý. Ehliyet Uyarýsý: %d", OyuncuIsim(playerid), oyuncuData[oyuncuid][oPDEhliyetUyari]);
		if(oyuncuData[oyuncuid][oPDEhliyetUyari] >= 3)
		{
			oyuncuData[oyuncuid][oPDEhliyetUyari] = 0;
			oyuncuData[oyuncuid][oEhliyet] = false;
			BirlikMesaji(oyuncuData[playerid][oBirlik], RENK_TELSIZ, "[OPERATOR] %s adlý kiþinin ehliyeti 3 uyarýya ulaþtýðý için artýk geçersiz.", OyuncuIsim(oyuncuid));
			SCM_Ex(oyuncuid, RENK_TELSIZ, "Ehliyetiniz 3 uyarýya ulaþtýðý için artýk geçersiz.");
		}
		OyuncuKaydet(oyuncuid);
		return 1;
	}

	CMD:isimlerigizle(playerid)
	{
		if(oyuncuData[playerid][oIsimleriGizle] == false)
		{
			foreach(new i : Player)
			{
				ShowPlayerNameTagForPlayer(playerid, i, 0);
			}
			oyuncuData[playerid][oIsimleriGizle] = true;
			SunucuMesaji(playerid, "Artýk oyuncularýn isimlerini görmeyecekesin.");
		}
		else if(oyuncuData[playerid][oIsimleriGizle] == true)
		{
			foreach(new i : Player)
			{
				ShowPlayerNameTagForPlayer(playerid, i, 1);
			}
			oyuncuData[playerid][oIsimleriGizle] = false;
			SunucuMesaji(playerid, "Artýk oyuncularýn isimlerini görüyorsun.");
		}
		return 1;
	}

	CMD:meslekkasanlar(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 3) return YetkinizYok(playerid);
		new sayi = 0;
		foreach(new i : Player)
		{
			if(truckerseviyebirde[i] > 0 || truckerseviyeikide[i] > 0 || truckerseviyeucte[i] > 0)
			{
				SCM_Ex(playerid, RENK_KLASIK, "%s(ID: %d) adlý kiþi trucker mesleði yapýyor.", OyuncuIsim(i), i);
				sayi++;
			}
		}
		if(sayi == 0) return hataMesaji(playerid, "Meslek kasan oyuncu bulunamadý.");
		return 1;
	}
	
	CMD:notal(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 10) return YetkinizYok(playerid);

		if(isnull(params))
		return kullanimMesaji(playerid, "/notal [yazý]");

		new str[150];
	 	new str2[15000];
		format(str, sizeof(str), "```[%s] (%s)```", Tarih(), OyuncuIsim(playerid), params);
		format(str2, sizeof(str2), "**%s**", params);
		DCC_SendChannelMessage(notlog, str);
		DCC_SendChannelMessage(notlog, str2);
		return 1;
	}

/*CMD:y(playerid, params[])
{
	if(!oyuncuData[playerid][oAdmin])
		return YetkinizYok(playerid);

	if(!akanal)
		return hataMesaji(playerid, "Yönetici sohbet kanalý üst düzey bir yetkili tarafýndan kapatýlmýþ.");

	if(isnull(params))
		return kullanimMesaji(playerid, "/y [yönetici kanalý]");

	YoneticiMesaji(RENK_BEYAZ, "{0DFF00}%s %s: {CDCDCD}%s", adminlevelisim(playerid, oyuncuData[playerid][oAdmin]), OyuncuIsim(playerid), params);
	return 1;
}*/

	CMD:tekneal(playerid, params[])
	{
		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Araçtayken bu komutu kullanamazsýnýz.");
		if(!IsPlayerInRangeOfPoint(playerid, 2.0, 224.2531,-2063.5413,5.0006)) return hataMesaji(playerid, "Tekne galerisinde deðilsiniz.");
		TekneGaleriGoster(playerid);
		return 1;
	}

	CMD:tarimekipman(playerid, params[])
	{
		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Araçtayken bu komutu kullanamazsýnýz.");
		if(!IsPlayerInRangeOfPoint(playerid, 2.0, -382.9766,-1426.3365,26.3190)) return hataMesaji(playerid, "Tarým ekipmanlarý galerisinde deðilsiniz.");
		TarlaEkipmanGaleriGoster(playerid);
		return 1;
	}

	CMD:telsizkodlari(playerid, params[])
	{
		if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return hataMesaji(playerid, "Polis memuru deðilsin.");
		if(oyuncuData[playerid][oDonduruldu] > 0) return hataMesaji(playerid, "Bu komut þu anda kullanýlamaz.");
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oHapisSure][0] > 0) return hataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
		new str[1900];
		format(str, sizeof(str), "%sKod\tAçýklama\n", str);
		strcat(str, "10-1\tTüm birimler için toplanma anonsudur (Lokasyon belirtilir.)\n");
		strcat(str, "10-3\tTelsiz kullanmýyoruz\n");
		strcat(str, "10-4\tAnlaþýldý\n");
		strcat(str, "10-5\tSon anonsu tekrarlayýn\n");
		strcat(str, "10-6\tÖnemsemeyin\n");
		strcat(str, "10-7\tBekleyin & Bir saniye (stand-by)\n");
		strcat(str, "10-8\tMeþgulüm/Aktif deðilim\n");
		strcat(str, "10-9\tMeþgulüm/Aktif deðilim (dedektifler için)\n");
		strcat(str, "10-14\tTransport gerekli (bulunduðun konum ve gideceðin konum bildirilir).\n");
		strcat(str, "10-15\tÞüpheli yakalandý (þüpheliler ve gidilecek yer VCPD-VCCF).\n");
		strcat(str, "10-18\tDestek gerekli mi?\n");
		strcat(str, "10-20\tCoðrafi konum, yer bildirimi.\n");
		strcat(str, "10-21\tMevcut görevinizi ve aktif durumunuzu rapor edin\n");
		strcat(str, "10-22\tKiþi yönlendirmesi\n");
		strcat(str, "10-40\tKalabalýk grup (2 ekip ya da daha fazlasý gerekir)\n");
		strcat(str, "10-41\tÝllegal durum\n");
		strcat(str, "10-46\tÜst aramasý ya da sicil kontrolü\n");
		strcat(str, "10-55\tTrafik Kontrolü (Normal)\n");
		strcat(str, "10-56\tVeritabaný kontrolü\n");
		strcat(str, "10-57\tVICTOR - Araç kovalamasý\n");
		strcat(str, "10-57\tFOXTROT - Yaya kovalamasý.\n");
		strcat(str, "10-60\tAraç Bilgisi (Araç adý, renk, araç içerisinde kaç kiþi olduðu ve araç hasarý)\n");
		strcat(str, "10-61\tEþgal Bilgisi (kimlik, ýrk, giyimi, diðer özellikler).\n");
		strcat(str, "10-66\tFelony kontrolü (Kesinlikle destek gerekir)\n");
		strcat(str, "10-70\tDestek talebi (Özel kodlar KOD 1/2/3 - konum ve varsa talep edilen özel birim bildirimi)\n");
		strcat(str, "10-71\tSaðlýk ekibi gerekiyor\n");
		strcat(str, "10-99\tOlay sonlandý\n");
		strcat(str, "IC1\tBeyaz\n");
		strcat(str, "IC2\tSiyahi\n");
		strcat(str, "IC3\tLatin\n");
		strcat(str, "IC4\tOrta Doðulu\n");
		strcat(str, "IC5\tAsyalý\n");
		strcat(str, "IC6\tBilinmeyen Etnik Köken\n");
		ShowPlayerDialog(playerid, BOS_MESAJ, DIALOG_STYLE_TABLIST_HEADERS, "Telsiz Kodlarý", str, "Tamam", "Kapat");
		return 1;
	}


	CMD:bakilanraporlar(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 8) return YetkinizYok(playerid);
		foreach(new i : Player)
		{
			if(oyuncuData[i][oAdmin] > 0)
			{
				SCM_Ex(playerid, RENK_KLASIK, "%s(%s) adlý kiþinin baktýðý rapor sayýsý: %d", OyuncuIsim(i), oyuncuData[i][oAdminNick], oyuncuData[i][oBakilanRapor]);
			}
		}
		return 1;
	}

	CMD:bakilansorular(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 8) return YetkinizYok(playerid);
		foreach(new i : Player)
		{
			if(oyuncuData[i][oHelper] > 0)
			{
				SCM_Ex(playerid, RENK_KLASIK, "%s adlý kiþinin baktýðý soru sayýsý: %d", OyuncuIsim(i), oyuncuData[i][oBakilanSoru]);
			}
		}
		return 1;
	}

	CMD:paydayver(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 8) return YetkinizYok(playerid);
		new oyuncuid;
		if(sscanf(params, "u", oyuncuid)) return kullanimMesaji(playerid, "/paydayver [oyuncuid]");
		UstYoneticiMesaji(RENK_KOYUMAVI, "%s(%s) adlý yetkili %s adlý kiþiye payday verdi.", OyuncuIsim(playerid), oyuncuData[playerid][oAdminNick], OyuncuIsim(oyuncuid));

		if(oyuncuData[oyuncuid][oHirsizlikYetenek] == 1) oyuncuData[oyuncuid][oAracCalmaSiniri] = 1;
		else if(oyuncuData[oyuncuid][oHirsizlikYetenek] == 2) oyuncuData[oyuncuid][oAracCalmaSiniri] = 1;
		else if(oyuncuData[oyuncuid][oHirsizlikYetenek] == 3) oyuncuData[oyuncuid][oAracCalmaSiniri] = 2;
		else if(oyuncuData[oyuncuid][oHirsizlikYetenek] == 4) oyuncuData[oyuncuid][oAracCalmaSiniri] = 2;
		else if(oyuncuData[oyuncuid][oHirsizlikYetenek] == 5) oyuncuData[oyuncuid][oAracCalmaSiniri] = 2;
		else if(oyuncuData[oyuncuid][oHirsizlikYetenek] == 6) oyuncuData[oyuncuid][oAracCalmaSiniri] = 3;
		else if(oyuncuData[oyuncuid][oHirsizlikYetenek] == 7) oyuncuData[oyuncuid][oAracCalmaSiniri] = 3;
		else if(oyuncuData[oyuncuid][oHirsizlikYetenek] == 8) oyuncuData[oyuncuid][oAracCalmaSiniri] = 4;
		else if(oyuncuData[oyuncuid][oHirsizlikYetenek] == 9) oyuncuData[oyuncuid][oAracCalmaSiniri] = 4;
		else if(oyuncuData[oyuncuid][oHirsizlikYetenek] == 10) oyuncuData[oyuncuid][oAracCalmaSiniri] = 5;
		oyuncuData[oyuncuid][oBalikTutmaSinir] = 0;
		if(HirsizDurum[oyuncuid] == true)
		{
			new saat,timestamp[30];
			gettime(saat);
			format(timestamp, sizeof(timestamp), "%02d", saat);
			if(strval(timestamp) < 21 && strval(timestamp) > 6) {
				HirsizDurum[oyuncuid] = false;
				SunucuMesaji(oyuncuid, "Soygun saatleri aþýldýði için otomatik olarak soygun modundan çýkarýldýnýz.");
			}
		}
		new ustlevel = oyuncuData[oyuncuid][oSeviye] + 1, levelatlamaexp = ustlevel * levelexp;
		if(oyuncuData[oyuncuid][oDortXExp] == 1)
		{
			oyuncuData[oyuncuid][oExp] += 4;
			oyuncuData[oyuncuid][oOynamaSaati]++;
		}
		else if(oyuncuData[oyuncuid][oikixpayday] == 1 || IKIX_PAYDAY == true)
		{
			oyuncuData[oyuncuid][oExp] += 2;
			oyuncuData[oyuncuid][oOynamaSaati]++;
		}
		else
		{
			oyuncuData[oyuncuid][oExp]++;
			oyuncuData[oyuncuid][oOynamaSaati]++;
		}
		static maas;
		switch(oyuncuData[oyuncuid][oSeviye])
		{
			case 1..5: maas = 150;
			case 6..9: maas = 160;
			case 10..19: maas = 175;
			case 20..29: maas = 185;
			case 30..900: maas = 200;
		}
		if(IKIX_PAYDAY == true)
		{
			maas = maas * 1;
		}
		new vcoin;
		switch(oyuncuData[oyuncuid][oVIP])
		{
			case 1: vcoin = 2;
			default: vcoin = 1;
		}
		oyuncuData[oyuncuid][oViceCoin] += vcoin;
		HesapKaydet(oyuncuid);
		if((OyuncuBirlikTuru(oyuncuid) == BIRLIK_POLIS || OyuncuBirlikTuru(oyuncuid) == BIRLIK_DEVLET) && oyuncuData[oyuncuid][oIsbasi] == true)
		{
			static bonus;
			switch(oyuncuData[oyuncuid][oBirlikRutbe])
			{
				case 1: bonus = 325;
                case 2: bonus = 350;
                case 3: bonus = 380;
                case 4,5: bonus = 400;
                case 6,7: bonus = 420;
                case 8,9: bonus = 440;
                case 10: bonus = 470;
                case 11: bonus = 490;
                case 12,13: bonus = 500;
                case 14: bonus = 520;
                case 15,16: bonus = 530;
                case 17,18: bonus = 540;
                case 19,20: bonus = 560;
			}
			SCM_Ex(oyuncuid, RENK_KLASIK, "EXP Ýlerlemesi: [{FFFFFF}%d/%d{99C794}] | Banka Parasý: [{FFFFFF}%s{99C794}]", oyuncuData[oyuncuid][oExp], levelatlamaexp, NumaraFormati(oyuncuData[oyuncuid][oBankaPara]));
			SCM_Ex(oyuncuid, RENK_KLASIK, "Kazanýlan Maaþ: [{FFFFFF}%s{99C794}] | Kazanýlan vCoin: [{FFFFFF}%d{99C794}]", NumaraFormati(bonus), vcoin);
			oyuncuData[oyuncuid][oBankaPara] += bonus;
			oyuncuData[oyuncuid][oMaasDakika] = 0;
		}
		else if(OyuncuBirlikTuru(oyuncuid) == BIRLIK_MEDIKAL && oyuncuData[oyuncuid][oIsbasi] == true)
		{
			static bonus;
			switch(oyuncuData[oyuncuid][oBirlikRutbe])
			{
				case 1: bonus = 355;
                case 2: bonus = 370;
                case 3: bonus = 400;
                case 4,5: bonus = 420;
                case 6,7: bonus = 440;
                case 8,9: bonus = 460;
                case 10: bonus = 490;
                case 11: bonus = 510;
                case 12,13: bonus = 530;
                case 14: bonus = 550;
                case 15,16: bonus = 570;
                case 17,18: bonus = 590;
                case 19,20: bonus = 600;
			}
			SCM_Ex(oyuncuid, RENK_KLASIK, "EXP Ýlerlemesi: [{FFFFFF}%d/%d{99C794}] | Banka Parasý: [{FFFFFF}%s{99C794}]", oyuncuData[oyuncuid][oExp], levelatlamaexp, NumaraFormati(oyuncuData[oyuncuid][oBankaPara]));
			SCM_Ex(oyuncuid, RENK_KLASIK, "Kazanýlan Maaþ: [{FFFFFF}%s{99C794}] | Kazanýlan vCoin: [{FFFFFF}%d{99C794}]", NumaraFormati(bonus), vcoin);
			oyuncuData[oyuncuid][oBankaPara] += bonus;
			oyuncuData[oyuncuid][oMaasDakika] = 0;
		}
		else
		{
			oyuncuData[oyuncuid][oBankaPara] += maas;
			SCM_Ex(oyuncuid, RENK_KLASIK, "EXP Ýlerlemesi: [{FFFFFF}%d/%d{99C794}] | Banka Parasý: [{FFFFFF}%s{99C794}]", oyuncuData[oyuncuid][oExp], levelatlamaexp, NumaraFormati(oyuncuData[oyuncuid][oBankaPara]));
			SCM_Ex(oyuncuid, RENK_KLASIK, "Kazanýlan Maaþ: [{FFFFFF}%s{99C794}] | Kazanýlan vCoin: [{FFFFFF}%d{99C794}]", NumaraFormati(maas), vcoin);
			oyuncuData[oyuncuid][oDakika] = 0;
		}
		for(new e = 0; e != MAKSIMUM_EV; e++) if(EvBilgi[e][evKullanimda] && EvBilgi[e][evKiraci] == oyuncuData[oyuncuid][oID]) {
			if(oyuncuData[oyuncuid][oBankaPara] >=  EvBilgi[e][evKiraUcret]) oyuncuData[oyuncuid][oBankaPara] -= EvBilgi[e][evKiraUcret], EvBilgi[e][evKasa] += EvBilgi[e][evKiraUcret];
			else hataMesaji(oyuncuid, "Banka hesabýnda kira ödemesi için yeterli ücret bulunamadý, kiracýlýktan çýkarýldýn."), EvBilgi[e][evKiraci] = 0, Ev_Kaydet(e);
			Ev_Kaydet(e);
			break;
		}
		for(new i = 0; i != MAKSIMUM_ISYERI; i ++) if(IsyeriBilgi[i][isyeriKullanimda] && IsyeriBilgi[i][isyeriSahip] == oyuncuData[oyuncuid][oID])
		{
			new isyerigelir = IsyeriGelirAlgoritma(i);
			IsyeriBilgi[i][isyeriKasa] += isyerigelir;
			Isyeri_Kaydet(i);
		}
		if(oyuncuData[oyuncuid][oMevduat] != 0)
		{
			if(oyuncuData[oyuncuid][oMevduat] < mevduatLimit(oyuncuid))
			{
				SCM_Ex(oyuncuid, RENK_KLASIK, "   Mevduat (Yüzde): {FFFFFF}0.003");
				SCM_Ex(oyuncuid, RENK_KLASIK, "   Mevduat (Miktar): {FFFFFF}%i$", floatround(oyuncuData[oyuncuid][oMevduat] * 0.003));
				oyuncuData[oyuncuid][oMevduat] += floatround(oyuncuData[oyuncuid][oMevduat] * 0.003);
				SCM_Ex(oyuncuid, RENK_KLASIK, "   Mevduat (Banka Hesabý): {FFFFFF}%i$", oyuncuData[oyuncuid][oMevduat]);
			}
			else
			{
				hataMesaji(oyuncuid, "Mevduat hesabýnýz maksimum miktarda doldurulmuþ. (%d/%d)", oyuncuData[oyuncuid][oMevduat], mevduatLimit(oyuncuid));
			}
		}
		oyuncuData[oyuncuid][oGYMHak] = 0;
		if(oyuncuData[oyuncuid][oBirikenKoku] < 10) oyuncuData[oyuncuid][oBirikenKoku]++;
		if(oyuncuData[oyuncuid][oBirikenKoku] >= 10)
		{
			SCM_Ex(oyuncuid, RENK_GRI, "Berbat kokuyorsun, marketten deodorant alýp üstüne sýkmazsan rezil olabilirsin.");
			oyuncuData[oyuncuid][oKokuDurum] = 1;
		}
		if(oyuncuData[oyuncuid][oExp] >= levelatlamaexp)
		{
			oyuncuData[oyuncuid][oExp] -= levelatlamaexp;
			oyuncuData[oyuncuid][oSeviye]++;
			SCM_Ex(oyuncuid, 0x009F2CFF, "Seviyen yükseldi! Yeni seviyen: %d", oyuncuData[oyuncuid][oSeviye]);
			oyuncuData[oyuncuid][oYetenekPuani]++;
			SCM_Ex(oyuncuid, 0x009F2CFF, "Seviye atladýðýn için bir yetenek puaný kazandýn ayrýca 1000$ bonusu kaptýn.");
			ParaEkle(oyuncuid, 1000);
		}
		new yetenekstring[32];
		format(yetenekstring, sizeof yetenekstring, "%d", oyuncuData[oyuncuid][oYetenekPuani]);
		PlayerTextDrawSetString(oyuncuid, sagaltdraw[oyuncuid][3], yetenekstring);
		OyuncuKaydet(oyuncuid);
		return 1;
	}

	CMD:telefonyardim(playerid, params[])
	{
		if(oyuncuData[playerid][oGiris] == false) return hataMesaji(playerid, "Bu komutu kullanmak için giriþ yapmalýsýn.");
		SendClientMessage(playerid, RENK_KLASIK, "[TELEFON]: {FFFFFF}/telefon /tkapat /tkaydet /rehberdensil /ara /sms /imlec /thoparlor");
		return 1;
	}

	CMD:aracyardim(playerid, params[])
	{
		if(oyuncuData[playerid][oGiris] == false) return hataMesaji(playerid, "Bu komutu kullanmak için giriþ yapmalýsýn.");
		SendClientMessage(playerid, RENK_KLASIK, "[ARAÇ]: {FFFFFF}/arac /aliste /agps /aracbirlik /aracaat /araccek /aracbirak /aracgelistir");
		return 1;
	}

	CMD:benzindoldur(playerid, params[])
	{
		if(oyuncuData[playerid][oFirma] < 0 || FirmaInfo[oyuncuData[playerid][oFirma]][fAlan] != 4) return hataMesaji(playerid, "Bir tamirhane firmasý çalýþaný deðilsiniz.");
		if(!oyuncuData[playerid][oFirmaisbasi]) return hataMesaji(playerid, "Ýþbaþýnda deðilken bu komutu kullanamazsýnýz.");
		if(!IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bir araçta deðilsin.");
		if(oyuncuData[playerid][oPara] < 175) return hataMesaji(playerid, "Yeterince paran yok.($175)");
		new aracid = Arac_IDBul(GetPlayerVehicleID(playerid));
		if(GetEngineStatus(aracid)) return hataMesaji(playerid, "Benzin doldurmadan önce motoru kapatmalýsýn.");
		if(AracBilgi[aracid][aracBenzin] == 100.0) return hataMesaji(playerid, "Bu aracýn deposu dolu, benzin dolduramazsýn.");
		if(AracBilgi[aracid][aracBenzin] >= 49.0)
		{
			AracBilgi[aracid][aracBenzin] = 100.0;
		}
		else if(AracBilgi[aracid][aracBenzin] < 49.0)
		{
			AracBilgi[aracid][aracBenzin] += 50.0;
		}
		new textstr[128];
		format(textstr, sizeof(textstr), "%.2f lt", AracBilgi[aracid][aracBenzin]);
		PlayerTextDrawSetString(playerid, AracGosterge[4][playerid], textstr);
		cmd(playerid, 1, "benzin bidonunu kullanarak araca benzin doldurur.");
		ParaEkle(playerid, -175);
		Arac_Kaydet(aracid);
		return 1;
	}

	CMD:birlikaktif(playerid, params[])
	{
		if(oyuncuData[playerid][oBirlik] == -1) return hataMesaji(playerid, "Birlik üyesi deðilsin.");
		SunucuMesaji(playerid, "Birliðinizdeki aktif üyeler:");
		new sayi = 0;
		foreach(new i : Player) if(oyuncuData[i][oBirlik] == oyuncuData[playerid][oBirlik])
		{
			SCM_Ex(playerid, RENK_KLASIK, "Ýsim: %s{FFFFFF} | ID: %d | Rütbe: %s | Telefon: %d", OyuncuIsim(i), i, OyuncuRutbeAdi(i), oyuncuData[i][oTelefonNumarasi]);
			sayi++;
		}
		if(sayi == 0) return hataMesaji(playerid, "Aktif üye bulunamadý.");
		return 1;
	}

	CMD:truckerayril(playerid, params[])
	{
		if(truckerseviyebirde[playerid] > 0 || truckerseviyeikide[playerid] > 0 || truckerseviyeucte[playerid] > 0)
		{
			new aracid = Arac_IDBul(GetPlayerVehicleID(playerid));
			if(truckerseviyebirde[playerid] > 0)
			{
				RemovePlayerFromVehicle(playerid);
				ASpawn(aracid);
				SetPlayerPos(playerid, 2503.7815,-2469.0381,13.6334);
				truckerseviyebirde[playerid] = 0;
				TogglePlayerControllable(playerid, true);
			}
			if(truckerseviyeikide[playerid] > 0)
			{
				RemovePlayerFromVehicle(playerid);
				ASpawn(aracid);
				SetPlayerPos(playerid, 2469.4338,-2587.8372,13.6599);
				truckerseviyeikide[playerid] = 0;
				TogglePlayerControllable(playerid, true);
			}
			if(truckerseviyeucte[playerid] > 0)
			{
				DorseYuku[aracid] = false;
				SetVehicleToRespawn(GetVehicleTrailer(aracid));
				RemovePlayerFromVehicle(playerid);
				ASpawn(aracid);
				SetPlayerPos(playerid, 2289.5610,-2357.6519,13.5469);
				truckerseviyeucte[playerid] = 0;
				oyuncuData[playerid][oTirGuzergah] = 0;
				TogglePlayerControllable(playerid, true);
			}
		}
		else return hataMesaji(playerid, "Þu anda trucker görevinde deðilsin.");
		return 1;
	}

	CMD:truckerkod(playerid, params[])
	{
		if(oyuncuData[playerid][oTruckerKodiste] != true) return hataMesaji(playerid, "Þu anda trucker kodu giremezsin.");
		new kodcek[16], kodal[8];
		if(sscanf(params, "s[8]", kodal)) return kullanimMesaji(playerid, "/truckerkod [kod]");
		format(kodcek, 16, "%s", oyuncuData[playerid][oTruckerKod]);
		if(!strcmp(kodal, kodcek, false))
		{
			if(truckerseviyeikide[playerid] > 0)
			{
				if(IsPlayerInRangeOfPoint(playerid, 25.0, 844.9517,-598.9269,18.4819))
				{
					SetTimerEx("truckerbeklet", 10000, false, "d", playerid);
					GameTextForPlayer(playerid, "MALLAR YUKLENIYOR...", 10000, 3);
					TogglePlayerControllable(playerid, false);
				}
			}
			else if(truckerseviyebirde[playerid] > 0)
			{
				if(IsPlayerInRangeOfPoint(playerid, 25.0, 1081.9767,-343.6003,73.9771))
				{
					SetTimerEx("truckerbeklet", 10000, false, "d", playerid);
					GameTextForPlayer(playerid, "MALLAR YUKLENIYOR...", 10000, 3);
					TogglePlayerControllable(playerid, false);
				}
			}
			else if(truckerseviyeucte[playerid] > 0)
			{
				switch(oyuncuData[playerid][oTirGuzergah])
				{
					case 1:
					{
						if(IsPlayerInRangeOfPoint(playerid, 25.0, -2270.0542,2300.6843,5.8394))
						{
							SetTimerEx("truckerbeklet", 10000, false, "d", playerid);
							GameTextForPlayer(playerid, "DORSE BIRAKILIYOR...", 10000, 3);
							TogglePlayerControllable(playerid, false);
						}
					}
					case 2:
					{
						if(IsPlayerInRangeOfPoint(playerid, 25.0, -1305.5140,2698.4590,51.0736))
						{
							SetTimerEx("truckerbeklet", 10000, false, "d", playerid);
							GameTextForPlayer(playerid, "DORSE BIRAKILIYOR...", 10000, 3);
							TogglePlayerControllable(playerid, false);
						}
					}
					case 3:
					{
						if(IsPlayerInRangeOfPoint(playerid, 25.0, 2783.7925,1294.3961,11.3318))
						{
							SetTimerEx("truckerbeklet", 10000, false, "d", playerid);
							GameTextForPlayer(playerid, "DORSE BIRAKILIYOR...", 10000, 3);
							TogglePlayerControllable(playerid, false);
						}
					}
					case 4:
					{
						if(IsPlayerInRangeOfPoint(playerid, 25.0, -251.2710,1214.4012,20.3273))
						{
							SetTimerEx("truckerbeklet", 10000, false, "d", playerid);
							GameTextForPlayer(playerid, "DORSE BIRAKILIYOR...", 10000, 3);
							TogglePlayerControllable(playerid, false);
						}
					}
				}
			}
		}
		return 1;
	}

	CMD:acam(playerid, params[])
	{
		if(!IsPlayerInAnyVehicle(playerid) || !IsEngineVehicle(GetPlayerVehicleID(playerid))) return hataMesaji(playerid, "Herhangi bir araçta deðilsin.");
		new cam,emote[120];
		if (sscanf(params, "i", cam))
		{
			kullanimMesaji(playerid, "/acam <parametre>");
			SunucuMesaji(playerid, "Parametreler: 1 - sürücü | 2 - yolcu | 3 - arka sol | 4 - arka sað");
			return 1;
		}
		if (!(1 <= cam <= 4)) return hataMesaji(playerid, "Parametre 1 ile 4 arasýnda olmalýdýr.");

		new cam_durum[4], vehicleid = GetPlayerVehicleID(playerid);

		GetVehicleParamsCarWindows(vehicleid, cam_durum[0], cam_durum[1], cam_durum[2], cam_durum[3]);
		cam_durum[--cam] = !cam_durum[cam];
		SetVehicleParamsCarWindows(vehicleid, cam_durum[0], cam_durum[1], cam_durum[2], cam_durum[3]);
		if(cam_durum[cam] == 0)
		{
			format(emote, sizeof(emote), "elini cam açma tuþuna doðru götürür ve camý açar.");
			cmd(playerid, 1, emote);
		}
		else if(cam_durum[cam] == 1)
		{
			format(emote, sizeof(emote), "elini cam açma tuþuna doðru götürür ve camý kapatýr.");
			cmd(playerid, 1, emote);
		}
		return 1;
	}

	CMD:ssmod(playerid)
	{
		if(oyuncuData[playerid][oGiris] != true) return hataMesaji(playerid, "Giriþ yapmadan bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oSSModu] == false)
		{
			PlayerTextDrawShow(playerid, siyahekran[playerid]);
			oyuncuData[playerid][oSSModu] = true;
		}
		else if(oyuncuData[playerid][oSSModu] == true)
		{
			PlayerTextDrawHide(playerid, siyahekran[playerid]);
			oyuncuData[playerid][oSSModu] = false;
		}
		return 1;
	}

	CMD:hudkapat(playerid)
	{
		if(oyuncuData[playerid][oGiris] != true) return hataMesaji(playerid, "Giriþ yapmadan bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oHUD] == false)
		{
			PlayerTextDrawHide(playerid, sagaltdraw[playerid][0]);
			PlayerTextDrawHide(playerid, sagaltdraw[playerid][3]);
			PlayerTextDrawHide(playerid, sagaltdraw[playerid][4]);
			PlayerTextDrawHide(playerid, AracGosterge[0][playerid]);
			PlayerTextDrawHide(playerid, AracGosterge[1][playerid]);
			PlayerTextDrawHide(playerid, AracGosterge[2][playerid]);
			PlayerTextDrawHide(playerid, AracGosterge[3][playerid]);
			PlayerTextDrawHide(playerid, AracGosterge[4][playerid]);
			PlayerTextDrawHide(playerid, AracGosterge[5][playerid]);
			oyuncuData[playerid][oHUD] = true;
			SunucuMesaji(playerid, "HUD'larý kapattýn, açmak için komutu tekrar yaz.");
		}
		else if(oyuncuData[playerid][oHUD] == true)
		{
			PlayerTextDrawShow(playerid, sagaltdraw[playerid][0]);
			PlayerTextDrawShow(playerid, sagaltdraw[playerid][3]);
			PlayerTextDrawShow(playerid, sagaltdraw[playerid][4]);
			if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
				PlayerTextDrawShow(playerid, AracGosterge[0][playerid]);
				PlayerTextDrawShow(playerid, AracGosterge[1][playerid]);
				PlayerTextDrawShow(playerid, AracGosterge[2][playerid]);
				PlayerTextDrawShow(playerid, AracGosterge[3][playerid]);
				PlayerTextDrawShow(playerid, AracGosterge[4][playerid]);
				PlayerTextDrawShow(playerid, AracGosterge[5][playerid]);
			}
			oyuncuData[playerid][oHUD] = false;
			SunucuMesaji(playerid, "HUD'larý tekrar açtýn.");
		}
		return 1;
	}

	CMD:yazitura(playerid, params[])
	{
		new sonuc = randomEx(1,3), string[128];
		switch(sonuc)
		{
			case 1:
			{
				format(string, sizeof(string), "* Parayý havaya attý ve yazý geldi. (( %s ))", OyuncuIsim(playerid));
				OzelYakinMesaj(playerid, 12.0, RENK_TURUNCU, string);
			}
			case 2:
			{
				format(string, sizeof(string), "* Parayý havaya attý ve tura geldi. (( %s ))", OyuncuIsim(playerid));
				OzelYakinMesaj(playerid, 12.0, RENK_TURUNCU, string);
			}
			default:
			{
				format(string, sizeof(string), "* Parayý havaya attý ve para yan durdu. (( %s ))", OyuncuIsim(playerid));
				OzelYakinMesaj(playerid, 12.0, RENK_TURUNCU, string);
			}
		}
		return 1;
	}

	CMD:zar(playerid, params[])
	{
		new zarturu[16];
		if(sscanf(params, "s[16]", zarturu)) return kullanimMesaji(playerid, "/zar [tek/cift]");
		if(!strcmp(zarturu, "tek", true))
		{
			new teksayi = randomEx(1, 7), string[128];
			format(string, sizeof(string), "* Zar attý ve %d geldi. (( %s ))", teksayi, OyuncuIsim(playerid));
			OzelYakinMesaj(playerid, 12.0, RENK_TURUNCU, string);
		}
		else if(!strcmp(zarturu, "cift", true))
		{
			new ciftsayibir = randomEx(1, 7), ciftsayiiki = randomEx(1, 7), string[128];
			format(string, sizeof(string), "* Çift zar attý ve %d, %d geldi. (( %s ))", ciftsayibir, ciftsayiiki, OyuncuIsim(playerid));
			OzelYakinMesaj(playerid, 12.0, RENK_TURUNCU, string);
		}
		else hataMesaji(playerid, "Geçersiz zar türü girdin.");
		return 1;
	}

	CMD:hapistekiler(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 1) return YetkinizYok(playerid);
		new sayi = 0;
		SunucuMesaji(playerid, "Hapiste bulunan oyuncular:");
		foreach (new i : Player) if(oyuncuData[i][oHapisSure][0] > 0)
		{
			SCM_Ex(playerid, RENK_KLASIK, "OOC Hapis: %s(%d) - Süre: %d", OyuncuIsim(i), i, oyuncuData[i][oHapisSure][0]);
			sayi++;
		}
		foreach (new i : Player) if(oyuncuData[i][oHapisSure][1] > 0)
		{
			SCM_Ex(playerid, RENK_KLASIK, "IC Hapis: %s(%d) - Süre: %d", OyuncuIsim(i), i, oyuncuData[i][oHapisSure][1]);
			sayi++;
		}
		if(sayi == 0) return hataMesaji(playerid, "Oyunda ve hapiste olan kimse bulunamadý.");
		return 1;
	}

	CMD:truckerrespawn(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 4) return YetkinizYok(playerid);
		new sayi = 0;
		foreach(new i : Araclar)
		{
			if(IsValidVehicle(i) && SurucuBul(i) == INVALID_PLAYER_ID && AracBilgi[i][aracMeslek] == 5)
			{
				ASpawn(i);
				sayi++;
			}
		}
		YoneticiMesaji(RENK_KLASIK, "%s(%d) tarafýndan %d adet trucker aracý respawnlandý.", oyuncuData[playerid][oAdminNick], playerid, sayi);
		return 1;
	}

	CMD:taksirespawn(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 4) return YetkinizYok(playerid);
		new sayi = 0;
		foreach(new i : Araclar)
		{
			if(IsValidVehicle(i) && SurucuBul(i) == INVALID_PLAYER_ID && AracBilgi[i][aracMeslek] == 4)
			{
				ASpawn(i);
				sayi++;
			}
		}
		YoneticiMesaji(RENK_KLASIK, "%s(%d) tarafýndan %d adet taksi aracý respawnlandý. ", oyuncuData[playerid][oAdminNick], playerid, sayi);
		return 1;
	}

	CMD:mulklistele(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 1) return YetkinizYok(playerid);
		new oyuncuid;
		if(sscanf(params, "u", oyuncuid)) return kullanimMesaji(playerid, "/mulklistele [oyuncu id]");
		new sayi = 0;
		for (new i = 0; i < MAKSIMUM_EV; i ++) if(Ev_SahipKontrol(oyuncuid, i)) {
			SCM_Ex(playerid, RENK_BEYAZ, "** (EV) Kapý NO: %d | Adres: %s | Vergi Borcu: %d", EvBilgi[i][evID], EvBilgi[i][evAdres], EvBilgi[i][evVergi]);
			sayi++;
		}
		for (new i = 0; i < MAKSIMUM_ISYERI; i ++) if(Isyeri_SahipKontrol(oyuncuid, i)) {
			SCM_Ex(playerid, RENK_BEYAZ, "** (ISYERI) Kapý NO: %d | Ad: %s | Vergi Borcu: %d", i, IsyeriBilgi[i][isyeriAd], IsyeriBilgi[i][isyeriVergi]);
			sayi++;
		}
		for(new i = 0; i < MAKSIMUM_ARAC; i++) if(Arac_SahipKontrol(oyuncuid, i))
		{
			SCM_Ex(playerid, RENK_KLASIK, "(ARAÇ) %s | ID: %d | Vergi Borcu: %d | Plaka: %s | Kilit: %d | Alarm: %d | Sigorta: %d", GetVehicleName(GetVehicleModel(i)), i, AracBilgi[i][aracVergi], AracBilgi[i][aracPlaka], AracBilgi[i][kilitseviye], AracBilgi[i][alarmseviye], AracBilgi[i][aracSigorta]);
			sayi++;
		}
		if(!sayi) hataMesaji(playerid, "Bu kiþinin üzerine kayýtlý mülk yok!");
		return 1;
	}

	CMD:sqlaraclistele(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 1) return YetkinizYok(playerid);
		new oyuncuid;
		if(sscanf(params, "u", oyuncuid)) return kullanimMesaji(playerid, "/sqlaraclistele [oyuncu id]");
		new Cache:VeriCek, query[165], cek = 0;
		mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `araclar` WHERE aracSahip = '%d' LIMIT %d", oyuncuData[oyuncuid][oID], MAX_OYUNCU_ARAC);
		VeriCek = mysql_query(g_SQL, query);
		new rows = cache_num_rows();
		if(rows)
		{
			new model, plaka[32], vergi;
			for(new i = 0; i < rows; i++)
			{
				cache_get_value_name_int(i, "aracID", AracSlotSQL[oyuncuid][i]);
				cache_get_value_name_int(i, "aracModel", model);
				cache_get_value_name_int(i, "aracVergi", vergi);
				cache_get_value_name(i, "aracPlaka", plaka);
				if(AracDurumuCek(AracSlotSQL[playerid][i]) > 0)
				{
					SCM_Ex(playerid, RENK_KLASIK, "(Saklý Deðil) %s | ID: %d | Vergi Borcu: %d | Plaka: %s", GetVehicleName(model), AracDurumuCek(AracSlotSQL[oyuncuid][i]), vergi, plaka);
				}
				else
				{
					SCM_Ex(playerid, RENK_KLASIK, "(Saklý) %s | SQLID: %d | Vergi Borcu: %d | Plaka: %s", GetVehicleName(model), AracSlotSQL[oyuncuid][i], vergi, plaka);
				}
				cek++;
			}
		}
		if(!cek) return hataMesaji(playerid, "Kiþiye ait hiçbir araç bulunamadý.");
		cache_delete(VeriCek);
		return 1;
	}

	CMD:soru(playerid, params[])
	{
		if(isnull(params))
		{
			kullanimMesaji(playerid, "/soru [yazý]");
		}
		else
		{
			if(oyuncuData[playerid][oSoruAtti] >= 1)
			{
				hataMesaji(playerid,"Önceki sorunuzun cevaplanmasýný beklemelisiniz.");
			}
			else
			{
				strcpy(oyuncuData[playerid][oSoruMesaji], params,256);
				oyuncuData[playerid][oSoruAtti] = 1;
				SunucuMesaji(playerid, "Sorunuz baþarýyla gönderildi.");

			}
		}

		return 1;
	}

	CMD:soruiptal(playerid, params[])
	{
		if(oyuncuData[playerid][oSoruAtti] >= 1)
		{
			oyuncuData[playerid][oSoruAtti] = 0;
			format(oyuncuData[playerid][oSoruMesaji],64, "Yok");
			SunucuMesaji(playerid,"Soru baþarýyla kaldýrýldý.");
		}
		return 1;
	}

	CMD:sk(playerid, params[]) {
		if(oyuncuData[playerid][oHelper] >= 1 || oyuncuData[playerid][oAdmin] >= 1)
		{
			new
			tool[16];

			if(sscanf(params, "s[16] ", tool))
			{
				kullanimMesaji(playerid,"/sk [iþlem]");
				SunucuMesaji(playerid, "Ýþlemler: liste,kabul,red");
			}
			else {
				if(strcmp(tool, "Liste", true) == 0)
				{
					SendClientMessage(playerid, -1, "-------------------------------------------------------------------------------------------------------------------------------");

					new
					string[512];

					foreach(new i : Player)
					{
						if(oyuncuData[i][oSoruAtti] >= 1)
						{
							format(string, sizeof(string), "%s(%d): %s",OyuncuIsim(i), i, oyuncuData[i][oSoruMesaji]);
							SendClientMessage(playerid, -1, string);
						}
					}
					SendClientMessage(playerid, -1, "-------------------------------------------------------------------------------------------------------------------------------");
				}
				else if(strcmp(tool, "Kabul", true) == 0)
				{
					new
					userID;

					if(sscanf(params, "s[16]u", tool, userID)) {
						kullanimMesaji(playerid,"/sk kabul [oyuncuid]");
					}
					else {
						if(!IsPlayerConnected(userID))
						{
							hataMesaji(playerid,"Hatalý ID girdiniz");
						}
						else
						{
							if(oyuncuData[userID][oSoruAtti] >= 1) {

								SunucuMesaji(playerid, "%s adlý oyuncunun sorunu kabul ettiniz.", OyuncuIsim(userID));
								oyuncuData[playerid][oBakilanSoru]++;
								HesapKaydet(playerid);
								SunucuMesaji(userID,"%s adlý kiþi sorunuzu inceliyor, sizinle iletiþime geçene kadar bekleyin. ))", OyuncuIsim(playerid));

								oyuncuData[userID][oSoruAtti] = 0;
								format(oyuncuData[userID][oSoruMesaji],64, "Yok");

								SetPVarInt(playerid, "aR", 1);
								SetPVarInt(playerid, "aRf", userID);

							}
							else
							{
								hataMesaji(playerid,"Bu kiþiye ait soru yok.");
							}
						}
					}
				}
				else if(strcmp(tool, "red", true) == 0) {
					new
					userID;

					if(sscanf(params, "s[16]u", tool, userID)) {
						kullanimMesaji(playerid,"/sk red [oyuncuid]");
					}
					else {
						if(!IsPlayerConnected(userID)) {
							hataMesaji(playerid,"Hatalý ID girdiniz");
						}
						else {
							if(oyuncuData[userID][oSoruAtti] != 0)
							{
								oyuncuData[userID][oSoruAtti] = 0;
								format(oyuncuData[userID][oSoruMesaji], 64, "Yok");

								SunucuMesaji(userID, "%s {FF3201}adlý kiþi sorunuzu sildi.",OyuncuIsim(playerid));

								SunucuMesaji(playerid, "%s adlý oyuncunun sorusunu reddettiniz.", OyuncuIsim(userID));
							}
							else {
								hataMesaji(playerid,"Oyuncunun yollamýþ olduðu aktif bir soru bulunmamaktadýr.");
							}
						}
					}
				}
				else
				{
					kullanimMesaji(playerid, "/sk [iþlem]");
					SunucuMesaji(playerid,"Ýþlemler: liste,kabul,red");
				}
			}
		}

		return 1;
	}

	CMD:rapor(playerid, params[])
	{
		if(isnull(params))
		{
			kullanimMesaji(playerid, "/rapor [yazý]");
		}
		else
		{
			if(oyuncuData[playerid][oRaporAtti] >= 1)
			{
				hataMesaji(playerid,"Önceki raporunuzun cevaplanmasýný beklemelisiniz.");
			}
			else
			{
				strcpy(oyuncuData[playerid][oRaporMesaji], params,256);
				oyuncuData[playerid][oRaporAtti] = 1;
				SunucuMesaji(playerid, "Raporunuz baþarýyla gönderildi, iptal etmek için ((/raporiptal))");
			}
		}

		return 1;
	}
	CMD:raporiptal(playerid, params[])
	{
		if(oyuncuData[playerid][oRaporAtti] >= 1)
		{
			oyuncuData[playerid][oRaporAtti] = 0;
			format(oyuncuData[playerid][oRaporMesaji],64, "Yok");
			SunucuMesaji(playerid,"Rapor baþarýyla kaldýrýldý.");
		}
		return 1;
	}

	CMD:rk(playerid, params[]) {
		if(oyuncuData[playerid][oAdmin] >= 1)
		{
			new
			tool[16];

			if(sscanf(params, "s[16] ", tool))
			{
				kullanimMesaji(playerid,"/rk [iþlem]");
				SunucuMesaji(playerid, "Ýþlemler: liste,kabul,red");
			}
			else {
				if(strcmp(tool, "Liste", true) == 0)
				{
					SendClientMessage(playerid, -1, "-------------------------------------------------------------------------------------------------------------------------------");

					new
					string[512];

					foreach(new i : Player)
					{
						if(oyuncuData[i][oRaporAtti] >= 1)
						{
							format(string, sizeof(string), "%s(%d): %s",OyuncuIsim(i), i, oyuncuData[i][oRaporMesaji]);
							SendClientMessage(playerid, -1, string);
						}
					}
					SendClientMessage(playerid, -1, "-------------------------------------------------------------------------------------------------------------------------------");
				}
				else if(strcmp(tool, "Kabul", true) == 0)
				{
					new
					userID;

					if(sscanf(params, "s[16]u", tool, userID)) {
						kullanimMesaji(playerid,"/rk kabul [oyuncuid]");
					}
					else {
						if(!IsPlayerConnected(userID))
						{
							hataMesaji(playerid,"Hatalý ID girdiniz");
						}
						else
						{
							if(oyuncuData[userID][oRaporAtti] >= 1) {

								SunucuMesaji(playerid, "%s adlý oyuncunun raporunu kabul ettiniz.", OyuncuIsim(userID));
								oyuncuData[playerid][oBakilanRapor]++;
								HesapKaydet(playerid);
								SunucuMesaji(userID,"%s adlý yönetici raporunuzu inceliyor sizinle iletiþime geçene kadar bekleyin ))",oyuncuData[playerid][oAdminNick]);

								oyuncuData[userID][oRaporAtti] = 0;
								format(oyuncuData[userID][oRaporMesaji],64, "Yok");

								SetPVarInt(playerid, "aR", 1);
								SetPVarInt(playerid, "aRf", userID);

							}
							else
							{
								hataMesaji(playerid,"Bu kiþiye ait rapor yok.");
							}
						}
					}
				}
				else if(strcmp(tool, "red", true) == 0) {
					new
					userID;

					if(sscanf(params, "s[16]u", tool, userID)) {
						kullanimMesaji(playerid,"/rk red [oyuncuid]");
					}
					else {
						if(!IsPlayerConnected(userID)) {
							hataMesaji(playerid,"Hatalý ID girdiniz");
						}
						else {
							if(oyuncuData[userID][oRaporAtti] != 0)
							{
								oyuncuData[userID][oRaporAtti] = 0;
								format(oyuncuData[userID][oRaporMesaji], 64, "Yok");

								SunucuMesaji(userID, "%s {FF3201}adlý yönetici raporunuz uygun olmadýðý için raporu sildi.))",oyuncuData[playerid][oAdminNick]);

								SunucuMesaji(playerid, "%s adlý oyuncunun raporunu reddetdiniz.", OyuncuIsim(userID));
							}
							else {
								hataMesaji(playerid,"Oyuncunun yollamýþ olduðu aktif bir rapor bulunmamaktadýr.");
							}
						}
					}
				}
				else
				{
					kullanimMesaji(playerid, "/rk [iþlem]");
					SunucuMesaji(playerid,"Ýþlemler: liste,kabul,red");
				}
			}
		}

		return 1;
	}

	CMD:gateyarat(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 7) return YetkinizYok(playerid);
		new id = Iter_Free(Gateler), obje;
		if(id < 0) return SendClientMessage(playerid, -1, "{EC6C6C}<!>{FFFFFF} Sunucu maksimum gate seviyesine ulaþtý.");
		if(sscanf(params, "d", obje)) return SendClientMessage(playerid, -1, "{9BB5E3}<!>{FFFFFF} /gateolustur [obje modeli]");
		GateOlustur(playerid, id, obje);
		SendClientMessage(playerid, -1, "{9CE2B5}<!>{FFFFFF} Yeni bir gate baþarýyla oluþturuldu, kontrol etmek için; /gateduzenle [id]");
		return 1;
	}

	CMD:gatesil(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 7) return YetkinizYok(playerid);
		new id;
		if(sscanf(params, "d", id)) return SendClientMessage(playerid, -1, "{9BB5E3}<!>{FFFFFF} /gatesil [id]");
		if(!Iter_Contains(Gateler, id)) return SendClientMessage(playerid, -1, "{EC6C6C}<!>{FFFFFF} Belirtilen ID'de gate mevcut deðil.");
		GateSil(id);
		SendClientMessage(playerid, -1, "{9CE2B5}<!>{FFFFFF} Girilen deðeri karþýlayan gate baþarýyla silindi.");
		return 1;
	}

	CMD:gateduzenle(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 7) return YetkinizYok(playerid);
		new id;
		if(sscanf(params, "d", id)) return SendClientMessage(playerid, -1, "{9BB5E3}<!>{FFFFFF} /gateduzenle [id]");
		if(!Iter_Contains(Gateler, id)) return SendClientMessage(playerid, -1, "{EC6C6C}<!>{FFFFFF} Belirtilen ID'de gate mevcut deðil.");
		SetPVarInt(playerid, "GateDuzenleID", id);
		GateDuzenleMenu(playerid);
		return 1;
	}

	stock Gatelerim_Menu(playerid)
	{
		new gate, string[512], baslik[128], sifre[512];
		strcat(string, "{FFFFFF}ID\tÞifre\tBölge\n");
		foreach(new i : Gateler)
		{
			if(strlen(gateData[i][gateSahip]) > 2)
			{
				if(!strcmp(gateData[i][gateSahip], OyuncuIsim(playerid, 1), true))
				{
					if(strlen(gateData[i][gateSifre]) < 1) {format(sifre, sizeof(sifre), "{CDCDCD}-");}
					else {format(sifre, sizeof(sifre), "%s", gateData[i][gateSifre]);}
					format(string, sizeof(string), "%s%d.\t%s\t%s\n", string, i, sifre, LokasyonBul(gateData[i][gateKapaliPos][0], gateData[i][gateKapaliPos][1], gateData[i][gateKapaliPos][2]));
					gate++;
				}
			}

		}
		if(!gate) return hataMesaji(playerid, "Adýnýza kayýtlý gate bulunamadý.");

		format(baslik, sizeof(baslik), "Gateleriniz: %d", gate);
		ShowPlayerDialog(playerid, SAHIP_OLDUGUM_GATELER, DIALOG_STYLE_TABLIST_HEADERS, baslik, string, "Seç", "Kapat");
		return 1;
	}

	CMD:gatelerim(playerid, params[]) return Gatelerim_Menu(playerid);

	CMD:gate(playerid, params[])
	{
		new id = GateBul(playerid);
		if(id < 0) return SendClientMessage(playerid, -1, "{EC6C6C}<!>{FFFFFF} Özel bir kapýya yeterince yakýn deðilsiniz.");
//if(gateData[id][gateAcikPos][0] == gateData[id][gateKapaliPos][0] && gateData[id][gateAcikPos][1] == gateData[id][gateKapaliPos][1] && gateData[id][gateAcikPos][2] == gateData[id][gateKapaliPos][2]) return SendClientMessage(playerid, -1, "{EC6C6C}<!>{FFFFFF} Bu kapý henüz ayarlanmamýþ.");
		if(gateData[id][gateHiz] == 0) return SendClientMessage(playerid, -1, "{EC6C6C}<!>{FFFFFF} Bu kapýnýn hýzý ayarlý deðil.");
		if(gateData[id][gateBirlik] != -1)
		{
			if(oyuncuData[playerid][oBirlik] != gateData[id][gateBirlik]) return hataMesaji(playerid, "Bu kapýyý açamýyorsunuz.");
		}
		if(strcmp(gateData[id][gateSifre], "-", true))
		{
			new sifre[32];
			if(sscanf(params, "s[32]", sifre)) return SendClientMessage(playerid, -1, "{9BB5E3}<!>{FFFFFF} /gate [þifre]");
			if(strcmp(sifre, gateData[id][gateSifre]) != 0) return SendClientMessage(playerid, -1, "{EC6C6C}<!>{FFFFFF} Kapý þifresi hatalý.");
		}

		if(gateData[id][gateDurum] == true)
		{
			MoveDynamicObject(gateData[id][gateObje], gateData[id][gateKapaliPos][0], gateData[id][gateKapaliPos][1], gateData[id][gateKapaliPos][2], gateData[id][gateHiz], gateData[id][gateKapaliPos][3], gateData[id][gateKapaliPos][4], gateData[id][gateKapaliPos][5]);
			gateData[id][gateDurum] = false;
		}
		else
		{
			MoveDynamicObject(gateData[id][gateObje], gateData[id][gateAcikPos][0], gateData[id][gateAcikPos][1], gateData[id][gateAcikPos][2], gateData[id][gateHiz], gateData[id][gateAcikPos][3], gateData[id][gateAcikPos][4], gateData[id][gateAcikPos][5]);
			gateData[id][gateDurum] = true;
		}
		return 1;
	}

	CMD:incele(playerid, params[])
	{
		new oyuncu;
		if(sscanf(params, "u", oyuncu)) return kullanimMesaji(playerid, "/incele [oyuncu id]");
		if(!IsPlayerConnected(oyuncu)) return hataMesaji(playerid, "Kiþi oyunda deðil.");
		if(!YakinlikKontrol(playerid, oyuncu, 6.0)) return hataMesaji(playerid, "Kiþiye yeterince yakýn deðilsin.");
		new me[128];
		format(me, sizeof(me), "** %s %s adlý kiþiyi baþtan aþaðý inceler.", OyuncuIsim(playerid), OyuncuIsim(oyuncu));
		SetPlayerChatBubble(playerid, me, RENK_PEMBE, 12.0, 8000);
		new vucutdurum[16], dayaniklidurum[16], yasquery[138], Cache:GetCache, karakteryasi;
		mysql_format(g_SQL, yasquery, sizeof(yasquery), "SELECT * FROM oyuncular WHERE ID = '%d'", oyuncuData[oyuncu][oID]);
		GetCache = mysql_query(g_SQL, yasquery);
		cache_get_value_name_int(0, "karakteryas", karakteryasi);
		cache_delete(GetCache);
		switch(oyuncuData[oyuncu][oGucYetenek])
		{
			case 0..6: vucutdurum = "Sýska";
			case 7..15: vucutdurum = "Kaslý";
			case 16..20: vucutdurum = "Harika";
		}
		switch(oyuncuData[oyuncu][oDayaniklilik])
		{
			case 0..6: dayaniklidurum = "Normal";
			case 7..15: dayaniklidurum = "Ýyi";
			case 16..20: dayaniklidurum = "Harika";
		}
		SCM_Ex(playerid, RENK_KLASIK, "[---------------------%s inceleniyor---------------------]", OyuncuIsim(oyuncu));
		SCM_Ex(playerid, RENK_KLASIK, ">> {FFFFFF}Boy: %d | Kilo: %d | %d-%d yaþlarýnda gösteriyor.", oyuncuData[oyuncu][oyuncuboy], oyuncuData[oyuncu][oyuncukilo], karakteryasi-2, karakteryasi+2);
		SCM_Ex(playerid, RENK_KLASIK, ">> {FFFFFF}Vücut Durumu: %s(%d) | Dayanýklýlýk: %s(%d) | Baðýmlýlýk: %d", vucutdurum, oyuncuData[oyuncu][oGucYetenek], dayaniklidurum, oyuncuData[oyuncu][oDayaniklilik], oyuncuData[oyuncu][oBagimlilik]);
		SCM_Ex(playerid, RENK_KLASIK, ">> {FFFFFF}Yaydýðý Koku: %s | Cilt Durumu: Normal | Seksapalite: Normal | Saðlýk: Normal", (oyuncuData[oyuncu][oKokuDurum] == 0) ? ("Güzel") : ("Berbat"));
		return 1;
	}

	CMD:uniformaayarla(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 1) return YetkinizYok(playerid);
		static oyuncuid, kiyafet;
		if(sscanf(params, "ud", oyuncuid, kiyafet)) return kullanimMesaji(playerid, "/uniformaayarla [oyuncu isim/id] [kiyafet id]");
		if(!IsPlayerConnected(oyuncuid)) return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");
		if(kiyafet < 1 || kiyafet == 74) return hataMesaji(playerid, "Girilen kýyafet geçersiz.");
		oyuncuData[oyuncuid][oGeciciKiyafet] = kiyafet;
		SetPlayerSkin(oyuncuid, kiyafet);
		SunucuMesaji(playerid, "%s adlý kiþinin üniformasýný deðiþtirdin. Yeni üniforma: %d", OyuncuIsim(oyuncuid), kiyafet);
		SunucuMesaji(oyuncuid, "%s adlý kiþi üniformanýzý deðiþtirdi.", OyuncuIsim(playerid));
		return 1;
	}

	CMD:yanginyarat(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 3) return YetkinizYok(playerid);
		static noktasayisi, Float:x, Float:y, Float:z;
		if(sscanf(params, "d", noktasayisi)) return kullanimMesaji(playerid, "KULLANIM: {FFFFFF}/yanginyarat [nokta] (Min: 1 - Max: 20)");
		if(noktasayisi > 20 || noktasayisi < 1) return hataMesaji(playerid, "Girdiðiniz nokta en az 1, en fazla 20 olmalýdýr.");
		GetPlayerPos(playerid, x, y, z);
		SunucuMesaji(playerid, "Yangýn yaratýldý. Nokta: %d", noktasayisi);
		if(IsValidDynamicObject(yanginData[noktasayisi-1][yanginobjesi][noktasayisi-1])) DestroyDynamicObject(yanginData[noktasayisi-1][yanginobjesi][noktasayisi-1]);
		yanginData[noktasayisi-1][yanginobjesi][noktasayisi-1] = CreateDynamicObject(18691, x, y, z-2, 0.0, 0.0, 0.0);
		return 1;
	}

	CMD:yanginsil(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 3) return YetkinizYok(playerid);
		new nokta;
		if(sscanf(params, "d", nokta)) return kullanimMesaji(playerid, "/yanginsil [nokta]");
		if(!IsValidDynamicObject(yanginData[nokta-1][yanginobjesi][nokta-1])) return hataMesaji(playerid, "Böyle bir yangýn noktasý bulunamadý.");
		DestroyDynamicObject(yanginData[nokta-1][yanginobjesi][nokta-1]);
		SunucuMesaji(playerid, "Yangýn noktasý %d silindi.", nokta);
		return 1;
	}

	CMD:yanginlarisil(playerid)
	{
		if(oyuncuData[playerid][oAdmin] < 3) return YetkinizYok(playerid);
		for (new i = 0; i < 20; i++)
		{
			DestroyDynamicObject(yanginData[i][yanginobjesi][i]);
		}
		SunucuMesaji(playerid, "Tüm yangýn noktalarýný sildin.");
		return 1;
	}

	CMD:trailertest(playerid)
	{
		if(oyuncuData[playerid][oAdmin] < 1) return YetkinizYok(playerid);
		TogglePlayerSpectating(playerid, 1);
		ShowPlayerDialog(playerid, DIALOG_TRAILER1, DIALOG_STYLE_MSGBOX, "> Nitro Roleplay'e Hoþ Geldin", "Sunucumuza hoþ geldin. Eðer bu ekraný görüyorsan, artýk bir karakter oluþturma hakkýna sahipsin demektir.\nKarakterini yapýlandýrýrken yapacaðýn rollerin planýný gözden geçirmelisin.\nKarakter yapýlandýrma paketi satýn almak dýþýnda karakterinin özelliklerini deðiþtirmen pek mümkün deðil.\nSeçimlerini dikkatli yapmalýsýn.", "Anladým", "");
		InterpolateCameraPos(playerid, 1366.3462,-1816.5529,60.9164, 1517.1886,-1714.0668,40.9791, 10000, CAMERA_MOVE);
		InterpolateCameraLookAt(playerid, 1553.5894,-1675.6848,16.1556, 1553.5894,-1675.6848,16.1556, 8500);
		SetTimerEx("TrailerDevam", 10000, false, "d", playerid);
		return 1;
	}

	CMD:pdgaraj(playerid, params[])
	{
	if(IsPlayerInRangeOfPoint(playerid, 2.5, 2315.6211,2447.8147,3.0163))//iç
	{
		new aracid = GetPlayerVehicleID(playerid);
		if(aracid > 0)
		{
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return hataMesaji(playerid, "Bulunduðunuz aracýn sürücüsü siz deðilsiniz.");
			if(aracbirlikturbul(aracid) != BIRLIK_POLIS) return hataMesaji(playerid, "Bu araç VCPD'ye ait deðil.");
			foreach(new i : Player)
			{
				if(aracid == GetPlayerVehicleID(i))
				{
					SetPlayerVirtualWorld(i, 0);
				}
			}
			SetVehiclePos(aracid, 1584.1096, -1687.4940, 15.7561 + 1.2);
			SetVehicleVirtualWorld(aracid, 0); SetVehicleZAngle(aracid, 268.6912);
		}
		else
		{
			SetPlayerPos(playerid, 1580.5728,-1650.6276,15.7636);
			SetPlayerVirtualWorld(playerid, 0);
		}
	}
	else if(IsPlayerInRangeOfPoint(playerid, 2.5, 1580.5728,-1650.6276,15.7636))//dýþ
	{
		new aracid = GetPlayerVehicleID(playerid);
		if(aracid > 0)
		{
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return hataMesaji(playerid, "Bulunduðunuz aracýn sürücüsü siz deðilsiniz.");
			if(aracbirlikturbul(aracid) != BIRLIK_POLIS) return hataMesaji(playerid, "Bu araç VCPD'ye ait deðil.");
			foreach(new i : Player)
			{
				if(aracid == GetPlayerVehicleID(i))
				{
					SetPlayerVirtualWorld(i, pdgarajvw);
				}
			}
			SetVehiclePos(aracid, 2315.6211,2447.8147,3.0163);
			SetVehicleZAngle(aracid, 90);
			SetVehicleVirtualWorld(aracid, pdgarajvw); SetVehicleZAngle(aracid, 86.8592);
		}
		else
		{
			SetPlayerPos(playerid, 2315.6211,2447.8147,3.0163);
			SetPlayerVirtualWorld(playerid, pdgarajvw);
		}
	}
	return 1;
}

CMD:vmgaraj(playerid, params[])
	{
	if(IsPlayerInRangeOfPoint(playerid, 4.0, 1128.1166,-1470.7040,2.9713))//iç
	{
		new aracid = GetPlayerVehicleID(playerid);
		if(aracid > 0)
		{
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return hataMesaji(playerid, "Bulunduðunuz aracýn sürücüsü siz deðilsiniz.");
			foreach(new i : Player)
			{
				if(aracid == GetPlayerVehicleID(i))
				{
					SetPlayerVirtualWorld(i, 0);
				}
			}
			SetVehiclePos(aracid, 1128.1865,-1451.9983,4.2885);
			SetVehicleVirtualWorld(aracid, 0); SetVehicleZAngle(aracid, 358.8732);
		}
		else
		{
			SetPlayerPos(playerid, 1128.1865,-1451.9983,4.2885);
			SetPlayerVirtualWorld(playerid, 0);
		}
	}
	else if(IsPlayerInRangeOfPoint(playerid, 4.0, 1128.1865,-1451.9983,4.2885))//dýþ
	{
		new aracid = GetPlayerVehicleID(playerid);
		if(aracid > 0)
		{
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return hataMesaji(playerid, "Bulunduðunuz aracýn sürücüsü siz deðilsiniz.");
			foreach(new i : Player)
			{
				if(aracid == GetPlayerVehicleID(i))
				{
					SetPlayerVirtualWorld(i, 0);
				}
			}
			SetVehiclePos(aracid, 1128.1166,-1470.7040,2.9713);
			SetVehicleZAngle(aracid, 90);
			SetVehicleVirtualWorld(aracid, 0); SetVehicleZAngle(aracid, 175.5949);
		}
		else
		{
			SetPlayerPos(playerid, 1128.1166,-1470.7040,2.9713);
			SetPlayerVirtualWorld(playerid, 0);
		}
	}
	return 1;
}

CMD:taksici(playerid)
{
	new sayi = 0;
	SunucuMesaji(playerid, "Taksiciler:");
	foreach(new i : Player) if(oyuncuData[i][oMeslek] == 4 && oyuncuData[i][oTaksiIsbasi] == true)
	{
		SCM_Ex(playerid, RENK_MODIFIYE, "%s(%d) | %d", OyuncuIsim(i), i, oyuncuData[i][oTelefonNumarasi]);
		sayi++;
	}
	if(!sayi) return hataMesaji(playerid, "Aktif taksici bulunamadý.");
	return 1;
}

CMD:tamirci(playerid)
{
	new sayi = 0;
	SunucuMesaji(playerid, "Tamirciler:");
	foreach(new i : Player) if(oyuncuData[i][oFirma] != -1 && FirmaInfo[oyuncuData[i][oFirma]][fAlan] == 4 && oyuncuData[i][oFirmaisbasi] == true)
	{
		SCM_Ex(playerid, RENK_MODIFIYE, "%s(%d) | %s | %d", OyuncuIsim(i), i, FirmaInfo[oyuncuData[i][oFirma]][fIsim], oyuncuData[i][oTelefonNumarasi]);
		sayi++;
	}
	if(!sayi) return hataMesaji(playerid, "Aktif tamirci bulunamadý.");
	return 1;
}

CMD:avukat(playerid)
{
	new sayi = 0;
	SunucuMesaji(playerid, "Avukatlar:");
	foreach(new i : Player) if(oyuncuData[i][oFirma] != -1 && FirmaInfo[oyuncuData[i][oFirma]][fAlan] == 5 && oyuncuData[i][oFirmarutbe] > 4)
	{
		SCM_Ex(playerid, RENK_MODIFIYE, "%s(%d) | %s | %d", OyuncuIsim(i), i, FirmaInfo[oyuncuData[i][oFirma]][fIsim], oyuncuData[i][oTelefonNumarasi]);
		sayi++;
	}
	if(!sayi) return hataMesaji(playerid, "Aktif avukat bulunamadý.");
	return 1;
}

CMD:gorevde(playerid)
{
	new LSPD = 0, VCFD = 0, Taksici = 0, Tamirci = 0, Basin = 0;
	SunucuMesaji(playerid,"Görevdekiler:");

	foreach(new i : Player)
	{
		if(OyuncuBirlikTuru(i) == BIRLIK_POLIS && oyuncuData[i][oIsbasi] == true){LSPD++;}
		if(OyuncuBirlikTuru(i) == BIRLIK_MEDIKAL && oyuncuData[i][oIsbasi] == true){VCFD++;}
		if(oyuncuData[i][oMeslek] == 4 && oyuncuData[i][oTaksiIsbasi] == true){Taksici++;}
		if(oyuncuData[i][oFirma] != -1 && FirmaInfo[oyuncuData[i][oFirma]][fAlan] == 4 && oyuncuData[i][oFirmaisbasi] == true){Tamirci++;}
		if(oyuncuData[i][oFirma] != -1 && FirmaInfo[oyuncuData[i][oFirma]][fAlan] == 1 && oyuncuData[i][oFirmaisbasi] == true){Basin++;}
	}

	SCM_Ex(playerid, RENK_MODIFIYE, " {FFFFFF}VCPD: %d | ASGH: %d | Taksici: %d | Tamirci: %d | Basýn: %d", LSPD, VCFD, Taksici, Tamirci, Basin);
	return 1;
}

CMD:musterikabul(playerid, params[])
{
	if(oyuncuData[playerid][oMeslek] == 4)
	{
		if(oyuncuData[playerid][oTaksiIsbasi] == true)
		{
			new userid;
			if(sscanf(params, "u", userid)) return kullanimMesaji(playerid, "/musterikabul [oyuncuid/isim]");
			if(!IsPlayerConnected(userid)) return hataMesaji(playerid, "Kullanýcý ID'si hatalý.");
			if(oyuncuData[userid][oTaksiCagrisi] == false) return hataMesaji(playerid, "Bu kiþinin taksi çaðrýsý yok.");

			SCM_Ex(playerid, 0xFFFf92FF, " {FFFFFF}%s kiþisinin taksi çaðrýsýný kabul ettiniz. Çaðrýdaki konum belirtisi;", OyuncuIsim(userid));
			SCM_Ex(playerid, 0xFFFf92FF, ": {FFFFFF}%s", oyuncuData[userid][oTaksiCagriKonum]);

			SCM_Ex(userid, 0x4dcf92FF, " {FFFFFF}Taksi çaðrýnýz %s tarafýndan kabul edildi, belirttiðiniz konuma yönlenecektir.", OyuncuIsim(playerid));
			oyuncuData[userid][oTaksiCagrisi] = false;
		}
		else hataMesaji(playerid, "Taksici olarak iþ baþýnda deðilsiniz.");
	}
	else hataMesaji(playerid, "Taksici deðilsiniz.");
	return 1;
}

CMD:sonbildiri(playerid, params[])
{
	new yenibildiri[64];
	if(sscanf(params, "s[64]", yenibildiri)) return kullanimMesaji(playerid, "/sonbildiri [yeni son bildiri] (Max. 64 karakter)");
	if(strlen(params) > 64) return hataMesaji(playerid, "Maksimum 64 karakterli bir son bildiri girmelisin.");
	new query[256];
	mysql_format(g_SQL, query, sizeof(query), "UPDATE `oyuncular` SET `sonbildiri` = '%e' WHERE `ID` = '%d'", yenibildiri, oyuncuData[playerid][oID]);
	mysql_query(g_SQL, query);
	SunucuMesaji(playerid, "Son bildiriniz baþarýyla güncellendi.");
	return 1;
}

CMD:disgorunus(playerid, params[])
{
	new yenigorunus[64];
	if(sscanf(params, "s[64]", yenigorunus)) return kullanimMesaji(playerid, "/disgorunus [yeni dýþ görünüþ] (Max. 64 karakter)");
	if(strlen(params) > 64) return hataMesaji(playerid, "Maksimum 64 karakterli bir dýþ görünüþ girmelisin.");
	new query[256];
	mysql_format(g_SQL, query, sizeof(query), "UPDATE `oyuncular` SET `disgorunus` = '%e' WHERE `ID` = '%d'", yenigorunus, oyuncuData[playerid][oID]);
	mysql_query(g_SQL, query);
	SunucuMesaji(playerid, "Dýþ görünüþünüz baþarýyla güncellendi.");
	return 1;
}

CMD:isyeridekor(playerid, params[])
{
	if(oyuncuData[playerid][oGiris] == false) return hataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oDonduruldu] > 0) return hataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oHapisSure][0] > 0 || oyuncuData[playerid][oHapisSure][1] > 0) return hataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	new id = Isyeri_Yakin(playerid);
	if(id == -1) return hataMesaji(playerid, "Bir iþyerinin dýþ kapýsýnda deðilsin.");
	if(!Isyeri_SahipKontrol(playerid, id)) return hataMesaji(playerid, "Bu iþyerinin sahibi deðilsin.");
	if(IsyeriBilgi[id][isyeriDurum] == 4) return hataMesaji(playerid, "Vergi mühründeki iþyerinin dekorunu deðiþtiremezsin.");
	new stringx[128], stringy[128], stringz[128], stringa[128], stringb[128], stringc[128], stringf[128], stringg[128], dekorid;
	format(stringx, sizeof stringx, "0 > Boþ Depo[Ücretsiz] | 1 > Market 1[$55000] | 2 > Market 2[$50000] | 3 > Elektronik 1[$60000] | 4 > Club/Bar 1[$30000] | 5 > Ofis 1[$8000]");
	format(stringy, sizeof stringy, "6 > Cafe/Restoran 1[$12000] | 7 > Club/Bar 2[$40000] | 8 > Club/Bar 3[$20000] | 9 > Club/Bar 4[$10000]");
	format(stringz, sizeof stringz, "10 > Elektronik 2[$65000] | 11 > Club/Bar 5[$40000] | 12 > Diðer 1[$5000] | 13 > Diðer 2[$8000] | 14 > Club/Bar 6[$27000]");
	format(stringa, sizeof stringa, "15 > GYM 1[$10000] | 16 > Ofis 2[$6000] | 17 > Diðer 3[$13000] | 18 > Diðer 4[$7000] | 19 > Club/Bar 7[$35000]");
	//format(stringb, sizeof stringb, "20 > Club/Bar 8[$35000] | 21 > Cafe/Restoran 2[$15000] | 22 > Ofis 3[$10000] | 23 > Ofis 4[$15000] | 24 > Uyuþturucu Laboratuvarý[$20000]");
	format(stringb, sizeof stringb, "20 > Club/Bar 8[$35000] | 21 > Cafe/Restoran 2[$15000] | 22 > Ofis 3[$10000] | 23 > Ofis 4[$15000] | 24 > Pasif");
	format(stringc, sizeof stringc, "25 > Cafe/Restoran 3[$20000] | 26 > Ofis 5[$40000] | 27 > Cafe/Restoran 4[$60000] | 28 > Diðer 5[$50000] | 29 > Diðer 6[$10000]");
	format(stringf, sizeof stringf, "30 > Club/Bar 9[$50000] | 31 > Club/Bar 10[$60000] | 32 > Club/Bar 11[$25000] | 33 > Pizzacý[$25000] | 34 > Club/Bar 12[$50000]");
	format(stringg, sizeof stringg, "35 > Ofis 6[$15000] | 36 > Ofis 7[$7500] | 37 > Ofis 8[$20000] | 38 > Ofis 9[$10000]");
	if(sscanf(params, "d", dekorid))
		{
			kullanimMesaji(playerid, "/isyeridekor [dekor id]");
			SendClientMessage(playerid, RENK_KLASIK, stringx);
			SendClientMessage(playerid, RENK_KLASIK, stringy);
			SendClientMessage(playerid, RENK_KLASIK, stringz);
			SendClientMessage(playerid, RENK_KLASIK, stringa);
			SendClientMessage(playerid, RENK_KLASIK, stringb);
			SendClientMessage(playerid, RENK_KLASIK, stringc);
			SendClientMessage(playerid, RENK_KLASIK, stringf);
			SendClientMessage(playerid, RENK_KLASIK, stringg);
			return 1;
		}
	if(dekorid < 0 || dekorid > 38) return hataMesaji(playerid, "Geçersiz dekor ID'si girdin.");
	IsyeriDekorDegistir(playerid, id, dekorid);
	return 1;
}

CMD:gozaltindakiler(playerid)
{	
	new avukatdurum = 0;
	if(oyuncuData[playerid][oFirma] != -1 && FirmaInfo[oyuncuData[playerid][oFirma]][fAlan] == 5) avukatdurum++;
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS && avukatdurum == 0) return hataMesaji(playerid, "Yalnýzca devlet personelleri bu sistemden yararlanabilir.");
	new sayi = 0;
	foreach(new i: Player)
	{
		if(oyuncuData[i][oGozalti] < 1) continue;

		SCM_Ex(playerid, RENK_PDISBASI, "%s(ID: %d) adlý kiþi gözaltýnda ve oyunda.", OyuncuIsim(i), i);
		sayi++;
	}
	if(!sayi) return hataMesaji(playerid, "Gözaltýnda aktif oyuncu bulunamadý.");
	return 1;
}

CMD:gozalticikar(playerid, params[])
{
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return hataMesaji(playerid, "Yalnýzca polis birliði üyeleri bu sistemden yararlanabilir.");
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2013.8152,1580.7793,6753.0479)) return hataMesaji(playerid, "Gözaltý noktasýnda deðilsin.");
	new oyuncuid;
	if(sscanf(params, "d", oyuncuid)) return kullanimMesaji(playerid, "/gozalticikar [oyuncu id]");
	if(oyuncuData[oyuncuid][oGozalti] < 1) return hataMesaji(playerid, "Bu kiþi gözaltýnda deðil.");
	SetPlayerPos(oyuncuid, 2010.4738,1586.9189,6753.0479);
	oyuncuData[oyuncuid][oGozalti] = 0;
	GetPlayerPos(oyuncuid, oyuncuData[oyuncuid][oPos][0], oyuncuData[oyuncuid][oPos][1], oyuncuData[oyuncuid][oPos][2]);
	OyuncuKaydet(oyuncuid);
	BirlikMesaji(oyuncuData[playerid][oBirlik], RENK_PDISBASI, "%s %s, %s adlý kiþiyi gözaltýndan çýkarttý.", OyuncuRutbeAdi(playerid), OyuncuIsim(playerid), OyuncuIsim(oyuncuid));
	SCM_Ex(oyuncuid, RENK_PDISBASI, "%s adlý polis memuru tarafýndan gözaltýndan çýkarýldýn.", OyuncuIsim(playerid));
	return 1;
}

CMD:gozalti(playerid, params[])
{
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return hataMesaji(playerid, "Yalnýzca polis birliði üyeleri bu sistemden yararlanabilir.");
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2013.8152,1580.7793,6753.0479)) return hataMesaji(playerid, "Gözaltý noktasýnda deðilsin.");
	new odano, oyuncuid, sebep[64];
	if(sscanf(params, "dds[64]", oyuncuid, odano, sebep)) return kullanimMesaji(playerid, "/gozalti [oyuncu id] [koðuþ] [sebep]");
	if(oyuncuData[oyuncuid][oGozalti] > 0) return hataMesaji(playerid, "Bu kiþi zaten gözaltýnda, çýkartmak için /gozalticikar komutunu kullan.");
	if(!YakinlikKontrol(playerid, oyuncuid, 5.0)) return hataMesaji(playerid, "Kiþiye yakýn deðilsin.");
	if(odano < 1 || odano > 3) return hataMesaji(playerid, "Hatalý koðuþ numarasý. 1'den 3'e kadar oda numaralarý bulunuyor.");
	switch(odano)
	{
		case 1:
		{
			SetPlayerPos(oyuncuid, 2005.9867,1580.3374,6753.0479);
			oyuncuData[oyuncuid][oGozalti] = 1;
		}
		case 2:
		{
			SetPlayerPos(oyuncuid, 2002.9246,1591.1643,6753.0479);
			oyuncuData[oyuncuid][oGozalti] = 1;
		}
		case 3:
		{
			SetPlayerPos(oyuncuid, 2008.6826,1591.2937,6753.0479);
			oyuncuData[oyuncuid][oGozalti] = 1;
		}
		default: SunucuMesaji(playerid, "hata");
	}
	GetPlayerPos(oyuncuid, oyuncuData[oyuncuid][oPos][0], oyuncuData[oyuncuid][oPos][1], oyuncuData[oyuncuid][oPos][2]);
	OyuncuKaydet(oyuncuid);
	BirlikMesaji(oyuncuData[playerid][oBirlik], RENK_TELSIZ, "[OPERATOR] %s adlý polis memuru %s adlý kiþiyi gözaltýna aldý.", OyuncuIsim(playerid), OyuncuIsim(oyuncuid));
	BirlikMesaji(oyuncuData[playerid][oBirlik], RENK_TELSIZ, "[OPERATOR] Sebep: %s", sebep);
	SCM_Ex(oyuncuid, RENK_PDISBASI, "%s adlý polis memuru tarafýndan gözaltýna alýndýn.", OyuncuIsim(playerid));
	SCM_Ex(oyuncuid, RENK_PDISBASI, "Sebep: %s", sebep);
	SCM_Ex(oyuncuid, RENK_PDISBASI, "Polis memurlarý iþlemler için sizi çýkartana kadar burada beklemen gerekecek.");
	return 1;
}

CMD:isyerisql(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 1) return YetkinizYok(playerid);
	new isyeriid;
	if(sscanf(params, "d", isyeriid)) return kullanimMesaji(playerid, "/isyerisql [iþyeri kapý no]");
	new olumlu = 0;
	for(new i = 0; i < MAKSIMUM_ISYERI; i++) if(IsyeriBilgi[i][isyeriKullanimda] == true)
	{
		if(IsyeriBilgi[i][isyeriID] == isyeriid)
		{
			SunucuMesaji(playerid, "%d kapý numaralý iþyerinin oyun içi ID'si %d olarak alýndý.", isyeriid, i);
			olumlu++;
		}
	}
	if(!olumlu) return hataMesaji(playerid, "Geçersiz iþyeri girdiniz.");
	return 1;
}

CMD:evsql(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 1) return YetkinizYok(playerid);
	new evid;
	if(sscanf(params, "d", evid)) return kullanimMesaji(playerid, "/evsql [ev kapý no]");
	new olumlu = 0;
	for(new i = 0; i < MAKSIMUM_EV; i++) if(EvBilgi[i][evKullanimda] == true)
	{
		if(EvBilgi[i][evID] == evid)
		{
			SunucuMesaji(playerid, "%d kapý numaralý evin oyun içi ID'si %d olarak alýndý.", evid, i);
			olumlu++;
		}
	}
	if(!olumlu) return hataMesaji(playerid, "Geçersiz iþyeri girdiniz.");
	return 1;
}

CMD:boya(playerid, params[])
{
	static renk1,renk2;
	if(sscanf(params, "dd", renk1,renk2))
		return kullanimMesaji(playerid, "/boya [renk1] [renk2]");

	if(renk1 < 0 || renk1 > 255)
		return hataMesaji(playerid, "Geçersiz bir renk girdiniz, renk ID'leri 0 ilâ 255 arasýndadýr.");
	if(renk2 < 0 || renk2 > 255)
		return hataMesaji(playerid, "Geçersiz bir renk girdiniz, renk ID'leri 0 ilâ 255 arasýndadýr.");
	if(oyuncuData[playerid][oFirma] < 0 || FirmaInfo[oyuncuData[playerid][oFirma]][fAlan] != 4) return hataMesaji(playerid, "Bir tamirhane firmasý çalýþaný deðilsiniz.");
	new ofirma = oyuncuData[playerid][oFirma];
	if(!IsPlayerInRangeOfPoint(playerid, 20.0, FirmaInfo[ofirma][fiX], FirmaInfo[ofirma][fiY], FirmaInfo[ofirma][fiZ])) return hataMesaji(playerid, "Tamirhane noktasýna yakýn deðilsiniz.(firma noktasý)");
	if(!oyuncuData[playerid][oFirmaisbasi]) return hataMesaji(playerid, "Ýþbaþýnda deðilken bu komutu kullanamazsýnýz.");
	foreach(new r : Araclar) if(IsValidVehicle(r))
	{
		new Float:X,Float:Y,Float:Z, query[200];
		GetVehiclePos(r, X, Y, Z);
		if(IsPlayerInRangeOfPoint(playerid, 3.0, X, Y, Z))
		{
			if(oyuncuData[playerid][oPara] < 700) return hataMesaji(playerid, "Üzerinizde yeterli miktarda para bulunmuyor.(700$)");
			format(query, sizeof(query), "** %s önündeki araca doðru yönelir ve uðraþmaya baþlar.", OyuncuIsim(playerid));
			ProxDetector(12, playerid, query, RENK_PEMBE);
			SetTimerEx("maractamir", 90000, false, "idd", playerid, r, 1);
			ParaEkle(playerid, -500);
			TogglePlayerControllable(playerid, false);
			GameTextForPlayer(playerid, "~w~ARAC BOYANIYOR...", 1200000, 4);
			SetPVarInt(playerid, "tmrenk1", renk1),SetPVarInt(playerid, "tmrenk2", renk2);
		}
	}
	return 1;
}

CMD:tamir(playerid, params[])
{
	if(oyuncuData[playerid][oFirma] < 0 || FirmaInfo[oyuncuData[playerid][oFirma]][fAlan] != 4) return hataMesaji(playerid, "Bir tamirhane firmasý çalýþaný deðilsiniz.");
	if(!oyuncuData[playerid][oFirmaisbasi]) return hataMesaji(playerid, "Ýþbaþýnda deðilken bu komutu kullanamazsýnýz.");
	foreach(new r : Araclar) if(IsValidVehicle(r))
	{
		new Float:X,Float:Y,Float:Z, query[200];
		GetVehiclePos(r, X, Y, Z);
		if(IsPlayerInRangeOfPoint(playerid, 3.0, X, Y, Z))
		{
			if(oyuncuData[playerid][oPara] < 100) return hataMesaji(playerid, "Üzerinizde yeterli miktarda para bulunmuyor.(100$)");
			format(query, sizeof(query), "** %s önündeki araca doðru yönelir ve uðraþmaya baþlar.", OyuncuIsim(playerid));
			ProxDetector(12, playerid, query, RENK_PEMBE);
			SetTimerEx("maractamir", 20000, false, "idd", playerid, r, 0);
			ParaEkle(playerid, -100);
			TogglePlayerControllable(playerid, false);
			GameTextForPlayer(playerid, "~w~TAMIR EDILIYOR...", 1200000, 4);
		}
	}
	return 1;
}


CMD:modifiye(playerid, params[])
{
	if(oyuncuData[playerid][oFirma] < 0 || FirmaInfo[oyuncuData[playerid][oFirma]][fAlan] != 4) return hataMesaji(playerid, "Bir tamirhane firmasý çalýþaný deðilsiniz.");
	if(GetPVarInt(playerid, "modifiyeyapiyor") == 1) return hataMesaji(playerid, "Zaten þuan bir araca modifiye yapýyorsunuz!");
	new ofirma = oyuncuData[playerid][oFirma];
	if(!IsPlayerInRangeOfPoint(playerid, 20.0, FirmaInfo[ofirma][fiX], FirmaInfo[ofirma][fiY], FirmaInfo[ofirma][fiZ])) return hataMesaji(playerid, "Tamirhane noktasýna yakýn deðilsiniz.(firma noktasý)");
	if(!oyuncuData[playerid][oFirmaisbasi]) return hataMesaji(playerid, "Ýþbaþýnda deðilken bu komutu kullanamazsýnýz.");
	foreach(new r : Araclar) if(IsValidVehicle(r))
	{
		new Float:X,Float:Y,Float:Z;
		GetVehiclePos(r, X, Y, Z);
		if(IsPlayerInRangeOfPoint(playerid, 3.0, X, Y, Z))
		{

			ShowPlayerDialog(playerid, DIALOG_ARACMOD, DIALOG_STYLE_LIST, "Modifiye Parçalarý", "Egzos\nÖn Tampon\nArka Tampon\nTavan\nRüzgarlýk\nYan Etekler\nJantlar\nStereo\nHidrolik\nNitro", "Seç", "Iptal");
			SetPVarInt(playerid, "modifiyecomparac", r);
			SetPVarInt(playerid, "modifiyeyapiyor", 1);
		}
	}
	return 1;
}

CMD:modifiyekaldir(playerid, params[])
{
	if(oyuncuData[playerid][oFirma] < 0 || FirmaInfo[oyuncuData[playerid][oFirma]][fAlan] != 4) return hataMesaji(playerid, "Bir tamirhane firmasý çalýþaný deðilsiniz.");
	new ofirma = oyuncuData[playerid][oFirma];
	if(!IsPlayerInRangeOfPoint(playerid, 20.0, FirmaInfo[ofirma][fiX], FirmaInfo[ofirma][fiY], FirmaInfo[ofirma][fiZ])) return hataMesaji(playerid, "Tamirhane noktasýna yakýn deðilsiniz.(firma noktasý)");
	if(!oyuncuData[playerid][oFirmaisbasi]) return hataMesaji(playerid, "Ýþbaþýnda deðilken bu komutu kullanamazsýnýz.");
	foreach(new r : Araclar) if(IsValidVehicle(r))
	{
		new Float:X,Float:Y,Float:Z;
		GetVehiclePos(r, X, Y, Z);
		if(IsPlayerInRangeOfPoint(playerid, 3.0, X, Y, Z))
		{

			ShowPlayerDialog(playerid, DIALOG_ARACMODKALDIR, DIALOG_STYLE_LIST, "Modifiye Kaldýrma", "Egzos\nÖn Tampon\nArka Tampon\nTavan\nRüzgarlýk\nYan Etekler\nJantlar\nStereo\nHidrolik\nNitro", "Seç", "Iptal");
			SetPVarInt(playerid, "modifiyecomparac", r);
		}
	}
	return 1;
}

CMD:pawnshop(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, 1535.3379,-1767.1284,13.5637)) return hataMesaji(playerid, "Pawn Shop'ta deðilsiniz!");
	ShowPlayerDialog(playerid, DIALOG_PAWNSHOP, DIALOG_STYLE_LIST, "{F5E600}Pawn Shop", "Metal Parça\nÇekiç\nIsýtýcý Tüp\nMetal Panel\nTornavida\nSürgü\nSülfürik Asit\nMil\nYaylý Hazne\nHassas Pin\nTetikleyici\nCraft Masasý\nAlet Çantasý", "Seç", "Iptal");
	return 1;
}

	CMD:hurdasat(playerid, params[])
	{
		if(!IsPlayerInRangeOfPoint(playerid, 5.0, 2375.0820,-1921.8303,13.5210)) return hataMesaji(playerid, "Hurda satým noktasýnda deðilsin.");
		if(!IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu komutu sadece çalýntý bir araçtayken kullanabilirsin.");
		new aracid = GetPlayerVehicleID(playerid);
		if(Arac_SahipKontrol(playerid, aracid)) return hataMesaji(playerid, "Bu komutu sadece çalýntý bir araçtayken kullanabilirsin.");
		if(AracBilgi[aracid][aracTur] != 0) return hataMesaji(playerid, "Bu araç satýlmaya uygun deðil.");
		if(GetEngineStatus(aracid) == 0) return hataMesaji(playerid, "Aracýn satýlabilmesi için motorunun açýk olmasý gerekiyor.");
		if(Arac_CalintiKontrol(aracid) == 0) return HurdaciMesaji(playerid, "Bu arabanýn parçalarýný kýsa süre içinde parçaladýk. Þu an bunu kullanamayýz."), IpucuMesaji(playerid, "Geçtiðimiz on iki saat içinde bu araç zaten çalýnýp satýlmýþ.");		
		if(oyuncuData[playerid][oHirsizlikYetenek] < 1) return hataMesaji(playerid, "Hýrsýzlýk yeteneðini yükseltmen gerekiyor.");
		if(oyuncuData[playerid][oHirsizlikYetenek] == 1)
		{
			new model = GetVehicleModel(aracid);
			if(model == 549)
			{
				ParaEkle(playerid, 2400);
				HurdaSattir(playerid, aracid);
			}
			else return hataMesaji(playerid, "Bu araç aranan araçlar listesinde yok veya hýrsýzlýk yeteneðin uygun deðil.");
		}
		else if(oyuncuData[playerid][oHirsizlikYetenek] == 2)
		{
			new model = GetVehicleModel(aracid);
			switch(model)
			{
				case 549: ParaEkle(playerid, 2400);
				case 475: ParaEkle(playerid, 2470);
				default: return hataMesaji(playerid, "Bu araç aranan araçlar listesinde yok veya hýrsýzlýk yeteneðin uygun deðil.");
			}
			HurdaSattir(playerid, aracid);
		}
		else if(oyuncuData[playerid][oHirsizlikYetenek] == 3)
		{
			new model = GetVehicleModel(aracid);
			switch(model)
			{
				case 549: ParaEkle(playerid, 2400);
				case 475: ParaEkle(playerid, 2470);
				case 542: ParaEkle(playerid, 2600);
				default: return hataMesaji(playerid, "Bu araç aranan araçlar listesinde yok veya hýrsýzlýk yeteneðin uygun deðil.");
			}
			HurdaSattir(playerid, aracid);
		}
		else if(oyuncuData[playerid][oHirsizlikYetenek] == 4)
		{
			new model = GetVehicleModel(aracid);
			switch(model)
			{
				case 549: ParaEkle(playerid, 2400);
				case 475: ParaEkle(playerid, 2470);
				case 542: ParaEkle(playerid, 2600);
				case 492: ParaEkle(playerid, 2600);
				default: return hataMesaji(playerid, "Bu araç aranan araçlar listesinde yok veya hýrsýzlýk yeteneðin uygun deðil.");
			}
			HurdaSattir(playerid, aracid);
		}
		else if(oyuncuData[playerid][oHirsizlikYetenek] == 5)
		{
			new model = GetVehicleModel(aracid);
			switch(model)
			{
				case 549: ParaEkle(playerid, 2400);
				case 475: ParaEkle(playerid, 2470);
				case 542: ParaEkle(playerid, 2600);
				case 492: ParaEkle(playerid, 2600);
				case 550: ParaEkle(playerid, 2800);
				default: return hataMesaji(playerid, "Bu araç aranan araçlar listesinde yok veya hýrsýzlýk yeteneðin uygun deðil.");
			}
			HurdaSattir(playerid, aracid);
		}
		else if(oyuncuData[playerid][oHirsizlikYetenek] == 6)
		{
			new model = GetVehicleModel(aracid);
			switch(model)
			{
				case 549: ParaEkle(playerid, 2400);
				case 475: ParaEkle(playerid, 2470);
				case 542: ParaEkle(playerid, 2600);
				case 492: ParaEkle(playerid, 2600);
				case 550: ParaEkle(playerid, 2800);
				case 405: ParaEkle(playerid, 3000);
				default: return hataMesaji(playerid, "Bu araç aranan araçlar listesinde yok veya hýrsýzlýk yeteneðin uygun deðil.");
			}
			HurdaSattir(playerid, aracid);
		}
		else if(oyuncuData[playerid][oHirsizlikYetenek] == 7)
		{
			new model = GetVehicleModel(aracid);
			switch(model)
			{
				case 549: ParaEkle(playerid, 2400);
				case 475: ParaEkle(playerid, 2470);
				case 542: ParaEkle(playerid, 2600);
				case 492: ParaEkle(playerid, 2600);
				case 550: ParaEkle(playerid, 2800);
				case 405: ParaEkle(playerid, 3000);
				case 426: ParaEkle(playerid, 3100);
				default: return hataMesaji(playerid, "Bu araç aranan araçlar listesinde yok veya hýrsýzlýk yeteneðin uygun deðil.");
			}
			HurdaSattir(playerid, aracid);
		}
		else if(oyuncuData[playerid][oHirsizlikYetenek] == 8)
		{
			new model = GetVehicleModel(aracid);
			switch(model)
			{
				case 549: ParaEkle(playerid, 2400);
				case 475: ParaEkle(playerid, 2470);
				case 542: ParaEkle(playerid, 2600);
				case 492: ParaEkle(playerid, 2600);
				case 550: ParaEkle(playerid, 2800);
				case 405: ParaEkle(playerid, 3000);
				case 426: ParaEkle(playerid, 3100);
				case 489: ParaEkle(playerid, 3400);
				default: return hataMesaji(playerid, "Bu araç aranan araçlar listesinde yok veya hýrsýzlýk yeteneðin uygun deðil.");
			}
			HurdaSattir(playerid, aracid);
		}
		else if(oyuncuData[playerid][oHirsizlikYetenek] == 9)
		{
			new model = GetVehicleModel(aracid);
			switch(model)
			{
				case 549: ParaEkle(playerid, 2400);
				case 475: ParaEkle(playerid, 2470);
				case 542: ParaEkle(playerid, 2600);
				case 492: ParaEkle(playerid, 2600);
				case 550: ParaEkle(playerid, 2800);
				case 405: ParaEkle(playerid, 3000);
				case 426: ParaEkle(playerid, 3100);
				case 489: ParaEkle(playerid, 3400);
				case 579: ParaEkle(playerid, 3800);
				default: return hataMesaji(playerid, "Bu araç aranan araçlar listesinde yok veya hýrsýzlýk yeteneðin uygun deðil.");
			}
			HurdaSattir(playerid, aracid);
		}
		else if(oyuncuData[playerid][oHirsizlikYetenek] == 10)
		{
			new model = GetVehicleModel(aracid);
			switch(model)
			{
				case 549: ParaEkle(playerid, 2400);
				case 475: ParaEkle(playerid, 2470);
				case 542: ParaEkle(playerid, 2600);
				case 492: ParaEkle(playerid, 2600);
				case 550: ParaEkle(playerid, 2800);
				case 405: ParaEkle(playerid, 3000);
				case 426: ParaEkle(playerid, 3100);
				case 489: ParaEkle(playerid, 3400);
				case 579: ParaEkle(playerid, 3800);
				case 429: ParaEkle(playerid, 4100);
				default: return hataMesaji(playerid, "Bu araç aranan araçlar listesinde yok veya hýrsýzlýk yeteneðin uygun deðil.");
			}
			HurdaSattir(playerid, aracid);
		}
		oyuncuData[playerid][oAracCalmaSiniri]--;
		OyuncuKaydet(playerid);
		return 1;
	}

	CMD:aracgelistir(playerid, params[])
	{
		//if(!IsPlayerInRangeOfPoint(playerid, 5.0, 941.2906,-1737.8582,13.5546)) return hataMesaji(playerid, "Araç geliþtirme noktasýnda deðilsin.(Sunshine Autos)");
		if(!IsPlayerInRangeOfPoint(playerid, 5.0, 559.9242,-1286.1040,17.2482)) return hataMesaji(playerid, "Araç geliþtirme noktasýnda deðilsin.(Sunshine Autos)");
		if(!IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu komutu kullanabilmek için sahip olduðun bir araçta olmalýsýn.");
		new aracid = GetPlayerVehicleID(playerid);
		if(!Arac_SahipKontrol(playerid, aracid)) return hataMesaji(playerid, "Bu aracýn sahibi deðilsin.");
		new string[256];
		format(string, sizeof string, "Seçenek\tÜcret\tMevcut\nAlarm Yükselt\t$%d\t%d\nKilit Yükselt\t$%d\t%d\nSigorta Al\t$1000\t%d", alarmfiyati(AracBilgi[aracid][alarmseviye]), AracBilgi[aracid][alarmseviye], kilitfiyati(AracBilgi[aracid][kilitseviye]), AracBilgi[aracid][kilitseviye], AracBilgi[aracid][aracSigorta]);
		ShowPlayerDialog(playerid, DIALOG_ARAC_GELISTIR, DIALOG_STYLE_TABLIST_HEADERS, "Araç Geliþtirme", string, "Seç", "Ýptal");
		return 1;
	}

	CMD:gethp(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 1) return YetkinizYok(playerid);
		new oyuncuid, Float:candegeri;
		if(sscanf(params, "u", oyuncuid)) return kullanimMesaji(playerid, "/gethp [oyuncu id]");
		GetPlayerHealth(oyuncuid, candegeri);
		SunucuMesaji(playerid, "%s adlý oyuncunun can deðeri: %.2f", OyuncuIsim(oyuncuid), candegeri);
		return 1;
	}

	CMD:aisimgizle(playerid)
	{
		if(oyuncuData[playerid][oAdmin] < 1) return YetkinizYok(playerid);
		if(oyuncuData[playerid][oGizliIsim] == false)
		{
			foreach(new i : Player)
			{
				ShowPlayerNameTagForPlayer(i, playerid, 0);
			}
			oyuncuData[playerid][oGizliIsim] = true;
			SunucuMesaji(playerid, "Ýsmini diðer oyunculardan gizliyorsun.");
		}
		else if(oyuncuData[playerid][oGizliIsim] == true)
		{
			foreach(new i : Player)
			{
				ShowPlayerNameTagForPlayer(i, playerid, 1);
			}
			oyuncuData[playerid][oGizliIsim] = false;
			SunucuMesaji(playerid, "Ýsmini diðer oyunculara açýk hale getirdin.");
		}
		return 1;
	}

	CMD:aracsql(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 1) return YetkinizYok(playerid);
		static id;
		if(sscanf(params, "d", id)) return kullanimMesaji(playerid, "/aracsql [aracid]");
		if(!IsValidVehicle(id)) return hataMesaji(playerid, "Araç bulunamadý.");
		SCM_Ex(playerid, -1, "%d ID'li aracýn SQL ID'si: %d", id, AracSQLIDCek(id));
		return 1;
	}

	CMD:ekip(playerid, params[])
	{
		if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return hataMesaji(playerid, "Bu komuttan yalnýzca polis birliði üyeleri yararlanabilir.");
		if(oyuncuData[playerid][oIsbasi] == false) return hataMesaji(playerid, "Sadece iþbaþýnda bu komuttan yararlanabilirsin.");
		if(!IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu komut sadece araçta kullanýlabilir.");
		if(aracbirlikturbul(GetPlayerVehicleID(playerid)) != BIRLIK_POLIS) return hataMesaji(playerid, "Bu komut sadece polis araçlarýnda kullanýlabilir.");
		if(OyuncuBirlikTuru(playerid) == BIRLIK_POLIS && oyuncuData[playerid][oIsbasi] == true)
		{
			static parametre[50], ekiptur, ekipid, partner, ek[64];
			if(sscanf(params, "s[50]S()[64]", parametre, ek)) return kullanimMesaji(playerid, "/ekip [kur/sil/liste/kodsil]");
			if(!strcmp(parametre, "kur", true))
			{
				if(sscanf(ek, "dI(-1)", ekiptur, partner)) return kullanimMesaji(playerid, "/ekip kur [ekip kodu] [partner id(opsiyonel)]"), IpucuMesaji(playerid, "Ekip Kodlarý: 1>BECKETT 2>LIMA 3>SIERRA 4>HOTEL 5>MIKE 6>TANGO 7>ECHO 8>DELTA 9>VICE 10>GOLF 11>BEACH 12>YANKEE");
				if(ekiptur < 1 || ekiptur > 12) return hataMesaji(playerid, "Geçersiz ekip kodu girdin.");
				ekipid = Iter_Free(Ekipler);
				new aracid = GetPlayerVehicleID(playerid);
				if(ekipid == -1) return hataMesaji(playerid, "Ekip sýnýrýna ulaþýldý, ekip kuramazsýn.");
				if(aracartikkodlu[aracid] == true) return hataMesaji(playerid, "Bu araç zaten bir ekibe baðlý. /ekip kodsil ile önce kodu temizle.");
				Ekip_Yarat(playerid, ekipid, ekiptur, partner);
				//aracekipkodu[aracid] = Create3DTextLabel(labelstring, RENK_BEYAZ, 0.0, 0.0, 0.0, 10.0, 0, 1); default sa-mp fonksiyon kullanýlmýþ bug yaratýr
				aracartikkodlu[aracid] = true;
			}
			else if(!strcmp(parametre, "sil", true))
			{
				new sayi = 0;
				foreach(new i: Ekipler)
				{
					if(EkipBilgi[i][ekipkullanimda] == true) sayi++;
				}
				if(!sayi) return hataMesaji(playerid, "Aktif ekip bulunmuyor, ekip silemezsin.");
				if(sscanf(ek, "d", ekipid)) return kullanimMesaji(playerid, "/ekip sil [ekip id] - ID'leri görmek için (/ekip liste) kullanýn.");
				if(EkipBilgi[ekipid][ekipkullanimda] == false) return hataMesaji(playerid, "Ekip bulunamadý.");
				EkipBilgi[ekipid][ekipkodu] = 0;
				format(EkipBilgi[ekipid][ekipuyesibir], MAX_PLAYER_NAME, "-");
				format(EkipBilgi[ekipid][ekipuyesiiki], MAX_PLAYER_NAME, "-");
				EkipBilgi[ekipid][ekipkullanimda] = false;
				Iter_Remove(Ekipler, ekipid);
				BirlikMesaji(oyuncuData[playerid][oBirlik], RENK_PDISBASI, "%s polis veritabanýndan bir ekip sildi.", OyuncuIsim(playerid));
			}
			else if(!strcmp(parametre, "kodsil", true))
			{
				new aracid = GetPlayerVehicleID(playerid);
				if(aracartikkodlu[aracid] == false) return hataMesaji(playerid, "Bu araç zaten bir ekibe baðlý deðil.");
				if(IsValidDynamic3DTextLabel(aracekipkodu[aracid])) DestroyDynamic3DTextLabel(aracekipkodu[aracid]);
				aracartikkodlu[aracid] = false;
				SunucuMesaji(playerid, "%d ID'li araçta bulunan ekip kodunu sildiniz.", aracid);
			}
			else if(!strcmp(parametre, "liste", true))
			{
				new sayi = 0;
				foreach(new i: Ekipler)
				{
					if(EkipBilgi[i][ekipkullanimda] == false) continue;
					if(strcmp(EkipBilgi[i][ekipuyesiiki], "-", false, 3))
					{
						SCM_Ex(playerid, RENK_PDISBASI, "Ekip ID: %d | Ekip Kodu: %s-%d | Ekip Üyeleri: %s - %s", i, ekipturu(EkipBilgi[i][ekipkodu]), i + 1, EkipBilgi[i][ekipuyesibir], EkipBilgi[i][ekipuyesiiki]);
						sayi++;
					}
					else
					{
						SCM_Ex(playerid, RENK_PDISBASI, "Ekip ID: %d | Ekip Kodu: %s-%d | Ekip Üyeleri: %s", i, ekipturu(EkipBilgi[i][ekipkodu]), i + 1, EkipBilgi[i][ekipuyesibir]);
						sayi++;
					}
				}
				if(!sayi) return hataMesaji(playerid, "Aktif ekip bulunamadý.");
			}
			else return hataMesaji(playerid, "Hatalý parametre girdin.");
		}
		else return hataMesaji(playerid, "Bu komuttan yalnýzca polis birliði üyeleri yararlanabilir.");


		return 1;
	}

	CMD:urunver(playerid, params[])
	{
		static oyuncuid, urun[64];
		new query[192];
		if(oyuncuData[playerid][oAdmin] < 9) return YetkinizYok(playerid);
		if(sscanf(params, "ds", oyuncuid, urun)) return kullanimMesaji(playerid, "/urunver [oyuncuid] [urun]"), SendClientMessage(playerid, RENK_KLASIK, "Ürünler:isimdegisimi,plakadegisimi,teldegisimi,bisiklethakki,dortyetenek,sekizyetenek,onbesyetenek,yeteneksifirlama");
		if(!strcmp(urun, "isimdegisimi", true))
		{
			oyuncuData[oyuncuid][oIsimDegisimHakki]++;
			HesapKaydet(oyuncuid);
			YoneticiMesaji(RENK_KLASIK, "<MARKET> {FFFFFF}%s %s, %s karakter isimli oyuncuya isim deðiþimi ürünü verdi.(Forum ID: %d)", adminlevelisim(playerid, oyuncuData[playerid][oAdmin]), oyuncuData[playerid][oAdminNick], OyuncuIsim(oyuncuid), oyuncuData[oyuncuid][oForumID]);
		}
		else if(!strcmp(urun, "plakadegisimi", true))
		{
			oyuncuData[oyuncuid][oPlakaDegisimHakki]++;
			HesapKaydet(oyuncuid);
			YoneticiMesaji(RENK_KLASIK, "<MARKET> {FFFFFF}%s %s, %s karakter isimli oyuncuya plaka deðiþimi ürünü verdi.(Forum ID: %d)", adminlevelisim(playerid, oyuncuData[playerid][oAdmin]), oyuncuData[playerid][oAdminNick], OyuncuIsim(oyuncuid), oyuncuData[oyuncuid][oForumID]);
		}
		else if(!strcmp(urun, "teldegisimi", true))
		{
			oyuncuData[oyuncuid][oTelefonDegisimHakki]++;
			HesapKaydet(oyuncuid);
			YoneticiMesaji(RENK_KLASIK, "<MARKET> {FFFFFF}%s %s, %s karakter isimli oyuncuya telefon deðiþim ürünü verdi.(Forum ID: %d)", adminlevelisim(playerid, oyuncuData[playerid][oAdmin]), oyuncuData[playerid][oAdminNick], OyuncuIsim(oyuncuid), oyuncuData[oyuncuid][oForumID]);
		}
		else if(!strcmp(urun, "bisiklethakki", true))
		{
			oyuncuData[oyuncuid][oBisikletHakki]++;
			HesapKaydet(oyuncuid);
			YoneticiMesaji(RENK_KLASIK, "<MARKET> {FFFFFF}%s %s, %s karakter isimli oyuncuya bisiklet hakký ürünü verdi.(Forum ID: %d)", adminlevelisim(playerid, oyuncuData[playerid][oAdmin]), oyuncuData[playerid][oAdminNick], OyuncuIsim(oyuncuid), oyuncuData[oyuncuid][oForumID]);
		}
		else if(!strcmp(urun, "besyetenek", true))
		{
			oyuncuData[oyuncuid][oBesYetenekPuani]++;
			HesapKaydet(oyuncuid);
			YoneticiMesaji(RENK_KLASIK, "<MARKET> {FFFFFF}%s %s, %s karakter isimli oyuncuya 4 y.puaný ürünü verdi.(Forum ID: %d)", adminlevelisim(playerid, oyuncuData[playerid][oAdmin]), oyuncuData[playerid][oAdminNick], OyuncuIsim(oyuncuid), oyuncuData[oyuncuid][oForumID]);
		}
		else if(!strcmp(urun, "onyetenek", true))
		{
			oyuncuData[oyuncuid][oOnYetenekPuani]++;
			HesapKaydet(oyuncuid);
			YoneticiMesaji(RENK_KLASIK, "<MARKET> {FFFFFF}%s %s, %s karakter isimli oyuncuya 8 y.puaný ürünü verdi.(Forum ID: %d)", adminlevelisim(playerid, oyuncuData[playerid][oAdmin]), oyuncuData[playerid][oAdminNick], OyuncuIsim(oyuncuid), oyuncuData[oyuncuid][oForumID]);
		}
		else if(!strcmp(urun, "onbesyetenek", true))
		{
			oyuncuData[oyuncuid][oOnBesYetenekPuani]++;
			HesapKaydet(oyuncuid);
			YoneticiMesaji(RENK_KLASIK, "<MARKET> {FFFFFF}%s %s, %s karakter isimli oyuncuya 15 y.puaný ürünü verdi.(Forum ID: %d)", adminlevelisim(playerid, oyuncuData[playerid][oAdmin]), oyuncuData[playerid][oAdminNick], OyuncuIsim(oyuncuid), oyuncuData[oyuncuid][oForumID]);
		}
		else if(!strcmp(urun, "yeteneksifirlama", true))
		{
			oyuncuData[oyuncuid][oYetenekSifirlamaHakki]++;
			HesapKaydet(oyuncuid);
			YoneticiMesaji(RENK_KLASIK, "<MARKET> {FFFFFF}%s %s, %s karakter isimli oyuncuya yetenek sýfýrlama ürünü verdi.(Forum ID: %d)", adminlevelisim(playerid, oyuncuData[playerid][oAdmin]), oyuncuData[playerid][oAdminNick], OyuncuIsim(oyuncuid), oyuncuData[oyuncuid][oForumID]);
		}
		else if(!strcmp(urun, "4xexp", true))
		{
			oyuncuData[oyuncuid][oDortXExp] = 1;
			mysql_format(g_SQL, query, sizeof(query), "UPDATE hesaplar SET DortXExp = 1 WHERE forumid = '%d'", oyuncuData[oyuncuid][oForumID]);
			mysql_query(g_SQL, query);
			YoneticiMesaji(RENK_KLASIK, "<MARKET> {FFFFFF}%s %s, %s karakter isimli oyuncuya 4x EXP ürünü verdi.(Forum ID: %d)", adminlevelisim(playerid, oyuncuData[playerid][oAdmin]), oyuncuData[playerid][oAdminNick], OyuncuIsim(oyuncuid), oyuncuData[oyuncuid][oForumID]);
		}
		else if(!strcmp(urun, "bankahesapno", true))
		{
			oyuncuData[oyuncuid][oBankaHesapDegisimHakki]++;
			HesapKaydet(oyuncuid);
			YoneticiMesaji(RENK_KLASIK, "<MARKET> {FFFFFF}%s %s, %s karakter isimli oyuncuya banka hesap deðiþim ürünü verdi.(Forum ID: %d)", adminlevelisim(playerid, oyuncuData[playerid][oAdmin]), oyuncuData[playerid][oAdminNick], OyuncuIsim(oyuncuid), oyuncuData[oyuncuid][oForumID]);
		}
		else return hataMesaji(playerid, "Hatalý parametre girdin, böyle bir ürün bulunmuyor.");
		return 1;
	}

	CMD:atezgahsil(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 2) return YetkinizYok(playerid);
		for(new b = 0; b != MAX_SEYYAR; b++)
		{
			if(IsPlayerInRangeOfPoint(playerid,3.5,SeyyarInfo[b][sX],SeyyarInfo[b][sY], SeyyarInfo[b][sZ])) {
				if(Iter_Contains(Seyyar, b)) {
					new query[256];
					mysql_format(g_SQL, query, sizeof(query), "DELETE FROM `seyyarlar` WHERE `id` = '%d'", b);
					mysql_query(g_SQL, query);

					if(IsValidDynamicObject(SeyyarInfo[b][sObje])) DestroyDynamicObject(SeyyarInfo[b][sObje]);
					if(IsValidDynamic3DTextLabel(SeyyarInfo[b][sLabel])) DestroyDynamic3DTextLabel(SeyyarInfo[b][sLabel]);
					SeyyarInfo[b][sX] = 0;
					SeyyarInfo[b][sY] = 0;
					SeyyarInfo[b][sZ] = 0;
					SeyyarInfo[b][sKasa] = 0;
					SeyyarInfo[b][sTur] = 0;
					Iter_Remove(Seyyar, b);
				}
			}
		}
		return 1;
	}

	CMD:acraftmasasil(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 2) return YetkinizYok(playerid);
		for(new b = 0; b != MAX_TEZGAH; b++)
		{
			if(IsPlayerInRangeOfPoint(playerid,3.5,TezgahInfo[b][tX],TezgahInfo[b][tY], TezgahInfo[b][tZ])) {
				if(Iter_Contains(Tezgah, b)) {
					new query[256];
					mysql_format(g_SQL, query, sizeof(query), "DELETE FROM `tezgahlar` WHERE `id` = '%d'", b);
					mysql_query(g_SQL, query);

					if(IsValidDynamicObject(TezgahInfo[b][tObje])) DestroyDynamicObject(TezgahInfo[b][tObje]);
					if(IsValidDynamic3DTextLabel(TezgahInfo[b][tLabel])) DestroyDynamic3DTextLabel(TezgahInfo[b][tLabel]);
					TezgahInfo[b][tX] = 0;
					TezgahInfo[b][tY] = 0;
					TezgahInfo[b][tZ] = 0;
					Iter_Remove(Tezgah, b);
				}
			}
		}
		return 1;
	}

	CMD:acraftmasagit(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 1) return YetkinizYok(playerid);
		if(oyuncuData[playerid][oHapisSure][0] > 0 || oyuncuData[playerid][oHapisSure][1] > 0) return hataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oDonduruldu] > 0) return hataMesaji(playerid, "Dondurulmuþken bu komutu kullanamazsýn.");

		static masaid;
		if(sscanf(params, "d", masaid)) return kullanimMesaji(playerid, "/acraftmasagit [masa id]");
		if(!Iter_Contains(Tezgah, masaid)) return hataMesaji(playerid, "Bu ID'e atanmýþ bir masa bulunmuyor.");
		SetPlayerPos(playerid, TezgahInfo[masaid][tX],TezgahInfo[masaid][tY],TezgahInfo[masaid][tZ] + 1.5);
		SetPlayerVirtualWorld(playerid, TezgahInfo[masaid][tVw]);
		SetPlayerInterior(playerid, TezgahInfo[masaid][tInt]);
		SunucuMesaji(playerid, "%d ID'li craft masasýna ýþýnlandýnýz.", masaid);
		return 1;
	}

	CMD:atnoktagit(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 1) return YetkinizYok(playerid);
		if(oyuncuData[playerid][oHapisSure][0] > 0 || oyuncuData[playerid][oHapisSure][1] > 0) return hataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oDonduruldu] > 0) return hataMesaji(playerid, "Dondurulmuþken bu komutu kullanamazsýn.");

		static masaid;
		if(sscanf(params, "d", masaid)) return kullanimMesaji(playerid, "/atnoktagit [teleport nokta id]");
		if(!Iter_Contains(Teleportlar, masaid)) return hataMesaji(playerid, "Bu ID'e atanmýþ bir nokta bulunmuyor.");
		SetPlayerPos(playerid, TeleportData[masaid][telX],TeleportData[masaid][telY],TeleportData[masaid][telZ] + 1);
		SetPlayerVirtualWorld(playerid, TeleportData[masaid][telVW]);
		SetPlayerInterior(playerid, TeleportData[masaid][telInt]);
		SunucuMesaji(playerid, "%d ID'li teleport noktasýna ýþýnlandýnýz.", masaid);
		return 1;
	}
	
/*	Dialog:googleauth(playerid, response, listitem, inputtext[])
	{
		if(!response) return KickEx(playerid);
		if(strlen(inputtext) < 1 || !IsNumeric(inputtext))
		{
		oyuncuData[playerid][oDogrulama] = GoogleAuthenticatorCode(oyuncuData[playerid][oGoogleKod], gettime());
		hataMesaji(playerid, "Doðrulama kodunu hatalý girdiniz veya süresi doldu, lütfen tekrar deneyin.");
		Dialog_Show(playerid, googleauth, DIALOG_STYLE_INPUT, "Çift Faktörlü Doðrulama", "{FFFFFF}Hesaplarýnýzýn güvenliði için çift aþamalý doðrulama sistemi kullanýlmaktadýr.\n{FFFFFF}Lütfen altý haneli {90C3D4}Google Authentication{FFFFFF} kodunuzu giriniz.", "Tamam", "Iptal");
		return 1;
		}
		if(oyuncuData[playerid][oDogrulama] == strval(inputtext))
		{
		KillTimer(oyuncuData[playerid][oKarakterSecimTimer]);
		SunucuMesaji(playerid, "Doðrulama baþarýlý, iyi oyunlar.");
		new query[90],oyuncuip[16];
        GetPlayerIp(playerid, oyuncuip, sizeof(oyuncuip));
		mysql_format(g_SQL, query, sizeof(query), "UPDATE `hesaplar` SET `GoogleIP` = '%e' WHERE `forumid` = '%d'", oyuncuip, oyuncuData[playerid][oForumID]);
		mysql_query(g_SQL, query);
		}
		else
		{
		oyuncuData[playerid][oDogrulama] = GoogleAuthenticatorCode(oyuncuData[playerid][oGoogleKod], gettime());
		hataMesaji(playerid, "Doðrulama kodunu hatalý girdiniz veya süresi doldu, lütfen tekrar deneyin.");
		Dialog_Show(playerid, googleauth, DIALOG_STYLE_INPUT, "Çift Faktörlü Doðrulama", "{FFFFFF}Hesaplarýnýzýn güvenliði için çift aþamalý doðrulama sistemi kullanýlmaktadýr.\n{FFFFFF}Lütfen altý haneli {90C3D4}Google Authentication{FFFFFF} kodunuzu giriniz.", "Tamam", "Iptal");
		}
		return 1;
	}
*/
	Dialog:tezgahsatinalonay(playerid, response, listitem, inputtext[])
	{
		if(response)
		{
			if(oyuncuData[playerid][oPara] < 5000) return hataMesaji(playerid, "Tezgah satýn almak için yeterli paran yok.");
			new query[256],Cache:GetInfo,tezgahkontrol;
			mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM oyuncular WHERE ID = '%d'", oyuncuData[playerid][oID]);
			GetInfo = mysql_query(g_SQL, query);
			cache_get_value_name_int(0, "TezgahSahibi", tezgahkontrol);
			cache_delete(GetInfo);
			if(tezgahkontrol == 1) return hataMesaji(playerid, "Zaten bir tezgah sahibisin.");
			mysql_format(g_SQL, query, sizeof(query), "UPDATE oyuncular SET TezgahSahibi = 1 WHERE ID = '%d'", oyuncuData[playerid][oID]);
			mysql_query(g_SQL, query);
			ParaEkle(playerid, -5000);
			SunucuMesaji(playerid, "Tezgah satýn aldýn. Artýk istediðin yerde '/tezgah kur' komutunu kullanabilirsin.");
		}
		return 1;
	}

	Dialog:tezgahkuronay(playerid, response, listitem, inputtext[])
	{
		if(response)
		{
			new seyyarid = listitem;
			new id = Iter_Free(Seyyar);
			if(id < 0) return hataMesaji(playerid, "Daha fazla tezgah kurulamaz.");
			new Float:pos[3],string[180];
			GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
			GetXYInFrontOfPlayer(playerid, pos[0], pos[1], 0.5);
			TezgahObjesi[playerid] = CreateDynamicObject(seyyarveri[seyyarid][0],pos[0],pos[1] + 3.5,pos[2],0.0,0.0,0.0,GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid), -1,50.0);
			format(string, sizeof(string), "{C24748}[TEZGAH]\nID: {FFFFFF}%d\n{C24748}Tür: {FFFFFF}%s\n{C24748}Sahip: {FFFFFF}%s\n'/satinal'", id, TezgahTuru(seyyarid), oyuncuData[playerid][oIsim]);
			SeyyarInfo[id][sLabel] = CreateDynamic3DTextLabel(string, 0x79BFA3FF, pos[0], pos[1], (pos[2] - 0.50), 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);
			SetPVarInt(playerid, "seyyarid", id);
			SetPVarInt(playerid, "seyyarduzenliyor", 1);
			EditDynamicObject(playerid, SeyyarInfo[id][sObje]);
			Iter_Add(Seyyar, id);
			SunucuMesaji(playerid, "Tezgahýnýzý kurdunuz, þimdi pozisyonunu düzenleyebilirsiniz.");
		}
		return 1;
	}

	/*CMD:tezgah(playerid, params[])
	{
		if(oyuncuData[playerid][oGiris] == false) return hataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
		if(KomutUygunlukKontrol(playerid) == 0) return UygunDegilMesaj(playerid);
		new idx[20];
		if(sscanf(params, "s[20]", idx))
		{
			SendClientMessage(playerid, RENK_GRI, "KULLANIM: /tezgah [Parametre]");
			SendClientMessage(playerid, RENK_ACIKYESIL, "Parametreler: [{FFFFFF}satinal{88aa62}], [{FFFFFF}duzenle{88aa62}], [{FFFFFF}sil{88aa62}], [{FFFFFF}kasa{88aa62}]");
		}
		else
		{
			if(strcmp(idx, "satinal", true) == 0)
			{
				if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Araç içerisinde bu iþlem gerçekleþemez.");
				if(GetPlayerVirtualWorld(playerid) != 0 || GetPlayerInterior(playerid) != 0) return hataMesaji(playerid, "Ýç mekanlara geçici olarak tezgah kurulamaz. Bahçeye/dýþarý kurmayý deneyin.");
				new
				subString[3000],
				item_name[24],
				baslik[80],
				itemobjesi;
				for (new i = 0; i < sizeof(seyyarveri); i++)
				{
					format (item_name, sizeof(item_name), "%s", seyyarveri[i][2]);
					itemobjesi = seyyarveri[i][0];
					format(subString, sizeof(subString), "%s%d\t%s\n", subString, itemobjesi, item_name);
				}
				ShowPlayerDialog(playerid, DIALOG_SEYYAR_SATINAL, DIALOG_STYLE_PREVMODEL, baslik, subString, "Sec", "Iptal");
				//Dialog_Show(playerid, tezgahsatinalonay, DIALOG_STYLE_MSGBOX, "Tezgah Satýn Al", "Tezgah satýn almak istediðine emin misin?\nBu iþlem için senden $5.000 para kesilecek.\nSatýn aldýktan sonra istediðinde tezgah kurabilirsin.", "Onayla", "Ýptal");
			}
			else if(strcmp(idx, "kur", true) == 0)
			{
				new subString[3000], item_name[24], itemobjesi;
				for (new i = 0; i < sizeof(seyyarveri); i++)
				{
					format (item_name, sizeof(item_name), "%s", seyyarveri[i][2]);
					itemobjesi = seyyarveri[i][0];
					format(subString, sizeof(subString), "%s%d\t%s\n", subString, itemobjesi, item_name);
				}
				Dialog_Show(playerid, tezgahkuronay, DIALOG_STYLE_PREVMODEL, "Tezgah Kur", subString, "Sec", "Iptal");
			}
			else if(strcmp(idx, "sil", true) == 0)
			{
				for(new b = 0; b != MAX_SEYYAR; b++) {
					if(IsPlayerInRangeOfPoint(playerid,3.5,SeyyarInfo[b][sX],SeyyarInfo[b][sY], SeyyarInfo[b][sZ])) {
						if(Iter_Contains(Seyyar, b)) {
							if(strcmp(SeyyarInfo[b][sSahip], oyuncuData[playerid][oIsim]) != 0) return hataMesaji(playerid, "Tezgahý silebilmek için tezgahýn sahibi olmalýsýnýz.");
							new query[256];
							mysql_format(g_SQL, query, sizeof(query), "DELETE FROM `seyyarlar` WHERE `id` = '%d'", b);
							mysql_query(g_SQL, query);

							if(IsValidDynamicObject(SeyyarInfo[b][sObje])) DestroyDynamicObject(SeyyarInfo[b][sObje]);
							if(IsValidDynamic3DTextLabel(SeyyarInfo[b][sLabel])) DestroyDynamic3DTextLabel(SeyyarInfo[b][sLabel]);
							SeyyarInfo[b][sX] = 0;
							SeyyarInfo[b][sY] = 0;
							SeyyarInfo[b][sZ] = 0;
							SeyyarInfo[b][sKasa] = 0;
							SeyyarInfo[b][sTur] = 0;
							Iter_Remove(Seyyar, b);
						}
					}
				}
			}
			else if(strcmp(idx, "kasa", true) == 0)
			{
				for(new b = 0; b != MAX_SEYYAR; b++) {
					if(IsPlayerInRangeOfPoint(playerid,3.5,SeyyarInfo[b][sX],SeyyarInfo[b][sY], SeyyarInfo[b][sZ])) {
						if(Iter_Contains(Seyyar, b)) {
							if(strcmp(SeyyarInfo[b][sSahip], oyuncuData[playerid][oIsim]) != 0) return hataMesaji(playerid, "Tezgahýn kasasýna eriþebilmek için tezgahýn sahibi olmalýsýnýz.");
							new icerik[200];
							format(icerik, sizeof(icerik), "{FFFFFF}Kasa {23BD00}[%d$]{FFFFFF}\nParayý Çek", SeyyarInfo[b][sKasa]);
							ShowPlayerDialog(playerid, DIALOG_SEYYAR_KASA, DIALOG_STYLE_LIST, "{F5E600}Tezgah Kasasý", icerik, "Seç", "Iptal");
							SetPVarInt(playerid, "seyyarid", b);
						}
					}
				}
			}

			else if(strcmp(idx, "duzenle", true) == 0)
			{
				for(new b = 0; b != MAX_SEYYAR; b++) {
					if(IsPlayerInRangeOfPoint(playerid,3.5,SeyyarInfo[b][sX],SeyyarInfo[b][sY], SeyyarInfo[b][sZ])) {
						if(Iter_Contains(Seyyar, b)) {
							if(strcmp(SeyyarInfo[b][sSahip], oyuncuData[playerid][oIsim]) != 0) return hataMesaji(playerid, "Tezgahý düzenliyebilmek için tezgahýn sahibi olmalýsýnýz.");
							SetPVarInt(playerid, "seyyarid", b);
							SetPVarInt(playerid, "seyyarduzenliyor", 1);
							EditDynamicObject(playerid, SeyyarInfo[b][sObje]);
							SunucuMesaji(playerid, "Tezgahýnýzý düzenlemeye baþladýnýz.");
						}
					}
				}
			}
		}
		return 1;
	} */

	CMD:romork(playerid, params[])
	{
		static id, type[24], string[128];
		if(sscanf(params, "ds[24]S()[128]", id, type, string))
		{
			kullanimMesaji(playerid, "/romork [romörk id] [isim]");
			SendClientMessage(playerid, RENK_SARI, "[PARAMETRELER]:{FFFFFF} getir, tak, cikar, sistemesat");
			return 1;
		}
		if(!IsValidVehicle(id) || Arac_IDBul(id) == -1) return hataMesaji(playerid, "Geçersiz araç.");
		id = Arac_IDBul(id);
		if(GetVehicleModel(id) == 610 || GetVehicleModel(id) == 611) {
		if(!Arac_SahipKontrol(playerid, id)) return hataMesaji(playerid, "Belirtilen römorkun sahibi siz deðilsiniz.");

		if(!strcmp(type, "getir", true))
		{
		    if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu komutu araç içerisinde kullanamazsýnýz.");
		    if(!IsPlayerInAnyDynamicArea(playerid)) return hataMesaji(playerid, "Bu komutu yanlýzca tarladayken kullanabilirsiniz.");
			GetPlayerPos(playerid, AracBilgi[id][aracPos][0], AracBilgi[id][aracPos][1], AracBilgi[id][aracPos][2]);

			new Float:araccani, aracsqlid = AracBilgi[id][aracID];
			GetVehicleHealth(AracBilgi[id][aracYarat], araccani);
			GetVehicleZAngle(AracBilgi[id][aracYarat], AracBilgi[id][aracPos][3]);
			SunucuMesaji(playerid, "%s model romorkunu park ettin.", AracModel(AracBilgi[id][aracModel]));
			Arac_Kaydet(id);

			new aracgg = AracBilgi[id][aracYarat];

			Iter_Remove(Araclar, aracgg);
			DestroyVehicle(aracgg);
			AracVeriSifirla(aracgg);

			static spawnid;
			spawnid = AracSpawnla(aracsqlid);
			if(spawnid >= 2000) return hataMesaji(playerid, "Sunucu max araç limitine ulaþýldýðý için araç spawnlanamadý?, daha sonra tekrar deneyin.");
		}
		else if(!strcmp(type, "tak", true))
		{
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return hataMesaji(playerid, "Herhangi bir aracýn sürücü koltuðunda deðilsiniz.");
		new aracid = Arac_IDBul(GetPlayerVehicleID(playerid));
		if(GetVehicleModel(aracid) == 531 || GetVehicleModel(aracid) == 485) {
  		if(!IsVehicleStreamedIn(id, playerid)) return hataMesaji(playerid, "Römorke yeterince yakýn deðilsiniz.");
  		AttachTrailerToVehicle(id, aracid);
  		SunucuMesaji(playerid, "Römork baþarýyla aracýnýza takýldý.");
  		}
  		else hataMesaji(playerid, "Römorkler sadece traktöre takýlabilir.");
		}
		else if(!strcmp(type, "sistemesat", true))
		{
		Arac_Sil(id);
		ParaEkle(playerid, 2500, YONTEM_ARAC_SISTEME_SAT);
		SunucuMesaji(playerid, "Römorku 2500 dolar karþýlýðýnda baþarýyla sattýn.");
		}
		else if(!strcmp(type, "cikar", true))
		{
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return hataMesaji(playerid, "Herhangi bir aracýn sürücü koltuðunda deðilsiniz.");
		new aracid = Arac_IDBul(GetPlayerVehicleID(playerid));
		if(GetVehicleTrailer(aracid) == 0) return hataMesaji(playerid, "Araca baðlanmýþ römork bulunmuyor.");
        DetachTrailerFromVehicle(GetVehicleTrailer(aracid));
        SunucuMesaji(playerid, "Römork baþarýyla araçtan çýkarýldý.");
		}
		else hataMesaji(playerid, "Geçersiz opsiyonel.");
		}
		else hataMesaji(playerid, "Belirtilen ID bir römork deðil.");
		return 1;
	}

	CMD:ciftlik(playerid, params[])
	{
		if(oyuncuData[playerid][oGiris] == false) return hataMesaji(playerid, "Giriþ yapmadan bu komutu kullanamazsýn.");
		if(KomutUygunlukKontrol(playerid) == 0) return UygunDegilMesaj(playerid);
		if(!IsPlayerInAnyDynamicArea(playerid) || oyuncuData[playerid][oCiftlik] == -1) return hataMesaji(playerid, "Bu komutu yanlýzca tarladayken kullanabilirsiniz.");
		new idx[20], cid = oyuncuData[playerid][oCiftlik];
		if(sscanf(params, "s[20]", idx))
		{
			SendClientMessage(playerid, RENK_GRI, "KULLANIM: /ciftlik [Parametre]");
			SendClientMessage(playerid, RENK_ACIKYESIL, "Parametreler: [{FFFFFF}ekim{88aa62}], [{FFFFFF}bicim{88aa62}], [{FFFFFF}ayar{88aa62}]");
  		}
  		else
  			{
			if(strcmp(idx, "ekim", true) == 0)
			{
				if(CiftlikInfo[cid][cSahipID] == oyuncuData[playerid][oID] || TarlaIsciKontrol(playerid, cid))
				{
				if(CiftlikInfo[cid][cUrun] > 0 || CiftlikInfo[cid][cOlgunlasma] > 0) return hataMesaji(playerid, "Çiftlikte biçilmemiþ ürün var veya henüz ürünler olgunlaþmamýþ.");
				if(!TarlaEkipmanKontrol(playerid, 0)) return hataMesaji(playerid, "Tarlada ekim yapabilmek için traktöre binip römorku baðlamýþ olmalýsýnýz.");
				new subString[270];
				format(subString, sizeof(subString), "Ürün\tTohum Fiyatý\n");
				for (new i = 1; i != sizeof(ekinlerveri); i++)
				{
				format(subString, sizeof(subString), "%s{FFFFFF}%s\t{008104}(%s)\n", subString, ekinlerveri[i][ekinisim], NumaraFormati(ekinlerveri[i][ekinfiyat] * floatround(floatdiv(CiftlikInfo[cid][cDonum], 5.0), floatround_ceil)));
				}
				DialogGoster(playerid, DIALOG_CIFTLIK_EKIM, DIALOG_STYLE_TABLIST_HEADERS, "Tarla Ekimi", subString, "Seç", "Iptal");
				}
				else hataMesaji(playerid, "Çiftlikte ekim sadece tarla sahibi tarafýndan yapýlabilir.");
			}
			else if(strcmp(idx, "ayar", true) == 0)
			{
				if(CiftlikInfo[cid][cSahipID] == oyuncuData[playerid][oID])
				{
				Dialog_Show(playerid, ciftlik_ayar, DIALOG_STYLE_LIST, "Çiftlik Ayarlarý", "Çiftlik Adý Düzenle\nÝþçileri Görüntüle\nÝþçi Al\nÇiftik Bilgileri\nÇiftliði Sat\nÇiftliði Kiþiye Sat", "Seç", "Iptal");
				}
				else hataMesaji(playerid, "Çiftliðin sahibi olmadýðýnýz için bu komutu kullanamazsýnýz.");
			}
			else if(strcmp(idx, "bicim", true) == 0)
			{
				if(CiftlikInfo[cid][cSahipID] == oyuncuData[playerid][oID] || TarlaIsciKontrol(playerid, cid))
				{
				if(CiftlikInfo[cid][cUrun] == 0) return hataMesaji(playerid, "Çiftliðe herhangi bir ürün ekilmemiþ.");
				if(CiftlikInfo[cid][cIslem]) return hataMesaji(playerid, "Tarla zaten birisi tarafýndan ekilip & biçiliyor.");
				if(CiftlikInfo[cid][cOlgunlasma] > 0) return hataMesaji(playerid, "Çiftlikteki ürünler henüz olgunlaþmamýþ.");
				if(!TarlaEkipmanKontrol(playerid, 1)) return hataMesaji(playerid, "Tarlayý biçebilmek için biçerdöverde olmalýsýnýz.");
				bicimprog[playerid] = CreatePlayerProgressBar(playerid,228.00, 28.00, 201.50, 7.19, -8582401, 100.0);
				ShowPlayerProgressBar(playerid, bicimprog[playerid]);
				SetPlayerProgressBarMaxValue(playerid, bicimprog[playerid], EkinSayisiBul(cid));
				TextDrawShowForPlayer(playerid, ciftlik_0);
				TextDrawShowForPlayer(playerid, ciftlik_1);
				CiftlikInfo[cid][cIslem] = true;
				SetPVarInt(playerid, "oncekiciftlik", cid);
				SetPVarInt(playerid, "CiftlikBicimIslem", 1);
				SetPVarInt(playerid, "CiftlikEkinler", EkinSayisiBul(cid));
				UyariMesaji(playerid, "%s bitkisini biçmeye baþladýnýz, tarlanýn toplam dönümü: %.2f", ekinlerveri[CiftlikInfo[cid][cUrun]][ekinisim], CiftlikInfo[cid][cDonum]);
				SunucuMesaji(playerid, "Lütfen ürünleri biçmek için bitkinin üzerine gidip '2' tuþuna basýn.");
				}
				else hataMesaji(playerid, "Çiftlikte biçim sadece tarla sahibi tarafýndan yapýlabilir.");
			}
 	}
		return 1;
	}

	CMD:ekin(playerid, params[])
	{
		if(oyuncuData[playerid][oGiris] == false) return hataMesaji(playerid, "Giriþ yapmadan bu komutu kullanamazsýn.");
		if(KomutUygunlukKontrol(playerid) == 0) return UygunDegilMesaj(playerid);
		new idx[20], cid = oyuncuData[playerid][oCiftlik], msg[95];
		if(sscanf(params, "s[20]", idx))
		{
			kullanimMesaji(playerid, "/ekin [parametre]");
			SendClientMessage(playerid, RENK_ACIKYESIL, "Parametreler: [{FFFFFF}al{88aa62}], [{FFFFFF}koy{88aa62}], [{FFFFFF}cikar{88aa62}]");
			SendClientMessage(playerid, RENK_ACIKYESIL, "Parametreler: [{FFFFFF}sat{88aa62}], [{FFFFFF}gps{88aa62}], [{FFFFFF}yoket{88aa62}]");
  		}
  		else
  				{
			if(strcmp(idx, "al", true) == 0)
			{
				if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Araç içerisinde bu iþlem gerçekleþemez.");
				if(!IsPlayerInAnyDynamicArea(playerid) || oyuncuData[playerid][oCiftlik] == -1) return hataMesaji(playerid, "Bu komutu yanlýzca tarladayken kullanabilirsiniz.");
				if(CiftlikInfo[cid][cSahipID] == oyuncuData[playerid][oID] || TarlaIsciKontrol(playerid, cid))
				{
				if(IsPlayerAttachedObjectSlotUsed(playerid, 6)) return hataMesaji(playerid, "Eliniz doluyken yerdeki ekini alamazsýnýz.");
				new query[110], Cache:VeriCek, rows;
				mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `tarimurunleri` WHERE `ciftlikid` = '%d'", oyuncuData[playerid][oCiftlik]);
				VeriCek = mysql_query(g_SQL, query);
				rows = cache_num_rows();
				if(rows)
				{
					for (new i = 0; i < rows; i ++)
				{
					if(GetPlayerDistanceFromPoint(playerid, vericek_float(i, "x"), vericek_float(i, "y"), vericek_float(i, "z")) < 2.1)
					{
					new oid = vericek_int(i, "objeid"), urun = vericek_int(i, "urun");
					cache_delete(VeriCek);
					DestroyDynamicObject(oid);
					oyuncuData[playerid][oEkin] = urun;
					ApplyAnimation(playerid, "CARRY", "liftup05", 4.1, 0, 1, 1, 0, 0, 1);
					SetPlayerAttachedObject(playerid, 6, 2901, 6, 0.116999, 0.076999, -0.251000, -3.499999, 76.900024, -20.800006);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
					format(msg, sizeof(msg), "** %s eðilir ve %s adlý ekini yerden alýr.", OyuncuIsim(playerid), ekinlerveri[urun][ekinisim]);
					SetPlayerChatBubble(playerid, msg, RENK_PEMBE, 12.0, 10000);
					SendClientMessage(playerid, RENK_PEMBE, msg);
					strins(msg, "> ", 3);
					mysql_format(g_SQL, query, sizeof(query), "DELETE FROM `tarimurunleri` WHERE `objeid` = '%d'", oid);
					mysql_query(g_SQL, query);
					break;
					}
				}	
				}
				}
				else hataMesaji(playerid, "Bu iþlem yanlýzca tarla sahibi tarafýndan yapýlabilir.");
			}
				else if(strcmp(idx, "gps", true) == 0)
		{
			Dialog_Show(playerid, DIALOG_EKIN_GPS, DIALOG_STYLE_LIST, "Ekin Satýþ Noktalarý", "{C9C936}Linton Mills\n{C9C936}Whitney Grain\n{C9C936}Greenwich Mill\n{C9C936}Carmell Corn\n{C9C936}Solarin Industries", "Ýþaretle", "Iptal");
		}
			else if(strcmp(idx, "yoket", true) == 0)
		{
			if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Araç içerisinde bu iþlem gerçekleþemez.");
			if(oyuncuData[playerid][oEkin] == 0 || !IsPlayerAttachedObjectSlotUsed(playerid, 6)) return hataMesaji(playerid, "Elinizde herhangi bir ekin bulunmuyor.");
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			oyuncuData[playerid][oEkin] = 0;
			RemovePlayerAttachedObject(playerid, 6);
			ClearAnimations(playerid);
			SunucuMesaji(playerid, "Elinizdeki ekini baþarýyla yok ettiniz.");
		}
		else if(strcmp(idx, "sat", true) == 0)
		{
			if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Araç içerisinde bu iþlem gerçekleþemez.");
			if(oyuncuData[playerid][oEkin] == 0 || !IsPlayerAttachedObjectSlotUsed(playerid, 6)) return hataMesaji(playerid, "Elinizde herhangi bir ekin bulunmuyor.");

			new ekinfiyatdusur = 10;
			
			for(new i = 0; i < sizeof(piyasaveri) ; i++)
			{
			if(IsPlayerInRangeOfPoint(playerid, 2.0, piyasaveri[i][piyasax], piyasaveri[i][piyasay], piyasaveri[i][piyasaz]))
			{
				switch(oyuncuData[playerid][oEkin])
				{
					case 1: {
						SunucuMesaji(playerid, "%s adlý ekininizi %s fiyatýna sattýnýz.", ekinlerveri[1][ekinisim], NumaraFormati(piyasaveri[i][urun1]));
						ParaEkle(playerid, piyasaveri[i][urun1]-ekinfiyatdusur);
						ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 1, 1, 0, 0, 1);
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
						oyuncuData[playerid][oEkin] = 0;
						RemovePlayerAttachedObject(playerid, 6);
					}
					case 2: {
						SunucuMesaji(playerid, "%s adlý ekininizi %s fiyatýna sattýnýz.", ekinlerveri[2][ekinisim], NumaraFormati(piyasaveri[i][urun2]));
						ParaEkle(playerid, piyasaveri[i][urun2]-ekinfiyatdusur);
						ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 1, 1, 0, 0, 1);
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
						oyuncuData[playerid][oEkin] = 0;
						RemovePlayerAttachedObject(playerid, 6);
					}
					case 3: {
						SunucuMesaji(playerid, "%s adlý ekininizi %s fiyatýna sattýnýz.", ekinlerveri[3][ekinisim], NumaraFormati(piyasaveri[i][urun3]));
						ParaEkle(playerid, piyasaveri[i][urun3]-ekinfiyatdusur);
						ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 1, 1, 0, 0, 1);
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
						oyuncuData[playerid][oEkin] = 0;
						RemovePlayerAttachedObject(playerid, 6);
					}
					case 4: {
						SunucuMesaji(playerid, "%s adlý ekininizi %s fiyatýna sattýnýz.", ekinlerveri[4][ekinisim], NumaraFormati(piyasaveri[i][urun4]));
						ParaEkle(playerid, piyasaveri[i][urun4]-ekinfiyatdusur);
						ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 1, 1, 0, 0, 1);
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
						oyuncuData[playerid][oEkin] = 0;
						RemovePlayerAttachedObject(playerid, 6);
					}
					case 5: {
						SunucuMesaji(playerid, "%s adlý ekininizi %s fiyatýna sattýnýz.", ekinlerveri[5][ekinisim], NumaraFormati(piyasaveri[i][urun5]));
						ParaEkle(playerid, piyasaveri[i][urun5]-ekinfiyatdusur);
						ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 1, 1, 0, 0, 1);
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
						oyuncuData[playerid][oEkin] = 0;
						RemovePlayerAttachedObject(playerid, 6);
					}
					case 6: {
						SunucuMesaji(playerid, "%s adlý ekininizi %s fiyatýna sattýnýz.", ekinlerveri[6][ekinisim], NumaraFormati(piyasaveri[i][urun6]));
						ParaEkle(playerid, piyasaveri[i][urun6]-ekinfiyatdusur);
						ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 1, 1, 0, 0, 1);
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
						oyuncuData[playerid][oEkin] = 0;
						RemovePlayerAttachedObject(playerid, 6);
					}
					case 7: {
						SunucuMesaji(playerid, "%s adlý ekininizi %s fiyatýna sattýnýz.", ekinlerveri[7][ekinisim], NumaraFormati(piyasaveri[i][urun7]));
						ParaEkle(playerid, piyasaveri[i][urun7]-ekinfiyatdusur);
						ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 1, 1, 0, 0, 1);
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
						oyuncuData[playerid][oEkin] = 0;
						RemovePlayerAttachedObject(playerid, 6);
					}
				}
			}
			}

		}
				else if(strcmp(idx, "cikar", true) == 0)
		{
			if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Araç içerisinde bu iþlem gerçekleþemez.");
			if(oyuncuData[playerid][oEkin] != 0) return hataMesaji(playerid, "Araçtan ekin çýkarabilmek için önce elinizdekini býrakmalýnýz.");
			new id = -1,
			putID = -1,
			model;

			if((id = Arac_Yakin(playerid)) != -1)
				{
					model = GetVehicleModel(id);
					if(model == 482 || model == 498 || model == 499) {
						if(putID == -1)
						{
							putID = id;
						}
					}
				}

			if(putID != -1)
			{
					if(!Arac_SahipKontrol(playerid, putID) && !ItemAnahtarKontrol(playerid, AracBilgi[putID][aracID])) return hataMesaji(playerid, "Bu aracýn anahtarýna sahip deðilsiniz.");
					if(AracBilgi[putID][aracKilit]) return hataMesaji(playerid, "Bu araç kilitli olduðu için ekin çýkaramazsýnýz.");
					new query[96];
					mysql_format(g_SQL, query, sizeof(query), "SELECT `ekintur` FROM `aracekinler` WHERE `aracid` = '%d'", AracBilgi[putID][aracID]);
					mysql_tquery(g_SQL, query, "AracEkinGoster", "dd", playerid, putID);
					putID = -1;
			}
		}	
				else if(strcmp(idx, "koy", true) == 0)
		{
				if(oyuncuData[playerid][oEkin] == 0) return hataMesaji(playerid, "Elinizde ekin bulunmuyor.");
				if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Araç içerisinde bu iþlem gerçekleþemez.");
				new kapasite,
				model,
				id = -1,
				putID = -1;

				if((id = Arac_Yakin(playerid)) != -1)
				{
					model = GetVehicleModel(id);
					if(model == 482 || model == 498 || model == 499) {
						if(putID == -1)
						{
							putID = id;
						}
					}
				}


				if(putID != -1)
				{
					for(new i = 0; i < sizeof(faracveri) ; i++)
					{
						if(GetVehicleModel(putID) == faracveri[i][0]) kapasite = faracveri[i][2];
					}

					if(EkinKapasiteKontrol(AracBilgi[putID][aracID]) == kapasite) return hataMesaji(playerid, "Bu araca %d ekinden fazla koyamazsýnýz.", kapasite);
					new me[90],query[95];
					format(me, sizeof(me), "** %s aracýn içerisine elindeki ekini yerleþtirir.", OyuncuIsim(playerid));
					SetPlayerChatBubble(playerid, me, RENK_PEMBE, 12.0, 10000);
					strins(me, "> ", 3);
					SendClientMessage(playerid, RENK_PEMBE, me);
					ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 1, 1, 0, 0, 1);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
					mysql_format(g_SQL, query, sizeof(query), "INSERT INTO `aracekinler` (`aracid`, `ekintur`) VALUES('%d', '%d')", AracBilgi[putID][aracID], oyuncuData[playerid][oEkin]);
					mysql_query(g_SQL, query);
					oyuncuData[playerid][oEkin] = 0;
					RemovePlayerAttachedObject(playerid, 6);
					putID = -1;
				}

		}
 	}
		return 1;
	}

	CMD:aciftliksure(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 5) return YetkinizYok(playerid);
		if(!IsPlayerInAnyDynamicArea(playerid) || oyuncuData[playerid][oCiftlik] == -1) return hataMesaji(playerid, "Bu komutu yanlýzca tarladayken kullanabilirsiniz.");
		CiftlikInfo[oyuncuData[playerid][oCiftlik]][cOlgunlasma] = 0;
		SunucuMesaji(playerid, "Çiftlikteki ürünleri olgunlaþtýrdýnýz.");
		Ciftlik_Kaydet(oyuncuData[playerid][oCiftlik]);
		return 1;
	}

	CMD:aciftliksifirla(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 5) return YetkinizYok(playerid);
		if(!IsPlayerInAnyDynamicArea(playerid) || oyuncuData[playerid][oCiftlik] == -1) return hataMesaji(playerid, "Bu komutu yanlýzca tarladayken kullanabilirsiniz.");
		CiftlikInfo[oyuncuData[playerid][oCiftlik]][cOlgunlasma] = 0;
		CiftlikInfo[oyuncuData[playerid][oCiftlik]][cUrun] = 0;
		CiftlikInfo[oyuncuData[playerid][oCiftlik]][cIslem] = false;
		SunucuMesaji(playerid, "Çiftlikteki ürün ve süre bilgisini sýfýrladýnýz.");
		Ciftlik_Kaydet(oyuncuData[playerid][oCiftlik]);
		return 1;
	}	

	CMD:aciftlikfiyatlandir(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 5) return YetkinizYok(playerid);
		if(!IsPlayerInAnyDynamicArea(playerid) || oyuncuData[playerid][oCiftlik] == -1) return hataMesaji(playerid, "Bu komutu yanlýzca tarladayken kullanabilirsiniz.");
		new cid = oyuncuData[playerid][oCiftlik];
		CiftlikInfo[cid][cPara] = ARSA_ALGORITMA * floatround(floatdiv(CiftlikInfo[cid][cDonum], 5.0), floatround_ceil);
		SunucuMesaji(playerid, "Çiftlik dönümüne göre yeniden fiyatlandýrýldý, yeni fiyat: %d$", CiftlikInfo[cid][cPara]);
		Ciftlik_Kaydet(cid);
		return 1;
	}

	CMD:aciftlikfiyatduzenle(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 7) return YetkinizYok(playerid);
		if(!IsPlayerInAnyDynamicArea(playerid) || oyuncuData[playerid][oCiftlik] == -1) return hataMesaji(playerid, "Bu komutu yanlýzca tarladayken kullanabilirsiniz.");
		new yenifiyat;
		if(sscanf(params, "d", yenifiyat)) return kullanimMesaji(playerid, "/aciftlikfiyatduzenle [fiyat]");
		if(yenifiyat < 0) return hataMesaji(playerid, "Hatalý fiyat.");
		new cid = oyuncuData[playerid][oCiftlik];
		CiftlikInfo[cid][cPara] = yenifiyat;
		SunucuMesaji(playerid, "Çiftlik yeniden fiyatlandýrýldý. Yeni fiyatý: %s", NumaraFormati(CiftlikInfo[cid][cPara]));
		Ciftlik_Kaydet(cid);
		return 1;
	}		

	CMD:ciftliklerifiyatlandir(playerid, params[])
	{
	if(oyuncuData[playerid][oAdmin] < 7) return YetkinizYok(playerid);
	for( new i = 0; i < MAX_CIFTLIK; i ++ ) if(CiftlikInfo[i][cAktif]) {
	CiftlikInfo[i][cPara] = ARSA_ALGORITMA * floatround(floatdiv(CiftlikInfo[i][cDonum], 5.0), floatround_ceil);
	Ciftlik_Kaydet(i);
	}	
	SunucuMesaji(playerid, "Tüm çiftlikler otomatik olarak dönümüne göre yeniden fiyatlandýrýldý.");
	return 1;
	}	

	CMD:aciftlikgit(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 1) return YetkinizYok(playerid);
		if(oyuncuData[playerid][oHapisSure][0] > 0 || oyuncuData[playerid][oHapisSure][1] > 0) return hataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oDonduruldu] > 0) return hataMesaji(playerid, "Dondurulmuþken bu komutu kullanamazsýn.");

		static cid;
		if(sscanf(params, "d", cid)) return kullanimMesaji(playerid, "/aciftlikgit [tarla id]");
		if(cid < 0 || cid > MAX_CIFTLIK) return hataMesaji(playerid, "Hatalý çiftlik ID girdiniz.");
		if(!CiftlikInfo[cid][cAktif]) return hataMesaji(playerid, "Hatalý çiftlik ID girdiniz.");
		new Float:x,Float:y,Float:z;
		ArsaninOrtasiniBul(x, y, CiftlikInfo[cid][cminX], CiftlikInfo[cid][cminY], CiftlikInfo[cid][cmaxX], CiftlikInfo[cid][cmaxY]);
		MapAndreas_FindZ_For2DCoord(x,y,z);
		SetPlayerPos(playerid, x, y, z + 1);
		SunucuMesaji(playerid, "%d ID'li çiftliðe ýþýnlandýnýz.", cid);
		return 1;
	}

		CMD:aciftlikbilgileri(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 5) return YetkinizYok(playerid);
		if(!IsPlayerInAnyDynamicArea(playerid) || oyuncuData[playerid][oCiftlik] == -1) return hataMesaji(playerid, "Bu komutu yanlýzca tarladayken kullanabilirsiniz.");
		new cid = oyuncuData[playerid][oCiftlik];
		new string[450];
		format(string, sizeof(string), "Iþlevler\t#\nÇiftlik ID:\t{C9C936}%d\nÇiftlik Adý:\t{C9C936}%s\nÇiftlik Ücreti:\t{C9C936}%s\nEkili Ürün:\t{C9C936}%s\nKalan saat:\t{C9C936}%d",cid, CiftlikInfo[cid][cIsim],NumaraFormati(CiftlikInfo[cid][cPara]),ekinlerveri[CiftlikInfo[cid][cUrun]][ekinisim],CiftlikInfo[cid][cOlgunlasma]);	
		ShowPlayerDialog(playerid, BOS_MESAJ, DIALOG_STYLE_TABLIST_HEADERS, "Çiftlik Bilgileri", string, "Tamam", "Iptal");
		return 1;
	}	


	
	CMD:aciftlik(playerid, params[])
	{
		if(oyuncuData[playerid][oGiris] == false) return hataMesaji(playerid, "Giriþ yapmadan bu komutu kullanamazsýn.");
		if(KomutUygunlukKontrol(playerid) == 0) return UygunDegilMesaj(playerid);
		if(oyuncuData[playerid][oAdmin] < 5) return YetkinizYok(playerid);
		new idx[20];
		if(sscanf(params, "s[20]", idx))
		{
			SendClientMessage(playerid, RENK_GRI, "KULLANIM: /aciftlik [Parametre]");
			SendClientMessage(playerid, RENK_ACIKYESIL, "Parametreler: [{FFFFFF}ilkpos{88aa62}], [{FFFFFF}ikincipos{88aa62}], [{FFFFFF}yarat{88aa62}], [{FFFFFF}sil{88aa62}]");
  		}
  		else
  			{
			if(strcmp(idx, "ilkpos", true) == 0)
			{
				if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu komut araç içerisinde kullanýlamaz.");
				new Float:X,Float:Y,Float:Z;
				GetPlayerPos(playerid, X,Y,Z);
				SetPVarFloat(playerid, "ciftlikminX", X);
				SetPVarFloat(playerid, "ciftlikminY", Y);
				SetPVarInt(playerid, "ctelportayarladi", 1);
				SunucuMesaji(playerid, "Ýlk posun verilerini aldýnýz, þimdi ikinci posa giderek '/aciftlik ikincipos' yazýn.");
			}
			else if(strcmp(idx, "ikincipos", true) == 0)
			{
				if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu komut araç içerisinde kullanýlamaz.");
				new Float:X,Float:Y,Float:Z;
				GetPlayerPos(playerid, X,Y,Z);
				SetPVarFloat(playerid, "ciftlikmaxX", X);
				SetPVarFloat(playerid, "ciftlikmaxY", Y);
				SetPVarInt(playerid, "ctelportdestayarladi", 1);
				SunucuMesaji(playerid, "Ýkinci posun verilerini aldýnýz, þimdi '/aciftlik yarat' yazarak arsayý yaratabilirsiniz.");
			}
			else if(strcmp(idx, "yarat", true) == 0)
			{
				if(GetPVarInt(playerid, "ctelportayarladi") != 1 || GetPVarInt(playerid, "ctelportdestayarladi") != 1) return hataMesaji(playerid, "Verilerde eksiklik var; lütfen ilk pos ve ikinci posu ayarlayýn.");
				Dialog_Show(playerid, arsa_yarat, DIALOG_STYLE_INPUT, "Arsa Yaratma", "Lütfen arsanýn ücret çarpanýný girin(çarpan x dönüm)\nÇarpaný 6666 girmeniz önerilir:", "Yarat", "Iptal");
			}
			/*else if(strcmp(idx, "sil", true) == 0)
			{
			}*/
 	}
		return 1;
	}

		CMD:abolge(playerid, params[])
	{
		if(oyuncuData[playerid][oGiris] == false) return hataMesaji(playerid, "Giriþ yapmadan bu komutu kullanamazsýn.");
		if(KomutUygunlukKontrol(playerid) == 0) return UygunDegilMesaj(playerid);
		if(oyuncuData[playerid][oAdmin] < 5) return YetkinizYok(playerid);
		new idx[20];
		if(sscanf(params, "s[20]", idx))
		{
			SendClientMessage(playerid, RENK_GRI, "KULLANIM: /abolge [Parametre]");
			SendClientMessage(playerid, RENK_ACIKYESIL, "Parametreler: [{FFFFFF}ilkpos{88aa62}], [{FFFFFF}ikincipos{88aa62}], [{FFFFFF}renk{88aa62}],  [{FFFFFF}yarat{88aa62}], [{FFFFFF}sil{88aa62}]");
  		}
  		else
  			{
			if(strcmp(idx, "ilkpos", true) == 0)
			{
				if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu komut araç içerisinde kullanýlamaz.");
				new Float:X,Float:Y,Float:Z;
				GetPlayerPos(playerid, X,Y,Z);
				SetPVarFloat(playerid, "bolgeminX", X);
				SetPVarFloat(playerid, "bolgeminY", Y);
				SetPVarInt(playerid, "cbolgeayarladi", 1);
				SunucuMesaji(playerid, "Ýlk posun verilerini aldýnýz, þimdi ikinci posa giderek '/abolge ikincipos' yazýn.");
			}
			else if(strcmp(idx, "ikincipos", true) == 0)
			{
				if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu komut araç içerisinde kullanýlamaz.");
				new Float:X,Float:Y,Float:Z;
				GetPlayerPos(playerid, X,Y,Z);
				SetPVarFloat(playerid, "bolgemaxX", X);
				SetPVarFloat(playerid, "bolgemaxY", Y);
				SetPVarInt(playerid, "cbolgedestayarladi", 1);
				SunucuMesaji(playerid, "Ýkinci posun verilerini aldýnýz, þimdi '/abolge renk' yazarak rengi belirleyin.");
			}
			else if(strcmp(idx, "renk", true) == 0)
			{
				if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu komut araç içerisinde kullanýlamaz.");
				Dialog_Show(playerid, bolge_renk, DIALOG_STYLE_INPUT, "Bölge Renkleri", "Lütfen bölgenin rengi için bir HEX kodu girin: (Örnek: 0x00810488)", "Tamam", "Iptal");
			}
			else if(strcmp(idx, "yarat", true) == 0)
			{
				if(GetPVarInt(playerid, "cbolgeayarladi") != 1 || GetPVarInt(playerid, "bolgerenkayarlandi") != 1  || GetPVarInt(playerid, "cbolgedestayarladi") != 1) return hataMesaji(playerid, "Verilerde eksiklik var; lütfen ilk pos, renk ve ikinci posu ayarlayýn.");
				Dialog_Show(playerid, bolge_yarat, DIALOG_STYLE_INPUT, "Bölge Yaratma", "Lütfen bölgeyi baðlamak istediðiniz birliðin ID'sini girin:", "Yarat", "Iptal");
			}
			else if(strcmp(idx, "sil", true) == 0)
			{
			if(!IsPlayerInAnyDynamicArea(playerid) || oyuncuData[playerid][oBolge] == -1) return hataMesaji(playerid, "Herhangi bir bölgenin içerisinde deðilsiniz.");
			new ix = oyuncuData[playerid][oBolge];
			BolgeInfo[ix][bID] = -1;
			DestroyDynamicArea(BolgeInfo[ix][bBolge]);
			BolgeInfo[ix][bminX] = 0.0;
			BolgeInfo[ix][bminY] = 0.0;
			BolgeInfo[ix][bmaxX] = 0.0;
			BolgeInfo[ix][bmaxY] = 0.0;
			BolgeInfo[ix][bBirlik] = -1;
			BolgeInfo[ix][bRenk] = -1;
			BolgeInfo[ix][bAktif] = 0;
			GangZoneHideForAll(BolgeInfo[ix][bZone]);
			GangZoneDestroy(BolgeInfo[ix][bZone]);
			new query[100];
			mysql_format(g_SQL, query, sizeof(query), "DELETE FROM `bolgeler` WHERE `id` = '%d'", ix);
			mysql_query(g_SQL, query);
			oyuncuData[playerid][oBolge] = -1;
			SunucuMesaji(playerid, "Baþarýyla %d ID'li bölgeyi sildiniz.", ix);
			}
 	}
		return 1;
	}

	CMD:uyustopla(playerid, params[])
	{
		if(oyuncuData[playerid][oGiris] == false) return hataMesaji(playerid, "Giriþ yapmadan bu komutu kullanamazsýn.");
		if(KomutUygunlukKontrol(playerid) == 0) return UygunDegilMesaj(playerid);
		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu komut araç içerisinde kullanýlamaz.");
		new idx[20];
		if(sscanf(params, "s[20]", idx))
		{
			SendClientMessage(playerid, RENK_GRI, "KULLANIM: /uyustopla [marijuana/kokobitki]");
  		}
  		else
  		{
			if(strcmp(idx, "marijuana", true) == 0)
			{
			for(new weed = 0; weed < sizeof(WeedInfo); weed++)
    	    {
                if(IsPlayerInRangeOfPoint(playerid,2.0,WeedInfo[weed][weedX],WeedInfo[weed][weedY],WeedInfo[weed][weedZ]))
                {
					if(GetPlayerVirtualWorld(playerid) == WeedInfo[weed][weedWorld])
					{
				        if(WeedInfo[weed][weedPlanted] == 1  && WeedInfo[weed][weedType] == 0 && WeedInfo[weed][weedX] != 0.0 && WeedInfo[weed][weedY] != 0.0 && WeedInfo[weed][weedZ] != 0.0)
				        {
				            if (WeedInfo[weed][weedTime] > 0)
				            {
				                SunucuMesaji(playerid, "Uyuþturucu henüz olgunlaþmamýþ. Kalan Süre: %d dakika.", WeedInfo[weed][weedTime]);
						        return 1;
						    }
                            ApplyAnimation(playerid, "BOMBER","BOM_Plant_In",4.0,0,0,0,0,0);
		                    if(WeedInfo[weed][weedObject] > 0) DestroyDynamicObject(WeedInfo[weed][weedObject]);
		                    WeedInfo[weed][weedObject]=0;
		                    WeedInfo[weed][weedX] = 0.0;
		    		        WeedInfo[weed][weedY] = 0.0;
		    		        WeedInfo[weed][weedZ] = 0.0;
		    		        WeedInfo[weed][weedPlanted] = 0;
							ItemEkle(playerid, 34, 5);
		    		        SunucuMesaji(playerid, "'Marijuana(5 gr)' isimli uyuþturucuyu baþarýyla topladýnýz.");
		    		        return 1;
				        }
				    }
				}
			}	
			} 
			else if(strcmp(idx, "kokobitki", true) == 0)
			{
			for(new weed = 0; weed < sizeof(WeedInfo); weed++)
    	    {
                if(IsPlayerInRangeOfPoint(playerid,2.0,WeedInfo[weed][weedX],WeedInfo[weed][weedY],WeedInfo[weed][weedZ]))
                {
					if(GetPlayerVirtualWorld(playerid) == WeedInfo[weed][weedWorld])
					{
				        if(WeedInfo[weed][weedPlanted] == 1 && WeedInfo[weed][weedType] == 1 && WeedInfo[weed][weedX] != 0.0 && WeedInfo[weed][weedY] != 0.0 && WeedInfo[weed][weedZ] != 0.0)
				        {
				            if (WeedInfo[weed][weedTime] > 0)
				            {
				                SunucuMesaji(playerid, "Uyuþturucu henüz olgunlaþmamýþ. Kalan Süre: %d dakika.", WeedInfo[weed][weedTime]);
						        return 1;
						    }
                            ApplyAnimation(playerid, "BOMBER","BOM_Plant_In",4.0,0,0,0,0,0);
		                    if(WeedInfo[weed][weedObject] > 0) DestroyDynamicObject(WeedInfo[weed][weedObject]);
		                    WeedInfo[weed][weedObject]=0;
		                    WeedInfo[weed][weedX] = 0.0;
		    		        WeedInfo[weed][weedY] = 0.0;
		    		        WeedInfo[weed][weedZ] = 0.0;
		    		        WeedInfo[weed][weedPlanted] = 0;
							ItemEkle(playerid, 116, 10);
		    		        SunucuMesaji(playerid, "'Koko Bitkisi(10 gr)' isimli bitkiyi baþarýyla topladýnýz.");
		    		        return 1;
				        }
				    }
				}
			}	
			} 
 		}
		return 1;
	}

	CMD:tnokta(playerid, params[])
	{
		if(oyuncuData[playerid][oGiris] == false) return hataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
		if(KomutUygunlukKontrol(playerid) == 0) return UygunDegilMesaj(playerid);
		if(oyuncuData[playerid][oAdmin] < 5) return YetkinizYok(playerid);
		new idx[20];
		if(sscanf(params, "s[20]", idx))
		{
			SendClientMessage(playerid, RENK_GRI, "KULLANIM: /tnokta [Parametre]");
			SendClientMessage(playerid, RENK_ACIKYESIL, "Parametreler: [{FFFFFF}ilkpos{88aa62}], [{FFFFFF}ikincipos{88aa62}], [{FFFFFF}yarat{88aa62}], [{FFFFFF}sil{88aa62}]");
		}
		else
		{
			if(strcmp(idx, "ilkpos", true) == 0)
			{
				if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Araç içerisinde bu iþlem gerçekleþemez.");
				new Float:X,Float:Y,Float:Z;
				GetPlayerPos(playerid, X,Y,Z);
				SetPVarFloat(playerid, "telportX", X);
				SetPVarFloat(playerid, "telportY", Y);
				SetPVarFloat(playerid, "telportZ", Z);
				SetPVarInt(playerid, "telportVW", GetPlayerVirtualWorld(playerid));
				SetPVarInt(playerid, "telportInt", GetPlayerInterior(playerid));
				SetPVarInt(playerid, "telportayarladi", 1);
				SunucuMesaji(playerid, "Ýlk posun verilerini aldýnýz, þimdi ikinci posa giderek '/tnokta ikincipos' yazýn.");
			}
			else if(strcmp(idx, "ikincipos", true) == 0)
			{
				if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Araç içerisinde bu iþlem gerçekleþemez.");
				new Float:X,Float:Y,Float:Z;
				GetPlayerPos(playerid, X,Y,Z);
				SetPVarFloat(playerid, "telportdestX", X);
				SetPVarFloat(playerid, "telportdestY", Y);
				SetPVarFloat(playerid, "telportdestZ", Z);
				SetPVarInt(playerid, "telportdestVW", GetPlayerVirtualWorld(playerid));
				SetPVarInt(playerid, "telportdestInt", GetPlayerInterior(playerid));
				SetPVarInt(playerid, "telportdestayarladi", 1);
				SunucuMesaji(playerid, "Ýkinci posun verilerini aldýnýz, þimdi isterseniz noktayý '/tnokta yarat' yazarak yaratabilirsiniz.");
			}
			else if(strcmp(idx, "yarat", true) == 0)
			{
				if(GetPVarInt(playerid, "telportayarladi") != 1 || GetPVarInt(playerid, "telportdestayarladi") != 1) return hataMesaji(playerid, "Verilerde eksiklik var, lütfen ilk pos ve ikinci posu ayarlayýn.");
				ShowPlayerDialog(playerid, DIALOG_TNOKTA_ISIM, DIALOG_STYLE_INPUT, "Teleport Noktasý Ýsim", "Teleport noktanýza bir isim verin örnek:(Havana Club Teras)", "Yarat", "Iptal");
			}
			else if(strcmp(idx, "sil", true) == 0)
			{
				for(new b = 0; b != MAX_TNOKTA; b++) {
					if(IsPlayerInRangeOfPoint(playerid,3.5,TeleportData[b][telX],TeleportData[b][telY], TeleportData[b][telZ])) {
						if(Iter_Contains(Teleportlar, b)) {
							new query[256];
							mysql_format(g_SQL, query, sizeof(query), "DELETE FROM `teleportlar` WHERE `id` = '%d'", b);
							mysql_query(g_SQL, query);

							/*if(IsValidDynamicPickup(TeleportData[b][telPickup])) DestroyDynamicPickup(TeleportData[b][telPickup]);
							if(IsValidDynamic3DTextLabel(TeleportData[b][telLabel])) DestroyDynamic3DTextLabel(TeleportData[b][telLabel]);
							if(IsValidDynamicPickup(TeleportData[b][teldestPickup])) DestroyDynamicPickup(TeleportData[b][teldestPickup]);
							if(IsValidDynamic3DTextLabel(TeleportData[b][teldestLabel])) DestroyDynamic3DTextLabel(TeleportData[b][teldestLabel]);*/
							TeleportData[b][telX] = 0;
							TeleportData[b][telY] = 0;
							TeleportData[b][telZ] = 0;
							TeleportData[b][telVW] = 0;
							TeleportData[b][telInt] = 0;
							TeleportData[b][teldestX] = 0;
							TeleportData[b][teldestY] = 0;
							TeleportData[b][teldestZ] = 0;
							TeleportData[b][teldestVW] = 0;
							TeleportData[b][teldestInt] = 0;
							Iter_Remove(Teleportlar, b);
						}
					}
				}
			}
		}
		return 1;
	}

	CMD:craftmasa(playerid, params[])
	{
		if(oyuncuData[playerid][oGiris] == false) return hataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
		if(KomutUygunlukKontrol(playerid) == 0) return UygunDegilMesaj(playerid);
		new idx[20];
		if(sscanf(params, "s[20]", idx))
		{
			SendClientMessage(playerid, RENK_GRI, "KULLANIM: /craftmasa [Parametre]");
			SendClientMessage(playerid, RENK_ACIKYESIL, "Parametreler: [{FFFFFF}kur{88aa62}], [{FFFFFF}duzenle{88aa62}], [{FFFFFF}sil{88aa62}]");
		}
		else
		{
			if(strcmp(idx, "kur", true) == 0)
			{
				if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Araç içerisinde bu iþlem gerçekleþemez.");
				if(GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0) return hataMesaji(playerid, "Dýþ mekanlara craft masasý kurulamaz. Ev/Ýþyeri/Bina gibi alternatif yerleri kullanýn.");
				if(oyuncuData[playerid][oTezgah] == 1)
			 	{
			 	    if(Oyuncu_Isyerinde(playerid) != -1)
			 	    {
						if(IsyeriBilgi[Oyuncu_Isyerinde(playerid)][isyeriSahip] != oyuncuData[playerid][oID]) return hataMesaji(playerid, "Craft masasý kurabilmek için bu iþyerinin sahibi olmanýz gerekiyor.");
					}
			 	    if(Oyuncu_Evde(playerid) != -1)
			 	    {
						if(EvBilgi[Oyuncu_Evde(playerid)][evSahip] != oyuncuData[playerid][oID]) return hataMesaji(playerid, "Craft masasý kurabilmek için bu evin sahibi olmanýz gerekiyor.");
					}
					new id = Iter_Free(Tezgah);
					if(id < 0) return hataMesaji(playerid, "Daha fazla craft masasý kurulamaz.");
					oyuncuData[playerid][oTezgah] = 0;
					new Float:pos[3],string[100], query[250];
					GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
					GetXYInFrontOfPlayer(playerid, pos[0], pos[1], 0.75);
					TezgahInfo[id][tObje] = CreateDynamicObject(-2020,pos[0],pos[1] + 3.5,pos[2],0.0,0.0,0.0,GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid), -1,50.0);
					format(TezgahInfo[id][tSahip], MAX_PLAYER_NAME, "%s", oyuncuData[playerid][oIsim]);
					TezgahInfo[id][tID] = id;
					TezgahInfo[id][tX] = pos[0];
					TezgahInfo[id][tY] = pos[1];
					TezgahInfo[id][tZ] = pos[2];
					TezgahInfo[id][tInt] = GetPlayerInterior(playerid);
					TezgahInfo[id][tVw] = GetPlayerVirtualWorld(playerid);

					mysql_format(g_SQL, query, sizeof(query), "INSERT INTO `tezgahlar` (`id`,`sahip`, `x`, `y`, `z`, `vw`, `interior`) VALUES('%d', '%e', '%f', '%f', '%f', '%d', '%d')", id, TezgahInfo[id][tSahip], TezgahInfo[id][tX], TezgahInfo[id][tY], TezgahInfo[id][tZ], TezgahInfo[id][tVw], TezgahInfo[id][tInt]);
					mysql_query(g_SQL, query);
					format(string, sizeof(string), "{F2DA4E}[CRAFT MASASI]\nID: {FFFFFF}%d\n{F2DA4E}Sahip: {FFFFFF}%s", id, oyuncuData[playerid][oIsim]);
					TezgahInfo[id][tLabel] = CreateDynamic3DTextLabel(string, RENK_OZELKIRMIZI, pos[0], pos[1], (pos[2] - 0.50), 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0,  TezgahInfo[id][tVw], TezgahInfo[id][tInt]);
					SetPVarInt(playerid, "tezgahid", id);
					SetPVarInt(playerid, "tezgahduzenliyor", 1);
					EditDynamicObject(playerid, TezgahInfo[id][tObje]);
					Iter_Add(Tezgah, id);
					SunucuMesaji(playerid, "Masanýzý kurdunuz, þimdi pozisyonunu düzenleyebilirsiniz.");

				}
				else hataMesaji(playerid, "Masanýz yok, masa kuramazsýnýz.");
			}
			else if(strcmp(idx, "sil", true) == 0)
			{
				for(new b = 0; b != MAX_TEZGAH; b++) {
					if(IsPlayerInRangeOfPoint(playerid,3.5,TezgahInfo[b][tX],TezgahInfo[b][tY], TezgahInfo[b][tZ])) {
						if(Iter_Contains(Tezgah, b)) {
							if(strcmp(TezgahInfo[b][tSahip], oyuncuData[playerid][oIsim]) != 0) return hataMesaji(playerid, "Masayý silebilmek için masanýn sahibi olmalýsýnýz.");
							new query[256];
							mysql_format(g_SQL, query, sizeof(query), "DELETE FROM `tezgahlar` WHERE `id` = '%d'", b);
							mysql_query(g_SQL, query);

							if(IsValidDynamicObject(TezgahInfo[b][tObje])) DestroyDynamicObject(TezgahInfo[b][tObje]);
							if(IsValidDynamic3DTextLabel(TezgahInfo[b][tLabel])) DestroyDynamic3DTextLabel(TezgahInfo[b][tLabel]);
							TezgahInfo[b][tX] = 0;
							TezgahInfo[b][tY] = 0;
							TezgahInfo[b][tZ] = 0;
							Iter_Remove(Tezgah, b);
						}
					}
				}
			}
			else if(strcmp(idx, "duzenle", true) == 0)
			{
				for(new b = 0; b != MAX_TEZGAH; b++) {
					if(IsPlayerInRangeOfPoint(playerid,3.5,TezgahInfo[b][tX],TezgahInfo[b][tY], TezgahInfo[b][tZ])) {
						if(Iter_Contains(Tezgah, b)) {
							if(strcmp(TezgahInfo[b][tSahip], oyuncuData[playerid][oIsim]) != 0) return hataMesaji(playerid, "Masayý düzenliyebilmek için masanýn sahibi olmalýsýnýz.");
							SetPVarInt(playerid, "tezgahid", b);
							SetPVarInt(playerid, "tezgahduzenliyor", 1);
							EditDynamicObject(playerid, TezgahInfo[b][tObje]);
							SunucuMesaji(playerid, "Masanýzý düzenlemeye baþladýnýz.");
						}
					}
				}
			}
		}
		return 1;
	}

	CMD:craft(playerid, params[])
	{
		if(oyuncuData[playerid][oCraft]) return hataMesaji(playerid, "Craft yaparken craft listenize eriþemezsiniz.");
		new b = TezgahBul(playerid);
		if(b == -1) return hataMesaji(playerid, "Herhangi bir tezgaha yakýn deðilsiniz.");
		if(strcmp(TezgahInfo[b][tSahip], oyuncuData[playerid][oIsim]) != 0) return hataMesaji(playerid, "Craft yapabilmek için tezgahýn sahibi olmalýsýnýz.");
		new buffer[500],item_name[24], sayi = 0;
		for (new i = 0; i < MAX_ITEM; i++)
		{
			if (EnvanterData[playerid][i_aktif][i] && EnvanterData[playerid][i_craft][i]) {
				format (item_name, sizeof(item_name), "%s", ItemArray[ EnvanterData[playerid][i_tip][i] - 1 ][iisim]);
				format (buffer, sizeof(buffer), "%s{90C3D4}%s\n", buffer, item_name);
				sayi ++;
			}
		}
		if(sayi == 0) return hataMesaji(playerid, "Craft listenizde herhangi bir eþya yok.");
		ShowPlayerDialog(playerid, DIALOG_CRAFT_LISTE, DIALOG_STYLE_LIST, "Craft Listesi", buffer, "Üret", "Iptal");
		SetPVarInt(playerid, "cTezgahID", b);
		return 1;
	}

	CMD:vicemarket(playerid, params[])
	{
		if(oyuncuData[playerid][oGiris] == false) return hataMesaji(playerid, "Bu komutu kullanmak için giriþ yapmalýsýn.");
		Vice_MarketDialog(playerid);
		return 1;
	}

	stock Vice_MarketDialog(playerid)
	{
		new string[1150];
		strcat(string, "Nesne\tÜcret\tSahip Olduðunuz\n");
		format(string, sizeof(string), "%sIsim Deðiþtirme\tKullan\t%d\n", string,oyuncuData[playerid][oIsimDegisimHakki]);
		format(string, sizeof(string), "%sPlaka Deðiþtirme\tKullan\t%d\n", string,oyuncuData[playerid][oPlakaDegisimHakki]);
		format(string, sizeof(string), "%sTelefon Numarasý Deðiþimi\tKullan\t%d\n", string,oyuncuData[playerid][oTelefonDegisimHakki]);
		format(string, sizeof(string), "%sBisiklet Alýmý\tKullan\t%d\n", string,oyuncuData[playerid][oBisikletHakki]);
		format(string, sizeof(string), "%s4 Yetenek Puaný\tKullan\t%d\n", string,oyuncuData[playerid][oBesYetenekPuani]);
		format(string, sizeof(string), "%s8 Yetenek Puaný\tKullan\t%d\n", string,oyuncuData[playerid][oOnYetenekPuani]);
		format(string, sizeof(string), "%s15 Yetenek Puaný\tKullan\t%d\n", string,oyuncuData[playerid][oOnBesYetenekPuani]);
		format(string, sizeof(string), "%sYetenek Sýfýrlama\tKullan\t%d\n", string,oyuncuData[playerid][oYetenekSifirlamaHakki]);
		format(string, sizeof(string), "%sÖzel Banka Hesap Numarasý\tKullan\t%d\n", string,oyuncuData[playerid][oBankaHesapDegisimHakki]);
		format(string, sizeof(string), "%sÜçüncü Dil Hakký\tKullan\t%d\n", string, oyuncuData[playerid][oUcuncuDilHakki]);
		format(string, sizeof(string), "%svCoin\tBiriken\t%d\n", string,oyuncuData[playerid][oViceCoin]);
		format(string, sizeof(string), "%sIsim Deðiþimi\t300 vCoin\tSatýn Al\n", string);

		ShowPlayerDialog(playerid, DIALOG_VICE_MARKET, DIALOG_STYLE_TABLIST_HEADERS, "Vice Envanteriniz", string, "Kullan", "Çýkýþ");
		return 1;
	}

	CMD:odakirala(playerid)
	{
		new resepsiyon = Resepsiyon_Bul(playerid), str[1024], cek = 0;
		strcat(str, "{FFFFFF}Kapý NO\t{FFFFFF}Fiyat\t{FFFFFF}Durum\n");
		foreach(new i : OtelOdalari)
		{
			if(otelOda[i][oda_Resepsiyon] == resepsiyon)
			{
				if(otelOda[i][oda_Fiyat] != -1)
				{
					cek++;
				}
			}
		}
		if(!cek) return hataMesaji(playerid, "Bu resepsiyona baðlý veya hazýr oda mevcut deðil.");
		ShowPlayerDialog(playerid, OTEL_ODA_SURE_SECIM, DIALOG_STYLE_LIST, "> Odanýzýn süresini seçin", "1 saat\n2 saat\n3 saat\n4 saat\n5 saat\n6 saat\n7 saat\n8 saat", "Seç", "Ýptal");
		return 1;
	}

	CMD:resepsiyon(playerid, params[])
	{
		new str[256], resepsiyon = Resepsiyon_Bul(playerid);
		if(resepsiyon == -1) return hataMesaji(playerid, "Herhangi bir resepsiyona yakýn deðilsiniz.");
		if(resepsData[resepsiyon][rspSahip] != oyuncuData[playerid][oID]) return hataMesaji(playerid, "Bu resepsiyonun sahibi deðilsin, bilgilere eriþemezsin.");
		strcat(str, "Iþlevler\t#\n");
		format(str, sizeof(str), "%s{FFFFFF}Resepsiyon Sahibi:\t%d\n", str, resepsData[resepsiyon][rspSahip]);
		format(str, sizeof(str), "%s{FFFFFF}Otel Yýldýzý:\t%s\n", str, yildiz_Goster(resepsData[resepsiyon][rspYildiz]));
		format(str, sizeof(str), "%s{FFFFFF}Otel Kasasý:\t%s\n", str, NumaraFormati(resepsData[resepsiyon][rspKasa]));
		ShowPlayerDialog(playerid, RESEPSIYON_DUZENLE, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Resepsiyon: {CDCDCD}Yönetim", str, "Düzenle", "Kapat");
		return 1;
	}

	CMD:resepsiyonduzenle(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 5) return YetkinizYok(playerid);
		static id, tur[24], secenek[128], cek = 0;
		if(sscanf(params, "ds[24]S()[128]", id, tur, secenek)) return kullanimMesaji(playerid, "/resepsiyonduzenle [resepsiyon id] [seçenek]"), IpucuMesaji(playerid, "Seçenekler: sahip, yildiz, kasa");
		if(!strcmp(tur, "sahip", true))
		{
			static oyuncuid;
			if(sscanf(secenek, "u", oyuncuid)) return kullanimMesaji(playerid, "/resepsiyonduzenle [resepsiyon id] sahip [oyuncuid]");
			resepsData[id][rspSahip] = oyuncuData[oyuncuid][oID];
			SunucuMesaji(playerid, "Resepsiyon sahibi %s olarak deðiþtirildi", OyuncuIsim(oyuncuid));
			Log_Kaydet("loglar/admin_resepsiyon_log.txt", "[%s] %s bir resepsiyonun sahibini %s olarak degistirdi. Resepsiyon ID: %d", Tarih(), OyuncuIsim(playerid), OyuncuIsim(oyuncuid), id);
			cek++;
		}
		else if(!strcmp(tur, "yildiz", true))
		{
			static yildiz;
			if(sscanf(secenek, "d", yildiz)) return kullanimMesaji(playerid, "/resepsiyonduzenle [resepsiyon id] yildiz [yeni yildiz]");
			resepsData[id][rspYildiz] = yildiz;
			SunucuMesaji(playerid, "Resepsiyon yýldýzý %d olarak deðiþtirildi", resepsData[id][rspYildiz]);
			Log_Kaydet("loglar/admin_resepsiyon_log.txt", "[%s] %s bir resepsiyonun yildizini %d olarak degistirdi. Resepsiyon ID: %d", Tarih(), OyuncuIsim(playerid), yildiz, id);
			cek++;
		}
		else if(!strcmp(tur, "kasa", true))
		{
			static kasa;
			if(sscanf(secenek, "d", kasa)) return kullanimMesaji(playerid, "/resepsiyonduzenle [resepsiyon id] kasa [yeni miktar]");
			resepsData[id][rspKasa] = kasa;
			SunucuMesaji(playerid, "Resepsiyon kasasý %s olarak deðiþtirildi", NumaraFormati(resepsData[id][rspKasa]));
			Log_Kaydet("loglar/admin_resepsiyon_log.txt", "[%s] %s bir resepsiyonun kasasini %s olarak degistirdi. Resepsiyon ID: %d", Tarih(), OyuncuIsim(playerid), NumaraFormati(resepsData[id][rspKasa]), id);
			cek++;
		}
		if(!cek) return hataMesaji(playerid, "Girilen seçenek hatalý, kontrol ediniz.");
		Resepsiyon_Kaydet(id);
		return 1;
	}

	CMD:otelodasiyarat(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 5)
			return YetkinizYok(playerid);

		new id = Iter_Free(OtelOdalari), resepsiyon;
		if(id < 0) return hataMesaji(playerid, "Sunucunun otel odasý kapasitesi doldu! %d/%d", MAX_OTEL_ODA, MAX_OTEL_ODA);
		if(sscanf(params, "d", resepsiyon)) return kullanimMesaji(playerid, "/otelodasiyarat [resepsiyonid]");
		if(!Iter_Contains(Resepsiyonlar, resepsiyon)) return hataMesaji(playerid, "Belirtilen ID'de resepsiyon mevcut deðil.");
		Otelodasi_Olustur(playerid, id, resepsiyon);
		return 1;
	}

	CMD:resepsiyonyarat(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 5)
			return YetkinizYok(playerid);

		new id = Iter_Free(Resepsiyonlar);
		if(id < 0) return hataMesaji(playerid, "Sunucunun resepsiyon kapasitesi doldu! %d/%d", MAX_RESEPSIYON, MAX_RESEPSIYON);
		Resepsiyon_Olustur(playerid, id);
		return 1;
	}

	CMD:resepsiyonsil(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 5)
			return YetkinizYok(playerid);

		new id;
		if(sscanf(params, "d", id)) return kullanimMesaji(playerid, "/resepsiyonsil [id]");
		if(!Iter_Contains(Resepsiyonlar, id)) return hataMesaji(playerid, "Belirtilen ID'de resepsiyon mevcut deðil.");
		Resepsiyon_Sil(id);
		return 1;
	}

	CMD:otelodasisil(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 5)
			return YetkinizYok(playerid);

		new id;
		if(sscanf(params, "d", id)) return kullanimMesaji(playerid, "/otelodasisil [id]");
		if(!Iter_Contains(OtelOdalari, id)) return hataMesaji(playerid, "Belirtilen ID'de otel odasý mevcut deðil.");
		OtelOdasi_Sil(id);
		return 1;
	}

	CMD:truckerbilgi(playerid, params[])
	{
		if(oyuncuData[playerid][oGiris] == false) return hataMesaji(playerid, "Bu komutu kullanmak için giriþ yapmalýsýn.");
		new bilgiler[256];
		format(bilgiler, sizeof(bilgiler), "Toplam Trucker Seviyesi: %d\nMevcut Trucker EXP: %d/10\n\nTrucker yeteneðini baþarýlý seferler yaparak arttýrabilirsin.", oyuncuData[playerid][oTruckerSeviye], oyuncuData[playerid][oTruckerEXP]);
		DialogGoster(playerid, 0, DIALOG_STYLE_MSGBOX, "> Trucker Bilgileriniz", bilgiler, "Kapat", "");
		return 1;
	}

	CMD:meslekyardim(playerid, params[])
	{
		if(oyuncuData[playerid][oGiris] == false) return hataMesaji(playerid, "Bu komutu kullanmak için giriþ yapmalýsýn.");
		SendClientMessage(playerid, RENK_KLASIK, "MESLEK: {FFFFFF}/meslekgir, /meslekayril");
		if(oyuncuData[playerid][oMeslek] == 5)
		{
			SendClientMessage(playerid, 0xAA00FFFF, "----------------------[TRUCKER MESLEÐÝ]----------------------");
			SendClientMessage(playerid, RENK_KLASIK, "Trucker mesleðindeyken seviyeleri takip etmeye özen gösterin. Toplamda üç adet trucker seviyesi bulunur.");
			SendClientMessage(playerid, RENK_KLASIK, "Baþlangýç seviyeniz 0'dýr ve en küçük araçlar ile baþlarsýnýz.");
			SendClientMessage(playerid, RENK_KLASIK, "Baþarýlý sefer yaptýkça diðer araçlara geçersiniz ve kazancýnýz da artar.");
			SendClientMessage(playerid, RENK_KLASIK, "3. seviyeden sonra büyük týrlarý sürmeye baþlayabilirsiniz.");
			SendClientMessage(playerid, RENK_KLASIK, "Týrlarda 4 adet rota bulunur. Detaylý bilgi için forumdaki trucker mesleðine göz atýn!");
			SendClientMessage(playerid, RENK_KLASIK, "[KOMUTLAR]: {FFFFFF}/truckerbasla, /truckerayril, /truckerbilgi");
		}
		else if(oyuncuData[playerid][oMeslek] == 4)
		{
			SendClientMessage(playerid, 0xAA00FFFF, "----------------------[TAKSÝ ÞOFÖRLÜÐÜ]----------------------");
			SendClientMessage(playerid, RENK_KLASIK, "Taksi þoförlüðü yaparken kurallara uymaya ve aracý kiþisel olarak kullanmamaya özen gösterin.");
			SendClientMessage(playerid, RENK_KLASIK, "Aksi halde ceza alabilirsiniz!");
			SendClientMessage(playerid, RENK_KLASIK, "TAKSÝCÝ: {FFFFFF}/taksiisbasi, /taksimetre");
		}
		return 1;
	}

CMD:truckerbasla(playerid, params[])
{
	if(oyuncuData[playerid][oMeslek] != 5) return hataMesaji(playerid, "Trucker mesleðinde çalýþmýyorsunuz.");
	if(!IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu komutu sadece trucker araçlarýnda kullanabilirsiniz.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return hataMesaji(playerid, "Sürücü koltuðunda olmalýsýn.");
	new aracid = Arac_IDBul(GetPlayerVehicleID(playerid));
	if(AracBilgi[aracid][aracMeslek] != 5) return hataMesaji(playerid, "Bu komutu sadece trucker araçlarýnda kullanabilirsiniz.");
	if(truckerseviyebirde[playerid] > 0 || truckerseviyeikide[playerid] > 0 || truckerseviyeucte[playerid] > 0) return hataMesaji(playerid, "Zaten þu anda bu iþi yapýyorsun.");
	switch(GetVehicleModel(aracid))
	{
		case 413:
		{
			truckerseviyebirde[playerid] = 1;
			SetEngineStatus(GetPlayerVehicleID(playerid), true);
			SetPlayerCheckpoint(playerid, 2482.7263,-2526.4973,13.5085, 10.0);
			SunucuMesaji(playerid, "Trucker görevine baþladýn, mallarý belirlenen bölgeden al ve buraya getir.");
			Log_Kaydet("loglar/truckerlog.txt", "[%s] %s adli kisi trucker gorevine basladi(Seviye 1)", Tarih(), OyuncuIsim(playerid));
		}
		case 414:
		{
			if(oyuncuData[playerid][oTruckerSeviye] < 4) return hataMesaji(playerid, "Trucker seviyeniz bu araçta görev yapmaya yetmiyor. Gereken seviye: 4");
			truckerseviyeikide[playerid] = 1;
			SetEngineStatus(GetPlayerVehicleID(playerid), true);
			SetPlayerCheckpoint(playerid,2474.9136,-2656.7065,13.5833,10.0);
			SunucuMesaji(playerid, "Trucker görevine baþladýn, mallarý belirlenen bölgeden al ve buraya getir.");
			Log_Kaydet("loglar/truckerlog.txt", "[%s] %s adli kisi trucker gorevine basladi(Seviye 2)", Tarih(), OyuncuIsim(playerid));
		}
		case 514:
		{
			if(oyuncuData[playerid][oTruckerSeviye] < 7) return hataMesaji(playerid, "Trucker seviyeniz bu araçta görev yapmaya yetmiyor. Gereken seviye: 7");
			if(!IsTrailerAttachedToVehicle(aracid)) return hataMesaji(playerid, "Dorse takýlý deðil!");
			if(DorseYuku[aracid] == true) return hataMesaji(playerid, "Dorsede yükü mevcut, tekrar yük alýnamaz. Teslimatý gerçekleþtirin veya iptal edin.");

			ShowPlayerDialog(playerid, DIALOG_TRUCKER_SECIM, DIALOG_STYLE_TABLIST_HEADERS, "> Rotalar", "Hedef Lokasyon\tOrtalama Süre\tGelir\nRota 1\t16 dakika\t$990\nRota 2\t15 dakika\t$960\nRota 3\t8 dakika\t$560\nRota 4\t11 dakika\t$700", "Seç", "Ýptal");
		}
		default: hataMesaji(playerid, "Bu araç trucker araç modeli olarak tanýmlanmamýþ.");
	}
	return 1;
}

CMD:isyericikar(playerid, params[])
{
	if(oyuncuData[playerid][oBirlik] == -1) return hataMesaji(playerid, "Oluþum/Birlik üyesi deðilsin.");
	if(OyuncuBirlikTuru(playerid) == BIRLIK_POLIS || OyuncuBirlikTuru(playerid) == BIRLIK_DEVLET || OyuncuBirlikTuru(playerid) == BIRLIK_MEDIKAL) return hataMesaji(playerid, "Devlet üyeleri bu seçeneði kullanamaz.");
	if(BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikisyeri] == birlikisyerisiniri(BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikLevel])) return hataMesaji(playerid, "Birliðiniz maksimum eklenebilecek iþyeri sýnýrýna ulaþtý, iþyeri ekleyemezsiniz."), IpucuMesaji(playerid, "Birlik seviyesini yükseltmek bu sýnýrý arttýrabilir.");
	new kapino, id = -1;
	if(sscanf(params, "d", kapino)) return kullanimMesaji(playerid, "/isyeribirlik [kapý no] - /mulklerim komutu ile iþyerlerini görebilirsin.");
	for(new i = 0; i < MAKSIMUM_ISYERI; i++) if(IsyeriBilgi[i][isyeriKullanimda] == true)
	{
		if(IsyeriBilgi[i][isyeriID] == kapino) id = i;
	}
	if(id == -1) return hataMesaji(playerid, "Geçersiz iþyeri kapý numarasý girdin.");
	if(!Isyeri_SahipKontrol(playerid, id)) return hataMesaji(playerid, "Bu iþyerinin sahibi deðilsin.");
	if(IsyeriBilgi[id][isyeriBirlik] == -1) return hataMesaji(playerid, "Bu iþyeri zaten bir birliðe baðlý deðil.");
	IsyeriBilgi[id][isyeriBirlik] = -1;
	Isyeri_Kaydet(id);
	BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikisyeri]--;
	Birlik_Kaydet(oyuncuData[playerid][oBirlik]);
	SunucuMesaji(playerid, "Ýþyerini birlikten çýkarttýn.");
	return 1;
}

CMD:isyeriekle(playerid, params[])
{
	if(oyuncuData[playerid][oBirlik] == -1) return hataMesaji(playerid, "Oluþum/Birlik üyesi deðilsin.");
	if(OyuncuBirlikTuru(playerid) == BIRLIK_POLIS || OyuncuBirlikTuru(playerid) == BIRLIK_DEVLET || OyuncuBirlikTuru(playerid) == BIRLIK_MEDIKAL) return hataMesaji(playerid, "Devlet üyeleri bu seçeneði kullanamaz.");
	if(BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikMaksRutbe] - 1 > oyuncuData[playerid][oBirlikRutbe]) return hataMesaji(playerid, "Bu komutu kullanabilmek için birlik lideri olmalýsýn.");
	if(BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikisyeri] == birlikisyerisiniri(BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikLevel])) return hataMesaji(playerid, "Birliðiniz maksimum eklenebilecek iþyeri sýnýrýna ulaþtý, iþyeri ekleyemezsiniz."), IpucuMesaji(playerid, "Birlik seviyesini yükseltmek bu sýnýrý arttýrabilir.");
	new kapino, id = -1;
	if(sscanf(params, "d", kapino)) return kullanimMesaji(playerid, "/isyeribirlik [kapý no] - /mulklerim komutu ile iþyerlerini görebilirsin.");
	for(new i = 0; i < MAKSIMUM_ISYERI; i++) if(IsyeriBilgi[i][isyeriKullanimda] == true)
	{
		if(IsyeriBilgi[i][isyeriID] == kapino) id = i;
	}
	if(id == -1) return hataMesaji(playerid, "Geçersiz iþyeri kapý numarasý girdin.");
	if(!Isyeri_SahipKontrol(playerid, id)) return hataMesaji(playerid, "Bu iþyerinin sahibi deðilsin.");
	if(IsyeriBilgi[id][isyeriBirlik] >= 0) return hataMesaji(playerid, "Bu iþyeri zaten bir birliðe baðlý.");
	IsyeriBilgi[id][isyeriBirlik] = BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikID];
	Isyeri_Kaydet(id);
	BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikisyeri]++;
	Birlik_Kaydet(oyuncuData[playerid][oBirlik]);
	SunucuMesaji(playerid, "Ýþyerini birliðine baðladýn.");
	return 1;
}

CMD:vergiode(playerid, params[])
{
	new secenek[32], ek[64], secenekid;
	if(sscanf(params, "s[32]S()[64]", secenek, ek)) return kullanimMesaji(playerid, "/vergiode [arac/isyeri/ev] [id]"), IpucuMesaji(playerid, "Vergisini ödemeden önce aracýnýzý /araclarim komutundan spawn etmelisiniz.");
	if(!strcmp(secenek, "arac", true))
	{
		if(sscanf(ek, "d", secenekid)) return kullanimMesaji(playerid, "/vergiode arac [id]");
		if(!Arac_SahipKontrol(playerid, secenekid)) return hataMesaji(playerid, "Bu aracýn vergisini ödeyemezsin, sahibi deðilsin.");
		if(oyuncuData[playerid][oPara] < AracBilgi[secenekid][aracVergi]) return hataMesaji(playerid, "Bu aracýn vergisini ödemeye yetecek kadar paran yok.");
		if(AracBilgi[secenekid][aracVergi] == 0) return hataMesaji(playerid, "Bu aracýn vergisi sýfýr dolar, ödeyemezsin.");
		if(oyuncuData[playerid][oEkonomiPaketi] < 1)
		{
			ParaEkle(playerid, -AracBilgi[secenekid][aracVergi]);
		}
		else
		{
			ParaEkle(playerid, -AracBilgi[secenekid][aracVergi]/2);
		}
		SunucuMesaji(playerid, "%d dolarlýk araç vergisini ödedin. Araç ID: %d", AracBilgi[secenekid][aracVergi], secenekid);
		new query[100], Cache:GetVCache, aodenenvergi;
		mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM oyuncular WHERE ID = '%d'", oyuncuData[playerid][oID]);
		GetVCache = mysql_query(g_SQL, query);
		cache_get_value_name_int(0, "OdenenVergi", aodenenvergi);
		cache_delete(GetVCache);
		aodenenvergi += AracBilgi[secenekid][aracVergi];
		mysql_format(g_SQL, query, sizeof(query), "UPDATE oyuncular SET OdenenVergi = '%d' WHERE ID = '%d'", aodenenvergi, oyuncuData[playerid][oID]);
		mysql_query(g_SQL, query);
		AracBilgi[secenekid][aracVergi] = 0;
		Arac_Kaydet(secenekid);
	}
	else if(!strcmp(secenek, "isyeri", true))
	{
		if(sscanf(ek, "d", secenekid)) return kullanimMesaji(playerid, "/vergiode isyeri [kapý no] - (/mulklerim ile kapý no öðrenebilirsin)");
		if(IsyeriBilgi[secenekid][isyeriKullanimda] == false) return hataMesaji(playerid, "Ýþyeri bulunamadý.");
		if(!Isyeri_SahipKontrol(playerid, secenekid)) return hataMesaji(playerid, "Bu iþyerinin vergisini ödeyemezsin, sahibi deðilsin.");
		if(oyuncuData[playerid][oPara] < IsyeriBilgi[secenekid][isyeriVergi]) return hataMesaji(playerid, "Bu iþyerinin vergisini ödemeye yetecek kadar paran yok.");
		if(IsyeriBilgi[secenekid][isyeriVergi] == 0) return hataMesaji(playerid, "Bu iþyerinin vergisi sýfýr dolar, ödeyemezsin.");
		if(oyuncuData[playerid][oEkonomiPaketi] < 1)
		{
			ParaEkle(playerid, -IsyeriBilgi[secenekid][isyeriVergi]);
		}
		else
		{
			ParaEkle(playerid, -IsyeriBilgi[secenekid][isyeriVergi]/2);
		}
		SunucuMesaji(playerid, "%d dolarlýk iþyeri vergisini ödedin. Ýþyeri ID: %d", IsyeriBilgi[secenekid][isyeriVergi], secenekid);
		new query[100], Cache:GetBCache, bodenenvergi;
		mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM oyuncular WHERE ID = '%d'", oyuncuData[playerid][oID]);
		GetBCache = mysql_query(g_SQL, query);
		cache_get_value_name_int(0, "OdenenVergi", bodenenvergi);
		cache_delete(GetBCache);
		bodenenvergi += IsyeriBilgi[secenekid][isyeriVergi];
		mysql_format(g_SQL, query, sizeof(query), "UPDATE oyuncular SET OdenenVergi = '%d' WHERE ID = '%d'", bodenenvergi, oyuncuData[playerid][oID]);
		mysql_query(g_SQL, query);
		IsyeriBilgi[secenekid][isyeriVergi] = 0;
		if(IsyeriBilgi[secenekid][isyeriDurum] == 4)
		{
			IsyeriBilgi[secenekid][isyeriDurum] = 1;
			Isyeri_Yenile(secenekid);
			Isyeri_Kaydet(secenekid);
		}
	}
	else if(!strcmp(secenek, "ev", true))
	{
		if(sscanf(ek, "d", secenekid)) return kullanimMesaji(playerid, "/vergiode ev [kapý no] - (/mulklerim ile kapý no öðrenebilirsin)");
		if(EvBilgi[secenekid][evKullanimda] == false) return hataMesaji(playerid, "Ev bulunamadý.");
		if(!Ev_SahipKontrol(playerid, secenekid)) return hataMesaji(playerid, "Bu evin vergisini ödeyemezsin, sahibi deðilsin.");
		if(oyuncuData[playerid][oPara] < EvBilgi[secenekid][evVergi]) return hataMesaji(playerid, "Bu evin vergisini ödemeye yetecek kadar paran yok.");
		if(EvBilgi[secenekid][evVergi] == 0) return hataMesaji(playerid, "Bu evin vergisi sýfýr dolar, ödeyemezsin.");
		if(oyuncuData[playerid][oEkonomiPaketi] < 1)
		{
			ParaEkle(playerid, -EvBilgi[secenekid][evVergi]);
		}
		else
		{
			ParaEkle(playerid, -EvBilgi[secenekid][evVergi]/2);
		}
		SunucuMesaji(playerid, "%d dolarlýk ev vergisini ödedin. Ev ID: %d", EvBilgi[secenekid][evVergi], secenekid);
		new query[100], Cache:GetBCache, bodenenvergi;
		mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM oyuncular WHERE ID = '%d'", oyuncuData[playerid][oID]);
		GetBCache = mysql_query(g_SQL, query);
		cache_get_value_name_int(0, "OdenenVergi", bodenenvergi);
		cache_delete(GetBCache);
		bodenenvergi += EvBilgi[secenekid][evVergi];
		mysql_format(g_SQL, query, sizeof(query), "UPDATE oyuncular SET OdenenVergi = '%d' WHERE ID = '%d'", bodenenvergi, oyuncuData[playerid][oID]);
		mysql_query(g_SQL, query);
		EvBilgi[secenekid][evVergi] = 0;
		if(EvBilgi[secenekid][evDurum] == 4)
		{
			EvBilgi[secenekid][evDurum] = 1;
			Ev_Yenile(secenekid);
			Ev_Kaydet(secenekid);
		}
	}
	return 1;
}

CMD:getvw(playerid, params[])
{
	new oyuncuid, oyuncuvw, string[128];
	if(oyuncuData[playerid][oAdmin] < 1) return YetkinizYok(playerid);
	if(sscanf(params, "u", oyuncuid)) return kullanimMesaji(playerid, "/getvw [oyuncuid]");
	if(!IsPlayerConnected(oyuncuid)) return hataMesaji(playerid, "Oyuncu bulunamadý.");
	oyuncuvw = GetPlayerVirtualWorld(oyuncuid);
	format(string, sizeof(string), "%s adlý kiþinin virtual world(sanal dünyasý) %d olarak alýndý.", OyuncuIsim(oyuncuid), oyuncuvw);
	SendClientMessage(playerid, RENK_KLASIK, string);
	return 1;
}

CMD:getinterior(playerid, params[])
{
	new oyuncuid, oyuncuint, string[128];
	if(oyuncuData[playerid][oAdmin] < 1) return YetkinizYok(playerid);
	if(sscanf(params, "u", oyuncuid)) return kullanimMesaji(playerid, "/getinterior [oyuncuid]");
	if(!IsPlayerConnected(oyuncuid)) return hataMesaji(playerid, "Oyuncu bulunamadý.");
	oyuncuint = GetPlayerInterior(oyuncuid);
	format(string, sizeof(string), "%s adlý kiþinin interioru %d olarak alýndý.", OyuncuIsim(oyuncuid), oyuncuint);
	SendClientMessage(playerid, RENK_KLASIK, string);
	return 1;
}

CMD:balikyardim(playerid, params[])
{
	SendClientMessage(playerid, 0xAA00FFFF, "----------------------[BALIKÇILIK]----------------------");
	SendClientMessage(playerid, RENK_KLASIK, "VC:RP Balýkçýlýðýna hoþ geldiniz! Balýk tutmak için balýk yemi alýp rýhtýmdaki doðru noktalara gitmek yeterlidir.");
	SendClientMessage(playerid, RENK_KLASIK, "Bunun yaný sýra, karakteriniz Balýk Tuttukça bu konuda tecrübe kazanýr, ayný gerçek hayattaki gibi!");
	SendClientMessage(playerid, RENK_KLASIK, "Ýlk defa balýk tutan birisi acemiyken, yaptýkça ustalaþacaksýnýz ve balýk tutma oranýnýz da artacak.");
	SendClientMessage(playerid, RENK_KLASIK, "Bununla birlikte tuttuðunuz balýklardan geliriniz de artacak. Balýk tutmanýn keyfini çýkarýn!");
	SendClientMessage(playerid, RENK_KLASIK, "[KOMUTLAR]: {FFFFFF}/baliktut - /teknebaliktut - /balikdurum - /balikseviye - /yemsatinal - /baliksat");
	return 1;
}

CMD:tamirciyardim(playerid, params[])
{
	SendClientMessage(playerid, RENK_KLASIK, "[KOMUTLAR]: {FFFFFF}/modifiye - /tamir - /boya");
	return 1;
}

CMD:teknebaliktut(playerid, params[])
{
	new id = -1;
	if(baliktutuyor[playerid] == true) return hataMesaji(playerid, "Zaten þu anda balýk tutuyorsunuz.");
	if((id = Tekne_Yakin(playerid)) != -1)
	{
		if(!Arac_SahipKontrol(playerid, id) && !ItemAnahtarKontrol(playerid, AracBilgi[id][aracID])) return hataMesaji(playerid, "Bu teknenin anahtarýna sahip deðilsiniz, balýk tutamazsýnýz.");
		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Tekneyi sürerken balýk tutamazsýnýz.");
		if(oyuncuData[playerid][balikseviye] < 3 && oyuncuData[playerid][oAdmin] < 7) return hataMesaji(playerid, "Teknede balýk tutmak için 3 balýk seviyesine sahip olmalýsýn.");
		if(BalikSayisi(playerid) >= VipTekneBalik(oyuncuData[playerid][oVIP])) return hataMesaji(playerid, "Tekne üzerinde sahip olabileceðiniz maksimum balýk sayýsýna ulaþtýnýz.(/balikdurum)");
		if(oyuncuData[playerid][oyemsayisi] < 1) return hataMesaji(playerid, "Balýk tutmadan önce balýkçý kulübesinden yem satýn almalýsýnýz.");
		if(IsPlayerInRangeOfPoint(playerid, 200.0, 138.4033,-1957.5648,5.2410)) return hataMesaji(playerid, "Balýk tutabilmek için sahilden biraz açýlmalýsýnýz. Burada balýk tutulamaz.");
		SetPVarInt(playerid, "TeknedeBalikTutuyor", 1);
		if(oyuncuData[playerid][oBalikIzin] == true)
		{
			new icerik[120],kodcuk;
			kodcuk = GetPVarInt(playerid, "antibot");
			hataMesaji(playerid, "Balýk tutmaya devam edebilmek için kodu girmelisiniz.");
			format(icerik, sizeof(icerik), "Lütfen balýk tutabilmeye devam edebilmek için kodu girin {F5E600}(%d):", kodcuk);
			return ShowPlayerDialog(playerid, DIALOG_BALIKONAY, DIALOG_STYLE_INPUT, "Anti-Bot",icerik, "Tamam", "Iptal");
		}
		new rand = random(5);
		if(rand == 2) {
			new kod,icerik[180];
			kod = KodOlustur();
			format(icerik, sizeof(icerik), "Lütfen balýk tutabilmeye devam edebilmek için kodu girin {F5E600}(%d):", kod);
			SetPVarInt(playerid, "antibot", kod);
			ShowPlayerDialog(playerid, DIALOG_BALIKONAY, DIALOG_STYLE_INPUT, "Anti-Bot",icerik, "Tamam", "Iptal");
			return SunucuMesaji(playerid, "Lütfen dialog ekranýna belirtilen kodu giriniz.");
		}
		oyuncuData[playerid][oyemsayisi]--;
		SendClientMessage(playerid, RENK_KLASIK, "{FFFFFF}Teknede balýk tutuyorsunuz...");
		baliktutuyor[playerid] = true;
		TogglePlayerControllable(playerid, 0);
		ApplyAnimation(playerid,"SWORD","sword_block",50.0,0,1,0,1,1);
		oyuncuData[playerid][oBalikTutmaTimer] = SetTimerEx("OyuncuBalikTutuyor", 10 * 1000, false, "i", playerid);
	}
	else
	{
		hataMesaji(playerid, "Kendine ait bir tekneye yeterince yakýn deðilsin.");
	}
	return 1;
}

CMD:tekneyemal(playerid, params[])
{
	new id = -1;
	if(baliktutuyor[playerid] == true) return hataMesaji(playerid, "Zaten þu anda balýk tutuyorsunuz.");
	if((id = Tekne_Yakin(playerid)) != -1)
	{
		if(!Arac_SahipKontrol(playerid, id)) return hataMesaji(playerid, "Bu teknenin sahibi deðilsiniz, yem alamazsýnýz.");
		if(oyuncuData[playerid][balikseviye] < 3) return hataMesaji(playerid, "Teknede balýk tutmak için 3 balýk seviyesine sahip olmalýsýn.");
		if(oyuncuData[playerid][oyemsayisi] > 0) return hataMesaji(playerid, "Yemleriniz bitmeden yem alamazsýnýz.");
		ParaEkle(playerid, -50*YEM_FIYAT);
		oyuncuData[playerid][oyemsayisi] += 50;
		SunucuMesaji(playerid, "Tekneniz için 50 adet yemi $%d fiyatýna satýn aldýnýz.", 50*YEM_FIYAT);
	}
	else
	{
		hataMesaji(playerid, "Kendine ait bir tekneye yeterince yakýn deðilsin.");
	}
	return 1;
}

CMD:balikseviye(playerid, params[])
{
	new string[256], yeniseviye;
	switch(oyuncuData[playerid][balikseviye])
	{
		case 0: yeniseviye = 150;
		case 1: yeniseviye = 300;
		case 2: yeniseviye = 450;
		case 3: yeniseviye = 600;
		case 4: yeniseviye = 750;
		default: yeniseviye = 0;
	}
	if(oyuncuData[playerid][balikseviye] != 5)
	{
		format(string, sizeof(string), "Balýk Tutma Tecrübe Puanýnýz: %d/%d", oyuncuData[playerid][balikexp], yeniseviye);
		SendClientMessage(playerid, RENK_KLASIK, string);
	}
	else if(oyuncuData[playerid][balikseviye] == 5)
	{
		SCM_Ex(playerid, RENK_KLASIK, "Maksimum seviyedesiniz, tecrübe puanýnýz daha fazla artmýyor.");
	}
	format(string, sizeof(string), "Balýk Tutma Ustalýk Seviyeniz: %d", oyuncuData[playerid][balikseviye]);
	SendClientMessage(playerid, RENK_KLASIK, string);
	return 1;
}

CMD:yemsatinal(playerid, params[])
{
	new yemsayisi, string[256];
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 130.8684,-1945.5778,6.0826)) return hataMesaji(playerid, "Balýkçý kulübesinde deðilsin, yem satýn alamazsýn.");
	if(sscanf(params, "d", yemsayisi)) return kullanimMesaji(playerid, "/yemsatinal [miktar]");
	if(yemsayisi < 1 || yemsayisi > 20) return hataMesaji(playerid, "Minimum 1, maksimum 20 yemi ayný anda satýn alabilirsin.");
	if(oyuncuData[playerid][oyemsayisi]+yemsayisi > SeviyeYem(oyuncuData[playerid][balikseviye])) return hataMesaji(playerid, "Maksimum %d yem taþýyabilirsiniz.", SeviyeYem(oyuncuData[playerid][balikseviye]));
	if(oyuncuData[playerid][oPara] < yemsayisi*YEM_FIYAT) return hataMesaji(playerid, "Yeterli miktarda paranýz yok.");
	ParaEkle(playerid, -yemsayisi*YEM_FIYAT);
	oyuncuData[playerid][oyemsayisi] += yemsayisi;
	format(string, sizeof(string), "%d tane yemi %d dolara satýn aldýnýz.", yemsayisi, yemsayisi*YEM_FIYAT);
	Log_Kaydet("loglar/balikmeslek.txt", "[%s] %s, %d adet yem satin aldi. Odedigi para: %s", Tarih(), OyuncuIsim(playerid), yemsayisi, NumaraFormati(yemsayisi * YEM_FIYAT));
	SendClientMessage(playerid, RENK_KLASIK, string);
	return 1;
}

CMD:baliktut(playerid, params[])
{
	if(baliktutuyor[playerid] == true) return hataMesaji(playerid, "Zaten þu anda balýk tutuyorsunuz.");
	if(BalikTutmaYakin(playerid) == 0) return hataMesaji(playerid, "Balýk tutma noktalarýndan birinde deðilsin.");
	if (IsPlayerInAnyVehicle(playerid))	return hataMesaji(playerid, "Araçta balýk tutamazsýnýz.");
	if(oyuncuData[playerid][oBalikTutmaSinir] >= 75 && oyuncuData[playerid][oMeslekPaketi] < 1) return hataMesaji(playerid, "Yavaþ salla oltayý, denizde balýk býrakmadýn! ((Limite ulaþýldý, biraz dinlen.))");
	if(BalikSayisi(playerid) >= VipBalik(playerid, oyuncuData[playerid][oVIP])) return hataMesaji(playerid, "Sahip olabileceðiniz maksimum balýk sayýsýna ulaþtýnýz.(/balikdurum)");
	if(oyuncuData[playerid][oyemsayisi] < 1) return hataMesaji(playerid, "Balýk tutmadan önce balýkçý kulübesinden yem satýn almalýsýnýz.");
	if(oyuncuData[playerid][oBalikIzin] == true)
	{
		new icerik[120],kodcuk;
		kodcuk = GetPVarInt(playerid, "antibot");
		hataMesaji(playerid, "Balýk tutmaya devam edebilmek için kodu girmelisiniz.");
		format(icerik, sizeof(icerik), "Lütfen balýk tutabilmeye devam edebilmek için kodu girin {F5E600}(%d):", kodcuk);
		return ShowPlayerDialog(playerid, DIALOG_BALIKONAY, DIALOG_STYLE_INPUT, "Anti-Bot",icerik, "Tamam", "Iptal");
	}
	new rand = random(5);
	if(rand == 2) {
		new kod,icerik[180];
		kod = KodOlustur();
		format(icerik, sizeof(icerik), "Lütfen balýk tutabilmeye devam edebilmek için kodu girin {F5E600}(%d):", kod);
		SetPVarInt(playerid, "antibot", kod);
		ShowPlayerDialog(playerid, DIALOG_BALIKONAY, DIALOG_STYLE_INPUT, "Anti-Bot",icerik, "Tamam", "Iptal");
		return SunucuMesaji(playerid, "Lütfen dialog ekranýna belirtilen kodu giriniz.");
	}
	oyuncuData[playerid][oyemsayisi]--;
	SendClientMessage(playerid, RENK_GRI, "Balýk tutuyorsunuz...");
	baliktutuyor[playerid] = true;
	TogglePlayerControllable(playerid, 0);
	ApplyAnimation(playerid,"SWORD","sword_block",50.0,0,1,0,1,1);
	oyuncuData[playerid][oBalikTutmaTimer] = SetTimerEx("OyuncuBalikTutuyor", 25 * 1000, false, "i", playerid);
	return 1;
}

CMD:balikdurum(playerid, params[])
{
	SendClientMessage(playerid, RENK_BEYAZ, "------------------------------------");
	SCM_Ex(playerid, RENK_GRI, "%d tane yeme sahipsin.", oyuncuData[playerid][oyemsayisi]);
	SCM_Ex(playerid, RENK_KLASIK, "%s: {FFFFFF}Üstünüzde %d tane bulunuyor.", BalikIsim(0), oyuncuData[playerid][oBalik][0]);
	SCM_Ex(playerid, RENK_KLASIK, "%s: {FFFFFF}Üstünüzde %d tane bulunuyor.", BalikIsim(1), oyuncuData[playerid][oBalik][1]);
	SCM_Ex(playerid, RENK_KLASIK, "%s: {FFFFFF}Üstünüzde %d tane bulunuyor.", BalikIsim(2), oyuncuData[playerid][oBalik][2]);
	SCM_Ex(playerid, RENK_KLASIK, "%s: {FFFFFF}Üstünüzde %d tane bulunuyor.", BalikIsim(3), oyuncuData[playerid][oBalik][3]);
	SCM_Ex(playerid, RENK_YESIL, "Ýnci: {FFFFFF}Üstünüzde %d tane bulunuyor.", oyuncuData[playerid][oBalik][4]);
	SendClientMessage(playerid, RENK_BEYAZ, "------------------------------------");
	return 1;
}

CMD:baliksat(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 130.8684,-1945.5778,6.0826)) return hataMesaji(playerid, "Balýkçý kulübesinde deðilsin, balýklarýný satamazsýn.");
	if(BalikSayisi(playerid) < 1) return hataMesaji(playerid, "Balýðýn yok, satamazsýn.");
	new parabir = oyuncuData[playerid][oBalik][0] * SAZANSATIS, paraiki = oyuncuData[playerid][oBalik][1] * SOMBALIGISATIS, parauc = oyuncuData[playerid][oBalik][2] * LEVREKSATIS, paradort = oyuncuData[playerid][oBalik][3] * ORKINOSSATIS;
	new parabes = oyuncuData[playerid][oBalik][4] * INCISATIS, paratoplam = parabir + paraiki + parauc + paradort + parabes;
	if(oyuncuData[playerid][oMeslekPaketi] < 1)
	{
		ParaEkle(playerid, paratoplam);
		SCM_Ex(playerid, RENK_KLASIK, ">> {FFFFFF}%d tane balýk sattýn ve toplam %s kazandýn.", BalikSayisi(playerid), NumaraFormati(paratoplam));
		Log_Kaydet("loglar/balikmeslek.txt", "[%s] %s, %d adet balik satti. Aldigi para: %s", Tarih(), OyuncuIsim(playerid), BalikSayisi(playerid), NumaraFormati(paratoplam));
	}
	else
	{
		ParaEkle(playerid, paratoplam + YuzdeHesapla(paratoplam, MESLEK_PAKET_YUZDE));
		SCM_Ex(playerid, RENK_KLASIK, ">> {FFFFFF}%d tane balýk sattýn ve toplam %s kazandýn.", BalikSayisi(playerid), NumaraFormati(paratoplam + YuzdeHesapla(paratoplam, MESLEK_PAKET_YUZDE)));
		Log_Kaydet("loglar/balikmeslek.txt", "[%s] %s, %d adet balik satti. Aldigi para: %s", Tarih(), OyuncuIsim(playerid), BalikSayisi(playerid), NumaraFormati(paratoplam + YuzdeHesapla(paratoplam, MESLEK_PAKET_YUZDE)));
	}
	oyuncuData[playerid][oBalik][0] = 0;
	oyuncuData[playerid][oBalik][1] = 0;
	oyuncuData[playerid][oBalik][2] = 0;
	oyuncuData[playerid][oBalik][3] = 0;
	oyuncuData[playerid][oBalik][4] = 0;
	new query[200];
	mysql_format(g_SQL, query, sizeof(query), "UPDATE `oyuncular` SET `Balik0` = %d, `Balik1` = %d, `Balik2` = %d, `Balik3` = %d, `Balik4` = %d WHERE `isim` = '%e'", oyuncuData[playerid][oBalik][0],oyuncuData[playerid][oBalik][1],oyuncuData[playerid][oBalik][2],oyuncuData[playerid][oBalik][3],oyuncuData[playerid][oBalik][4],oyuncuData[playerid][oIsim]);
	mysql_query(g_SQL, query);
	return 1;
}

CMD:yetenekpuaniayarla(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 8) return YetkinizYok(playerid);
	new oyuncuid, puan;
	if(sscanf(params, "ud", oyuncuid, puan)) return kullanimMesaji(playerid, "/yetenekpuaniver [oyuncuid] [puan]");
	oyuncuData[oyuncuid][oYetenekPuani] = puan;
	SunucuMesaji(oyuncuid, "%s adlý yetkili yetenek puanýnýzý %d olarak ayarladý.", OyuncuIsim(playerid), puan);
	SunucuMesaji(playerid, "%s adlý oyuncunun yetenek puanýný admin komutuyla %d olarak ayarladýnýz.", OyuncuIsim(oyuncuid), puan);
	OyuncuKaydet(oyuncuid);
	return 1;
}

CMD:yetenek(playerid)
{
	new string[128];
	format(string, sizeof(string), "%d/3", oyuncuData[playerid][oLiderlikYetenekEXP]);
	PlayerTextDrawSetString(playerid, yetenekdraw[playerid][1], string);
	format(string, sizeof(string), "%d/3", oyuncuData[playerid][oHirsizlikYetenekEXP]);
	PlayerTextDrawSetString(playerid, yetenekdraw[playerid][2], string);
	format(string, sizeof(string), "%d/3", oyuncuData[playerid][oSurusYetenekEXP]);
	PlayerTextDrawSetString(playerid, yetenekdraw[playerid][3], string);
	format(string, sizeof(string), "%d/3", oyuncuData[playerid][oUretimYetenekEXP]);
	PlayerTextDrawSetString(playerid, yetenekdraw[playerid][4], string);
	if(oyuncuData[playerid][oGucYetenek] == 0)
	{
		format(string, sizeof(string), "%d/1000", oyuncuData[playerid][oGucYetenekEXP]);
		PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
	}
	else if(oyuncuData[playerid][oGucYetenek] == 1)
	{
		format(string, sizeof(string), "%d/2000", oyuncuData[playerid][oGucYetenekEXP]);
		PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
	}
	else if(oyuncuData[playerid][oGucYetenek] == 2)
	{
		format(string, sizeof(string), "%d/3000", oyuncuData[playerid][oGucYetenekEXP]);
		PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
	}
	else if(oyuncuData[playerid][oGucYetenek] == 3)
	{
		format(string, sizeof(string), "%d/4000", oyuncuData[playerid][oGucYetenekEXP]);
		PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
	}
	else if(oyuncuData[playerid][oGucYetenek] == 4)
	{
		format(string, sizeof(string), "%d/5000", oyuncuData[playerid][oGucYetenekEXP]);
		PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
	}
	else if(oyuncuData[playerid][oGucYetenek] == 5)
	{
		format(string, sizeof(string), "%d/6000", oyuncuData[playerid][oGucYetenekEXP]);
		PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
	}
	else if(oyuncuData[playerid][oGucYetenek] == 6)
	{
		format(string, sizeof(string), "%d/7000", oyuncuData[playerid][oGucYetenekEXP]);
		PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
	}
	else if(oyuncuData[playerid][oGucYetenek] == 7)
	{
		format(string, sizeof(string), "%d/8000", oyuncuData[playerid][oGucYetenekEXP]);
		PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
	}
	else if(oyuncuData[playerid][oGucYetenek] == 8)
	{
		format(string, sizeof(string), "%d/9000", oyuncuData[playerid][oGucYetenekEXP]);
		PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
	}
	else if(oyuncuData[playerid][oGucYetenek] == 9)
	{
		format(string, sizeof(string), "%d/10000", oyuncuData[playerid][oGucYetenekEXP]);
		PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
	}
	else if(oyuncuData[playerid][oGucYetenek] == 10)
	{
		format(string, sizeof(string), "%d/11000", oyuncuData[playerid][oGucYetenekEXP]);
		PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
	}
	else if(oyuncuData[playerid][oGucYetenek] == 11)
	{
		format(string, sizeof(string), "%d/12000", oyuncuData[playerid][oGucYetenekEXP]);
		PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
	}
	else if(oyuncuData[playerid][oGucYetenek] == 12)
	{
		format(string, sizeof(string), "%d/13000", oyuncuData[playerid][oGucYetenekEXP]);
		PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
	}
	else if(oyuncuData[playerid][oGucYetenek] == 13)
	{
		format(string, sizeof(string), "%d/14000", oyuncuData[playerid][oGucYetenekEXP]);
		PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
	}
	else if(oyuncuData[playerid][oGucYetenek] == 14)
	{
		format(string, sizeof(string), "%d/15000", oyuncuData[playerid][oGucYetenekEXP]);
		PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
	}
	else if(oyuncuData[playerid][oGucYetenek] == 15)
	{
		format(string, sizeof(string), "%d/16000", oyuncuData[playerid][oGucYetenekEXP]);
		PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
	}
	else if(oyuncuData[playerid][oGucYetenek] == 16)
	{
		format(string, sizeof(string), "%d/17000", oyuncuData[playerid][oGucYetenekEXP]);
		PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
	}
	else if(oyuncuData[playerid][oGucYetenek] == 17)
	{
		format(string, sizeof(string), "%d/18000", oyuncuData[playerid][oGucYetenekEXP]);
		PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
	}
	else if(oyuncuData[playerid][oGucYetenek] == 18)
	{
		format(string, sizeof(string), "%d/19000", oyuncuData[playerid][oGucYetenekEXP]);
		PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
	}
	else if(oyuncuData[playerid][oGucYetenek] == 19)
	{
		format(string, sizeof(string), "%d/20000", oyuncuData[playerid][oGucYetenekEXP]);
		PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
	}
	else if(oyuncuData[playerid][oGucYetenek] == 20)
	{
		format(string, sizeof(string), "MAX");
		PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
	}

	if(oyuncuData[playerid][oDayaniklilik] == 0)
	{
		format(string, sizeof(string), "%d/1000", oyuncuData[playerid][oDayaniklilikEXP]);
		PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
	}
	else if(oyuncuData[playerid][oDayaniklilik] == 1)
	{
		format(string, sizeof(string), "%d/2000", oyuncuData[playerid][oDayaniklilikEXP]);
		PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
	}
	else if(oyuncuData[playerid][oDayaniklilik] == 2)
	{
		format(string, sizeof(string), "%d/3000", oyuncuData[playerid][oDayaniklilikEXP]);
		PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
	}
	else if(oyuncuData[playerid][oDayaniklilik] == 3)
	{
		format(string, sizeof(string), "%d/4000", oyuncuData[playerid][oDayaniklilikEXP]);
		PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
	}
	else if(oyuncuData[playerid][oDayaniklilik] == 4)
	{
		format(string, sizeof(string), "%d/5000", oyuncuData[playerid][oDayaniklilikEXP]);
		PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
	}
	else if(oyuncuData[playerid][oDayaniklilik] == 5)
	{
		format(string, sizeof(string), "%d/6000", oyuncuData[playerid][oDayaniklilikEXP]);
		PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
	}
	else if(oyuncuData[playerid][oDayaniklilik] == 6)
	{
		format(string, sizeof(string), "%d/7000", oyuncuData[playerid][oDayaniklilikEXP]);
		PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
	}
	else if(oyuncuData[playerid][oDayaniklilik] == 7)
	{
		format(string, sizeof(string), "%d/8000", oyuncuData[playerid][oDayaniklilikEXP]);
		PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
	}
	else if(oyuncuData[playerid][oDayaniklilik] == 8)
	{
		format(string, sizeof(string), "%d/9000", oyuncuData[playerid][oDayaniklilikEXP]);
		PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
	}
	else if(oyuncuData[playerid][oDayaniklilik] == 9)
	{
		format(string, sizeof(string), "%d/10000", oyuncuData[playerid][oDayaniklilikEXP]);
		PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
	}
	else if(oyuncuData[playerid][oDayaniklilik] == 10)
	{
		format(string, sizeof(string), "%d/11000", oyuncuData[playerid][oDayaniklilikEXP]);
		PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
	}
	else if(oyuncuData[playerid][oDayaniklilik] == 11)
	{
		format(string, sizeof(string), "%d/12000", oyuncuData[playerid][oDayaniklilikEXP]);
		PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
	}
	else if(oyuncuData[playerid][oDayaniklilik] == 12)
	{
		format(string, sizeof(string), "%d/13000", oyuncuData[playerid][oDayaniklilikEXP]);
		PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
	}
	else if(oyuncuData[playerid][oDayaniklilik] == 13)
	{
		format(string, sizeof(string), "%d/14000", oyuncuData[playerid][oDayaniklilikEXP]);
		PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
	}
	else if(oyuncuData[playerid][oDayaniklilik] == 14)
	{
		format(string, sizeof(string), "%d/15000", oyuncuData[playerid][oDayaniklilikEXP]);
		PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
	}
	else if(oyuncuData[playerid][oDayaniklilik] == 15)
	{
		format(string, sizeof(string), "%d/16000", oyuncuData[playerid][oDayaniklilikEXP]);
		PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
	}
	else if(oyuncuData[playerid][oDayaniklilik] == 16)
	{
		format(string, sizeof(string), "%d/17000", oyuncuData[playerid][oDayaniklilikEXP]);
		PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
	}
	else if(oyuncuData[playerid][oDayaniklilik] == 17)
	{
		format(string, sizeof(string), "%d/18000", oyuncuData[playerid][oDayaniklilikEXP]);
		PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
	}
	else if(oyuncuData[playerid][oDayaniklilik] == 18)
	{
		format(string, sizeof(string), "%d/19000", oyuncuData[playerid][oDayaniklilikEXP]);
		PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
	}
	else if(oyuncuData[playerid][oDayaniklilik] == 19)
	{
		format(string, sizeof(string), "%d/20000", oyuncuData[playerid][oDayaniklilikEXP]);
		PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
	}
	else if(oyuncuData[playerid][oDayaniklilik] == 20)
	{
		format(string, sizeof(string), "MAX");
		PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
	}
	format(string, sizeof(string), "%d/3", oyuncuData[playerid][oKimyaYetenekEXP]);
	PlayerTextDrawSetString(playerid, yetenekdraw[playerid][7], string);
	format(string, sizeof(string), "%d", YetenekEXPToplami(playerid));
	PlayerTextDrawSetString(playerid, yetenekdraw[playerid][8], string);

	format(string, sizeof(string), "%d", oyuncuData[playerid][oLiderlikYetenek]);
	PlayerTextDrawSetString(playerid, yetenekdraw[playerid][9], string);
	format(string, sizeof(string), "%d", oyuncuData[playerid][oHirsizlikYetenek]);
	PlayerTextDrawSetString(playerid, yetenekdraw[playerid][10], string);
	format(string, sizeof(string), "%d", oyuncuData[playerid][oSurusYetenek]);
	PlayerTextDrawSetString(playerid, yetenekdraw[playerid][11], string);
	format(string, sizeof(string), "%d", oyuncuData[playerid][oUretimYetenek]);
	PlayerTextDrawSetString(playerid, yetenekdraw[playerid][12], string);
	format(string, sizeof(string), "%d", oyuncuData[playerid][oGucYetenek]);
	PlayerTextDrawSetString(playerid, yetenekdraw[playerid][13], string);
	format(string, sizeof(string), "%d", oyuncuData[playerid][oDayaniklilik]);
	PlayerTextDrawSetString(playerid, yetenekdraw[playerid][14], string);
	format(string, sizeof(string), "%d", oyuncuData[playerid][oKimyaYetenek]);
	PlayerTextDrawSetString(playerid, yetenekdraw[playerid][15], string);
	format(string, sizeof(string), "%d", YetenekSeviyeToplami(playerid));
	PlayerTextDrawSetString(playerid, yetenekdraw[playerid][16], string);

	format(string, sizeof(string), "%d", oyuncuData[playerid][oYetenekPuani]);
	PlayerTextDrawSetString(playerid, yetenekdraw[playerid][17], string);

	format(string, sizeof(string), "%s", oyuncuData[playerid][oIsim]);
	PlayerTextDrawSetString(playerid, yetenekdraw[playerid][18], string);

	PlayerTextDrawShow(playerid, yetenekdraw[playerid][0]);
	PlayerTextDrawShow(playerid, yetenekdraw[playerid][1]);
	PlayerTextDrawShow(playerid, yetenekdraw[playerid][2]);
	PlayerTextDrawShow(playerid, yetenekdraw[playerid][3]);
	PlayerTextDrawShow(playerid, yetenekdraw[playerid][4]);
	PlayerTextDrawShow(playerid, yetenekdraw[playerid][5]);
	PlayerTextDrawShow(playerid, yetenekdraw[playerid][6]);
	PlayerTextDrawShow(playerid, yetenekdraw[playerid][7]);
	PlayerTextDrawShow(playerid, yetenekdraw[playerid][8]);
	PlayerTextDrawShow(playerid, yetenekdraw[playerid][9]);
	PlayerTextDrawShow(playerid, yetenekdraw[playerid][10]);
	PlayerTextDrawShow(playerid, yetenekdraw[playerid][11]);
	PlayerTextDrawShow(playerid, yetenekdraw[playerid][12]);
	PlayerTextDrawShow(playerid, yetenekdraw[playerid][13]);
	PlayerTextDrawShow(playerid, yetenekdraw[playerid][14]);
	PlayerTextDrawShow(playerid, yetenekdraw[playerid][15]);
	PlayerTextDrawShow(playerid, yetenekdraw[playerid][16]);
	PlayerTextDrawShow(playerid, yetenekdraw[playerid][17]);
	PlayerTextDrawShow(playerid, yetenekdraw[playerid][18]);
	if(oyuncuData[playerid][oYetenekPuani] > 0)
	{
		PlayerTextDrawShow(playerid, yetenekdraw[playerid][19]);
		PlayerTextDrawShow(playerid, yetenekdraw[playerid][20]);
		PlayerTextDrawShow(playerid, yetenekdraw[playerid][21]);
		PlayerTextDrawShow(playerid, yetenekdraw[playerid][22]);
		PlayerTextDrawShow(playerid, yetenekdraw[playerid][23]);
		PlayerTextDrawShow(playerid, yetenekdraw[playerid][24]);
		PlayerTextDrawShow(playerid, yetenekdraw[playerid][25]);
	}
	PlayerTextDrawShow(playerid, yetenekdraw[playerid][26]);
	SelectTextDraw(playerid, 0xFF0000FF);
	return 1;
}

CMD:yeteneksec(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 8) return YetkinizYok(playerid);
	new parametre[64];
	if(oyuncuData[playerid][oYetenekPuani] < 1) return hataMesaji(playerid, "Yetenek puanýnýz bulunmuyor, yetenek seçimi yapamazsýnýz.");
	if(sscanf(params, "s", parametre)) return kullanimMesaji(playerid, "/yeteneksec [yetenek] (Yetenekler: liderlik, surus, kimya, uretim, hirsizlik, trucker)");
	if(!strcmp(parametre, "liderlik", true))
	{
		if(oyuncuData[playerid][oLiderlikYetenek] == 10) return hataMesaji(playerid, "Bu yeteneði daha fazla yükseltemezsin.");
		oyuncuData[playerid][oYetenekPuani]--;
		oyuncuData[playerid][oLiderlikYetenekEXP]++;
		SunucuMesaji(playerid, "1 yetenek puanýný liderliðe verdin. Liderlik EXP: %d - EXP 3'e ulaþýrsa yeteneðiniz yükselir.", oyuncuData[playerid][oLiderlikYetenekEXP]);
		if(oyuncuData[playerid][oLiderlikYetenekEXP] == 3)
		{
			oyuncuData[playerid][oLiderlikYetenekEXP] = 0;
			oyuncuData[playerid][oLiderlikYetenek]++;
			SunucuMesaji(playerid, "Liderlik yeteneðiniz yükseldi! Yeni liderlik seviyeniz: %d", oyuncuData[playerid][oLiderlikYetenek]);
		}
	}
	else if(!strcmp(parametre, "surus", true))
	{
		if(oyuncuData[playerid][oSurusYetenek] == 5) return hataMesaji(playerid, "Bu yeteneði daha fazla yükseltemezsin.");
		oyuncuData[playerid][oYetenekPuani]--;
		oyuncuData[playerid][oSurusYetenekEXP]++;
		SunucuMesaji(playerid, "1 yetenek puanýný sürüþe verdin. Sürüþ EXP: %d - EXP 3'e ulaþýrsa yeteneðiniz yükselir.", oyuncuData[playerid][oSurusYetenekEXP]);
		if(oyuncuData[playerid][oSurusYetenekEXP] == 3)
		{
			oyuncuData[playerid][oSurusYetenekEXP] = 0;
			oyuncuData[playerid][oSurusYetenek]++;
			SunucuMesaji(playerid, "Sürüþ yeteneðiniz yükseldi! Yeni sürüþ seviyeniz: %d", oyuncuData[playerid][oSurusYetenek]);
		}
	}
	else if(!strcmp(parametre, "kimya", true))
	{
		if(oyuncuData[playerid][oKimyaYetenek] == 10) return hataMesaji(playerid, "Bu yeteneði daha fazla yükseltemezsin.");
		oyuncuData[playerid][oYetenekPuani]--;
		oyuncuData[playerid][oKimyaYetenekEXP]++;
		SunucuMesaji(playerid, "1 yetenek puanýný kimyaya verdin. Kimya EXP: %d - EXP 3'e ulaþýrsa yeteneðiniz yükselir.", oyuncuData[playerid][oKimyaYetenekEXP]);
		if(oyuncuData[playerid][oKimyaYetenekEXP] == 3)
		{
			oyuncuData[playerid][oKimyaYetenekEXP] = 0;
			oyuncuData[playerid][oKimyaYetenek]++;
			SunucuMesaji(playerid, "Kimya yeteneðiniz yükseldi! Yeni kimya seviyeniz: %d", oyuncuData[playerid][oKimyaYetenek]);
		}
	}
	else if(!strcmp(parametre, "uretim", true))
	{
		if(oyuncuData[playerid][oUretimYetenek] == 10) return hataMesaji(playerid, "Bu yeteneði daha fazla yükseltemezsin.");
		oyuncuData[playerid][oYetenekPuani]--;
		oyuncuData[playerid][oUretimYetenekEXP]++;
		SunucuMesaji(playerid, "1 yetenek puanýný üretime verdin. Üretim EXP: %d - EXP 3'e ulaþýrsa yeteneðiniz yükselir.", oyuncuData[playerid][oUretimYetenekEXP]);
		if(oyuncuData[playerid][oUretimYetenekEXP] == 3)
		{
			oyuncuData[playerid][oUretimYetenekEXP] = 0;
			oyuncuData[playerid][oUretimYetenek]++;
			SunucuMesaji(playerid, "Üretim yeteneðiniz yükseldi! Yeni üretim seviyeniz: %d", oyuncuData[playerid][oUretimYetenek]);
		}
	}
	else if(!strcmp(parametre, "hirsizlik", true))
	{
		if(oyuncuData[playerid][oHirsizlikYetenek] == 10) return hataMesaji(playerid, "Bu yeteneði daha fazla yükseltemezsin.");
		oyuncuData[playerid][oYetenekPuani]--;
		oyuncuData[playerid][oHirsizlikYetenekEXP]++;
		SunucuMesaji(playerid, "1 yetenek puanýný hýrsýzlýða verdin. Hýrsýzlýk EXP: %d - EXP 3'e ulaþýrsa yeteneðiniz yükselir.", oyuncuData[playerid][oHirsizlikYetenekEXP]);
		if(oyuncuData[playerid][oHirsizlikYetenekEXP] == 3)
		{
			oyuncuData[playerid][oHirsizlikYetenekEXP] = 0;
			oyuncuData[playerid][oHirsizlikYetenek]++;
			SunucuMesaji(playerid, "Hýrsýzlýk yeteneðiniz yükseldi! Yeni hýrsýzlýk seviyeniz: %d", oyuncuData[playerid][oHirsizlikYetenek]);
		}
	}
	else if(!strcmp(parametre, "trucker", true))
	{
		if(oyuncuData[playerid][oTruckerSeviye] == 10) return hataMesaji(playerid, "Bu yeteneði daha fazla yükseltemezsin.");
		oyuncuData[playerid][oYetenekPuani]--;
		oyuncuData[playerid][oTruckerEXP] += 5;
		SunucuMesaji(playerid, "1 yetenek puanýný trucker yeteneðine verdin ve 5 trucker EXP'si kazandýn.");
		if(oyuncuData[playerid][oTruckerEXP] > 9)
		{
			oyuncuData[playerid][oTruckerEXP] -= 10;
			oyuncuData[playerid][oTruckerSeviye]++;
			SunucuMesaji(playerid, "Trucker seviyesi yükseldi, %d seviyeye ulaþtýn.", oyuncuData[playerid][oTruckerSeviye]);
		}
	}
	OyuncuKaydet(playerid);
	return 1;
}

CMD:2xpayday(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 6) return YetkinizYok(playerid);
	if(IKIX_PAYDAY == false)
	{
		IKIX_PAYDAY = true;
		SunucuMesaji(playerid, "Ýki kat maaþ gelirini aktif ettiniz.(2X PAYDAY: [AÇIK])");
		SCM_ExAll(RENK_KLASIK, "2x Payday aktif edildi!");
	}
	else if(IKIX_PAYDAY == true)
	{
		IKIX_PAYDAY = false;
		SunucuMesaji(playerid, "Ýki kat maaþ gelirini kapattýnýz.(2X PAYDAY: [KAPALI])");
		SCM_ExAll(RENK_YETKILI, "2x Payday kapatýldý.");
	}
	return 1;
}

CMD:kulaklik(playerid, params[])
{
	if(oyuncuData[playerid][oKulaklik] < 1) return hataMesaji(playerid, "Kulaklýðýnýz yok.");
	if(oyuncuData[playerid][oKulaklikTakiyor] == false)
	{
		oyuncuData[playerid][oKulaklikTakiyor] = true;
		cmd(playerid, 1, "kulaklýklarýný takar.");
		SunucuMesaji(playerid, "Kulaklýklarýnýzý taktýnýz. Telefondan bir müzik açýp tek baþýnýza dinleyebilirsiniz.");
		kulakliklabeli[playerid] = CreateDynamic3DTextLabel("*Kulaklýk takýyor.*", RENK_BEYAZ, 0.0, 0.0, 0.0, 10.0,playerid); // Create3DTextLabel("*Kulaklýk takýyor.*", RENK_OZELKIRMIZI, 0.0, 0.0, 0.0, 9.0, 0, 0);
		//Attach3DTextLabelToPlayer(kulakliklabeli[playerid], playerid, 0.0, 0.0, 0.3);
	}
	else if(oyuncuData[playerid][oKulaklikTakiyor] == true)
	{
		if(oyuncuData[playerid][oMuzikDinliyor] == true) return StopAudioStreamForPlayer(playerid), cmd(playerid, 1, "müziði kapatýp kulaklýklarýný çýkartýr."), oyuncuData[playerid][oMuzikDinliyor] = false, DestroyDynamic3DTextLabel(kulakliklabeli[playerid]);
		oyuncuData[playerid][oKulaklikTakiyor] = false;
		cmd(playerid, 1, "kulaklýklarýný çýkartýr.");
		DestroyDynamic3DTextLabel(kulakliklabeli[playerid]);
	}
	return 1;
}

CMD:rehberdensil(playerid, params[])
{
	new string[128], slot;
	if(oyuncuData[playerid][oTelefon] < 1) return hataMesaji(playerid, "Telefonunuz yok.");
	if(oyuncuData[playerid][oTelefonDurum] == false) return hataMesaji(playerid, "Telefonunuz kapalýyken rehberden silme iþlemini yapamazsýnýz.");
	if(sscanf(params, "d", slot)) return kullanimMesaji(playerid, "/rehberdensil [slot] - Slotlarý görmek için telefon menüsünü kullanýn.(/telefon)");
	if(!RehberBilgi[playerid][slot][rehberkullanimda]) return SunucuMesaji(playerid, "Girdiðiniz slot zaten boþ.");
	mysql_format(g_SQL, string, sizeof(string), "DELETE FROM `rehberler` WHERE `ID` = '%d' AND `rehberID` = '%d'", oyuncuData[playerid][oID], RehberBilgi[playerid][slot][rehberID]);
	mysql_tquery(g_SQL, string);
	SunucuMesaji(playerid, "%d numaralý slottan %s ismiyle kayýtlý %d numarasýný sildiniz.", slot, RehberBilgi[playerid][slot][rehberisim], RehberBilgi[playerid][slot][rehbernumara]);
	RehberBilgi[playerid][slot][rehberkullanimda] = false;
	RehberBilgi[playerid][slot][rehbernumara] = 0;
	RehberBilgi[playerid][slot][rehberID] = 0;
	format(RehberBilgi[playerid][slot][rehberisim], 32, "-");
	return 1;
}

CMD:rehberekaydet(playerid, params[])
{
	if(oyuncuData[playerid][oTelefon] == 0) return hataMesaji(playerid, "Telefonunuz yok.");
	if(oyuncuData[playerid][oTelefonDurum] == false) return hataMesaji(playerid, "Telefonunuz kapalýyken rehbere kayýt iþlemini yapamazsýnýz.");
	static slot, numara, isim[32];
	if(sscanf(params, "dds[32]", slot, numara, isim)) return kullanimMesaji(playerid, "/rehberekaydet [slot] [numara] [isim]");
	if(slot < 1 || slot > 20) return hataMesaji(playerid, "Geçersiz slot girdiniz. Maksimum slot 20, minimum slot 1.");
	if(numara < 100000 || numara > 9999999) return hataMesaji(playerid, "Girdiðiniz telefon numarasý 6 veya 7 haneli olmalýdýr.");
	RehbereEkle(playerid, slot, numara, isim);
	return 1;
}

CMD:teleport(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 1) return YetkinizYok(playerid);
	static yer[64];
	if(sscanf(params, "s[64]", yer)) return kullanimMesaji(playerid, "/teleport [yer] - oceanview, sunshine, blueberry, montgomery, idlewood, eastls"), kullanimMesaji(playerid, "littleitaly, viceport, malibu, oceandocks");

	if(!strcmp(yer, "oceanview", true))
	{
		if(IsPlayerInAnyVehicle(playerid)) {
			SetVehiclePos(GetPlayerVehicleID(playerid), 378.1522,-1762.8171,8.0422);
		}
		else SetPlayerPos(playerid, 378.1522,-1762.8171,8.0422);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		SunucuMesaji(playerid, "Ocean View Hotel'a ýþýnlandýn.");
	}
	if(!strcmp(yer, "sunshine", true))
	{
		if(IsPlayerInAnyVehicle(playerid)) {
			SetVehiclePos(GetPlayerVehicleID(playerid), 909.1378,-1726.2515,13.5469);
		}
		else SetPlayerPos(playerid, 909.1378,-1726.2515,13.5469);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		SunucuMesaji(playerid, "Sunshine Autos'a ýþýnlandýn.");
	}
	if(!strcmp(yer, "blueberry", true))
	{
		if(IsPlayerInAnyVehicle(playerid)) {
			SetVehiclePos(GetPlayerVehicleID(playerid), 181.4371,-130.0258,1.5746);
		}
		else SetPlayerPos(playerid, 181.4371,-130.0258,1.5746);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		SunucuMesaji(playerid, "Blueberry'e ýþýnlandýn.");
	}
	if(!strcmp(yer, "montgomery", true))
	{
		if(IsPlayerInAnyVehicle(playerid)) {
			SetVehiclePos(GetPlayerVehicleID(playerid), 1291.0955,269.9122,19.5547);
		}
		else SetPlayerPos(playerid, 1291.0955,269.9122,19.5547);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		SunucuMesaji(playerid, "Montgomery'e ýþýnlandýn.");
	}
	if(!strcmp(yer, "idlewood", true))
	{
		if(IsPlayerInAnyVehicle(playerid)) {
			SetVehiclePos(GetPlayerVehicleID(playerid), 2079.0566,-1776.6274,13.5469);
		}
		else SetPlayerPos(playerid, 2079.0566,-1776.6274,13.5469);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		SunucuMesaji(playerid, "Idlewood'a ýþýnlandýn.");
	}
	if(!strcmp(yer, "eastls", true))
	{
		if(IsPlayerInAnyVehicle(playerid)) {
			SetVehiclePos(GetPlayerVehicleID(playerid), 2458.3025,-1436.7368,23.9518);
		}
		else SetPlayerPos(playerid, 2458.3025,-1436.7368,23.9518);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		SunucuMesaji(playerid, "East LS'e ýþýnlandýn.");
	}
	if(!strcmp(yer, "littleitaly", true))
	{
		if(IsPlayerInAnyVehicle(playerid)) {
			SetVehiclePos(GetPlayerVehicleID(playerid), 1089.3749,-1700.2115,14.3291);
		}
		else SetPlayerPos(playerid, 1089.3749,-1700.2115,14.3291);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		SunucuMesaji(playerid, "Little Italy'e ýþýnlandýn.");
	}
	if(!strcmp(yer, "viceport", true))
	{
		if(IsPlayerInAnyVehicle(playerid)) {
			SetVehiclePos(GetPlayerVehicleID(playerid), 143.8496,-1960.7256,4.9926);
		}
		else SetPlayerPos(playerid, 143.8496,-1960.7256,4.9926);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		SunucuMesaji(playerid, "VicePort'a ýþýnlandýn.");
	}
	if(!strcmp(yer, "malibu", true))
	{
		if(IsPlayerInAnyVehicle(playerid)) {
			SetVehiclePos(GetPlayerVehicleID(playerid), 467.0401,-1828.9431,5.5122);
		}
		else SetPlayerPos(playerid, 467.0401,-1828.9431,5.5122);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		SunucuMesaji(playerid, "Malibu'ya ýþýnlandýn.");
	}
	if(!strcmp(yer, "oceandocks", true))
	{
		if(IsPlayerInAnyVehicle(playerid)) {
			SetVehiclePos(GetPlayerVehicleID(playerid), 2749.2122,-2492.1970,13.6432);
		}
		else SetPlayerPos(playerid, 2749.2122,-2492.1970,13.6432);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		SunucuMesaji(playerid, "OceanDocks'a ýþýnlandýn.");
	}
	return 1;
}

CMD:supportyardim(playerid, params[])
{
	if(oyuncuData[playerid][oHelper] < 1) return YetkinizYok(playerid);
	SendClientMessage(playerid, RENK_KLASIK, "Support Komutlarý: {FFFFFF}/sk /supportisbasi /reklamlar /reklamonay /reklamreddet");
	SendClientMessage(playerid, RENK_KLASIK, "Support iþbaþýný önemli durumlar ve rolleriniz dýþýnda 'müsait deðil' olarak ayarlamayýn.");
	return 1;
}

CMD:supportyap(playerid, params[])
{
	static oyuncuid, seviye;
	if(oyuncuData[playerid][oAdmin] < 8) return YetkinizYok(playerid);
	if(sscanf(params, "ud", oyuncuid, seviye)) return SendClientMessage(playerid, RENK_KLASIK, "KULLANIM: {FFFFFF}/supportyap [id] [seviye]");
	if(seviye < 0 || seviye > 4) return SendClientMessage(playerid, RENK_KLASIK, "Minimum 0, maksimum 4 seviye support yapabilirsiniz.");
	if(!IsPlayerConnected(oyuncuid)) return SendClientMessage(playerid, RENK_KLASIK, "ID'sini girdiðiniz kiþi oyunda deðil.");
	static isim[MAX_PLAYER_NAME];
	GetPlayerName(oyuncuid, isim, sizeof(isim));
	oyuncuData[oyuncuid][oHelper] = seviye;
	oyuncuData[oyuncuid][oHelperIsbasi] = true;
	new string[128];
	format(string, sizeof(string), "%s adlý oyuncuya %d seviye support yetkisi verdiniz.", OyuncuIsim(oyuncuid), seviye);
	SendClientMessage(playerid, RENK_KLASIK, string);
	format(string, sizeof(string), "%s adlý yetkili size %d seviye support yetkisi verdi.", OyuncuIsim(playerid), seviye);
	SendClientMessage(oyuncuid, RENK_KLASIK, string);
	OyuncuKaydet(oyuncuid);
	return 1;
}

CMD:support(playerid)
{
	static sayi = 0;
	foreach (new i : Player) if(oyuncuData[i][oHelper] > 0)
	{
		if(oyuncuData[i][oHelperIsbasi] == true) {
			new string[512];
			format(string, sizeof(string), "%s(ID: %d) isimli support, seviye %d {FFFFFF}(Müsait)", OyuncuIsim(i), i, oyuncuData[i][oHelper]);
			SendClientMessage(playerid, RENK_KLASIK, string);
			sayi++;
		}
		else if(oyuncuData[i][oHelperIsbasi] == false) {
			new string[512];
			format(string, sizeof(string), "%s(ID: %d) isimli support, seviye %d {FF6347}(Müsait deðil)", OyuncuIsim(i), i, oyuncuData[i][oHelper]);
			SendClientMessage(playerid, RENK_KLASIK, string);
			sayi++;
		}
	}
	if(!sayi) SendClientMessage(playerid, RENK_KLASIK, "Sunucuda aktif support bulunmuyor.");
	return 1;
}

CMD:helperisbasi(playerid)
{
	if(oyuncuData[playerid][oHelper] < 1) return SendClientMessage(playerid, RENK_KLASIK, "Yetkiniz yok.");
	if(oyuncuData[playerid][oHelperIsbasi] == true)
	{
		oyuncuData[playerid][oHelperIsbasi] = false;
		SendClientMessage(playerid, RENK_KLASIK, "Support iþbaþý durumunuz 'müsait deðil' olarak ayarlandý.");
	}
	else if(oyuncuData[playerid][oHelperIsbasi] == false)
	{
		oyuncuData[playerid][oHelperIsbasi] = true;
		SendClientMessage(playerid, RENK_KLASIK, "Support iþbaþý durumunuz 'müsait' olarak ayarlandý.");
	}
	return 1;
}

CMD:akilit(playerid, params[])
{
	static id, Float:X,Float:Y,Float:Z;
	if(sscanf(params, "d", id)) return kullanimMesaji(playerid, "/akilit [araç id]");
	if(!IsValidVehicle(id) || Arac_IDBul(id) == -1) return hataMesaji(playerid, "Geçersiz araç.");
	if(Arac_Birlik(playerid, id) || Arac_SahipKontrol(playerid, id) || ItemAnahtarKontrol(playerid, AracBilgi[id][aracID]))
	{
		GetPlayerPos(playerid, X,Y,Z);
		if(GetVehicleDistanceFromPoint(id, X,Y, Z) > 3.0) return hataMesaji(playerid, "Belirtilen araca çok uzaktasýnýz.");
		static engine, lights, alarm, doors, bonnet, boot, objective;
		GetVehicleParamsEx(AracBilgi[id][aracYarat], engine, lights, alarm, doors, bonnet, boot, objective);
		if(!AracBilgi[id][aracKilit])
		{
			AracBilgi[id][aracKilit] = true;
			Arac_Kaydet(id);
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
			SetVehicleParamsEx(AracBilgi[id][aracYarat], engine, lights, alarm, 1, bonnet, boot, objective);
			cmd(playerid, 1, "yanýndaki aracý kilitler.");
		}
		else
		{
			AracBilgi[id][aracKilit] = false;
			Arac_Kaydet(id);
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
			cmd(playerid, 1, "yanýndaki aracýn kilidini açar.");
			SetVehicleParamsEx(AracBilgi[id][aracYarat], engine, lights, alarm, 0, bonnet, boot, objective);
		}
	}
	else
	{
		hataMesaji(playerid, "Bu aracýn sahibi deðilsiniz.");
	}
	return 1;
}

stock satilmaHatasi(playerid, hatagonder)
{
	switch(hatagonder)
	{
		case 1:hataMesaji(playerid, "Araç plakasýnda ceza kaydý mevcut, satýþý yapýlamaz.");
		case 2:hataMesaji(playerid, "Araç plakasýnda vergi borcu mevcut, satýþý yapýlamaz.");
	}
	return 1;
}

CMD:arac(playerid, params[])
{
	if(GetPVarInt(playerid,"oyuncuyayinda") == 1) return false;
	new yazi[30], islev = 0;
	if(sscanf(params, "s[30]", yazi)) return kullanimMesaji(playerid, "/arac [parametre]"), SendClientMessage(playerid, RENK_SARI, "[PARAMETRELER]:{FFFFFF} kaput, bagaj, far, kilit, motor, kirala, satinal, sistemesat, benzin, yedekanahtar, anahtarsifirla, radyo, bagajdurum"), SendClientMessage(playerid, RENK_SARI, "[PARAMETRELER]:{FFFFFF} firmaekle, firmacikar");
	if (!strcmp(yazi, "kaput", true))
	{
		foreach(new i : Araclar) if(IsValidVehicle(i) && IsPlayerNearHood(playerid, i) && (Arac_Birlik(playerid, i) || Arac_SahipKontrol(playerid, i) || Arac_Anahtar(playerid, i) || ItemAnahtarKontrol(playerid, AracBilgi[i][aracID])))
		{
			if(!IsDoorVehicle(i))
				return hataMesaji(playerid, "Bu aracýn bir kaputu yok.");

			if(!GetHoodStatus(i))
			{
				SetHoodStatus(i, true);
				cmd(playerid, 1, "sað eliyle aracýn kaputunu açar.");
			}
			else
			{
				SetHoodStatus(i, false);
				cmd(playerid, 1, "sað eliyle aracýn kaputunu kapatýr.");
			}
			return true;
		}
		hataMesaji(playerid, "Etrafýnda kontrol edebileceðin herhangi bir araç yok.");
		islev++;
	}
	else if (!strcmp(yazi, "bagajdurum", true))
	{
		new id = -1;
		if((id = Arac_Yakin(playerid)) != -1)
		{
			if(GetTrunkStatus(AracBilgi[id][aracYarat]))
			{
				SetTrunkStatus(AracBilgi[id][aracYarat], false);
			}
			else
			{
				SetTrunkStatus(AracBilgi[id][aracYarat], true);
			}
		}
	}
	else if (!strcmp(yazi, "sistemesat", true))
	{
		if(oyuncuData[playerid][oSatisYapiyor] == true) return hataMesaji(playerid, "Þu anda bir satýþ iþlemi gerçekleþtiriyorsunuz.");
		if(!IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu komutu kullanmak için araçta olmalýsýn.");
		new aracid = GetPlayerVehicleID(playerid);//, aracsatilmadurumu = Arac_PlakaCeza(AracBilgi[GetPlayerVehicleID(playerid)][aracPlaka]);

		if(!Arac_SahipKontrol(playerid, aracid)) return hataMesaji(playerid, "Bu aracýn sahibi deðilsin.");
		
		//if(!IsPlayerInRangeOfPoint(playerid, 5.0, 973.3214,-1739.9381,13.5469)) return hataMesaji(playerid, "Araç satým noktasýnda deðilsin.");
		if(!IsPlayerInRangeOfPoint(playerid, 5.0, 549.1940,-1286.0798,17.2482)) return hataMesaji(playerid, "Araç satým noktasýnda deðilsin.");
		//if(aracsatilmadurumu != 0) return satilmaHatasi(playerid, aracsatilmadurumu);
		if(AracBilgi[aracid][aracVergi] > 0) return hataMesaji(playerid, "Vergisi ödenmemiþ aracý satamazsýn.");
		new string[210]; 
		new index = FiyatIndexCek(GetVehicleModel(aracid)), aracmodeli = GetVehicleModel(aracid);
		if(oyuncuData[playerid][oEkonomiPaketi] < 1)
		{
		format(string, sizeof string, "%s model aracýný %d dolar karþýlýðýnda galeriye satmak istiyor musun?", AracModel(aracmodeli), YuzdeHesapla(SatilikAraclar[index][1], SERVER_YUZDE));
		}
		else
		{
		format(string, sizeof string, "%s model aracýný %d dolar karþýlýðýnda galeriye satmak istiyor musun?", AracModel(aracmodeli), YuzdeHesapla(SatilikAraclar[index][1], VIP_YUZDE));
		}
		ShowPlayerDialog(playerid, DIALOG_ARAC_SISTEME_SAT, DIALOG_STYLE_MSGBOX, "> Aracý Sisteme Sat", string, "Evet", "Ýptal");
		islev++;
	}
	else if (!strcmp(yazi, "firmaekle", true))
	{
		if(!IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Sahibi olduðun bir araçta olmalýsýn.");
		new id = GetPlayerVehicleID(playerid);
		if(!Arac_SahipKontrol(playerid, id)) return hataMesaji(playerid, "Sahibi olduðun bir araçta olmalýsýn.");
		if(AracBilgi[id][aracFirma] != -1) return hataMesaji(playerid, "Bu araç zaten bir firmaya baðlý.(/arac firmacikar)");
		if(oyuncuData[playerid][oFirma] == -1) return hataMesaji(playerid, "Bir firmada deðilsin.");
		AracBilgi[id][aracFirma] = oyuncuData[playerid][oFirma];
		SunucuMesaji(playerid, "Aracýnýz firmaya eklendi.");
		islev++;
	}
	else if(!strcmp(yazi, "firmacikar", true))
	{
		if(!IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Sahibi olduðun bir araçta olmalýsýn.");
		new id = GetPlayerVehicleID(playerid);
		if(!Arac_SahipKontrol(playerid, id)) return hataMesaji(playerid, "Sahibi olduðun bir araçta olmalýsýn.");
		if(AracBilgi[id][aracFirma] == -1) return hataMesaji(playerid, "Bu araç bir firmaya baðlý deðil.");
		AracBilgi[id][aracFirma] = -1;
		SunucuMesaji(playerid, "Aracýnýz firmadan çýkartýldý.");
		islev++;
	}
	else if (!strcmp(yazi, "bagaj", true))
	{
		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu komut araçta kullanýlamaz.");

		new id = -1, baslik[64], icerik[512], motorMu = 0;
		icerik[0] = 0;
		if((id = Arac_Yakin(playerid)) != -1)
		{
			if(GetVehicleModel(id) == 461 || GetVehicleModel(id) == 463 || GetVehicleModel(id) == 468 || GetVehicleModel(id) == 521 || GetVehicleModel(id) == 522 || GetVehicleModel(id) == 581 || GetVehicleModel(id) == 586) motorMu++;
			if(!IsDoorVehicle(AracBilgi[id][aracYarat]) && motorMu == 0) return hataMesaji(playerid, "Bu aracýn bagajý yok.");
			if(Arac_Birlik(playerid, id) || Arac_SahipKontrol(playerid, id) || Arac_Anahtar(playerid, id) || ItemAnahtarKontrol(playerid, AracBilgi[id][aracID]) || Arac_Firma(playerid, id) || (OyuncuBirlikTuru(playerid) == BIRLIK_POLIS && oyuncuData[playerid][oIsbasi] == true && aracbirlikturbul(AracBilgi[id][aracYarat]) != BIRLIK_POLIS))
			{
				if(GetTrunkStatus(AracBilgi[id][aracYarat])) return hataMesaji(playerid, "Bu aracýn bagajý baþkasý tarafýndan kullanýyor, lütfen bekleyin.");
				if(AracBilgi[id][aracKilit]) return hataMesaji(playerid, "Araç kilitli olduðu için bagajý açamazsýn.");

				oyuncuData[playerid][oBagaj] = id;
				SetTrunkStatus(AracBilgi[id][aracYarat], true);
				format(baslik, sizeof(baslik), "%s - Bagaj", AracModel(AracBilgi[id][aracModel]));
				if(aracbirlikturbul(AracBilgi[id][aracYarat]) != BIRLIK_POLIS) {
					for(new i = 0; i != MAKSIMUM_BAGAJ_SLOT; i ++)
					{
						if(AracBilgi[id][aracSlot][i] > 0)
						{
							new sayi = 0;
							format(icerik, sizeof(icerik), "%sEþya:%s\tMermi/Gram:%d\n", icerik, SilahIsim(AracBilgi[id][aracSlot][i]),AracBilgi[id][aracSlotVar][i]), sayi++;
						}
						else
						{
							strcat(icerik, "Boþ Slot\n");
						}
					}
				}
				if(aracbirlikturbul(AracBilgi[id][aracYarat]) == BIRLIK_POLIS && oyuncuData[playerid][oIsbasi] == true)
					{
						strcat(icerik, "M4\nMP5\nBeanbag Tüfeði\nOperasyon Yeleði\n");
					}
				DialogGoster(playerid, DIALOG_ARACBAGAJ, DIALOG_STYLE_LIST, baslik, icerik, "Seç", "Ýptal");
				return 1;
			}
			else return hataMesaji(playerid, "Bu aracýn bagajýný kullanamazsýn.");
		}
		hataMesaji(playerid, "Etrafýnda herhangi bir araç yok.");
		islev++;
	}
	else if (!strcmp(yazi, "far", true))
	{
		arac_FarKontrol(playerid, Arac_Yakin(playerid));
		islev++;
	}
	else if(!strcmp(yazi, "radyo", true))
	{
		if(!IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Radyoyu açmak için araçta olmalýsýn.");
		ShowPlayerDialog(playerid, DIALOG_ARAC_RADYO, DIALOG_STYLE_LIST, "Araç Radyosu", "Radyoyu Kapat\nJolly OL Soul\nThe Trip\nChristmas Rocks\nLush\nUnderground 80s\nFluid\nIndie Pop Rocks\nGroove Salad\nBlack Rock FM\nURL Gir", "Seç", "Ýptal");
		islev++;
	}
	else if(!strcmp(yazi, "benzin", true))
	{
		if(!IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Benzinini dolduracaðýn araçta olmalýsýn.");
		if(ItemVarMi(playerid, 105) < 1) return hataMesaji(playerid, "Benzin bidonun yok. Öncelikle marketten benzin bidonu almalýsýn.");
		new aracid = Arac_IDBul(GetPlayerVehicleID(playerid));
		if(GetEngineStatus(aracid)) return hataMesaji(playerid, "Benzin doldurmadan önce motoru kapatmalýsýn.");
		if(AracBilgi[aracid][aracBenzin] == 100.0) return hataMesaji(playerid, "Bu aracýn deposu dolu, benzin dolduramazsýn.");
		if(AracBilgi[aracid][aracBenzin] >= 69.0)
		{
			AracBilgi[aracid][aracBenzin] = 100.0;
		}
		else if(AracBilgi[aracid][aracBenzin] < 69.0)
		{
			AracBilgi[aracid][aracBenzin] += 30.0;
		}
		new textstr[128];
		format(textstr, sizeof(textstr), "%.2f lt", AracBilgi[aracid][aracBenzin]);
		PlayerTextDrawSetString(playerid, AracGosterge[4][playerid], textstr);
		cmd(playerid, 1, "benzin bidonunu kullanarak araca benzin doldurur.");
		ItemSifirla(playerid, 105);
		islev++;
	}
	else if (!strcmp(yazi, "satinal", true))
	{
		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Araçtayken bu komutu kullanamazsýnýz.");
		if(!IsPlayerInRangeOfPoint(playerid, 2.0, 951.8502,-1705.6200,13.6137)) return hataMesaji(playerid, "Araç galerisinde deðilsiniz.");
		new Cache:VehCount, vehrows;
		VehCount = mysql_query(g_SQL, "SELECT * FROM araclar");
		cache_get_row_count(vehrows);
		cache_delete(VehCount);
		if(vehrows >= 2000) return hataMesaji(playerid, "Satýþlar þu anda kapalý. Daha sonra tekrar uðramayý dene.");
		if(oyuncuData[playerid][oCoolAracPaketi] < 1)
		{
			ShowModelSelectionMenu(playerid, araclarliste, "Satilik Araclar");
		}
		else
		{
			ShowModelSelectionMenu(playerid, coolaraclarliste, "Satilik Araclar");
		}
		TogglePlayerControllable(playerid, false);
		/*new Float:X,Float:Y,Float:Z;
		SetPlayerPosEx(playerid, 28, X, Y, Z, 0, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));*/
		islev++;
	}
	else if (!strcmp(yazi, "kilit", true))
	{
		static id = -1;
		new sayi, Float:arPoscek[3];
		if((id = Arac_Yakin(playerid)) != -1)
		{
			foreach(new aracid : Araclar)
			{
				GetVehiclePos(aracid, arPoscek[0], arPoscek[1], arPoscek[2]);
				if(IsPlayerInRangeOfPoint(playerid, 4.5, arPoscek[0], arPoscek[1], arPoscek[2]))
				{
					sayi++;
				}
			}
			if(sayi > 1) return hataMesaji(playerid, "Etrafta birden fazla araç var, kilidi açmak için /akilit [araç id] komutunu kullanýn.");
			static engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(AracBilgi[id][aracYarat], engine, lights, alarm, doors, bonnet, boot, objective);
			if(Arac_Birlik(playerid, id) || Arac_SahipKontrol(playerid, id) || ItemAnahtarKontrol(playerid, AracBilgi[id][aracID]) || Arac_Firma(playerid, id) || ItemAnahtarKontrol(playerid, AracBilgi[id][aracID]) || oyuncuData[playerid][oAdmin] > 0)
			{
				if(!AracBilgi[id][aracKilit])
				{
					AracBilgi[id][aracKilit] = true;
					Arac_Kaydet(id);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					SetVehicleParamsEx(AracBilgi[id][aracYarat], engine, lights, alarm, 1, bonnet, boot, objective);
					cmd(playerid, 1, "yanýndaki aracý kilitler.");
				}
				else
				{
					AracBilgi[id][aracKilit] = false;
					Arac_Kaydet(id);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					cmd(playerid, 1, "yanýndaki aracýn kilidini açar.");
					SetVehicleParamsEx(AracBilgi[id][aracYarat], engine, lights, alarm, 0, bonnet, boot, objective);
				}
			}
			else hataMesaji(playerid, "Bu aracýn kilit durumunu deðiþtiremezsin.");
		}
		islev++;
	}
	else if (!strcmp(yazi, "sat", true))
	{
		UyariMesaji(playerid, "Bu iþlemi '/sat' komutu üzerinden gerçekleþtirebilirsin.");
	}
	else if (!strcmp(yazi, "bilgi", true))
	{
		cmd(playerid, 0, "araclarim");
	}
	else if (!strcmp(yazi, "liste", true))
	{
		cmd(playerid, 0, "araclarim");
	}
	else if (!strcmp(yazi, "motor", true))
	{
		if(!IsPlayerInAnyVehicle(playerid) || !IsEngineVehicle(GetPlayerVehicleID(playerid))) return hataMesaji(playerid, "Herhangi bir araçta deðilsin.");
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return hataMesaji(playerid, "Bu iþlemi yapabilmen için sürücü koltuðunda olman gerekir!");
		if(oyuncuData[playerid][oMotorCalistir]) return hataMesaji(playerid, "Zaten þu anda motor çalýþtýrýyorsunuz!");
		if(BenzinAliyor[playerid] != -1) return hataMesaji(playerid, "Benzin doldururken aracýn motorunu çalýþtýramazsýn.");
		//static aracid = GetPlayerVehicleID(playerid);
		new aracid = GetPlayerVehicleID(playerid);
		switch (GetEngineStatus(GetPlayerVehicleID(playerid)))
		{
			case false:
			{
				if((aracid = Arac_IDBul(aracid)) != -1)
				{
					if(AracBilgi[aracid][aracMeslek] == 5 && (GetVehicleModel(aracid) == 413 || GetVehicleModel(aracid) == 414)) return hataMesaji(playerid, "Týr dýþýndaki trucker araçlarýnýn motoru çalýþtýrýlamaz. /truckerbasla");					
					if(Arac_Birlik(playerid, aracid) || Arac_SahipKontrol(playerid, aracid) || Arac_Ehliyet(playerid, aracid) || Arac_Meslek(playerid, aracid) || Arac_Anahtar(playerid, aracid) || ItemAnahtarKontrol(playerid, AracBilgi[aracid][aracID]) || Arac_Firma(playerid, aracid))
					{
						new vergi = AracBilgi[aracid][aracVergi];
						if(AracBilgi[aracid][aracBenzin] < 0) return hataMesaji(playerid, "Bu araçta benzin yok.");

						if(aracbirlikturbul(GetPlayerVehicleID(playerid)) != BIRLIK_POLIS && aracbirlikturbul(GetPlayerVehicleID(playerid)) != BIRLIK_MEDIKAL)
						{
							if(vergi >= VergiAlgoritma(aracid, "max") && vergi != 0) return hataMesaji(playerid, "Bu araç vergi kilidinde görünüyor.");
						}
						if(CezaKilitDurum(aracid) >= 3000) return hataMesaji(playerid, "Bu araç ceza kilidinde görünüyor.");
						if(IsAFlyingVehicle(aracid) && oyuncuData[playerid][oUcusLisansi] == 0 && OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return hataMesaji(playerid, "Sürmek için uçuþ lisansýna ihtiyacýnýz var.");
						if(GetPVarInt(playerid, "Tamircideyim") > 0) return hataMesaji(playerid, "Tamircideyken motoru çalýþtýramazsýnýz.");
						new motorstr[192];
						format(motorstr, sizeof motorstr, "%s model aracýn motorunu açmayý dener.", GetVehicleName(GetVehicleModel(aracid)));
						if(oyuncuData[playerid][oSurusYetenek] == 0)
						{
							SetTimerEx("araccalistir", 4250, false, "ii", playerid, GetPlayerVehicleID(playerid));
							GameTextForPlayer(playerid, "~w~MOTOR CALISTIRILIYOR...", 3000, 4);
							cmd(playerid, 1, motorstr);
							oyuncuData[playerid][oMotorCalistir] = true;
						}
						else if(oyuncuData[playerid][oSurusYetenek] == 1)
						{
							SetTimerEx("araccalistir", 3650, false, "ii", playerid, GetPlayerVehicleID(playerid));
							GameTextForPlayer(playerid, "~w~MOTOR CALISTIRILIYOR...", 3000, 4);
							cmd(playerid, 1, motorstr);
							oyuncuData[playerid][oMotorCalistir] = true;
						}
						else if(oyuncuData[playerid][oSurusYetenek] == 2)
						{
							SetTimerEx("araccalistir", 3000, false, "ii", playerid, GetPlayerVehicleID(playerid));
							GameTextForPlayer(playerid, "~w~MOTOR CALISTIRILIYOR...", 3000, 4);
							cmd(playerid, 1, motorstr);
							oyuncuData[playerid][oMotorCalistir] = true;
						}
						else if(oyuncuData[playerid][oSurusYetenek] == 3)
						{
							SetTimerEx("araccalistir", 2400, false, "ii", playerid, GetPlayerVehicleID(playerid));
							GameTextForPlayer(playerid, "~w~MOTOR CALISTIRILIYOR...", 2000, 4);
							cmd(playerid, 1, motorstr);
							oyuncuData[playerid][oMotorCalistir] = true;
						}
						else if(oyuncuData[playerid][oSurusYetenek] == 4)
						{
							SetTimerEx("araccalistir", 1800, false, "ii", playerid, GetPlayerVehicleID(playerid));
							GameTextForPlayer(playerid, "~w~MOTOR CALISTIRILIYOR...", 1500, 4);
							cmd(playerid, 1, motorstr);
							oyuncuData[playerid][oMotorCalistir] = true;
						}
						else if(oyuncuData[playerid][oSurusYetenek] == 5)
						{
							SetTimerEx("araccalistir", 1200, false, "ii", playerid, GetPlayerVehicleID(playerid));
							GameTextForPlayer(playerid, "~w~MOTOR CALISTIRILIYOR...", 1000, 4);
							cmd(playerid, 1, motorstr);
							oyuncuData[playerid][oMotorCalistir] = true;
						}
						else if(oyuncuData[playerid][oSurusYetenek] == 6)
						{
							SetTimerEx("araccalistir", 900, false, "ii", playerid, GetPlayerVehicleID(playerid));
							GameTextForPlayer(playerid, "~w~MOTOR CALISTIRILIYOR...", 1000, 4);
							cmd(playerid, 1, motorstr);
							oyuncuData[playerid][oMotorCalistir] = true;
						}
						else if(oyuncuData[playerid][oSurusYetenek] == 7)
						{
							SetTimerEx("araccalistir", 600, false, "ii", playerid, GetPlayerVehicleID(playerid));
							GameTextForPlayer(playerid, "~w~MOTOR CALISTIRILIYOR...", 1000, 4);
							cmd(playerid, 1, motorstr);
							oyuncuData[playerid][oMotorCalistir] = true;
						}
						else if(oyuncuData[playerid][oSurusYetenek] >= 8)
						{
							SetTimerEx("araccalistir", 300, false, "ii", playerid, GetPlayerVehicleID(playerid));
							GameTextForPlayer(playerid, "~w~MOTOR CALISTIRILIYOR...", 1000, 4);
							cmd(playerid, 1, motorstr);
							oyuncuData[playerid][oMotorCalistir] = true;
						}
					} else { hataMesaji(playerid, "Bu aracýn anahtarý sizde olmadýðý için motoru çalýþtýramazsýnýz."); }
				}
			}
			case true:
			{
				if((aracid = Arac_IDBul(aracid)) != -1)
				{
					if(AracBilgi[aracid][aracMeslek] != 5)
					{
						SetEngineStatus(GetPlayerVehicleID(playerid), false);
						cmd(playerid, 1, "sað eliyle kontaðý çevirir ve aracýn motorunu kapatýr.");
						SetLightStatus(GetPlayerVehicleID(playerid), false);
					}
					else
					{
						hataMesaji(playerid, "Trucker araçlarýnýn motoru kapatýlamaz.");
					}
				}
			}
		}
		islev++;
	}
	else if (!strcmp(yazi, "kirala", true))
	{
		if(!IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu komut sadece araçta kullanýlabilir.");
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return hataMesaji(playerid, "Bu komutu sadece aracýn sürücü koltuðundayken kullanýlabilir.");
		if(oyuncuData[playerid][oEhliyet] == false) return hataMesaji(playerid, "Ehliyetiniz bulunmamaktadýr. Araç kiralayamazsýnýz.");

		SetPVarInt(playerid, "Kirala_AracID", GetPlayerVehicleID(playerid));

		new kirafiyatlari[256];
		strcat(kirafiyatlari, "Kiralama Süresi\tKira Fiyatý\n");
		for(new i = 1; i < 5; i ++)
		{
			format(kirafiyatlari, sizeof(kirafiyatlari), "%s%d\t%d\n", kirafiyatlari, i, AracBilgi[GetPlayerVehicleID(playerid)][aKiraUcret] * i);
		}
		ShowPlayerDialog(playerid, ARAC_KIRALA_SURE, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Kiralamak Ýçin Süre Seçiniz:", kirafiyatlari, "Kirala", "Iptal");

		islev++;
	}
	else if (!strcmp(yazi, "anahtarsifirla", true))
	{
		if(!IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu komut sadece araçta kullanýlabilir.");

		static aracid;
		aracid = GetPlayerVehicleID(playerid);
		if(Arac_SahipKontrol(playerid, aracid))
		{
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return hataMesaji(playerid, "Bu komutu kullanmak için sürücü olmalýsýn.");
			if(AracBilgi[aracid][aracKiralik]) return hataMesaji(playerid, "Araç kiralanabilirken anahtar sýfýrlanamaz.");
			AnahtarBul(AracBilgi[aracid][aracID]);
		}
		else hataMesaji(playerid, "Bu araç senin deðil.");
		islev++;
	}
	else if (!strcmp(yazi, "yedekanahtar", true))
	{
		if(!IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu komut sadece araçta kullanýlabilir.");

		static aracid;
		aracid = GetPlayerVehicleID(playerid);
		if((aracid = Arac_IDBul(aracid)) != -1 && Arac_SahipKontrol(playerid, aracid))
		{
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return hataMesaji(playerid, "Bu komutu kullanmak için sürücü olmalýsýn.");
			if(GetVehicleModel(aracid) == 481 || GetVehicleModel(aracid) == 509 || GetVehicleModel(aracid) == 510) return hataMesaji(playerid, "Bisikletlerin anahtarý paylaþýlamaz.");
			if(AracBilgi[aracid][aracKiralik]) return hataMesaji(playerid, "Araç kiralanabilirken yedek anahtar alamazsýnýz.");
			if(oyuncuData[playerid][oPara] < 200) return hataMesaji(playerid, "Üzerinizde yedek anahtar çýkarabilmek için yeterli miktarda para yok (200$)");
			ItemEkle(playerid, 107, AracBilgi[aracid][aracID]);
			ParaEkle(playerid, -200);
			SunucuMesaji(playerid, "%s Model aracýnýz için bir yedek anahtar çýkardýnýz. (/envanter)", AracModel(AracBilgi[aracid][aracModel]));

		}
		else hataMesaji(playerid, "Bu araç senin deðil.");
		islev ++;
	}
	if(!islev) return hataMesaji(playerid, "Girilen parametre doðru deðil.");
	return 1;
}

CMD:npc(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 6) return YetkinizYok(playerid);
	if(AktoreYakinmi(playerid) == -1) return hataMesaji(playerid, "Herhangi bir NPC'ye yakýn deðilsiniz.");
	SunucuMesaji(playerid, "Yakýnýnda bulunduðunuz NPC id: %d", AktoreYakinmi(playerid));
	return 1;
}

CMD:hkamera(playerid)
{
	new aracid = GetPlayerVehicleID(playerid);
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return hataMesaji(playerid, "Polis deðilsin.");
	if(!IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu komutu kullanabilmek için araçta olmalýsýnýz.");
	switch(GetVehicleModel(aracid))
	{
		case 497:
		{
			if(HeliKamerada[playerid] == false)
			{ 
				AttachCameraToDynamicObject(playerid, HelikopterKamera[aracid]);
				PlayerTextDrawShow(playerid, TermalText[playerid]);
				HeliKamerada[playerid] = true;
			}
			else
			{
				SetCameraBehindPlayer(playerid), HeliKamerada[playerid] = false;
				PlayerTextDrawHide(playerid, TermalText[playerid]);
			}
		}
		default:hataMesaji(playerid, "Bu araçta kamera mevcut deðil.");
	}
	return 1;
}

	CMD:gym(playerid, params[])
	{
		new idx[20];
		if(sscanf(params, "s[20]", idx))
		{
			SendClientMessage(playerid, RENK_GRI, "KULLANIM: /gym [Parametre]");
			SendClientMessage(playerid, RENK_ACIKYESIL, "Parametreler: [{FFFFFF}calis{88aa62}], [{FFFFFF}iptal{88aa62}]");
		}
		else
		{
			if(strcmp(idx, "calis", true) == 0)
			{
				if (GetPVarInt(playerid, "gymyapiyor") == 1) return hataMesaji(playerid, "Zaten þuanda gym yapýyorsunuz.");
				if(SPOR_YAPAN_KISI == MAX_SPOR || SPOR_YAPAN_KISI > MAX_SPOR) return IpucuMesaji(playerid, "Spor yapmadan önce hazýr olmalýsýn, motive ol!"), hataMesaji(playerid, "Maksimum spor yapabilme slotu dolu, birazdan dene.");
				if(oyuncuData[playerid][oVIP] > 0)
				{
					if(oyuncuData[playerid][oGYMHak] > 7) return hataMesaji(playerid, "Saatlik GYM hakkýnýzý doldurdunuz, lütfen daha sonra tekrar deneyin.");
				}
				else
				{
					if(oyuncuData[playerid][oGYMHak] > 3) return hataMesaji(playerid, "Saatlik GYM hakkýnýzý doldurdunuz, lütfen daha sonra tekrar deneyin.");
				}
				oyuncuData[playerid][oGYMPuan] = 0;
				oyuncuData[playerid][oGYMAsama] = 1;
				GYMAletKontrol(playerid);
			}
			else if(strcmp(idx, "iptal", true) == 0)
			{
				SunucuMesaji(playerid, "GYM çalýþmasýný tamamlamadan býraktýnýz.");
				oyuncuData[playerid][oGYMAsama] = 1;
				oyuncuData[playerid][oGYMPuan] = 0;
				KillTimer(gymtimer[playerid]);
				KillTimer(gymtustimer[playerid]);
				OklariSifirla(playerid);
				TogglePlayerControllable(playerid, true);
				SetPVarInt(playerid, "gymyapiyor", 0);
				secilenok[playerid] = 0;
				SPOR_YAPAN_KISI--;
			}
		}
		return 1;
	}

	CMD:duzkontak(playerid, params[])
	{
		new idx[20];
		if(sscanf(params, "s[20]", idx))
		{
			SendClientMessage(playerid, RENK_GRI, "KULLANIM: /duzkontak [Parametre]");
			SendClientMessage(playerid, RENK_ACIKYESIL, "Parametreler: [{FFFFFF}yap{88aa62}], [{FFFFFF}iptal{88aa62}]");
		}
		else
		{
			if(strcmp(idx, "yap", true) == 0)
			{
				if (GetPVarInt(playerid, "duzkontakyapiyor") == 1) return hataMesaji(playerid, "Zaten þuanda bir araca düz kontak yapýyorsunuz.");
				if (ItemMiktarKontrol(playerid, 31) < 1) return hataMesaji(playerid, "Araca düzkontak yapabilmek için alet çantasýna ihtiyacýnýz var.");
				if(!IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu komutu kullanabilmek için bir aracýn içerisinde olmalýsýn.");
				if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return hataMesaji(playerid, "Aracýn sürücüsü olmalýsýn.");
				if(IsAFlyingVehicle(GetPlayerVehicleID(playerid))) return hataMesaji(playerid, "Bu araca düzkontak yapýlamaz.");
				if(GetEngineStatus(GetPlayerVehicleID(playerid))) return hataMesaji(playerid, "Bu aracýn motoru zaten çalýþýr durumda!");
				static id, string[200];
				id = GetPlayerVehicleID(playerid);
				if(AracBilgi[id][aracFirma] > -1 || aracbirlikturbul(AracBilgi[id][aracYarat]) == BIRLIK_POLIS) return hataMesaji(playerid, "Bu araca düzkontak yapýlamaz.");
				if(Arac_SahipKontrol(playerid, id)) return hataMesaji(playerid, "Sahibi olduðun araca düzkontak yapamazsýn.");
				if(GetVehicleModel(id) == 481 || GetVehicleModel(id) == 509 || GetVehicleModel(id) == 510) return hataMesaji(playerid, "Bisiklete düzkontak yapamazsýn.");
				if(aracbirlikturbul(id) == BIRLIK_POLIS || aracbirlikturbul(id) == BIRLIK_MEDIKAL) return hataMesaji(playerid, "Devlet araçlarýna düzkontak uygulanamaz.");
				if(AracBilgi[id][aracKiralik] == 1) return hataMesaji(playerid, "Kiralýk araçlara düzkontak uygulayamazsýn.");
				if(AracBilgi[id][kilitseviye] == 5) return hataMesaji(playerid, "Bu aracýn korumasý oldukça geliþmiþ, düzkontak uygulanamaz.");
				duzkontaktimer[playerid] = SetTimerEx("duzkontakvar", 60000, 0, "id", playerid, id);
				GameTextForPlayer(playerid, "~w~DUZKONTAK YAPILIYOR...", 1200000, 4);
				ItemMiktarAzalt(playerid, 31, 1);
				TogglePlayerControllable(playerid, false);
				SetPVarInt(playerid,"duzkontakyapiyor", 1);
				format(string, sizeof(string), "* Düzkontak yapmak için uðraþýyordur.(%s)", OyuncuIsim(playerid));
				SetPlayerChatBubble(playerid, string, RENK_PEMBE, 30.0, 65 * 1000);
				SCM_Ex(playerid, RENK_PEMBE, "* Düzkontak yapmak için uðraþýyordur.(%s)", OyuncuIsim(playerid));
			}
			else if(strcmp(idx, "iptal", true) == 0)
			{
				if (GetPVarInt(playerid, "duzkontakyapiyor") == 0) return hataMesaji(playerid, "Herhangi bir araca düzkontak yapmýyorsunuz.");
				SetPVarInt(playerid,"duzkontakyapiyor", 0);
				KillTimer(duzkontaktimer[playerid]);
				GameTextForPlayer(playerid, "~w~DUZKONTAK IPTAL EDILDI!", 750, 4);
				TogglePlayerControllable(playerid, true);
				SunucuMesaji(playerid, "Düz kontak iþlemini iptal ettiniz.");
			}
		}
		return 1;
	}

	CMD:kilitkir(playerid, params[])
	{
		new idx[20];
		if(sscanf(params, "s[20]", idx))
		{
			SendClientMessage(playerid, RENK_GRI, "KULLANIM: /kilitkir [Parametre]");
			SendClientMessage(playerid, RENK_ACIKYESIL, "Parametreler: [{FFFFFF}kir{88aa62}], [{FFFFFF}iptal{88aa62}]");
		}
		else
		{
			if(strcmp(idx, "kir", true) == 0)
			{
				if (GetPVarInt(playerid, "kilidikiriyor") == 1) return hataMesaji(playerid, "Zaten þuanda bir aracýn kilidini kýrýyorsunuz.");
				if (ItemVarMi(playerid, 32) < 1) return hataMesaji(playerid, "Kilidi kýrabilmek için maymuncuk setiniz bulunmuyor.");
				static id = -1;
				if((id = Arac_Yakin(playerid)) != -1)
				{
					if(AracBilgi[id][aracFirma] > -1 || aracbirlikturbul(AracBilgi[id][aracYarat]) == BIRLIK_POLIS) return hataMesaji(playerid, "Bu aracýn kilidi kýrýlamaz.");
					if(IsAFlyingVehicle(id)) return hataMesaji(playerid, "Bu aracýn kilidi kýrýlamaz.");
					if(!AracBilgi[id][aracKilit]) return hataMesaji(playerid, "Bu aracýn kilidi zaten açýk.");
					SetPVarInt(playerid,"kilidikiriyor", 1);
					TextDrawShowForPlayer(playerid, kilit_0);
					pikilit[0][playerid] = CreatePlayerTextDraw(playerid, 531.000000, 363.000000, "mdl-2011:lick");
					PlayerTextDrawFont(playerid, pikilit[0][playerid], 4);
					PlayerTextDrawLetterSize(playerid, pikilit[0][playerid], 0.600000, 2.000000);
					PlayerTextDrawTextSize(playerid, pikilit[0][playerid], 7.000000, 39.500000);
					PlayerTextDrawSetOutline(playerid, pikilit[0][playerid], 1);
					PlayerTextDrawSetShadow(playerid, pikilit[0][playerid], 0);
					PlayerTextDrawAlignment(playerid, pikilit[0][playerid], 1);
					PlayerTextDrawColor(playerid, pikilit[0][playerid], -1);
					PlayerTextDrawBackgroundColor(playerid, pikilit[0][playerid], 255);
					PlayerTextDrawBoxColor(playerid, pikilit[0][playerid], 50);
					PlayerTextDrawUseBox(playerid, pikilit[0][playerid], 1);
					PlayerTextDrawSetProportional(playerid, pikilit[0][playerid], 1);
					PlayerTextDrawSetSelectable(playerid, pikilit[0][playerid], 0);

					pikilit[1][playerid] = CreatePlayerTextDraw(playerid, 546.000000, 363.000000, "mdl-2011:lick");
					PlayerTextDrawFont(playerid, pikilit[1][playerid], 4);
					PlayerTextDrawLetterSize(playerid, pikilit[1][playerid], 0.600000, 2.000000);
					PlayerTextDrawTextSize(playerid, pikilit[1][playerid], 7.000000, 39.500000);
					PlayerTextDrawSetOutline(playerid, pikilit[1][playerid], 1);
					PlayerTextDrawSetShadow(playerid, pikilit[1][playerid], 0);
					PlayerTextDrawAlignment(playerid, pikilit[1][playerid], 1);
					PlayerTextDrawColor(playerid, pikilit[1][playerid], -1);
					PlayerTextDrawBackgroundColor(playerid, pikilit[1][playerid], 255);
					PlayerTextDrawBoxColor(playerid, pikilit[1][playerid], 50);
					PlayerTextDrawUseBox(playerid, pikilit[1][playerid], 1);
					PlayerTextDrawSetProportional(playerid, pikilit[1][playerid], 1);
					PlayerTextDrawSetSelectable(playerid, pikilit[1][playerid], 0);

					pikilit[2][playerid] = CreatePlayerTextDraw(playerid, 561.000000, 363.000000, "mdl-2011:lick");
					PlayerTextDrawFont(playerid, pikilit[2][playerid], 4);
					PlayerTextDrawLetterSize(playerid, pikilit[2][playerid], 0.600000, 2.000000);
					PlayerTextDrawTextSize(playerid, pikilit[2][playerid], 7.000000, 39.500000);
					PlayerTextDrawSetOutline(playerid, pikilit[2][playerid], 1);
					PlayerTextDrawSetShadow(playerid, pikilit[2][playerid], 0);
					PlayerTextDrawAlignment(playerid, pikilit[2][playerid], 1);
					PlayerTextDrawColor(playerid, pikilit[2][playerid], -1);
					PlayerTextDrawBackgroundColor(playerid, pikilit[2][playerid], 255);
					PlayerTextDrawBoxColor(playerid, pikilit[2][playerid], 50);
					PlayerTextDrawUseBox(playerid, pikilit[2][playerid], 1);
					PlayerTextDrawSetProportional(playerid, pikilit[2][playerid], 1);
					PlayerTextDrawSetSelectable(playerid, pikilit[2][playerid], 0);

					pikilit[3][playerid] = CreatePlayerTextDraw(playerid, 575.000000, 363.000000, "mdl-2011:lick");
					PlayerTextDrawFont(playerid, pikilit[3][playerid], 4);
					PlayerTextDrawLetterSize(playerid, pikilit[3][playerid], 0.600000, 2.000000);
					PlayerTextDrawTextSize(playerid, pikilit[3][playerid], 7.000000, 39.500000);
					PlayerTextDrawSetOutline(playerid, pikilit[3][playerid], 1);
					PlayerTextDrawSetShadow(playerid, pikilit[3][playerid], 0);
					PlayerTextDrawAlignment(playerid, pikilit[3][playerid], 1);
					PlayerTextDrawColor(playerid, pikilit[3][playerid], -1);
					PlayerTextDrawBackgroundColor(playerid, pikilit[3][playerid], 255);
					PlayerTextDrawBoxColor(playerid, pikilit[3][playerid], 50);
					PlayerTextDrawUseBox(playerid, pikilit[3][playerid], 1);
					PlayerTextDrawSetProportional(playerid, pikilit[3][playerid], 1);
					PlayerTextDrawSetSelectable(playerid, pikilit[3][playerid], 0);

					pikilit[4][playerid] = CreatePlayerTextDraw(playerid, 590.000000, 363.000000, "mdl-2011:lick");
					PlayerTextDrawFont(playerid, pikilit[4][playerid], 4);
					PlayerTextDrawLetterSize(playerid, pikilit[4][playerid], 0.600000, 2.000000);
					PlayerTextDrawTextSize(playerid, pikilit[4][playerid], 7.000000, 39.500000);
					PlayerTextDrawSetOutline(playerid, pikilit[4][playerid], 1);
					PlayerTextDrawSetShadow(playerid, pikilit[4][playerid], 0);
					PlayerTextDrawAlignment(playerid, pikilit[4][playerid], 1);
					PlayerTextDrawColor(playerid, pikilit[4][playerid], -1);
					PlayerTextDrawBackgroundColor(playerid, pikilit[4][playerid], 255);
					PlayerTextDrawBoxColor(playerid, pikilit[4][playerid], 50);
					PlayerTextDrawUseBox(playerid, pikilit[4][playerid], 1);
					PlayerTextDrawSetProportional(playerid, pikilit[4][playerid], 1);
					PlayerTextDrawSetSelectable(playerid, pikilit[4][playerid], 0);
					PlayerTextDrawShow(playerid, pikilit[0][playerid]);
					PlayerTextDrawShow(playerid, pikilit[1][playerid]);
					PlayerTextDrawShow(playerid, pikilit[2][playerid]);
					PlayerTextDrawShow(playerid, pikilit[3][playerid]);
					PlayerTextDrawShow(playerid, pikilit[4][playerid]);

					secilenpin[playerid] = 0;
					ItemSifirla(playerid, 32);
					KilidiKiriyorum[playerid] = true;
					TogglePlayerControllable(playerid, false);
					ApplyAnimation(playerid,"BD_FIRE","wash_up",4.1,0,0,0,1,10000);
					kilitkirtimer[playerid] = SetTimerEx("kilitkirvar", 50, 1, "i",playerid);
					kilitinterval[playerid] = SetTimerEx("kilitkirint",300,1,"i",playerid);
					kilitsure[playerid] = SetTimerEx("kilitkirmasuresi", 1000 * kilitverisi[AracBilgi[id][kilitseviye]][kilitsuresi] ,0,"i",playerid);
					alarmsure[playerid] = SetTimerEx("alarmsmssuresi", 1000 * alarmverisi[AracBilgi[id][alarmseviye]][alarmsuresi] ,0,"id",playerid,id);
					SunucuMesaji(playerid, "Aracýn kilidini %d saniye içerisinde kýrmalýsýnýz aksi takdirde baþarýsýz olacaksýnýz.",  kilitverisi[AracBilgi[id][kilitseviye]][kilitsuresi]);
					SunucuMesaji(playerid, "Aracýn kilidini kýrmaya baþladýnýz, pinleri hareket ettirmek için 'W' tuþunu kullanýn.");
					SunucuMesaji(playerid, "Kilit pini doðru aralýða gelip yeþil olduðunda 'N' tuþuna basýn.");
					SetPVarInt(playerid, "karacid", id);
				}
			}
			else if(strcmp(idx, "iptal", true) == 0)
			{
				if (GetPVarInt(playerid, "kilidikiriyor") == 0) return hataMesaji(playerid, "Herhangi bir aracýn kilidini kýrmýyorsunuz.");
				SetPVarInt(playerid, "kilidikiriyor", 0);
				PlayerTextDrawDestroy(playerid, pikilit[0][playerid]);
				PlayerTextDrawDestroy(playerid, pikilit[1][playerid]);
				PlayerTextDrawDestroy(playerid, pikilit[2][playerid]);
				PlayerTextDrawDestroy(playerid, pikilit[3][playerid]);
				PlayerTextDrawHide(playerid, pikilit[4][playerid]);
				TextDrawHideForPlayer(playerid, kilit_0);
				KillTimer(kilitinterval[playerid]);
				KillTimer(kilitkirtimer[playerid]);
				ClearAnimations(playerid);
				KilidiKiriyorum[playerid] = false;
				TogglePlayerControllable(playerid, true);
				SunucuMesaji(playerid, "Kilit kýrma iþlemini iptal ettiniz.");
			}
		}
		return 1;
	}

	CMD:firmalar(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 8) return YetkinizYok(playerid);
		new baslik[1536];
		foreach(new b : Firma)
		{
			if(strlen(FirmaInfo[b][fIsim]) > 0) {
				format(baslik, sizeof(baslik), "%s\n{F5E600}%s - Firma Türü: %s - Firma ID: %d", baslik, FirmaInfo[b][fIsim], FirmaAlani(FirmaInfo[b][fAlan]), b);
				ShowPlayerDialog(playerid, DIALOG_FIRMALAR, DIALOG_STYLE_MSGBOX, "Firma Listesi", baslik, "Tamam", "");
			}
		}
		return 1;
	}

	CMD:firmakur(playerid, params[])
	{
		if(oyuncuData[playerid][oFirma] != -1) return hataMesaji(playerid, "Bir firma bünyesinde çalýþtýðýnýz için bu iþlemi gerçekleþtiremezsiniz.");
		if(oyuncuData[playerid][oAdmin] > 7)
		{
		ShowPlayerDialog(playerid, DIALOG_FIRMA_KUR, DIALOG_STYLE_LIST, "{F5E600}Firma Kurma - Alan Seçimi", "Hastane\nMedya/Basýn\nLojistik\nRent A Car & Galeri\nTamirhane\nHukuk", "Seç", "Iptal");
		}
		else
		{
		ShowPlayerDialog(playerid, DIALOG_FIRMA_KUR, DIALOG_STYLE_LIST, "{F5E600}Firma Kurma - Alan Seçimi", "Hastane\nMedya/Basýn\nLojistik\nRent A Car & Galeri\nTamirhane", "Seç", "Iptal");
		}
		return 1;
	}

	CMD:afirmasil(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 9) return YetkinizYok(playerid);
		new firma;
		if(sscanf(params, "d", firma)) return kullanimMesaji(playerid, "/afirmasil [id]");
		if(firma < 0 || firma > MAX_FIRMA) return hataMesaji(playerid, "Hatalý ID.");
		if(!Iter_Contains(Firma, firma)) return hataMesaji(playerid, "Hatalý ID.");
		new query[128];
		mysql_format(g_SQL, query, sizeof(query), "DELETE FROM `firmalar` WHERE `id` = %i", FirmaInfo[firma][fID]);
		mysql_query(g_SQL, query);
		mysql_format(g_SQL, query, sizeof(query), "DELETE FROM `firmarutbeleri` WHERE `id` = %i", FirmaInfo[firma][fID]);
		mysql_query(g_SQL, query);
		mysql_format(g_SQL, query, sizeof(query), "UPDATE `oyuncular` SET `firma` = 0, `firmarutbe` = 0 WHERE `firma` = %i", FirmaInfo[firma][fID]);
		mysql_query(g_SQL, query);
		foreach(new i : Player) {
			if(oyuncuData[i][oFirma] == firma) {
				oyuncuData[i][oFirma] = -1;
				oyuncuData[i][oFirmarutbe] = 0;
			}
		}

		foreach(new i : Araclar) if(AracBilgi[i][aracFirma] == firma) {
			Firmaarac_TamamenSil(i);
		}

		DestroyDynamicPickup(FirmaInfo[firma][fPickupb]);
		DestroyDynamic3DTextLabel(FirmaInfo[firma][fLabelb]);

		Iter_Remove(Firma, firma);

		FirmaInfo[firma][fID] = -1;
		FirmaInfo[firma][fLiderrutbe] = 0;
		FirmaInfo[firma][fKasa] = 0;
		format(FirmaInfo[firma][fNot], 200, "%s", EOS);
		format(FirmaInfo[firma][fIsim], 40, "%s", EOS);
		return 1;
	}

	CMD:firma(playerid, params[])
	{
		if(oyuncuData[playerid][oFirma] == -1) return hataMesaji(playerid, "Herhangi bir firma bünyesinde çalýþmýyorsunuz.");
		new firma = oyuncuData[playerid][oFirma], baslik[70], icerik[300];
		if(oyuncuData[playerid][oFirmarutbe] < 10)
		{
			format(baslik, sizeof(baslik), "{F5E600}%s", FirmaInfo[firma][fIsim]);
			format(icerik, sizeof(icerik), "{FFFFFF}Firma Bilgileri\nFirma Kasasý [{23BD00}%s{FFFFFF}]\nKontratlarý Gör\nÝstifa Et", NumaraFormati(FirmaInfo[firma][fKasa]));
		}
		else if(oyuncuData[playerid][oFirmarutbe] == 10)
		{
			format(baslik, sizeof(baslik), "{F5E600}%s", FirmaInfo[firma][fIsim]);
			format(icerik, sizeof(icerik), "{FFFFFF}Firma Bilgileri\nFirma Kasasý [{23BD00}%s{FFFFFF}]\nKontratlarý Gör\nÝflas Açýkla\nFirma Yönetim Ýþlemleri", NumaraFormati(FirmaInfo[firma][fKasa]));
			SetPVarInt(playerid, "FirmaYonetimi", oyuncuData[playerid][oFirma]);
		}
		ShowPlayerDialog(playerid, DIALOG_FIRMA, DIALOG_STYLE_LIST, baslik, icerik, "Seç", "Iptal");
		return 1;
	}

	CMD:fmenu(playerid, params[])
	{
		for(new b = 0; b != MAX_FIRMA; b++) {
			if(Iter_Contains(Firma, b)) {
				if(IsPlayerInRangeOfPoint(playerid,2.0, FirmaInfo[b][fiX], FirmaInfo[b][fiY], FirmaInfo[b][fiZ])) {
					new baslik[90];
					format(baslik, sizeof(baslik), "{F5E600}%s - Firma Menüsü ID: %d", FirmaInfo[b][fIsim], b);
					ShowPlayerDialog(playerid, DIALOG_FIRMA_MENU, DIALOG_STYLE_LIST, baslik, "Ýþ Baþý\nÝþ Baþvurusu", "Seç", "Iptal");
					SetPVarInt(playerid, "FirmaMenusu", b);
				}
			}
		}
		return 1;
	}

	CMD:fdavet(playerid, params[])
	{
		if(oyuncuData[playerid][oHapisSure][0] > 0 || oyuncuData[playerid][oHapisSure][1] > 0) return hataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oDonduruldu] > 0) return hataMesaji(playerid, "Dondurulmuþken bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oFirma] == -1) return hataMesaji(playerid, "Herhangi bir firma bünyesinde çalýþmýyorsunuz.");
		if(oyuncuData[playerid][oFirmarutbe] < 8) return hataMesaji(playerid, "Firma lideri deðilsiniz.");

		static oyuncuid;
		if(sscanf(params, "u", oyuncuid)) return kullanimMesaji(playerid, "/fdavet [oyuncu id/isim]");
		if(!IsPlayerConnected(oyuncuid)) return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");
		if(playerid == oyuncuid) return hataMesaji(playerid, "Bu komutu kendi üzerinde kullanamazsýn.");
		if(!oyuncuData[oyuncuid][oGiris]) return hataMesaji(playerid, "Oyuncu giriþ yapmamýþ, komut üzerinde kullanýlamaz.");
		if(oyuncuData[oyuncuid][oHapisSure][0] > 0 || oyuncuData[oyuncuid][oHapisSure][1] > 0) return hataMesaji(playerid, "Oyuncu hapiste, bu komutu onun üzerinde kullanamazsýn.");
		if(oyuncuData[oyuncuid][oYarali] == true) return hataMesaji(playerid, "Oyuncu yaralanmýþ, bu komut üzerinde kullanýlamýyor.");
		if(oyuncuData[oyuncuid][oDonduruldu] > 0) return hataMesaji(playerid, "Oyuncu dondurulma etkisinde, bu komut üzerinde kullanýlamýyor.");
		if(oyuncuData[oyuncuid][oFirma] > -1) return hataMesaji(playerid, "Oyuncu zaten bir firmaya mensup.");

		SunucuMesaji(oyuncuid, "%s adlý kiþi sizi %s adlý firmaya davet ediyor. ((Kabul etmek için /fdavetkabul))", OyuncuIsim(playerid), FirmaInfo[oyuncuData[playerid][oFirma]][fIsim]);
		SunucuMesaji(playerid, "%s adlý kiþiye firmanýzda çalýþma daveti gönderdiniz, kabul etmesini bekleyin.", OyuncuIsim(oyuncuid));
		SetPVarInt(oyuncuid, "firmadavet", oyuncuData[playerid][oFirma]);
		SetPVarInt(oyuncuid, "firmadavetaldi", 1);
		return 1;
	}

	CMD:fdavetkabul(playerid, params[])
	{
		if(oyuncuData[playerid][oHapisSure][0] > 0 || oyuncuData[playerid][oHapisSure][1] > 0) return hataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oDonduruldu] > 0) return hataMesaji(playerid, "Dondurulmuþken bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oFirma] != -1) return hataMesaji(playerid, "Zaten bir firma bünyesinde çalýþýyorsun.");
		if(GetPVarInt(playerid, "firmadavetaldi") == 0) return hataMesaji(playerid, "Herhangi bir davet almamýþsýnýz.");
		new firma = GetPVarInt(playerid, "firmadavet"), fmesaji[120];
		oyuncuData[playerid][oFirma] = firma;
		oyuncuData[playerid][oFirmarutbe] = 1;
		SunucuMesaji(playerid, "Firma davet isteðini kabul ettiniz.");
		format(fmesaji, sizeof(fmesaji), "[FÝRMA]: %s adlý kiþi firma bünyesine katýldý!", OyuncuIsim(playerid));
		FirmaMesaji(firma, fmesaji);
		DeletePVar(playerid, "firmadavet"), DeletePVar(playerid, "firmadavetaldi");
		OyuncuKaydet(playerid);
		return 1;
	}

	CMD:falimlar(playerid, params[])
	{
		if(oyuncuData[playerid][oFirma] == -1) return hataMesaji(playerid, "Herhangi bir firma bünyesinde çalýþmýyorsunuz.");
		new query[250];
		if(oyuncuData[playerid][oFirmarutbe] != 10) return hataMesaji(playerid, "Firma lideri deðilsiniz.");
		if(FirmaInfo[oyuncuData[playerid][oFirma]][fAlimlar] == 0)
		{
			FirmaInfo[oyuncuData[playerid][oFirma]][fAlimlar] = 1;
			SunucuMesaji(playerid, "Firmaya iþçi alýmlarýný serbest býraktýnýz.");
			mysql_format(g_SQL, query, sizeof(query), "UPDATE `firmalar` SET `alimdurum` = %i WHERE `id` = %i", FirmaInfo[oyuncuData[playerid][oFirma]][fAlimlar],oyuncuData[playerid][oFirma]);
			mysql_query(g_SQL, query);
		}
		else
		{
			FirmaInfo[oyuncuData[playerid][oFirma]][fAlimlar] = 0;
			SunucuMesaji(playerid, "Artýk firmanýza iþçi alýmýný yanlýzca davet yoluyla yapabileceksiniz.");
			mysql_format(g_SQL, query, sizeof(query), "UPDATE `firmalar` SET `alimdurum` = %i WHERE `id` = %i", FirmaInfo[oyuncuData[playerid][oFirma]][fAlimlar],oyuncuData[playerid][oFirma]);
			mysql_query(g_SQL, query);
		}
		return 1;
	}

	CMD:akontrat(playerid, params[])
	{
		new deger,kontad[64],firma;
		if(oyuncuData[playerid][oAdmin] < 8) return YetkinizYok(playerid);
		if(sscanf(params, "d", deger)) return kullanimMesaji(playerid, "/akontrat [kontrat tür id]");
		if(deger < 0 || deger > 4) return hataMesaji(playerid, "Kontrat türü 0 ile 4 arasýnda olmaldýr. (/kontratturleri)");

		for(new b = 0; b != MAX_FIRMA; b++) for(new i = 0; i < sizeof(Kontratlar) ; i++) {
			if(FirmaInfo[b][fAlan] == Kontratlar[i][kontalan]) {
				if(FirmaInfo[b][fKontrat][deger] == 0) {
					FirmaInfo[b][fKontrat][deger] = 1;
					FirmaMesaji(b, "[FÝRMA]: Sunucu tarafýndan yeni bir kontrat gönderildi.");
				}
			}
		}
		for(new r = 0; r < sizeof(Kontratlar) ; r++) {
			if(Kontratlar[r][kontid] == deger) format(kontad, 64, Kontratlar[r][kontbaslik]), firma = Kontratlar[r][kontalan];
		}
		UyariMesaji(playerid, "%s türündeki firmalara '%s' adlý kontratý gönderdiniz.", FirmaAlani(firma),kontad);
		return 1;
	}

	CMD:asaatayarla(playerid, params[])
	{
		new deger;
		if(oyuncuData[playerid][oAdmin] < 7) return YetkinizYok(playerid);
		if(sscanf(params, "d", deger)) return kullanimMesaji(playerid, "/asaatayarla [0-23]");
		if(deger < 0 || deger > 23) return BilgiText(playerid, "~r~~h~~h~~h~Seçilen zaman dilimi 0-23 arasýnda olmalýdýr.");

		SunucuZaman = deger;
		foreach(new i : Player)
		{
			SetPlayerTime(i, SunucuZaman, 0);
		}
		return 1;
	}

	CMD:ahavaayarla(playerid, params[])
	{
		new deger;
		if(oyuncuData[playerid][oAdmin] < 7) return YetkinizYok(playerid);
		if(sscanf(params, "d", deger)) return kullanimMesaji(playerid, "/ahavaayarla [deðer]");

		SunucuWeather = deger;
		foreach(new i : Player)
		{
			SetPlayerWeather(i, SunucuWeather);
		}
		return 1;
	}

	CMD:kovantopla(playerid)
	{
		if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return hataMesaji(playerid, "Araçtayken bu komutu kullanamazsýnýz.");
		    for(new shell = 0; shell < sizeof(ShellInfo); shell++)
    	    {
                if(IsPlayerInRangeOfPoint(playerid,2.0, ShellInfo[shell][shellX], ShellInfo[shell][shellY], ShellInfo[shell][shellZ]))
                {
					if(GetPlayerVirtualWorld(playerid) == ShellInfo[shell][shellWorld])
					{
				        if(ShellInfo[shell][shellDropped] == 1 && ShellInfo[shell][shellX] != 0.0 && ShellInfo[shell][shellY] != 0.0 && ShellInfo[shell][shellZ] != 0.0)
				        {
							new me[95];
                            ApplyAnimation(playerid, "BOMBER","BOM_Plant_In",4.0,0,0,0,0,0);
		                    if(IsValidDynamic3DTextLabel(ShellInfo[shell][ShellCasing])) DestroyDynamic3DTextLabel(ShellInfo[shell][ShellCasing]);
		                    ShellInfo[shell][shellDropped] = 0;
		                    ShellInfo[shell][shellX] = 0.0;
		    		        ShellInfo[shell][shellY] = 0.0;
		    		        ShellInfo[shell][shellZ] = 0.0;
		    		        ShellInfo[shell][shellDropped] = 0;
		    		        format(me, sizeof(me), "** %s eðilir ve yerdeki kovaný alýr.", OyuncuIsim(playerid));
							SetPlayerChatBubble(playerid, me, RENK_PEMBE, 12.0, 10000);
							if(OyuncuBirlikTuru(playerid) == BIRLIK_POLIS) {
							SunucuMesaji(playerid, "Yerde bulunan kovan envanterinize eklendi, adli týpta kovaný sorgulatabilirsiniz.");
							ItemEkle(playerid, 117, ShellInfo[shell][shellSerial]);
							}
							else
							{
							SunucuMesaji(playerid, "Yerde bulunan kovaný alarak olasý delilleri yok ettiniz.");
							}
		    		        return 1;
				        }
				    }
				}
			}

		return 1;
	}

	CMD:tedaviol(playerid)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 2.0, -302.7927,1048.5364,1028.0485)) return hataMesaji(playerid, "Tedavi olma noktasýnda deðilsiniz.");
		if(oyuncuData[playerid][oPara] < 3000) return hataMesaji(playerid, "Tedavi olmak için $3.000'a ihtiyacýnýz var.");
		Dialog_Show(playerid, tedaviolmaonay, DIALOG_STYLE_MSGBOX, "Tedavi Ol", "Uyuþturucu tedavisine baþlangýç için $3.000'a ihtiyacýnýz var.\nEðer tedaviyi onaylarsanýz uyuþturucu baðýmlýlýðýnýz bir miktar azalacaktýr.\n((Baðýmlýlýk deðeri 15 azalýr.))", "Onayla", "Ýptal");
		return 1;
	}

	CMD:utedavi(playerid, params[])
	{
		if(OyuncuBirlikTuru(playerid) != BIRLIK_MEDIKAL && (oyuncuData[playerid][oFirma] < 0 || FirmaInfo[oyuncuData[playerid][oFirma]][fAlan] != 0)) return hataMesaji(playerid, "Bu komutu sadece Hastane firmasý çalýþanlarý kullanabilir.");
		static oyuncuid;
		if(sscanf(params, "u", oyuncuid))
			return kullanimMesaji(playerid, "/utedavi [oyuncu id/isim]");

		if(!IsPlayerConnected(oyuncuid))
			return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");

		if(oyuncuid == playerid)
			return hataMesaji(playerid, "Kendinizi tedavi edemezsiniz.");
		if(oyuncuData[oyuncuid][oBagimlilik] == 0) return hataMesaji(playerid, "Bu kiþi baðýmlý deðil, tedaviye ihtiyacý yok.");
		SetPVarInt(oyuncuid, "TedaviEdenKisi", playerid);
		Dialog_Show(oyuncuid, tedavietmeonay, DIALOG_STYLE_MSGBOX, "Tedavi Ol", "Uyuþturucu tedavisine baþlangýç için $3.000'a ihtiyacýnýz var.\nEðer tedaviyi onaylarsanýz uyuþturucu baðýmlýlýðýnýz bir miktar azalacaktýr.\n((Baðýmlýlýk deðeri 15 azalýr.))", "Onayla", "Ýptal");
		return 1;
	}

	Dialog:tedavietmeonay(playerid, response, listitem, inputtext[])
	{
		if(response)
		{
			new doktorid = GetPVarInt(playerid, "TedaviEdenKisi");
			if(oyuncuData[playerid][oPara] < 3000) return hataMesaji(playerid, "Paranýz yetersiz."), DeletePVar(playerid, "TedaviEdenKisi");
			if(oyuncuData[playerid][oBagimlilik] == 0) return hataMesaji(playerid, "Baðýmlý deðilsen tedavi olamazsýn."), DeletePVar(playerid, "TedaviEdenKisi");
			if(!IsPlayerConnected(doktorid)) return hataMesaji(playerid, "Doktor oyundan ayrýlmýþ, iþlem iptal."), DeletePVar(playerid, "TedaviEdenKisi");
			oyuncuData[playerid][oBagimlilik] -= 15;
			ParaEkle(playerid, -3000);
			ParaEkle(doktorid, 3000);
			DeletePVar(playerid, "TedaviEdenKisi");
			if(oyuncuData[playerid][oBagimlilik] < 0) oyuncuData[playerid][oBagimlilik] = 0;
			switch(oyuncuData[playerid][oBagimlilik])
			{
				case 0:
				{
					SunucuMesaji(playerid, "$3.000 karþýlýðýnda tedavi gördünüz. Baðýmlýlýktan tamamen kurtuldunuz, tebrikler.");
					SunucuMesaji(doktorid, "$3.000 karþýlýðýnda tedavi ettiniz. Karþýdaki kiþi baðýmlýlýktan tamamen kurtuldu, tebrikler.");
				}
				default:
				{
					SunucuMesaji(playerid, "$3.000 karþýlýðýnda tedavi gördünüz. Baðýmlýlýðýnýz bir miktar giderildi."); 
					SunucuMesaji(doktorid, "$3.000 karþýlýðýnda tedavi ettiniz. Baðýmlýlýðýný bir miktar giderdiniz.");
				}
			}
		}
		return 1;
	}

	Dialog:tedaviolmaonay(playerid, response, listitem, inputtext[])
	{
		if(response)
		{
			if(oyuncuData[playerid][oPara] < 3000) return hataMesaji(playerid, "Paranýz yetersiz.");
			if(oyuncuData[playerid][oBagimlilik] == 0) return hataMesaji(playerid, "Baðýmlý deðilsen tedavi olamazsýn.");
			oyuncuData[playerid][oBagimlilik] -= 15;
			ParaEkle(playerid, -3000);
			if(oyuncuData[playerid][oBagimlilik] < 0) oyuncuData[playerid][oBagimlilik] = 0;
			switch(oyuncuData[playerid][oBagimlilik])
			{
				case 0: SunucuMesaji(playerid, "$3.000 karþýlýðýnda tedavi gördünüz. Baðýmlýlýktan tamamen kurtuldunuz, tebrikler.");
				default: SunucuMesaji(playerid, "$3.000 karþýlýðýnda tedavi gördünüz. Baðýmlýlýðýnýz bir miktar giderildi."); 
			}
		}
		return 1;
	}

	CMD:gise(playerid)
	{
		new id = GiseBul(playerid);
		if(id == -1) return hataMesaji(playerid, "Herhangi bir giþeye yakýn deðilsiniz.");
		if(oyuncuData[playerid][oPara] < giseData[id][giseUcret]) return hataMesaji(playerid, "Giþeyi açabilmek için %s miktara ihtiyacýnýz var.", NumaraFormati(giseData[id][giseUcret]));
		if(!IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Giþeyi açabilmek için araçta olmalýsýnýz.");
		if(GISEKAPALI == 1 && OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return hataMesaji(playerid, "Giþeler polis departmaný tarafýndan kapatýlmýþ durumda.");
		if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS){
			new str[128];
			format(str, sizeof str, "giþeden geçmek için %s ödeme yapar.", NumaraFormati(giseData[id][giseUcret]));
			cmd(playerid, 1, str);
		 	ParaEkle(playerid, -giseData[id][giseUcret]);
		}
		else{
			SCM_Ex(playerid, -1, "Giþeden geçiþiniz ücretsiz olarak saðlandý.");
		}
		giseData[id][giseSure] = 5;
		SCM_Ex(playerid, -1, "{2F9158}[!]{FFFFFF} Giþenin diðer tarafýna geçmek için 5 saniyeniz var.");
		SetDynamicObjectRot(giseData[id][giseObje], giseData[id][gisePos][3], giseData[id][gisePos][4] - 70, giseData[id][gisePos][5]);
		return 1;
	}

	CMD:agiseyarat(playerid, params[])
	{
		new id = Iter_Free(Giseler), ucret;
		if(oyuncuData[playerid][oAdmin] < 5) return YetkinizYok(playerid);
		if(sscanf(params, "d", ucret)) return kullanimMesaji(playerid, "/agiseyarat [geçiþ ücreti]");
		if(id < 0) return hataMesaji(playerid, "Daha fazla dinamik giþe oluþturulamaz.");
		giseData[id][giseUcret] = ucret;
		GiseOlustur(playerid, id);
		return 1;
	}

	CMD:agisesil(playerid, params[])
	{
		new id;
		if(oyuncuData[playerid][oAdmin] < 5) return YetkinizYok(playerid);
		if(sscanf(params, "d", id)) return kullanimMesaji(playerid, "/agisesil [id]");
		if(!Iter_Contains(Giseler, id)) return hataMesaji(playerid, "Belirtilen ID'de giþe mevcut deðil.");
		GiseSil(id);
		return 1;
	}

	CMD:atamirciyarat(playerid, params[])
	{
		new id = Iter_Free(Tamirciler), fiyat = 0;
		if(oyuncuData[playerid][oAdmin] < 5) return YetkinizYok(playerid);
		if(sscanf(params, "d", fiyat)) return kullanimMesaji(playerid, "/atamirciyarat [fiyat]");
		if(id < 0) return hataMesaji(playerid, "Sunucu maksimum tamirci seviyesine ulaþtý.");
		if(fiyat < 1 || fiyat > 500) return hataMesaji(playerid, "Fiyat 1 - 500 arasý olmalýdýr.");
		TamirciOlustur(playerid, id, fiyat);
		return 1;
	}

	CMD:atamircisil(playerid, params[])
	{
		new id;
		if(oyuncuData[playerid][oAdmin] < 5) return YetkinizYok(playerid);
		if(sscanf(params, "d", id)) return kullanimMesaji(playerid, "/atamircisil [id]");
		if(!Iter_Contains(Tamirciler, id)) return hataMesaji(playerid, "Belirtilen ID'de tamirci mevcut deðil.");
		TamirciSil(playerid,id);
		return 1;
	}

/*CMD:karavan(playerid, params[])
{
	new idx[20],parametre;
	if(sscanf(params, "s[20]", idx))
	{
		kullanimMesaji(playerid, "/karavan [parametre]");
		SendClientMessage(playerid, RENK_SARI, "[PARAMETRELER]:{FFFFFF} satinal, kapi, park, bagla, kasa, liste, bul, parkagonder, duzenle.");
	}
	else
	{
		if(sscanf(params, "s[20]i", idx, parametre) && strcmp(idx, "bul", true) == 0)
		{
			kullanimMesaji(playerid, "/karavan bul [karavan id]");
		}
		else if(sscanf(params, "s[20]i", idx, parametre) && strcmp(idx, "parkagonder", true) == 0)
		{
			kullanimMesaji(playerid, "/karavan parkagonder [karavan id]");
		} 
		if(strcmp(idx, "satinal", true) == 0)
		{
			if(!IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Karavan satýn alabimek için araç içerisinde olmalýsýnýz.");
			if(!IsPlayerInRangeOfPoint(playerid,3.0,-68.1993,-1598.2216,2.7242)) return hataMesaji(playerid, "Karavan satýn alma noktasýnda deðilsiniz.");
			new arac = GetPlayerVehicleID(playerid);
			if(GetVehicleModel(arac) != 489 && GetVehicleModel(arac) != 579 && GetVehicleModel(arac) != 554) return hataMesaji(playerid, "Karavan satýn alabilmek için uygun bir Off Road aracýnýz olmalýdýr.");
			ShowPlayerDialog(playerid, DIALOG_KARAVAN_SATINAL, DIALOG_STYLE_MSGBOX, "Colonel's Camper Shop", "Karavan satýn almak istiyor musunuz? (40.000$)", "Evet", "Hayýr");
		}
		else if(strcmp(idx, "liste", true) == 0)
		{
			new query[250];
			mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `karavanlar` WHERE `sahip` = '%s'", oyuncuData[playerid][oIsim]);
			mysql_tquery(g_SQL, query, "Karavanlarim", "d", playerid);
		}
		else if(strcmp(idx, "parkagonder", true) == 0)
		{
			if(!IsValidDynamicObject(KaravanInfo[parametre][kObje])) return hataMesaji(playerid, "Karavan idini yanlýþ girdiniz.");
			if(strcmp(KaravanInfo[parametre][kSahip], oyuncuData[playerid][oIsim]) != 0) return hataMesaji(playerid, "Bu karavan size ait deðildir.");
			if(IsValidDynamicObject(KaravanInfo[parametre][kKapi])){DestroyDynamicObject(KaravanInfo[parametre][kKapi]);}
			DestroyDynamicObject(KaravanInfo[parametre][kObje]);
			KaravanInfo[parametre][kObje] = CreateDynamicObject(-2007, KaravanInfo[parametre][kX],KaravanInfo[parametre][kY],KaravanInfo[parametre][kZ] - 0.4,0.0,0.0,KaravanInfo[parametre][krZ]); //CreateObject(-2007, KaravanInfo[parametre][kX],KaravanInfo[parametre][kY],KaravanInfo[parametre][kZ] - 0.4,0.0,0.0,KaravanInfo[parametre][krZ],200);
			KaravanInfo[parametre][kKapi] = CreateDynamicObject(-2008, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0); //CreateObject(-2008, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
			AttachDynamicObjectToObject(KaravanInfo[parametre][kKapi], KaravanInfo[parametre][kObje], 1.637408, 0.916593, 0.915793, 0.0, 0.0, 0.0);
			KaravanInfo[parametre][kBaglandi] = 0;
			KaravanInfo[parametre][kKapidurum] = 0;
			SunucuMesaji(playerid, "Karavanýnýz park yerine gönderildi. (Karavan ID: %d - Lokasyon: %s)", parametre,LokasyonBul(KaravanInfo[parametre][kX], KaravanInfo[parametre][kY], KaravanInfo[parametre][kZ]));
		}
		else if(strcmp(idx, "bul", true) == 0)
		{
			if(!IsValidDynamicObject(KaravanInfo[parametre][kObje])) return hataMesaji(playerid, "Karavan idini yanlýþ girdiniz.");
			if(strcmp(KaravanInfo[parametre][kSahip], oyuncuData[playerid][oIsim]) != 0) return hataMesaji(playerid, "Bu karavan size ait deðildir.");
			if(KaravanInfo[parametre][kBaglandi] == 1) return hataMesaji(playerid, "Karavan park halinde deðil, araca baðlanmýþ durumda.");
			SetPlayerCheckpoint(playerid, KaravanInfo[parametre][kX], KaravanInfo[parametre][kY], KaravanInfo[parametre][kZ], 5.0);
			SunucuMesaji(playerid, "Karavanýnýz haritanýzda iþaretlendi. (Karavan ID: %d - Lokasyon: %s)", parametre,LokasyonBul(KaravanInfo[parametre][kX], KaravanInfo[parametre][kY], KaravanInfo[parametre][kZ]));
		}
		else if(strcmp(idx, "kasa", true) == 0)
		{
			hataMesaji(playerid, "Bu seçenek geçici olarak devre dýþý býrakýlmýþtýr.");
			for (new h = 0; h < MAX_KARAVAN; h++)
			{
				if (KaravanInfo[h][kAktif])
				{
					if(IsValidDynamicObject(KaravanInfo[h][kObje]) && IsPlayerInRangeOfPoint(playerid,5.0,KaravanInfo[h][kX],KaravanInfo[h][kY], KaravanInfo[h][kZ])) {
						if(strcmp(KaravanInfo[h][kSahip], oyuncuData[playerid][oIsim]) != 0) return hataMesaji(playerid, "Karavanýn kasasýnda iþlem yapmak için karavanýn sahibi olmalýsýnýz.");
						if(KaravanInfo[h][kBaglandi] == 1) return hataMesaji(playerid, "Karavanýn kasasýnda iþlem yapmak için karavanýn baðlý durumda deðil, park halinde olmasý gerekiyor.");
						SetPVarInt(playerid, "Karavanid", h);
						ShowPlayerDialog(playerid, DIALOG_KARAVAN_KASA, DIALOG_STYLE_LIST, "{F5E600}Karavan Kasasý", "Para Koy\nPara Çýkar\nKasa Bilgisi", "Seç", "Iptal");
					}
				}
			} 
		}
		else if(strcmp(idx, "duzenle", true) == 0)
		{
			for (new h = 0; h < MAX_KARAVAN; h++)
			{
				if (KaravanInfo[h][kAktif])
				{
					if(IsValidDynamicObject(KaravanInfo[h][kObje]) && IsPlayerInRangeOfPoint(playerid,5.0,KaravanInfo[h][kX],KaravanInfo[h][kY], KaravanInfo[h][kZ])) {
						if(strcmp(KaravanInfo[h][kSahip], oyuncuData[playerid][oIsim]) != 0) return hataMesaji(playerid, "Karavanýn yerini düzenleyebilmek için karavanýn sahibi olmalýsýnýz.");
						if(KaravanInfo[h][kBaglandi] == 1) return hataMesaji(playerid, "Karavaný düzenleyebilmek için karavanýn baðlý durumda deðil, park halinde olmasý gerekiyor.");
						EditDynamicObject(playerid, KaravanInfo[h][kObje]);
						SunucuMesaji(playerid, "Karavanýn yerini düzenlemeye baþladýnýz.");
						SetPVarInt(playerid, "KaravanDuzen",1);
						SetPVarInt(playerid, "karavanid",h);
					}
				}
			}
		}
		else if(strcmp(idx, "kapi", true) == 0)
		{
			for (new h = 0; h < MAX_KARAVAN; h++)
			{
				if (KaravanInfo[h][kAktif])
				{
					if(IsValidDynamicObject(KaravanInfo[h][kObje]) && IsPlayerInRangeOfPoint(playerid,5.0,KaravanInfo[h][kX],KaravanInfo[h][kY], KaravanInfo[h][kZ])) {
						if(strcmp(KaravanInfo[h][kSahip], oyuncuData[playerid][oIsim]) != 0) return hataMesaji(playerid, "Karavanýn kapýsýný açabilmek için karavanýn sahibi olmalýsýnýz.");
						if(KaravanInfo[h][kBaglandi] == 1) return hataMesaji(playerid, "Karavanýn kapýsýný açmak/kapatmak için karavanýn baðlý durumda deðil, park halinde olmasý gerekiyor.");
						if(KaravanInfo[h][kKapidurum] == 1)
						{
							if(IsValidDynamicObject(KaravanInfo[h][kKapi])){DestroyDynamicObject(KaravanInfo[h][kKapi]);}
							KaravanInfo[h][kKapi] = CreateDynamicObject(-2008, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0); //CreateObject(-2008, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
							AttachDynamicObjectToObject(KaravanInfo[h][kKapi], KaravanInfo[h][kObje], 1.637408, 0.916593, 0.915793, 0.0, 0.0, 0.0);
							KaravanInfo[h][kKapidurum] = 0;
							new emote[80];
							format(emote, sizeof(emote), "elini karavanýn kapýsýna götürür ve hafifçe iterek kapatýr.");
							cmd(playerid, 1, emote);
							SunucuMesaji(playerid, "Karavanýn kapýsýný kapattýnýz.");
						}
						else
						{
							if(IsValidDynamicObject(KaravanInfo[h][kKapi])){DestroyDynamicObject(KaravanInfo[h][kKapi]);}
							KaravanInfo[h][kKapi] = CreateDynamicObject(-2008, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0); //CreateObject(-2008, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
							AttachDynamicObjectToObject(KaravanInfo[h][kKapi], KaravanInfo[h][kObje], 1.637408, 0.916593, 0.915793, 0.100003, -0.100009, 97.200019);
							KaravanInfo[h][kKapidurum] = 1;
							new emote[80];
							format(emote, sizeof(emote), "elini karavanýn kapýsýna götürür ve kulbundan tutarak kapýyý açar.");
							cmd(playerid, 1, emote);
							SunucuMesaji(playerid, "Karavanýn kapýsýný açtýnýz.");
						}
					}
				}
			}
		}
		else if(strcmp(idx, "park", true) == 0)
		{
			for (new h = 0; h < MAX_KARAVAN; h++)
			{
				if (KaravanInfo[h][kAktif])
				{
					if(KaravanInfo[h][kBaglandi])
					{
						if(strcmp(KaravanInfo[h][kSahip], oyuncuData[playerid][oIsim]) == 0)
						{
							if(!IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Karavaný park edebilmek için karavanýn araca baðlanmýþ olmasý gerekiyor ve sizin araç içerisinde olmanýz gerekiyor.");
							new aracid = GetPlayerVehicleID(playerid);
							if(GetVehicleModel(aracid) != 489 && GetVehicleModel(aracid) != 579 && GetVehicleModel(aracid) != 554) return hataMesaji(playerid, "Geçerli bir aracýn içerisinde deðilsiniz.");
							new Float:X,Float:Y,Float:Z,Float:A,query[300];
							GetPosBehindVehicle(aracid, X, Y, Z, 6.0);
							GetVehicleZAngle(aracid, A);
							if(IsValidDynamicObject(KaravanInfo[h][kKapi])){DestroyDynamicObject(KaravanInfo[h][kKapi]);}
							if(IsValidDynamicObject(KaravanInfo[h][kObje])){DestroyDynamicObject(KaravanInfo[h][kObje]);}
							KaravanInfo[h][kObje] = CreateDynamicObject(-2007, X,Y,Z - 0.4,0.0,0.0,A); //CreateObject(-2007, X,Y,Z - 0.4,0.0,0.0,A,200);
							KaravanInfo[h][kKapi] = CreateDynamicObject(-2008, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0); //CreateObject(-2008, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
							AttachDynamicObjectToObject(KaravanInfo[h][kKapi], KaravanInfo[h][kObje], 1.637408, 0.916593, 0.915793, 0.0, 0.0, 0.0);
							KaravanInfo[h][kX] = X;
							KaravanInfo[h][kY] = Y;
							KaravanInfo[h][kZ] = Z;
							KaravanInfo[h][krZ] = A;
							KaravanInfo[h][kBaglandi] = 0;
							KaravanInfo[h][kKapidurum] = 0;
							mysql_format(g_SQL, query, sizeof(query), "UPDATE `karavanlar` SET `x` = %f, `y` = %f, `z` = %f, `rz` = %f WHERE `id` = %i", X,Y,Z,A, h);
							mysql_tquery(g_SQL, query, "", "", playerid);
							SunucuMesaji(playerid, "Karavanýnýzý baþarýyla park ettiniz.");
						}
					}
				}
			}
		}
		else if(strcmp(idx, "bagla", true) == 0)
		{
			for (new h = 0; h < MAX_KARAVAN; h++)
			{
				if (KaravanInfo[h][kAktif])
				{
					if(IsValidDynamicObject(KaravanInfo[h][kObje]) && IsPlayerInRangeOfPoint(playerid,12.0,KaravanInfo[h][kX],KaravanInfo[h][kY], KaravanInfo[h][kZ]))
					{
						if(!KaravanInfo[h][kBaglandi])
						{
							if(strcmp(KaravanInfo[h][kSahip], oyuncuData[playerid][oIsim]) == 0)
							{
								if(!IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Karavaný baðlamak için karavanýn park halinde olmasý gerekiyor ve sizin araç içerisinde olmanýz gerekiyor.");
								new aracid = GetPlayerVehicleID(playerid);
								if(GetVehicleModel(aracid) != 489 && GetVehicleModel(aracid) != 579 && GetVehicleModel(aracid) != 554) return hataMesaji(playerid, "Geçerli bir aracýn içerisinde deðilsiniz.");
								AttachDynamicObjectToVehicle(KaravanInfo[h][kObje], GetPlayerVehicleID(playerid),-0.364999,-8.445145,-0.364999,0.000000,0.000000,0.000000);
								KaravanInfo[h][kBaglandi] = 1;
								SunucuMesaji(playerid, "Karavanýnýzý baþarýyla aracýnýza baðladýnýz.");
							}
						}
					}
				}
			}
		}
	}
	return 1;
}
*/
CMD:agarajyarat(playerid, params[]) {
	if(oyuncuData[playerid][oAdmin] < 8) return hataMesaji(playerid, "Bu komutu kullanmak için uygun yetkide deðilsiniz.");
	if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Araç içerisindeyken garaj oluþturamazsýnýz.");
	ShowPlayerDialog(playerid, DIALOG_GARAJKUR, DIALOG_STYLE_LIST, "{F5E600}Garaj Oluþturma", "Genel Garaj\nKiþisel Garaj", "Seç", "Iptal");
	return 1;
}

CMD:agarajduzenle(playerid, params[])
{
	new id;
	if(oyuncuData[playerid][oAdmin] < 6) return YetkinizYok(playerid);
	if(sscanf(params, "d", id)) return kullanimMesaji(playerid, "/agarajduzenle [garaj id]");
	if(!Iter_Contains(Garajlar, id)) return hataMesaji(playerid, "Belirtilen ID'de garaj mevcut deðil.");
	ShowPlayerDialog(playerid, DIALOG_GARAJDUZENLE, DIALOG_STYLE_LIST, "{F5E600}Garaj Düzenleme", "Garaj Sahibi\nGaraj Interior\nGaraj Kilit\nGaraj Birliði\nGaraj Sil", "Seç", "Iptal");
	SetPVarInt(playerid, "GarajID", id);
	return 1;
}

CMD:garaj(playerid, params[])
{
	new idx[20];
	if(sscanf(params, "s[20]", idx))
	{
		SendClientMessage(playerid, RENK_GRI, "KULLANIM: /garaj [Parametre]");
		SendClientMessage(playerid, RENK_ACIKYESIL, "Parametreler: gir, cik, kilit");
	}
	else
	{
		if(strcmp(idx, "gir", true) == 0)
		{
			new id = GarajBul(playerid);
			if(id == -1) return hataMesaji(playerid, "Herhangi bir garaja yakýn deðilsiniz.");
			if (IsPlayerInAnyVehicle(playerid))
			{
				if(GarajInfo[id][gKilit] !=0) return GameTextForPlayer(playerid, "~r~GARAJ KILITLI", 750, 4);
				new vehicle = GetPlayerVehicleID(playerid),
				query[110],
				passengers[4] = {-1, ...};

				foreach(new i : Player) {
					if(GetPlayerVehicleID(i) == vehicle) {
						passengers[GetPlayerVehicleSeat(i)] = i;
					}
				}
				for(new s = 0; s != sizeof(passengers); s++) {
					if(passengers[s] != -1) {
						SetVehiclePos(vehicle, gInteriorSpawn[GarajInfo[id][gInt]][intX],gInteriorSpawn[GarajInfo[id][gInt]][intY],gInteriorSpawn[GarajInfo[id][gInt]][intZ] + 1);
						SetVehicleZAngle(vehicle, gInteriorSpawn[GarajInfo[id][gInt]][intA]);
						SetVehicleVirtualWorld(vehicle, GarajInfo[id][gVw]);
						SetPlayerVirtualWorld(passengers[s], GarajInfo[id][gVw]);
						PutPlayerInVehicle(passengers[s], vehicle, s);
						TogglePlayerControllable(playerid, false);
						SetTimerEx("oyuncucoz", 2000, false, "i", playerid);
								//GarajInfo[id][gKapasite] += 1;
						mysql_format(g_SQL, query, sizeof(query), "UPDATE `garajlar` SET `kapasite` = %i WHERE `id` = %i", GarajInfo[id][gKapasite], id);
						mysql_tquery(g_SQL, query, "", "");
					}
				}
			}
			else
			{
				if(GarajInfo[id][gKilit] !=0) return GameTextForPlayer(playerid, "~r~GARAJ KILITLI", 750, 4);
				SetPlayerPos(playerid, gInteriorSpawn[GarajInfo[id][gInt]][intX],gInteriorSpawn[GarajInfo[id][gInt]][intY],gInteriorSpawn[GarajInfo[id][gInt]][intZ] + 1);
				SetPlayerVirtualWorld(playerid, GarajInfo[id][gVw]);
				TogglePlayerControllable(playerid, false);
				SetTimerEx("oyuncucoz", 2000, false, "i", playerid);
			}
		}
		else if(strcmp(idx, "cik", true) == 0)
		{
			new id = GetPlayerVirtualWorld(playerid) - 1;
			if(id == -1) return hataMesaji(playerid, "Herhangi bir garajýn içerisinde deðilsiniz.");
			if (IsPlayerInAnyVehicle(playerid))
			{
				new vehicle = GetPlayerVehicleID(playerid),
				query[110],
				passengers[4] = {-1, ...};

				foreach(new i : Player) {
					if(GetPlayerVehicleID(i) == vehicle) {
						passengers[GetPlayerVehicleSeat(i)] = i;
					}
				}
				for(new s = 0; s != sizeof(passengers); s++) {
					if(passengers[s] != -1) {
						SetVehiclePos(vehicle, GarajInfo[id][gX],GarajInfo[id][gY],GarajInfo[id][gZ] + 1);
						SetVehicleVirtualWorld(vehicle, 0);
						SetPlayerVirtualWorld(passengers[s], 0);
						PutPlayerInVehicle(passengers[s], vehicle, s);
						TogglePlayerControllable(playerid, false);
						SetTimerEx("oyuncucoz", 2000, false, "i", playerid);
							//GarajInfo[id][gKapasite] -= 1;
						mysql_format(g_SQL, query, sizeof(query), "UPDATE `garajlar` SET `kapasite` = %i WHERE `id` = %i", GarajInfo[id][gKapasite], id);
						mysql_tquery(g_SQL, query, "", "");
					}
				}
			}
			else
			{
				SetPlayerPos(playerid, GarajInfo[id][gX],GarajInfo[id][gY],GarajInfo[id][gZ] + 1);
				SetPlayerVirtualWorld(playerid, 0);
				TogglePlayerControllable(playerid, false);
				SetTimerEx("oyuncucoz", 2000, false, "i", playerid);
			}
		}
		else if(strcmp(idx, "kilit", true) == 0)
		{
			new labelString[100],query[110];
			if (IsPlayerInRangeOfPoint(playerid,5.0,gInteriorSpawn[0][intX],gInteriorSpawn[0][intY],gInteriorSpawn[0][intZ]) || IsPlayerInRangeOfPoint(playerid,5.0,gInteriorSpawn[1][intX],gInteriorSpawn[1][intY],gInteriorSpawn[1][intZ]))
			{
				new id = GetPlayerVirtualWorld(playerid) - 1;
				if(strcmp(GarajInfo[id][gSahip], oyuncuData[playerid][oIsim]) != 0 && GarajInfo[id][gBirlik] == -1) return hataMesaji(playerid, "Garajýn sahibi siz olmadýðýnýz için kilidi açýp kapatamýyorsunuz.");
				if(GarajInfo[id][gBirlik] != -1 && GarajInfo[id][gBirlik] != oyuncuData[playerid][oBirlik]) return hataMesaji(playerid, "Garaj sizin birliðinize ait olmadýðý için kilidi açýp kapatamýyorsunuz.");
				if (GarajInfo[id][gKilit] == 0)
				{
					GarajInfo[id][gKilit] = 1;
					format(labelString, sizeof(labelString), "[{F00E0E}KÝLÝTLÝ{FFFFFF}]\n{AFAFAF}[GARAJ(%d)]\n[SAHÝP]{FFFFFF} %s", id, GarajInfo[id][gSahip]);
					UpdateDynamic3DTextLabelText(GarajInfo[id][gLabel], -1, labelString);
					SunucuMesaji(playerid, "Garajýn kapýsýný kilitlediniz.");
					mysql_format(g_SQL, query, sizeof(query), "UPDATE `garajlar` SET `kilit` = %i WHERE `id` = %i", GarajInfo[id][gKilit], id);
					mysql_tquery(g_SQL, query, "", "");
				}
				else
				{
					GarajInfo[id][gKilit] = 0;
					format(labelString, sizeof(labelString), "[{43D91A}AÇIK{FFFFFF}]\n{AFAFAF}[GARAJ(%d)]\n[SAHÝP]{FFFFFF} %s", id, GarajInfo[id][gSahip]);
					UpdateDynamic3DTextLabelText(GarajInfo[id][gLabel], -1, labelString);
					SunucuMesaji(playerid, "Garajýn kapýsýnýn kilidini açtýnýz.");
					mysql_format(g_SQL, query, sizeof(query), "UPDATE `garajlar` SET `kilit` = %i WHERE `id` = %i", GarajInfo[id][gKilit], id);
					mysql_tquery(g_SQL, query, "", "");
				}
			}
			else
			{
				new id = GarajBul(playerid);
				if(id == -1) return hataMesaji(playerid, "Herhangi bir garaja yakýn deðilsiniz.");
				if(strcmp(GarajInfo[id][gSahip], oyuncuData[playerid][oIsim]) != 0 && GarajInfo[id][gBirlik] == -1) return hataMesaji(playerid, "Garajýn sahibi siz olmadýðýnýz için kilidi açýp kapatamýyorsunuz.");
				if(GarajInfo[id][gBirlik] != -1 && GarajInfo[id][gBirlik] != oyuncuData[playerid][oBirlik]) return hataMesaji(playerid, "Garaj sizin birliðinize ait olmadýðý için kilidi açýp kapatamýyorsunuz.");
				if (GarajInfo[id][gKilit] == 0)
				{
					GarajInfo[id][gKilit] = 1;
					format(labelString, sizeof(labelString), "[{F00E0E}KÝLÝTLÝ{FFFFFF}]\n{AFAFAF}[GARAJ(%d)]\n[SAHÝP]{FFFFFF} %s", id, GarajInfo[id][gSahip]);
					UpdateDynamic3DTextLabelText(GarajInfo[id][gLabel], -1, labelString);
					SunucuMesaji(playerid, "Garajýn kapýsýný kilitlediniz.");
					mysql_format(g_SQL, query, sizeof(query), "UPDATE `garajlar` SET `kilit` = %i WHERE `id` = %i", GarajInfo[id][gKilit], id);
					mysql_tquery(g_SQL, query, "", "");
				}
				else
				{
					GarajInfo[id][gKilit] = 0;
					format(labelString, sizeof(labelString), "[{43D91A}AÇIK{FFFFFF}]\n{AFAFAF}[GARAJ(%d)]\n[SAHÝP]{FFFFFF} %s", id, GarajInfo[id][gSahip]);
					UpdateDynamic3DTextLabelText(GarajInfo[id][gLabel], -1, labelString);
					SunucuMesaji(playerid, "Garajýn kapýsýnýn kilidini açtýnýz.");
					mysql_format(g_SQL, query, sizeof(query), "UPDATE `garajlar` SET `kilit` = %i WHERE `id` = %i", GarajInfo[id][gKilit], id);
					mysql_tquery(g_SQL, query, "", "");
				}
			}
		}
	}
	return 1;
}

CMD:atelefon(playerid, params[]) {
	if(oyuncuData[playerid][oAdmin] < 3) return hataMesaji(playerid, "Bu komutu kullanmak için uygun yetkide deðilsiniz.");
	if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Araç içerisindeyken ankesörlü telefon oluþturamazsýnýz.");
	for(new i = 0; i != MAX_ATELEFON; i++) {
		if(AnkesorInfo[i][aObje] == 0) {
			new Float:X,Float:Y,Float:Z,query[250];
			new rand = 100001+random(900000);
			GetPlayerPos(playerid, X,Y,Z);

			SetPVarInt(playerid, "AnkesorKur",i);
			SetPVarInt(playerid, "AnkesorDuzenliyor",1);

			AnkesorInfo[i][aID] = i;
			AnkesorInfo[i][aObje] = CreateDynamicObject(1216, X, Y+1, Z, 0, 0, 0, GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid));
			EditDynamicObject(playerid,AnkesorInfo[i][aObje]);
			AnkesorInfo[i][aVw] = GetPlayerVirtualWorld(playerid);
			AnkesorInfo[i][aInt] = GetPlayerInterior(playerid);
			AnkesorInfo[i][aNumara] = rand;

			AnkesorInfo[i][aX] = X;
			AnkesorInfo[i][aY] = Y;
			AnkesorInfo[i][aZ] = Z;
			AnkesorInfo[i][arX] = 0;
			AnkesorInfo[i][arY] = 0;
			AnkesorInfo[i][arZ] = 0;
			AnkesorInfo[i][aAktif] = 0;
			AnkesorInfo[i][aCaliyor] = 0;
			AnkesorInfo[i][aKisi] = -1;
			AnkesorInfo[i][aArayan] = -1;
			mysql_format(g_SQL, query, sizeof(query),"INSERT INTO `atelefon` (`id`) VALUES ('%d')", i);
			mysql_tquery(g_SQL, query, "AnkesorYaratildi", "d", i);
			Iter_Add(Ankesorlu, i);
			return 1;
		}
	}
	return 1;
}

CMD:atelefonduzenle(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 1) return hataMesaji(playerid, "Bu komutu kullanmak için uygun yetkide deðilsiniz.");
	for (new h = 0; h < MAX_ATELEFON; h++)
	{
		if(IsPlayerInRangeOfPoint(playerid,2.0,AnkesorInfo[h][aX],AnkesorInfo[h][aY], AnkesorInfo[h][aZ])) {
			EditDynamicObject(playerid, AnkesorInfo[h][aObje]);
			SunucuMesaji(playerid, "Ankesörlü telefonu düzenlemeye baþladýnýz.");
			SetPVarInt(playerid, "AnkesorDuzen",1);
			SetPVarInt(playerid, "ankid",h);
		}
	}
	return 1;
}

CMD:atelefonsil(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 1) return hataMesaji(playerid, "Bu komutu kullanmak için uygun yetkide deðilsiniz.");
	for (new h = 0; h < MAX_ATELEFON; h++)
	{
		if(IsPlayerInRangeOfPoint(playerid,2.0,AnkesorInfo[h][aX],AnkesorInfo[h][aY], AnkesorInfo[h][aZ])) {
			new string[90];

			mysql_format(g_SQL, string, sizeof(string), "DELETE FROM `atelefon` WHERE `id` = '%d'", h);
			mysql_tquery(g_SQL, string);

			if(IsValidDynamic3DTextLabel(AnkesorInfo[h][aLabel])) DestroyDynamic3DTextLabel(AnkesorInfo[h][aLabel]);
			if(IsValidDynamicObject(AnkesorInfo[h][aObje])) DestroyDynamicObject(AnkesorInfo[h][aObje]);

			AnkesorInfo[h][aX] = 0;
			AnkesorInfo[h][aY] = 0;
			AnkesorInfo[h][aZ] = 0;
			AnkesorInfo[h][aAktif] = 0;
			AnkesorInfo[h][aCaliyor] = 0;
			AnkesorInfo[h][aKisi] = -1;
			AnkesorInfo[h][aArayan] = -1;

			SunucuMesaji(playerid, "Ankesörlü telefonu sildiniz.");
		}
	}
	return 1;
}

/*CMD:akaravansil(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 5) return hataMesaji(playerid, "Bu komutu kullanmak için uygun yetkide deðilsiniz.");
	for (new h = 0; h < MAX_KARAVAN; h++)
	{
		if(IsPlayerInRangeOfPoint(playerid,5.0,KaravanInfo[h][kX],KaravanInfo[h][kY], KaravanInfo[h][kZ])) {
			new string[90];

			mysql_format(g_SQL, string, sizeof(string), "DELETE FROM `karavanlar` WHERE `id` = '%d'", h);
			mysql_tquery(g_SQL, string);

			if(IsValidDynamicObject(KaravanInfo[h][kKapi])) DestroyDynamicObject(KaravanInfo[h][kKapi]);
			if(IsValidDynamicObject(KaravanInfo[h][kObje])) DestroyDynamicObject(KaravanInfo[h][kObje]);

			KaravanInfo[h][kX] = 0;
			KaravanInfo[h][kY] = 0;
			KaravanInfo[h][kZ] = 0;
			KaravanInfo[h][kAktif] = 0;
			KaravanInfo[h][kBaglandi] = 0;
			KaravanInfo[h][kKapidurum] = 0;

			SunucuMesaji(playerid, "Karavaný sildiniz.");
		}
	}
	return 1;
} */

CMD:atel(playerid, params[])
{
	for (new h = 0; h < MAX_ATELEFON; h++)
	{
		if(IsPlayerInRangeOfPoint(playerid,5.0,AnkesorInfo[h][aX],AnkesorInfo[h][aY], AnkesorInfo[h][aZ])) {
			if(oyuncuData[playerid][oDonduruldu] > 0) return hataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
			if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
				//if(oyuncuData[playerid][oAdminDurum]) return hataMesaji(playerid, "Yönetici iþbaþýndayken bu komutu kullanamazsýn.");
			if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Araç içerindeyken bu komutu kullanmazsýnýz.");
			SetPVarInt(playerid, "AnkesorID", h);
			DialogGoster(playerid, DIALOG_ANKESOR, DIALOG_STYLE_TABLIST, "Ankesörlü Telefon", "Arama Yap\nTelefonu Aç\nTelefonu Kapat", "Seç", "Ýptal");
		}
	}
	return 1;
}

CMD:graffitisil(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 5) return hataMesaji(playerid, "Bu komutu kullanmak için uygun yetkide deðilsiniz.");

	GraffitiIslemleri[playerid] = _gSecim;
	SelectObject(playerid);
	return 1;
}

CMD:graffiti(playerid, params[]) return Grafiti_Menu(playerid);

CMD:respawncars(playerid, params[])
{
	new saniye;
	if(oyuncuData[playerid][oAdmin] < 5) return YetkinizYok(playerid);
	if(RespawnTimer == true) return hataMesaji(playerid, "Devam eden respawn iþlemi mevcut, respawn'a kalan %d saniye.", RespawnDeger);
	if(sscanf(params, "d", saniye)) return kullanimMesaji(playerid, "/respawncars [saniye]");
	if(Iter_Count(Araclar) < 1) return hataMesaji(playerid, "Respawn edilebilir araç bulunmuyor.");
	RespawnDeger = saniye; RespawnTimer = true;
	foreach(new i : Player)
	{
		SunucuMesaji(i, "Yetkili %d saniye içinde kullanýlmayan, baþý-boþ araçlarý respawnlayacak.", saniye);
	}
	return 1;
}

stock CezaKilitDurum(aracid)
{
	new Cache:GetInfo, query[112], rows, cezacek, cezamiktar = 0;
	mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM araccezalari WHERE aracPlaka = '%e' AND cezaOdendi = '0'", AracBilgi[aracid][aracPlaka]);
	GetInfo = mysql_query(g_SQL, query);
	cache_get_row_count(rows);
	if(rows)
	{
		for(new i; i < rows; i++)
		{
			cache_get_value_name_int(i, "cezaUcret", cezacek);
			cezamiktar += cezacek;
		}
	}
	cache_delete(GetInfo);
	return cezamiktar;
}

stock npcYaratt(playerid, tur)
{
	new skinn = GetPVarInt(playerid, "npcSkinSec"), id = -1;
	id = npc_Yarat(playerid, skinn, tur);
	if(id < 0) return hataMesaji(playerid, "Sunucu npc limitine ulaþtýðý için yeni npc yaratýlamýyor!");
	SunucuMesaji(playerid, "Yeni bir npc yarattýn. (ID: %d | Skin: %d)", id, skinn);
	return 1;
}

CMD:npcyarat(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 8) return YetkinizYok(playerid);
	if(GetPlayerInterior(playerid) != 0 || GetPlayerVirtualWorld(playerid) != 0) return hataMesaji(playerid, "Interior ve farklý dünyalara npc eklenemez.");
	static skinn;
	if(sscanf(params, "dss", skinn)) return kullanimMesaji(playerid, "/npcyarat [skin id]");

	SetPVarInt(playerid, "npcSkinSec", skinn);
	DialogGoster(playerid, DIALOG_NPC_OLUSTUR, DIALOG_STYLE_LIST, "NPC Oluþturma - Tür Seçimi Yapýnýz", "Normal NPC\nCPT. Vice\nMermi Tüccarý", "Seç", "Ýptal");
	return 1;
}

CMD:npcsil(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 8) return YetkinizYok(playerid);

	static id;
	if(sscanf(params, "d", id)) return kullanimMesaji(playerid, "/npcsil [npc id]");

	if((id < 0 || id >= MAX_AKTOR) || !npcData[id][npcKullanim]) return hataMesaji(playerid, "Geçersiz npc!");

	npc_Sil(id);
	SunucuMesaji(playerid, "NPC %d baþarýyla silindi.", id);
	Log_Kaydet("loglar/admin_log.txt", "[%s] %s adlý yönetici %d ID'li npcyi sildi.", Tarih(), oyuncuData[playerid][oAdminNick], id);
	return 1;
}

CMD:npcduzenle(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 8) return YetkinizYok(playerid);
	static id, type[24], string[128], cek;
	if(sscanf(params, "ds[24]S()[128]", id, type, string))
	{
		kullanimMesaji(playerid, "/npcduzenle [id] [isim]");
		SendClientMessage(playerid, RENK_SARI, "[ISIMLER]:{FFFFFF} animname, animlib, skin, yazi.");
		return 1;
	}
	if((id < 0 || id >= MAX_AKTOR) || !npcData[id][npcKullanim]) return hataMesaji(playerid, "Geçersiz npc!");

	if(!strcmp(type, "animname", true))
	{
		cek++;
		new isimm[128];
		if(sscanf(string, "s[128]", isimm)) return kullanimMesaji(playerid, "/npcduzenle [id] [animname] [isim]");
		format(npcData[id][npcAnimname], 50, isimm);
		AktorAnimYenile(id);
		npc_Kaydet(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s adlý yönetici bir npc'nin animname deðerini deðiþtirdi (ID: %d)", oyuncuData[playerid][oAdminNick], id);
		return 1;
	}
	else if(!strcmp(type, "animlib", true))
	{
		cek++;
		new isimm[128];
		if(sscanf(string, "s[128]", isimm)) return kullanimMesaji(playerid, "/npcduzenle [id] [animlib] [isim]");
		format(npcData[id][npcAnimlib], 50, isimm);
		AktorAnimYenile(id);
		npc_Kaydet(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s adlý yönetici bir npc'nin animlib deðerini deðiþtirdi. (ID: %d)", oyuncuData[playerid][oAdminNick], id);
		return 1;
	}
	else if(!strcmp(type, "skin", true))
	{
		cek++;
		new skinn;
		if(sscanf(string, "d", skinn)) return kullanimMesaji(playerid, "/npcduzenle [id] [animlib] [isim]");
		npcData[id][npcSkin] = skinn;

		if(IsValidActor(npcData[id][npcAktor])) DestroyActor(npcData[id][npcAktor]);
		npcData[id][npcAktor] = CreateActor(npcData[id][npcSkin], npcData[id][npcPos][0], npcData[id][npcPos][1], npcData[id][npcPos][2], npcData[id][npcPos][3]);

		AktorAnimYenile(id);
		npc_Kaydet(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s adlý yönetici bir npc'nin skin deðerini deðiþtirdi. (ID: %d)", oyuncuData[playerid][oAdminNick], id);
		return 1;
	}
	else if(!strcmp(type, "yazi", true))
	{
		cek++;
		new isimm[50];
		new yazi[512];
		if(sscanf(string, "s[50]", isimm)) return kullanimMesaji(playerid, "/npcduzenle [id] [yazi] [metin girin (%d karakter)]", sizeof(isimm));
		if(strlen(isimm) > sizeof(isimm)) return hataMesaji(playerid, "Girilen metin %d karakterin üzerinde.", sizeof(isimm));
		format(npcData[id][npcYazi], sizeof(isimm), isimm);
		format(yazi, sizeof(yazi), "%s", id, npcData[id][npcYazi]);
		UpdateDynamic3DTextLabelText(npcData[id][npcLabel], -1, yazi);
		AktorAnimYenile(id);
		npc_Kaydet(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s adlý yönetici bir npc'nin yazi deðerini deðiþtirdi. (ID: %d)", oyuncuData[playerid][oAdminNick], id);
		return 1;
	}
	if(!cek) return hataMesaji(playerid, "Geçersiz npc iþlevi.");
	return 1;
}
stock AktorAnimYenile(id)
{
	if(strcmp(npcData[id][npcAnimname], "none", true) && strcmp(npcData[id][npcAnimlib], "none", true))
	{
		ApplyActorAnimation(npcData[id][npcAktor], npcData[id][npcAnimname], npcData[id][npcAnimlib], 4.0, 1, 0, 0, 0, 0);
			//printf("1");
	}
	return 1;
}

CMD:dorse(playerid, params[])
{
	new idx[20];
	if(sscanf(params, "s[20]", idx))
	{
		SendClientMessage(playerid, RENK_GRI, "KULLANIM: /dorse [parametre]");
		SendClientMessage(playerid, RENK_ACIKYESIL, "Parametreler: [{FFFFFF}tak{88aa62}], [{FFFFFF}sat{88aa62}]");
	}
	else
	{
		if(strcmp(idx, "sat", true) == 0)
		{
			SunucuMesaji(playerid, "Bu kýsým þuanda pasiftir.");
		}
		else if(strcmp(idx, "tak", true) == 0)
		{
			SunucuMesaji(playerid, "Bu kýsým þuanda pasiftir.");
		}
	}
	return 1;
}

CMD:konteyner(playerid, params[])
{
	new idx[20];
	if(sscanf(params, "s[20]", idx))
	{
		SendClientMessage(playerid, RENK_GRI, "KULLANIM: /konteyner [parametre]");
		SendClientMessage(playerid, RENK_ACIKYESIL, "Parametreler: [{FFFFFF}yukle{88aa62}], [{FFFFFF}sat{88aa62}]");
	}
	else
	{
		if(strcmp(idx, "sat", true) == 0)
		{
			if(oyuncuData[playerid][oFirma] > -1 && FirmaInfo[oyuncuData[playerid][oFirma]][fAlan] == 2) {
				if(!IsPlayerInRangeOfPoint(playerid, 4, 2248.4624,-2450.8875,13.6171)) return hataMesaji(playerid, "Konteyner satýþ noktasýna yeterince yakýn deðilsin.");
				if(!IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Herhangi bir aracýn içerisinde deðilsin.");
				if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return hataMesaji(playerid, "Konteyneri satmak için sürücü koltuðunda olmalýsýn.");
				if(oyuncuData[playerid][oKonteynSatabilir] == 1) return hataMesaji(playerid, "Konteyner'in indirilmesini beklemelisin.");
				new aracid = GetPlayerVehicleID(playerid);
				if((aracid = Arac_IDBul(aracid)) != -1)
				{
					if(AracBilgi[aracid][aracModel] != 578) return hataMesaji(playerid, "Bu arac konteyner taþýyamaz!");
					if(AracBilgi[aracid][aracKapasite] != 1) return hataMesaji(playerid, "Bu araca konteyner yüklenmemiþ.");

					GameTextForPlayer(playerid, "~g~KONTEYNER INDIRILIYOR, LUTFEN BEKLEYIN.", 40000, 4);
					TogglePlayerControllable(playerid, false);
					oyuncuData[playerid][oKonteynSatabilir] = 1;
					konteynersat[playerid] = SetTimerEx("KonteynerSat",30000,0,"dd",playerid,aracid);
				}
			}
		}
		else if(strcmp(idx, "yukle", true) == 0)
		{
			if(oyuncuData[playerid][oFirma] > -1 && FirmaInfo[oyuncuData[playerid][oFirma]][fAlan] == 2) {
				if(!IsPlayerInRangeOfPoint(playerid, 4, 103.2384,-164.8606,2.3154)) return hataMesaji(playerid, "Konteyner yükleme noktasýna yeterince yakýn deðilsin.");
				if(!IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Herhangi bir aracýn içerisinde deðilsin.");
				new aracid = GetPlayerVehicleID(playerid);
				if((aracid = Arac_IDBul(aracid)) != -1)
				{
					if(AracBilgi[aracid][aracModel] != 578) return hataMesaji(playerid, "Bu araca konteyner yüklenemez!");
					if(AracBilgi[aracid][aracKapasite] != 0) return hataMesaji(playerid, "Bu araca zaten konteyner yüklenmiþ.");

					GameTextForPlayer(playerid, "~g~KONTEYNER YUKLENIYOR, LUTFEN BEKLEYIN.", 40000, 4);
					TogglePlayerControllable(playerid, false);
					konteyneryukle[playerid] = SetTimerEx("KonteynerYukle",30000,0,"dd",playerid,aracid);
				}
			}
		}
	}
	return 1;
}

CMD:taksimetre(playerid, params[])
{
	new ucret;
	if(oyuncuData[playerid][oMeslek] == 4 && IsPlayerInAnyVehicle(playerid)) {
		new aracid = GetPlayerVehicleID(playerid);
		new taksiid = Arac_IDBul(aracid);
		if(AracBilgi[taksiid][aracMeslek] != 4) return hataMesaji(playerid, "Bu araç çalýþtýðýn taksi duraðýna ait deðil.");
		if(GetVehicleModel(aracid) == 438 || GetVehicleModel(aracid) == 418 || GetVehicleModel(aracid) == 420) {
			if(GetPlayerState(playerid) != 2) return hataMesaji(playerid, "Sürücü koltuðunda deðilsiniz.");
			if(sscanf(params, "d", ucret)) return kullanimMesaji(playerid, "/taksimetre [ucret]");
			if(ucret < 10 || ucret > 50) return hataMesaji(playerid, "Taksimetre 10$'dan az, 50$'dan fazla olamaz.");
			if(TransportDuty[playerid] > 0) {
				TransportDuty[playerid] = 0;
				TransportValue[playerid] = 0;
				SunucuMesaji(playerid,"Paydos yaptýnýz.");
			}
			else {
				TransportDuty[playerid] = 1;
				TransportValue[playerid] = ucret;
				SunucuMesaji(playerid, "Taksimetreyi çalýþtýrdýnýz, saniyede %d$ ücret kesilecek.", ucret);
			}
		}
	}
	return 1;
}

CMD:cuval(playerid, params[])
{
	new idx[20];
	if(sscanf(params, "s[20]", idx))
	{
		SendClientMessage(playerid, RENK_GRI, "KULLANIM: /cuval [Parametre]");
		SendClientMessage(playerid, RENK_ACIKYESIL, "Parametreler: [{FFFFFF}sat{88aa62}], [{FFFFFF}cikar{88aa62}], [{FFFFFF}sil{88aa62}], [{FFFFFF}koy{88aa62}], [{FFFFFF}bilgi{88aa62}]");
	}
	else
	{
		if(strcmp(idx, "sil", true) == 0)
		{
			if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Araç içerisinde bu iþlem gerçekleþemez.");
			if(oyuncuData[playerid][oCuval] == 1) 
			{
				oyuncuData[playerid][oCuval] = 0;
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				RemovePlayerAttachedObject(playerid, 6);

				ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 1, 1, 0, 0, 1);
				new me[90];
				format(me, sizeof(me), "** %s elindeki un çuvalýný yere býrakýr.", OyuncuIsim(playerid));
				SetPlayerChatBubble(playerid, me, RENK_PEMBE, 12.0, 10000);
				SendClientMessage(playerid, RENK_PEMBE, me);
				strins(me, "> ", 3);
			}
		}
		else if(strcmp(idx, "sat", true) == 0)
		{
			if(!IsPlayerInRangeOfPoint(playerid, 2.0, 966.4175,2160.6240,10.8203)) return hataMesaji(playerid, "Çuval satýþ noktasýnda deðilsiniz.");
			if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Araç içerisinde bu iþlem gerçekleþemez.");
			if(oyuncuData[playerid][oCuval] != 1) return hataMesaji(playerid, "Satmak için elinizde çuval bulunmuyor.");
			ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 1, 1, 0, 0, 1);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			oyuncuData[playerid][oCuval] = 0;
			RemovePlayerAttachedObject(playerid, 6);
			if(oyuncuData[playerid][oMeslekPaketi] < 1)
			{
				ParaEkle(playerid, 30);
				FirmaParaEkle(oyuncuData[playerid][oFirma], 20);
			}
			else
			{
				ParaEkle(playerid, 30 + YuzdeHesapla(30, MESLEK_PAKET_YUZDE));
				FirmaParaEkle(oyuncuData[playerid][oFirma], 20 + YuzdeHesapla(20, MESLEK_PAKET_YUZDE));
			}
		}
		else if(strcmp(idx, "bilgi", true) == 0)
		{
			static putID = -1,
			kapasite,
			Float:X,
			Float:Y,
			Float:Z,
			mesaj[120],
			model;

			foreach(new r : Araclar) if(IsValidVehicle(r))
			{
				model = GetVehicleModel(r);
				if(model == 482 || model == 498 || model == 499) {
					GetVehiclePos(r, X, Y, Z);
					if(IsPlayerInRangeOfPoint(playerid, 4.5, X, Y, Z) && AracBilgi[r][aracFirma] > -1 && FirmaInfo[AracBilgi[r][aracFirma]][fAlan] == 2 && putID == -1) {
						putID = r;
					}
				}
			}

			if(putID != -1)
			{
				if(AracBilgi[putID][aracFirma] > -1 && FirmaInfo[AracBilgi[putID][aracFirma]][fAlan] == 2 && oyuncuData[playerid][oFirma] == AracBilgi[putID][aracFirma])
				{
					for(new a = 0; a < sizeof(faracveri) ; a++)
					{
						if(AracBilgi[putID][aracModel] == faracveri[a][0]) kapasite = faracveri[a][2];
					}
					format(mesaj, sizeof(mesaj), "{FFFFFF}Araç Modeli: {F5E600}%s{FFFFFF}\nKapasite: {F5E600}%d/%d{FFFFFF} çuval", AracModel(AracBilgi[putID][aracModel]), AracBilgi[putID][aracKapasite],kapasite);
					ShowPlayerDialog(playerid, DIALOG_CUVAL_BILGI, DIALOG_STYLE_MSGBOX, "Araç Kapasitesi", mesaj, "Tamam","");
					putID = -1;
				} else hataMesaji(playerid, "Kamyon þoförlüðü yapmýyorsunuz, kasayý kontrol edemezsiniz."),putID = -1;
			}
		}
		else if(strcmp(idx, "cikar", true) == 0)
		{
			if(oyuncuData[playerid][oFirma] > -1 && FirmaInfo[oyuncuData[playerid][oFirma]][fAlan] == 2) {
				if(oyuncuData[playerid][oCuval] != 0) return hataMesaji(playerid, "Elinizde zaten bir un çuvalý var.");
				if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Araç içerisinde bu iþlem gerçekleþemez.");
				new model,
				id = -1,
				putID = -1;

				if((id = Arac_Yakin(playerid)) != -1)
				{
					model = GetVehicleModel(id);
					if(model == 482 || model == 498 || model == 499) {
						if(AracBilgi[id][aracFirma] > -1 && FirmaInfo[AracBilgi[id][aracFirma]][fAlan] == 2 && putID == -1)
						{
							putID = id;
						}
					}
				}

				if(putID != -1)
				{

					if(AracBilgi[putID][aracKapasite] == 0) return hataMesaji(playerid, "Bu aracýn içerisinde çuval bulunmuyor.");
					new me[90];
					format(me, sizeof(me), "** %s aracýn içerisinden un çuvalýný çýkarýr.", OyuncuIsim(playerid));
					SetPlayerChatBubble(playerid, me, RENK_PEMBE, 12.0, 10000);
					strins(me, "> ", 3);
					SendClientMessage(playerid, RENK_PEMBE, me);
					ApplyAnimation(playerid, "CARRY", "liftup05", 4.1, 0, 1, 1, 0, 0, 1);
					oyuncuData[playerid][oCuval] = 1;
					SetPlayerAttachedObject(playerid, 6, 2060, 17, -0.083999, 0.534000, -0.025999, 99.599990, 85.500015, 79.700012);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
					AracBilgi[putID][aracKapasite]--;
					putID = -1;
				}
			} else {
				hataMesaji(playerid, "Kamyon þoförü deðilsiniz, bu araçtan çuval alamazsýnýz.");
			}

		}
		else if(strcmp(idx, "koy", true) == 0)
		{
			if(oyuncuData[playerid][oFirma] > -1 && FirmaInfo[oyuncuData[playerid][oFirma]][fAlan] == 2) {
				if(oyuncuData[playerid][oCuval] != 1) return hataMesaji(playerid, "Elinizde un çuvalý bulunmuyor.");
				if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Araç içerisinde bu iþlem gerçekleþemez.");
				new kapasite,
				model,
				id = -1,
				putID = -1;

				if((id = Arac_Yakin(playerid)) != -1)
				{
					model = GetVehicleModel(id);
					if(model == 482 || model == 498 || model == 499) {
						if(AracBilgi[id][aracFirma] > -1 && FirmaInfo[AracBilgi[id][aracFirma]][fAlan] == 2 && putID == -1)
						{
							putID = id;
						}
					}
				}


				if(putID != -1)
				{
					for(new i = 0; i < sizeof(faracveri) ; i++)
					{
						if(GetVehicleModel(putID) == faracveri[i][0]) kapasite = faracveri[i][2];
					}

					if(AracBilgi[putID][aracKapasite] == kapasite) return hataMesaji(playerid, "Bu araca %d çuvaldan fazla koyamazsýnýz.", kapasite);
					new me[90];
					format(me, sizeof(me), "** %s aracýn içerisine elindeki çuvalý yerleþtirir.", OyuncuIsim(playerid));
					SetPlayerChatBubble(playerid, me, RENK_PEMBE, 12.0, 10000);
					strins(me, "> ", 3);
					SendClientMessage(playerid, RENK_PEMBE, me);
					ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 1, 1, 0, 0, 1);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
					AracBilgi[putID][aracKapasite]++;
					oyuncuData[playerid][oCuval] = 0;
					RemovePlayerAttachedObject(playerid, 6);
					putID = -1;
				}
			} else {
				hataMesaji(playerid, "Kamyon þoförü deðilsiniz, bu araca çuval koyamazsýnýz.");
			}

		}
	}
	return 1;
}

CMD:esya(playerid, params[])
{
	if(GetPVarInt(playerid,"oyuncuyayinda") == 1) return false;
	new idx[20];
	if(sscanf(params, "s[20]", idx))
	{
		SendClientMessage(playerid, RENK_GRI, "KULLANIM: /esya [Parametre]");
		SendClientMessage(playerid, RENK_ACIKYESIL, "Parametreler: [{FFFFFF}cal{88aa62}], [{FFFFFF}sat{88aa62}], [{FFFFFF}koy{88aa62}], [{FFFFFF}cikar{88aa62}], [{FFFFFF}birak{88aa62}],  [{FFFFFF}bilgi{88aa62}]");
	}
	else
	{
		if(strcmp(idx, "birak", true) == 0)
		{
			if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Araç içerisinde bu iþlem gerçekleþemez.");
			if(oyuncuData[playerid][oKutu] == 1) {
				new id = Iter_Free(Kutu);
				if(id < 0) return hataMesaji(playerid, "Daha fazla eþya býrakýlamaz.");
				oyuncuData[playerid][oKutu] = 0;
				new Float:pos[3],string[100], query[250], me[90];
				GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
				GetXYInFrontOfPlayer(playerid, pos[0], pos[1], 0.75);
				KutuInfo[id][kObje] = CreateDynamicObject(2912,pos[0],pos[1],(pos[2] - 0.82),0.0,0.0,0.0,GetPlayerVirtualWorld(playerid),GetPlayerInterior(playerid), -1,50.0);
				KutuInfo[id][kID] = id;
				KutuInfo[id][kX] = pos[0];
				KutuInfo[id][kY] = pos[1];
				KutuInfo[id][kZ] = pos[2] - 0.82;
				KutuInfo[id][kInt] = GetPlayerInterior(playerid);
				KutuInfo[id][kVw] = GetPlayerVirtualWorld(playerid);

				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				RemovePlayerAttachedObject(playerid, 6);

				ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 1, 1, 0, 0, 1);

				format(me, sizeof(me), "** %s elindeki eþya kutusunu yere býrakýr.", OyuncuIsim(playerid));
				SetPlayerChatBubble(playerid, me, RENK_PEMBE, 12.0, 10000);
				SendClientMessage(playerid, RENK_PEMBE, me);
				strins(me, "> ", 3);

				mysql_format(g_SQL, query, sizeof(query), "INSERT INTO `kutular` (`id`, `x`, `y`, `z`, `vw`, `interior`) VALUES('%d', '%f', '%f', '%f', '%d', '%d')", id, KutuInfo[id][kX], KutuInfo[id][kY], KutuInfo[id][kZ], KutuInfo[id][kVw], KutuInfo[id][kInt]);
				mysql_query(g_SQL, query);
				format(string, sizeof(string), "[EÞYA KUTUSU]", id);
				KutuInfo[id][kLabel] = CreateDynamic3DTextLabel(string, RENK_OZELKIRMIZI, pos[0], pos[1], (pos[2] - 0.50), 3.0);
				Iter_Add(Kutu, id);
			}
		}
		else if(strcmp(idx, "sat", true) == 0)
		{
			if(!IsPlayerInRangeOfPoint(playerid, 2.0, 853.0221,-1060.3890,25.1068)) return hataMesaji(playerid, "Kutu satýþ noktasýnda deðilsiniz.");
			if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Araç içerisinde bu iþlem gerçekleþemez.");
			if(oyuncuData[playerid][oKutu] != 1) return hataMesaji(playerid, "Satmak için elinizde kutu bulunmuyor.");
			ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 1, 1, 0, 0, 1);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			oyuncuData[playerid][oKutu] = 0;
			RemovePlayerAttachedObject(playerid, 6);
			ParaEkle(playerid, 150);
		}
/*			else if(strcmp(idx, "cal", true) == 0)
			{
				if(HirsizDurum[playerid] == false) return hataMesaji(playerid, "Soyguncu modunda deðilsiniz, lütfen /soygun yazýn.");
				if(Oyuncu_Evde(playerid) == -1) return hataMesaji(playerid, "Herhangi bir evin içerisinde deðilsiniz.");
				if(oyuncuData[playerid][oKutu] != 0) return hataMesaji(playerid, "Elinizde zaten bir kutu bulunuyor.");
				new id = MobilyaBul(playerid);
				if(id == -1) return hataMesaji(playerid, "Herhangi bir elektronik mobilyaya yakýn deðilsin.");
				new query[256];
				mysql_format(g_SQL, query, sizeof(query), "DELETE FROM `mobilyalar` WHERE `id` = '%d'",id);
				mysql_query(g_SQL, query);

				DestroyDynamicObject(MobilyaInfo[id][mObje]);
				MobilyaInfo[id][mEvID] = -1;
				MobilyaInfo[id][mX] = 0.0;
				MobilyaInfo[id][mY] = 0.0;
				MobilyaInfo[id][mZ] = 0.0;
				MobilyaInfo[id][rotX] = 0.0;
				MobilyaInfo[id][rotY] = 0.0;
				MobilyaInfo[id][rotZ] = 0.0;
				MobilyaInfo[id][mVw] = 0;
				MobilyaInfo[id][mInt] = 0;
				MobilyaInfo[id][mKategori] = 0;
				MobilyaInfo[id][m_tdModelID] = 0;
				format(MobilyaInfo[id][m_tdTxtName], 256, "");
				format(MobilyaInfo[id][m_tdTexture], 256, "");
				Iter_Remove(Mobilya, id);

				new me[90];
				format(me, sizeof(me), "** %s eþyayý atik bir hamleyle alýr ve kutuya koyar.", OyuncuIsim(playerid));
				SetPlayerChatBubble(playerid, me, RENK_PEMBE, 12.0, 10000);
				strins(me, "> ", 3);
				SendClientMessage(playerid, RENK_PEMBE, me);
				ApplyAnimation(playerid, "CARRY", "liftup05", 4.1, 0, 1, 1, 0, 0, 1);
				oyuncuData[playerid][oKutu] = 1;
				SetPlayerAttachedObject(playerid, 6, 2912, 17, -0.083999, 0.534000, -0.025999, 99.599990, 85.500015, 79.700012);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
				SunucuMesaji(playerid, "Baþarýlý bir þekilde eþyayý çaldýnýz, elinizdeki kutuyu aracýnýza yerleþtirebilirsiniz.");
			}*/
				else if(strcmp(idx, "bilgi", true) == 0)
				{
					static putID = -1,
					kapasite,
					mesaj[120],
					Float:X,
					Float:Y,
					Float:Z,
					Float:distance,
					model;

					foreach(new r : Araclar) if(IsValidVehicle(r))
					{
						model = GetVehicleModel(r);
						if(model == 482 || model == 498 || model == 499) {
							GetVehiclePos(r, X, Y, Z);
							if(IsPlayerInRangeOfPoint(playerid, 3.0, X, Y, Z) && AracBilgi[r][aracFirma] == -1 && (putID == -1 || GetPlayerDistanceFromPoint(playerid, X, Y, Z) < distance)) {
								putID = r;
								distance = GetPlayerDistanceFromPoint(playerid, X, Y, Z);
							}
						}
					}

					if(putID != -1)
					{
						if(AracBilgi[putID][aracFirma] == -1)
						{
							for(new i = 0; i < sizeof(faracveri) ; i++)
							{
								if(AracBilgi[putID][aracModel] == faracveri[i][0]) kapasite = faracveri[i][2];
							}
							format(mesaj, sizeof(mesaj), "{FFFFFF}Araç Modeli: {F5E600}%s{FFFFFF}\nKapasite: {F5E600}%d/%d{FFFFFF} Kutu", AracModel(AracBilgi[putID][aracModel]), AracBilgi[putID][aracKapasite],kapasite);
							ShowPlayerDialog(playerid, DIALOG_CUVAL_BILGI, DIALOG_STYLE_MSGBOX, "Araç Kapasitesi", mesaj, "Tamam","");
							putID = -1;
						} else hataMesaji(playerid, "Firma aracýna eþya kutusu yüklenemez."),putID = -1;
					}
				}
				else if(strcmp(idx, "cikar", true) == 0)
				{
					if(oyuncuData[playerid][oFirma] == -1) {
						if(oyuncuData[playerid][oKutu] != 0) return hataMesaji(playerid, "Elinizde zaten bir kutu var.");
						if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Araç içerisinde bu iþlem gerçekleþemez.");
						new Float:X,
						Float:Y,
						Float:Z,
						Float:distance,
						model,
						putID = -1;

						for(new i = 0; i != MAX_VEHICLES; i++) {
							if(AracSpawnOlmusMu(i)) {
								model = GetVehicleModel(i);
								if(model == 482 || model == 498 || model == 499) {
									GetPosBehindVehicle(i, X, Y, Z, 0.5);
									if(IsPlayerInRangeOfPoint(playerid, 2.5, X, Y, Z) && AracBilgi[i][aracFirma] == -1 && (putID == -1 || GetPlayerDistanceFromPoint(playerid, X, Y, Z) < distance)) {
										putID = i;
										distance = GetPlayerDistanceFromPoint(playerid, X, Y, Z);
									}
								}
							}
						}


						if(putID != -1)
						{

							if(AracBilgi[putID][aracKapasite] == 0) return hataMesaji(playerid, "Bu aracýn içerisinde kutu bulunmuyor.");
							new me[90];
							format(me, sizeof(me), "** %s aracýn içerisinden eþya kutusunu çýkarýr.", OyuncuIsim(playerid));
							SetPlayerChatBubble(playerid, me, RENK_PEMBE, 12.0, 10000);
							strins(me, "> ", 3);
							SendClientMessage(playerid, RENK_PEMBE, me);
							ApplyAnimation(playerid, "CARRY", "liftup05", 4.1, 0, 1, 1, 0, 0, 1);
							oyuncuData[playerid][oKutu] = 1;
							SetPlayerAttachedObject(playerid, 6, 2912, 17, -0.083999, 0.534000, -0.025999, 99.599990, 85.500015, 79.700012);
							SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
							AracBilgi[putID][aracKapasite]--;
							putID = -1;
						}
					} else {
						hataMesaji(playerid, "Herhangi bir firmaya üye deðilsiniz.");
					}

				}
				else if(strcmp(idx, "koy", true) == 0)
				{
					if(oyuncuData[playerid][oKutu] != 1) return hataMesaji(playerid, "Elinizde kutu bulunmuyor.");
					if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Araç içerisinde bu iþlem gerçekleþemez.");
					new Float:X,
					Float:Y,
					Float:Z,
					Float:distance,
					model,
					kapasite,
					putID = -1;

					for(new i = 0; i != MAX_VEHICLES; i++) {
						if(AracSpawnOlmusMu(i)) {
							model = GetVehicleModel(i);
							if(model == 482 || model == 498 || model == 499) {
								GetPosBehindVehicle(i, X, Y, Z, 0.5);
								if(IsPlayerInRangeOfPoint(playerid, 2.5, X, Y, Z) && AracBilgi[i][aracFirma] == -1 && (putID == -1 || GetPlayerDistanceFromPoint(playerid, X, Y, Z) < distance)) {
									putID = i;
									distance = GetPlayerDistanceFromPoint(playerid, X, Y, Z);
								}
							}
						}
					}


					if(putID != -1)
					{
						for(new i = 0; i < sizeof(faracveri) ; i++)
						{
							if(GetVehicleModel(putID) == faracveri[i][0]) kapasite = faracveri[i][2];
						}

						if(AracBilgi[putID][aracKapasite] == kapasite) return hataMesaji(playerid, "Bu araca %d kutudan fazla koyamazsýnýz.", kapasite);
						new me[90];
						format(me, sizeof(me), "** %s aracýn içerisine elindeki kutuyu yerleþtirir.", OyuncuIsim(playerid));
						SetPlayerChatBubble(playerid, me, RENK_PEMBE, 12.0, 10000);
						strins(me, "> ", 3);
						SendClientMessage(playerid, RENK_PEMBE, me);
						ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 1, 1, 0, 0, 1);
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
						AracBilgi[putID][aracKapasite]++;
						oyuncuData[playerid][oKutu] = 0;
						RemovePlayerAttachedObject(playerid, 6);
						putID = -1;
					}
				}
				else if(strcmp(idx, "al", true) == 0)
				{
					for(new b = 0; b != MAX_ESYA; b++) {
						if(IsPlayerInRangeOfPoint(playerid,2.0,KutuInfo[b][kX],KutuInfo[b][kY], KutuInfo[b][kZ])) {
							if(Iter_Contains(Kutu, b)) {
								if(oyuncuData[playerid][oKutu] != 0) return hataMesaji(playerid, "Elinizde zaten bir kutu var.");
								new query[256], me[90];
								mysql_format(g_SQL, query, sizeof(query), "DELETE FROM `kutular` WHERE `id` = '%d'", b);
								mysql_tquery(g_SQL, query);

								DestroyDynamicObject(KutuInfo[b][kObje]);
								if(IsValidDynamic3DTextLabel(KutuInfo[b][kLabel])) DestroyDynamic3DTextLabel(KutuInfo[b][kLabel]);
								KutuInfo[b][kX] = 0;
								KutuInfo[b][kY] = 0;
								KutuInfo[b][kZ] = 0;
								Iter_Remove(Kutu, b);

								ApplyAnimation(playerid, "CARRY", "liftup05", 4.1, 0, 1, 1, 0, 0, 1);

								oyuncuData[playerid][oKutu] = 1;
								SetPlayerAttachedObject(playerid, 6, 2912, 17, -0.083999, 0.534000, -0.025999, 99.599990, 85.500015, 79.700012);
								SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

								format(me, sizeof(me), "** %s eðilir ve yerdeki eþya kutusunu alýr.", OyuncuIsim(playerid));
								SetPlayerChatBubble(playerid, me, RENK_PEMBE, 12.0, 10000);
								SendClientMessage(playerid, RENK_PEMBE, me);
								strins(me, "> ", 3);
							}
						}
					}
				}
			}
			return 1;
		}



		CMD:yat(playerid, params[])
		{
			new idx[20];
			if(sscanf(params, "s[20]", idx))
			{
				kullanimMesaji(playerid, "/yat [parametre]");
				SendClientMessage(playerid, RENK_SARI, "[PARAMETRELER]:{FFFFFF} gir, cik, muzik, kasa.");
			}
			else
			{
				if(strcmp(idx, "muzik", true) == 0)
				{
					for (new h = 0; h < MAX_YAT; h++)
					{
						if (YatInfo[h][yAktif])
						{
							if(IsValidDynamicObject(YatInfo[h][yObje]) && IsPlayerInRangeOfPoint(playerid,20.0,YatInfo[h][yX],YatInfo[h][yY], YatInfo[h][yZ])) {
								new Float:X,Float:Y,Float:Z;
								GetAttachedObjectPos(YatInfo[h][yObje], 4.358591, -9.824934, 3.768443,X,Y,Z);
								if(IsPlayerInRangeOfPoint(playerid,2.0,X,Y,Z)) {
									if(YatInfo[h][yRadyo] == 0)
									{
										if(YatInfo[h][yKullanimda] == 1) return SendClientMessage(playerid, RENK_GRI, "Müzik açabilmek için yatýn hareket etmemesi gerekiyor."),SendClientMessage(playerid, RENK_GRI, "Sürücü iseniz /yat cik yapýp tekrar deneyin.");
										if(strcmp(YatInfo[h][ySahip], oyuncuData[playerid][oIsim]) != 0) return SendClientMessage(playerid, RENK_GRI, "Müzik açabilmek için yatýn sahibi olmalýsýnýz.");
										SetPVarInt(playerid, "Yatid", h);
										ShowPlayerDialog(playerid, DIALOG_YAT_RADYO, DIALOG_STYLE_INPUT, "{F5E600}Müzik Çalar", "Dinlemek istediðiniz istasyonun URL adresini giriniz:", "Tamam", "Iptal");
									}
									else
									{
										new	msg[65];
										format(msg, sizeof(msg), "** %s müzik çalarýný kapatýr.", OyuncuIsim(playerid));
										SendClientMessage(playerid, RENK_PEMBE, msg);
										strdel(msg, 3, 4);
										SetPlayerChatBubble(playerid, msg, RENK_PEMBE, 12.0, 10000);
										YatInfo[h][yRadyo] = 0;
										foreach(new i : Player)
										{
											if(IsPlayerInRangeOfPoint(i,35.0,X,Y,Z))
											{
												StopAudioStreamForPlayer(i);
											}
										}
									}
								}
								else
								{
									SendClientMessage(playerid, RENK_GRI, "Yatýn içerisinde bulunan müzik çalarýn yanýnda olmalýsýnýz.");
								}
								return 1;
							}
						}
					}
				}
				else if(strcmp(idx, "kasa", true) == 0)
				{
					for (new h = 0; h < MAX_YAT; h++)
					{
						if (YatInfo[h][yAktif])
						{
							if(IsValidDynamicObject(YatInfo[h][yObje]) && IsPlayerInRangeOfPoint(playerid,20.0,YatInfo[h][yX],YatInfo[h][yY], YatInfo[h][yZ])) {
								new Float:X,Float:Y,Float:Z;
								GetAttachedObjectPos(YatInfo[h][yObje], -4.126798, -0.237221, 0.848311,X,Y,Z);
								if(IsPlayerInRangeOfPoint(playerid,2.0,X,Y,Z)) {

									if(YatInfo[h][yKullanimda] == 1) return SendClientMessage(playerid, RENK_GRI, "Kasayý kullanabilmeniz için yatýn hareket etmemesi gerekiyor."),SendClientMessage(playerid, RENK_GRI, "Sürücü iseniz /yat cik yapýp tekrar deneyin.");
									if(strcmp(YatInfo[h][ySahip], oyuncuData[playerid][oIsim]) != 0) return SendClientMessage(playerid, RENK_GRI, "Kasayý kullanabilmek için yatýn sahibi olmalýsýnýz.");
									SetPVarInt(playerid, "Yatid", h);
									ShowPlayerDialog(playerid, DIALOG_YAT_KASA, DIALOG_STYLE_LIST, "{F5E600}Yat Kasasý", "Para Koy\nPara Çýkar\nKasa Bilgisi", "Seç", "Iptal");
								}
								else
								{
									SendClientMessage(playerid, RENK_GRI, "Yatýn içerisinde bulunan kasanýn yanýnda olmalýsýnýz.");
								}
								return 1;
							}
						}
					}
				}
				else if(strcmp(idx, "gir", true) == 0)
				{
					for (new h = 0; h < MAX_YAT; h++)
					{
						if (YatInfo[h][yAktif])
						{
							if(IsValidDynamicObject(YatInfo[h][yObje]) && IsPlayerInRangeOfPoint(playerid,20.0,YatInfo[h][yX],YatInfo[h][yY], YatInfo[h][yZ])) {
								if(strcmp(YatInfo[h][ySahip], oyuncuData[playerid][oIsim]) != 0) return SendClientMessage(playerid, RENK_GRI, "Yatý sürebilmek için yatýn sahibi olmalýsýnýz.");
								if(YatInfo[h][yRadyo] == 1) return SendClientMessage(playerid,-1,"Müzik Çalar açýkken yatý süremezsiniz.");
								SetPVarInt(playerid, "YatID", h);
								YataKoy(playerid, h);
								YatInfo[h][yKullanimda] = 1;
								return 1;
							}
						}
					}
				}
				else if(strcmp(idx, "cik", true) == 0)
				{
					if(GetPVarInt(playerid, "YatGir") == 0) return SendClientMessage(playerid, RENK_GRI, "Þuanda herhangi bir yatýn kamarasýnda deðilsiniz.");
					new yid = GetPVarInt(playerid, "YatID");
					if(strcmp(YatInfo[yid][ySahip], oyuncuData[playerid][oIsim]) != 0) return SendClientMessage(playerid, RENK_GRI, "Yatýn sahibi deðilsiniz.");
					UnfreezePlayer(playerid);
					SetPVarInt(playerid, "YatGir", 0);
					YatInfo[yid][yKullanimda] = 0;
					if (IsValidDynamicObject(gPlayerCamObj[playerid])) DestroyDynamicObject(gPlayerCamObj[playerid]);
					SetCameraBehindPlayer(playerid);

					new Float:X,Float:Y,Float:Z,Float:rX,Float:rY,Float:rZ,query2[250];
					if (IsValidDynamicObject(YatInfo[yid][yObje])){
						GetObjectPos(YatInfo[yid][yObje], X,Y,Z);
						GetObjectRot(YatInfo[yid][yObje], rX, rY, rZ);
						mysql_format(g_SQL, query2, sizeof(query2), "UPDATE `yatlar` SET `x` = %f,`y` = %f,`z` = %f, `rz` = %f WHERE `id` = %i", X,Y,Z,rZ,yid);
						mysql_tquery(g_SQL, query2, "", "");

					}

					SetPlayerPos(playerid, YatInfo[yid][yX], YatInfo[yid][yY]-4, YatInfo[yid][yZ]+3);
					SetCameraBehindPlayer(playerid);
					return 1;
				}
			}
			return 1;
		}

		CMD:masasandalyekur(playerid, params[])
		{
			new obje = 1825;
			if(IsValidDynamicObject(SandalyeObjem[playerid])) return hataMesaji(playerid, "Zaten bir adet masa sandalye kurmuþsunuz, daha fazla kuramazsýnýz. (/masasandalyekaldir).");
			GetPlayerPos(playerid, oyuncuData[playerid][oPos][0], oyuncuData[playerid][oPos][1], oyuncuData[playerid][oPos][2]);
			SandalyeObjem[playerid] = CreateDynamicObject(obje, oyuncuData[playerid][oPos][0], oyuncuData[playerid][oPos][1], oyuncuData[playerid][oPos][2] - 1.0, 0.0, 0.0, 0.0 - 1.5);
			SunucuMesaji(playerid, "Bulunduðunuz bölgeye masa sandalye kurdunuz, kaldýrmak için (/masasandalyekaldir).");
			return 1;
		}

		CMD:masasandalyekaldir(playerid, params[])
		{
			if(!IsValidDynamicObject(SandalyeObjem[playerid])) return hataMesaji(playerid, "Kurmuþ olduðunuz masa sandalye bulunamadý. Kurmak için (/masasandalyekur).");
			DestroyDynamicObject(SandalyeObjem[playerid]);
			SunucuMesaji(playerid, "Kurduðunuz sandalye kaldýrýldý, tekrar kurmak için (/masasandalyekur).");
			return 1;
		}

		CMD:ver(playerid, params[])
		{
			new esyaa[256], userid, miktar, emote[512];
			if(sscanf(params, "sud", esyaa, userid, miktar)) return kullanimMesaji(playerid, "/ver [eþya türü] [oyuncu id] [miktar]"),
				SCM_Ex(playerid, 0xB5DAF9FF, "» Eþya Türleri:{F2F2F2} Vantilator, lamba, tohum, odun, kibrit, cakmak, sigara, gubre, saksi.");
			if(!YakinlikKontrol(playerid, userid, 3.0)) return hataMesaji(playerid, "Kiþiye yakýn deðilsin.");
			if (!strcmp(esyaa, "vantilator", true))
			{
				if(miktar < 1 || oyuncuData[playerid][oVantilator] < miktar) return hataMesaji(playerid, "%d adet %s üzerinizde bulunmuyor.", miktar, esyaa);
				oyuncuData[playerid][oVantilator] -= miktar;
				oyuncuData[userid][oVantilator] += miktar;
				format(emote, sizeof(emote), "yanýnda bulunan %s adlý kiþiye bir miktar %s verir.", OyuncuIsim(userid), esyaa);
				cmd(playerid, 1, emote);
			}
			else if (!strcmp(esyaa, "lamba", true))
			{
				if(miktar < 1 || oyuncuData[playerid][oLamba] < miktar) return hataMesaji(playerid, "%d adet %s üzerinizde bulunmuyor.", miktar, esyaa);
				oyuncuData[playerid][oLamba] -= miktar;
				oyuncuData[userid][oLamba] += miktar;
				format(emote, sizeof(emote), "yanýnda bulunan %s adlý kiþiye bir miktar %s verir.", OyuncuIsim(userid), esyaa);
				cmd(playerid, 1, emote);
			}
			else if (!strcmp(esyaa, "tohum", true))
			{
				if(miktar < 1 || oyuncuData[playerid][oTohum] < miktar) return hataMesaji(playerid, "%d adet %s üzerinizde bulunmuyor.", miktar, esyaa);
				oyuncuData[playerid][oTohum] -= miktar;
				oyuncuData[userid][oTohum] += miktar;
				format(emote, sizeof(emote), "yanýnda bulunan %s adlý kiþiye bir miktar %s verir.", OyuncuIsim(userid), esyaa);
				cmd(playerid, 1, emote);
			}
			else if (!strcmp(esyaa, "odun", true))
			{
				if(miktar < 1 || oyuncuData[playerid][oOdun] < miktar) return hataMesaji(playerid, "%d adet %s üzerinizde bulunmuyor.", miktar, esyaa);
				oyuncuData[playerid][oOdun] -= miktar;
				oyuncuData[userid][oOdun] += miktar;
				format(emote, sizeof(emote), "yanýnda bulunan %s adlý kiþiye bir miktar %s verir.", OyuncuIsim(userid), esyaa);
				cmd(playerid, 1, emote);
			}
			else if (!strcmp(esyaa, "kibrit", true))
			{
				if(miktar < 1 || oyuncuData[playerid][oKibrit] < miktar) return hataMesaji(playerid, "%d adet %s üzerinizde bulunmuyor.", miktar, esyaa);
				oyuncuData[playerid][oKibrit] -= miktar;
				oyuncuData[userid][oKibrit] += miktar;
				format(emote, sizeof(emote), "yanýnda bulunan %s adlý kiþiye bir miktar %s verir.", OyuncuIsim(userid), esyaa);
				cmd(playerid, 1, emote);
			}
			else if (!strcmp(esyaa, "cakmak", true))
			{
				if(miktar < 1 || oyuncuData[playerid][oCakmak] == false) return hataMesaji(playerid, "%d adet %s üzerinizde bulunmuyor.", miktar, esyaa);
				oyuncuData[playerid][oCakmak] = false;
				oyuncuData[userid][oCakmak] = true;
				format(emote, sizeof(emote), "yanýnda bulunan %s adlý kiþiye bir adet %s verir.", OyuncuIsim(userid), esyaa);
				cmd(playerid, 1, emote);
			}
			else if (!strcmp(esyaa, "sigara", true))
			{
				if(miktar < 1 || oyuncuData[playerid][oSigara] < miktar) return hataMesaji(playerid, "%d adet %s üzerinizde bulunmuyor.", miktar, esyaa);
				oyuncuData[playerid][oSigara] -= miktar;
				oyuncuData[userid][oSigara] += miktar;
				format(emote, sizeof(emote), "yanýnda bulunan %s adlý kiþiye bir miktar %s verir.", OyuncuIsim(userid), esyaa);
				cmd(playerid, 1, emote);
			}
			else if (!strcmp(esyaa, "gubre", true))
			{
				if(miktar < 1 || oyuncuData[playerid][oGubre] < miktar) return hataMesaji(playerid, "%d adet %s üzerinizde bulunmuyor.", miktar, esyaa);
				oyuncuData[playerid][oGubre] -= miktar;
				oyuncuData[userid][oGubre] += miktar;
				format(emote, sizeof(emote), "yanýnda bulunan %s adlý kiþiye bir miktar %s verir.", OyuncuIsim(userid), esyaa);
				cmd(playerid, 1, emote);
			}
			else if (!strcmp(esyaa, "saksi", true))
			{
				if(miktar < 1 || oyuncuData[playerid][oSaksi] < miktar) return hataMesaji(playerid, "%d adet %s üzerinizde bulunmuyor.", miktar, esyaa);
				oyuncuData[playerid][oSaksi] -= miktar;
				oyuncuData[userid][oSaksi] += miktar;
				format(emote, sizeof(emote), "yanýnda bulunan %s adlý kiþiye bir miktar %s verir.", OyuncuIsim(userid), esyaa);
				cmd(playerid, 1, emote);
			}
			return 1;
		}

		CMD:yurumetarzi(playerid, params[])
		{
			new cek = 0;
			switch(strval(params))
			{
				case 1: { SetPlayerWalkingStyle(playerid, 0); cek++; }
				case 2: { SetPlayerWalkingStyle(playerid, 3); cek++; }
				case 3: { SetPlayerWalkingStyle(playerid, 4); cek++; }
				case 4: { SetPlayerWalkingStyle(playerid, 5); cek++; }
				case 5: { SetPlayerWalkingStyle(playerid, 6); cek++; }
				case 6: { SetPlayerWalkingStyle(playerid, 8); cek++; }
				case 7: { SetPlayerWalkingStyle(playerid, 9); cek++; }
				case 8: { SetPlayerWalkingStyle(playerid, 10); cek++; }
				case 9: { SetPlayerWalkingStyle(playerid, 11); cek++; }
				case 10: { SetPlayerWalkingStyle(playerid, 12); cek++; }
				case 11: { SetPlayerWalkingStyle(playerid, 13); cek++; }
				default: kullanimMesaji(playerid, "/yurumetarzi [1-11]");
			}
			if(cek) SunucuMesaji(playerid, "Yürüyüþ stilinizi deðiþtirdiniz.");
			return 1;
		}

		CMD:flasor(playerid)
		{
			new arac = GetPlayerVehicleID(playerid);
			if (!IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Flaþör far kullanabilmek için araçta olmalýsýnýz.");
			new paneller, kapilar, lambalar, digerleri;
			GetVehicleDamageStatus(arac, paneller, kapilar, lambalar, digerleri);
			switch(GetVehicleModel(arac))
			{
				case 596..599:
				{
					switch(Flasor[arac])
					{					 
						case 0: FlasorStatu[arac]=0, Flasor[arac] = 1, Iter_Add(FlasorArac, arac);
						case 1: FlasorStatu[arac]=0, Flasor[arac] = 0, UpdateVehicleDamageStatus(arac, paneller, kapilar, 0, digerleri), Iter_Remove(FlasorArac, arac);
					}
				}
				default:hataMesaji(playerid, "Bu tip araçlarda flaþör far özelliði bulunmaz.");
			}
			return 1;
		}

		alias:aksesuaryardim("aksyardim");
		CMD:aksesuaryardim(playerid, params[])
		{
			new str[256 * 3];
			format(str, sizeof(str), "%s{%06x}[?]: {FFFFFF}/aks {FF0000}>{FFFFFF} Aksesuar menüsüne ulaþmanýzý saðlayan komut.\n", str, RENK_TURUNCU >>> 8);
			format(str, sizeof(str), "%s{%06x}[?]: {FFFFFF}/wat {FF0000}>{FFFFFF} Tüm aksesuar slotlarýnýzý takmanýzý saðlar.\n", str, RENK_TURUNCU >>> 8);
			format(str, sizeof(str), "%s{%06x}[?]: {FFFFFF}/dat {FF0000}>{FFFFFF} Tüm aksesuar slotlarýnýzý çýkartmanýzý saðlar.\n\n", str, RENK_TURUNCU >>> 8);
			format(str, sizeof(str), "%s{%06x}[X]: {FFFFFF}Kullanýma alýnan, düzenlenen, rengi ayarlanan aksesuar verileri otomatik kaydolur.\n{%06x}[X]: {FFFFFF}Oyuna tekrar girdiðinizde otomatik olarak slotta bulunan verilerle birlikte yüklenir.", str, RENK_YESIL >>> 8, RENK_YESIL >>> 8);
			DialogGoster(playerid, BOS_MESAJ, DIALOG_STYLE_MSGBOX, "Aksesuar Yardým", str, "Kapat", "");
			return 1;
		}

		alias:aksesuarlar("aksesuar", "aks");
		CMD:aksesuarlar(playerid, params[])
		{
			if(GetPVarInt(playerid,"oyuncuyayinda") == 1) return false;
			new cek, str[256];
			for(new x;x<MAX_AKSESUAR;x++){if(oyuncakData[playerid][x][ptModelID] != 0){cek++;}}
				if(cek == 0) return BilgiText(playerid, "~r~~h~Tum aksesuar slotlariniz bos", 2500);
			strcat(str, "Durum\t#\t#\t#\n");
			format(str, sizeof(str), "%sAksesuar Kontrolleri\t[Tak\t|\tÇýkar]\n", str);
			format(str, sizeof(str), "%sAksesuar Düzenle\t[Kemik\t|\tPozisyon]\n", str);
			format(str, sizeof(str), "%sAksesuar Rengi\t[Deðiþtir\t|\tSýfýrla]\n \n", str);
			format(str, sizeof(str), "%sAksesuar Yok Et\t[Direkt Sil]\n", str);
			DialogGoster(playerid, AKSESUAR, DIALOG_STYLE_TABLIST_HEADERS, "{9CBBC5}Aksesuar:{FFFFFF} Ana Menü", str,"Devam", "Kapat");
			return 1;
		}

		CMD:wat(playerid, params[])
		{
			if(GetPVarInt(playerid,"oyuncuyayinda") == 1) return false;
			new cek;
			for(new x;x<MAX_AKSESUAR;x++)
			{
				if(oyuncakData[playerid][x][ptScaleX] == 0) {
					oyuncakData[playerid][x][ptScaleX] = 1.0;
					oyuncakData[playerid][x][ptScaleY] = 1.0;
					oyuncakData[playerid][x][ptScaleZ] = 1.0;
				}
				if(oyuncakData[playerid][x][ptModelID] != 0)
				{
					SetPlayerAttachedObject(playerid, x, oyuncakData[playerid][x][ptModelID], oyuncakData[playerid][x][ptBone], oyuncakData[playerid][x][ptPosX], oyuncakData[playerid][x][ptPosY], oyuncakData[playerid][x][ptPosZ], oyuncakData[playerid][x][ptRotX], oyuncakData[playerid][x][ptRotY], oyuncakData[playerid][x][ptRotZ], oyuncakData[playerid][x][ptScaleX], oyuncakData[playerid][x][ptScaleY], oyuncakData[playerid][x][ptScaleZ], oyuncakData[playerid][x][ptRenk]);
					oyuncakData[playerid][x][ptKullanim] = 1;
					cek++;
				}
			}
			if(cek == 0) return BilgiText(playerid, "~r~~h~Aksesuar slotlariniz bos", 2500);
			BilgiText(playerid, "~g~~h~Tum aksesuarlar kullanima alindi", 2500);
			return 1;
		}

		CMD:dat(playerid, params[])
		{
			if(GetPVarInt(playerid,"oyuncuyayinda") == 1) return false;
			new cek;
			for(new x;x<MAX_AKSESUAR;x++){if(oyuncakData[playerid][x][ptModelID] != 0){cek++;}}
				if(cek == 0) return BilgiText(playerid, "~r~~h~Aksesuar slotlariniz bos", 2500);
			for(new x; x < MAX_AKSESUAR; x++) { oyuncakData[playerid][x][ptKullanim] = 0;RemovePlayerAttachedObject(playerid, x); }
				BilgiText(playerid, "~r~~h~Tum aksesuarlar cikarildi", 2500);
			return 1;
		}
		alias:lisansgoster("ehliyetgoster");
		alias:mulklerim("evlerim", "isyerlerim");
		alias:fisilda("w");
		alias:olusum("f");
		alias:dunyadegistir("vwdegistir", "sddegistir", "setvw");
		alias:bagir("s");
		alias:kses("c", "l");
		alias:y("a");
		alias:oyundanat("kick");
		alias:rehberekaydet("tkaydet", "rehberekle");
		alias:gate("kapi");
		alias:bankaldir("unban");
		alias:yoneticiyardim("ahelp", "ayardim");
		alias:yisbasi("aduty", "awork");
		alias:ooc("o");
		alias:chatimisil("sohbetimisil", "sohbetimitemizle", "ccmy");
		alias:sokaktansesler("ss");
		alias:akdegistir("setskin");
		alias:tokatla("slap");
		alias:acevir("flipcar");
		alias:telsiz("t");
		alias:departman("d");
		alias:canver("sethp");
		alias:zirhver("setarmor");
		alias:intdegistir("setint");
		alias:sonbinilenarac("oldcar");
		alias:aparaduzenle("setmoney");
		alias:canlandir("revive");
		alias:bilgilerim("karakter");
		alias:dondur("freeze");
		alias:coz("unfreeze", "uf");
		alias:cek("gethere");
		alias:git("goto");
		alias:izle("spec");
		alias:izlebitir("specoff");
		alias:kuralgoster("showrules");
		alias:yetkili("admins", "adminler", "yoneticiler");
		alias:herkesiat("kickall");
		alias:kelepcecikar("kelepcecoz");

		CMD:yardim(playerid, params[])
		{
			if(oyuncuData[playerid][oGiris] == false) return hataMesaji(playerid, "Bu komutu kullanmak için giriþ yapmalýsýn.");
			SendClientMessage(playerid, RENK_GRI, "[YARDIM KOMUTLARI]: /aracyardim /telefonyardim /silahyardim");
			SendClientMessage(playerid, RENK_KLASIK, "[GENEL]: /karakter /paraver /envanter /saat /ustara /silahlarim /kimlikgoster /rapor /disgorunus");
			SendClientMessage(playerid, RENK_GRI, "[GENEL]: /arac /graffiti /gym /esyasat /esyaver /benzinal /cezalarim /araclarim /aliste /yetkili /sonbildiri");
			SendClientMessage(playerid, RENK_KLASIK, "[GENEL]: /sohbetimitemizle /soru /park /mulklerim /taksici /tamirci /gorevde /vicemarket /sonreklamlar");
			SendClientMessage(playerid, RENK_GRI, "[GENEL]: /yetenek /esya /yat /masasandalyekur /dekorasyon /atel /esyaal /k /vwduzelt /oldcar /karavan");
			SendClientMessage(playerid, RENK_KLASIK, "[ROL]: /me /do /sme /ame /ado /eme /edo /ime /ido /is /es");
			SendClientMessage(playerid, RENK_GRI, "[DÝÐER]: /agps /soygun /gozbagla /lisansgoster /truckerbilgi /meslekyardim /balikyardim /tamirciyardim, /sohbetanim");
			SendClientMessage(playerid, RENK_KLASIK, "[TELEFON]: /telefon /ara /tkapat /sms /rehberekaydet /rehberdensil /kulaklik /thoparlor");
			SendClientMessage(playerid, RENK_GRI, "[EV]: /ev /evanahtarver /dekorasyon /dekorsec");
			SendClientMessage(playerid, RENK_KLASIK, "[ÇÝFTLÝK]: /ciftlik /romork /ekin /piyasa");
			if(OyuncuBirlikTuru(playerid) == BIRLIK_POLIS) {
				SendClientMessage(playerid, RENK_GRI,  "[VCPD]: /kelepce, /kelepcecikar, /m, /rozetgoster, /taser, /beanbag, /aracaat, /havaalanikapi");
				SendClientMessage(playerid, RENK_KLASIK,  "[VCPD]: /pddolap, /yt, /(t)elsiz, /(d)epartman, /yereyatir, /araccek, /aracbirak, /techizatizni");
				SendClientMessage(playerid, RENK_GRI,  "[VCPD]: /barikat, /barikatduzenle, /barikatkaldir, /ekip, /pdpc (araçta), /veritabani (pd binasýnda)");
			}
			if(oyuncuData[playerid][oHelper] > 0) SendClientMessage(playerid, RENK_SERVER, "« SUPPORT » {FFFFFF}/supportyardim");
			if(oyuncuData[playerid][oAdmin]) SendClientMessage(playerid, 0x33AA33FF, "« YONETICI » {FFFFFF}/yoneticiyardim");
			return 1;
		}

		CMD:yoneticiyardim(playerid, params[])
		{
			if(!oyuncuData[playerid][oAdmin]) return YetkinizYok(playerid);

			SendClientMessage(playerid, RENK_KLASIK, "{33AA33}SEVIYE 1 YONETICI: {FFFFFF}/dondur, /coz, /oyundanat, /yisbasi, /acek, /aciftlikgit");
			SendClientMessage(playerid, RENK_KLASIK, "{33AA33}SEVIYE 1 YONETICI: {FFFFFF}/apm, /intdegistir, /git, /cek, /y, /spawnla, /canlandir");
			SendClientMessage(playerid, RENK_KLASIK, "{33AA33}SEVIYE 1 YONETICI: {FFFFFF}/izle, /izlebitir, /kuralgoster, /gonder, /dunyadegistir");
			SendClientMessage(playerid, RENK_KLASIK, "{33AA33}SEVIYE 1 YONETICI: {FFFFFF}/ahapis, /ahapiscikar, /tokatla, /level1, /yboomboxkaldir");
			if(oyuncuData[playerid][oAdmin] >= 2) {
				SendClientMessage(playerid, RENK_KLASIK, "{33AA33}SEVIYE 2 YONETICI: {FFFFFF}/ymac, /asilahsifirla, /ooc, /canver, /akdegistir, /nsahipbul");
				SendClientMessage(playerid, RENK_KLASIK, "{33AA33}SEVIYE 2 YONETICI: {FFFFFF}/ydondur, /ycoz, /ycanver, /aspawn, /offhapis, /ysilahsifirla, /silahlistesi");
			}
			if(oyuncuData[playerid][oAdmin] >= 3) {
				SendClientMessage(playerid, RENK_KLASIK, "{33AA33}SEVIYE 3 YONETICI: {FFFFFF}/yasaklamakaldir, /atamiret, /acevir, /posgit, /yakindakiler");
			}
			if(oyuncuData[playerid][oAdmin] >= 4) {
				SendClientMessage(playerid, RENK_KLASIK, "{33AA33}SEVIYE 4 YONETICI: {FFFFFF}/araclarispawnla, /cc, /bilgiler, /arutbeduzenle");
			}
			if(oyuncuData[playerid][oAdmin] >= 5) {
				SendClientMessage(playerid, RENK_KLASIK, "{33AA33}SEVIYE 5 YONETICI: {FFFFFF}/binaduzenle, /birlikyarat, /evyarat, /evduzenle, /aisimdegistir");
				SendClientMessage(playerid, RENK_KLASIK, "{33AA33}SEVIYE 5 YONETICI: {FFFFFF}/birliksil, /birlikduzenle, /aracyarat, /aracduzenle, /gateyarat, /gateduzenle, /isyeriyarat");
				SendClientMessage(playerid, RENK_KLASIK, "{33AA33}SEVIYE 5 YONETICI: {FFFFFF}/atmyarat, /atmduzenle, /atmsil, /herkesecan, /idevletesat, /meslekduzenle");
				SendClientMessage(playerid, RENK_KLASIK, "{33AA33}SEVIYE 5 YONETICI: {FFFFFF}/objeyarat, /objeduzenle, /oyuncuduzenle, /pompayarat, /pompakaldir, /pompaduzenle");
				SendClientMessage(playerid, RENK_KLASIK, "{33AA33}SEVIYE 5 YONETICI: {FFFFFF}/atelefon, /atelefonsil, /agarajyarat, /agarajduzenle, /akaravansil, /agiseyarat, /agisesil");
				SendClientMessage(playerid, RENK_KLASIK, "{33AA33}SEVIYE 5 YONETICI: {FFFFFF}/atamirciyarat, /atamircisil");
				SendClientMessage(playerid, RENK_KLASIK, "{33AA33}SEVIYE 5 YONETICI: {FFFFFF}/aciftlikfiyatlandir, /aciftlikbilgileri");
			}
			if(oyuncuData[playerid][oAdmin] >= 6) {
				SendClientMessage(playerid, RENK_KLASIK, "{B70000}SEVIYE 6 YONETICI: {FFFFFF}/anick, /ykanaldurum, /duyuruduzenle, /aforumnick, /havayidegistir, /uyetkiver, /herkesiat, /restart");
				SendClientMessage(playerid, RENK_KLASIK, "{B70000}SEVIYE 6 YONETICI: {FFFFFF}/npc, /npcyarat, /npcsil, /npcduzenle");
			}
			if(oyuncuData[playerid][oAdmin] >= 7) {
				SendClientMessage(playerid, RENK_KLASIK, "{B70000}SEVIYE 7 YONETICI: {FFFFFF}/aparaver, /oocdurum, /aracsil, /gatesil, /binasil, /evsil, /isyerisil, /ciftliklerifiyatlandir");
				SendClientMessage(playerid, RENK_KLASIK, "{B70000}SEVIYE 7 YONETICI: {FFFFFF}/kayitdurum, /adminyap, /aparaduzenle, /saticiyarat, /zirhver, /yzirhver");
				SendClientMessage(playerid, RENK_KLASIK, "{B70000}SEVIYE 7 YONETICI: {FFFFFF}/saticisil, /saticiduzenle, /objesil, /aracver, /ilkharfbuyut, /ahavaayarla, /asaatayarla");
				SendClientMessage(playerid, RENK_KLASIK, "{B70000}SEVIYE 7 YONETICI: {FFFFFF}/herkesezirh, /ayetkiduzenle");
				SendClientMessage(playerid, RENK_KLASIK, "{B70000}SEVIYE 7 YONETICI: {FFFFFF}/meslekyarat, /mesleksil, /tyarat, /tkaldir, /tduzenle");
			}
			if(oyuncuData[playerid][oAdmin] >= 8) {
				SendClientMessage(playerid, RENK_KLASIK, "{FF6700}SEVIYE 8 YONETICI: {FFFFFF}/supportyap, /offparakes, /offparaver, /godtest, /sunucu, /bakiyesifirla, /bakiyever");
			}
			return 1;
		}

		CMD:benzinal(playerid, params[])
		{
			if(oyuncuData[playerid][oHapisSure][0] > 0 || oyuncuData[playerid][oHapisSure][1] > 0) return hataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
			if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
			if(oyuncuData[playerid][oDonduruldu] > 0) return hataMesaji(playerid, "Dondurulma etkisindeyken bu komutu kullanamazsýn.");
			if(!IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu komut araç dýþýnda kullanýlamaz.");
			if(Pompa_Yakin(playerid) == -1) return hataMesaji(playerid, "Benzin pompasýna yeterince yakýn deðilsin.");
			if(GetEngineStatus(GetPlayerVehicleID(playerid)) == 1) return hataMesaji(playerid, "Önce aracýn motorunu kapatmalýsýn.");
			if(BenzinAliyor[playerid] != -1) return hataMesaji(playerid, "Zaten þu anda benzin alýyorsun.");
			new id = Arac_IDBul(GetPlayerVehicleID(playerid));
			if(AracBilgi[id][aracBenzin] > 99.9) return hataMesaji(playerid, "Daha fazla benzin alamazsýn.");
			BenzinTimer[playerid] = SetTimerEx("benzinal", 500, true, "id", playerid, id);
			BenzinAliyor[playerid] = Pompa_Yakin(playerid);
			TogglePlayerControllable(playerid, false);
			SunucuMesaji(playerid, "Benzin almaya baþladýn, durdurmak için \"/benziniptal\" yazýn.");
			return true;
		}

		CMD:benziniptal(playerid, params[]) {
			if(oyuncuData[playerid][oHapisSure][0] > 0 || oyuncuData[playerid][oHapisSure][1] > 0) return hataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
			if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
			if(oyuncuData[playerid][oDonduruldu] > 0) return hataMesaji(playerid, "Dondurulma etkisindeyken bu komutu kullanamazsýn.");
			if(!IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu komut araç dýþýnda kullanýlamaz.");
			if(BenzinAliyor[playerid] == -1) return hataMesaji(playerid, "Benzin almadýðýn için iptal edemezsin.");
			new id = Arac_IDBul(GetPlayerVehicleID(playerid));
			if(Arac_Birlik(playerid, id) || Arac_SahipKontrol(playerid, id) || Arac_Ehliyet(playerid, id) || Arac_Meslek(playerid, id) || Arac_Anahtar(playerid, id) || ItemAnahtarKontrol(playerid, AracBilgi[id][aracID]) || Arac_Firma(playerid, id))
			{
				KillTimer(BenzinTimer[playerid]);
				BenzinAliyor[playerid] = -1;
				SunucuMesaji(playerid, "Benzin alma iþlemini durdurdunuz.");
				TogglePlayerControllable(playerid, true);
			}
			else hataMesaji(playerid, "Bu aracýn anahtarý sende yok, müdahale edemezsin.");
			return true;
		}

		CMD:ic(playerid, params[])
		{
			if(GetPVarInt(playerid,"oyuncuyayinda") == 1) return false;
			if(oyuncuData[playerid][oHapisSure][0] > 0 || oyuncuData[playerid][oHapisSure][1] > 0) return hataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
			if(oyuncuData[playerid][oGozalti] > 0) return hataMesaji(playerid, "Gözaltýndayken bu komutu kullanamazsýn.");
			if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
			if(oyuncuData[playerid][oDonduruldu] > 0) return hataMesaji(playerid, "Dondurulma etkisindeyken bu komutu kullanamazsýn.");
			if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu komut araçta kullanýlamaz.");
			if(isnull(params)) return kullanimMesaji(playerid, "/ic [su, gazoz, bira, vodka, viski]");

			if(!strcmp(params, "su", true))
			{
				if(oyuncuData[playerid][oSu] < 1) return hataMesaji(playerid, "Suyun yok.");

				oyuncuData[playerid][oSu]--;
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
				oyuncuData[playerid][oIcecek] = 1;
				oyuncuData[playerid][oIcecekHak] = 5;
			}
			else if(!strcmp(params, "gazoz", true))
			{
				if(oyuncuData[playerid][oGazoz] < 1) return hataMesaji(playerid, "Gazozun yok.");

				oyuncuData[playerid][oGazoz]--;
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
				oyuncuData[playerid][oIcecek] = 2;
				oyuncuData[playerid][oIcecekHak] = 5;
			}
			else if(!strcmp(params, "bira", true))
			{
				if(oyuncuData[playerid][oBira] < 1) return hataMesaji(playerid, "Biran yok.");

				oyuncuData[playerid][oBira]--;
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
				oyuncuData[playerid][oIcecek] = 3;
				oyuncuData[playerid][oIcecekHak] = 5;
				SetPVarInt(playerid, "IcecekCani", 10 / oyuncuData[playerid][oIcecekHak]);
			}
			else if(!strcmp(params, "vodka", true))
			{
				if(oyuncuData[playerid][oVodka] < 1) return hataMesaji(playerid, "Vodkan yok.");

				oyuncuData[playerid][oVodka]--;
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
				oyuncuData[playerid][oIcecek] = 3;
				oyuncuData[playerid][oIcecekHak] = 5;
				SetPVarInt(playerid, "IcecekCani", 45 / oyuncuData[playerid][oIcecekHak]);
			}
			else if(!strcmp(params, "viski", true))
			{
				if(oyuncuData[playerid][oViski] < 1) return hataMesaji(playerid, "Viskin yok.");

				oyuncuData[playerid][oViski]--;
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
				oyuncuData[playerid][oIcecek] = 3;
				oyuncuData[playerid][oIcecekHak] = 5;
				SetPVarInt(playerid, "IcecekCani", 60 / oyuncuData[playerid][oIcecekHak]);

			}
			else hataMesaji(playerid, "Geçersiz seçenek.");
			return true;
		}

		CMD:acezakes(playerid, params[])
		{
			if(GetPVarInt(playerid,"oyuncuyayinda") == 1) return false;
			if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return hataMesaji(playerid, "Polis deðilsin.");

			new aracid, ceza, sebep[60];
			if(sscanf(params, "dds[60]", aracid, ceza, sebep)) return kullanimMesaji(playerid, "/acezakes [araç id] [miktar] [sebep]");
			if(!Iter_Contains(Araclar, aracid)) return hataMesaji(playerid, "Belirtilen ID'de araç mevcut deðil.");
			if(ceza < 50 || ceza > 5000) return hataMesaji(playerid, "Miktar 50$'dan küçük 5000$'dan büyük olamaz.");			
			if(isnull(sebep)) return hataMesaji(playerid, "Ceza nedeni boþ býrakýlamaz.");
			if(!strcmp(sebep, ".", true)) return hataMesaji(playerid, "Sebep \".\" olamaz.");
			if(!strcmp(sebep, "Yok", true)) return hataMesaji(playerid, "Sebep \"Yok\" olamaz.");

			new id = Arac_Ceza_Ekle(aracid, ceza, sebep, OyuncuIsim(playerid)), emote[64 + MAX_PLAYER_NAME];
			if(id == 0) return hataMesaji(playerid, "Ceza yazýlamadý, tekrar deneyin.");
			BirlikMesajiEx(BIRLIK_POLIS, RENK_TELSIZ, "CEZA: %s adlý memur %s plakalý araca %s miktarýnda ceza kaydý oluþturdu. (Sebep: %s)", OyuncuIsim(playerid), AracBilgi[aracid][aracPlaka],  NumaraFormati(ceza), sebep);
			format(emote, sizeof(emote), "bir makbuz ve kalem çýkarýr, aracýn plakasýna cezayý yazar.");
			cmd(playerid, 1, emote);
			return 1;
		}

		CMD:cezakes(playerid, params[])
		{
			if(GetPVarInt(playerid,"oyuncuyayinda") == 1) return false;
			if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return hataMesaji(playerid, "Polis deðilsin.");

			new oyuncuid, ceza, sebep[60];
			if(sscanf(params, "uds[60]", oyuncuid, ceza, sebep)) return kullanimMesaji(playerid, "/cezakes [oyuncu/id] [miktar] [sebep]");
			if(!IsPlayerConnected(oyuncuid)) return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");
			if(!YakinlikKontrol(playerid, oyuncuid, 6.0)) return hataMesaji(playerid, "Kiþiye yeterince yakýn deðilsin.");
			BirlikMesajiEx(BIRLIK_POLIS, RENK_TELSIZ, "CEZA: %s adlý memur %s adlý kiþiye %s miktarýnda kiþisel ceza kaydý oluþturdu. (Sebep: %s)", OyuncuIsim(playerid), OyuncuIsim(oyuncuid), NumaraFormati(ceza), sebep);

			if(ceza < 1 || ceza > 10000) return hataMesaji(playerid, "Miktar 1$'dan küçük 10000$'dan büyük olamaz.");

			if(isnull(sebep)) return hataMesaji(playerid, "Ceza nedeni boþ býrakýlamaz.");
			if(!strcmp(sebep, ".", true)) return hataMesaji(playerid, "Sebep \".\" olamaz.");
			if(!strcmp(sebep, "Yok", true)) return hataMesaji(playerid, "Sebep \"Yok\" olamaz.");

			new id = Ceza_Ekle(oyuncuid, ceza, sebep, OyuncuIsim(playerid, 1));
			if(id == 0) return hataMesaji(playerid, "Ceza yazýlamadý, tekrar deneyin.");
			return 1;
		}

		CMD:cezalarim(playerid, params[])
		{
			if(oyuncuData[playerid][oGiris] == false || oyuncuData[playerid][oDonduruldu] > 0) return hataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
			if(oyuncuData[playerid][oHapisSure][0] > 0 || oyuncuData[playerid][oHapisSure][1] > 0) return hataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
			if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");

			CezaGoster(playerid, OyuncuIsim(playerid, 1));
			return 1;
		}

		CMD:cezaode(playerid, params[])
		{
			if(oyuncuData[playerid][oGiris] == false || oyuncuData[playerid][oDonduruldu] > 0) return hataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
			if(oyuncuData[playerid][oHapisSure][0] > 0 || oyuncuData[playerid][oHapisSure][1] > 0) return hataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
			if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");

			DialogGoster(playerid, DIALOG_CEZALAR, DIALOG_STYLE_TABLIST_HEADERS, "Cezalar", "Ceza Türü\nKiþisel\nAraç", "Seç", "Kapat");
			return 1;
		}

		CMD:oyuncuduzenle(playerid, params[])
		{
			if(oyuncuData[playerid][oAdmin] < 5) return YetkinizYok(playerid);

			static oyuncuid, tip[16], miktar[144];
			if(sscanf(params, "us[16]S()[144]", oyuncuid, tip, miktar))
			{
				kullanimMesaji(playerid, "/oyuncuduzenle [oyuncu ID/isim] [adlar]");
				SendClientMessage(playerid, RENK_SARI, "[ADLAR]:{FFFFFF} cinsiyet, bankapara, firma, boy, kilo, bagimliliksifirla, tenrengi, oynamasaati, dilsifirla, ehliyet");
				return true;
			}
			if(!IsPlayerConnected(oyuncuid)) return hataMesaji(playerid, "Belirtilen oyuncu aktif deðil.");
			if(oyuncuid == playerid && !IsPlayerAdmin(playerid) && oyuncuData[playerid][oAdmin] < 8) return hataMesaji(playerid, "Kendi bilgilerini deðiþtiremezsin.");
			if(!strcmp(tip, "cinsiyet", true))
			{
				switch(oyuncuData[oyuncuid][oCinsiyet]) {
					case 1: oyuncuData[oyuncuid][oCinsiyet] = 2;
					case 2: oyuncuData[oyuncuid][oCinsiyet] = 1;
				}
				SunucuMesaji(playerid, "%s adlý oyuncunun cinsiyetini \"%s\" olarak deðiþtirdin.", OyuncuIsim(oyuncuid), (oyuncuData[oyuncuid][oCinsiyet] == 1) ? ("Erkek") : ("Kadýn"));
			}
			else if(!strcmp(tip, "banka", true))
			{
				if(!IsPlayerAdmin(playerid)) return 1;
				if(isnull(miktar))
					return kullanimMesaji(playerid, "/oyuncuduzenle [oyuncu ID/isim] [banka] [Yeni bakiye]");

				oyuncuData[oyuncuid][oBankaPara] = strval(miktar);
				SunucuMesaji(playerid, "%s adlý oyuncunun banka bakiyesini %s olarak deðiþtirdin.", OyuncuIsim(oyuncuid), NumaraFormati(strval(miktar)));
			}
			else if(!strcmp(tip, "tenrengi", true))
			{
				switch(oyuncuData[oyuncuid][oTenRengi])
				{
					case 1: oyuncuData[oyuncuid][oTenRengi] = 2;
					case 2: oyuncuData[oyuncuid][oTenRengi] = 1;
				}
				SunucuMesaji(playerid, "%s adlý oyuncunun ten rengini %s olarak deðiþtirdin.", OyuncuIsim(oyuncuid), (oyuncuData[oyuncuid][oTenRengi] == 1) ? ("Beyaz") : ("Siyahi"));
			}
			else if(!strcmp(tip, "seviye", true))
			{
				if(!IsPlayerAdmin(playerid)) return 1;
				if(isnull(miktar))
					return kullanimMesaji(playerid, "/oyuncuduzenle [oyuncu ID/isim] [seviye] [yeni seviye]");

				oyuncuData[oyuncuid][oSeviye] = strval(miktar);
				SunucuMesaji(playerid, "%s adlý oyuncunun seviyesini %d olarak deðiþtirdin.", OyuncuIsim(oyuncuid), strval(miktar));
			}
			else if(!strcmp(tip, "aclik", true))
			{
				if(isnull(miktar))
					return kullanimMesaji(playerid, "/oyuncuduzenle [oyuncu ID/isim] [aclik] [Deðer]");

				if(strval(miktar) < 0 || strval(miktar) > 100)
					return hataMesaji(playerid, "En az 0, en fazla 100 deðerinde ayarlayabilirsin.");

				oyuncuData[oyuncuid][oAclik] = strval(miktar);
				SunucuMesaji(playerid, "%s adlý oyuncunun açlýk seviyesini %s olarak deðiþtirdin.", OyuncuIsim(oyuncuid), NumaraFormati(strval(miktar), ""));
			}
			else if(!strcmp(tip, "boy", true))
			{
				if(isnull(miktar))
					return kullanimMesaji(playerid, "/oyuncuduzenle [oyuncu ID/isim] [boy] [Deðer]");

				if(strval(miktar) < 150)
					return hataMesaji(playerid, "En az 150 cm.");

				oyuncuData[oyuncuid][oyuncuboy] = strval(miktar);
				new boyquery[128];
				mysql_format(g_SQL, boyquery, sizeof(boyquery), "UPDATE oyuncular SET Boy = '%d' WHERE ID = '%d'", oyuncuData[oyuncuid][oyuncuboy], oyuncuData[oyuncuid][oID]);
				mysql_tquery(g_SQL, boyquery);
				SunucuMesaji(playerid, "%s adlý oyuncunun boyunu %s olarak deðiþtirdin.", OyuncuIsim(oyuncuid), NumaraFormati(strval(miktar), ""));
			}	else if(!strcmp(tip, "kilo", true))
			{
				if(isnull(miktar))
					return kullanimMesaji(playerid, "/oyuncuduzenle [oyuncu ID/isim] [kilo] [Deðer]");

				if(strval(miktar) < 0)
					return hataMesaji(playerid, "En az 0 kg.");

				oyuncuData[oyuncuid][oyuncukilo] = strval(miktar);
				new kiloquery[128];
				mysql_format(g_SQL, kiloquery, sizeof(kiloquery), "UPDATE oyuncular SET Kilo = '%d' WHERE ID = '%d'", oyuncuData[oyuncuid][oyuncukilo], oyuncuData[oyuncuid][oID]);
				mysql_tquery(g_SQL, kiloquery);
				SunucuMesaji(playerid, "%s adlý oyuncunun kilosunu %s olarak deðiþtirdin.", OyuncuIsim(oyuncuid), NumaraFormati(strval(miktar), ""));
			}
			else if(!strcmp(tip, "susuzluk", true))
			{
				if(isnull(miktar))
					return kullanimMesaji(playerid, "/oyuncuduzenle [oyuncu ID/isim] [susuzluk] [Deðer]");

				if(strval(miktar) < 0 || strval(miktar) > 100)
					return hataMesaji(playerid, "En az 0, en fazla 100 deðerinde ayarlayabilirsin.");

				oyuncuData[oyuncuid][oSusuzluk] = strval(miktar);
				SunucuMesaji(playerid, "%s adlý oyuncunun susuzluk seviyesini %s olarak deðiþtirdin.", OyuncuIsim(oyuncuid), NumaraFormati(strval(miktar), ""));
			}
			else if(!strcmp(tip, "oynamasaati", true))
			{
				if(isnull(miktar))
					return kullanimMesaji(playerid, "/oyuncuduzenle [oyuncu ID/isim] [oynamasaati] [Deðer]");

				oyuncuData[oyuncuid][oOynamaSaati] = strval(miktar);
				SunucuMesaji(playerid, "%s adlý oyuncunun oynama saatini %s olarak deðiþtirdin.", OyuncuIsim(oyuncuid), NumaraFormati(strval(miktar), ""));
				oyuncuData[oyuncuid][oExp] = strval(miktar);
				oyuncuData[oyuncuid][oSeviye] = 1;
				SetTimerEx("levelsenk", 1, false, "i", oyuncuid);
			}
			else if(!strcmp(tip, "dilsifirla", true))
			{
				oyuncuData[oyuncuid][oEkstraDil] = 0;
				SunucuMesaji(playerid, "%s adlý oyuncunun dilini sýfýrladýn.", OyuncuIsim(oyuncuid));
			}
			else if(!strcmp(tip, "uyusturucu", true))
			{
				static id, miktar2;
				if(sscanf(miktar, "dd", id, miktar2))
					return kullanimMesaji(playerid, "/oyuncuduzenle [oyuncu ID/isim] [uyusturucu] [0: düþük - 1: orta - 2: yüksek] [yeni miktar]");

				if(miktar2 < 0) return hataMesaji(playerid, "Girilen miktar en az 0 olmalýdýr.");
				oyuncuData[oyuncuid][oUyusturucu][id] = miktar2;
				SunucuMesaji(playerid, "%s adlý kiþinin %s kalite uyuþturucu sayýsýný %s olarak deðiþtirdin.", OyuncuIsim(oyuncuid), uturadi(id), NumaraFormati(miktar2, ""));
				SunucuMesaji(oyuncuid, "%s adlý yönetici %s kalite uyuþturucu sayýný %s olarak deðiþtirdi.", oyuncuData[playerid][oAdminNick], uturadi(id), NumaraFormati(miktar2, ""));
			}
			else if(!strcmp(tip, "tohum", true))
			{
				static tohum;
				if(sscanf(miktar, "d", tohum))
					return kullanimMesaji(playerid, "/oyuncuduzenle [oyuncu ID/isim] [tohum] [yeni miktar]");

				if(tohum < 0) return hataMesaji(playerid, "Girilen miktar en az 0 olmalýdýr.");
				oyuncuData[oyuncuid][oTohum] = tohum;
				SunucuMesaji(playerid, "%s adlý kiþinin tohum sayýsýný %s olarak deðiþtirdin.", OyuncuIsim(oyuncuid), NumaraFormati(tohum, ""));
				SunucuMesaji(oyuncuid, "%s adlý yönetici tohum sayýný %s olarak deðiþtirdi.", oyuncuData[playerid][oAdminNick], NumaraFormati(tohum, ""));
			}
			else if(!strcmp(tip, "bagimliliksifirla", true))
			{
				oyuncuData[oyuncuid][oBagimlilik] = 0;
				oyuncuData[oyuncuid][oBagimlilikEtki] = 0;
				SunucuMesaji(playerid, "%s adlý kiþinin baðýmlýlýk deðerlerini sýfýrladýn.", OyuncuIsim(oyuncuid));
			}
			else if(!strcmp(tip, "firma", true))
			{
				static firma;
				if(sscanf(miktar, "d", firma))
					return kullanimMesaji(playerid, "/oyuncuduzenle [oyuncu ID/isim] [tohum] [firma id]");

				if(firma < -1) return hataMesaji(playerid, "Girilen miktar en az -1 olmalýdýr.");
				if(firma == -1)
				{
					oyuncuData[oyuncuid][oFirma] = -1;
					oyuncuData[oyuncuid][oFirmarutbe] = 0;
					SunucuMesaji(playerid, "%s adlý kiþiyi firmadan attýn.", OyuncuIsim(oyuncuid));
					SunucuMesaji(oyuncuid, "%s tarafýndan firmadan atýldýn.", oyuncuData[playerid][oAdminNick]);
				}
				else
				{
					oyuncuData[oyuncuid][oFirma] = firma;
					oyuncuData[oyuncuid][oFirmarutbe] = 0;
					SunucuMesaji(playerid, "%s adlý kiþiyi \"%s\" adlý firmaya aldýn.", OyuncuIsim(oyuncuid), FirmaInfo[firma][fIsim]);
					SunucuMesaji(oyuncuid, "%s adlý yönetici tarafýndan \"%s\" firmasýna alýndýn.", oyuncuData[playerid][oAdminNick], FirmaInfo[firma][fIsim]);
				}
			}
			else if(!strcmp(tip, "ehliyet", true))
			{
				switch(oyuncuData[oyuncuid][oEhliyet]) {
					case true: oyuncuData[oyuncuid][oEhliyet] = false;
					case false: oyuncuData[oyuncuid][oEhliyet] = true;
				}
				SunucuMesaji(playerid, "%s adlý oyuncunun ehliyetini %s olarak deðiþtirdin.", OyuncuIsim(oyuncuid), (oyuncuData[oyuncuid][oEhliyet] == false) ? ("yok") : ("mevcut"));
			}
			OyuncuKaydet(oyuncuid);
			return 1;
		}

		CMD:k(playerid, params[])
		{
			if(!strcmp(kokendilleri[oyuncuData[playerid][oEkstraDil]][kokendili], "Ingilizce", true)) return hataMesaji(playerid, "Kökeninize ait resmi dil Ingilizce olduðu için komutu kullanamazsýnýz.");
			if(oyuncuData[playerid][oEkstraDil] == 0) return hataMesaji(playerid, "Ýkincil dil seçmemiþsin, /dilsec komutu ile kendine ekstra bir dil seçebilirsin.");
			if(isnull(params)) return kullanimMesaji(playerid, "/k [ikincil dil]");

			foreach(new i : Player)
			{
				if(YakinlikKontrol(playerid, i, KONUSMA_MESAFESI))
				{
						if(oyuncuData[i][oEkstraDil] != 0 && (oyuncuData[i][oEkstraDil] == oyuncuData[playerid][oEkstraDil] || oyuncuData[i][oUcuncuDil] == oyuncuData[playerid][oEkstraDil]))
						{
							SCM_Ex(i, RENK_BEYAZ, "[%s] %s: %s", EkstraDilCek(playerid), OyuncuIsim(playerid), params);
						}
						else
						{
							SCM_Ex(i, RENK_BEYAZ, "[%s] %s: ??? ??? ???", EkstraDilCek(playerid), OyuncuIsim(playerid));
						}
				}
			}
			return 1;
		}

		CMD:ud(playerid, params[])
		{
			if(oyuncuData[playerid][oUcuncuDil] == 0) return hataMesaji(playerid, "Üçüncül dil seçmemiþsin, market ürününü kullanarak üçüncü dili aktif edebilirsin.");
			if(isnull(params)) return kullanimMesaji(playerid, "/ucuncudil [üçüncül dil]");	
			foreach(new i : Player)
			{
				if(YakinlikKontrol(playerid, i, KONUSMA_MESAFESI))
				{
					if(oyuncuData[i][oUcuncuDil] == oyuncuData[playerid][oUcuncuDil] || oyuncuData[i][oEkstraDil] == oyuncuData[playerid][oUcuncuDil])
					{
						SCM_Ex(i, RENK_BEYAZ, "[%s] %s: %s", UcuncuDilCek(playerid), OyuncuIsim(playerid), params);
					}
					else
					{
						SCM_Ex(i, RENK_BEYAZ, "[%s] %s: ??? ??? ???", UcuncuDilCek(playerid), OyuncuIsim(playerid));
					}
				}
			}
			return 1;
		}

CMD:dilsec(playerid, params[])
{
if(oyuncuData[playerid][oEkstraDil] != 0) return hataMesaji(playerid, "Zaten ikincil bir dil seçmiþsin.");
//if(!strcmp(Kokenler[oyuncuData[playerid][oEkstraDil]][Dil], "Ingilizce", true)) return hataMesaji(playerid, "Kökeninize ait resmi dil Ingilizce olduðu için komutu kullanamazsýnýz.");
if(GetPVarInt(playerid, "dialog") > -1) return hataMesaji(playerid, "Þu anda baþka bir dialog kullanýyorsunuz, lütfen daha sonra deneyin.");
new icerik[512];
icerik[0] = 0;
for(new x; x < sizeof(kokendilleri); x++)
{
	format(icerik, sizeof(icerik), "%s%s\n", icerik, kokendilleri[x][kokendili]);
}
DialogGoster(playerid, DIALOG_DILSEC, DIALOG_STYLE_LIST, "Ýkincil Dil Seçin", icerik, "Seç", "Kapat");
return 1;
}

CMD:vwduzelt(playerid, params[])
{
	if(GetPVarInt(playerid,"oyuncuyayinda") == 1) return false;
	if(oyuncuData[playerid][oHapisSure] > 0) return hataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýnýz.");
	if(GetPlayerVirtualWorld(playerid) > 0)
	{
		SetPlayerVirtualWorld(playerid, 0);
		SunucuMesaji(playerid, "Sanal dünya sorununuz düzeltildi.");
	}
	else hataMesaji(playerid, "Sanal dünyanda bir sorun saptanmadýðý için düzeltilmedi.");
	return 1;
}

CMD:nsahipbul(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 2) return YetkinizYok(playerid);

	static numara;
	if(sscanf(params, "d", numara))
		return kullanimMesaji(playerid, "/nsahipbul [telefon numarasý]");

	if(numara == 0) return hataMesaji(playerid, "Geçersiz numara belirttin.");
	if(NumaraSahibiBul(numara) == INVALID_PLAYER_ID) return hataMesaji(playerid, "Girilen numara geçersiz ya da sahibi oyunda deðil.");

	SunucuMesaji(playerid, "%d numarasýnýn sahibi: %s", numara, OyuncuIsim(NumaraSahibiBul(numara)));
	return 1;
}
/*
CMD:suretest(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 2) return YetkinizYok(playerid);

	SunucuMesaji(playerid, "%f süre geçmiþ.", AntiCheatGetLastEnteredVehTime(playerid));
	return 1;
}*/

CMD:hasarlar(playerid, params[])
{
	static oyuncuid, hasarsayi, mesaj[MAKSIMUM_HASAR * 256];
	if(sscanf(params, "u", oyuncuid))
		return kullanimMesaji(playerid, "/hasarlar [oyuncuid/isim]");

	if(!IsPlayerConnected(oyuncuid)) return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");

	if(!YakinlikKontrol(playerid, oyuncuid, 5.0))
		return hataMesaji(playerid, "Girilen oyuncuya yakýn deðilsin.");

	if(oyuncuData[oyuncuid][oYarali] == false) return hataMesaji(playerid, "Oyuncu yaralý deðil.");

	hasarsayi = 0;
	mesaj[0] = 0;
	for (new i = 0; i < MAKSIMUM_HASAR; i ++)
	{
		if(HasarBilgi[oyuncuid][i][hasarVarmi] && IsPlayerConnected(HasarBilgi[oyuncuid][i][hasarVeren])) {
			format(mesaj, sizeof(mesaj), "%s%.1f\t%s\t%s\t%s\n", mesaj, HasarBilgi[oyuncuid][i][hasarDeger], HasarBolge(HasarBilgi[oyuncuid][i][hasarBolge]), OyuncuIsim(HasarBilgi[oyuncuid][i][hasarVeren]), SilahIsim(HasarBilgi[oyuncuid][i][hasarSilah]));
			hasarsayi++;
		}
	}
	if(hasarsayi == 0) return hataMesaji(playerid, "Oyuncu hasar almamýþ.");
	strins(mesaj, "Hasar\tBölge\tHasar Veren\tSilah\n", 0);
	DialogGoster(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, OyuncuIsim(oyuncuid), mesaj, "Kapat", "");
	return 1;
}

CMD:kuralgoster(playerid, params[])
{
	if(oyuncuData[playerid][oHelper] < 1 || oyuncuData[playerid][oAdmin] < 1) return YetkinizYok(playerid);

	static oyuncuid;
	if(sscanf(params, "u", oyuncuid))
		return kullanimMesaji(playerid, "/kuralgoster [oyuncu id/isim]");

	if(!IsPlayerConnected(oyuncuid))
		return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");

	if(oyuncuData[playerid][oAdmin] < oyuncuData[oyuncuid][oAdmin])
		return hataMesaji(playerid, "Bu komutu kendinden yüksek kiþilere uygulayamazsýn.");

	if(GetPVarInt(oyuncuid, "dialog") > -1) return hataMesaji(playerid, "Oyuncu þu anda baþka bir dialog kullanýyor, lütfen bekleyin.");

	static bilgi[2048];
	format(bilgi, sizeof(bilgi), "1. Hiçbir þekilde hile kullanmayýn.\n");
	strcat(bilgi, "2. Diðer oyunculara üstünlük kurmanýzý saðlayacak modlar kullanmayýnýz. (Örneðin araç kontrol modu)\n");
	strcat(bilgi, "3. Bug ve script abuse'den kaçýnýn. Bir açýk bulduðunuzda bunu forum üzerinden bilet atarak belirtin.\n");
	strcat(bilgi, "4. Çatýþma esnasýnda oyunu durdurmayýn. Bunu yaptýðýnýz durumda cezalandýrýlýrsýnýz.\n");
	strcat(bilgi, "5. Car jack ya da rammingten kaçýnýn.\n");
	strcat(bilgi, "6. Revenge kill yapmayýn.\n");
	strcat(bilgi, "7. Flood & Spam yapmayýn.\n");
	strcat(bilgi, "8. Herhangi bir sitenin ya da sunucunun reklamýný kesinlikle yapmayýn.\n");
	strcat(bilgi, "9. OOC(Out Of Character) küfür ve hakaretlerden kesinlikle kaçýnýn.\n");
	strcat(bilgi, "10. Kesinlikle DeathMatch yapmayýn. (Sebepsiz yere ya da role uygun olmadan baþkalarýna saldýrmak)\n");
	strcat(bilgi, "11. Multi-Account kesinlikle yasaktýr. Fark edildiði takdirde hesaplarýnýzýn tamamý banlanýr.\n");
	strcat(bilgi, "12. Meta gaming ve power gaming'ten kaçýnýn.\n");
	strcat(bilgi, "13. Üçüncü parti yazýlýmlarý kullanmayýn.\n");
	strcat(bilgi, "14. Güvenli bölge kurallarýna daima uyun.\n");
	strcat(bilgi, "15. Rahatsýz edici rollerden kaçýnýn. (Örnek: Tecavüz, pedofili, nekrofili, taciz vb.)\n");
	strcat(bilgi, "16. Soygun ve dolandýrýcýlýk kurallarýnýn dýþýna çýkmayýnýz.\n\n\n");
	strcat(bilgi, "Yukarýdaki yasaklarýn herhangi birine uymadýðýnýz takdirde yasaða ve bunun boyutuna göre cezalandýrýlýrsýnýz.\n\n");
	strcat(bilgi, "Detaylý þekilde kurallara ulaþmak istiyorsanýz izlemeniz gereken yol þu þekildedir.\n");
	strcat(bilgi, "www.vice-rp.com > Forum > Kurallar > Oyun Kurallarý");
	DialogGoster(oyuncuid, 0, DIALOG_STYLE_MSGBOX, "> Kurallar", bilgi, "Kapat", "");
	return 1;
}

CMD:sonbinilenarac(playerid, params[])
{
	if(oyuncuData[playerid][oSonBinilenArac] == 0) return hataMesaji(playerid, "Son giriþinden itibaren yeni bir araca binmemiþsin!");

	SunucuMesaji(playerid, "Son bindiðin araç ID: %d", oyuncuData[playerid][oSonBinilenArac]);
	return 1;
}

CMD:saat(playerid, params[])
{
	if(GetPVarInt(playerid,"oyuncuyayinda") == 1) return false;
	cmd(playerid, 1, "kolundaki saatine bakar.");
	static mesaj[128], ay[12], tarih[6];
	getdate(tarih[2], tarih[1], tarih[0]);
	gettime(tarih[3], tarih[4], tarih[5]);

	switch(tarih[1]) {
		case 1: ay = "Ocak";
		case 2: ay = "Subat";
		case 3: ay = "Mart";
		case 4: ay = "Nisan";
		case 5: ay = "Mayis";
		case 6: ay = "Haziran";
		case 7: ay = "Temmuz";
		case 8: ay = "Agustos";
		case 9: ay = "Eylul";
		case 10: ay = "Ekim";
		case 11: ay = "Kasim";
		case 12: ay = "Aralik";
	}
	format(mesaj, sizeof(mesaj), "~r~%s %02d %d~n~~w~%02d:%02d:%02d", ay, tarih[0], tarih[2], tarih[3], tarih[4], tarih[5]);
	GameTextForPlayer(playerid, mesaj, 5 * 1000, 1);
	return 1;
}

CMD:sifredegistir(playerid, params[])
{
	if(oyuncuData[playerid][oGiris] == false) return hataMesaji(playerid, "Giriþ yapmadan bu komut kullanýlamaz.");
	if(GetPVarInt(playerid, "dialog") > -1) return hataMesaji(playerid, "Þu anda þifreni deðiþtiremezsin.");

	DialogGoster(playerid, DIALOG_SIFREDEGISTIR, DIALOG_STYLE_PASSWORD, "> Þifre Deðiþtir", "Lütfen yeni þifrenizi aþaðýya girin;", "Tamam", "Kapat");
	return 1;
}

CMD:kasa(playerid, params[])
{
	if(GetPVarInt(playerid,"oyuncuyayinda") == 1) return false;
	if(OyuncuBirlikTuru(playerid) != BIRLIK_DEVLET) return hataMesaji(playerid, "Bu komutu sadece devlet birliði üyeleri kullanabilir.");
	if(BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikMaksRutbe] > oyuncuData[playerid][oBirlikRutbe]) return hataMesaji(playerid, "Bu kasayý kullanma yetkin yok.");
	if(!IsPlayerInRangeOfPoint(playerid, 2.5, 1495.5537,-1861.8885,3645.6350)) return hataMesaji(playerid, "Kasayý kullanabileceðin bir noktada deðilsin.");
	if(GetPVarInt(playerid, "dialog") > -1) return hataMesaji(playerid, "Baþka bir dialog kullanýyorsunuz, daha sonra tekrar deneyin.");

	DialogGoster(playerid, DIALOG_GOVKASA, DIALOG_STYLE_LIST, "> Government - Kasa", "Para Çek\nPara Yatýr", "Tamam", "Kapat");
	return 1;
}

CMD:bilgilerim(playerid, params[])
{
	oyuncuDataleri(playerid, playerid);
	return 1;
}

CMD:itemekle(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 6) return YetkinizYok(playerid);
	static oid,item,miktar;
	if(sscanf(params, "udd", oid, item,miktar))
		return kullanimMesaji(playerid, "/itemekle [oyuncu id] [item tip id] [var deðeri(bazý özel itemler hariç hep 1 yazýlýr)]");
	if(!IsPlayerConnected(oid)) return hataMesaji(playerid, "Girilen oyuncu aktif deðil.");
	if(!oyuncuData[oid][oGiris]) return hataMesaji(playerid, "Oyuncu giriþ yapmamýþ.");
	if(item < sizeof(ItemArray) - 1 || item > 0) {
		ItemEkle(oid,item,miktar);
		SunucuMesaji(playerid, "%s adlý kiþiye item verdiniz.", OyuncuIsim(oid));
		SunucuMesaji(oid, "%s adlý admin size bir item verdi.", oyuncuData[playerid][oAdminNick]);
	}
	else hataMesaji(playerid, "Hatalý item tip idi girdiniz.");
	return 1;
}

CMD:itemsil(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 6) return YetkinizYok(playerid);
	static oid,slot;
	if(sscanf(params, "ud", oid, slot))
		return kullanimMesaji(playerid, "/itemsil [oyuncu id] [slot]");
	if(!IsPlayerConnected(oid)) return hataMesaji(playerid, "Girilen oyuncu aktif deðil.");
	if(!oyuncuData[oid][oGiris]) return hataMesaji(playerid, "Oyuncu giriþ yapmamýþ.");
	if(slot > -1 && slot < MAX_ITEM) {
		ItemSil(oid, slot);
		SunucuMesaji(playerid, "%s adlý kiþinin %d slotundaki itemini sildiniz.", OyuncuIsim(oid), slot);
	}
	else hataMesaji(playerid, "Hatalý slot idi girdiniz.");
	return 1;
}

CMD:esyaver(playerid, params[])
{
	if(GetPVarInt(playerid,"oyuncuyayinda") == 1) return false;
	static oid,slot;
	if(sscanf(params, "ud", oid, slot))
		return kullanimMesaji(playerid, "/esyaver [oyuncu id] [slot]");
	if(!IsPlayerConnected(oid)) return hataMesaji(playerid, "Girilen oyuncu aktif deðil.");
	if(oid == playerid) return hataMesaji(playerid, "Kendine eþya veremezsin.");
	if(!oyuncuData[oid][oGiris]) return hataMesaji(playerid, "Oyuncu giriþ yapmamýþ.");
	if(!YakinlikKontrol(playerid, oid, 5.0)) return hataMesaji(playerid, "Belirttiðiniz oyuncuya yeterince yakýn deðilsiniz.");
	if(EnvanterData[playerid][i_tip][slot] == 106) return hataMesaji(playerid, "Kýyafet poþetini baþkasýyla paylaþamazsýn.");
	if(EnvanterData[playerid][i_tip][slot] == 104) return hataMesaji(playerid, "Kamerayý paylaþamazsýn.");
	if(slot > -1 && slot < MAX_ITEM) {
		if (EnvanterData[playerid][i_aktif][slot]) {
			if(GetBosSlot(oid) < MAX_ITEM && oyuncuData[oid][pEnvanterAgirlik] < MAX_AGIRLIK) {
				new query[110];
				format(query, sizeof(query), "** %s, %s adlý kiþiye %s adlý eþyasýný verir.", OyuncuIsim(playerid), OyuncuIsim(oid), ItemArray[ EnvanterData[playerid][i_tip][slot] - 1 ][iisim]);
				ProxDetector(12, playerid, query, RENK_PEMBE);
				SunucuMesaji(oid, "%s adlý kiþi size %s adlý eþyayý verdi.", OyuncuIsim(playerid), ItemArray[ EnvanterData[playerid][i_tip][slot] - 1 ][iisim]);
				ItemEkle(oid, EnvanterData[playerid][i_tip][slot], EnvanterData[playerid][i_var][slot]);
				ItemSil(playerid, slot);
			}
			else hataMesaji(playerid, "Oyuncunun envanterinde boþ slot yok veya aðýrlýk limitini doldurmuþ.");
		}
		else hataMesaji(playerid, "Seçtiðiniz slotta eþya bulunmuyor.");
	}
	else hataMesaji(playerid, "Hatalý slot idi girdiniz.");
	return 1;
}

CMD:ubirlestir(playerid, params[])
{
	if(GetPVarInt(playerid,"oyuncuyayinda") == 1) return false;
	static slot,slot2;
	if(sscanf(params, "dd",  slot, slot2))
		return kullanimMesaji(playerid, "/ubirlestir [slot1] [slot2]"), SunucuMesaji(playerid, "Birinci slottaki uyuþturucu, ikinci slottaki ile birleþtirilir.");
		if(slot > -1 && slot < MAX_ITEM && slot2 > -1 && slot2 < MAX_ITEM) {
		if(EnvanterData[playerid][i_tip][slot] == 34 || EnvanterData[playerid][i_tip][slot] == 35 || EnvanterData[playerid][i_tip][slot] == 36 || EnvanterData[playerid][i_tip][slot] == 37 ||
		EnvanterData[playerid][i_tip][slot] == 38 || EnvanterData[playerid][i_tip][slot] == 39) {
		if(EnvanterData[playerid][i_tip][slot] != EnvanterData[playerid][i_tip][slot2]) return hataMesaji(playerid, "Seçtiðiniz slotlardaki uyuþturucu tipleri ayný olmalýdýr.");
		if (EnvanterData[playerid][i_aktif][slot] && EnvanterData[playerid][i_aktif][slot2]) {
		SunucuMesaji(playerid, "Slot %d: (%d gram) ve Slot %d: (%d gram) uyuþturucularýnýzý birleþtirdiniz .", slot, EnvanterData[playerid][i_var][slot], slot2, EnvanterData[playerid][i_var][slot2]);
		ItemSlotMiktarArttir(playerid, slot, EnvanterData[playerid][i_var][slot2]);
		ItemSil(playerid, slot2);
		}
		else hataMesaji(playerid, "Seçtiðiniz slot veya slotlarda eþya bulunmuyor.");
	}
	else hataMesaji(playerid, "Seçtiðiniz slotlardaki eþya tipi bir uyuþturucu deðil.");
	}
	else hataMesaji(playerid, "Hatalý slot idi girdiniz.");
	return 1;
}

CMD:uver(playerid, params[])
{
	if(GetPVarInt(playerid,"oyuncuyayinda") == 1) return false;
	static oid,slot,miktar;
	if(sscanf(params, "udd", oid, slot, miktar))
		return kullanimMesaji(playerid, "/uver [oyuncu id] [envanter slotu] [miktar]");
	if(!IsPlayerConnected(oid)) return hataMesaji(playerid, "Girilen oyuncu aktif deðil.");
	if(oid == playerid) return hataMesaji(playerid, "Kendine uyuþturucu veremezsin.");
	if(!oyuncuData[oid][oGiris]) return hataMesaji(playerid, "Oyuncu giriþ yapmamýþ.");
	if(!YakinlikKontrol(playerid, oid, 5.0)) return hataMesaji(playerid, "Belirttiðiniz oyuncuya yeterince yakýn deðilsiniz.");
	if(EnvanterData[playerid][i_tip][slot] == 34 || EnvanterData[playerid][i_tip][slot] == 35 || EnvanterData[playerid][i_tip][slot] == 36 || EnvanterData[playerid][i_tip][slot] == 37 ||
	EnvanterData[playerid][i_tip][slot] == 38 || EnvanterData[playerid][i_tip][slot] == 39) {
	if(miktar < 1) return hataMesaji(playerid, "Miktar 1'den küçük olamaz.");
	if(EnvanterData[playerid][i_var][slot] < miktar) return hataMesaji(playerid, "Seçtiðiniz slottaki uyuþturucudan yeterli miktarda bulunmuyor");
	if(slot > -1 && slot < MAX_ITEM) {
		if (EnvanterData[playerid][i_aktif][slot]) {
			if(GetBosSlot(oid) < MAX_ITEM && oyuncuData[oid][pEnvanterAgirlik] < MAX_AGIRLIK) {
				new query[110];
				format(query, sizeof(query), "** %s, %s adlý kiþiye %s adlý uyuþturucuyu verir.", OyuncuIsim(playerid), OyuncuIsim(oid), ItemArray[ EnvanterData[playerid][i_tip][slot] - 1 ][iisim]);
				ProxDetector(12, playerid, query, RENK_PEMBE);
				SunucuMesaji(oid, "%s adlý kiþi size %s(%d gram) adlý uyuþturucuyu verdi.", OyuncuIsim(playerid), ItemArray[ EnvanterData[playerid][i_tip][slot] - 1 ][iisim], miktar);
				ItemEkle(oid, EnvanterData[playerid][i_tip][slot], miktar);
				ItemSlotMiktarAzalt(playerid, slot, miktar);
				new str[180];
				format(str, sizeof(str), "```[%s] %s, %s adli kisiye %s adli uyusturucu verdi. Gram: %d```", Tarih(), OyuncuIsim(playerid), OyuncuIsim(oid), ItemArray[ EnvanterData[playerid][i_tip][slot] - 1 ][iisim], miktar);
				DCC_SendChannelMessage(uyuslog, str);
			}
			else hataMesaji(playerid, "Oyuncunun envanterinde boþ slot yok veya aðýrlýk limitini doldurmuþ.");
		}
		else hataMesaji(playerid, "Seçtiðiniz slotta eþya bulunmuyor.");
	}
	else hataMesaji(playerid, "Hatalý slot idi girdiniz.");
	}
	return 1;
}


CMD:esyasat(playerid, params[])
{
	if(GetPVarInt(playerid,"oyuncuyayinda") == 1) return false;
	static oid,slot,ucret, msj[500];
	if(sscanf(params, "udd", oid, slot, ucret))
		return kullanimMesaji(playerid, "/esyasat [oyuncu id] [slot] [ucret]");
	if(!IsPlayerConnected(oid)) return hataMesaji(playerid, "Girilen oyuncu aktif deðil.");
	if(oid == playerid) return hataMesaji(playerid, "Kendine eþya satamazsýn.");
	if(!oyuncuData[oid][oGiris]) return hataMesaji(playerid, "Oyuncu giriþ yapmamýþ.");
	if(ucret < 1) return hataMesaji(playerid, "Ücret deðeri 1'den küçük olamaz.");
	if(oyuncuData[oid][oPara] < ucret) return hataMesaji(playerid, "Oyuncunun üzerinde yeterli miktarda para bulunmuyor.");
	if(!YakinlikKontrol(playerid, oid, 5.0)) return hataMesaji(playerid, "Belirttiðiniz oyuncuya yeterince yakýn deðilsiniz.");
	if(slot > -1 && slot < MAX_ITEM) {
		if (EnvanterData[playerid][i_aktif][slot]) {
			if(GetBosSlot(oid) < MAX_ITEM && oyuncuData[oid][pEnvanterAgirlik] < MAX_AGIRLIK) {
				SunucuMesaji(playerid, "%s adlý kiþiye eþya satma isteði gönderdiniz.", OyuncuIsim(oid));
				format(msj, sizeof(msj), "%s adlý kiþi size %s adlý eþyasýný %d$ karþýlýðýnda satmak istiyor.\nGerçekten satýn almak istiyor musunuz?", OyuncuIsim(playerid), ItemArray[EnvanterData[playerid][i_tip][slot]][iisim], ucret);
				ShowPlayerDialog(oid, DIALOG_ENVANTER_ESYA_SAT, DIALOG_STYLE_MSGBOX, "Eþya Satma", msj, "Kabul Et", "Iptal Et");
				SetPVarInt(oid, "envoid", playerid), SetPVarInt(oid, "envslot", slot), SetPVarInt(oid, "envucret", ucret);
			}
			else hataMesaji(playerid, "Oyuncunun envanterinde boþ slot yok veya aðýrlýk limitini doldurmuþ.");
		}
		else hataMesaji(playerid, "Seçtiðiniz slotta eþya bulunmuyor.");
	}
	else hataMesaji(playerid, "Hatalý slot idi girdiniz.");
	return 1;
}


CMD:ciftliksat(playerid, params[])
{
	if(GetPVarInt(playerid,"oyuncuyayinda") == 1) return false;
	static oid,ucret, msj[250];
	if(sscanf(params, "ud", oid, ucret))
		return kullanimMesaji(playerid, "/ciftliksat [oyuncuid] [ucret]");
	if(!IsPlayerConnected(oid)) return hataMesaji(playerid, "Girilen oyuncu aktif deðil.");
	if(oid == playerid) return hataMesaji(playerid, "Kendine tarla satamazsýn.");
	if(!oyuncuData[oid][oGiris]) return hataMesaji(playerid, "Oyuncu giriþ yapmamýþ.");
	if(ucret < 1) return hataMesaji(playerid, "Ücret deðeri 1'den küçük olamaz.");
	if(oyuncuData[oid][oPara] < ucret) return hataMesaji(playerid, "Oyuncunun üzerinde yeterli miktarda para bulunmuyor.");
	if(!YakinlikKontrol(playerid, oid, 5.0)) return hataMesaji(playerid, "Belirttiðiniz oyuncuya yeterince yakýn deðilsiniz.");
	if(!IsPlayerInAnyDynamicArea(playerid) || oyuncuData[playerid][oCiftlik] == -1) return hataMesaji(playerid, "Bu komutu yanlýzca tarladayken kullanabilirsiniz.");
	new cid = oyuncuData[playerid][oCiftlik];
	if(CiftlikInfo[cid][cSahipID] == oyuncuData[playerid][oID])
	{
	SunucuMesaji(playerid, "%s adlý kiþiye çiftlik satma isteði gönderdiniz.", OyuncuIsim(oid));
	format(msj, sizeof(msj), "%s adlý kiþi size çiftliðini %d$ karþýlýðýnda satmak istiyor.\nGerçekten satýn almak istiyor musunuz?", OyuncuIsim(playerid), ucret);
	Dialog_Show(oid, ciftliksatis, DIALOG_STYLE_MSGBOX, "Çiftlik Satma", msj, "Kabul Et", "Iptal Et");
	SetPVarInt(oid, "ciftlikoyuncu", playerid),SetPVarInt(oid, "ciftlikucreti", ucret), SetPVarInt(oid, "ciftlikidsi", cid);
	}
	else hataMesaji(playerid, "Çiftliðin sahibi olmadýðýnýz için bu komutu kullanamazsýnýz.");
	return 1;
}



CMD:envanter(playerid, params[])
{
	if(GetPVarInt(playerid,"oyuncuyayinda") == 1) return false;
	if(oyuncuData[playerid][oCraft]) return hataMesaji(playerid, "Craft yaparken envanterinize eriþemezsiniz.");
	EnvanterGoster(playerid);
	return 1;
}

CMD:esyaal(playerid)
{
	if(GetPVarInt(playerid,"oyuncuyayinda") == 1) return false;
	new id = EsyaBul(playerid);
	if(id == -1) return hataMesaji(playerid, "Herhangi bir eþyaya yakýn deðilsiniz.");
	if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Araç içerisinde bu komutu kullanamazsýnýz.");
// if(OyuncuBirlikTuru(playerid) == BIRLIK_POLIS || OyuncuBirlikTuru(playerid) == BIRLIK_MEDIKAL || OyuncuBirlikTuru(playerid) == BIRLIK_DEVLET) && (BirakilanItemler[id][itemtip] == 99 || BirakilanItemler[id][itemtip] == 100 || BirakilanItemler[id][itemtip] == 101 || BirakilanItemler[id][itemtip] == 102)) return hataMesaji(playerid, "Oluþum türünüz bu seçeneði desteklemiyor.");
	new basaridurumu = ItemEkle(playerid, BirakilanItemler[id][itemtip], BirakilanItemler[id][itemmiktar]);
	if(basaridurumu == 1)
	{
		new query[100];
		format(query, sizeof(query), "** %s eðilir ve yerdeki %s adlý eþyayý kavrayarak alýr.", OyuncuIsim(playerid),ItemArray[ BirakilanItemler[id][itemtip] - 1 ][iisim]);
		ProxDetector(12, playerid, query, RENK_PEMBE);
		ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 1, 1, 0, 0, 1);
		BirakilanItemSil(id);
	}
	return 1;
}

CMD:canta(playerid, params[])
{
	if(GetPVarInt(playerid,"oyuncuyayinda") == 1) return false;
	OyuncuEnvanter(playerid, playerid);
	return 1;
}

CMD:olusum(playerid, params[])
{
	if(oyuncuData[playerid][oHapisSure][0] > 0) return hataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");

	static birlikid;
	birlikid = oyuncuData[playerid][oBirlik];
	if(birlikid == -1)
		return hataMesaji(playerid, "Bir birlik üyesi deðilsin.");

	if(BirlikBilgi[birlikid][oKanal] == 0 && BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikMaksRutbe] - 1 > oyuncuData[playerid][oBirlikRutbe] && oyuncuData[playerid][oAdmin] < 1)
		return hataMesaji(playerid, "Birlik kanalýn birlik yöneticileri tarafýndan kapatýlmýþ.");

	if(isnull(params))
		return kullanimMesaji(playerid, "/olusum [mesajýn]");

	BirlikMesaji(birlikid, RENK_OLUSUM, "[BIRLIK] %s %s: {FFFFFF}%s", OyuncuRutbeAdi(playerid), OyuncuIsim(playerid), params);
	return 1;
}

CMD:arutbeduzenle(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 4) return YetkinizYok(playerid);
	static oyuncuid, rutbe;
	if(sscanf(params, "ud", oyuncuid, rutbe)) return kullanimMesaji(playerid, "/arutbeduzenle [oyuncu id/isim] [rutbe]");
	if(!IsPlayerConnected(oyuncuid)) return hataMesaji(playerid, "Girilen oyuncu aktif deðil.");
	if(oyuncuid == playerid && oyuncuData[playerid][oAdmin] < 7 && !IsPlayerAdmin(playerid)) return hataMesaji(playerid, "Kendi rütbeni deðiþtiremezsin.");
	if(!oyuncuData[oyuncuid][oGiris]) return hataMesaji(playerid, "Oyuncu giriþ yapmamýþ.");
	if(oyuncuData[oyuncuid][oBirlik] < 0) return hataMesaji(playerid, "Oyuncu herhangi birlikte deðil.");
	new birlikid = oyuncuData[oyuncuid][oBirlik];
	if(BirlikBilgi[birlikid][birlikMaksRutbe] < rutbe || rutbe < 1) return hataMesaji(playerid, "Geçersiz rütbe.");

	oyuncuData[oyuncuid][oBirlikRutbe] = rutbe;
	OyuncuKaydet(oyuncuid);
	SunucuMesaji(playerid, "%s adlý oyuncunun rütbesini %s(%d) olarak deðiþtirdin.", OyuncuIsim(oyuncuid), OyuncuRutbeAdi(oyuncuid), rutbe);
	SunucuMesaji(oyuncuid, "%s adlý yönetici tarafýndan rütben %s(%d) olarak deðiþtirildi.", oyuncuData[playerid][oAdminNick], OyuncuRutbeAdi(oyuncuid), rutbe);
	return 1;
}

CMD:birlikler(playerid, params[])
{
	if(!oyuncuData[playerid][oAdmin] && !oyuncuData[playerid][oHelper]) return YetkinizYok(playerid);

	static mesaj[512 * MAKSIMUM_BIRLIK];
	mesaj[0] = 0;
	for (new i = 0; i != MAKSIMUM_BIRLIK; i ++) if(BirlikBilgi[i][birlikKullanimda] == true)
	{
		format(mesaj, sizeof(mesaj), "%s{FFFFFF}SQL ID: %d | Normal ID: %d | Ad: %s | Tür: %s | Level: %d\n", mesaj, BirlikBilgi[i][birlikID], i, BirlikBilgi[i][birlikAd], birlikturadi(i), BirlikBilgi[i][birlikLevel]);
	}
	DialogGoster(playerid, 0, DIALOG_STYLE_MSGBOX, "> Birlikler", mesaj, "Kapat", "");
	return 1;
}

CMD:birlik(playerid, params[])
{
	if(!oyuncuData[playerid][oGiris]) return hataMesaji(playerid, "Bu komutu kullanmak için giriþ yapmalýsýn.");
	if(oyuncuData[playerid][oHapisSure][0] > 0) return hataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oBirlik] == -1) return hataMesaji(playerid, "Birlik üyesi deðilsin.");

	new string[300];
	strcat(string, "{FFFFFF}Iþlev\t{FFFFFF}#\n");
	format(string, sizeof(string), "%s{FFFFFF}Birlik Bilgisi\n", string);
	format(string, sizeof(string), "%s{CDCDCD}Birlik Üyeleri\t%d\n", string);
	format(string, sizeof(string), "%s{FFFFFF}Birlik Kanalý\t%s\n", string, birlikodurum(oyuncuData[playerid][oBirlik]));
	format(string, sizeof(string), "%s{CDCDCD}Birliðe Davet Et\n", string);
	format(string, sizeof(string), "%s{FFFFFF}Rütbe Adý Düzenle\n", string);
	format(string, sizeof(string), "%s{CDCDCD}Birim Adý Düzenle\t{ff0000}PASIF\n", string);
	format(string, sizeof(string), "%s{CDCDCD}Birlik Duyuru Düzenle\n", string);
	format(string, sizeof(string), "%s{CDCDCD}Birlik Araçlarý\n", string);
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS)
	{
		format(string, sizeof(string), "%s{FF0000}Birlikten Ayrýl\n", string);
	}
	DialogGoster(playerid, DIALOG_S_BIRLIK, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFAA}Birlik Menüsü", string, "Seç", "Iptal");
	return 1;
}

CMD:ruhsatver(playerid, params[])
{
	if(GetPVarInt(playerid,"oyuncuyayinda") == 1) return false;
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS && OyuncuBirlikTuru(playerid) != BIRLIK_DEVLET) return hataMesaji(playerid, "Polis ya da devlet birliði üyesi deðilsin.");
	if(oyuncuData[playerid][oIsbasi] == false) return hataMesaji(playerid, "Ýþbaþýnda deðilsin.");
	if(oyuncuData[playerid][oHapisSure][0] > 0 || oyuncuData[playerid][oHapisSure][1] > 0) return hataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oDonduruldu] > 0) return hataMesaji(playerid, "Dondurulma etkisindeyken bu komutu kullanamazsýn.");
	if(BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikMaksRutbe] != oyuncuData[playerid][oBirlikRutbe]) return hataMesaji(playerid, "Bu komutu kullanmak için en yüksek rütbeye sahip olmalýsýn.");

	static oyuncuid;
	if(sscanf(params, "d", oyuncuid))
		return kullanimMesaji(playerid, "/ruhsatver [oyuncu id/isim]");

	if(!IsPlayerConnected(oyuncuid)) return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(!YakinlikKontrol(playerid, oyuncuid, 3.0)) return hataMesaji(playerid, "Girilen üyeye yakýn deðilsin.");
	if(oyuncuid == playerid) return hataMesaji(playerid, "Kendine ruhsat veremezsin.");
	if(oyuncuData[oyuncuid][oRuhsat] == 1) return hataMesaji(playerid, "Oyuncunun ruhsatý bulunuyor, tekrar ruhsat veremezsin.");

	oyuncuData[oyuncuid][oRuhsat] = 1;
	SunucuMesaji(playerid, "%s adlý kiþiye silah ruhsatý verdin.", OyuncuIsim(oyuncuid));
	SunucuMesaji(oyuncuid, "%s adlý devlet yetkilisi sana silah ruhsatý verdi.", OyuncuIsim(playerid));
	return 1;
}

CMD:ehliyet(playerid, params[])
{
	if(GetPVarInt(playerid,"oyuncuyayinda") == 1) return false;
	if(!IsPlayerInRangeOfPoint(playerid, 10.0, 2335.8347 ,1657.3992, 3040.9275))
		return hataMesaji(playerid, "Ehliyet alma noktasýnda deðilsin.");

	if(oyuncuData[playerid][oEhliyet] == true)
		return hataMesaji(playerid, "Zaten ehliyetin var, tekrar teste giremezsin.");

	if(oyuncuData[playerid][oEhliyetTesti] > 0)
		return hataMesaji(playerid, "Þu anda ehliyet testindesin bu komutu tekrar kullanamazsýn.");

	if(EHLIYET_UCRET > oyuncuData[playerid][oPara]) {
		hataMesaji(playerid, "Ehliyet testine girebilmek için %s miktarýnda paraya ihtiyacýn var.", NumaraFormati(EHLIYET_UCRET));
		return true;
	}

	SunucuMesaji(playerid, "Ehliyet testine baþladýn, dýþarýdaki araçlardan birine binip motoru çalýþtýrarak teste baþlayabilirsin.");
	oyuncuData[playerid][oEhliyetTesti] = 1;
	ParaEkle(playerid, -EHLIYET_UCRET);
	UyariMesaji(playerid, "Ehliyet testi için %s ödedin.", NumaraFormati(EHLIYET_UCRET));
	return 1;
}

	CMD:boombox(playerid, params[])
	{
		if(GetPVarInt(playerid,"oyuncuyayinda") == 1) return false;
		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu komut araçta kullanýlamaz.");
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT || oyuncuData[playerid][oGiris] == false) return hataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oDonduruldu] > 0) return hataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oHapisSure][0] > 0 || oyuncuData[playerid][oHapisSure][1] > 0) return hataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
		//if(oyuncuData[playerid][oAdminDurum]) return hataMesaji(playerid, "Yönetici iþbaþýndayken bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oMuzikKutusu] == 0) return hataMesaji(playerid, "Müzik kutun yok.");

		new menu[256];
		menu[0] = 0;
		if(!BoomboxBilgi[playerid][boomboxKullanimda]) strcat(menu, "Yerleþtir\n");
		else if(BoomboxBilgi[playerid][boomboxKullanimda]) strcat(menu, "Kaldýr\nURL Deðiþtir");
		DialogGoster(playerid, DIALOG_BOOMBOX, DIALOG_STYLE_TABLIST, "Boombox", menu, "Seç", "Kapat");
		return 1;
	}

	CMD:yboomboxkaldir(playerid, params[])
	{		
		if(oyuncuData[playerid][oAdmin] < 1) return YetkinizYok(playerid);

		foreach (new i : Player) if(BoomboxBilgi[i][boomboxKullanimda] && IsPlayerInRangeOfPoint(playerid, 3.0, BoomboxBilgi[i][boomboxPos][0], BoomboxBilgi[i][boomboxPos][1], BoomboxBilgi[i][boomboxPos][2])) {
			Boombox_Kaldir(i);

			SunucuMesaji(playerid, "%s adlý oyuncunun müzik kutusunu kaldýrdýn.", OyuncuIsim(i));
			return SunucuMesaji(i, "%s adlý yönetici müzik kutunu kaldýrdý.", oyuncuData[playerid][oAdminNick]);
		}
		hataMesaji(playerid, "Yakýnýnda müzik kutusu yok.");
		return 1;
	}

	CMD:kampatesi(playerid, params[])
	{
		if(GetPVarInt(playerid,"oyuncuyayinda") == 1) return false;
		if(oyuncuData[playerid][oHapisSure][0] > 0) return hataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
		static tip[24], Float:objex, Float:objey, Float:objez;
		if(sscanf(params, "s[24]", tip))
		{
			kullanimMesaji(playerid, "/kampatesi [isim]");
			SendClientMessage(playerid, RENK_SARI, "[ISIMLER]:{FFFFFF} kur, kaldir");
			return 1;
		}
		if(!strcmp(tip, "kur", true))
		{
			if(oyuncuData[playerid][oKampAtesi] == true)
				return hataMesaji(playerid, "Zaten kamp ateþi kurmuþsunuz.");

			if(oyuncuData[playerid][oOdun] < 1 || oyuncuData[playerid][oCakmak] == false)
				return hataMesaji(playerid, "Odununuz ya da odunu yakabileceðin bir materyalin yok.");

			if(GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
				return hataMesaji(playerid, "Interior ve farklý sanal dünyalara kamp ateþi kurulamaz.");

			GetPlayerPos(playerid, oyuncuData[playerid][oPos][0], oyuncuData[playerid][oPos][1], oyuncuData[playerid][oPos][2]);
			GetPlayerFacingAngle(playerid, oyuncuData[playerid][oPos][3]);
			oyuncuData[playerid][oKampAtesiObje][0] = CreateDynamicObject(841, oyuncuData[playerid][oPos][0], oyuncuData[playerid][oPos][1], oyuncuData[playerid][oPos][2]-1, 0.000, 0.000, oyuncuData[playerid][oPos][3]);
			oyuncuData[playerid][oKampAtesiObje][1] = CreateDynamicObject(18688, oyuncuData[playerid][oPos][0], oyuncuData[playerid][oPos][1], oyuncuData[playerid][oPos][2]-2.3, 0.000, 0.000, oyuncuData[playerid][oPos][3]);
			oyuncuData[playerid][oKampAtesi] = true;
			oyuncuData[playerid][oOdun]--;
			if(oyuncuData[playerid][oKibrit] > 0) {
				oyuncuData[playerid][oKibrit]--;
			}
			SunucuMesaji(playerid, "Kamp ateþi yerleþtirdin.");
			return 1;
		}
		else if(!strcmp(tip, "kaldir", true))
		{
			if(oyuncuData[playerid][oKampAtesi] == false)
				return hataMesaji(playerid, "Kamp ateþi yerleþtirmemiþsin.");

			GetDynamicObjectPos(oyuncuData[playerid][oKampAtesiObje][0], objex, objey, objez);
			if(!IsPlayerInRangeOfPoint(playerid, 2.5, objex, objey, objez))
				return hataMesaji(playerid, "Kamp ateþine yakýn deðilsin.");

			DestroyDynamicObject(oyuncuData[playerid][oKampAtesiObje][0]);
			DestroyDynamicObject(oyuncuData[playerid][oKampAtesiObje][1]);
			oyuncuData[playerid][oKampAtesi] = false;
			SunucuMesaji(playerid, "Kamp ateþi baþarýyla kaldýrýldý.");
			return 1;
		}
		return 1;
	}

CMD:sigara(playerid,params[])
{
	SunucuMesaji(playerid, "Sigara içmek için /envanter komutunu kullanýn.");
	return 1;
}

CMD:havaalanikapi(playerid, params[])
{
	if(oyuncuData[playerid][oBirlik] == -1) return hataMesaji(playerid, "Birliðin yok!");
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS && OyuncuBirlikTuru(playerid) != BIRLIK_DEVLET) return hataMesaji(playerid, "Bu kapýyý açmak için yetkin yok.");
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1961.7814, -2189.9543, 13.5469)) return hataMesaji(playerid, "Havaalanýna yakýn deðilsin.");
	if(oyuncuData[playerid][oHapisSure][0] > 0) return hataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");

	if(hdurum) {
		hdurum = false;
		MoveDynamicObject(HavaAlaniKapi[0], 1964.48792, -2189.76563, 13.55250, 3.0);
		MoveDynamicObject(HavaAlaniKapi[1], 1958.99146, -2189.76563, 13.55250, 3.0);
		for (new i = 0; i != MAKSIMUM_BIRLIK; i ++) if(BirlikBilgi[i][birlikTur] == BIRLIK_POLIS || BirlikBilgi[i][birlikTur] == BIRLIK_DEVLET)
			BirlikMesaji(i, RENK_TELSIZ, "TELSIZ: %s hava alaný kapýlarýný kapattý.", OyuncuIsim(playerid));
	}
	else if(!hdurum) {
		hdurum = true;
		MoveDynamicObject(HavaAlaniKapi[0], 1969.00000, -2189.76563, 13.55250, 3.0);
		MoveDynamicObject(HavaAlaniKapi[1], 1954.00000, -2189.76563, 13.55250, 3.0);
		for (new i = 0; i != MAKSIMUM_BIRLIK; i ++) if(BirlikBilgi[i][birlikTur] == BIRLIK_POLIS || BirlikBilgi[i][birlikTur] == BIRLIK_DEVLET)
			BirlikMesaji(i, RENK_TELSIZ, "TELSIZ: %s hava alaný kapýlarýný açtý.", OyuncuIsim(playerid));
	}
	return 1;
}

stock DestekGuncelle(playerid)
{
	if(oyuncuData[playerid][oDestek] == true) {
		foreach(new i : Player)
		{
			if(OyuncuBirlikTuru(i) == BIRLIK_MEDIKAL)
			{
				SetPlayerMarkerForPlayer(i, playerid, 0xFF0000AA);
				//printf("a");
			}
			if(OyuncuBirlikTuru(i) == BIRLIK_POLIS)
			{
				SetPlayerMarkerForPlayer(i, playerid, 0xFF0000AA);
				//printf("b");
			}
		}
	}
	return 1;
}

CMD:destek(playerid, params[])
{
	if(GetPVarInt(playerid,"oyuncuyayinda") == 1) return false;
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return hataMesaji(playerid, "Polis deðilsin.");
	if(oyuncuData[playerid][oHapisSure][0] > 0) return hataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");

	if(oyuncuData[playerid][oDestek] == false) {
		oyuncuData[playerid][oDestek] = true;
		GetPlayerPos(playerid, oyuncuData[playerid][oPos][0], oyuncuData[playerid][oPos][1], oyuncuData[playerid][oPos][2]);
		oyuncuData[playerid][oEskiRenk] = GetPlayerColor(playerid);
		BirlikMesaji(oyuncuData[playerid][oBirlik], RENK_TELSIZ, "[VCPD OPERATOR] %s bulunduðu konuma destek istiyor, çaðrýya yönelin.", OyuncuIsim(playerid));
	}
	else if(oyuncuData[playerid][oDestek] == true) {
		oyuncuData[playerid][oDestek] = false;
		foreach(new i : Player) if(OyuncuBirlikTuru(i) == BIRLIK_POLIS && oyuncuData[playerid][oIsbasi] == true)
		{
			SetPlayerMarkerForPlayer(i, playerid, 0x8D8DFFFF);
		}
		BirlikMesaji(oyuncuData[playerid][oBirlik], RENK_TELSIZ, "[VCPD OPERATOR] %s destek çaðrýsýný iptal etti. Olaðan devriyenize devam edin.", OyuncuIsim(playerid));
	}
	return 1;
}

CMD:fddestek(playerid, params[])
{
	if(GetPVarInt(playerid,"oyuncuyayinda") == 1) return false;
	if(OyuncuBirlikTuru(playerid) != BIRLIK_MEDIKAL) return hataMesaji(playerid, "FD birliðinde deðilsin.");
	if(oyuncuData[playerid][oHapisSure][0] > 0) return hataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");

	if(oyuncuData[playerid][oDestek] == false) {
		oyuncuData[playerid][oDestek] = true;
		GetPlayerPos(playerid, oyuncuData[playerid][oPos][0], oyuncuData[playerid][oPos][1], oyuncuData[playerid][oPos][2]);
		oyuncuData[playerid][oEskiRenk] = GetPlayerColor(playerid);
		BirlikMesaji(oyuncuData[playerid][oBirlik], RENK_TELSIZ, "[ASGH OPERATOR] %s bulunduðu konuma destek istiyor, çaðrýya yönelin.", OyuncuIsim(playerid));
	}
	else if(oyuncuData[playerid][oDestek] == true) {
		oyuncuData[playerid][oDestek] = false;
		foreach(new i : Player) if(OyuncuBirlikTuru(i) == BIRLIK_MEDIKAL)
		{
			SetPlayerMarkerForPlayer(i, playerid, oyuncuData[playerid][oEskiRenk]);
		}
		BirlikMesaji(oyuncuData[playerid][oBirlik], RENK_TELSIZ, "[ASGH OPERATOR] %s destek çaðrýsýný iptal etti.", OyuncuIsim(playerid));
	}
	return 1;
}

CMD:kapikir(playerid, params[])
{
	if(GetPVarInt(playerid,"oyuncuyayinda") == 1) return false;
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return hataMesaji(playerid, "Polis deðilsin.");
	if(oyuncuData[playerid][oHapisSure][0] > 0) return hataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	static id = -1;
	if((id = Ev_Yakin(playerid)) != -1)
	{
		if(EvBilgi[id][evDurum] == 1)
			return hataMesaji(playerid, "Bu evin kapýlarý zaten açýk.");

		if(EvBilgi[id][evDurum] == 3)
			return hataMesaji(playerid, "Bakýmdaki evin kapýsý kýrýlamaz.");

		ApplyAnimation(playerid, "POLICE", "Door_Kick", 4.0, 0, 0, 0, 0, 0);
		cmd(playerid, 1, "gerilir ve evin kapýsýna taktiksel bir tekme vurur.");
		SetTimerEx("KapiKir_Ev", 1500, false, "dd", playerid, id);
	}
	else if((id = Isyeri_Yakin(playerid)) != -1)
	{
		if(IsyeriBilgi[id][isyeriDurum] == 1)
			return hataMesaji(playerid, "Bu iþyerinin kapýlarý zaten açýk.");

		if(IsyeriBilgi[id][isyeriDurum] == 3)
			return hataMesaji(playerid, "Bakýmdaki iþyerinin kapýsý kýrýlamaz.");

		ApplyAnimation(playerid, "POLICE", "Door_Kick", 4.0, 0, 0, 0, 0, 0);
		cmd(playerid, 1, "gerilir ve iþyerinin kapýsýna taktiksel bir tekme vurur.");
		SetTimerEx("KapiKir_Isyeri", 1500, false, "dd", playerid, id);
	}
	else hataMesaji(playerid, "Herhangi bir iþyeri veya evin önünde deðilsin.");
	return 1;
}

CMD:asansor(playerid, params[])
{
	if(GetPVarInt(playerid,"oyuncuyayinda") == 1) return false;
	if(oyuncuData[playerid][oHapisSure][0] > 0) return hataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");

	if(IsPlayerInRangeOfPoint(playerid, 2.5, 1493.4991, -1791.1809, 2981.3540) || IsPlayerInRangeOfPoint(playerid, 2.5, 1482.5685, -1848.7686, 3645.6270) || IsPlayerInRangeOfPoint(playerid, 2.5, 1493.6021, -1786.3867, 2676.0129))
		DialogGoster(playerid, DIALOG_GOVASANSOR, DIALOG_STYLE_LIST, "> Asansör", "Lobi\nÝnsan Kaynaklarý\nYönetim Ofisi", "Tamam", "Kapat");

	else if(IsPlayerInRangeOfPoint(playerid, 2.5, 193.8061,1915.0837,529.9813) || IsPlayerInRangeOfPoint(playerid, 2.5, 1705.0577,946.5693,1129.9878) || IsPlayerInRangeOfPoint(playerid, 2.5, 1705.0577,946.5693,1129.9878))
		DialogGoster(playerid, DIALOG_PDASANSOR, DIALOG_STYLE_LIST, "> Asansör", "Lobi\nKodesler\n\nSorgu Odasý 1\nSorgu Odasý 2\nSorgu Odasý 3\nKat 2\nGaraj\nAlt Garaj\nÇatý", "Tamam", "Kapat");

	else if(IsPlayerInRangeOfPoint(playerid, 2.5, 1579.3479,-1677.8439,62.2155) || IsPlayerInRangeOfPoint(playerid, 2.5, 1570.0018,-1678.4226,25.1468) || IsPlayerInRangeOfPoint(playerid, 2.5, 2018.3427,1584.6659,6753.0479) || IsPlayerInRangeOfPoint(playerid, 2.5, 2268.0557,2448.6104,3.5313))
		DialogGoster(playerid, DIALOG_PDASANSOR, DIALOG_STYLE_LIST, "> Asansör", "Lobi\nKodesler\n\nSorgu Odasý 1\nSorgu Odasý 2\nSorgu Odasý 3\nKat 2\nGaraj\nAlt Garaj\nÇatý", "Tamam", "Kapat");

	else if(IsPlayerInRangeOfPoint(playerid, 2.5, 2268.0027,2449.0930,-7.1953) || IsPlayerInRangeOfPoint(playerid, 2.5, 2268.0027,2449.0930,-7.1953) || IsPlayerInRangeOfPoint(playerid, 2.5, 1570.3906,-1678.7834,25.1468) || IsPlayerInRangeOfPoint(playerid, 2.5, 1580.3241,-1670.0148,15.7561))
		DialogGoster(playerid, DIALOG_PDASANSOR, DIALOG_STYLE_LIST, "> Asansör", "Lobi\nKodesler\n\nSorgu Odasý 1\nSorgu Odasý 2\nSorgu Odasý 3\nKat 2\nGaraj\nAlt Garaj\nÇatý", "Tamam", "Kapat");

	else hataMesaji(playerid, "Asansöre yakýn deðilsin.");
return 1; // Pos eklenirse AsansorYakin stockuna da eklenecek.
}

CMD:pdpc(playerid)
{
	if(GetPVarInt(playerid,"oyuncuyayinda") == 1) return false;
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return hataMesaji(playerid, "Birlik türünüz polis deðil.");
	if(!IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Araçta deðilken bu komutu kullanamazsýn, PD binasýnda bakmak için '/veritabani'");
	if(aracbirlikturbul(GetPlayerVehicleID(playerid)) != BIRLIK_POLIS) return hataMesaji(playerid, "Bu araç VCPD'ye ait deðil.");
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 497 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 523) return hataMesaji(playerid, "Motorlarda ve helikopterlerde PDPC'yi kullanamazsýn.");
	if(oyuncuData[playerid][oHapisSure][0] > 0) return hataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	
    SelectTextDraw(playerid, 0xFF0000FF); MDC_Ekrani[playerid] = true;
    PlayerTextDrawShow(playerid, MDC[36][playerid]); PlayerTextDrawShow(playerid, MDC[47][playerid]);
	for(new i ; i <= 13; i++) PlayerTextDrawShow(playerid, MDC[i][playerid]);
	return 1;
}

CMD:veritabani(playerid)
{
    if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return hataMesaji(playerid, "Birlik türünüz polis deðil.");
    if(oyuncuData[playerid][oIsbasi] == false) return hataMesaji(playerid,"Ýþbaþý durumunda deðilken bu komutu kullanamazsýn.");
    if(oyuncuData[playerid][oHapisSure][0] > 0) return hataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
    if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");

    SelectTextDraw(playerid, 0xFF0000FF); MDC_Ekrani[playerid] = true;
    PlayerTextDrawShow(playerid, MDC[36][playerid]); PlayerTextDrawShow(playerid, MDC[47][playerid]);
    for(new i ; i <= 13; i++) PlayerTextDrawShow(playerid, MDC[i][playerid]);
    return 1;
}

CMD:araccek(playerid, params[])
{
	if(oyuncuData[playerid][oGiris] == false) return hataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS && (oyuncuData[playerid][oFirma] != -1 && FirmaInfo[oyuncuData[playerid][oFirma]][fAlan] != 4)) return hataMesaji(playerid, "Polis veya tamirci deðilsin.");
	if(!IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Araçta deðilsin.");
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 525) return hataMesaji(playerid, "Bu iþlemi sadece Tow Truck model araçlarda yapabilirsin.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return hataMesaji(playerid, "Sürücü koltuðunda olmalýsýn.");

	if(GetVehicleFromBehind(GetPlayerVehicleID(playerid)) == INVALID_VEHICLE_ID) return hataMesaji(playerid, "Yakýnýnda çekilebilecek araç yok.");
	new aracid = GetVehicleFromBehind(GetPlayerVehicleID(playerid));
	AttachTrailerToVehicle(aracid, GetPlayerVehicleID(playerid));
	return 1;
}

CMD:aracbirak(playerid, params[])
{
	if(oyuncuData[playerid][oGiris] == false) return hataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return hataMesaji(playerid, "Polis deðilsin.");
	if(oyuncuData[playerid][oIsbasi] == false) return hataMesaji(playerid,"Ýþbaþý durumunda deðilken bu komutu kullanamazsýn.");
	if(!IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Araçta deðilsin.");
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 525) return hataMesaji(playerid, "Bu iþlemi sadece Tow Truck model araçlarda yapabilirsin.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return hataMesaji(playerid, "Sürücü koltuðunda olmalýsýn.");

	new trailerid = GetVehicleTrailer(GetPlayerVehicleID(playerid));
	if(!trailerid) return hataMesaji(playerid, "Herhangi bir aracý çekmiyorsunuz.");

	DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
	return 1;
}

CMD:barikat(playerid, params[])
{
	if(GetPVarInt(playerid,"oyuncuyayinda") == 1) return false;
	if(oyuncuData[playerid][oGiris] == false) return hataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS && OyuncuBirlikTuru(playerid) != BIRLIK_MEDIKAL) return hataMesaji(playerid, "Polis deðilsin.");
	if(oyuncuData[playerid][oIsbasi] == false) return hataMesaji(playerid,"Ýþbaþý durumunda deðilken bu komutu kullanamazsýn.");
	if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Araçtayken barikat yaratamazsýn.");
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK) return hataMesaji(playerid, "Eðilirken barikat ekleyemezsin.");
	if(GetPVarInt(playerid, "anim") != 0) return hataMesaji(playerid, "Anim kullanýrken barikat ekleyemezsin.");
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING || oyuncuData[playerid][oIzlenen] != INVALID_PLAYER_ID) return hataMesaji(playerid, "Ýzleme yaparken barikat yaratamazsýn.");

	ShowModelSelectionMenu(playerid, barikatsec, "Barikatlar");
	return true;
}

CMD:barikattemizle(playerid, params[])
{
	if(oyuncuData[playerid][oGiris] == false) return hataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS && OyuncuBirlikTuru(playerid) != BIRLIK_MEDIKAL) return hataMesaji(playerid, "Polis deðilsin.");
	if(oyuncuData[playerid][oIsbasi] == false) return hataMesaji(playerid,"Ýþbaþý durumunda deðilken bu komutu kullanamazsýn.");
	if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Araçtayken barikat kaldýramazsýn.");
	for(new i = 0; i < MAKSIMUM_BARIKAT; i++)
	{
		Barikat_Kaldir(i);
	}
	SunucuMesaji(playerid, "Tüm barikatlar kaldýrýldý.");
	return 1;
}

CMD:barikatkaldir(playerid, params[])
{
	if(GetPVarInt(playerid,"oyuncuyayinda") == 1) return false;
	if(oyuncuData[playerid][oGiris] == false) return hataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS && OyuncuBirlikTuru(playerid) != BIRLIK_MEDIKAL) return hataMesaji(playerid, "Polis deðilsin.");
	if(oyuncuData[playerid][oIsbasi] == false) return hataMesaji(playerid,"Ýþbaþý durumunda deðilken bu komutu kullanamazsýn.");
	if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Araçtayken barikat kaldýramazsýn.");
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK) return hataMesaji(playerid, "Eðilirken barikat kaldýramazsýn.");
	if(GetPVarInt(playerid, "anim") != 0) return hataMesaji(playerid, "Anim kullanýrken barikat kaldýramazsýn.");
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING || oyuncuData[playerid][oIzlenen] != INVALID_PLAYER_ID) return hataMesaji(playerid, "Ýzleme yaparken barikat kaldýramazsýn.");

	static id;
	if(sscanf(params, "d", id)) return kullanimMesaji(playerid, "/barikatkaldir [id]");
	if((id < 0 || id >= MAKSIMUM_BARIKAT) || !BarikatBilgi[id][barikatKullanimda]) return hataMesaji(playerid, "Geçersiz barikat!");

	if(!IsPlayerInRangeOfPoint(playerid, 2.5, BarikatBilgi[id][barikatPos][0], BarikatBilgi[id][barikatPos][1], BarikatBilgi[id][barikatPos][2]))
		return hataMesaji(playerid, "Barikata yakýn deðilsin.");

	Barikat_Kaldir(id);
	SunucuMesaji(playerid, "Barikat kaldýrýldý. (ID: %d)", id);
	return true;
}

CMD:barikatduzenle(playerid, params[])
{
	if(GetPVarInt(playerid,"oyuncuyayinda") == 1) return false;
	if(oyuncuData[playerid][oGiris] == false) return hataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS && OyuncuBirlikTuru(playerid) != BIRLIK_MEDIKAL) return hataMesaji(playerid, "Polis deðilsin.");
	if(oyuncuData[playerid][oIsbasi] == false) return hataMesaji(playerid,"Ýþbaþý durumunda deðilken bu komutu kullanamazsýn.");
	if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Araçtayken barikat kaldýramazsýn.");
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK) return hataMesaji(playerid, "Eðilirken barikat kaldýramazsýn.");
	if(GetPVarInt(playerid, "anim") != 0) return hataMesaji(playerid, "Anim kullanýrken barikat kaldýramazsýn.");
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING || oyuncuData[playerid][oIzlenen] != INVALID_PLAYER_ID) return hataMesaji(playerid, "Ýzleme yaparken barikat kaldýramazsýn.");

	static id;
	if(sscanf(params, "d", id)) return kullanimMesaji(playerid, "/barikatduzenle [id]");
	if((id < 0 || id >= MAKSIMUM_BARIKAT) || !BarikatBilgi[id][barikatKullanimda]) return hataMesaji(playerid, "Geçersiz barikat!");

	if(!IsPlayerInRangeOfPoint(playerid, 2.5, BarikatBilgi[id][barikatPos][0], BarikatBilgi[id][barikatPos][1], BarikatBilgi[id][barikatPos][2]))
		return hataMesaji(playerid, "Barikata yakýn deðilsin.");

	EditDynamicObject(playerid, BarikatBilgi[id][barikatObje]);
	oyuncuData[playerid][oEditlenenBarikat] = id;
	SunucuMesaji(playerid, "Barikatý düzenliyorsunuz. (ID: %d)", id);
	return true;
}

CMD:elkoy(playerid, params[])
{
	if(GetPVarInt(playerid,"oyuncuyayinda") == 1) return false;
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return hataMesaji(playerid, "Polis deðilsin.");
	if(oyuncuData[playerid][oIsbasi] == false) return hataMesaji(playerid,"Ýþbaþý durumunda deðilken bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oDonduruldu] > 0) return hataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oHapisSure][0] > 0 || oyuncuData[playerid][oHapisSure][1] > 0) return hataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");

	static oyuncuid;
	if(sscanf(params, "u", oyuncuid)) return kullanimMesaji(playerid, "/elkoy [oyuncu id/isim]");
	if(!IsPlayerConnected(oyuncuid)) return hataMesaji(playerid, "Girilen oyuncu oyunda deðil.");
	if(!YakinlikKontrol(playerid, oyuncuid, 5.0)) return hataMesaji(playerid, "Girilen oyuncuya yakýn deðilsin.");
	if(oyuncuData[oyuncuid][oHapisSure][0] > 0) return hataMesaji(playerid, "Oyuncu hapiste bu komutu üzerinde kullanamazsýn.");
	if(oyuncuid == playerid) return hataMesaji(playerid, "Kendi eþyalarýna el koyamazsýn.");
	//if(oyuncuData[oyuncuid][oAdminDurum]) return hataMesaji(playerid, "Ýþbaþýndaki yöneticilerin eþyalarýna el koyamazsýn.");

	new dialog[256], silahid, mermi, sayi, esya, sopasayi = 0;
	dialog[0] = 0, sayi = 0, esya = 0;
	format(dialog, sizeof(dialog), "Eþya\tTür\n");
	if(oyuncuData[oyuncuid][oEhliyet] == true) strcat(dialog, "Ehliyet\tBelge\n"), esya++;
	if(oyuncuData[oyuncuid][oRuhsat] == 1) strcat(dialog, "Ruhsat\tBelge\n"), esya++;
	for (new i = 0; i < 13; i ++)
	{
		GetPlayerWeaponData(oyuncuid, i, silahid, mermi);
		if(silahid == WEAPON_BAT) sopasayi++;
	}
	if(sopasayi > 0) strcat(dialog, "Sopa\tSilah\n"), sayi++;
	if(oyuncuData[oyuncuid][oUyusturucu][2] > 0) strcat(dialog, "Yüksek Kalite Uyuþturucu\tEþya\n"), esya++;
	if(oyuncuData[oyuncuid][oUyusturucu][1] > 0) strcat(dialog, "Orta Kalite Uyuþturucu\tEþya\n"), esya++;
	if(oyuncuData[oyuncuid][oUyusturucu][0] > 0) strcat(dialog, "Düþük Kalite Uyuþturucu\tEþya\n"), esya++;
	if(oyuncuData[oyuncuid][oTohum] > 0) strcat(dialog, "Tohum\tEþya\n"), esya++;
	if(esya < 1) return hataMesaji(playerid, "Oyuncunun üzerinde el konulabilecek bir eþya bulunmuyor.");

	ElKoy[playerid] = oyuncuid;
	DialogGoster(playerid, DIALOG_ELKOY, DIALOG_STYLE_TABLIST_HEADERS, OyuncuIsim(oyuncuid), dialog, "Seç", "Kapat");
	return 1;
}

CMD:pdgps(playerid, params[])
{
	if(GetPVarInt(playerid,"oyuncuyayinda") == 1) return false;
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return hataMesaji(playerid, "Polis deðilsin.");
	if(oyuncuData[playerid][oIsbasi] == false) return hataMesaji(playerid,"Ýþbaþý durumunda deðilken bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oDonduruldu] > 0) return hataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oHapisSure][0] > 0 || oyuncuData[playerid][oHapisSure][1] > 0) return hataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2239.6357,2431.1926,3.2734)) return hataMesaji(playerid, "VCPD iþlem noktasýnda deðilsin.");

	switch(oyuncuData[playerid][oPDgps]) {
		case true: {
			if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu seçeneði araçtayken kapatamazsýn.");

			oyuncuData[playerid][oPDgps] = false;
			foreach(new i : Araclar) if(AracBilgi[i][aracBirlik] == BIRLIK_POLIS && OyuncuBirlikTuru(playerid) == BIRLIK_POLIS) {
				SetVehicleParamsForPlayer(AracBilgi[i][aracYarat], playerid, 0, 0);
			}
			new eski;
			eski = GetPlayerVirtualWorld(playerid);
			SetPlayerVirtualWorld(playerid, eski-500);
			SetTimerEx("eskivirtual", 300, false, "id", playerid, eski);
			SunucuMesaji(playerid, "VCPD GPS sistemi kapatýldý.");
		}
		case false: {
			oyuncuData[playerid][oPDgps] = true;
			foreach(new i : Araclar) if(AracBilgi[i][aracBirlik] == BIRLIK_POLIS && OyuncuBirlikTuru(playerid) == BIRLIK_POLIS) {
				SetVehicleParamsForPlayer(AracBilgi[i][aracYarat], playerid, 1, 0);
			}
			SunucuMesaji(playerid, "VCPD GPS sistemi açýldý.");
		}
	}
	return 1;
}

CMD:taser(playerid, params[])
{
	if(GetPVarInt(playerid,"oyuncuyayinda") == 1) return false;
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return hataMesaji(playerid, "Polis deðilsin.");
	if(oyuncuData[playerid][oIsbasi] == false) return hataMesaji(playerid,"Ýþbaþý durumunda deðilken bu komutu kullanamazsýn.");
	if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu komut araçta kullanýlamaz.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT || oyuncuData[playerid][oGiris] == false) return hataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oDonduruldu] > 0) return hataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oHapisSure][0] > 0 || oyuncuData[playerid][oHapisSure][1] > 0) return hataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");

	if(!oyuncuData[playerid][oTaser])
	{
		oyuncuData[playerid][oTaser] = true;
		GetPlayerWeaponData(playerid, 2, oyuncuData[playerid][oSilah][2], oyuncuData[playerid][oMermi][2]);

		GivePlayerWeapon(playerid, 23, 99999);
		cmd(playerid, 1, "sað elini teçhizat kemerine götürür ve taser silahýný kavrar.");
	}
	else
	{
		oyuncuData[playerid][oTaser] = false;

		SetPlayerArmedWeapon(playerid, 23);
		GivePlayerWeapon(playerid, 24, 500);
		cmd(playerid, 1, "sað elindeki taser silahýný teçhizat kemerine býrakýr.");
	}
	return 1;
}

CMD:beanbag(playerid, params[])
{
	if(GetPVarInt(playerid,"oyuncuyayinda") == 1) return false;
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return hataMesaji(playerid, "Polis deðilsin.");
	if(oyuncuData[playerid][oIsbasi] == false) return hataMesaji(playerid,"Ýþbaþý durumunda deðilken bu komutu kullanamazsýn.");
	if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu komut araçta kullanýlamaz.");
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT || oyuncuData[playerid][oGiris] == false) return hataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oDonduruldu] > 0) return hataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oHapisSure][0] > 0 || oyuncuData[playerid][oHapisSure][1] > 0) return hataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(!oyuncuData[playerid][oBeanbag])
	{
		oyuncuData[playerid][oBeanbag] = true;
		GetPlayerWeaponData(playerid, 3, oyuncuData[playerid][oSilah][3], oyuncuData[playerid][oMermi][3]);
		GivePlayerWeapon(playerid, 25, 99999);
		cmd(playerid, 1, "sýrtýndaki beanbag tüfeðini iki eliyle alýr.");
	}
	else
	{
		new silahid[13], mermi[13];
		for(new i = 0; i < 13; i++)
		{
			GetPlayerWeaponData(playerid, i, silahid[i], mermi[i]);
		}
		ResetPlayerWeapons(playerid);
		for(new i = 0; i < 13; i++)
		{
			if(silahid[i] == 25 || mermi[i] == 0) continue;
			GivePlayerWeapon(playerid, silahid[i], mermi[i]);
		}
		oyuncuData[playerid][oBeanbag] = false;
		cmd(playerid, 1, "iki eliyle tuttuðu beanbag tüfeðini sýrtýna asar.");
	}
	return 1;
}

CMD:firmaliderayarla(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 8)
		return YetkinizYok(playerid);

	static oyuncu, id;
	if(sscanf(params, "ud", oyuncu, id))
		return kullanimMesaji(playerid, "/firmaliderayarla [oyuncu id/isim] [firma id] (firmadan atmak için -1 kullanýn)");

	if(!IsPlayerConnected(oyuncu))
		return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");

	if((id < -1 || id >= MAX_FIRMA) || (id != -1 && !Iter_Contains(Firma,id)))
		return hataMesaji(playerid, "Geçersiz firma.");

	if(id == -1)
	{
		oyuncuData[oyuncu][oFirma] = -1;
		oyuncuData[oyuncu][oFirmarutbe] = 0;
		SunucuMesaji(playerid, "%s adlý kiþiyi firmadan attýn.", OyuncuIsim(oyuncu));
		SunucuMesaji(oyuncu, "%s tarafýndan firmadan atýldýn.", oyuncuData[playerid][oAdminNick]);
	}
	else
	{
		oyuncuData[oyuncu][oFirma] = id;
		oyuncuData[oyuncu][oFirmarutbe] = 10;
		SunucuMesaji(playerid, "%s adlý kiþiyi \"%s\" adlý firmanýn lideri yaptýn.", OyuncuIsim(oyuncu), FirmaInfo[id][fIsim]);
		SunucuMesaji(oyuncu, "%s adlý yönetici tarafýndan \"%s\" firma lideri yapýldýn.", oyuncuData[playerid][oAdminNick], FirmaInfo[id][fIsim]);
	}
	return 1;
}

CMD:liderayarla(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 4)
		return YetkinizYok(playerid);

	static oyuncu, id;
	if(sscanf(params, "ud", oyuncu, id))
		return kullanimMesaji(playerid, "/liderayarla [oyuncu id/isim] [birlik id] (birlikten atmak için -1 kullanýn)");

	if(!IsPlayerConnected(oyuncu))
		return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");

	if((id < -1 || id >= MAKSIMUM_BIRLIK) || (id != -1 && !BirlikBilgi[id][birlikKullanimda]))
		return hataMesaji(playerid, "Geçersiz birlik.");

	if(id == -1)
	{
		BirlikSifirla(oyuncu);
		SunucuMesaji(playerid, "%s adlý kiþiyi birliðinden attýn.", OyuncuIsim(oyuncu));
		SunucuMesaji(oyuncu, "%s tarafýndan birlikten atýldýn.", oyuncuData[playerid][oAdminNick]);
	}
	else
	{
		BirlikAyarla(oyuncu, id);
		SunucuMesaji(playerid, "%s adlý kiþiyi \"%s\" adlý birlik lideri yaptýn.", OyuncuIsim(oyuncu), BirlikBilgi[id][birlikAd]);
		SunucuMesaji(oyuncu, "%s adlý yönetici tarafýndan \"%s\" birlik lideri yapýldýn.", oyuncuData[playerid][oAdminNick], BirlikBilgi[id][birlikAd]);
		OyuncuKaydet(oyuncu);
	}
	return 1;
}

CMD:canlandir(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 1)
		return YetkinizYok(playerid);

	static oyuncuid;
	if(sscanf(params, "u", oyuncuid))
		return kullanimMesaji(playerid, "/canlandir [oyuncu id/isim]");

	if(!IsPlayerConnected(oyuncuid))
		return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");

	if(oyuncuData[oyuncuid][oYaraliSure] < 2)
		return hataMesaji(playerid, "Girilen oyuncu yaralý deðil.");

	oyuncuData[oyuncuid][oYaraliSure] = 1;
	SunucuMesaji(playerid, "%s adlý kiþiyi yaralý durumdan çýkardýn.", OyuncuIsim(oyuncuid));
	SunucuMesaji(oyuncuid, "%s tarafýndan yaralý durumdan çýkarýldýn.", oyuncuData[playerid][oAdminNick]);
	return 1;
}

CMD:tedaviet(playerid, params[])
{
	if(OyuncuBirlikTuru(playerid) != BIRLIK_MEDIKAL && (oyuncuData[playerid][oFirma] < 0 || FirmaInfo[oyuncuData[playerid][oFirma]][fAlan] != 0)) return hataMesaji(playerid, "Bu komutu sadece Hastane firmasý çalýþanlarý kullanabilir.");
	static oyuncuid;
	if(sscanf(params, "u", oyuncuid))
		return kullanimMesaji(playerid, "/tedaviet [oyuncu id/isim]");

	if(!IsPlayerConnected(oyuncuid))
		return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");

	if(oyuncuData[oyuncuid][oYaraliSure] < 2)
		return hataMesaji(playerid, "Girilen oyuncu yaralý deðil.");

	if(oyuncuid == playerid)
		return hataMesaji(playerid, "Kendinizi tedavi edemezsiniz.");

	oyuncuData[oyuncuid][oYaraliSure] = 1;
	SunucuMesaji(playerid, "%s adlý kiþiyi tedavi ettin.", OyuncuIsim(oyuncuid));
	SunucuMesaji(oyuncuid, "%s tarafýndan tedavi edildin.", oyuncuData[playerid][oAdminNick]);
	return 1;
}

CMD:duyuruduzenle(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 6 && !IsPlayerAdmin(playerid))
		return YetkinizYok(playerid);

	if(isnull(params))
		return kullanimMesaji(playerid, "/duyuruduzenle [yeni duyuru - Yok kaldirir]");

	dini_Set(SUNUCU_DOSYA, "DUYURU", params);
	if(!strcmp(params, "Yok", true)) return YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s adlý yönetici duyuruyu kaldýrdý.", oyuncuData[playerid][oAdminNick]);

	foreach(new i : Player) if(oyuncuData[i][oGiris] == true) DuyuruMesaji(i, "%s", dini_Get(SUNUCU_DOSYA, "DUYURU"));
	YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s adlý yönetici duyuruyu deðiþtirdi.", oyuncuData[playerid][oAdminNick]);
	return 1;
}

CMD:duyuru(playerid, params[])
{
	if(dini_Exists(SUNUCU_DOSYA)) {
		if(!strcmp(dini_Get(SUNUCU_DOSYA, "DUYURU"), "Yok", true)) return hataMesaji(playerid, "Duyuru yok.");
		DuyuruMesaji(playerid, "%s", dini_Get(SUNUCU_DOSYA, "DUYURU"));
	}
	else {
		dini_Create(SUNUCU_DOSYA);
		dini_Set(SUNUCU_DOSYA, "DUYURU", SUNUCU_ADI);
		DuyuruMesaji(playerid, "%s", dini_Get(SUNUCU_DOSYA, "DUYURU"));
	}
	return 1;
}

CMD:havayidegistir(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 6) return YetkinizYok(playerid);

	static havaid;
	if(sscanf(params, "d", havaid))
		return kullanimMesaji(playerid, "/havayidegistir [hava id]");

	SetWeather(havaid);
	YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s adlý yönetici sunucu havasýný deðiþtirdi.", oyuncuData[playerid][oAdminNick]);
	return 1;
}

CMD:birlikduzenle(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 5) return YetkinizYok(playerid);

	static id, tur[24], mesaj[128];
	if(sscanf(params, "ds[24]S()[128]", id, tur, mesaj))
	{
		kullanimMesaji(playerid, "/birlikduzenle [id] [isim]");
		SendClientMessage(playerid, RENK_SARI, "[ÝSÝMLER]:{FFFFFF} isim, maxrutbe, tip, dolap, onay, kurucu");
		return 1;
	}
	if((id < 0 || id >= MAKSIMUM_BIRLIK) || !BirlikBilgi[id][birlikKullanimda])
		return hataMesaji(playerid, "Geçersiz birlik!");

	if(!strcmp(tur, "isim", true))
	{
		static isim[32];

		if(sscanf(mesaj, "s[32]", isim))
			return kullanimMesaji(playerid, "/birlikduzenle [id] [isim] [yeni isim]");

		format(BirlikBilgi[id][birlikAd], 32, isim);
		Birlik_Yenile(id);
		Birlik_Kaydet(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s bir birliðin ismini deðiþtirdi. (BID: %d | \"%s\")", oyuncuData[playerid][oAdminNick], id, isim);
	}
	else if(!strcmp(tur, "maxrutbe", true))
	{
		static maxrutbe;

		if(sscanf(mesaj, "d", maxrutbe))
			return kullanimMesaji(playerid, "/birlikduzenle [id] [maxrutbe] [maximum rank]");

		if(maxrutbe < 1 || maxrutbe > 20)
			return hataMesaji(playerid, "Girilen rütbe en az 1, en fazla 20 olabilir!");

		BirlikBilgi[id][birlikMaksRutbe] = maxrutbe;

		Birlik_Kaydet(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s adlý yönetici bir birliðin maksimum rütbesini deðiþtirdi. (ID: %d | Deðer: %d)", oyuncuData[playerid][oAdminNick], id, maxrutbe);
	}
	else if(!strcmp(tur, "kurucu", true))
	{
		new kurucuid, sorgu[128];
		if(sscanf(mesaj, "d", kurucuid))
			return kullanimMesaji(playerid, "/birlikduzenle [id] kurucu [kurucu id]");

		if(!IsPlayerConnected(kurucuid)) return hataMesaji(playerid, "Kurucu olarak girdiðin kiþi oyunda deðil.");
		mysql_format(g_SQL, sorgu, sizeof sorgu, "UPDATE `birlikler` SET `birlikKurucu` = '%e' WHERE `birlikID` = '%d'", OyuncuIsim(kurucuid), BirlikBilgi[id][birlikID]);
		mysql_query(g_SQL, sorgu);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s adlý yönetici bir birliðin kurucusunu deðiþtirdi. (BID: %d | Kurucu: %s)", oyuncuData[playerid][oAdminNick], id, OyuncuIsim(kurucuid));
	}
	else if(!strcmp(tur, "tip", true))
	{
		static birliktipi;

		if(sscanf(mesaj, "d", birliktipi))
		{
			kullanimMesaji(playerid, "/birlikduzenle [id] [tip] [birlik türü]");
			SendClientMessage(playerid, RENK_SARI, "[TÜRLER]:{FFFFFF} 1: Polis | 2: Medikal | 3: Devlet | 4: Haber Ajansý | 5: Onaysýz Birlik | 6: Onaylý Birlik | 7: Baro");
			return 1;
		}
		if(birliktipi < 1 || birliktipi > 7)
			return hataMesaji(playerid, "Hatalý birlik türü!");

		BirlikBilgi[id][birlikTur] = birliktipi;
		if(birliktipi == BIRLIK_ONAYSIZ || birliktipi == BIRLIK_ONAYLI) {
			BirlikBilgi[id][bDolapPos][0] = 0.0;
			BirlikBilgi[id][bDolapPos][1] = 0.0;
			BirlikBilgi[id][bDolapPos][2] = 0.0;
			BirlikBilgi[id][bDolapInt] = 0;
			BirlikBilgi[id][bDolapVW] = 0;
			Birlik_Yenile(id);
		}

		Birlik_Kaydet(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s adlý yönetici bir birliðin türünü deðiþtirdi. (BID: %d | Tür: %s)", oyuncuData[playerid][oAdminNick], id, birlikturadi(id));
	}
	else if(!strcmp(tur, "dolap", true))
	{
		if(BirlikBilgi[id][birlikTur] == BIRLIK_ONAYSIZ || BirlikBilgi[id][birlikTur] == BIRLIK_ONAYLI)
			return hataMesaji(playerid, "Bu birlik türlerinin dolabý olamaz.");

		GetPlayerPos(playerid, BirlikBilgi[id][bDolapPos][0], BirlikBilgi[id][bDolapPos][1], BirlikBilgi[id][bDolapPos][2]);
		BirlikBilgi[id][bDolapInt] = GetPlayerInterior(playerid);
		BirlikBilgi[id][bDolapVW] = GetPlayerVirtualWorld(playerid);
		DestroyDynamicPickup(BirlikBilgi[id][bDolapPickup]);
		Birlik_Yenile(id);
		Birlik_Kaydet(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s adlý yönetici bir birliðin dolap yerini deðiþtirdi. (BID: %d)", oyuncuData[playerid][oAdminNick], id);
	}
	else if(!strcmp(tur, "onay", true))
	{
		new onay;
		if(sscanf(mesaj, "d", onay)) return kullanimMesaji(playerid, "/birlikduzenle [id] onay [onay] - Onay ID'leri: 1>Onaysýz | 2>Hood Onaylý | 3>Onaylý");
		if(onay < 1 || onay > 3) return hataMesaji(playerid, "Geçersiz onay durumu girdin.");
		switch(onay)
		{
			case 1:
			{
				BirlikBilgi[id][birlikOnay] = 1;
				YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s adlý yönetici bir birliði onaysýz hale getirdi. (BID: %d)", oyuncuData[playerid][oAdminNick], id);
			}
			case 2:
			{
				BirlikBilgi[id][birlikOnay] = 2;
				YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s adlý yönetici bir birliði hood onaylý hale getirdi. (BID: %d)", oyuncuData[playerid][oAdminNick], id);
			}
			case 3:
			{
				BirlikBilgi[id][birlikOnay] = 3;
				YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s adlý yönetici bir birliði onaylý hale getirdi. (BID: %d)", oyuncuData[playerid][oAdminNick], id);
			}
		}
		Birlik_Yenile(id);
		Birlik_Kaydet(id);
	}
	return 1;
}

CMD:techizatizni(playerid, params[])
{
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return hataMesaji(playerid, "VCPD deðilsin.");
	if(oyuncuData[playerid][oBirlikRutbe] < 11) return hataMesaji(playerid, "Bu komut teðmen ve üzeri rütbeler tarafýndan kullanýlabilir.");

	switch(techizatizni) {
		case false: {
			techizatizni = true, SunucuMesaji(playerid, "Teçhizat izni herkese açýldý.");
			BirlikMesaji(oyuncuData[playerid][oBirlik], RENK_OLUSUM, "[BIRLIK] %s teçhizat iznini tüm birliðe açtý.", OyuncuIsim(playerid));
		}
		case true: {
			techizatizni = false, SunucuMesaji(playerid, "Teçhizat izni sadece rütbeye göre ayarlandý.");
			BirlikMesaji(oyuncuData[playerid][oBirlik], RENK_OLUSUM, "[BIRLIK] %s teçhizat iznini rütbeye göre ayarladý.", OyuncuIsim(playerid));
		}
	}
	return 1;
}

CMD:pdaksesuar(playerid, params[])
{
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return hataMesaji(playerid, "Bu komuttan yalnýzca polis birliði üyeleri yararlanabilir.");
	if(!OyuncuDolapYakin(playerid)) return hataMesaji(playerid, "Birlik dolabýna yakýn deðilsin.");
	new stringg[856],baslik[256], durum[128];
	strcat(stringg, "Eþya\tBölge\tDurum\n");
	for(new x;x<MAX_AKSESUAR;x++)
	{
		new name[64];
		format(name, sizeof(name), "-");

		for(new i;i<sizeof(HoldingObjectsAll);i++)
		{
			if(HoldingObjectsAll[i][holdingmodelid] == oyuncakData[playerid][x][ptModelID])
			{
				format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
			}
		}
		if(oyuncakData[playerid][x][ptRealID] != 0)
		{
			format(durum, sizeof(durum), "{FF0000}Dolu");
		}
		else format(durum, sizeof(durum), "{80FF00}Boþ");
		format(stringg, sizeof(stringg), "%s%s\t%s\t%s\n", stringg, name, KemikKisimlari[oyuncakData[playerid][x][ptBone]], durum);
	}
	format(baslik, sizeof(baslik), "{9CBBC5}Aksesuar:{FFFFFF} Slot Seç");
	DialogGoster(playerid, PDAKSESUARAL, DIALOG_STYLE_TABLIST_HEADERS, baslik, stringg, "Seç", "Iptal");
	return 1;
}

CMD:dolap(playerid, params[])
{
	if(GetPVarInt(playerid,"oyuncuyayinda") == 1) return false;
	new birlikid = oyuncuData[playerid][oBirlik];
	if(birlikid == -1) return hataMesaji(playerid, "Birlik üyesi deðilsin.");
	if(BirlikBilgi[birlikid][birlikTur] == BIRLIK_ONAYLI || BirlikBilgi[birlikid][birlikTur] == BIRLIK_ONAYSIZ) return hataMesaji(playerid, "Birlik türünüz bu komut için uyumlu deðil.");
	//if(oyuncuData[playerid][oAdminDurum]) return hataMesaji(playerid, "Yönetici iþbaþýndayken bu komutu kullanamazsýn.");
	if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu komut araçta kullanýlamaz.");
	if(!OyuncuDolapYakin(playerid)) return hataMesaji(playerid, "Birlik dolabýna yakýn deðilsin.");
	if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oHapisSure][0] > 0 || oyuncuData[playerid][oHapisSure][1] > 0) return hataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");

	switch(BirlikBilgi[birlikid][birlikTur]) {
		case BIRLIK_POLIS: DialogGoster(playerid, DIALOG_POLIS_DOLAP, DIALOG_STYLE_TABLIST, "> VCPD - Dolap", "Ýþbaþý\nEkipmanlar\nÇelik Yelek\nÜniformalar\nAðrý Kesici\nBeanbag Býrak\nSilah Sýfýrla\nAksesuarlar", "Seç", "Ýptal");
		case BIRLIK_DEVLET: DialogGoster(playerid, DIALOG_DEVLET_DOLAP, DIALOG_STYLE_TABLIST, "> Devlet - Dolap", "", "Seç", "Ýptal");
		case BIRLIK_HABERAJANSI: DialogGoster(playerid, DIALOG_HABERAJANSI_DOLAP, DIALOG_STYLE_TABLIST, "> Haber Ajansý - Dolap", "", "Seç", "Ýptal");
		case BIRLIK_MEDIKAL: DialogGoster(playerid, DIALOG_MEDIKAL_DOLAP, DIALOG_STYLE_TABLIST, "> ASGH - Dolap", "Ýþbaþý\nÜniformalar\nYangýn Söndürücü\nAksesuarlar", "Seç", "Ýptal");
		case BIRLIK_AVUKAT: Dialog_Show(playerid, DIALOG_AVUKAT_DOLAP, DIALOG_STYLE_TABLIST, "> Baro - Dolap", "Ýþbaþý", "Seç", "Ýptal");
	}
	return 1;
}

Dialog:DIALOG_AVUKAT_DOLAP(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0: 
			{
				if(oyuncuData[playerid][oIsbasi] == true) 
				{
					BirlikMesajiEx(BIRLIK_AVUKAT, RENK_TELSIZ, "**Baro personeli %s %s iþbaþýndan ayrýldý.", OyuncuRutbeAdi(playerid), OyuncuIsim(playerid));
					oyuncuData[playerid][oIsbasi] = false;
					SetPlayerColor(playerid, RENK_VARSAYILAN);
				}
				else
				{
					BirlikMesajiEx(BIRLIK_POLIS, RENK_TELSIZ, "** Baro personeli %s %s þimdi iþbaþýnda.", OyuncuRutbeAdi(playerid), OyuncuIsim(playerid));
					oyuncuData[playerid][oIsbasi] = true;
					SetPlayerColor(playerid, RENK_AVUKAT);
				}
			}
		}
	}
	return 1;
}

CMD:kimlikgoster(playerid, params[])
{
	if(GetPVarInt(playerid,"oyuncuyayinda") == 1) return false;
	if(oyuncuData[playerid][oHapisSure][0] > 0 || oyuncuData[playerid][oHapisSure][1] > 0) return hataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");

	static oyuncuid;
	if(sscanf(params, "u", oyuncuid))
		return kullanimMesaji(playerid, "/kimlikgoster [oyuncu id/isim]");

	if(!IsPlayerConnected(oyuncuid))
		return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");

	if(!YakinlikKontrol(playerid, oyuncuid, 5.0))
		return hataMesaji(playerid, "Girilen oyuncuya yakýn deðilsin.");

	SendClientMessage(oyuncuid, RENK_GRI, "-----------------------------------------------------------");
	SCM_Ex(oyuncuid, RENK_GRI, "Vatandaþlýk Numarasý: {FFE4C4}%d", oyuncuData[playerid][oVatandaslikNo]);
	SCM_Ex(oyuncuid, RENK_GRI, "Ad / Soyad: {FFE4C4}%s", OyuncuIsim(playerid));
	SCM_Ex(oyuncuid, RENK_GRI, "Doðum Tarihi: {FFE4C4}%s", oyuncuData[playerid][oDogumTarihi]);
	SCM_Ex(oyuncuid, RENK_GRI, "Uyruk / Köken: {FFE4C4}%s", oyuncuData[playerid][oDogumYeri]);
	SCM_Ex(oyuncuid, RENK_GRI, "Cinsiyet: {FFE4C4}%s", (oyuncuData[playerid][oCinsiyet] == 1) ? ("Erkek") : ("Kadýn"));
	SendClientMessage(oyuncuid, RENK_GRI, "-----------------------------------------------------------");
	static emote[128];
	if(oyuncuid != playerid) {
		format(emote, sizeof(emote), "kimliðini çýkartýr ve %s adlý kiþiye gösterir.", OyuncuIsim(oyuncuid));
		cmd(playerid, 1, emote);
	}
	else if(oyuncuid == playerid) cmd(playerid, 1, "kimliðini çýkarýr ve görebileceði hizada kaldýrýr.");
	return 1;
}

CMD:lisansgoster(playerid, params[])
{
	if(GetPVarInt(playerid,"oyuncuyayinda") == 1) return false;
	if(oyuncuData[playerid][oHapisSure][0] > 0 || oyuncuData[playerid][oHapisSure][1] > 0) return hataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");

	static oyuncuid, emote[128];
	if(sscanf(params, "u", oyuncuid))
		return kullanimMesaji(playerid, "/lisansgoster [oyuncu id/isim]");

	if(!IsPlayerConnected(oyuncuid))
		return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");

	if(!YakinlikKontrol(playerid, oyuncuid, 5.0))
		return hataMesaji(playerid, "Girilen oyuncuya yakýn deðilsin.");

	SendClientMessage(oyuncuid, RENK_GRI, "-----------------------------------------------------------");
	SCM_Ex(oyuncuid, RENK_GRI, "Ehliyet: %s", (oyuncuData[playerid][oEhliyet] == true) ? ("{33AA33}Mevcut") : ("{B70000}Yok"));
	SCM_Ex(oyuncuid, RENK_GRI, "Uçuþ Lisansý: %s", (oyuncuData[playerid][oUcusLisansi] == 1) ? ("{33AA33}Mevcut") : ("{B70000}Yok"));
	SCM_Ex(oyuncuid, RENK_GRI, "Silah Ruhsatý: %s", (oyuncuData[playerid][oRuhsat] == 0) ? ("{B70000}Yok") : ("{33AA33}Mevcut"));
	SendClientMessage(oyuncuid, RENK_GRI, "-----------------------------------------------------------");
	if(oyuncuid != playerid) {
		format(emote, sizeof(emote), "lisanslarýný çýkartýr ve %s adlý kiþiye gösterir.", OyuncuIsim(oyuncuid));
		cmd(playerid, 1, emote);
	}
	else if(oyuncuid == playerid) {
		cmd(playerid, 1, "lisanslarýný çýkarýr ve görebileceði hizada kaldýrýr.");
	}
	return 1;
}

CMD:rozetgoster(playerid, params[])
{
	if(GetPVarInt(playerid,"oyuncuyayinda") == 1) return false;
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS && OyuncuBirlikTuru(playerid) != BIRLIK_MEDIKAL && OyuncuBirlikTuru(playerid) != BIRLIK_DEVLET)
		return hataMesaji(playerid, "Bu komutu sadece polis, medikal ve devlet türüne sahip birlik üyeleri kullanabilir.");

	if(oyuncuData[playerid][oHapisSure][0] > 0 || oyuncuData[playerid][oHapisSure][1] > 0) return hataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");

	static oyuncuid, emote[128];
	if(sscanf(params, "u", oyuncuid))
		return kullanimMesaji(playerid, "/rozetgoster [oyuncu id/isim]");

	if(!IsPlayerConnected(oyuncuid))
		return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");

	if(!YakinlikKontrol(playerid, oyuncuid, 5.0))
		return hataMesaji(playerid, "Girilen oyuncuya yakýn deðilsin.");

	SendClientMessage(oyuncuid, RENK_GRI, "-----------------------------------------------------------");
	SCM_Ex(oyuncuid, RENK_GRI, "Ad / Soyad: {FFE4C4}%s", OyuncuIsim(playerid));
	SCM_Ex(oyuncuid, RENK_GRI, "Baðlý Olduðu Kurum: {FFE4C4}%s", BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikAd]);
	SCM_Ex(oyuncuid, RENK_GRI, "Rütbe: {FFE4C4}%s", OyuncuRutbeAdi(playerid));
	SendClientMessage(oyuncuid, RENK_GRI, "-----------------------------------------------------------");
	if(oyuncuid != playerid) {
		format(emote, sizeof(emote), "rozetini çýkartýr ve %s adlý kiþiye gösterir.", OyuncuIsim(oyuncuid));
		cmd(playerid, 1, emote);
	}
	else if(oyuncuid == playerid) {
		cmd(playerid, 1, "rozetini çýkarýr ve kendisi görebileceði hizada kaldýrýr.");
	}
	return 1;
}

CMD:m(playerid, params[])
{
	if(GetPVarInt(playerid,"oyuncuyayinda") == 1) return false;
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS && OyuncuBirlikTuru(playerid) != BIRLIK_MEDIKAL) return hataMesaji(playerid, "Megafon için yetkin yok.");
	if(oyuncuData[playerid][oHapisSure][0] > 0 || oyuncuData[playerid][oHapisSure][1] > 0) return hataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oGozalti] > 0) return hataMesaji(playerid, "Gözaltýndayken bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");

	if(isnull(params)) return kullanimMesaji(playerid, "/(m)egafon [mesaj]");

	if(IsPlayerInAnyVehicle(playerid)) OzelYakinMesaj(playerid, 30.0, RENK_SARI, "[MEGAFON] %s: %s", OyuncuIsim(playerid), params);
	else if(!IsPlayerInAnyVehicle(playerid)) OzelYakinMesaj(playerid, 30.0, RENK_SARI, "[EL MEGAFONU] %s: %s", OyuncuIsim(playerid), params);
	return 1;
}

alias:atabela("callsign", "birimkod");
CMD:atabela(playerid, params[])
{
	new aracid = GetPlayerVehicleID(playerid);

	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return hataMesaji(playerid, "Polis deðilsin.");

	if(!IsPlayerInAnyVehicle(playerid) || !IsEngineVehicle(GetPlayerVehicleID(playerid))) return hataMesaji(playerid, "Herhangi bir araçta deðilsiniz.");

	if(oyuncuData[playerid][oBirlik] != AracBilgi[Arac_IDBul(aracid)][aracBirlik])
		return hataMesaji(playerid, "Bu iþlemi yapabilmen için birliðinin aracýnda olmalýsýn.");

	if(!IsValidVehicle(aracid) || Arac_IDBul(aracid) == -1)
		return hataMesaji(playerid, "Ýçinde bulunduðunuz araçta bu komut kullanýlamaz!");

	if(isnull(params)) return kullanimMesaji(playerid, "/callsign [kod] veya /callsign sil");

	if (!strcmp(params, "sil", true))
	{
		if(GetPlayerState(playerid) != 2) return hataMesaji(playerid, "Bu iþlemi kullanmak için sürücü olmalýsýnýz.");
		if(IsValidDynamic3DTextLabel(AracBirimKOD[aracid]))
		{
			DestroyDynamic3DTextLabel(AracBirimKOD[aracid]);
			BilgiText(playerid, "~y~~h~~h~Birim kodu silindi");
		}
		else hataMesaji(playerid, "Araçta birim kodu mevcut deðil.");
	}
	else
	{
		if(GetPlayerState(playerid) != 2) return hataMesaji(playerid, "Bu iþlemi kullanmak için sürücü olmalýsýnýz.");
		if(IsValidDynamic3DTextLabel(AracBirimKOD[aracid])) return hataMesaji(playerid, "Bu aracýn birim kodu zaten mevcut. (/callsign sil)");
		AracBirimKOD[aracid] = CreateDynamic3DTextLabel(params, -1, 0.8, -2.6, -0.2, 10, INVALID_PLAYER_ID, aracid);
		BilgiText(playerid, "~g~~h~~h~Birim kodu olusturuldu");
	}
	return 1;
}

CMD:telsiz(playerid, params[])
{
	if(GetPVarInt(playerid,"oyuncuyayinda") == 1) return false;
	if(OyuncuBirlikTuru(playerid) == BIRLIK_POLIS || OyuncuBirlikTuru(playerid) == BIRLIK_MEDIKAL)
	{
		new birlikid = oyuncuData[playerid][oBirlik];
		if(birlikid == -1) return hataMesaji(playerid, "Birlik üyesi deðilsin.");
		if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS && OyuncuBirlikTuru(playerid) != BIRLIK_MEDIKAL) return hataMesaji(playerid, "Bu komutu kullanmak için birlik türünüz uyumlu deðildir.");
		if(oyuncuData[playerid][oHapisSure][0] > 0) return hataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oGozalti] > 0) return hataMesaji(playerid, "Gözaltýndayken bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oIsbasi] == false) return hataMesaji(playerid, "Ýþbaþýnda deðilken bu komutu kullanamazsýnýz.");

		if(isnull(params)) return kullanimMesaji(playerid, "/radyo [telsiz mesajýn]");

		BirlikPDTelsizMesaji(birlikid, RENK_TAN, "** [CH: 911 - S:1] %s: %s", OyuncuIsim(playerid), params);
		GetPlayerPos(playerid, oyuncuData[playerid][oPos][0], oyuncuData[playerid][oPos][1], oyuncuData[playerid][oPos][2]);
		foreach(new i : Player)
		{
			if(IsPlayerInRangeOfPoint(i, 10.0, oyuncuData[playerid][oPos][0], oyuncuData[playerid][oPos][1], oyuncuData[playerid][oPos][2]))
			{
				if(playerid == i) continue;
				SCM_Ex(i, RENK_GRI, "%s (telsiz): %s", OyuncuIsim(playerid), params);
			}
		}
	}
	else if(oyuncuData[playerid][oBirlik] != -1 && BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikAmaci] == 5)
	{
		new birlik = oyuncuData[playerid][oBirlik];
		BirlikTelsizMesaji(birlik, RENK_SMS, "** [TELSÝZ] %s: %s", OyuncuIsim(playerid), params);
		GetPlayerPos(playerid, oyuncuData[playerid][oPos][0], oyuncuData[playerid][oPos][1], oyuncuData[playerid][oPos][2]);
		foreach(new i : Player)
		{
			if(IsPlayerInRangeOfPoint(i, 10.0, oyuncuData[playerid][oPos][0], oyuncuData[playerid][oPos][1], oyuncuData[playerid][oPos][2]))
			{
				if(playerid == i) continue;
				SCM_Ex(i, RENK_GRI, "%s (telsiz): %s", OyuncuIsim(playerid), params);
			}
		}
	}
	else return hataMesaji(playerid, "Telsiz sisteminden yalnýzca yarýþçý, medikal ve polis birlikleri yararlanabilir.");
	return 1;
}

CMD:operator(playerid, params[])
{
	new birlikid = oyuncuData[playerid][oBirlik];
	if(birlikid == -1) return hataMesaji(playerid, "Birlik üyesi deðilsin.");
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS && OyuncuBirlikTuru(playerid) != BIRLIK_MEDIKAL) return hataMesaji(playerid, "Bu komutu kullanmak için birlik türünüz uyumlu deðildir.");
	if(oyuncuData[playerid][oHapisSure][0] > 0) return hataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oGozalti] > 0) return hataMesaji(playerid, "Gözaltýndayken bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oBirlikRutbe] < 8) return hataMesaji(playerid, "Operatörü kullanabilmek için rütbeniz yeterli deðil.");
	if(oyuncuData[playerid][oIsbasi] == false) return hataMesaji(playerid, "Ýþbaþýnda deðilken bu komutu kullanamazsýnýz.");

	if(isnull(params)) return kullanimMesaji(playerid, "/operator [telsiz mesajýn]");

	BirlikMesaji(birlikid, RENK_TAN, "** [OPERATOR]: %s", params);
	return 1;
}

CMD:departman(playerid, params[])
{
	if(oyuncuData[playerid][oBirlik] == -1) return hataMesaji(playerid, "Birlik üyesi deðilsin.");
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS && OyuncuBirlikTuru(playerid) != BIRLIK_MEDIKAL && OyuncuBirlikTuru(playerid) != BIRLIK_AVUKAT) return hataMesaji(playerid, "Bu komutu kullanmak için birlik türünüz uyumlu deðildir.");
	if(oyuncuData[playerid][oIsbasi] == false) return hataMesaji(playerid, "Ýþbaþýnda deðilsin.");
	if(oyuncuData[playerid][oHapisSure][0] > 0) return hataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oGozalti] > 0) return hataMesaji(playerid, "Gözaltýndayken bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(isnull(params)) return kullanimMesaji(playerid, "/departman [departman mesajýn]");

	for (new i = 0; i != MAKSIMUM_BIRLIK; i ++) if(BirlikBilgi[i][birlikTur] == BIRLIK_POLIS || BirlikBilgi[i][birlikTur] == BIRLIK_MEDIKAL || BirlikBilgi[i][birlikTur] == BIRLIK_AVUKAT)
	{
		BirlikMesaji(i, RENK_SARI, "[CH: dept. WHO: 911] %s: %s", OyuncuIsim(playerid), params);
	}
	return 1;
}

CMD:yt(playerid, params[])
{
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS && OyuncuBirlikTuru(playerid) != BIRLIK_MEDIKAL) return hataMesaji(playerid, "Bir devlet kurumunda çalýþmýyorsun.");
	if(oyuncuData[playerid][oIsbasi] == false) return hataMesaji(playerid, "Ýþbaþýnda deðilsin.");
	if(oyuncuData[playerid][oHapisSure][0] > 0 || oyuncuData[playerid][oHapisSure][1] > 0) return hataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oGozalti] > 0) return hataMesaji(playerid, "Gözaltýndayken bu komutu kullanamazsýn.");
	if(isnull(params)) return kullanimMesaji(playerid, "/yt [yakýn telsiz]");

	GetPlayerPos(playerid, oyuncuData[playerid][oPos][0], oyuncuData[playerid][oPos][1], oyuncuData[playerid][oPos][2]);
	foreach(new i: Player)
	{
		if(IsPlayerInRangeOfPoint(i, 100.0, oyuncuData[playerid][oPos][0], oyuncuData[playerid][oPos][1], oyuncuData[playerid][oPos][2]) && (oyuncuData[playerid][oBirlik] == oyuncuData[i][oBirlik]) )
		{
			SCM_Ex(i, RENK_TELSIZ3, "[CH: 99%d S: YAKIN] %s: %s", oyuncuData[playerid][oBirlik], OyuncuIsim(playerid), params);
		}
	}
	new string[256];
	format(string, sizeof(string), "%s (telsiz): %s", OyuncuIsim(playerid), params);
	TelsizMesajiGonder(playerid, 12.0, string, RENK_YAZI_1, RENK_YAZI_2, RENK_YAZI_3, RENK_YAZI_4, -1);
	return 1;
}

CMD:yereyatir(playerid, params[])
{
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return hataMesaji(playerid, "Bu komutu kullanmak için polis olman gerekiyor.");
	if(oyuncuData[playerid][oHapisSure][0] > 0 || oyuncuData[playerid][oHapisSure][1] > 0) return hataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oGozalti] > 0) return hataMesaji(playerid, "Gözaltýndayken bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oDonduruldu] > 0) return hataMesaji(playerid, "Bu komut þu anda kullanýlamaz.");
	if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu komut araçta kullanýlamaz.");
	if(GetPVarInt(playerid, "yereyatir") > gettime()) {
		hataMesaji(playerid, "Yeniden bu komutu kullanmak için %d saniye beklemelisin.", GetPVarInt(playerid, "yereyatir") - gettime());
		return 1;
	}

	static oyuncuid;
	if(sscanf(params, "u", oyuncuid))
		return kullanimMesaji(playerid, "/yereyatir [oyuncu id/isim]");

	if(!IsPlayerConnected(oyuncuid))
		return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");

	if(oyuncuid == playerid)
		return hataMesaji(playerid, "Bu komutu kendi üzerinde kullanamazsýn.");

	if(!YakinlikKontrol(playerid, oyuncuid, 5.0))
		return hataMesaji(playerid, "Bu oyuncuya yakýn olmalýsýn.");

	if(oyuncuData[oyuncuid][oYarali] == true || oyuncuData[oyuncuid][oDonduruldu] > 0 || IsPlayerInAnyVehicle(oyuncuid))
		return hataMesaji(playerid, "Bu komut þu anda bu kiþinin üzerinde kullanýlamaz.");

	//if(oyuncuData[playerid][oAdminDurum] == true) return hataMesaji(playerid, "Bu seçenek iþbaþýndaki yöneticiler için kullanýlamaz.");

	static bilgi[144];
	switch(random(10)) {
		case 1..2: format(bilgi, sizeof(bilgi), "%s adlý kiþinin üzerine atlar ve yere yatýrýr.", OyuncuIsim(oyuncuid)), oyuncuData[oyuncuid][oDonduruldu] = 10;
		case 3: format(bilgi, sizeof(bilgi), "%s adlý kiþinin üzerine atlamayý dener.", OyuncuIsim(oyuncuid));
		case 4..5: format(bilgi, sizeof(bilgi), "%s adlý kiþinin üzerine atlar ve yere yatýrýr.", OyuncuIsim(oyuncuid)), oyuncuData[oyuncuid][oDonduruldu] = 10;
		case 6: format(bilgi, sizeof(bilgi), "%s adlý kiþinin üzerine atlamayý dener.", OyuncuIsim(oyuncuid));
		case 7..8: format(bilgi, sizeof(bilgi), "%s adlý kiþinin üzerine atlar ve yere yatýrýr.", OyuncuIsim(oyuncuid)), oyuncuData[oyuncuid][oDonduruldu] = 10;
		case 9: format(bilgi, sizeof(bilgi), "%s adlý kiþinin üzerine atlamayý dener.", OyuncuIsim(oyuncuid));
		case 10: format(bilgi, sizeof(bilgi), "%s adlý kiþinin üzerine atlar ve yere yatýrýr.", OyuncuIsim(oyuncuid)), oyuncuData[oyuncuid][oDonduruldu] = 10;
	}
	cmd(playerid, 1, bilgi);
	SetPVarInt(playerid, "yereyatir", gettime() + 30);
	if(oyuncuData[oyuncuid][oDonduruldu] > 0) {
		ApplyAnimation(oyuncuid, "CRACK", "crckdeth2", 4.1, 1, 0, 0, 0, 0);
		TogglePlayerControllable(oyuncuid, false);
	}
	return 1;
}

CMD:pdspawn(playerid, params[])
{
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return hataMesaji(playerid, "Polis deðilsin.");
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 2239.6357,2431.1926,3.2734)) return hataMesaji(playerid, "VCPD iþlem noktasýna yakýn deðilsin.");
	if(!IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Araçta deðilsin.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return hataMesaji(playerid, "Aracýn sürücüsü olmalýsýn.");
	if(aracbirlikturbul(GetPlayerVehicleID(playerid)) != BIRLIK_POLIS) return hataMesaji(playerid, "Bu araç VCPD birliðine ait deðil.");
	if(oyuncuData[playerid][oHapisSure][0] > 0) return hataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");

	ASpawn(GetPlayerVehicleID(playerid));
	SunucuMesaji(playerid, "Araç baþarýyla spawnlandý. (Araç ID: %d)", GetPlayerVehicleID(playerid));
	return 1;
}

CMD:pdtamir(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Araç kullanmýyorsun.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return hataMesaji(playerid, "Aracýn sürücüsü olmalýsýn.");
	if(oyuncuData[playerid][oGiris] == false) return hataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oDonduruldu] > 0) return hataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oHapisSure][0] > 0 || oyuncuData[playerid][oHapisSure][1] > 0) return hataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	//if(oyuncuData[playerid][oAdminDurum]) return hataMesaji(playerid, "Yönetici iþbaþýndayken bu komutu kullanamazsýn.");
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return hataMesaji(playerid, "Polis deðilsin.");
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 2239.6357,2431.1926,3.2734)) return hataMesaji(playerid, "VCPD iþlem noktasýna yakýn deðilsin.");
	if(aracbirlikturbul(GetPlayerVehicleID(playerid)) != BIRLIK_POLIS) return hataMesaji(playerid, "Bu araç VCPD'ye ait deðil.");
	if(GetEngineStatus(GetPlayerVehicleID(playerid)) == 1) return hataMesaji(playerid, "Önce aracýn motorunu kapatmalýsýn.");

	TogglePlayerControllable(playerid, false);
	oyuncuData[playerid][oTamirSure] = TAMIR_SURE;
	SetTimerEx("pdaractamir", TAMIR_SURE * 1000, false, "ud", playerid, GetPlayerVehicleID(playerid));
	return 1;
}

CMD:memurcagir(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 246.3112, 117.8975, 1003.2184)) return hataMesaji(playerid, "Memur çaðýrma noktasýnda deðilsin.");
	if(OyuncuBirlikTuru(playerid) == BIRLIK_POLIS) return hataMesaji(playerid, "Birlik türünüz polis olduðu için bu seçeneði kullanamazsýn.");
	if(oyuncuData[playerid][oHapisSure][0] > 0) return hataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");

	BirlikMesajiEx(BIRLIK_POLIS, RENK_TELSIZ, "MEMUR ÇAÐRISI: %s adlý kiþi lobiye memur talep ediyor.", OyuncuIsim(playerid));
	SunucuMesaji(playerid, "Memur çaðýrma talebin iletildi, lütfen bekleyin.");
	return 1;
}

CMD:ekipmangiy(playerid, params[])
{
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return hataMesaji(playerid, "Bu komutu kullanmak için polis olman gerekiyor.");
	if(oyuncuData[playerid][oIsbasi] == false) return hataMesaji(playerid, "Ýþbaþýnda deðilsin.");
	if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu komut araçta kullanýlamaz.");
	if(oyuncuData[playerid][oHapisSure][0] > 0) return hataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(GetPVarInt(playerid, "ekipmangiy") > gettime()) {
		hataMesaji(playerid, "Yeniden bu komutu kullanmak için %d saniye beklemelisin.", GetPVarInt(playerid, "ekipmangiy") - gettime());
		return 1;
	}
	if(OyuncuDolapYakin(playerid))
	{
		oyuncuData[playerid][oGeciciKiyafet] = 285;
		SetPlayerSkin(playerid, 285);
		ZirhDuzenle(playerid, 35);
		CanDuzenle(playerid, 100);
		VeritabaniSilahVer(playerid, 29, 500);
		cmd(playerid, 1, "dolabý aralayýp içinden taktiksel ekipmanlarýný ve kýyafetini alýr.");
		SetPVarInt(playerid, "ekipmangiy", gettime() + 180);
		return true;
	}
	else
	{
		foreach(new i : Araclar)
		{
			static Float: fVehiclePos[3];
			GetVehiclePos(i, fVehiclePos[0], fVehiclePos[1], fVehiclePos[2]);
			if((GetVehicleModel(i) == 427 || GetVehicleModel(i) == 528 || GetVehicleModel(i) == 601) && GetPlayerDistanceFromPoint(playerid, fVehiclePos[0], fVehiclePos[1], fVehiclePos[2]) < 5)
			{
				oyuncuData[playerid][oGeciciKiyafet] = 285;
				SetPlayerSkin(playerid, 285);
				ZirhDuzenle(playerid, 35);
				CanDuzenle(playerid, 100);
				VeritabaniSilahVer(playerid, 29, 500);
				cmd(playerid, 1, "aracýn arka kapýsýný açar içinden taktiksel ekipmanlarýný ve kýyafetini alýr.");
				SetPVarInt(playerid, "ekipmangiy", gettime() + 180);
				return true;
			}
		}
		hataMesaji(playerid, "Dolaba veya taktiksel araçlara yakýn deðilsin.");
	}
	return 1;
}

CMD:masketak(playerid, params[])
{
	if(oyuncuData[playerid][oMaskeHakki] < 1) return hataMesaji(playerid, "Maske sistemini kullanmak için premium maske ürününü satýn almalýsýnýz.");
	if(oyuncuData[playerid][oGazMaskedurum] == 0)
	{
		oyuncuData[playerid][oGazMaskedurum] = 1;
		SunucuMesaji(playerid,"Maskenizi taktýnýz.");
		foreach(new i : Player)
		{
			ShowPlayerNameTagForPlayer(i, playerid, false);
		}
		format(oyuncuData[playerid][oGazMaskeisim],64,"Maske_%d",oyuncuData[playerid][oID]);
		Log_Kaydet("loglar/maskelog.txt", "[%s] %s adli kisi maske takti.(%s)", Tarih(), oyuncuData[playerid][oIsim], oyuncuData[playerid][oGazMaskeisim]);
	}
	else
	{
		oyuncuData[playerid][oGazMaskedurum] = 0;
		SunucuMesaji(playerid,"Maskenizi çýkardýnýz.");
		foreach(new i : Player)
		{
			ShowPlayerNameTagForPlayer(i, playerid, true);
		}
		format(oyuncuData[playerid][oGazMaskeisim],64,"Yok");
		Log_Kaydet("loglar/maskelog.txt", "[%s] %s adli kisi maskesini cikardi.", Tarih(), oyuncuData[playerid][oIsim]);
	}
	return 1;
}

CMD:maskeliler(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] >= 1)
	{
		new test2[128];
		SunucuMesaji(playerid,"Maskeliler:");
		foreach(new i : Player)
		{
			if(oyuncuData[i][oGazMaskedurum] == 1)
			{
				format(test2,sizeof(test2),"%s(%d) | SQLID: %d | Maske ismi: %s",oyuncuData[i][oIsim],i,oyuncuData[i][oID],oyuncuData[i][oGazMaskeisim]);
				SendClientMessage(playerid,-1,test2);
			}
		}
	}
	else return YetkinizYok(playerid);
	return 1;
}

CMD:kelepce(playerid, params[])
{
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return hataMesaji(playerid, "Polis memuru deðilsin.");
	if(oyuncuData[playerid][oIsbasi] == false) return hataMesaji(playerid, "Ýþbaþýnda deðilsin.");
	if(oyuncuData[playerid][oDonduruldu] > 0) return hataMesaji(playerid, "Bu komut þu anda kullanýlamaz.");
	if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oHapisSure][0] > 0) return hataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");

	static oyuncuid, mesaj[128];
	if(sscanf(params, "u", oyuncuid))
		return kullanimMesaji(playerid, "/kelepce [oyuncu ID/isim]");

	if(!IsPlayerConnected(oyuncuid)) return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(oyuncuid == playerid) return hataMesaji(playerid, "Kendini kelepçeleyemezsin.");
	if(!YakinlikKontrol(playerid, oyuncuid, 5.0)) return hataMesaji(playerid, "Girilen kiþiye yakýn deðilsin.");
//if(oyuncuData[oyuncuid][oDonduruldu] == 0 && GetPlayerSpecialAction(oyuncuid) != SPECIAL_ACTION_HANDSUP && !IsPlayerIdle(oyuncuid)) return hataMesaji(playerid, "Bu oyuncu kelepçelenebilir durumda deðil.");
	if(GetPlayerState(oyuncuid) != PLAYER_STATE_ONFOOT) return hataMesaji(playerid, "Oyuncu þu anda kelepçelenemez.");
	if(oyuncuData[oyuncuid][oKelepceli]) return hataMesaji(playerid, "Bu oyuncu zaten kelepçeli.");
	if(oyuncuData[oyuncuid][oHapisSure][0] > 0 || oyuncuData[oyuncuid][oHapisSure][1] > 0) return hataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(oyuncuData[oyuncuid][oYarali] == true) return hataMesaji(playerid, "Oyuncu yaralanmýþ, bu komutu þu an kullanamazsýn.");

	oyuncuData[oyuncuid][oKelepceli] = 1;
	SetPlayerSpecialAction(oyuncuid, SPECIAL_ACTION_CUFFED);
	SetPlayerAttachedObject(oyuncuid, 5, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977, -81.700035, 0.891999, 1.000000, 1.168000);
	format(mesaj, sizeof(mesaj), "sað elini beline atar, kavradýðý kelepçeyi %s adlý kiþinin bileklerine geçirir.", OyuncuIsim(oyuncuid));
	cmd(playerid, 1, mesaj);
	return 1;
}

CMD:kelepcecikar(playerid, params[])
{
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return hataMesaji(playerid, "Polis memuru deðilsin.");
	if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oHapisSure][0] > 0) return hataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oGozalti] > 0) return hataMesaji(playerid, "Gözaltýndayken bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");

	static oyuncuid, mesaj[128];
	if(sscanf(params, "u", oyuncuid))
		return kullanimMesaji(playerid, "/kelepcecikar [oyuncu id]");

	if(!IsPlayerConnected(oyuncuid))
		return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");

	if(oyuncuid == playerid)
		return hataMesaji(playerid, "Kendi kelepçeni çýkaramazsýn.");

	if(!YakinlikKontrol(playerid, oyuncuid, 5.0))
		return hataMesaji(playerid, "Girilen kiþiye yakýn deðilsin.");

	if(!oyuncuData[oyuncuid][oKelepceli])
		return hataMesaji(playerid, "Oyuncu kelepçeli deðil.");

	oyuncuData[oyuncuid][oKelepceli] = 0;
	SetPlayerSpecialAction(oyuncuid, SPECIAL_ACTION_NONE);
	RemovePlayerAttachedObject(oyuncuid, 5);
	format(mesaj, sizeof(mesaj), "sað elindeki anahtar yardýmý ile %s adlý kiþinin bileklerinden kelepçeyi çýkarýr.", OyuncuIsim(oyuncuid));
	cmd(playerid, 1, mesaj);
	return 1;
}

CMD:aracaat(playerid, params[])
{
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return hataMesaji(playerid, "Polis deðilsin.");
	if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu komut araçta kullanýlamaz.");
	if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oHapisSure][0] > 0) return hataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");

	static oyuncuid, aracid, mesaj[128 + MAX_PLAYER_NAME];
	aracid = YakinAracKontrol(playerid);
	if(sscanf(params, "u", oyuncuid))
		return kullanimMesaji(playerid, "/aracaat [oyuncu id]");

	if(!IsPlayerConnected(oyuncuid)) return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(oyuncuid == playerid) return hataMesaji(playerid, "Kendini araca atamazsýn.");
	if(!YakinlikKontrol(playerid, oyuncuid, 5.0)) return hataMesaji(playerid, "Girilen kiþiye yakýn deðilsin.");
	if(!oyuncuData[oyuncuid][oKelepceli]) return hataMesaji(playerid, "Oyuncu þu anda kelepçeli deðil.");
	if(aracid == INVALID_VEHICLE_ID) return hataMesaji(playerid, "Herhangi bir aracýn yakýnýnda deðilsin.");
	if(oyuncuData[oyuncuid][oHapisSure][0] > 0 || oyuncuData[oyuncuid][oHapisSure][1] > 0) return hataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(oyuncuData[oyuncuid][oYarali] == true) return hataMesaji(playerid, "Oyuncu yaralanmýþ, bu komutu þu an kullanamazsýn.");
	if(oyuncuData[oyuncuid][oDonduruldu] > 0) return hataMesaji(playerid, "Oyuncu dondurulmuþ, bu komut þu an kullanýlamaz.");

	if(KoltukSayiKontrol(aracid) < 2) return hataMesaji(playerid, "Bu araç uygun deðildir.");

	if(IsPlayerInVehicle(oyuncuid, aracid))
	{
		TogglePlayerControllable(oyuncuid, true);
		RemovePlayerFromVehicle(oyuncuid);
		format(mesaj, sizeof(mesaj), "kapýyý açar ve %s adlý kiþiyi kelepçelerinden kavrar.", OyuncuIsim(oyuncuid));
		cmd(playerid, 1, mesaj);
	}
	else
	{
		new koltukid = KoltukKontrol(aracid, 2);
		if(koltukid == -1)
			return hataMesaji(playerid, "Araçta boþ koltuk yok.");

		TogglePlayerControllable(oyuncuid, false);
		PutPlayerInVehicle(oyuncuid, aracid, koltukid);
		format(mesaj, sizeof(mesaj), "%s adlý kiþiyi araca atar.", OyuncuIsim(oyuncuid));
		cmd(playerid, 1, mesaj);
	}
	return 1;
}

CMD:aracbirlik(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu komut sadece araçta kullanýlabilir.");
	if(oyuncuData[playerid][oBirlik] == -1) return hataMesaji(playerid, "Oluþum/Birlik üyesi deðilsin.");
	if(OyuncuBirlikTuru(playerid) == BIRLIK_POLIS || OyuncuBirlikTuru(playerid) == BIRLIK_DEVLET || OyuncuBirlikTuru(playerid) == BIRLIK_MEDIKAL) return hataMesaji(playerid, "Devlet üyeleri bu seçeneði kullanamaz.");
	if(!Arac_SahipKontrol(playerid, Arac_IDBul(GetPlayerVehicleID(playerid)))) return hataMesaji(playerid, "Bu aracýn sahibi deðilsin.");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return hataMesaji(playerid, "Sürücü koltuðunda deðilsin.");
	if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Bu komut yaralýyken kullanýlamaz.");
	if(oyuncuData[playerid][oHapisSure][0] > 0 || oyuncuData[playerid][oHapisSure][1] > 0) return hataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oGozalti] > 0) return hataMesaji(playerid, "Gözaltýndayken bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oDonduruldu] > 0) return hataMesaji(playerid, "Dondurulma etkisindeyken bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");

	static aracid;
	aracid = Arac_IDBul(GetPlayerVehicleID(playerid));
	if(AracBilgi[aracid][aracBirlik] > -1)
	{
		AracBilgi[aracid][aracBirlik] = -1;
		Arac_Kaydet(aracid);
		SunucuMesaji(playerid, "Aracýný birlikten çýkardýn.");
		BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikaraci]--;
		Birlik_Kaydet(oyuncuData[playerid][oBirlik]);
		return true;
	}
	if(BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikaraci] == birlikaracsiniri(BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikLevel])) return hataMesaji(playerid, "Birliðiniz maksimum eklenebilecek araç sýnýrýna ulaþtý, araç ekleyemezsiniz."), IpucuMesaji(playerid, "Birlik seviyesini yükseltmek bu sýnýrý arttýrabilir.");
	AracBilgi[aracid][aracBirlik] = BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikID];
	BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikaraci]++;
	Arac_Kaydet(aracid);
	Birlik_Kaydet(oyuncuData[playerid][oBirlik]);
	SunucuMesaji(playerid, "%s model aracýný %s adlý birliðe baðladýn.", AracModel(AracBilgi[aracid][aracModel]), BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikAd]);
	return 1;
}

CMD:jetpack(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 8) return YetkinizYok(playerid);
	static oyuncuid;
	if(sscanf(params, "u", oyuncuid))
	{
		oyuncuData[playerid][oJetpack] = true;
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
	}
	else
	{
		if(!IsPlayerConnected(oyuncuid)) return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");
		if(IsPlayerInAnyVehicle(oyuncuid)) return hataMesaji(playerid, "Araçtaki bir oyuncuya jetpack veremezsin.");
		if(oyuncuData[oyuncuid][oHapisSure][0] > 0 || oyuncuData[oyuncuid][oHapisSure][1] > 0) return hataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
		if(oyuncuData[oyuncuid][oYarali] == true) return hataMesaji(playerid, "Oyuncu yaralanmýþ, bu komutu þu an kullanamazsýn.");
		if(oyuncuData[oyuncuid][oDonduruldu] > 0) return hataMesaji(playerid, "Oyuncu dondurulmuþ, bu komut þu an kullanýlamaz.");

		oyuncuData[oyuncuid][oJetpack] = true;
		SetPlayerSpecialAction(oyuncuid, SPECIAL_ACTION_USEJETPACK);
		SunucuMesaji(playerid, "%s adlý kiþiye jetpack verdin.", OyuncuIsim(oyuncuid));
		SunucuMesaji(oyuncuid, "%s adlý yönetici sana jetpack verdi!", oyuncuData[playerid][oAdminNick]);
	}
	return 1;
}

CMD:godtest(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 8) return YetkinizYok(playerid);
	static oyuncuid;
	if(sscanf(params, "u", oyuncuid))
		return kullanimMesaji(playerid, "/godtest [oyuncu ID/isim]");

	if(!IsPlayerConnected(oyuncuid)) return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(oyuncuid == playerid) return hataMesaji(playerid, "Bu seçeneði kendi üstünde kullanamazsýn.");
	if(oyuncuData[oyuncuid][oGiris] == false) return hataMesaji(playerid, "Oyuncu giriþ yapmamýþ.");
	if(oyuncuData[oyuncuid][oHapisSure][0] > 0 || oyuncuData[oyuncuid][oHapisSure][1] > 0) return hataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(oyuncuData[oyuncuid][oYarali] == true) return hataMesaji(playerid, "Oyuncu yaralanmýþ, bu komutu þu an kullanamazsýn.");
	if(oyuncuData[oyuncuid][oDonduruldu] > 0) return hataMesaji(playerid, "Oyuncu dondurulmuþ, bu komut þu an kullanýlamaz.");
	if(oyuncuData[oyuncuid][oIzlenen] != INVALID_PLAYER_ID) return hataMesaji(playerid, "Oyuncu birisini izliyor, þu an kullanýlamaz.");

	SunucuMesaji(playerid, "%s (ID: %d) adlý kiþiyi baþarýlý bir þekilde patlattýn.", OyuncuIsim(oyuncuid), oyuncuid);
	GetPlayerPos(oyuncuid, oyuncuData[oyuncuid][oPos][0], oyuncuData[oyuncuid][oPos][1], oyuncuData[oyuncuid][oPos][2]);
	CreateExplosion(oyuncuData[oyuncuid][oPos][0], oyuncuData[oyuncuid][oPos][1], oyuncuData[oyuncuid][oPos][2], 7, 1);
	return 1;
}

CMD:tokatla(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 1) return YetkinizYok(playerid);
	static oyuncuid;
	if(sscanf(params, "u", oyuncuid)) return kullanimMesaji(playerid, "/tokatla [oyuncu ID/isim]");
	if(!IsPlayerConnected(oyuncuid)) return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(oyuncuData[oyuncuid][oAdmin] > oyuncuData[playerid][oAdmin] || IsPlayerAdmin(oyuncuid)) return hataMesaji(playerid, "Girdiðin kiþi sizden yüksek bir admin seviyesine sahip.");
	if(oyuncuData[oyuncuid][oHapisSure][0] > 0 || oyuncuData[oyuncuid][oHapisSure][1] > 0) return hataMesaji(playerid, "Oyuncu hapiste, bu komutu þu an kullanamazsýn.");
	if(oyuncuData[oyuncuid][oYarali] == true) return hataMesaji(playerid, "Oyuncu yaralanmýþ, bu komutu þu an kullanamazsýn.");
	if(oyuncuData[oyuncuid][oDonduruldu] > 0) return hataMesaji(playerid, "Oyuncu dondurulmuþ, bu komut þu an kullanýlamaz.");
	if(oyuncuData[oyuncuid][oIzlenen] != INVALID_PLAYER_ID) return hataMesaji(playerid, "Oyuncu birisini izliyor, þu an kullanýlamaz.");

	GetPlayerPos(oyuncuid, oyuncuData[oyuncuid][oPos][0], oyuncuData[oyuncuid][oPos][1], oyuncuData[oyuncuid][oPos][2]);
	SetPlayerPos(oyuncuid, oyuncuData[oyuncuid][oPos][0], oyuncuData[oyuncuid][oPos][1], oyuncuData[oyuncuid][oPos][2] + 5);

	PlayerPlaySound(oyuncuid, 1130, 0.0, 0.0, 0.0);
	YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]:{FFFFFF} %s, %s adlý kiþiyi tokatladý.", oyuncuData[playerid][oAdminNick], OyuncuIsim(oyuncuid));
	return 1;
}

CMD:acevir(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 2) return YetkinizYok(playerid);
	if(GetPlayerVehicleID(playerid) > 0 && isnull(params))
	{
		AracDuzelt(GetPlayerVehicleID(playerid));
		SunucuMesaji(playerid, "Ýçinde olduðunuz aracý çevirdin.");
	}
	else
	{
		static aracid;
		if(sscanf(params, "d", aracid))
			return kullanimMesaji(playerid, "/acevir [araç ID]");

		else if(!IsValidVehicle(aracid))
			return hataMesaji(playerid, "Geçersiz araç.");

		AracDuzelt(aracid);
		SunucuMesaji(playerid, "Araç %d çevrildi.", aracid);
	}
	return 1;
}

CMD:sliste(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 1) return YetkinizYok(playerid);
	new str[2048];
	format(str, sizeof(str), "%s______________________________________________________________________________________________________", str);
	format(str, sizeof(str), "%s1: Brass Knuckles 2: Golf Club 3: Nite Stick 4: Knife 5: Baseball Bat 6: Shovel 7: Pool Cue 8: Katana 9: Chainsaw", str);
	format(str, sizeof(str), "%s10: Purple Dildo 11: Small White Vibrator 12: Large White Vibrator 13: Silver Vibrator 14: Flowers 15: Cane 16: Frag Grenade", str);
	format(str, sizeof(str), "%s17: Tear Gas 18: Molotov Cocktail 19: Vehicle Missile 20: Hydra Flare 21: Jetpack 22: 9mm 23: Silenced 9mm 24: Desert Eagle", str);
	format(str, sizeof(str), "%s26: Sawnoff Shotgun 27: Combat Shotgun 28: Micro SMG (Mac 10) 29: SMG (MP5) 30: AK-47 31: M4 32: Tec9 33: Rifle", str);
	format(str, sizeof(str), "%s25: Shotgun 34: Sniper Rifle 35: Rocket Launcher 36: HS Rocket Launcher 37: Flamethrower 38: Minigun 39: Satchel Charge", str);
	format(str, sizeof(str), "%s40: Detonator 41: Spraycan 42: Fire Extinguisher 43: Camera 44: Nightvision Goggles 45: Infared Goggles 46: Parachute", str);
	format(str, sizeof(str), "%s______________________________________________________________________________________________________", str);
	ShowPlayerDialog(playerid, BOS_MESAJ, DIALOG_STYLE_MSGBOX, "Silah Listesi", str, "Kapat", "");
	return 1;
}

CMD:silahlistesi(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 1) return YetkinizYok(playerid);

	static oyuncuid, silahid, mermi, sayi = 0;
	sayi = 0;
	if(sscanf(params, "u", oyuncuid))
		return kullanimMesaji(playerid, "/silahlistesi [oyuncu id/isim]");

	if(!IsPlayerConnected(oyuncuid))
		return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");

	new	subString[2048],
	item_name[24],
	baslik[80],
	itemobjesi;
	format(baslik, sizeof(baslik), "Envanter - Agirlik: ~y~%.2f/%.2f kg", oyuncuData[oyuncuid][pEnvanterAgirlik], MAX_AGIRLIK);
	for (new i = 0; i < MAX_ITEM; i++)
	{
		if (EnvanterData[oyuncuid][i_aktif][i]) {
			format (item_name, sizeof(item_name), "%s", ItemArray[ EnvanterData[oyuncuid][i_tip][i] - 1 ][iisim]);
			itemobjesi = ItemArray[ EnvanterData[oyuncuid][i_tip][i] - 1 ][iobje];
			format(subString, sizeof(subString), "%s%d\n%s(%d)\n", subString, itemobjesi, item_name, i);
		}
		else if(!EnvanterData[oyuncuid][i_aktif][i]) {
			format(subString, sizeof(subString), "%s%d\nBos Slot(%d)\n",subString, 18631, i);
		}
	}
	ShowPlayerDialog(playerid, DIALOG_SILAHLISTE_ENVANTER, DIALOG_STYLE_PREVMODEL, baslik, subString, "Tamam", "Iptal");
	SCM_Ex(playerid, RENK_ACIKKIRMIZI, "%s adlý kiþinin üzerindeki silahlar:", OyuncuIsim(oyuncuid));
	for (new i = 0; i < 13; i ++)
	{
		GetPlayerWeaponData(oyuncuid, i, silahid, mermi);

		if(silahid > 0) {
			SCM_Ex(playerid, RENK_BEYAZ, "* %s (%d mermi) (Sistem Silahý)", SilahIsim(silahid), mermi);
			sayi++;
		}
	}
	if(!sayi) hataMesaji(playerid, "Oyuncunun üzerinde sistem silahý bulunmuyor.");

	SunucuMesaji(playerid, "Veritabaný silahlarý:");
	new query[250];
	mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `player_weapons` WHERE `weapon_userid` = '%d'", oyuncuData[oyuncuid][oID]);
	mysql_tquery(g_SQL, query, "OnPlayerCheckWeapons", "d", playerid);
	return 1;
}

CMD:ustara(playerid, params[])
{
	if(oyuncuData[playerid][oDonduruldu] > 0) return hataMesaji(playerid, "Bu komut þu anda kullanýlamaz.");
	if(oyuncuData[playerid][oHapisSure][0] > 0) return hataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");

	static oyuncuid;
	if(sscanf(params, "u", oyuncuid))
		return kullanimMesaji(playerid, "/ustara [oyuncu id/isim]");

	if(!IsPlayerConnected(oyuncuid))
		return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");

	if(oyuncuid == playerid)
		return hataMesaji(playerid, "Kendini arayamazsýn.");

	if(!YakinlikKontrol(playerid, oyuncuid, 3.0) || GetPlayerState(oyuncuid) == PLAYER_STATE_SPECTATING)
		return hataMesaji(playerid, "Girilen oyuncuya yakýn deðilsin.");

	if(GetPVarInt(oyuncuid, "dialog") != -1)
		return hataMesaji(playerid, "Girilen oyuncuya þu anda satýþ önerisi verilemez, diyalogu kapatmasýný bekleyin.");

	static bilgi[144];
	SetPVarInt(oyuncuid, "ustarayan", playerid);
	format(bilgi, sizeof(bilgi), "%s adlý kiþi üzerini aramak istiyor.", OyuncuIsim(playerid));
	DialogGoster(oyuncuid, DIALOG_USTARAMA, DIALOG_STYLE_MSGBOX, "> Üst Arama Talebi", bilgi, "Kabul", "Red");
	SunucuMesaji(playerid, "Arama isteðin %s adlý kiþiye iletildi.", OyuncuIsim(oyuncuid));
	return 1;
}

alias:asilahver("givegun");
CMD:asilahver(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 7) return YetkinizYok(playerid);

	static oyuncuid, silahid, mermi;
	if(sscanf(params, "udI(200)", oyuncuid, silahid, mermi))
		return kullanimMesaji(playerid, "/asilahver [oyuncu ID/isim] [silah id] [mermi]");

	if(!IsPlayerConnected(oyuncuid))
		return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");

	if(silahid <= 0 || silahid > 46 || (silahid >= 19 && silahid <= 21))
		return hataMesaji(playerid, "Geçersiz silah belirlendi.");

	if(silahid == 35 && oyuncuData[playerid][oAdmin] < 8 || silahid == 38 && oyuncuData[playerid][oAdmin] < 8)
		return hataMesaji(playerid, "Bu silahý vermek için seviye 8 yönetici olman gerekiyor.");

	if(mermi < 1) return hataMesaji(playerid, "Mermi en az 1 olmalýdýr.");

	VeritabaniSilahVer(oyuncuid, silahid, mermi);
	//GivePlayerWeapon(playerid, silahid, mermi);
	AdminMesaji(playerid, "%s adlý kiþiye %s model silahý %d mermiyle verdin.", OyuncuIsim(oyuncuid), SilahIsim(silahid), mermi);
	AdminMesaji(oyuncuid, "%s adlý yönetici sana %s model silahý %d mermiyle verdi.", oyuncuData[playerid][oAdminNick], SilahIsim(silahid), mermi);
	return 1;
}

CMD:asilahsifirla(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 6) return hataMesaji(playerid, "Bu komutu kullanma yetkin yok!");

	static oyuncuid;
	if(sscanf(params, "u", oyuncuid))
		return kullanimMesaji(playerid, "/asilahsifirla [oyuncu ID/isim]");

	if(!IsPlayerConnected(oyuncuid)) return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");

	SilahlariSifirla(oyuncuid);
	AdminMesaji(playerid, "%s adlý kiþinin silahlarýný sýfýrladýn.", OyuncuIsim(oyuncuid));
	AdminMesaji(oyuncuid, "%s adlý yönetici silahlarýný sýfýrladý.", oyuncuData[playerid][oAdminNick]);
	return 1;
}

alias:bilgiler("check");

CMD:bilgiler(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 1) return YetkinizYok(playerid);

	static oyuncuid;
	if(sscanf(params, "u", oyuncuid))
		return kullanimMesaji(playerid, "/bilgiler [oyuncu id/isim]");

	if(!IsPlayerConnected(oyuncuid))
		return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");

	if(playerid == oyuncuid)
		return hataMesaji(playerid, "Kendi bilgilerine bakmak için /bilgilerim komutunu kullanýn.");

	if(!oyuncuData[oyuncuid][oGiris])
		return hataMesaji(playerid, "Oyuncu giriþ yapmamýþ, biglilerini görmek için giriþ yapmasýný bekleyin.");

	oyuncuDataleri(playerid, oyuncuid);
	return 1;
}

CMD:specengel(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 8) return YetkinizYok(playerid);
	if(oyuncuData[playerid][oHapisSure][0] > 0 || oyuncuData[playerid][oHapisSure][1] > 0) return hataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oDonduruldu] > 0) return hataMesaji(playerid, "Bu komut þu anda kullanýlamaz.");

	static oyuncuid;
	if(sscanf(params, "u", oyuncuid)) return kullanimMesaji(playerid, "/specengel [oyuncu id/isim]");

	if(!IsPlayerConnected(oyuncuid)) return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(!oyuncuData[oyuncuid][oGiris]) return hataMesaji(playerid, "Oyuncu giriþ yapmamýþ.");

	if(oyuncuData[oyuncuid][oSpecengel] != 1)
	{
		oyuncuData[oyuncuid][oSpecengel] = 1;
		SunucuMesaji(playerid, "%s adlý kiþiye spec engeli koydunuz.", OyuncuIsim(oyuncuid));
	}
	else if(oyuncuData[oyuncuid][oSpecengel] == 1)
	{
		oyuncuData[oyuncuid][oSpecengel] = 0;
		SunucuMesaji(playerid, "%s adlý kiþinin spec engelini kaldýrdýn.", OyuncuIsim(oyuncuid));
	}
	return 1;
}

CMD:izle(playerid, params[])
{
	if(!oyuncuData[playerid][oAdmin]) return YetkinizYok(playerid);
	if(oyuncuData[playerid][oHapisSure][0] > 0 || oyuncuData[playerid][oHapisSure][1] > 0) return hataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oDonduruldu] > 0) return hataMesaji(playerid, "Bu komut þu anda kullanýlamaz.");

	static oyuncuid;
	if(sscanf(params, "u", oyuncuid)) return kullanimMesaji(playerid, "/izle [oyuncu id/isim]");

	if(!IsPlayerConnected(oyuncuid)) return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(oyuncuid == playerid) return hataMesaji(playerid, "Kendini izleyemezsin.");
	if(!oyuncuData[oyuncuid][oGiris]) return hataMesaji(playerid, "Oyuncu giriþ yapmamýþ, izlenebilir durumda deðil.");
	if(oyuncuData[oyuncuid][oSpecengel] == 1) return hataMesaji(playerid, "Girilen oyuncu izlenebilir durumda deðil.");
	if(oyuncuData[playerid][oAdmin] < 8)
	{
		if(oyuncuData[oyuncuid][oID] == 1 || IsPlayerAdmin(oyuncuid)) return hataMesaji(playerid, "Girilen oyuncu izlenemez.");
	}
	if(oyuncuData[oyuncuid][oIzlenen] != INVALID_PLAYER_ID) return hataMesaji(playerid, "Girilen oyuncu izlenebilir durumda deðil.");

	if(GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
	{
		GetPlayerPos(playerid, eskipos[playerid][0], eskipos[playerid][1], eskipos[playerid][2]);
		GetPlayerFacingAngle(playerid, eskipos[playerid][3]);
		eskiint[playerid] = GetPlayerInterior(playerid);
		eskiworld[playerid] = GetPlayerVirtualWorld(playerid);
	}

	TogglePlayerSpectating(playerid, true);
	if(IsPlayerInAnyVehicle(oyuncuid)) PlayerSpectateVehicle(playerid, GetPlayerVehicleID(oyuncuid));
	else PlayerSpectatePlayer(playerid, oyuncuid);
	SetPlayerInterior(playerid, GetPlayerInterior(oyuncuid));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(oyuncuid));
	oyuncuData[playerid][oIzlenen] = oyuncuid;
	SunucuMesaji(playerid, "%s adlý kiþiyi izliyorsunuz.", OyuncuIsim(oyuncuid));
	return 1;
}

CMD:izlebitir(playerid, params[])
{
	if(!oyuncuData[playerid][oAdmin]) return YetkinizYok(playerid);
	if(oyuncuData[playerid][oIzlenen] == INVALID_PLAYER_ID) return hataMesaji(playerid, "Kimseyi izlemiyorsunuz!");
	if(oyuncuData[playerid][oHapisSure][0] > 0 || oyuncuData[playerid][oHapisSure][1] > 0) return hataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oDonduruldu] > 0) return hataMesaji(playerid, "Bu komut þu anda kullanýlamaz.");

	oyuncuData[playerid][oIzlenen] = INVALID_PLAYER_ID;
	PlayerSpectatePlayer(playerid, INVALID_PLAYER_ID);
	PlayerSpectateVehicle(playerid, INVALID_VEHICLE_ID);
	SetSpawnInfo(playerid, 0, oyuncuData[playerid][oKiyafet], eskipos[playerid][0], eskipos[playerid][1], eskipos[playerid][2], eskipos[playerid][3], 0, 0, 0, 0, 0, 0);
	TogglePlayerSpectating(playerid, false);
	TogglePlayerControllable(playerid, false);
	SetTimerEx("oyuncucoz", 2000, false, "i", playerid);
	SetPlayerInterior(playerid, eskiint[playerid]);
	SetPlayerVirtualWorld(playerid, eskiworld[playerid]);
	SetTimerEx("skinduzelt", 100, false, "i", playerid);
	new query[180];
	mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `player_weapons` WHERE `weapon_userid` = '%d' AND `weapon_statusid` = '%d'", oyuncuData[playerid][oID], SILAH_OYUNCU_USTUNDE);
	mysql_tquery(g_SQL, query, "OnPlayerGetWeapons", "d", playerid);
	return 1;
}

CMD:idoldur(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 2) return YetkinizYok(playerid);

	static oyuncuid;
	if(sscanf(params, "u", oyuncuid))
		return kullanimMesaji(playerid, "/idoldur [oyuncu id/isim]");

	if(!IsPlayerConnected(oyuncuid))
		return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");

	if(playerid == oyuncuid && !IsPlayerAdmin(playerid) && oyuncuData[playerid][oAdmin] < 6)
		return hataMesaji(playerid, "Bu komutu kendi üzerinde kullanabilmek için en az seviye 6 yönetici olmalýsýn.");

	if(!oyuncuData[oyuncuid][oGiris])
		return hataMesaji(playerid, "Oyuncu giriþ yapmamýþ, giriþ yapmasýný bekleyin.");

	oyuncuData[oyuncuid][oAclik] = 100;
	oyuncuData[oyuncuid][oSusuzluk] = 100;
	CanDuzenle(oyuncuid, 100);
	if(GetPlayerDrunkLevel(oyuncuid) > 30000) SetPlayerDrunkLevel(oyuncuid, 0);
	SunucuMesaji(playerid, "%s adlý kiþinin açlýk ve susuzluk gereksinimini karþýladýn.", OyuncuIsim(oyuncuid));
	SunucuMesaji(oyuncuid, "%s adlý yönetici tarafýndan açlýk ve susuzluk gereksinimin karþýlandý.", oyuncuData[playerid][oAdminNick]);
	return 1;
}

CMD:aisimdegistir(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 7) return YetkinizYok(playerid);

	static oyuncuid, isim[32], query[128];
	if(sscanf(params, "us[32]", oyuncuid, isim))
		return kullanimMesaji(playerid, "/aisimdegistir [oyuncu id/isim] [yeni isim]");

	if(!RolePlayIsimKontrol(isim))
		return hataMesaji(playerid, "Girilen isim roleplay formatýna uygun olmalýdýr. (ÖRN: John_Doe)");

	if(!IsPlayerConnected(oyuncuid))
		return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");

	if(playerid == oyuncuid && !IsPlayerAdmin(playerid) && oyuncuData[playerid][oAdmin] < 6)
		return hataMesaji(playerid, "Kendi ismini deðiþtirebilmek için en az 6 seviye yönetici olman gerekiyor.");

	if(!oyuncuData[oyuncuid][oGiris]) return hataMesaji(playerid, "Oyuncu giriþ yapmamýþ, giriþ yapmasýný bekleyin.");
	if(oyuncuData[oyuncuid][oAdminDurum] == true) return hataMesaji(playerid, "Girilen oyuncu iþbaþýnda olduðu için isim deðiþtirme uygulanamaz.");

	mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM oyuncular WHERE isim = '%e'", isim);
	mysql_tquery(g_SQL, query, "isimarat", "dds", playerid, oyuncuid, isim); // playerid, oyuncuid, isim[]
return 1;
}

CMD:cc(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 4) return YetkinizYok(playerid);

	for (new i = 0; i < 100; i ++) {
		SendClientMessageToAll(-1, "");
	}
	YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s adlý yönetici sunucu ekranýný temizledi.", oyuncuData[playerid][oAdminNick]);
	return 1;
}

CMD:chatimisil(playerid, params[])
{
	SohbetTemizle(playerid, true);
	return 1;
}

CMD:posgit(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 1) return YetkinizYok(playerid);
	if(oyuncuData[playerid][oHapisSure][0] > 0) return hataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");

	static Float:x, Float:y, Float:z, interior;
	if(sscanf(params, "p<,>fffd", x, y, z, interior))
		return kullanimMesaji(playerid, "/posgit [x] [y] [z] [interior]");

	SetPlayerPos(playerid, x, y, z);
	SetPlayerInterior(playerid, interior);
	SunucuMesaji(playerid, "Girilen kordinatlara ýþýnlandýn.");
	return 1;
}

CMD:restart(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 8) return YetkinizYok(playerid);

	if(restart) {
		KillTimer(restarttimer);
		restart = false;
		SCM_ExAll(RENK_YETKILI, "[YETKÝLÝ ÝÞLEM]: {FFFFFF}%s adlý yetkili otomatik restart iþlemini iptal etti.", oyuncuData[playerid][oAdminNick]);
		return 1;
	}
	static saniye, sebep[32];
	if(sscanf(params, "ds[32]", saniye, sebep)) return kullanimMesaji(playerid, "/restart [saniye] [sebep]");
	if(saniye < 1 || saniye > 900) return hataMesaji(playerid, "Girilen süre en az 1 saniye, en fazla 900 saniye olabilir.");
	if(isnull(sebep)) return hataMesaji(playerid, "Bir sebep belirtmelisin.");

	restarttimer = SetTimer("SunucuRestart", saniye * 1000, false);
	restart = true;
	sebep[0] = IlkHarfBuyut(sebep[0]);
	SCM_ExAll(RENK_YETKILI, "[YETKÝLÝ ÝÞLEM]: {FFFFFF}%s adlý yetkili sunucuyu %s sebebiyle, %d saniye sonra restartlayacak.", oyuncuData[playerid][oAdminNick], sebep, saniye);
	return 1;
}

CMD:baliktest(playerid, params[]) {
	if(oyuncuData[playerid][oAdmin] < 1) return YetkinizYok(playerid);
	new kod,icerik[180];
	kod = KodOlustur();
	format(icerik, sizeof(icerik), "Lütfen balýk tutabilmeye devam edebilmek için kodu girin {F5E600}(%d):", kod);
	SetPVarInt(playerid, "antibot", kod);
	ShowPlayerDialog(playerid, DIALOG_BALIKONAY, DIALOG_STYLE_INPUT, "Anti-Bot",icerik, "Tamam", "Iptal");
	SunucuMesaji(playerid, "Lütfen dialog ekranýna belirtilen kodu giriniz.");
	return 1;
}

CMD:yuzdehesap(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 1) return YetkinizYok(playerid);
	new sayi, yuzde;
	if(sscanf(params, "dd", sayi, yuzde)) return kullanimMesaji(playerid, "/yuzdehesap [sayi] [yuzde]");
	SunucuMesaji(playerid, "Sonuç: %d", YuzdeHesapla(sayi,yuzde));
	return 1;
}

CMD:yuzdeayarla(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 8) return YetkinizYok(playerid);
	new yuzde;
	if(sscanf(params, "d", yuzde)) return kullanimMesaji(playerid, "/yuzdeayarla [yuzde]");
	SERVER_YUZDE = yuzde;
	SunucuMesaji(playerid, "Artýk sistemsel ev,iþyeri,araç satýþlarýnda fiyatýn yüzde %d'si alýnacak.", yuzde);
	return 1;
}

CMD:ayetkiduzenle(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 7) return YetkinizYok(playerid);
	new sqlid, seviye, query[256], Cache:Veri;
	if(sscanf(params, "dd", sqlid, seviye)) return kullanimMesaji(playerid, "/ayetkiduzenle [sqlid] [seviye]");
	mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `oyuncular` WHERE `ID` = '%d'", sqlid);
	Veri = mysql_query(g_SQL, query);
	new rows = cache_num_rows();
	if(rows)
	{
		new kullanici[MAX_PLAYER_NAME + 1];
		format(kullanici, sizeof(kullanici), "%s", vericek_varchar(0, "isim"));
		if(OyuncuIDcek(kullanici) != INVALID_PLAYER_ID)
		{
			oyuncuData[OyuncuIDcek(kullanici)][oAdmin] = seviye;
			HesapKaydet(OyuncuIDcek(kullanici));
		}
		YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s adlý yönetici %s(%d) adlý kullanýcýnýn yetki seviyesini %d olarak deðiþtirdi.", oyuncuData[playerid][oAdminNick], kullanici, sqlid, seviye);
		mysql_format(g_SQL, query, sizeof(query), "UPDATE `oyuncular` SET `Admin` = '%d' WHERE `ID` = '%d' LIMIT 1", seviye, sqlid);
		mysql_query(g_SQL, query);
	}
	else hataMesaji(playerid, "Girilen SQL ile eþleþen kullanýcý bulunamadý.");
	cache_delete(Veri);
	return 1;
}

CMD:yetkili(playerid, params[])
{
	new sayi = 0;
	foreach (new i : Player)
	{
		if(oyuncuData[i][oAdminGizle] == false)
		{
			if(oyuncuData[i][oAdmin] > 0)
			{
				sayi++;
				if(sayi == 1){SCM_Ex(playerid, RENK_GRI, "Aktif Yetkililer:");}
				SCM_Ex(playerid, RENK_KLASIK, "%s %s(ID:%d) | Awork: %s", adminlevelisim(i, oyuncuData[i][oAdmin]), oyuncuData[i][oAdminNick], i, (oyuncuData[i][oAdminDurum] == true) ? ("{48FC64}Evet") : ("Hayýr"));
			}
		}
	}
	if(!sayi) return hataMesaji(playerid, "Müsait yetkili bulunamadý.");
	return 1;
}

CMD:agizle(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 6) return YetkinizYok(playerid);
	switch(oyuncuData[playerid][oAdminGizle])
	{
		case false: oyuncuData[playerid][oAdminGizle] = true, SunucuMesaji(playerid, "Artýk ismin admin listesinde gözükmeyecek.");
		case true: oyuncuData[playerid][oAdminGizle] = false, SunucuMesaji(playerid, "Artýk ismin admin listesinde gözükecek.");
	}
	return 1;
}

CMD:sokaktansesler(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 4) return YetkinizYok(playerid);
	if(isnull(params)) return kullanimMesaji(playerid, "/sokaktansesler [metin]");

	new string[192];
	SetPVarString(playerid, "sokaktanseslermesaj", params);
	format(string, sizeof(string), "Mesajýnýz gönderilecek: %s\nOnaylýyor musunuz?", params);
	Dialog_Show(playerid, sokaktansesleronay, DIALOG_STYLE_MSGBOX, "OOC Duyuru Onay", string, "Onayla", "Ýptal");
	return 1;
}

Dialog:sokaktansesleronay(playerid, response, listitem, inputtext[]){
	if(response){
	new ssmesaj[144];
	GetPVarString(playerid, "sokaktanseslermesaj", ssmesaj, 144);
	foreach (new i : Player) {
		SCM_Ex(i, RENK_SOKAKTANSESLER, "(( Sokaktan Sesler: %s ))", ssmesaj);
	}
	//new str[256];
	//format(str, sizeof(str), "(( Sokaktan Sesler: %s))", ssmesaj);
	//DCMesaj(str,1);
	SetPVarString(playerid, "sokaktanseslermesaj", "");
	DeletePVar(playerid, "sokaktanseslermesaj");
}
else{
	SetPVarString(playerid, "sokaktanseslermesaj", "");
	DeletePVar(playerid, "sokaktanseslermesaj");
	SunucuMesaji(playerid, "Sokaktan sesler mesajý iptal edildi.");
}
return 1;
}

CMD:ooc(playerid, params[])
{
	if(!oockanal && !IsPlayerAdmin(playerid) && oyuncuData[playerid][oAdmin] < 6)
		return hataMesaji(playerid, "OOC kanal yönetici tarafýndan kapatýlmýþ.");

	if(isnull(params))
		return kullanimMesaji(playerid, "/ooc [ooc kanal]");
	new string[192];
	SetPVarString(playerid, "oocduyurumesaj", params);
	format(string, sizeof(string), "Mesajýnýz gönderilecek: %s\nOnaylýyor musunuz?", params);
	Dialog_Show(playerid, oocduyuruonay, DIALOG_STYLE_MSGBOX, "OOC Duyuru Onay", string, "Onayla", "Ýptal");
	return 1;
}

Dialog:oocduyuruonay(playerid, response, listitem, inputtext[]){
	if(response){
	new duyurumesaj[144];
	GetPVarString(playerid, "oocduyurumesaj", duyurumesaj, 144);
	foreach(new i : Player) if(oyuncuData[i][oGiris])
	{
		SCM_Ex(i, RENK_SERVER, "(( {C40000}%s %s{FFFFFF}: %s ))", adminlevelisim(playerid, oyuncuData[playerid][oAdmin]), oyuncuData[playerid][oAdminNick], duyurumesaj);
	}
	SetPVarString(playerid, "oocduyurumesaj", "");
	DeletePVar(playerid, "oocduyurumesaj");
}
else{
	SetPVarString(playerid, "oocduyurumesaj", "");
	DeletePVar(playerid, "oocduyurumesaj");
	SunucuMesaji(playerid, "Duyuru iptal edildi.");
}
return 1;
}

CMD:oocdurum(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 7)
		return YetkinizYok(playerid);

	switch(oockanal) {
		case false: {
			oockanal = true;
			SunucuMesaji(playerid, "OOC kanal aktif edildi.");
		}
		case true: {
			oockanal = false;
			SunucuMesaji(playerid, "OOC kanal de-aktif edildi.");
		}
	}
	return 1;
}

CMD:b(playerid, params[])
{
	if(isnull(params)) return kullanimMesaji(playerid, "/b [yazý]");
	if(GetPVarInt(playerid,"oyuncuyayinda") == 1) return false;
	new string[148];
	if(oyuncuData[playerid][oAdminDurum] == true)
	{
		format(string, sizeof(string), "{DAD9DD}(( [%d] {C40000}%s: {DAD9DD}%s ))", playerid, OyuncuIsim(playerid), params);
	}
	else format(string, sizeof(string), "(( [%d] %s: %s ))", playerid, OyuncuIsim(playerid), params);
	SendNearbyMessage(playerid, 20.0, string, -1, RENK_YAZI_1, RENK_YAZI_2, RENK_YAZI_3, RENK_YAZI_4, true);
	return 1;
}

CMD:bagir(playerid, params[])
{
	if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Baygýn durumdayken baðýramazsýn.");
	if(isnull(params))
		return kullanimMesaji(playerid, "/bagir [yazý]");
	if(GetPVarInt(playerid,"oyuncuyayinda") == 1) return false;

	OzelYakinMesaj(playerid, 25.0, RENK_BEYAZ, "%s (baðýrýr): %s", OyuncuIsim(playerid), params);
	return 1;
}

CMD:id(playerid, params[])
{
	new cek = 0, userid;
	if (isnull(params)) return kullanimMesaji(playerid, "/id [isim/id]");
	foreach (new i : Player)
	{
		if (strfind(OyuncuIsim(i), params, true) != -1)
		{
			SCM_Ex(playerid, RENK_BEYAZ, "ID: %d - Ýsim: %s - Level: %d - Ping: %d", i, OyuncuIsim(i), oyuncuData[i][oSeviye], GetPlayerPing(i));
			cek++;
		}
	}
	if(!cek)
	{
		if(!sscanf(params, "u", userid)) {
			if(IsPlayerConnected(userid)) {
				SCM_Ex(playerid, RENK_BEYAZ, "ID: %d - Ýsim: %s - Level: %d - Ping: %d", userid, OyuncuIsim(userid), oyuncuData[userid][oSeviye], GetPlayerPing(userid));
				cek++;
			}
		}
	}
	if (!cek) return hataMesaji(playerid, "\"%s\" adýna sonuç bulunamadý.", params);
	return 1;
}

CMD:kses(playerid, params[])
{
	if(isnull(params))
		return kullanimMesaji(playerid, "/kses [yazý]");
	if(GetPVarInt(playerid,"oyuncuyayinda") == 1) return false;
	OzelYakinMesaj(playerid, 2.6, RENK_BEYAZ, "%s (kýsýk ses): %s", OyuncuIsim(playerid), params);
	return 1;
}

CMD:y(playerid, params[])
{
	if(!oyuncuData[playerid][oAdmin])
		return YetkinizYok(playerid);

	if(!akanal)
		return hataMesaji(playerid, "Yönetici sohbet kanalý üst düzey bir yetkili tarafýndan kapatýlmýþ.");

	if(isnull(params))
		return kullanimMesaji(playerid, "/y [yönetici kanalý]");

	YoneticiMesaji(RENK_BEYAZ, "{0DFF00}%s %s: {CDCDCD}%s", adminlevelisim(playerid, oyuncuData[playerid][oAdmin]), OyuncuIsim(playerid), params);
	return 1;
}

CMD:sc(playerid, params[])
{
	if(!oyuncuData[playerid][oHelper] && !oyuncuData[playerid][oAdmin])
		return YetkinizYok(playerid);

	if(isnull(params))
		return kullanimMesaji(playerid, "/ts [support-yönetici kanalý]");
	if(oyuncuData[playerid][oAdmin] > 0) {
		TesterMesaji(RENK_ACIKKIRMIZI, "%s %s: {FFFFFF}%s", adminlevelisim(playerid, oyuncuData[playerid][oAdmin]), oyuncuData[playerid][oAdminNick], params);
	}
	else if(oyuncuData[playerid][oHelper] > 0) {
		TesterMesaji(RENK_ACIKKIRMIZI, "Seviye %d Support %s: {FFFFFF}%s", oyuncuData[playerid][oHelper], OyuncuIsim(playerid), params);
	}
	return 1;
}

CMD:ekipmesajdurum(playerid, params[])
{
	if(!oyuncuData[playerid][oHelper] && !oyuncuData[playerid][oAdmin])
		return YetkinizYok(playerid);

	if(oyuncuData[playerid][oAMesajKapat] == 0)
	{
		oyuncuData[playerid][oAMesajKapat] = 1;
		SunucuMesaji(playerid, "Ekip mesajlarýný almayý kapattýn.");
	}
	else
	{
		oyuncuData[playerid][oAMesajKapat] = 0;
		SunucuMesaji(playerid, "Ekip mesajlarýný almayý açtýn.");
	}
	return 1;
}

CMD:ykanaldurum(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 6) return YetkinizYok(playerid);

	switch(akanal) {
		case true: {
			akanal = false;
			SunucuMesaji(playerid, "Yönetici sohbet kanalý kapatýldý.");
		}
		case false: {
			akanal = true;
			SunucuMesaji(playerid, "Yönetici sohbet kanalý açýldý.");
		}
	}
	return 1;
}

CMD:ycanver(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 1) return YetkinizYok(playerid);

	static Float:can, sayi;
	if(sscanf(params, "f", can))
		return kullanimMesaji(playerid, "/ycanver [can deðeri]");

	if(can < 0 || can > 100)
		return hataMesaji(playerid, "Girilen can deðeri geçersizdir.");

	sayi = 0;
	foreach(new i: Player) if(YakinlikKontrol(playerid, i, 20.0)) {
		CanDuzenle(i, can);
		sayi++;
	}
	SunucuMesaji(playerid, "Kendin dahil %d adet kiþinin can deðerini %.0f olarak deðiþtirdin.", sayi, can);
	return 1;
}

CMD:yzirhver(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 7) return YetkinizYok(playerid);

	static Float:zirh, sayi;
	if(sscanf(params, "f", zirh))
		return kullanimMesaji(playerid, "/yzirhver [zýrh deðeri]");

	if(zirh < 0 || zirh > 100)
		return hataMesaji(playerid, "Girilen zýrh deðeri geçersizdir.");

	sayi = 0;
	foreach(new i: Player) if(YakinlikKontrol(playerid, i, 20.0)) {
		ZirhDuzenle(i, zirh);
		sayi++;
	}
	SunucuMesaji(playerid, "Kendin dahil %d adet kiþinin zýrh deðerini %.0f olarak deðiþtirdin.", sayi, zirh);
	return 1;
}

CMD:ydondur(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 2) return YetkinizYok(playerid);
	new komut[8];
	foreach(new i: Player) if(YakinlikKontrol(playerid, i, 20.0)) {
		TogglePlayerControllable(i, false);
		format(komut, sizeof(komut), "dondur %d", i);
		cmd(playerid, 0, komut);
	}
	return 1;
}

CMD:ycoz(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 2) return YetkinizYok(playerid);
	new komut[8];
	foreach(new i: Player) if(YakinlikKontrol(playerid, i, 20.0)) {
		TogglePlayerControllable(i, true);
		format(komut, sizeof(komut), "coz %d", i);
		cmd(playerid, 0, komut);
	}
	return 1;
}
CMD:coz(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 1) return YetkinizYok(playerid);

	static oyuncu;
	if(sscanf(params, "u", oyuncu)) return kullanimMesaji(playerid, "/coz [oyuncu id/isim]");

	if(!IsPlayerConnected(oyuncu)) return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(oyuncuData[oyuncu][oYarali] == true) return hataMesaji(playerid, "Yaralý bir oyuncuyu çözemezsin.");

	TogglePlayerControllable(oyuncu, true);
	oyuncuData[oyuncu][oKontrol] = true;
	oyuncuData[oyuncu][oDonduruldu] = 0;
	SunucuMesaji(playerid, "%s adlý kiþiyi çözdün.", OyuncuIsim(oyuncu));
	SunucuMesaji(oyuncu, "%s seni çözdü.", oyuncuData[playerid][oAdminNick]);
	return 1;
}

CMD:dondur(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 1) return YetkinizYok(playerid);

	static oyuncu;
	if(sscanf(params, "u", oyuncu))
		return kullanimMesaji(playerid, "/dondur [oyuncu id/isim]");

	if(!IsPlayerConnected(oyuncu))
		return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");

	TogglePlayerControllable(oyuncu, false);
	oyuncuData[oyuncu][oKontrol] = false;
	SunucuMesaji(playerid, "%s adlý kiþiyi dondurdun.", OyuncuIsim(oyuncu));
	SunucuMesaji(oyuncu, "%s tarafýndan donduruldun.", oyuncuData[playerid][oAdminNick]);
	return 1;
}

CMD:kayitdurum(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 7) return YetkinizYok(playerid);

	switch(kayitdurum) {
		case false: {
			kayitdurum = true;
			YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s oyuniçi kayýtlarý aktif etti.", oyuncuData[playerid][oAdminNick]);
		}
		case true: {
			kayitdurum = false;
			YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s oyuniçi kayýtlarý kapattý.", oyuncuData[playerid][oAdminNick]);
		}
	}
	return 1;
}

CMD:ilkharfbuyut(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 7) return YetkinizYok(playerid);

	switch(ilkharf) {
		case false: {
			ilkharf = true;
			YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s otomatik ilk harf büyütme sistemini açtý.", oyuncuData[playerid][oAdminNick]);
		}
		case true: {
			ilkharf = false;
			YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s otomatik ilk harf büyütme sistemini kapattý.", oyuncuData[playerid][oAdminNick]);
		}
	}
	return 1;
}

CMD:level1(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 1 && !IsPlayerAdmin(playerid)) return YetkinizYok(playerid);
	static bilgi[2048], sayi;
	bilgi[0] = 0;
	sayi = 0;
	format(bilgi, sizeof(bilgi), "Oyuncu\tOynama Saati\tID\n");
	foreach(new i : Player) if(oyuncuData[i][oSeviye] == 1 && oyuncuData[i][oGiris] == true)
	{
		format(bilgi, sizeof(bilgi), "%s%s\t%d\t%d\n", bilgi, OyuncuIsim(i), oyuncuData[i][oOynamaSaati], i);
		sayi++;
	}
	if(!sayi) return hataMesaji(playerid, "Sunucuda seviye 1 oyuncu bulunmuyor.");
	DialogGoster(playerid, 0, DIALOG_STYLE_TABLIST_HEADERS, "> Seviye 1 Oyuncular", bilgi, "Tamam", "");
	return 1;
}

CMD:adminyap(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 8 && !IsPlayerAdmin(playerid)) return YetkinizYok(playerid);

	static oyuncu, adminleveli;
	if(sscanf(params, "ud", oyuncu, adminleveli))
		return kullanimMesaji(playerid, "/adminyap [oyuncu isim/id] [admin leveli]");

	if(adminleveli < 0 || adminleveli > 9)
		return hataMesaji(playerid, "Girilen yönetici seviyesi geçersizdir. (0-9)");

	if(!IsPlayerConnected(oyuncu))
		return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");

	if(oyuncu == playerid && !IsPlayerAdmin(playerid))
		return hataMesaji(playerid, "Kendi yönetici seviyeni deðiþtiremezsin.");

	if(oyuncuData[oyuncu][oAdmin] == adminleveli)
		return hataMesaji(playerid, "Oyuncu zaten bu seviye yöneticiliðe sahip.");

	if(adminleveli > oyuncuData[playerid][oAdmin] && !IsPlayerAdmin(playerid))
		return hataMesaji(playerid, "Kendinden yüksek seviye yöneticilik veremezsin.");

	if(oyuncuData[playerid][oAdmin] < oyuncuData[oyuncu][oAdmin] && !IsPlayerAdmin(playerid))
		return hataMesaji(playerid, "Kendinden yüksek seviye bir yöneticinin seviyesini deðiþtiremezsin.");

	if(oyuncuData[oyuncu][oAdmin] < adminleveli) {
		SunucuMesaji(playerid, "%s adlý kiþinin yönetici seviyesini %d olarak yükselttin.", OyuncuIsim(oyuncu), adminleveli);
		SunucuMesaji(oyuncu, "%s adlý yönetici tarafýndan yönetici seviyen %d olarak yükseltildi.", oyuncuData[playerid][oAdminNick], adminleveli);
	}
	else if(adminleveli == 0) {
		SunucuMesaji(playerid, "%s adlý kiþiyi yönetici kadrosundan çýkardýn.", OyuncuIsim(oyuncu));
		SunucuMesaji(oyuncu, "%s adlý kiþi tarafýndan yönetim kadrosundan çýkarýldýn.", oyuncuData[playerid][oAdminNick]);
		if(oyuncuData[oyuncu][oIzlenen] != INVALID_PLAYER_ID) cmd(oyuncu, 0, "izlebitir");
		if(oyuncuData[oyuncu][oAdminDurum] == true) cmd(oyuncu, 0, "yisbasi");
		format(oyuncuData[oyuncu][oAdminNick], 32, "Yok");
	}
	else if(oyuncuData[oyuncu][oAdmin] > adminleveli) {
		SunucuMesaji(playerid, "%s adlý yöneticinin yönetici seviyesini %d olarak düþürdün.", OyuncuIsim(oyuncu), adminleveli);
		SunucuMesaji(oyuncu, "%s adlý yönetici tarafýndan yönetici seviyen %d olarak düþürüldü.", oyuncuData[playerid][oAdminNick], adminleveli);
	}
	oyuncuData[oyuncu][oAdmin] = adminleveli;
	if(adminleveli > 0 && oyuncuData[oyuncu][oHelper] > 0) oyuncuData[oyuncu][oHelper] = 0;
	HesapKaydet(oyuncu);
	Log_Kaydet("loglar/admin_log.txt", "[%s] %s adlý yönetici %s adlý kiþinin yönetici seviyesini %d olarak deðiþtirdi.", Tarih(), oyuncuData[playerid][oAdminNick], OyuncuIsim(oyuncu), adminleveli);
	return 1;
}

CMD:anick(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 6 && !IsPlayerAdmin(playerid))
		return YetkinizYok(playerid);

	static oyuncuid, isim[20];
	if(sscanf(params, "us[20]", oyuncuid, isim))
		return kullanimMesaji(playerid, "/anick [oyuncu isim/id] [nick]");

	if(!IsPlayerConnected(oyuncuid))
		return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");

	if(!oyuncuData[oyuncuid][oAdmin])
		return hataMesaji(playerid, "Girilen kiþi yönetici deðil.");

	if(oyuncuData[oyuncuid][oAdminDurum])
		return hataMesaji(playerid, "Bu yönetici iþbaþýnda ismini deðiþtirebilmek için iþbaþýndan çýkmalýdýr.");

	if(strlen(isim) < 3 || strlen(isim) > 20)
	{
		hataMesaji(playerid, "Ýsim 3 karakterden az, 20 karakterden fazla olamaz.");
		return 1;
	}
	if(!strcmp(isim, "Yok", true))
		return hataMesaji(playerid, "Girilen yönetici ismi geçersizdir.");

	format(oyuncuData[oyuncuid][oAdminNick], 20, "%s", isim);
	OyuncuKaydet(oyuncuid);
	SunucuMesaji(playerid, "%s adlý kiþinin yönetici ismini %s olarak deðiþtirdin.", OyuncuIsim(oyuncuid), isim);
	SunucuMesaji(oyuncuid, "%s adlý yönetici, yönetici ismini %s olarak deðiþtirdi.", oyuncuData[playerid][oAdminNick], isim);
	Log_Kaydet("loglar/admin_log.txt", "[%s] %s adlý yönetici %s adlý kiþinin yönetici ismini %s yaptý.", Tarih(), oyuncuData[playerid][oAdminNick], OyuncuIsim(oyuncuid), isim);
	return 1;
}

CMD:aforumnick(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 6 && !IsPlayerAdmin(playerid))
		return YetkinizYok(playerid);

	static oyuncu, isim[24];
	if(sscanf(params, "us[24]", oyuncu, isim))
		return kullanimMesaji(playerid, "/aforumnick [oyuncu isim/id] [nick]");

	if(!IsPlayerConnected(oyuncu)) return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(strlen(isim) < 3 || strlen(isim) > 24)
	{
		hataMesaji(playerid, "Ýsim 3 karakterden az, 24 karakterden fazla olamaz.");
		return 1;
	}
	format(oyuncuData[oyuncu][oForumAdi], 24, "%s", isim);
	OyuncuKaydet(oyuncu);
	SunucuMesaji(playerid, "%s adlý kiþinin hesabýna baðlý forum hesabýný %s olarak deðiþtirdin.", OyuncuIsim(oyuncu), isim);
	SunucuMesaji(oyuncu, "%s adlý yönetici hesabýna baðlý forum hesabýný %s olarak deðiþtirdi.", oyuncuData[playerid][oAdminNick], isim);
	return 1;
}

CMD:tisbasi(playerid, params[])
{
	if(!oyuncuData[playerid][oHelper]) return YetkinizYok(playerid);
	switch(oyuncuData[playerid][oHelperIsbasi]) {
		case true: {
			SunucuMesaji(playerid, "Tester iþbaþýndan çýktýn.");
			oyuncuData[playerid][oHelperIsbasi] = false;
		}
		case false: {
			SunucuMesaji(playerid, "Tester iþbaþýna geçtin.");
			oyuncuData[playerid][oHelperIsbasi] = true;
		}
	}
	return 1;
}

CMD:vcgod(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 8) return YetkinizYok(playerid);
	if(GodMode[playerid] == true)
	{
		GodMode[playerid] = false, SunucuMesaji(playerid, "Tanrý modu pasif.");
	}
	else GodMode[playerid] = true, SunucuMesaji(playerid, "Tanrý modu aktif.");
	return 1;
}

CMD:yisbasi(playerid, params[])
{
	if(!oyuncuData[playerid][oAdmin]) return YetkinizYok(playerid);
	if(!strcmp(oyuncuData[playerid][oAdminNick], "Yok", true)) return hataMesaji(playerid, "Ýþbaþý yapmak için bir yönetici ismine ihtiyacýn var.");
	if(oyuncuData[playerid][oDestek] == true) return hataMesaji(playerid, "Desteðin açýkken yönetici iþbaþýna geçemezsin.");
	if(oyuncuData[playerid][oCevaplandi] == true) return hataMesaji(playerid, "Aramada iken iþbaþý yapamazsýn.");
	if(oyuncuData[playerid][oHapisSure][0] > 0 || oyuncuData[playerid][oHapisSure][1] > 0) return hataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oYaraliSure] > 1) return hataMesaji(playerid, "Yaralýyken iþbaþý yapamazsýn.");

	switch(oyuncuData[playerid][oAdminDurum]) {
		case true: {
			SunucuMesaji(playerid, "Yönetici iþbaþýndan çýktýn.");
			KillTimer(GateAraTimer[playerid]);
			PlayerTextDrawHide(playerid, GateTextdraw[playerid]);
			oyuncuData[playerid][oAdminDurum] = false;
		}
		case false: {
			SunucuMesaji(playerid, "Yönetici iþbaþýna geçtin.");
			GateAraTimer[playerid] = SetTimerEx("GateArama", 700, true, "d", playerid);
			oyuncuData[playerid][oAdminDurum] = true;
		}
	}
	return 1;
}

CMD:herkesecan(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 5 && !IsPlayerAdmin(playerid)) return YetkinizYok(playerid);
	static sayi;
	sayi = 0;
	foreach(new i : Player) if(oyuncuData[i][oGiris] == true) {
		CanDuzenle(i, 100.0);
		sayi++;
	}
	YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s sunucudaki tüm oyuncularýn(%d) canýný doldurdu.", oyuncuData[playerid][oAdminNick], sayi);
	return 1;
}

CMD:herkesezirh(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 7 && !IsPlayerAdmin(playerid)) return YetkinizYok(playerid);
	static sayi;
	sayi = 0;
	foreach(new i : Player) if(oyuncuData[i][oGiris] == true) {
		ZirhDuzenle(i, 100.0);
		sayi++;
	}
	YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s sunucudaki tüm oyuncularýn(%d) zýrhýný doldurdu.", oyuncuData[playerid][oAdminNick], sayi);
	return 1;
}

CMD:canver(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 1 && !IsPlayerAdmin(playerid)) return YetkinizYok(playerid);
	static oyuncu, Float:can;
	if(sscanf(params, "uf", oyuncu, can))
		return kullanimMesaji(playerid, "/canver [oyuncu isim/id] [can]");

	if(can < 0 || can > 100) return hataMesaji(playerid, "Girilen can deðeri geçersizdir.");
	if(!IsPlayerConnected(oyuncu)) return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(oyuncuData[playerid][oAdmin] < oyuncuData[oyuncu][oAdmin]) return hataMesaji(playerid, "Girilen kiþi sizden yüksek seviye yöneticiliðe sahip.");

	CanDuzenle(oyuncu, can);
	SunucuMesaji(playerid, "%s adlý oyuncunun can deðerini %.0f olarak deðiþtirdin.", OyuncuIsim(oyuncu), can);
	Log_Kaydet("loglar/admin_log.txt", "[%s] %s, %s adlý kiþinin canýný %.0f olarak deðiþtirdi.", Tarih(), oyuncuData[playerid][oAdminNick], OyuncuIsim(oyuncu), can);
	return 1;
}

CMD:zirhver(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 7 && !IsPlayerAdmin(playerid)) return YetkinizYok(playerid);
	static oyuncuid, Float:zirh;
	if(sscanf(params, "uf", oyuncuid, zirh))
		return kullanimMesaji(playerid, "/zirhver [oyuncu isim/id] [zýrh]");

	if(zirh < 0 || zirh > 100) return hataMesaji(playerid, "Girilen zýrh deðeri geçersizdir.");
	if(!IsPlayerConnected(oyuncuid)) return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(oyuncuData[playerid][oAdmin] < oyuncuData[oyuncuid][oAdmin]) return hataMesaji(playerid, "Girilen kiþi sizden yüksek seviye yöneticiliðe sahip.");

	ZirhDuzenle(oyuncuid, zirh);
	SunucuMesaji(playerid, "%s adlý oyuncunun zýrh deðerini %.0f olarak deðiþtirdin.", OyuncuIsim(oyuncuid), zirh);
	Log_Kaydet("loglar/admin_log.txt", "[%s] %s, %s adlý kiþinin zýrhýný %.0f olarak deðiþtirdi.", Tarih(), oyuncuData[playerid][oAdminNick], OyuncuIsim(oyuncuid), zirh);
	return 1;
}

CMD:akdegistir(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 1) return YetkinizYok(playerid);
	static oyuncuid, kiyafet;
	if(sscanf(params, "ud", oyuncuid, kiyafet))
		return kullanimMesaji(playerid, "/akdegistir [oyuncu isim/id] [kiyafet id]");

	if(!IsPlayerConnected(oyuncuid)) return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(kiyafet < 1 || kiyafet == 74) return hataMesaji(playerid, "Girilen kýyafet geçersiz.");
	if(oyuncuData[playerid][oAdmin] < oyuncuData[oyuncuid][oAdmin]) return hataMesaji(playerid, "Girilen kiþi sizden yüksek seviye yöneticiliðe sahip.");

	oyuncuData[oyuncuid][oKiyafet] = kiyafet;
	if(oyuncuData[oyuncuid][oGeciciKiyafet] == 0) SetPlayerSkin(oyuncuid, kiyafet);
	SunucuMesaji(playerid, "%s adlý kiþinin kýyafetini %d olarak deðiþtirdin.", OyuncuIsim(oyuncuid), kiyafet);
	SunucuMesaji(oyuncuid, "%s adlý yönetici tarafýndan kýyafetin %d olarak deðiþtirildi.", oyuncuData[playerid][oAdminNick], kiyafet);
	Log_Kaydet("loglar/admin_log.txt", "[%s] %s, %s adlý kiþiye %d kýyafetini verdi.", Tarih(), oyuncuData[playerid][oAdminNick], OyuncuIsim(oyuncuid), kiyafet);
	return 1;
}

CMD:spawnla(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 1 && oyuncuData[playerid][oHelper] < 1) return YetkinizYok(playerid);

	static oyuncuid;
	if(sscanf(params, "u", oyuncuid)) return kullanimMesaji(playerid, "/spawnla [playerid/isim]");

	if(!IsPlayerConnected(oyuncuid)) return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(!oyuncuData[oyuncuid][oGiris]) return hataMesaji(playerid, "Oyuncu giriþ yapmamýþ, komut üzerinde kullanýlamaz.");
	if(oyuncuData[playerid][oAdmin] < oyuncuData[oyuncuid][oAdmin]) return hataMesaji(playerid, "Girilen kiþi sizden yüksek seviye yöneticiliðe sahip.");
	if(oyuncuData[oyuncuid][oHapisSure][1] > 0) return hataMesaji(playerid, "Bu oyuncu hapiste, spawnlayamazsýnýz.");

	switch(GetPlayerState(oyuncuid)) {
		case PLAYER_STATE_DRIVER: BosAraciSpawnla(GetPlayerVehicleID(oyuncuid));
		default: OyuncuSpawnla(oyuncuid);
	}
	SetPlayerInterior(oyuncuid, 0);
	SetPlayerVirtualWorld(oyuncuid, 0);
	AdminMesaji(oyuncuid, "%s adlý yetkili sizi spawnladý.", oyuncuData[playerid][oAdminNick]);
	YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s adlý kiþi %s kiþisini spawnladý.", oyuncuData[playerid][oAdminNick], OyuncuIsim(oyuncuid));
	Log_Kaydet("loglar/admin_log.txt", "[%s] %s, %s adlý kiþiyi spawnladý.", Tarih(), oyuncuData[playerid][oAdminNick], OyuncuIsim(oyuncuid));
	return 1;
}

CMD:hesapsifirla(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 8) return YetkinizYok(playerid);

	static oyuncuid;
	if(sscanf(params, "u", oyuncuid)) return kullanimMesaji(playerid, "/hesapsifirla [playerid/isim]");

	if(!IsPlayerConnected(oyuncuid)) return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(!oyuncuData[oyuncuid][oGiris]) return hataMesaji(playerid, "Oyuncu giriþ yapmamýþ, komut üzerinde kullanýlamaz.");
	if(oyuncuData[playerid][oAdmin] < oyuncuData[oyuncuid][oAdmin]) return hataMesaji(playerid, "Girilen kiþi sizden yüksek seviye yöneticiliðe sahip.");

	switch(GetPlayerState(oyuncuid)) {
		case PLAYER_STATE_DRIVER: BosAraciSpawnla(GetPlayerVehicleID(oyuncuid));
		default: OyuncuSpawnla(oyuncuid);
	}
	SetPlayerInterior(oyuncuid, 0);
	SetPlayerVirtualWorld(oyuncuid, 0);
	new seviye = oyuncuData[oyuncuid][oAdmin];
	OyuncuSifirla(oyuncuid);
	SilahlariSifirla(oyuncuid);
	OyuncuCinsiyetSec(oyuncuid);
	oyuncuData[oyuncuid][oAdmin] = seviye;
	new query[256], vno6 = randomEx(10000000, 99999999);
	mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM oyuncular WHERE VatandaslikNo = '%d'", vno6);
	mysql_tquery(g_SQL, query, "vnoarat", "dd", playerid, vno6);
//AdminMesaji(playerid, "%s adlý kiþinin hesabýný sýfýrladýn.", OyuncuIsim(oyuncuid));
	AdminMesaji(oyuncuid, "%s adlý yetkili hesabýný sýfýrladý.", oyuncuData[playerid][oAdminNick]);
	YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s, %s adlý oyuncunun hesabýný sýfýrladý.", oyuncuData[playerid][oAdminNick], OyuncuIsim(oyuncuid));
	Log_Kaydet("loglar/admin_log.txt", "[%s] %s, %s adlý kiþinin hesabýný sýfýrladý.", Tarih(), oyuncuData[playerid][oAdminNick], OyuncuIsim(oyuncuid));
	return 1;
}

CMD:sme(playerid, params[])
{
	if(GetPVarInt(playerid,"oyuncuyayinda") == 1) return false;
	if (GetPVarInt(playerid, "duzkontakyapiyor") == 1) return hataMesaji(playerid, "Düz kontak yaparken bu komutu kullanamazsýn.");
	new sure, yazi[128];
	if(oyuncuData[playerid][oHapisSure][0] > 0) return hataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(sscanf(params, "ds[128]", sure, yazi)) return kullanimMesaji(playerid, "/sme [Saniye] [Özellik/Emote]");
	if(sure < 10 || sure > 300) return hataMesaji(playerid, "Süre minimum 10 maksimum 300 saniye olabilir.");
	if(strlen(yazi) > 128) return hataMesaji(playerid, "Emote 128 karakterden uzun olamaz.");
	new string[148 * 2];
	if (strlen(yazi) > 89)
	{
		format(string, sizeof(string), "* %s %.89s", OyuncuIsim(playerid), yazi);
		SCM_Ex(playerid, RENK_PEMBE, string);
		format(string, sizeof(string), "..%s", yazi[89]);
		SCM_Ex(playerid, RENK_PEMBE, string);
	}
	else
	{
		format(string, sizeof(string), "* %s %s", OyuncuIsim(playerid), yazi);
		SCM_Ex(playerid, RENK_PEMBE, string);
	}
	new gametext[32 * 4];
	format(gametext, sizeof(gametext), "* %s %s", OyuncuIsim(playerid), yazi);
	SetPlayerChatBubble(playerid, gametext, RENK_PEMBE, 15, sure * 1000);
	return 1;
}

CMD:me(playerid, params[])
{
    if(GetPVarInt(playerid,"oyuncuyayinda") == 1) return false;
	if (isnull(params))
	    return kullanimMesaji(playerid, "/me [eylem]");

	new action[256];
    strdel(action, 0, 256);
	strcat(action, params);
    if(strfind(action, "\"", true, 1) != -1)
	{
			new ilkdenden = strfind(action, "\"", true, 1);
			new sonrakidenden = strfind(action, "\"", true, ilkdenden+1);
			strins(action, "{FFFFFF}", ilkdenden);
			strins(action, "{C2A2DA}", sonrakidenden+9);
	}
	if(strlen(action) + MAX_PLAYER_NAME + 3 > 128) {
 	    OzelYakinMesaj(playerid, 15.0, RENK_PEMBE, "* %s %.120s", OyuncuIsim(playerid), action);
	    OzelYakinMesaj(playerid, 15.0, RENK_PEMBE, "...%s", action[120]);
	}
	else {
	    OzelYakinMesaj(playerid, 15.0, RENK_PEMBE, "* %s %s", OyuncuIsim(playerid), action);
	}
	return 1;
}

CMD:do(playerid, params[])
{
    if(GetPVarInt(playerid,"oyuncuyayinda") == 1) return false;
	if (isnull(params))
	    return kullanimMesaji(playerid, "/do [Durum]");

	if (strlen(params) > 120) {
	    OzelYakinMesaj(playerid, 15.0, 0x80CAADFF, "* %.120s", params);
	    OzelYakinMesaj(playerid, 15.0, 0x80CAADFF, "...%s (( %s ))", params[120], OyuncuIsim(playerid));
	}
	else {
	    OzelYakinMesaj(playerid, 15.0, 0x80CAADFF, "* %s (( %s ))", params, OyuncuIsim(playerid));
	}
	return 1;
}

CMD:ame(playerid, params[])
{
	if(GetPVarInt(playerid,"oyuncuyayinda") == 1) return false;
	if (GetPVarInt(playerid, "duzkontakyapiyor") == 1) return hataMesaji(playerid, "Düz kontak yaparken bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oHapisSure][0] > 0) return hataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(isnull(params)) return kullanimMesaji(playerid, "/ame [hareket]");
	static string[128];
	format(string, sizeof(string), "* %s %s", OyuncuIsim(playerid), params);
	SetPlayerChatBubble(playerid, string, RENK_PEMBE, 30.0, 10 * 1000);
	SCM_Ex(playerid, RENK_PEMBE, "* %s %s", OyuncuIsim(playerid), params);
	Log_Kaydet("loglar/ame_log.txt", "[%s] %s, /ame kullandi: %s", Tarih(), OyuncuIsim(playerid), params);
	return 1;
}

CMD:ado(playerid, params[])
{
	if(GetPVarInt(playerid,"oyuncuyayinda") == 1) return false;
	if (GetPVarInt(playerid, "duzkontakyapiyor") == 1) return hataMesaji(playerid, "Düz kontak yaparken bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oHapisSure][0] > 0) return hataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(isnull(params)) return kullanimMesaji(playerid, "/ado [durum]");

	static string[128];
	format(string, sizeof(string), "* %s (( %s ))", params, OyuncuIsim(playerid));
	SetPlayerChatBubble(playerid, string, RENK_DO, 30.0, 10 * 1000);
	SCM_Ex(playerid, RENK_DO, "* %s (( %s ))", params, OyuncuIsim(playerid));
	return 1;
}

CMD:agps(playerid, params[])
{
	new aracid, Float:arrPos[4];
	if(sscanf(params, "d", aracid)) return kullanimMesaji(playerid, "/agps [arac id]");
	new id = Arac_IDBul(aracid);
	if(Arac_SahipKontrol(playerid, id) || ItemAnahtarKontrol(playerid, AracBilgi[id][aracID]))
	{
		if(GetVehicleVirtualWorld(aracid) == 0)
		{
			GetVehiclePos(aracid, arrPos[0], arrPos[1], arrPos[2]);
			SetPlayerCheckpoint(playerid, arrPos[0], arrPos[1], arrPos[2], 5);
			SunucuMesaji(playerid, "Aracýnýn pozisyonu haritada iþaretlendi.");
		}
		else
		{
			new garajid = -1;
			for(new i = 0; i < MAX_GARAJ; i++) if(GarajInfo[i][gVw] == GetVehicleVirtualWorld(aracid))
			{
				garajid = i;
			}
			if(garajid == -1) return SunucuMesaji(playerid, "Aracýnýz bir garajda görünüyor.");
			SunucuMesaji(playerid, "Aracýnýz bir garajda görünüyor. Garaj ID'si: %d", garajid);
			SetPlayerCheckpoint(playerid, GarajInfo[garajid][gX], GarajInfo[garajid][gY], GarajInfo[garajid][gZ], 5.0);
		}
	}
	else hataMesaji(playerid, "ID'sini girdiðin aracýn sahibi deðilsin.");
	return 1;
}

stock GetAracCan(playerid)
{
	new Float:aacan;
	GetVehicleHealth(GetPlayerVehicleID(playerid),aacan);
	return (1000 - floatround(aacan));
}

stock GetNearest_DynObject(playerid, Float:distance)
{
    new Float:x,Float:y,Float:z,retElement = -1;

    for(new i = 0; i < CountDynamicObjects(); i++)
    {
        GetDynamicObjectPos(i, x, y, z);
        if(IsPlayerInRangeOfPoint(playerid, distance, x, y, z) && Streamer_GetIntData(STREAMER_TYPE_OBJECT,i,E_STREAMER_MODEL_ID) == -3004)
        {
 		retElement = i;       
		return retElement;	
        }
    }
    return retElement;
}

stock YayinLogoGoster(playerid, firma)
{
	if(!strcmp(FirmaInfo[firma][fIsim], "Vice News", true))
	{
		favtv_1[playerid] = CreatePlayerTextDraw(playerid, 563.000000, 355.000000, "mdl-2012:vcnews");
		PlayerTextDrawFont(playerid, favtv_1[playerid], 4);
		PlayerTextDrawLetterSize(playerid, favtv_1[playerid], 0.600000, 2.000000);
		PlayerTextDrawTextSize(playerid, favtv_1[playerid], 46.500000, 49.000000);
		PlayerTextDrawSetOutline(playerid, favtv_1[playerid], 1);
		PlayerTextDrawSetShadow(playerid, favtv_1[playerid], 0);
		PlayerTextDrawAlignment(playerid, favtv_1[playerid], 1);
		PlayerTextDrawColor(playerid, favtv_1[playerid], -1);
		PlayerTextDrawBackgroundColor(playerid, favtv_1[playerid], 255);
		PlayerTextDrawBoxColor(playerid, favtv_1[playerid], 50);
		PlayerTextDrawUseBox(playerid, favtv_1[playerid], 1);
		PlayerTextDrawSetProportional(playerid, favtv_1[playerid], 1);
		PlayerTextDrawSetSelectable(playerid, favtv_1[playerid], 0);
		PlayerTextDrawShow(playerid, favtv_1[playerid]);
	}
	else if (!strcmp(FirmaInfo[firma][fIsim], "Miracle TV", true))
	{
		favtv_1[playerid] = CreatePlayerTextDraw(playerid, 563.000000, 355.000000, "mdl-2012:miracle");
		PlayerTextDrawFont(playerid, favtv_1[playerid], 4);
		PlayerTextDrawLetterSize(playerid, favtv_1[playerid], 0.600000, 2.000000);
		PlayerTextDrawTextSize(playerid, favtv_1[playerid], 46.500000, 49.000000);
		PlayerTextDrawSetOutline(playerid, favtv_1[playerid], 1);
		PlayerTextDrawSetShadow(playerid, favtv_1[playerid], 0);
		PlayerTextDrawAlignment(playerid, favtv_1[playerid], 1);
		PlayerTextDrawColor(playerid, favtv_1[playerid], -1);
		PlayerTextDrawBackgroundColor(playerid, favtv_1[playerid], 255);
		PlayerTextDrawBoxColor(playerid, favtv_1[playerid], 50);
		PlayerTextDrawUseBox(playerid, favtv_1[playerid], 1);
		PlayerTextDrawSetProportional(playerid, favtv_1[playerid], 1);
		PlayerTextDrawSetSelectable(playerid, favtv_1[playerid], 0);
		PlayerTextDrawShow(playerid, favtv_1[playerid]);
	}
}



stock TarlaUygunlukKontrol(playerid)
{
	new Cache:VeriCek, query[165], bool:sonuc = true;
	mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `arsalar` WHERE sahip = '%e'", oyuncuData[playerid][oIsim]);
	VeriCek = mysql_query(g_SQL, query);
	new rows = cache_num_rows();
	switch(oyuncuData[playerid][oVIP])
	{
		case 0:
		{
		if(rows > 0) sonuc = false;
		}
		case 1:
		{
		if(rows >= 2) sonuc = false;
		}
	}
	cache_delete(VeriCek);
	return sonuc;
}	

stock SatisUygunlukKontrol(playerid)
{
	new uygunluk = 1;
	if(oyuncuData[playerid][oVIP] == 0)
	{
	new saat,timestamp[30];
	gettime(saat);
	format(timestamp, sizeof(timestamp), "%02d", saat);
	if(strval(timestamp) > 17 || strval(timestamp) < 6)
	{
		uygunluk = 1;
	}
	else
	{
		uygunluk = 0;
	}
	}
	return uygunluk;
}

stock AracDurumuCek(sqlid)
{
	foreach(new i : Araclar)
	{
		if(AracBilgi[i][aracID] == sqlid) return i;
	}
	return 0;
}

stock ChatAnim(playerid, length)
{
    new time = length*50;
	KillTimer(KonusmaTimer[playerid]);
    ApplyAnimation(playerid, "PED", "IDLE_CHAT",4.1,0,0,0,1,1);
    KonusmaTimer[playerid] = SetTimerEx("TalkTimer", time, 0, "i", playerid);
}

function TalkTimer(playerid)
{
	ApplyAnimation(playerid, "CARRY","crry_prtial",4.0, 0, 0, 0, 0, 0);
	ClearAnimations(playerid);
	return 1;
}

CMD:aliste(playerid, params[])
{
	static sayi = 0;
	foreach(new i : Araclar) if(IsValidVehicle(i))
	{
		if(Arac_SahipKontrol(playerid, i))
		{
			SCM_Ex(playerid, RENK_KLASIK, "%s | ID: %d | Vergi Borcu: %d | Plaka: %s | Kilit: %d | Alarm: %d | Sigorta: %d", GetVehicleName(GetVehicleModel(i)), i, AracBilgi[i][aracVergi], AracBilgi[i][aracPlaka], AracBilgi[i][kilitseviye], AracBilgi[i][alarmseviye], AracBilgi[i][aracSigorta]);
			sayi++;
		}
	}
	if(!sayi) return hataMesaji(playerid, "Adýnýza kayýtlý spawn edilmiþ araç bulunmuyor.");
	IpucuMesaji(playerid, "/agps komutu ile aracýný bulabilirsin! Oyun ID'sini kullanman gerektiðini unutma.");
	return 1;
}

CMD:araclarim(playerid, params[])
{
	if(GetPVarInt(playerid,"oyuncuyayinda") == 1) return false;
	new Cache:VeriCek, query[165], str[1600], cek = 0, aracidcek[256];
	mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `araclar` WHERE aracSahip = '%d' LIMIT %d", oyuncuData[playerid][oID], MAX_OYUNCU_ARAC);
	VeriCek = mysql_query(g_SQL, query);
	new rows = cache_num_rows();
	if(rows)
	{
		new model, Float:apos[4], zone[MAX_ZONE_NAME], plaka[32], vergi;
		strcat(str, "{CDCDCD}Durum\t{CDCDCD}Model\t{CDCDCD}Plaka\t{CDCDCD}Bölge\n");
		for(new i = 0; i < rows; i++)
		{
			cache_get_value_name_int(i, "aracID", AracSlotSQL[playerid][i]);
			cache_get_value_name_int(i, "aracModel", model);
			cache_get_value_name_int(i, "aracVergi", vergi);
			cache_get_value_name(i, "aracPlaka", plaka);
			cache_get_value_float(i, "aracPosX", apos[0]);
			cache_get_value_float(i, "aracPosY", apos[1]);
			cache_get_value_float(i, "aracPosZ", apos[2]);
			cache_get_value_float(i, "aracPosR", apos[3]);
			Get3DZone(apos[0], apos[1], apos[2], zone, sizeof(zone));
			if(AracDurumuCek(AracSlotSQL[playerid][i]) > 0)
			{
				format(aracidcek, sizeof(aracidcek), "(%d)", AracDurumuCek(AracSlotSQL[playerid][i]));
				GetVehiclePos(AracDurumuCek(AracSlotSQL[playerid][i]), apos[0], apos[1], apos[2]);
			}
			else format(aracidcek, sizeof(aracidcek), "");
			if(model == 531 || model == 532 || model == 610)
			{
			format(str, sizeof(str), "%s{A5D685}(TARIM){FFFFFF} %s\t%s%s\t%s\t%s\n", str, (AracDurumuCek(AracSlotSQL[playerid][i]) > 0) ? ("{A5D685}(Aktif/Bul){FFFFFF}") : ("{E07A7A}(Spawnla){FFFFFF}"), GetVehicleName(model), aracidcek, plaka, zone);
			}
			else
			{
			format(str, sizeof(str), "%s%s\t%s%s\t%s\t%s\t%s\n", str, (AracDurumuCek(AracSlotSQL[playerid][i]) > 0) ? ("{A5D685}(Aktif/Bul){FFFFFF}") : ("{E07A7A}(Spawnla){FFFFFF}"), GetVehicleName(model), aracidcek, plaka, zone, vergi);
			}
			cek++;
		}
	}
	cache_delete(VeriCek);
	if(!cek) return hataMesaji(playerid, "Adýnýza kayýtlý araç mevcut deðil.");
	ShowPlayerDialog(playerid, ARACLARIM_MENU, DIALOG_STYLE_TABLIST_HEADERS, "{89C7EF}Araç Listesi:{FFFFFF} Aracýnýzý seçip spawnla butonuna basýnýz", str, "Spawnla", "Geri Dön");
	return 1;
}

CMD:soygun(playerid, params[])
{
	if(GetPVarInt(playerid,"oyuncuyayinda") == 1) return false;
	new saat,timestamp[30];
	gettime(saat);
	format(timestamp, sizeof(timestamp), "%02d", saat);
	if(HirsizDurum[playerid] == false) {
		if(strval(timestamp) > 20 || strval(timestamp) < 6) {
			HirsizDurum[playerid] = true;
			SunucuMesaji(playerid, "Soyguncu moduna geçtiniz, tekrar /soygun yazarak modu kapatabilirsiniz.");
		}
		else {
			hataMesaji(playerid, "Soygunlar saat 21.00 ile 06.00 arasýnda yapýlabilir.");
		}
	}
	else if(HirsizDurum[playerid] == true) {
		HirsizDurum[playerid] = false;
		SunucuMesaji(playerid, "Soyguncu modundan çýktýnýz.");
	}
	return 1;
}

CMD:mulklerim(playerid, params[])
{
	static sayi = 0;
	sayi = 0;
	for (new i = 0; i < MAKSIMUM_EV; i ++) if(Ev_SahipKontrol(playerid, i)) {
		SCM_Ex(playerid, RENK_BEYAZ, "** (EV) Kapý NO: %d | Adres: %s | Fiyat: %s | Vergi Borcu: %s", i, EvBilgi[i][evAdres], NumaraFormati(EvBilgi[i][evFiyat]), NumaraFormati(EvBilgi[i][evVergi]));
		sayi++;
	}
	for (new i = 0; i < MAKSIMUM_ISYERI; i ++) if(Isyeri_SahipKontrol(playerid, i)) {
		SCM_Ex(playerid, RENK_BEYAZ, "** (ISYERI) Kapý NO: %d | Ad: %s | Fiyat: %s | Vergi Borcu: %s", i, IsyeriBilgi[i][isyeriAd], NumaraFormati(IsyeriBilgi[i][isyeriFiyat]), NumaraFormati(IsyeriBilgi[i][isyeriVergi]));
		sayi++;
	}
	if(!sayi) hataMesaji(playerid, "Üzerine kayýtlý mülk yok!");
	return 1;
}

CMD:aparaduzenle(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 7 && !IsPlayerAdmin(playerid)) return YetkinizYok(playerid);
	static oyuncuid, miktar;
	if(sscanf(params, "ud", oyuncuid, miktar))
		return kullanimMesaji(playerid, "/aparaduzenle [oyuncu id/isim] [miktar]");

	if(!IsPlayerConnected(oyuncuid))
		return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");

	if(oyuncuid == playerid && oyuncuData[playerid][oAdmin] < 7)
		return hataMesaji(playerid, "Kendine para veremezsin.");

	if(!oyuncuData[oyuncuid][oGiris])
		return hataMesaji(playerid, "Oyuncu giriþ yapmamýþ, komut üzerinde kullanýlamaz.");

	if(miktar < 1)
		return hataMesaji(playerid, "Girilen miktar en az 1 olabilir.");

	ParaDuzenle(oyuncuid, miktar);
	SunucuMesaji(playerid, "%s adlý kiþinin parasýný %s olarak düzenledin.", OyuncuIsim(oyuncuid), NumaraFormati(miktar));
	SunucuMesaji(oyuncuid, "%s adlý yönetici paraný %s olarak düzenledi.", oyuncuData[playerid][oAdminNick], NumaraFormati(miktar));
	YoneticiMesaji(RENK_SERVER, "« YONETICI » {FFFFFF}%s adlý yönetici %s adlý kiþinin parasýný %s olarak düzenledi.", oyuncuData[playerid][oAdminNick], OyuncuIsim(oyuncuid), NumaraFormati(miktar));
	Log_Kaydet("loglar/admin_log.txt", "[%s] %s adlý yönetici %s adlý kiþinin parasýný %s olarak düzenledi.", Tarih(), oyuncuData[playerid][oAdminNick], OyuncuIsim(oyuncuid), NumaraFormati(miktar));
	return 1;
}

CMD:aparaver(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 9 && !IsPlayerAdmin(playerid)) return YetkinizYok(playerid);
	static oyuncuid, miktar;
	if(sscanf(params, "ud", oyuncuid, miktar))
		return kullanimMesaji(playerid, "/aparaver [oyuncu id/isim] [miktar]");

	if(!IsPlayerConnected(oyuncuid))
		return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");

	if(oyuncuid == playerid && oyuncuData[playerid][oAdmin] < 8)
		return hataMesaji(playerid, "Kendine para veremezsin.");

	if(!oyuncuData[oyuncuid][oGiris])
		return hataMesaji(playerid, "Oyuncu giriþ yapmamýþ, komut üzerinde kullanýlamaz.");

	if(miktar < 1 || miktar > 1000000)
		return hataMesaji(playerid, "Girilen miktar en az 1, en fazla 1,000,000 olabilir.");

	ParaEkle(oyuncuid, miktar, YONTEM_APARAVER);
	SunucuMesaji(oyuncuid, "%s adlý yönetici sana %s miktarýnda para verdi.", oyuncuData[playerid][oAdminNick], NumaraFormati(miktar));
	UstYoneticiMesaji(RENK_SERVER, "« YONETICI » {FFFFFF}%s adlý yönetici %s adlý kiþiye %s miktarýnda para verdi.", oyuncuData[playerid][oAdminNick], OyuncuIsim(oyuncuid), NumaraFormati(miktar));
	Log_Kaydet("loglar/admin_log.txt", "[%s] %s (%s) adlý yönetici %s adlý kiþiye %s miktarýnda para verdi.", Tarih(), OyuncuIsim(playerid), oyuncuData[playerid][oAdminNick], OyuncuIsim(oyuncuid), NumaraFormati(miktar));
	return 1;
}

CMD:paraver(playerid, params[])
{
	if(GetPVarInt(playerid,"oyuncuyayinda") == 1) return false;
	if(oyuncuData[playerid][oHapisSure][0] > 0) return hataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	static oyuncuid, miktar, yazi[128];
	if(sscanf(params, "ud", oyuncuid, miktar))
		return kullanimMesaji(playerid, "/paraver [oyuncu id/isim] [miktar]");

	if(!IsPlayerConnected(oyuncuid)) return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(oyuncuid == playerid) return hataMesaji(playerid, "Kendine para veremezsin.");
	if(!YakinlikKontrol(playerid, oyuncuid, 3.0)) return hataMesaji(playerid, "Oyuncuya yakýn deðilsin.");
	if(!oyuncuData[oyuncuid][oGiris]) return hataMesaji(playerid, "Oyuncu giriþ yapmamýþ, komut üzerinde kullanýlamaz.");
	if(miktar < 1) return hataMesaji(playerid, "Girilen miktar $1'in altýnda olamaz.");
	if(miktar > 100000) return hataMesaji(playerid, "Bir seferde en fazla 100,000$ verebilirsin");
	if(oyuncuData[playerid][oPara] < miktar) return hataMesaji(playerid, "Girilen miktar fiyatýnda paran yok.");
	if(miktar > 200 && oyuncuData[playerid][oSeviye] < 2) return hataMesaji(playerid, "$200 dolardan fazla verebilmek için en az 2 seviye olmalýsýn.");
	if(oyuncuData[oyuncuid][oHapisSure][0] > 0) return hataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(oyuncuData[oyuncuid][oAdminDurum] == true) return hataMesaji(playerid, "Girilen kiþi yönetici iþbaþýnda, komutu üzerinde kullanamazsýn.");

	ParaEkle(oyuncuid, miktar, YONTEM_PARAVER);
	ParaEkle(playerid, -miktar, YONTEM_PARAVER);
	format(yazi, sizeof(yazi), "adlý kiþi %s adlý kiþiye bir miktar para uzatýr.", OyuncuIsim(oyuncuid));
	cmd(playerid, 1, yazi);
	SCM_Ex(oyuncuid, RENK_GRI, "%s adlý kiþiden %s para aldýnýz.", OyuncuIsim(playerid), NumaraFormati(miktar));
	SCM_Ex(playerid, RENK_GRI, "%s adlý kiþiye %s para verdiniz.", OyuncuIsim(oyuncuid), NumaraFormati(miktar));
	Log_Kaydet("loglar/para_loglari.txt", "[%s] %s adli kisi %s adli kisiye %s para verdi.", Tarih(), OyuncuIsim(playerid), OyuncuIsim(oyuncuid), NumaraFormati(miktar));
	new str[150];
	format(str, sizeof(str), "```[%s] %s adli kisi %s adli kisiye %s para verdi.```", Tarih(), OyuncuIsim(playerid), OyuncuIsim(oyuncuid), NumaraFormati(miktar));
	DCC_SendChannelMessage(paralog, str);
/*SunucuMesaji(oyuncuid, "%s sana %s miktarýnda para verdi.", OyuncuIsim(playerid), NumaraFormati(miktar));
SunucuMesaji(playerid, "%s adlý kiþiye %s miktarýnda para verdin.", OyuncuIsim(oyuncuid), NumaraFormati(miktar));*/
	return 1;
}

CMD:dunyadegistir(playerid, params[])
{
	if(!oyuncuData[playerid][oAdmin]) return YetkinizYok(playerid);

	static oyuncuid, dunya;
	if(sscanf(params, "ud", oyuncuid, dunya)) return kullanimMesaji(playerid, "/dunyadegistir [oyuncu id/isim] [sanal dünya id]");

	if(!IsPlayerConnected(oyuncuid)) return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(!oyuncuData[oyuncuid][oGiris]) return hataMesaji(playerid, "Oyuncu giriþ yapmamýþ, komut üzerinde kullanýlamaz.");
	if(GetPlayerVirtualWorld(oyuncuid) == dunya) return hataMesaji(playerid, "Girilen oyuncu zaten ayný dünyada.");

	SetPlayerVirtualWorld(oyuncuid, dunya);
	SunucuMesaji(playerid, "%s adlý kiþinin sanal dünyasýný %d olarak deðiþtirdin.", OyuncuIsim(oyuncuid), dunya);
	SunucuMesaji(oyuncuid, "%s adlý yönetici sanal dünyaný %d olarak deðiþtirdi.", oyuncuData[playerid][oAdminNick], dunya);
	return 1;
}

CMD:intdegistir(playerid, params[])
{
	if(!oyuncuData[playerid][oAdmin]) return YetkinizYok(playerid);

	static oyuncuid, interior;
	if(sscanf(params, "ud", oyuncuid, interior)) return kullanimMesaji(playerid, "/intdegistir [oyuncu id/isim] [interior id]");

	if(!IsPlayerConnected(oyuncuid)) return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(!oyuncuData[oyuncuid][oGiris]) return hataMesaji(playerid, "Oyuncu giriþ yapmamýþ, komut üzerinde kullanýlamaz.");
	if(GetPlayerInterior(oyuncuid) == interior) return hataMesaji(playerid, "Girilen oyuncu zaten ayný interiorda.");
	if(oyuncuData[oyuncuid][oHapisSure][0] > 0 || oyuncuData[oyuncuid][oHapisSure][1] > 0) return hataMesaji(playerid, "Oyuncu hapiste, bu komutu kullanamazsýn.");

	SetPlayerInterior(oyuncuid, interior);
	SunucuMesaji(playerid, "%s adlý kiþinin interiorunu %d olarak deðiþtirdin.", OyuncuIsim(oyuncuid), interior);
	SunucuMesaji(oyuncuid, "%s adlý yönetici interiorunuzu %d olarak deðiþtirdi.", oyuncuData[playerid][oAdminNick], interior);
	return 1;
}

CMD:fisilda(playerid, params[])
{
	if(oyuncuData[playerid][oHapisSure][0] > 0) return hataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(GetPVarInt(playerid,"oyuncuyayinda") == 1) return false;
	static oyuncuid, mesaj[128], yazi[128];
	if(sscanf(params, "us[128]", oyuncuid, mesaj)) return kullanimMesaji(playerid, "/fisilda [oyuncu id/isim] [mesaj]");
	if(!IsPlayerConnected(oyuncuid)) return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(oyuncuid == playerid) return hataMesaji(playerid, "Kendine fýsýldayamazsýn.");
	if(!oyuncuData[oyuncuid][oGiris]) return hataMesaji(playerid, "Oyuncu giriþ yapmamýþ, komut üzerinde kullanýlamaz.");
	if(!YakinlikKontrol(playerid, oyuncuid, 2.5)) return hataMesaji(playerid, "Oyuncuya yakýn deðilsin.");

	format(yazi, sizeof(yazi), "* %s, %s adlý kiþiye yaklaþýr ve kulaðýna fýsýldar.", OyuncuIsim(playerid), OyuncuIsim(oyuncuid));
	SetPlayerChatBubble(playerid, yazi, RENK_PEMBE, 30.0, 10 * 1000);
	SCM_Ex(oyuncuid, RENK_SARI, "%s fýsýldadý (%d): %s", OyuncuIsim(playerid), playerid, mesaj);
	SCM_Ex(playerid, RENK_SARI, "%s'a fýsýldadýn (%d): %s", OyuncuIsim(oyuncuid), oyuncuid, mesaj);
	Log_Kaydet("loglar/fisilda_log.txt", "[%s] %s, %s'a fisildadi: %s", Tarih(), OyuncuIsim(playerid), OyuncuIsim(oyuncuid), mesaj);
	return 1;
}

CMD:aw(playerid, params[])
{
	if(GetPVarInt(playerid,"oyuncuyayinda") == 1) return false;
	if(oyuncuData[playerid][oHapisSure][0] > 0) return hataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	static mesaj[128], yazi[128];
	if(!IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Araçta deðilken bu komutu kullanamazsýnýz.");
	if(sscanf(params, "s[128]", mesaj)) return kullanimMesaji(playerid, "/aw [mesaj]");

	format(yazi, sizeof(yazi), "* %s araçta bulunan kiþilerin duyabileceði ses tonunda birþeyler mýrýldanýyor.", OyuncuIsim(playerid));
	SetPlayerChatBubble(playerid, yazi, RENK_PEMBE, 30.0, 10 * 1000);
	foreach(new i : Player)
	{
		if(GetPlayerVehicleID(playerid) == GetPlayerVehicleID(i))
		{
			SCM_Ex(i, RENK_SARI, "[AW] %s fýsýldýyor: %s", OyuncuIsim(playerid), mesaj);
		}
	}
	return 1;
}

CMD:cek(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 1) return YetkinizYok(playerid);
	if(oyuncuData[playerid][oHapisSure][0] > 0 || oyuncuData[playerid][oHapisSure][1] > 0) return hataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oDonduruldu] > 0) return hataMesaji(playerid, "Dondurulmuþken bu komutu kullanamazsýn.");

	static oyuncuid;
	if(sscanf(params, "u", oyuncuid)) return kullanimMesaji(playerid, "/cek [oyuncu id/isim]");
	if(!IsPlayerConnected(oyuncuid)) return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(playerid == oyuncuid) return hataMesaji(playerid, "Bu komutu kendi üzerinde kullanamazsýn.");
	if(!oyuncuData[oyuncuid][oGiris]) return hataMesaji(playerid, "Oyuncu giriþ yapmamýþ, komut üzerinde kullanýlamaz.");
	if(oyuncuData[playerid][oAdmin] < oyuncuData[oyuncuid][oAdmin] && !IsPlayerAdmin(playerid)) return hataMesaji(playerid, "Girdiðin kiþi sizden yüksek bir yönetici leveline sahip.");
	if(oyuncuData[oyuncuid][oYarali] == true) return hataMesaji(playerid, "Oyuncu yaralanmýþ, bu komut üzerinde kullanýlamýyor.");
	if(oyuncuData[oyuncuid][oDonduruldu] > 0) return hataMesaji(playerid, "Oyuncu dondurulma etkisinde, bu komut üzerinde kullanýlamýyor.");
	if(YakinlikKontrol(playerid, oyuncuid, 3.0)) return hataMesaji(playerid, "Oyuncu zaten yanýnda.");

	OyuncuyuOyuncuyaGonder(oyuncuid, playerid);
	SunucuMesaji(oyuncuid, "%s adlý yetkili seni yanýna çekti.", oyuncuData[playerid][oAdminNick]);
	SunucuMesaji(playerid, "%s adlý kiþiyi kendine çektin.", OyuncuIsim(oyuncuid));
	Log_Kaydet("loglar/admin_log.txt", "[%s] %s, %s adlý kiþiyi yanýna çekti.", Tarih(), oyuncuData[playerid][oAdminNick], OyuncuIsim(oyuncuid));
	return 1;
}

CMD:sunucu(playerid, params[])
{
	if(!IsPlayerAdmin(playerid) && oyuncuData[playerid][oAdmin] < 8) return YetkinizYok(playerid);
	static yazi[256], sunucuadi[64];
	GetServerVarAsString("hostname", sunucuadi, sizeof(sunucuadi));
	if(sunucukilit) {
		format(yazi, sizeof(yazi), "Ýþlem\t\tDurum\nKilit\t\t{33AA33}[KALDIR]{FFFFFF}\nSunucu Ýsmini Deðiþtir\t\t[%s]", sunucuadi);
	}
	else if(!sunucukilit) {
		format(yazi, sizeof(yazi), "Ýþlem\t\tDurum\nKilit\t\t{B70000}[EKLE]{FFFFFF}\nSunucu Ýsmini Deðiþtir\t\t[%s]", sunucuadi);
	}
	DialogGoster(playerid, DIALOG_SUNUCU, DIALOG_STYLE_TABLIST_HEADERS, "> Sunucu Paneli", yazi, "Seç", "Ýptal");
	return 1;
}

CMD:git(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 1) return YetkinizYok(playerid);
	if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");

	static oyuncu, yer[32], ek[64], id;
	if(sscanf(params, "u", oyuncu)) {
		kullanimMesaji(playerid, "/git [isim veya oyuncu id]");
		SendClientMessage(playerid, RENK_SARI, "[ÝSÝMLER]:{FFFFFF} bina, arac, ev, ls, sf, lv, fd, isyeri, atm, tnoktasi, meslek, obje, kogus, mikrofon");
		return 1;
	}
	if(!IsPlayerConnected(oyuncu)) {
		if(sscanf(params, "s[32]S()[64]", yer, ek))
		{
			kullanimMesaji(playerid, "/git [isim veya oyuncu id/isim]");
			SendClientMessage(playerid, RENK_SARI, "[ÝSÝMLER]:{FFFFFF} bina, arac, ev, ls, sf, lv, fd, isyeri, atm, tnoktasi, meslek, obje, kogus, mikrofon");
			return 1;
		}
		else if(!strcmp(yer, "bina", true))
		{
			if(sscanf(ek, "d", id))
				return kullanimMesaji(playerid, "/git [bina] [bina ID]");

			if((id < 0 || id >= MAKSIMUM_BINA) || !BinaBilgi[id][bKullanimda])
				return hataMesaji(playerid, "Geçersiz bina!");

			SetPlayerPos(playerid, BinaBilgi[id][bPos][0], BinaBilgi[id][bPos][1], BinaBilgi[id][bPos][2]);
			SetPlayerInterior(playerid, BinaBilgi[id][bDisInt]);

			SetPlayerVirtualWorld(playerid, BinaBilgi[id][bDisVW]);
			SunucuMesaji(playerid, "Girilen binaya ýþýnlandýn. (ID: %d)", id);
			return 1;
		}
		else if(!strcmp(yer, "mikrofon", true))
		{
			if(sscanf(ek, "d", id)) return kullanimMesaji(playerid, "/git mikrofon [id]");
			new query[144];
			mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM mikrofonlar WHERE micId = '%d'", id);
			mysql_tquery(g_SQL, query, "MikrofonGit", "dd", playerid, id);
			return 1;
		}
		else if(!strcmp(yer, "arac", true))
		{
			static Float:aracx, Float:aracy, Float:aracz;

			if(sscanf(ek, "d", id))
				return kullanimMesaji(playerid, "/git [arac] [araç ID]");

			if(!Iter_Contains(Araclar, id)) return hataMesaji(playerid, "Geçersiz araç.");

			if(!IsValidVehicle(id) || Arac_IDBul(id) == -1)
				return hataMesaji(playerid, "Geçersiz araç.");

			GetVehiclePos(id, aracx, aracy, aracz);
			SetPlayerPos(playerid, aracx, aracy, aracz + 2);
			SunucuMesaji(playerid, "Girilen araca ýþýnlandýn. (ID: %d)", id);
			id = Arac_IDBul(id);
			SetPlayerVirtualWorld(playerid, AracBilgi[id][aracWorld]);
			SetPlayerInterior(playerid, AracBilgi[id][aracInt]);
			return 1;
		}
		else if(!strcmp(yer, "kogus", true))
		{
			new Float:kogX, Float:kogY, Float:kogZ;
			if(sscanf(ek, "d", id)) return kullanimMesaji(playerid, "/git kogus [id]");
			if(!Iter_Contains(Koguslar, id)) return hataMesaji(playerid, "Geçersiz koðuþ ID.");
			GetDynamicObjectPos(kogusData[id][kogusObje], kogX, kogY, kogZ);
			SetPlayerPos(playerid, kogX, kogY, kogZ);
			SunucuMesaji(playerid, "%d ID'li koðuþa ýþýnlandýn.", id);
			return 1;
		}
		else if(!strcmp(yer, "house", true))
		{
			if(sscanf(ek, "d", id))
				return kullanimMesaji(playerid, "/git [house] [ev ID]");

			if((id < 0 || id >= MAKSIMUM_EV) || !EvBilgi[id][evKullanimda])
				return hataMesaji(playerid, "Geçersiz ev!");

			SetPlayerPos(playerid, EvBilgi[id][evPos][0], EvBilgi[id][evPos][1], EvBilgi[id][evPos][2]);
			SetPlayerVirtualWorld(playerid, EvBilgi[id][evDisVW]);
			SetPlayerInterior(playerid, EvBilgi[id][evDisInt]);
			SunucuMesaji(playerid, "Girilen eve ýþýnlandýn. (ID: %d)", id);
			return 1;
		}
		else if(!strcmp(yer, "fd", true))
		{
			if(IsPlayerInAnyVehicle(playerid)) {
				SetVehiclePos(GetPlayerVehicleID(playerid), 1707.3746,-1144.3380,24.0232);
			}
			else SetPlayerPos(playerid, 1707.3746,-1144.3380,24.0232);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SunucuMesaji(playerid, "VCFD'e ýþýnlandýn.");
		}
		else if(!strcmp(yer, "isyeri", true))
		{
			if(sscanf(ek, "d", id))
				return kullanimMesaji(playerid, "/git [isyeri] [isyeri ID]");

			if((id < 0 || id >= MAKSIMUM_ISYERI) || !IsyeriBilgi[id][isyeriKullanimda])
				return hataMesaji(playerid, "Geçersiz iþyeri!");

			SetPlayerPos(playerid, IsyeriBilgi[id][isyeriPos][0], IsyeriBilgi[id][isyeriPos][1], IsyeriBilgi[id][isyeriPos][2]);
			SetPlayerVirtualWorld(playerid, IsyeriBilgi[id][isyeriDisVW]);
			SetPlayerInterior(playerid, IsyeriBilgi[id][isyeriDisInt]);
			SunucuMesaji(playerid, "Girilen iþyerine ýþýnlandýn. (ID: %d)", id);
			return 1;
		}
		else if(!strcmp(yer, "ls", true))
		{
			if(IsPlayerInAnyVehicle(playerid)) {
				SetVehiclePos(GetPlayerVehicleID(playerid), 1529.6327, -1683.8873, 13.3828);
			}
			else SetPlayerPos(playerid, 1529.6327, -1683.8873, 13.3828);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SunucuMesaji(playerid, "Los Santos'a ýþýnlandýn.");
			return 1;
		}
		else if(!strcmp(yer, "sf", true))
		{
			if(IsPlayerInAnyVehicle(playerid)) {
				SetVehiclePos(GetPlayerVehicleID(playerid), -1986.4033, 137.6835, 27.6875);
			}
			else {
				SetPlayerPos(playerid, -1986.4033, 137.6835, 27.6875);
			}
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SunucuMesaji(playerid, "San Fierro'ya ýþýnlandýn.");
			return 1;
		}
		else if(!strcmp(yer, "lv", true))
		{
			if(IsPlayerInAnyVehicle(playerid)) {
				SetVehiclePos(GetPlayerVehicleID(playerid), 2029.8564, 1009.2123, 10.8203);
			}
			else {
				SetPlayerPos(playerid, 2029.8564,1009.2123,10.8203);
			}
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SunucuMesaji(playerid, "Las Venturas'a ýþýnlandýn.");
			return 1;
		}
		else if(!strcmp(yer, "atm", true))
		{
			if(sscanf(ek, "d", id))
				return kullanimMesaji(playerid, "/git [atm] [atm ID]");

			if((id < 0 || id >= MAKSIMUM_ATM) || !ATMBilgi[id][atmKullanimda])
				return hataMesaji(playerid, "Geçersiz ATM!");

			SetPlayerPos(playerid, ATMBilgi[id][atmPos][0], ATMBilgi[id][atmPos][1], ATMBilgi[id][atmPos][2]);
			SetPlayerVirtualWorld(playerid, ATMBilgi[id][atmWorld]);
			SetPlayerInterior(playerid, ATMBilgi[id][atmInterior]);
			SunucuMesaji(playerid, "ATM'ye ýþýnlandýn. (ID: %d)", id);
			return 1;
		}
		else if(!strcmp(yer, "tnoktasi", true))
		{
			if(sscanf(ek, "d", id))
				return kullanimMesaji(playerid, "/git [tnoktasi] [tutuklama noktasý ID]");

			if((id < 0 || id >= MAKSIMUM_TUTUKLAMANOKTASI) || !TutuklamaNoktasi[id][tKullanimda])
				return hataMesaji(playerid, "Geçersiz tutuklama noktasý!");

			SetPlayerPos(playerid, TutuklamaNoktasi[id][tPos][0], TutuklamaNoktasi[id][tPos][1], TutuklamaNoktasi[id][tPos][2]);
			SetPlayerVirtualWorld(playerid, TutuklamaNoktasi[id][tWorld]);
			SetPlayerInterior(playerid, TutuklamaNoktasi[id][tInterior]);
			SunucuMesaji(playerid, "Girilen tutuklama noktasýna ýþýnlandýn. (ID: %d)", id);
			return 1;
		}
		else if(!strcmp(yer, "meslek", true))
		{
			if(sscanf(ek, "d", id))
				return kullanimMesaji(playerid, "/git [meslek] [meslek ID]");

			if((id < 0 || id >= MAKSIMUM_MESLEK) || !MeslekBilgi[id][mKullanimda])
				return hataMesaji(playerid, "Geçersiz meslek!");

			SetPlayerPos(playerid, MeslekBilgi[id][mPos][0], MeslekBilgi[id][mPos][1], MeslekBilgi[id][mPos][2]);
			SetPlayerVirtualWorld(playerid, MeslekBilgi[id][mWorld]);
			SetPlayerInterior(playerid, MeslekBilgi[id][mInterior]);
			SunucuMesaji(playerid, "Girilen mesleðe ýþýnlandýn. (ID: %d)", id);
			return 1;
		}
		else return hataMesaji(playerid, "Girilen oyuncu geçersiz.");
	}
	if(!oyuncuData[oyuncu][oGiris])
		return hataMesaji(playerid, "Oyuncu giriþ yapmamýþ, komut üzerinde kullanýlamaz.");

	if(oyuncu == playerid)
		return hataMesaji(playerid, "Kendine ýþýnlanamazsýn.");

	OyuncuyuOyuncuyaGonder(playerid, oyuncu);
	SunucuMesaji(playerid, "%s adlý kiþiye ýþýnlandýn.", OyuncuIsim(oyuncu));
	return 1;
}


CMD:yayindavet(playerid, params[])
{
	if(FirmaInfo[oyuncuData[playerid][oFirma]][fAlan] == 1)
	{
		new insan;
		if(sscanf(params, "u",insan))
		{
			kullanimMesaji(playerid, "/yayindavet [oyuncu id]");
			return 1;
		}

		if(oyuncuData[playerid][oYayinda] == 0)
			return hataMesaji(playerid,"Þuan yayýnda deðilsiniz.");

		if(oyuncuData[playerid][oYayinda] > 1)
			return hataMesaji(playerid,"Siz yayýna kimseyi alamazsýnýz.");

		if(!YakinlikKontrol(playerid, insan, 4.0))
			return hataMesaji(playerid,"Kiþiye yakýn olmalýsýnýz.");

		if(insan != INVALID_PLAYER_ID)
		{
			oyuncuData[insan][oYayinDavet] = oyuncuData[playerid][oFirma];
			SunucuMesaji(insan, "%s sizi yayýna dahil etti.",OyuncuIsim(playerid));
			SunucuMesaji(playerid, "%s adlý kiþiyi yayýna aldýnýz.",OyuncuIsim(insan));
			oyuncuData[insan][pYayinID] = oyuncuData[playerid][oFirma]; 
		}
		else hataMesaji(playerid,"Hatalý id girdiniz.");
	}
	return 1;
}

CMD:yayin(playerid,params[])
{
	if(FirmaInfo[oyuncuData[playerid][oFirma]][fAlan] == 1 && oyuncuData[playerid][oFirmarutbe] > 5)
	{
		if(FirmaInfo[oyuncuData[playerid][oFirma]][fYayin] == 0)
		{
			new aciklama[60];
			if(sscanf(params, "s", aciklama))
				return kullanimMesaji(playerid, "/yayin [yayýn adý]");

			//strunpack(FirmaInfo[oyuncuData[playerid][oFirma]][fYayinAciklama], aciklama, 60);
			format(FirmaInfo[oyuncuData[playerid][oFirma]][fYayinAciklama], 60, "%s", aciklama);
			oyuncuData[playerid][oYayinda] = 1;
			SunucuMesaji(playerid,"Yayýna baþladýnýz.");
			SunucuMesaji(playerid,"/cyayin yazarak mesaj gönderebilirsiniz.");
			FirmaInfo[oyuncuData[playerid][oFirma]][fYayin] = 1;
			oyuncuData[playerid][oYayinDavet] = oyuncuData[playerid][oFirma];
			oyuncuData[playerid][pYayinID] = oyuncuData[playerid][oFirma]; 
			SCM_ExAll(RENK_SMS, "YAYIN >>{FFFFFF} %s adlý kanal %s isimli yayýna baþladý.(/yayinlar)", FirmaInfo[oyuncuData[playerid][oFirma]][fIsim], aciklama);
			
		}
		else
		{
			foreach(new i : Player)
			{
				if(oyuncuData[i][oYayinda] > 0)
				{
					oyuncuData[i][oYayinda] = 0;
					SunucuMesaji(i,"Yayýn bitti.");
				}
				if(oyuncuData[i][oYayinDavet] != -1)
				{
					oyuncuData[i][oYayinDavet] = -1;
				}
			}
			SunucuMesaji(playerid,"Yayýný bitirdiniz.");
			FirmaInfo[oyuncuData[playerid][oFirma]][fYayin] = 0;
			oyuncuData[playerid][oYayinDavet] = -1;
		}
	}
	else return hataMesaji(playerid, "Bir medya/basýn firmasýnda çalýþmýyorsun.");
	return 1;
}

CMD:yayinkamera(playerid, params[])
{
	if(FirmaInfo[oyuncuData[playerid][oFirma]][fYayin] == 1)
	{
		new id = oyuncuData[playerid][oFirma];
		if(oyuncuData[playerid][oKameraman] == 0)
		{
			GivePlayerCamera(playerid);
			oyuncuData[playerid][oKameraman] = 1;
			FirmaInfo[id][fKameraman] = playerid;
			SunucuMesaji(playerid, "Çekim yapmaya baþladýn.");
		}
		else
		{
			foreach(new i : Player)
			{
				if(GetPVarInt(i,"pYayinSec") == id && GetPVarInt(i,"oyuncuyayinda") == 1)
				{
				if(IsPlayerWatchingCamera(i))
				{
					StopPlayerWatchingCamera(i);
				}
				oyuncuData[i][pYayinID] = -1;
				TextDrawHideForPlayer(i, favtv_0);
				PlayerTextDrawHide(i, favtv_1[i]);
				SunucuMesaji(i, "Yayýn kanal tarafýndan kapatýldý.");
				SetSpawnInfo(i, 0, oyuncuData[i][oKiyafet], eskipos[i][0], eskipos[i][1], eskipos[i][2], eskipos[i][3], 0, 0, 0, 0, 0, 0);
				TogglePlayerSpectating(i, false);
				TogglePlayerControllable(i, false);
				SetTimerEx("oyuncucoz", 2000, false, "i", i);
				SetPlayerInterior(i, eskiint[i]);
				SetPlayerVirtualWorld(i, eskiworld[i]);
				SetTimerEx("skinduzelt", 100, false, "i", i);
				SetPVarInt(i, "oyuncuyayinda", 0);
				DeletePVar(i, "oyuncuyayinda");
				DeletePVar(i, "pYayinSec");
				}
			}
			RemovePlayerCamera(playerid);
			oyuncuData[playerid][oKameraman] = 0;
			FirmaInfo[id][fKameraman] = -1;
			SunucuMesaji(playerid, "Çekim yapmayý býraktýn.");
		}
	}
	else
	{
		hataMesaji(playerid, "Firman yayýn yapmýyor.");
	}
	return 1;
}

CMD:cyayin(playerid, params[])
{
	static msg[150];
	if(sscanf(params, "s[150]", msg)) return kullanimMesaji(playerid, "/cyayin [mesaj]");
	if(oyuncuData[playerid][oYayinDavet] == -1) return hataMesaji(playerid, "Canlý yayýnda deðilsiniz.");
	foreach (new i : Player)
	{
		if(oyuncuData[i][pYayin] == true)
        {
		SCM_Ex(i, 0xFF7A31FF, "[YAYIN] %s: %s", OyuncuIsim(playerid), msg);
		}
	}
	return 1;
}

CMD:yayinlar(playerid, params[])
{
if(baliktutuyor[playerid] == true) return hataMesaji(playerid, "Balýk tutarken bu komutu kullanamazsýnýz.");
new i, Cache:MedyaVeri, query[60], isim[60], veriler[1024];
mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `firmalar` WHERE `alan` = 1");
MedyaVeri = mysql_query(g_SQL, query);
new rows = cache_num_rows();
strcat(veriler, "ID\tYayýncý\n");
if(rows)
{
while(i < rows)
{
cache_get_value_name_int(i, "id", oyuncuData[playerid][pFirmaSecID][i]);
cache_get_value_name(i, "isim", isim, 60);

format(veriler, sizeof(veriler), "%s{F2DA4E}%d{FFFFFF}\t%s\n", veriler, oyuncuData[playerid][pFirmaSecID][i], isim);
i++;
}
Dialog_Show(playerid, yayinlar, DIALOG_STYLE_TABLIST_HEADERS, "> Yayýn, yayýncý listesi", veriler, "Seç", "Geri");
}
else hataMesaji(playerid, "Görüntülenebilecek medya firmasý bulunamadý.");
cache_delete(MedyaVeri);
return 1;
}

Dialog:yayinlar(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id;
		id = oyuncuData[playerid][pFirmaSecID][listitem];
		oyuncuData[playerid][pYayinID] = id;
		SetPVarInt(playerid, "pYayinSec", id);
		Dialog_Show(playerid, yayinsecenek, DIALOG_STYLE_LIST, "> Yayýn, yayýncý listesi, yayýn izleme seçeneði", "Telefondan izle\nTV'den izle", "Seç", "Çýkýþ");
	}
	return 1;
}

Dialog:ciftliksatis(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	new oyuncu = GetPVarInt(playerid, "ciftlikoyuncu"), para = GetPVarInt(playerid, "ciftlikucreti"), cid = GetPVarInt(playerid, "ciftlikidsi");
	if(!IsPlayerConnected(oyuncu)) return hataMesaji(playerid, "Satýcý aktif deðil.");
	if(!oyuncuData[oyuncu][oGiris]) return hataMesaji(playerid, "Satýcý giriþ yapmamýþ.");
	if(oyuncuData[playerid][oPara] < para) return hataMesaji(playerid, "Üzerinde yeterli miktarda para bulunmuyor.");
	format(CiftlikInfo[cid][cSahip], 64, "%s", oyuncuData[playerid][oIsim]);
	CiftlikInfo[cid][cSahipID] = oyuncuData[playerid][oID];
		Ciftlik_Kaydet(cid);

	ParaEkle(oyuncu, para);
	ParaEkle(playerid, -para);
	SunucuMesaji(oyuncu, "Çiftliðinizi baþarýyla %s adlý kiþiye sattýnýz.", OyuncuIsim(playerid));
	SunucuMesaji(playerid, "Çiftliði baþarýyla %s karþýlýðýnda satýn aldýnýz.", NumaraFormati(para));
	new str[176];
	format(str, sizeof(str), "```[%s] %s, %s adlý kiþiye çiftlik sattý. Fiyat: %d```", Tarih(), OyuncuIsim(oyuncu),OyuncuIsim(playerid),para);
	DCC_SendChannelMessage(tarlalog, str);
	DeletePVar(playerid, "ciftlikoyuncu"),DeletePVar(playerid, "ciftlikucreti"),DeletePVar(playerid, "ciftlikidsi");
	}
	return 1;
}

Dialog:yayinsecenek(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(listitem == 0)
		{
			if(GetPVarInt(playerid, "oyuncuyayinda") == 1) return hataMesaji(playerid, "Zaten yayýn izliyorsunuz.(/yayinayril)");
			if(oyuncuData[playerid][oTelefon] != 1 || oyuncuData[playerid][oTelefonNumarasi] == 0)
				return hataMesaji(playerid, "Telefonunuz veya sim kartýnýz yok.");

			if(FirmaInfo[oyuncuData[playerid][pYayinID]][fKameraman] == -1)
				return hataMesaji(playerid, "Bu kanal çekim yapmýyor.");

			if(IsPlayerInAnyVehicle(playerid))
				return hataMesaji(playerid, "Araç sürerken yayýn izleyemezsin.");

			SunucuMesaji(playerid, "%s isimli kanalý izlemeye baþladýn. (( /yayinayril ))", FirmaInfo[oyuncuData[playerid][pYayinID]][fIsim]);
			eskiint[playerid] = GetPlayerInterior(playerid);
			eskiworld[playerid] = GetPlayerVirtualWorld(playerid);
			GetPlayerPos(playerid, eskipos[playerid][0], eskipos[playerid][1], eskipos[playerid][2]);
			SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(FirmaInfo[oyuncuData[playerid][pYayinID]][fKameraman]));
			SetPlayerInterior(playerid, GetPlayerInterior(FirmaInfo[oyuncuData[playerid][pYayinID]][fKameraman]));
			StartPlayerWatchingCamera(playerid, FirmaInfo[oyuncuData[playerid][pYayinID]][fKameraman]);
			TextDrawShowForPlayer(playerid, favtv_0); 
			YayinLogoGoster(playerid, oyuncuData[playerid][pYayinID]);
			TogglePlayerSpectating(playerid, 1);
			SetPVarInt(playerid, "oyuncuyayinda", 1);
		}
		if(listitem == 1)
		{
			if(GetPVarInt(playerid, "oyuncuyayinda") == 1) return hataMesaji(playerid, "Zaten yayýn izliyorsunuz.(/yayinayril)");
			if(GetPlayerInterior(playerid) == 0)
				return hataMesaji(playerid, "TV olan bir bölgede deðilsin.");

			if(FirmaInfo[oyuncuData[playerid][pYayinID]][fKameraman] == -1)
				return hataMesaji(playerid, "Bu kanal çekim yapmýyor.");

			SunucuMesaji(playerid, "%s isimli kanalý izlemeye baþladýn. (( /yayinayril ))", FirmaInfo[oyuncuData[playerid][pYayinID]][fIsim]);
			eskiint[playerid] = GetPlayerInterior(playerid);
			eskiworld[playerid] = GetPlayerVirtualWorld(playerid);
			GetPlayerPos(playerid, eskipos[playerid][0], eskipos[playerid][1], eskipos[playerid][2]);
			SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(FirmaInfo[oyuncuData[playerid][pYayinID]][fKameraman]));
			SetPlayerInterior(playerid, GetPlayerInterior(FirmaInfo[oyuncuData[playerid][pYayinID]][fKameraman]));
			StartPlayerWatchingCamera(playerid, FirmaInfo[oyuncuData[playerid][pYayinID]][fKameraman]);
			TextDrawShowForPlayer(playerid, favtv_0); 
			YayinLogoGoster(playerid, oyuncuData[playerid][pYayinID]);
			TogglePlayerSpectating(playerid, 1);
			SetPVarInt(playerid, "oyuncuyayinda", 1);
		}
	}
	else if(!response)
	{
		oyuncuData[playerid][pYayinID] = -1;
		DeletePVar(playerid, "pYayinSec");
	}
	return 1;
}

CMD:yayinayril(playerid, params[])
{
	if(baliktutuyor[playerid] == true) return hataMesaji(playerid, "Balýk tutarken bu komutu kullanamazsýnýz.");
	if(IsPlayerWatchingCamera(playerid))
	{
		StopPlayerWatchingCamera(playerid);
	}
	else{
		return hataMesaji(playerid, "Yayýn izlemiyorsunuz.");
	}
	oyuncuData[playerid][pYayinID] = -1;
	TextDrawHideForPlayer(playerid, favtv_0);
	PlayerTextDrawHide(playerid, favtv_1[playerid]);
	SunucuMesaji(playerid, "Yayýndan ayrýldýn.");
	SetSpawnInfo(playerid, 0, oyuncuData[playerid][oKiyafet], eskipos[playerid][0], eskipos[playerid][1], eskipos[playerid][2], eskipos[playerid][3], 0, 0, 0, 0, 0, 0);
	TogglePlayerSpectating(playerid, false);
	TogglePlayerControllable(playerid, false);
	SetTimerEx("oyuncucoz", 2000, false, "i", playerid);
	SetPlayerInterior(playerid, eskiint[playerid]);
	SetPlayerVirtualWorld(playerid, eskiworld[playerid]);
	SetTimerEx("skinduzelt", 100, false, "i", playerid);
	SetPVarInt(playerid, "oyuncuyayinda", 0);
	DeletePVar(playerid, "oyuncuyayinda");
	DeletePVar(playerid, "pYayinSec");
	new query[180];
	mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `player_weapons` WHERE `weapon_userid` = '%d' AND `weapon_statusid` = '%d'", oyuncuData[playerid][oID], SILAH_OYUNCU_USTUNDE);
	mysql_tquery(g_SQL, query, "OnPlayerGetWeapons", "d", playerid);
	return 1;
}

CMD:reklamonay(playerid, params[])
{
	static reklamid;
	if(oyuncuData[playerid][oAdmin] < 1 && oyuncuData[playerid][oHelper] < 1) return YetkinizYok(playerid);
	if(sscanf(params, "d", reklamid)) return kullanimMesaji(playerid, "/reklamonay [reklamid] - Reklam ID'lerine /reklamlar ile bakabilirsiniz.");
	if(ReklamBilgi[reklamid][reklamkullanimda] == false) return hataMesaji(playerid, "Geçersiz reklam ID'si girdiniz.");
	if(ReklamBilgi[reklamid][reklamonaylandi] == true) return hataMesaji(playerid, "Bu reklam zaten onaylanmýþ, yayýnlanmayý bekliyor.");
	if(strcmp(oyuncuData[playerid][oAdminNick], "yok", true))
	{
		foreach(new i : Player)
		{
			if(oyuncuData[i][oHelper] > 0)
			{
				SCM_Ex(i, RENK_ACIKKIRMIZI, "%s adlý yönetici %d ID'li reklamý onayladý.", oyuncuData[playerid][oAdminNick], reklamid);
			}
		}
	}
	else 
	{
		foreach(new i : Player)
		{
			if(oyuncuData[i][oHelper] > 0)
			{
				SCM_Ex(i, RENK_ACIKKIRMIZI, "%s adlý yönetici %d ID'li reklamý onayladý.", OyuncuIsim(playerid), reklamid);
			}
		}
	}
	ReklamTimer[reklamid] = SetTimerEx("ReklamYayinla", 70000 * (reklamid + 1), false, "d", reklamid);
	ReklamBilgi[reklamid][reklamonaylandi] = true;
	return 1;
}

CMD:reklamreddet(playerid, params[])
{
	static reklamid;
	if(oyuncuData[playerid][oAdmin] < 1 && oyuncuData[playerid][oHelper] < 1) return YetkinizYok(playerid);
	if(sscanf(params, "d", reklamid)) return kullanimMesaji(playerid, "/reklamreddet [reklamid] - Reklam ID'lerine /reklamlar ile bakabilirsiniz.");
	if(ReklamBilgi[reklamid][reklamkullanimda] == false) return hataMesaji(playerid, "Geçersiz reklam ID'si girdiniz.");
	ReklamSil(reklamid);
	if(strcmp(oyuncuData[playerid][oAdminNick], "yok", true))
	{
		foreach(new i : Player)
		{
			if(oyuncuData[i][oHelper] > 0)
			{
				SCM_Ex(i, RENK_ACIKKIRMIZI, "%s adlý kiþi %d ID'li reklamý sildi.", oyuncuData[playerid][oAdminNick], reklamid);
			}
		}
	}
	else 
	{
		foreach(new i : Player)
		{
			if(oyuncuData[i][oHelper] > 0)
			{
				SCM_Ex(i, RENK_ACIKKIRMIZI, "%s adlý kiþi %d ID'li reklamý sildi.", OyuncuIsim(playerid), reklamid);
			}
		}
	}
	return 1;
}

CMD:reklamlar(playerid)
{
	if(oyuncuData[playerid][oAdmin] < 1 && oyuncuData[playerid][oHelper] < 1) return YetkinizYok(playerid);
	new sayi = 0;
	for(new i = 0; i != MAX_REKLAM; i++)
	{
		if(ReklamBilgi[i][reklamkullanimda] == false) continue;
		SCM_Ex(playerid, RENK_RAPOR, "REKLAM ID: %d - %s(%d) : %s", i, OyuncuIsim(ReklamBilgi[i][reklamsahip]), ReklamBilgi[i][reklamsahip], ReklamBilgi[i][reklamyazi]);
		sayi++;
	}
	if(sayi == 0) return hataMesaji(playerid, "Onay bekleyen reklam yok.");
	return 1;
}

CMD:reklam(playerid, params[])
{
	if(oyuncuData[playerid][oPara] < 350) return hataMesaji(playerid, "Reklam vermek için $350'a ihtiyacýnýz var.");

	if(oyuncuData[playerid][oVIP] == 0 && oyuncuData[playerid][oAdmin] < 1)
	{
		new noktadami = 0;
		for(new b = 0; b != MAX_FIRMA; b++)
		{
			if(Iter_Contains(Firma, b))
			{
				if(IsPlayerInRangeOfPoint(playerid,5.0, FirmaInfo[b][fiX], FirmaInfo[b][fiY], FirmaInfo[b][fiZ]) && GetPlayerVirtualWorld(playerid) == FirmaInfo[b][fiVw])
				{
					noktadami++;
					if(FirmaInfo[b][fAlan] != 1) return hataMesaji(playerid, "Basýn firmasýnýn reklam verme noktasýnda olmalýsýnýz.");
					new id = Iter_Free(Reklamlar);
					if(id < 0) return SendClientMessage(playerid, RENK_RAPOR, "Onay bekleyen reklam listesi doldu. Daha sonra göndermeyi deneyin.");
					if(isnull(params)) return kullanimMesaji(playerid, "/reklam [metin]");
					foreach(new i : Reklamlar)
					{
						if(ReklamBilgi[i][reklamsahip] == playerid) return hataMesaji(playerid, "Zaten bir reklam vermiþsiniz.");
					}
					ReklamEkle(playerid, id, params, b);
					ParaEkle(playerid, -350);
					FirmaParaEkle(b, 350);
				}
			}
		}
		if(noktadami == 0) return hataMesaji(playerid, "Bir basýn firmasýnýn reklam verme noktasýnda deðilsiniz.");
	}
	else
	{
		new id = Iter_Free(Reklamlar);
		if(id < 0) return SendClientMessage(playerid, RENK_RAPOR, "Onay bekleyen reklam listesi doldu. Daha sonra göndermeyi deneyin.");
		if(isnull(params)) return kullanimMesaji(playerid, "/reklam [metin]");
		foreach(new i : Reklamlar)
		{
			if(ReklamBilgi[i][reklamsahip] == playerid) return hataMesaji(playerid, "Zaten bir reklam vermiþsiniz.");
		}
		ReklamEkle(playerid, id, params, -1);
		ParaEkle(playerid, -350);
	}
	return 1;
}

CMD:apm(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 1) return YetkinizYok(playerid);
	new oyuncu, yazi[128];
	if(sscanf(params, "us[128]", oyuncu, yazi))
		return kullanimMesaji(playerid, "/apm [oyuncu ID/isim] [mesaj]");

	if(!IsPlayerConnected(oyuncu))
		return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");

	if(!oyuncuData[oyuncu][oGiris])
		return hataMesaji(playerid, "Oyuncu giriþ yapmamýþ, komut üzerinde kullanýlamaz.");

	if(playerid == oyuncu)
		return hataMesaji(playerid, "Bu komutu kendi üzerinde kullanamazsýn.");

	SCM_Ex(oyuncu, RENK_PM, "[YONETICI] %s konuþuyor: %s", oyuncuData[playerid][oAdminNick], yazi);
	if(playerid != oyuncu) SCM_Ex(playerid, RENK_PM, "[YONETICI] %s konuþuyor: %s", oyuncuData[playerid][oAdminNick], yazi);
	return 1;
}

CMD:pm(playerid, params[])
{
	new oyuncu, mesaj[128];
	if(sscanf(params, "us[128]", oyuncu, mesaj)) return kullanimMesaji(playerid, "/pm [oyuncu id/isim] [mesaj]");
	if(!IsPlayerConnected(oyuncu)) return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(!oyuncuData[playerid][oPMDurum] && oyuncuData[playerid][oAdmin] < 1) return hataMesaji(playerid, "PM durumunuz kapalý.");
	if(!oyuncuData[oyuncu][oGiris]) return hataMesaji(playerid, "Oyuncu giriþ yapmamýþ, komut üzerinde kullanýlamaz.");
	if(oyuncu == playerid) return hataMesaji(playerid, "Kendine PM atamazsýn.");
	if(!oyuncuData[oyuncu][oPMDurum] && oyuncuData[playerid][oAdmin] < 1) return hataMesaji(playerid, "Girilen oyuncu PM alma durumunu kapatmýþ.");

	if(oyuncuData[oyuncu][oAdmin] > 0 && oyuncuData[oyuncu][oAdminDurum] == false)
	{
		DialogGoster(playerid, DIALOG_ADMINPMUYARI, DIALOG_STYLE_MSGBOX, "Uyarý", "Ýþbaþýnda olmayan bir yetkiliye PM atýyorsunuz.\nBunun oyun içi cezaya sebebiyet vereceðini unutmayýn.\nHerhangi bir sorununuz varsa, /rapor komutunu kullanýn.\nYine de PM atmak istiyor musun?", "Evet", "Iptal");
		strpack(admineatilanpm[playerid], mesaj, 128);
		pmatilanadmin[playerid] = oyuncu;
	}
	else
	{
		SCM_Ex(playerid, RENK_PM, "(( << %s (%d): %s ))", OyuncuIsim(oyuncu), oyuncu, mesaj);
		SCM_Ex(oyuncu, RENK_SARI, "(( >> %s (%d): %s ))", OyuncuIsim(playerid), playerid, mesaj);
		foreach(new i : Player) {
			if(oyuncuData[i][oAdmin] > 0 && oyuncuData[i][oPMIzlemeDurum] == true)
			{
				SCM_Ex(i, RENK_PM, "(( %s(%d) > %s(%d): %s ))", OyuncuIsim(playerid), playerid, OyuncuIsim(oyuncu), oyuncu, mesaj);
			}
		}
		SonPM[playerid] = oyuncu;
		Log_Kaydet("loglar/pm_log.txt", "[%s] %s adli kisi %s adli kisiye pm atti: %s", Tarih(), OyuncuIsim(playerid), OyuncuIsim(oyuncu), mesaj);
	}
	return 1;
}

CMD:r(playerid, params[])
{
	if(SonPM[playerid] == -1) return hataMesaji(playerid, "Son mesajlaþtýðýnýz kimse bulunmuyor.");
	if(!IsPlayerConnected(SonPM[playerid])) return hataMesaji(playerid, "Son mesajlaþtýðýnýz kiþi oyunda deðil.");
	if(!oyuncuData[playerid][oPMDurum] && oyuncuData[playerid][oAdmin] < 1) return hataMesaji(playerid, "PM durumunuz kapalý.");
	if(!oyuncuData[SonPM[playerid]][oPMDurum] && oyuncuData[playerid][oAdmin] < 1) return hataMesaji(playerid, "Son mesajlaþtýðýnýz kiþi özel mesaj alýmýný kapatmýþ.");
	if(!oyuncuData[SonPM[playerid]][oGiris]) return hataMesaji(playerid, "Oyuncu giriþ yapmamýþ, komut üzerinde kullanýlamaz.");
	static mesaj[128];
	if(sscanf(params, "s[128]", mesaj)) return kullanimMesaji(playerid, "/r [mesaj] - Son PM atýlan kiþiye mesaj gönderir.");

	SCM_Ex(playerid, RENK_PM, "(( << %s (%d): %s ))", OyuncuIsim(SonPM[playerid]), SonPM[playerid], mesaj);
	SCM_Ex(SonPM[playerid], RENK_SARI, "(( >> %s (%d): %s ))", OyuncuIsim(playerid), playerid, mesaj);
	foreach(new i : Player)
	{
		if(oyuncuData[i][oAdmin] > 0 && oyuncuData[i][oPMIzlemeDurum] == true)
		{
			SCM_Ex(i, RENK_PM, "(( %s(%d) > %s(%d): %s ))", OyuncuIsim(playerid), playerid, OyuncuIsim(SonPM[playerid]), SonPM[playerid], mesaj);
		}
	}
	Log_Kaydet("loglar/pm_log.txt", "[%s] %s adli kisi %s adli kisiye pm atti: %s", Tarih(), OyuncuIsim(playerid), OyuncuIsim(SonPM[playerid]), mesaj);
	return 1;
}

CMD:pmkapat(playerid, params[])
{
	switch(oyuncuData[playerid][oPMDurum]) {
		case false: {
			oyuncuData[playerid][oPMDurum] = true;
			SunucuMesaji(playerid, "PM durumunu açtýn.");
		}
		case true: {
			oyuncuData[playerid][oPMDurum] = false;
			SunucuMesaji(playerid, "PM durumunu kapattýn.");
		}
	}
	return 1;
}

CMD:bkapat(playerid, params[])
{
	if(oyuncuData[playerid][oVIP] < 1) return hataMesaji(playerid, "Bu komuttan yanlýzca VIP üyeler yararlanabilir.");
	switch(oyuncuData[playerid][pOOC]) {
		case false: {
			oyuncuData[playerid][pOOC] = true;
			SunucuMesaji(playerid, "/b kanalýný görmeyi açtýn.");
		}
		case true: {
			oyuncuData[playerid][pOOC] = false;
			SunucuMesaji(playerid, "/b kanalýný görmeyi kapattýn.");
		}
	}
	return 1;
}

CMD:yayinkapat(playerid, params[])
{
	switch(oyuncuData[playerid][pYayin]) {
		case false: {
			oyuncuData[playerid][pYayin] = true;
			SunucuMesaji(playerid, "Yayýn kanalýný görmeyi açtýn.");
		}
		case true: {
			oyuncuData[playerid][pYayin] = false;
			SunucuMesaji(playerid, "Yayýn kanalýný görmeyi kapattýn.");
		}
	}
	return 1;
}

CMD:reklamkapat(playerid, params[])
{
	switch(oyuncuData[playerid][pReklam]) {
		case false: {
			oyuncuData[playerid][pReklam] = true;
			SunucuMesaji(playerid, "Reklam kanalýný görmeyi açtýn.");
		}
		case true: {
			oyuncuData[playerid][pReklam] = false;
			SunucuMesaji(playerid, "Reklam kanalýný görmeyi kapattýn.");
		}
	}
	return 1;
}



CMD:pmizledurum(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 8) return YetkinizYok(playerid);

	switch(oyuncuData[playerid][oPMIzlemeDurum]) {
		case false: {
			oyuncuData[playerid][oPMIzlemeDurum] = true;
			SunucuMesaji(playerid, "PM izleme durumunu açtýn.");
		}
		case true: {
			oyuncuData[playerid][oPMIzlemeDurum] = false;
			SunucuMesaji(playerid, "PM izleme durumunu kapattýn.");
		}
	}
	return 1;
}

CMD:ahapis(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 1) return YetkinizYok(playerid);

	static oyuncuid, dakika, sebep[64];
	if(sscanf(params, "uds[64]", oyuncuid, dakika, sebep))
		return kullanimMesaji(playerid, "/ahapis [oyuncu id/isim] [dakika] [sebep]");

	if(!IsPlayerConnected(oyuncuid))
		return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");

	if(!oyuncuData[oyuncuid][oGiris])
		return hataMesaji(playerid, "Oyuncu giriþ yapmamýþ, komut üzerinde kullanýlamaz.");

	if(oyuncuData[oyuncuid][oAdmin] > oyuncuData[playerid][oAdmin])
		return hataMesaji(playerid, "Girilen kiþi sizden yüksek bir yönetici seviyesine sahip.");

	if(dakika < 1)
		return hataMesaji(playerid, "Dakika en az 1 olmalýdýr.");

	SCM_ExAll(RENK_GRI, "[CEZA]: %s, %s adlý yetkili tarafýndan %d dakika cezalandýrýldý. Sebep: %s", OyuncuIsim(oyuncuid), oyuncuData[playerid][oAdminNick], dakika, sebep);
	Log_Kaydet("loglar/ooccezalar.txt", "[%s] %s(%s) adli kisi %s adli kisiyi %d dakika cezalandirdi. Sebep: %s", Tarih(), OyuncuIsim(playerid), oyuncuData[playerid][oAdminNick], OyuncuIsim(oyuncuid), dakika, sebep);
	oyuncuData[oyuncuid][oHapisSure][0] = dakika;

	new query[250 + MAX_PLAYER_NAME + MAX_PLAYER_NAME + 150];
	mysql_format(g_SQL, query, sizeof(query), "INSERT INTO `ooccezalar` (`KarakterAdi`, `CezaSure`, `Sebep`, `Yetkili`, `yasaklanmatarihi`) VALUES ('%e', '%d', '%e', '%e', '%s')", OyuncuIsim(oyuncuid), dakika, sebep, oyuncuData[playerid][oAdminNick], SQLTarih());
	mysql_query(g_SQL, query);

	HapiseAt(oyuncuid);
	return 1;
}

CMD:hapiskurtar(playerid, params[])
{
	if(oyuncuData[playerid][oHapisSure][0] > 2 && oyuncuData[playerid][oHapisSure][1] > 2)
		return hataMesaji(playerid, "Hapis süreniz devam ederken bu komutu kullanamazsýnýz.");
	oyuncuData[playerid][oHapisSure][0] = 0;
	oyuncuData[playerid][oHapisSure][1] = 0;
	SetPlayerPos(playerid, 1529.6327, -1683.8873, 13.3828);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	PlayerTextDrawHide(playerid, HapisText[playerid]);
	SunucuMesaji(playerid, "Hapis süreniz bitti.");
	OyuncuKaydet(playerid);
	TogglePlayerControllable(playerid, true);
	return 1;
}

CMD:ahapiscikar(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 1) return YetkinizYok(playerid);

	static oyuncuid;
	if(sscanf(params, "u", oyuncuid))
		return kullanimMesaji(playerid, "/ahapiscikar [oyuncu id/isim]");

	if(!IsPlayerConnected(oyuncuid))
		return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");

	if(!oyuncuData[oyuncuid][oGiris])
		return hataMesaji(playerid, "Oyuncu giriþ yapmamýþ, komut üzerinde kullanýlamaz.");

	if(oyuncuData[playerid][oAdmin] < 6)
	{
		if(oyuncuid == playerid) return hataMesaji(playerid, "Kendinizi hapisten çýkaramazsýnýz.");
	}

	if(oyuncuData[oyuncuid][oAdmin] > oyuncuData[playerid][oAdmin])
		return hataMesaji(playerid, "Girilen kiþi sizden yüksek bir yönetici seviyesine sahip.");

	if(oyuncuData[oyuncuid][oHapisSure][0] < 2 && oyuncuData[oyuncuid][oHapisSure][1] < 2)
		return hataMesaji(playerid, "Oyuncu hapiste deðil.");

	YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s, %s adlý kiþiyi hapisten çýkardý.", oyuncuData[playerid][oAdminNick], OyuncuIsim(oyuncuid));
	Log_Kaydet("loglar/admin_log.txt", "[%s] %s, %s adlý kiþiyi hapisten çýkardý.", Tarih(), oyuncuData[playerid][oAdminNick], OyuncuIsim(oyuncuid));
	oyuncuData[oyuncuid][oHapisSure][0] = 0;
	oyuncuData[oyuncuid][oHapisSure][1] = 0;
	SetPlayerPos(oyuncuid, 1529.6327, -1683.8873, 13.3828);
	SetPlayerInterior(oyuncuid, 0);
	SetPlayerVirtualWorld(oyuncuid, 0);
	PlayerTextDrawHide(oyuncuid, HapisText[playerid]);
	SunucuMesaji(oyuncuid, "Hapis süreniz bitti.");
	OyuncuKaydet(oyuncuid);
	TogglePlayerControllable(oyuncuid, true);
	return 1;
}

CMD:offparakes(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 8) return YetkinizYok(playerid);

	static query[128], isim[MAX_PLAYER_NAME], miktar;
	if(sscanf(params, "s[24]d", isim, miktar))
		return kullanimMesaji(playerid, "/offparakes [Isim_Soyisim] [miktar]");

	new oyuncuid = AktiflikKontrol(isim);
	if(IsPlayerConnected(oyuncuid))
		return hataMesaji(playerid, "Girilen oyuncu oyunda, /aparaver komutunu kullan.");

	mysql_format(g_SQL, query,sizeof(query),"SELECT * FROM oyuncular WHERE isim = '%e'", isim);
	mysql_tquery(g_SQL, query, "ParaKesDene", "isd", playerid, isim, miktar);
	return 1;
}

CMD:offtransfer(playerid, params[])
{
	if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Bu komut yaralýyken kullanýlamaz.");
	if(oyuncuData[playerid][oHapisSure][0] > 0 || oyuncuData[playerid][oHapisSure][1] > 0) return hataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oGozalti] > 0) return hataMesaji(playerid, "Gözaltýndayken bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oDonduruldu] > 0) return hataMesaji(playerid, "Dondurulma etkisindeyken bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");
	static id;
	if((id = Oyuncu_Binada(playerid)) != -1) {
		if(BinaBilgi[id][binaTur] != 1) return hataMesaji(playerid, "Bankada deðilsin.");

		static query[128], isim[MAX_PLAYER_NAME], miktar;
		if(sscanf(params, "s[24]d", isim, miktar))
			return kullanimMesaji(playerid, "/offtransfer [Isim_Soyisim] [miktar]");
		if(miktar < 1) return hataMesaji(playerid, "Lütfen 0'dan büyük numerik bir deðer girin.");
		//if(oyuncuData[playerid][oPara] < miktar) return hataMesaji(playerid, "Üzerinizde bu miktarda para yok.");
		if(oyuncuData[playerid][oBankaPara] < miktar) return hataMesaji(playerid, "Banka hesabýnýzda bu miktarda para yok.");
		new oyuncuid = AktiflikKontrol(isim);
		if(IsPlayerConnected(oyuncuid))
			return hataMesaji(playerid, "Girilen oyuncu oyunda, oyun içerisinden transferi gerçekleþtirin.");

		mysql_format(g_SQL, query,sizeof(query),"SELECT * FROM oyuncular WHERE isim = '%e'", isim);
		mysql_tquery(g_SQL, query, "OfflineTransfer", "isd", playerid, isim, miktar);
		return true;
	}
	hataMesaji(playerid, "Bankada deðilsin.");
	return 1;
}

CMD:offparaver(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 8) return YetkinizYok(playerid);

	static query[128], isim[MAX_PLAYER_NAME], miktar;
	if(sscanf(params, "s[24]d", isim, miktar))
		return kullanimMesaji(playerid, "/offparaver [oyuncu isim] [miktar]");

	new oyuncuid = AktiflikKontrol(isim);
	if(IsPlayerConnected(oyuncuid))
		return hataMesaji(playerid, "Girilen oyuncu oyunda, /aparaver komutunu kullan.");

	mysql_format(g_SQL, query,sizeof(query),"SELECT * FROM oyuncular WHERE isim = '%e'", isim);
	mysql_tquery(g_SQL, query, "ParaDene", "isd", playerid, isim, miktar);
	return 1;
}

CMD:offban(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 2) return YetkinizYok(playerid);
	static query[192], isim[MAX_PLAYER_NAME], sebep[64];
	if(sscanf(params, "s[32]s[64]", isim, sebep)) return kullanimMesaji(playerid, "/offban [isim_soyisim] [sebep]");
	/*new oyuncuid = AktiflikKontrol(isim);
	if(IsPlayerConnected(oyuncuid)) return hataMesaji(playerid, "Girilen oyuncu oyunda, /ban komutunu dene.");*/

	mysql_format(g_SQL, query, sizeof query, "SELECT * FROM oyuncular WHERE isim = '%e'", isim);
	mysql_tquery(g_SQL, query, "offlinebanla", "iss", playerid, isim, sebep);
	return 1;
}

CMD:offhapis(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 1) return YetkinizYok(playerid);

	static query[128], isim[MAX_PLAYER_NAME], dakika, sebep[64];
	if(sscanf(params, "s[24]ds[64]", isim, dakika, sebep))
		return kullanimMesaji(playerid, "/offhapis [oyuncu isim] [dakika] [sebep]");

	new oyuncuid = AktiflikKontrol(isim);
	if(IsPlayerConnected(oyuncuid))
		return hataMesaji(playerid, "Girilen oyuncu oyunda, /ahapis komutunu kullan.");

	mysql_format(g_SQL, query,sizeof(query),"SELECT * FROM oyuncular WHERE isim = '%e'", isim);
	mysql_tquery(g_SQL, query, "HapisDene", "isds", playerid, isim, dakika, sebep);
	return 1;
}

CMD:oyundanat(playerid, params[])
{
	if(!oyuncuData[playerid][oAdmin]) return YetkinizYok(playerid);

	static oyuncuid, sebep[64];
	if(sscanf(params, "us[64]", oyuncuid, sebep))
		return kullanimMesaji(playerid, "/oyundanat [oyuncu id/isim] [sebep]");

	if(!IsPlayerConnected(oyuncuid))
		return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");

	if(!oyuncuData[oyuncuid][oGiris])
		return hataMesaji(playerid, "Oyuncu giriþ yapmamýþ, komut üzerinde kullanýlamaz.");

	if(oyuncuid == playerid)
		return hataMesaji(playerid, "Kendini oyundan atamazsýn.");

	if(!strcmp(sebep, ".", true))
		return hataMesaji(playerid, "Sebep \".\" olamaz.");

	if(oyuncuData[oyuncuid][oAdmin] > oyuncuData[playerid][oAdmin])
		return hataMesaji(playerid, "Girilen kiþi sizden yüksek bir yönetici seviyesine sahip.");

	SCM_ExAll(RENK_YETKILI, "[YETKÝLÝ ÝÞLEM]: {FFFFFF}%s, %s adlý kiþiyi oyundan attý. sebep: %s", oyuncuData[playerid][oAdminNick], OyuncuIsim(oyuncuid), sebep);
	Log_Kaydet("loglar/admin_log.txt", "[%s] %s, %s adlý kiþiyi %s sebebiyle oyundan attý.", Tarih(), oyuncuData[playerid][oAdminNick], OyuncuIsim(oyuncuid), sebep);
	KickEx(oyuncuid);
	return 1;
}

CMD:skick(playerid, params[])
{
	if(!oyuncuData[playerid][oAdmin]) return YetkinizYok(playerid);

	static oyuncuid, sebep[64];
	if(sscanf(params, "us[64]", oyuncuid, sebep))
		return kullanimMesaji(playerid, "/skick [oyuncu id/isim] [sebep]");

	if(!IsPlayerConnected(oyuncuid))
		return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");

	if(!oyuncuData[oyuncuid][oGiris])
		return hataMesaji(playerid, "Oyuncu giriþ yapmamýþ, komut üzerinde kullanýlamaz.");

	if(oyuncuid == playerid)
		return hataMesaji(playerid, "Kendini oyundan atamazsýn.");

	if(!strcmp(sebep, ".", true))
		return hataMesaji(playerid, "Sebep \".\" olamaz.");

	if(oyuncuData[oyuncuid][oAdmin] > oyuncuData[playerid][oAdmin])
		return hataMesaji(playerid, "Girilen kiþi sizden yüksek bir yönetici seviyesine sahip.");

	SunucuMesaji(oyuncuid, "%s adlý yetkili sizi %s sebebiyle sunucudan attý.", oyuncuData[playerid][oAdminNick], sebep);
	YoneticiMesaji(RENK_YETKILI, "%s adlý yetkili %s(%d)'i %s sebebiyle sunucudan attý.(/skick)", oyuncuData[playerid][oAdminNick], OyuncuIsim(oyuncuid), oyuncuid, sebep);
	Log_Kaydet("loglar/admin_log.txt", "[%s] %s, %s adli kisiyi %s sebebiyle oyundan atti.(/skick)", Tarih(), oyuncuData[playerid][oAdminNick], OyuncuIsim(oyuncuid), sebep);
	KickEx(oyuncuid);
	return 1;
}

CMD:herkesiat(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 6) return YetkinizYok(playerid);
	if(isnull(params)) return kullanimMesaji(playerid, "/herkesiat [sebep]");
	if(strlen(params) > 12) return hataMesaji(playerid, "Sebep en fazla 12 harfli olabilir.");
	static sayi;
	sayi = 0;
	SCM_ExAll(RENK_YETKILI, "[YETKÝLÝ ÝÞLEM]: {FFFFFF}%s, tüm oyuncularý oyundan attý. sebep: %s", oyuncuData[playerid][oAdminNick], params);
	foreach(new o : Player) {
		if(o == playerid) continue;
		KickEx(o);
		sayi++;
	}
	if(sayi > 0) SunucuMesaji(playerid, "%d adet oyuncu oyundan atýldý.", sayi);
	else SunucuMesaji(playerid, "Oyundan atýlacak sizden baþka oyuncu bulunamadýðý için kimse oyundan atýlamadý, bilgi mesajý otomatik olarak gönderildi.");
	Log_Kaydet("loglar/admin_log.txt", "[%s] %s, %d adet oyuncuyu %s sebebiyle oyundan attý.", Tarih(), oyuncuData[playerid][oAdminNick], sayi, params);
	return true;
}

CMD:herkeseparaver(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 6) return YetkinizYok(playerid);
	new miktar;
	if(sscanf(params, "d", miktar)) return kullanimMesaji(playerid, "/herkeseparaver [miktar]");

	YoneticiMesaji(RENK_YETKILI, "[YETKÝLÝ ÝÞLEM]: {FFFFFF}%s, tüm oyunculara %d$ para verdi.", oyuncuData[playerid][oAdminNick], miktar);
	foreach(new o : Player) {
		if(o == playerid) continue;
		ParaEkle(o, miktar);
	}
	SCM_ExAll(RENK_TURUNCU, "[ÝKRAMÝYE]: Nitro Roleplay, siz deðerli oyuncularýna %s miktarýnda ikramiye verdi, iyi oyunlar!", NumaraFormati(miktar));
	Log_Kaydet("loglar/admin_log.txt", "[%s] %s, %s ikramiye verdi.", Tarih(), oyuncuData[playerid][oAdminNick], miktar);
	return true;
}

CMD:banvc(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 2) return YetkinizYok(playerid);
	static oyuncu, sebep[32], query[256], oIP[16], sure, bool:sureban = false;
	if(sureban == true)
	{
		if(sscanf(params, "uds[32]", oyuncu, sure, sebep)) return kullanimMesaji(playerid, "/yasakla [oyuncu id/isim] [gün (-1 sýnýrsýz)] [sebep]");
		if(sure == 0 || sure < -1 || sure > 365) return hataMesaji(playerid, "Girilen süre deðeri, sýfýr - eksi deðer sayýlar (-1 hariç *sýnýrsýz ban içindir*) - 365 gün (1 yýl) harici yazýlamaz. [0,-1,365]");
	}
	else if(sscanf(params, "us[32]", oyuncu, sebep)) return kullanimMesaji(playerid, "/yasakla [oyuncu id/isim] [sebep]");
	if(!IsPlayerConnected(oyuncu)) return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");
	if(!oyuncuData[oyuncu][oGiris]) return hataMesaji(playerid, "Oyuncu giriþ yapmamýþ, komut üzerinde kullanýlamaz.");
	if(playerid == oyuncu) return hataMesaji(playerid, "Kendini banlayamazsýn.");
	if(oyuncuData[playerid][oAdmin] < oyuncuData[oyuncu][oAdmin]) return hataMesaji(playerid, "Girilen kiþi sizden yüksek seviye yöneticiliðe sahip.");
	if(!strcmp(sebep, ".", true)) return hataMesaji(playerid, "Sebep \".\" olamaz.");
	oyuncuData[oyuncu][oyuncuban] = 1; OyuncuKaydet(oyuncu);
	GetPlayerIp(oyuncu, oIP, sizeof(oIP));
	if(sureban == true)
	{
		if(sure > -1)
		{
			SCM_ExAll(RENK_GRI, "[YASAKLAMA]: %s, %s adlý kiþiyi sunucudan %d gün yasakladý. Sebep: %s", oyuncuData[playerid][oAdminNick], OyuncuIsim(oyuncu), sebep);
		}
		else SCM_ExAll(RENK_GRI, "[YASAKLAMA]: %s, %s adlý kiþiyi sunucudan sýnýrsýz yasakladý. Sebep: %s", oyuncuData[playerid][oAdminNick], OyuncuIsim(oyuncu), sebep);

		mysql_format(g_SQL, query, sizeof(query), "INSERT INTO `yasaklamalar` (`isim`, `yasaklayan`, `sebep`, `forumid`, `acilmatarihi`, `yasaklanmatarihi`) VALUES ('%e', '%e', '%e', '%d', '%d', '%e')", oyuncuData[oyuncu][oIsim], OyuncuIsim(playerid, 1), sebep, oyuncuData[oyuncu][oForumID], gettime() + sure * 86400, Tarih());
		Log_Kaydet("loglar/banlamalar.txt", "[%s] %s(%s) adli kisi %s adli kisiyi %s sebebiyle sunucudan yasakladi. (Gün: %d)", Tarih(), OyuncuIsim(playerid), oyuncuData[playerid][oAdminNick], OyuncuIsim(oyuncu), sebep, sure);
	}
	else
	{
		SCM_ExAll(RENK_GRI, "[YASAKLAMA]: %s, %s adlý kiþiyi sunucudan yasakladý. Sebep: %s", oyuncuData[playerid][oAdminNick], OyuncuIsim(oyuncu), sebep);
		mysql_format(g_SQL, query, sizeof(query), "INSERT INTO `yasaklamalar` (`isim`, `yasaklayan`, `sebep`, `forumid`, `acilmatarihi`, `yasaklanmatarihi`) VALUES ('%e', '%e', '%e', '%d', '0', '%e')", oyuncuData[oyuncu][oIsim], OyuncuIsim(playerid, 1), sebep, oyuncuData[oyuncu][oForumID], Tarih());
		Log_Kaydet("loglar/banlamalar.txt", "[%s] %s(%s) adli kisi %s adli kisiyi %s sebebiyle sunucudan yasakladi.", Tarih(), OyuncuIsim(playerid), oyuncuData[playerid][oAdminNick], OyuncuIsim(oyuncu), sebep);
	}
	mysql_query(g_SQL, query);
	KickEx(oyuncu);
	return 1;
}

stock Ban_Kontrol(playerid, slot)
{
	new query[128], Cache:VeriGetir, i, string[712], ban, bool:sistempasifmi = true;
	if(sistempasifmi == false)
	{
		mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `yasaklamalar` WHERE `isim` = '%e'", OyuncuKarakter[playerid][slot]);
		VeriGetir = mysql_query(g_SQL, query);
		new rows = cache_num_rows();
		if(rows)
		{
			while(i < rows)
			{
				if(gettime() < vericek_int(i, "acilmatarihi"))
				{
					ban++;
					format(string, sizeof(string), "{FFFFFF}Seçilen slotta bulunan {339999}%s{FFFFFF} isimli karakteriniz yasaklý durumdadýr.\n\n", OyuncuKarakter[playerid][slot]);
					format(string, sizeof(string), "%s{CC6633}- - - Yasaklanma Durumu Bilgileri - - -\n\n{FFFFFF}Yasak Tarihi: {CDCDCD}%s\n{FFFFFF}Açýlma Tarihi: {CDCDCD}%s\n\
						{FFFFFF}Yasaklayan Yetkili: {FF3333}%s\n{FFFFFF}Yasaklanma Sebebi: {CDCDCD}%s\n", \
						string, vericek_varchar(i, "yasaklanmatarihi"), convertDate(vericek_int(i, "acilmatarihi")), vericek_varchar(i, "yasaklayan"), vericek_varchar(i, "sebep"));
					ShowPlayerDialog(playerid, BOS_MESAJ, DIALOG_STYLE_MSGBOX, "{FFFFFF}[!]{FF0000}Yasaklý Karakter", string, "Kapat", "");
					cache_delete(VeriGetir);
					break;
				}
				i++;
			}

		}
		cache_delete(VeriGetir);
	}
	if(!ban){KarakterSec(playerid, slot+1);}
	return ban;
}

CMD:bankaldir(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 6) return YetkinizYok(playerid);
	static oyuncu[32], query[128];
	if(sscanf(params, "s[32]", oyuncu))
		return kullanimMesaji(playerid, "/bankaldir [oyuncu isim] ");

	mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM yasaklamalar WHERE isim = '%e'", oyuncu);
	mysql_tquery(g_SQL, query, "yoneticiyasaklamaarat", "d", playerid);
	return 1;
}

CMD:ipyasaklamakaldir(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 3)
		return YetkinizYok(playerid);

	static ip[16], query[128];
	if(sscanf(params, "s[16]", ip))
		return kullanimMesaji(playerid, "/ipyasaklamakaldir [ip]");

	mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM ipban WHERE ip = '%e'", ip);
	mysql_tquery(g_SQL, query, "yoneticiipyasaklamaarat", "d", playerid);
	return 1;
}

CMD:meslekyarat(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 7)
		return YetkinizYok(playerid);

	static tur, id = -1;
	if(sscanf(params, "d", tur))
		return kullanimMesaji(playerid, "/meslekyarat [tur]");

	if(tur < 1 || tur > 5)
		return hataMesaji(playerid, "Meslek türü geçersiz. 1 ve 5 arasýnda girmelisiniz.");

	id = Meslek_Yarat(playerid, tur);

	if(id < 0 )
		return hataMesaji(playerid, "Sunucu dinamik meslek limitine ulaþtýðý için yeni meslek yaratamazsýn.");

	SunucuMesaji(playerid, "Meslek baþarýyla yaratýldý. (ID: %d) - Tür: %s", id, MeslekIsim(tur));
	return 1;
}

CMD:mesleksil(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 7)
		return YetkinizYok(playerid);

	static id = 0;
	if(sscanf(params, "d", id))
		return kullanimMesaji(playerid, "/mesleksil [meslekid]");

	if((id < 0 || id >= MAKSIMUM_MESLEK) || !MeslekBilgi[id][mKullanimda])
		return hataMesaji(playerid, "Geçersiz meslek ID'si girdiniz.");

	Meslek_Sil(id);
	SunucuMesaji(playerid, "Meslek veritabanýndan silindi. (ID: %d)", id);
	return 1;
}

CMD:meslekduzenle(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 5)
		return YetkinizYok(playerid);

	static id, type[24], string[128];
	if(sscanf(params, "ds[24]S()[128]", id, type, string))
	{
		kullanimMesaji(playerid, "/meslekduzenle [id] [isim]");
		SendClientMessage(playerid, RENK_SARI, "[ÝSÝMLER]:{FFFFFF} lokasyon, tur");
		return 1;
	}
	if((id < 0 || id >= MAKSIMUM_MESLEK) || !MeslekBilgi[id][mKullanimda])
		return hataMesaji(playerid, "Geçersiz ID!");

	if(!strcmp(type, "lokasyon", true))
	{
		static Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);

		MeslekBilgi[id][mPos][0] = x;
		MeslekBilgi[id][mPos][1] = y;
		MeslekBilgi[id][mPos][2] = z;
		MeslekBilgi[id][mInterior] = GetPlayerInterior(playerid);
		MeslekBilgi[id][mWorld] = GetPlayerVirtualWorld(playerid);

		Meslek_Yenile(id);
		Meslek_Kaydet(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "[ADMIN]: {FFFFFF}%s bir mesleðin yerini deðiþtirdi. (ID: %d) - Tür: %s", oyuncuData[playerid][oAdminNick], id, MeslekIsim(MeslekBilgi[id][mTur]));
	}
	else if(!strcmp(type, "tur", true))
	{
		new turid;
		if(sscanf(string, "d", turid))
			return kullanimMesaji(playerid, "/meslekduzenle [id] tur [yeni tür]");

		if(turid < 1 || turid > 5)
			return hataMesaji(playerid, "Geçersiz tür girdiniz. 1 ve 5 arasýnda olmalý.");

		MeslekBilgi[id][mTur] = turid;
		Meslek_Yenile(id);
		Meslek_Kaydet(id);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s adlý yönetici bir mesleðin türünü deðiþtirdi. (ID: %d | Yeni Tür: %s)", oyuncuData[playerid][oAdminNick], id, MeslekIsim(turid));
	}
	return 1;
}
CMD:meslekgir(playerid)
{
	if(oyuncuData[playerid][oEhliyet] == false) return hataMesaji(playerid, "Ehliyetiniz bulunmamaktadýr.");
	static id = -1;
	if((id = Meslek_Yakin(playerid)) != -1)
	{
		if(oyuncuData[playerid][oMeslek] == MeslekBilgi[id][mTur]) return hataMesaji(playerid, "Zaten bu meslektesin.");

		oyuncuData[playerid][oMeslek] = MeslekBilgi[id][mTur];
		SunucuMesaji(playerid, "%s mesleðine girdin. - Meslek komutlarýný görmek için \"/meslekyardim\" yazýn.", MeslekIsim(MeslekBilgi[id][mTur]));
	}
	else hataMesaji(playerid, "Herhangi bir iþe girme noktasýna yakýn deðilsin.");
	return 1;
}

CMD:meslekayril(playerid)
{
	if(oyuncuData[playerid][oMeslek] != -1)
	{
		SunucuMesaji(playerid, "%s mesleðinden ayrýldýn.", MeslekIsim(oyuncuData[playerid][oMeslek]));
		oyuncuData[playerid][oMeslek] = -1;
	}
	else if(oyuncuData[playerid][oMeslek] == -1)
	{
		hataMesaji(playerid, "Zaten bir meslekte deðilsin.");
	}
	return 1;
}

CMD:taksiisbasi(playerid, params[])
{
	if(oyuncuData[playerid][oMeslek] == 4 && oyuncuData[playerid][oTaksiIsbasi] == false)
	{
		oyuncuData[playerid][oTaksiIsbasi] = true;
		SunucuMesaji(playerid, "Taksici iþbaþý yaptýn, taksine bin ve yolcularýný bekle. Diðer komutlar için '/meslekyardim' kullan.");
	}
	else if(oyuncuData[playerid][oMeslek] == 4 && oyuncuData[playerid][oTaksiIsbasi] == true)
	{
		oyuncuData[playerid][oTaksiIsbasi] = false;
		SunucuMesaji(playerid, "Taksici iþbaþýný býraktýn. Normal yaþamýna dönebilirsin.");
	}
	else return hataMesaji(playerid, "Taksici deðilsin, iþbaþý yapamazsýn.");
	return 1;
}

	CMD:yakindakiler(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 1) return YetkinizYok(playerid);

		static id = -1, sayi;
		sayi = 0;
		if((id = Ev_Yakin(playerid)) != -1)
			SunucuMesaji(playerid, "Yakýnýndaki Ev ID: %d.", id), sayi++;

		if((id = Isyeri_Yakin(playerid)) != -1)
			SunucuMesaji(playerid, "Yakýnýndaki Ýþyeri ID: %d.", id), sayi++;

		if((id = Bina_Yakin(playerid)) != -1)
			SunucuMesaji(playerid, "Yakýnýndaki Bina ID: %d.", id), sayi++;

		if((id = ATM_Yakin(playerid)) != -1)
			SunucuMesaji(playerid, "Yakýnýndaki ATM ID: %d.", id), sayi++;

		if((id = ATM_Yakin(playerid)) != -1)
			SunucuMesaji(playerid, "Yakýnýndaki Obje ID: %d.", id), sayi++;

		if((id = Uyusturucu_Yakin(playerid)) != -1)
			SunucuMesaji(playerid, "Yakýnýndaki Uyuþturucu ID: %d.", id), sayi++;

		if((id = Tutuklama_Yakin(playerid)) != -1)
			SunucuMesaji(playerid, "Yakýnýndaki Tutuklama Noktasý ID: %d.", id), sayi++;

		if((id = Meslek_Yakin(playerid)) != -1)
			SunucuMesaji(playerid, "Yakýnýndaki Meslek ID: %d.", id), sayi++;

		if((id = KogusBul(playerid)) != -1)
			SunucuMesaji(playerid, "Yakýnýndaki koðuþ ID: %d", id), sayi++;

		if((id = GateBul(playerid)) != -1)
			SunucuMesaji(playerid, "Yakýnýndaki gate ID: %d", id), sayi++;

		if((id = NoktaBul(playerid)) != -1)
			SunucuMesaji(playerid, "Yakýnýndaki teleport noktasý ID: %d | Ýsim: %s", id, TeleportData[id][telIsim]), sayi++;

		if((id = NoktaCikisBul(playerid)) != -1)
			SunucuMesaji(playerid, "Yakýnýndaki teleport noktasý ID: %d | Ýsim: %s", id, TeleportData[id][telIsim]), sayi++;

		if(!sayi) hataMesaji(playerid, "Yakýnýnda dinamik bir eþya bulunmuyor!");
		return 1;
	}

	CMD:asansoryarat(playerid, params[])
	{
		new id = Iter_Free(Asansorler);
		if(id < 0) return hataMesaji(playerid, "Sunucu maksimum tamirci seviyesine ulaþtý.");
		AsansorOlustur(playerid, id);
		return 1;
	}

	CMD:asansorduzenle(playerid, params[])
	{
		new id;
		if(sscanf(params, "d", id)) return kullanimMesaji(playerid, "/asansorduzenle [id]");
		if(!Iter_Contains(Asansorler, id)) return hataMesaji(playerid, "Belirtilen ID'de asansör mevcut deðil.");
		return 1;
	}

	CMD:birlikislem(playerid, params[])
	{
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1209.1365, -1752.0742, 13.5935)) return hataMesaji(playerid, "Birlik iþlem noktasýnda deðilsin.");
		if(!oyuncuData[playerid][oGiris]) return hataMesaji(playerid, "Bu komutu kullanmak için giriþ yapmalýsýn.");
		if(oyuncuData[playerid][oHapisSure][0] > 0) return hataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Araçtayken bu komutu kullanamazsýn.");

		DialogGoster(playerid, DIALOG_BIRLIKISLEM, DIALOG_STYLE_TABLIST_HEADERS, "> Birlik Ýþlem", "Ýþlem\nBirlik Kur\nBirlik Seviye Yükselt", "Seç", "Ýptal");
		return 1;
	}

	CMD:birlikyarat(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 5) return YetkinizYok(playerid);

		static isim[32], id;
		if(sscanf(params, "s[32]", isim))
			return kullanimMesaji(playerid, "/birlikyarat [isim]");
		id = Iter_Free(Birlikler);
		if(id < 0) return hataMesaji(playerid, "Sunucu birlik limitine ulaþtýðý için yeni birlik yaratýlamýyor!");
		new kisaltma[6];
		format(kisaltma, sizeof kisaltma, "Yok");
		Birlik_Yarat(isim, 0, kisaltma, -1);

		SunucuMesaji(playerid, "Birlik yarattýn. (ID: %d | Ýsim: %s) /birlikduzenle komutu ile kurucu ve kýsaltma ayarlamayý unutma.", id, isim);
		return 1;
	}

	CMD:birliksil(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 5) return YetkinizYok(playerid);

		static id;
		if(sscanf(params, "d", id))
			return kullanimMesaji(playerid, "/birliksil [birlik id]");

		if((id < 0 || id >= MAKSIMUM_BIRLIK) || !BirlikBilgi[id][birlikKullanimda])
			return hataMesaji(playerid, "Geçersiz birlik belirtildi!");

		Birlik_Sil(id);
		SunucuMesaji(playerid, "Birlik %d baþarýyla silindi!", id);
		return 1;
	}

	CMD:satinal(playerid, params[])
	{
		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu komut araçta kullanýlamaz.");
		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT || oyuncuData[playerid][oGiris] == false) return hataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oDonduruldu] > 0) return hataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oHapisSure][0] > 0 || oyuncuData[playerid][oHapisSure][1] > 0) return hataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
		//if(oyuncuData[playerid][oAdminDurum]) return hataMesaji(playerid, "Yönetici iþbaþýndayken bu komutu kullanamazsýn.");

		static id;
		if((id = Ev_Yakin(playerid)) != -1) {
			if(EvBilgi[id][evSahip] > 0) return hataMesaji(playerid, "Bu ev satýlýk deðil.");
			new evsiniri, evsayisi = 0;
			switch(oyuncuData[playerid][oVIP])
			{
				case 0: evsiniri = 3;
				case 1: evsiniri = 6;
			}
			for (new i = 0; i < MAKSIMUM_EV; i ++) if(Ev_SahipKontrol(playerid, i)) {
				evsayisi++;
			}
			if(evsayisi >= evsiniri) return hataMesaji(playerid, "Sahip olabileceðiniz maksimum ev sýnýrýna ulaþtýnýz.");
			if(oyuncuData[playerid][oPara] < EvBilgi[id][evFiyat]) return hataMesaji(playerid, "Bu evi almak için yeterli paran yok!");

			ParaEkle(playerid, -EvBilgi[id][evFiyat]);
			EvBilgi[id][evSahip] = oyuncuData[playerid][oID];
			EvBilgi[id][evSahipIsim][0] = 0;
			Ev_Yenile(id);
			Ev_Kaydet(id);
			OyuncuKaydet(playerid);
			UyariMesaji(playerid, "%s adresli evi %s fiyatýna satýn aldýn.", EvBilgi[id][evAdres], NumaraFormati(EvBilgi[id][evFiyat]));
			Log_Kaydet("loglar/satinalma.txt", "[%s] %s, %d ID'li evi satin aldi. Ev Fiyati: %d", Tarih(), OyuncuIsim(playerid), id, EvBilgi[id][evFiyat]);
			new str[150];
			format(str, sizeof(str), "```[%s] %s, %d ID'li evi satin aldi. Ev Fiyati: %d```", Tarih(), OyuncuIsim(playerid), id, EvBilgi[id][evFiyat]);
			DCC_SendChannelMessage(evlog, str);
			return 1;
		}
		else if((id = Isyeri_Yakin(playerid)) != -1) {
			if(IsyeriBilgi[id][isyeriSahip] > 0 || IsyeriBilgi[id][isyeriSahip] == -1) return hataMesaji(playerid, "Bu iþyeri satýlýk deðil.");
			new isyerisiniri, isyerisayisi = 0;
			switch(oyuncuData[playerid][oVIP])
			{
				case 0: isyerisiniri = 3;
				case 1: isyerisiniri = 6;
			}
			for (new i = 0; i < MAKSIMUM_ISYERI; i ++) if(Isyeri_SahipKontrol(playerid, i)) {
				isyerisayisi++;
			}
			if(isyerisayisi >= isyerisiniri) return hataMesaji(playerid, "Sahip olabileceðiniz maksimum iþyeri sýnýrýna ulaþtýnýz.");
			if(oyuncuData[playerid][oPara] < IsyeriBilgi[id][isyeriFiyat]) return hataMesaji(playerid, "Bu iþyerini almak için yeterli paran yok!");

			ParaEkle(playerid, -IsyeriBilgi[id][isyeriFiyat]);
			IsyeriBilgi[id][isyeriSahip] = oyuncuData[playerid][oID];
			IsyeriBilgi[id][isyeriSahipIsim][0] = 0;
			IsyeriBilgi[id][isyeriOrtakIsim][0] = 0;
			IsyeriBilgi[id][isyeriDurum] = 3;
			Isyeri_Yenile(id);
			Isyeri_Kaydet(id);
			OyuncuKaydet(playerid);
			UyariMesaji(playerid, "%s adlý %s türüne sahip iþyerini %s fiyatýna satýn aldýn.", IsyeriBilgi[id][isyeriAd], isyeriturisim(id), NumaraFormati(IsyeriBilgi[id][isyeriFiyat]));
			Log_Kaydet("loglar/satinalma.txt", "[%s] %s, %d ID'li isyerini satin aldi. Isyeri Fiyati: %d", Tarih(), OyuncuIsim(playerid), id, IsyeriBilgi[id][isyeriFiyat]);
			new str[150];
			format(str, sizeof(str), "```[%s] %s, %d ID'li isyerini satin aldi. Isyeri Fiyati: %d```", Tarih(), OyuncuIsim(playerid), id, IsyeriBilgi[id][isyeriFiyat]);
			DCC_SendChannelMessage(isyerilog, str);
			return 1;
		}
		else if((id = SeyyarBul(playerid)) != -1)
		{
			new oyuncuid = AktiflikKontrol(SeyyarInfo[id][sSahip]);
			if(!IsPlayerConnected(oyuncuid))
				return hataMesaji(playerid, "Bu tezgahýn sahibi oyunda deðil.");
			if(!IsPlayerInRangeOfPoint(oyuncuid, 3.0, SeyyarInfo[id][sX],SeyyarInfo[id][sY],SeyyarInfo[id][sZ])) return hataMesaji(playerid, "Tezgah sahibi tezgahýn baþýnda deðil.");
			if(oyuncuid == playerid) return hataMesaji(playerid, "Kendi kurduðunuz tezgahtan ürün alamazsýnýz.");
			switch(SeyyarInfo[id][sTur])
			{
				case 0: {
					ShowPlayerDialog(playerid, DIALOG_SEYYAR_SEKERLEME, DIALOG_STYLE_LIST, "Þekerleme Tezgahý", "Çikolata(5$)\nMuz(3$)\nDonut(10$)\nPasta(20$)", "Satýn Al", "Iptal");
					SetPVarInt(playerid, "seyid", id);
				}
				case 1: {
					ShowPlayerDialog(playerid, DIALOG_SEYYAR_BALIK, DIALOG_STYLE_LIST, "Balýk/Noodle Tezgahý", "Somon Balýðý(25$)\nUzakdoðu Noodle(15$)", "Satýn Al", "Iptal");
					SetPVarInt(playerid, "seyid", id);
				}
				case 2: {
					ShowPlayerDialog(playerid, DIALOG_SEYYAR_FASTFOOD, DIALOG_STYLE_LIST, "Fast Food Tezgahý", "Patates Cipsi(5$)\nÝtalyan Pizza(20$)\nBurger(15$)", "Satýn Al", "Iptal");
					SetPVarInt(playerid, "seyid", id);
				}
				case 3: {
					ShowPlayerDialog(playerid, DIALOG_SEYYAR_SANS, DIALOG_STYLE_LIST, "Þans Oyunlarý Tezgahý", "Loto Bileti(100$)\nYýlbaþý Bileti(20$)", "Satýn Al", "Iptal");
					SetPVarInt(playerid, "seyid", id);
				}
				case 4: {
					ShowPlayerDialog(playerid, DIALOG_SEYYAR_ICECEK, DIALOG_STYLE_LIST, "Ýçecek Tezgahý", "Soda(5$)\nGazoz(5$)\nKola(7$)\nBira(15$)", "Satýn Al", "Iptal");
					SetPVarInt(playerid, "seyid", id);
				}
			}
			return 1;
		}
		else if(IsPlayerInAnyDynamicArea(playerid) && oyuncuData[playerid][oCiftlik] != -1){
		new cid = oyuncuData[playerid][oCiftlik];
		if(!strcmp(CiftlikInfo[cid][cSahip], "Vice Komisyon", true))
		{
		if(oyuncuData[playerid][oPara] < CiftlikInfo[cid][cPara]) return hataMesaji(playerid, "Bu çiftliði satýn alabilmek için yeterli paran yok!");
		if(!TarlaUygunlukKontrol(playerid)) return hataMesaji(playerid, "Daha fazla tarla satýn alamazsýnýz.");
		format(CiftlikInfo[cid][cSahip], 64, "%s", oyuncuData[playerid][oIsim]);
		CiftlikInfo[cid][cSahipID] = oyuncuData[playerid][oID];
		ParaEkle(playerid, -CiftlikInfo[cid][cPara]);
		UyariMesaji(playerid, "%s adlý çiftliði %s fiyatýna satýn aldýnýz.", CiftlikInfo[cid][cIsim], NumaraFormati(CiftlikInfo[cid][cPara]));
		Log_Kaydet("loglar/satinalma.txt", "[%s] %s, %d ID'li çiftliði satin aldi. Çiftlik Fiyati: %d", Tarih(), OyuncuIsim(playerid), cid, CiftlikInfo[cid][cPara]);
		Ciftlik_Kaydet(cid);
		GangZoneHideForAll(CiftlikInfo[cid][cZone]);
		GangZoneShowForAll(CiftlikInfo[cid][cZone], 0x812600AA);
		}
		else
		{
		SunucuMesaji(playerid, "Bu tarlanýn zaten bir sahibi bulunuyor, tarla satýlýk deðil.");
		}
			return 1;
		}
		else if((id = Oyuncu_Isyerinde(playerid)) != -1) {
			if(IsyeriBilgi[id][isyeriTur] != 4 && !IsyeriBilgi[id][isyeriUrun]) return hataMesaji(playerid, "Bu iþyerinde ürün yok.");
			switch(IsyeriBilgi[id][isyeriTur]) {
				case 1, 3, 9: DialogGoster(playerid, DIALOG_MARKET, DIALOG_STYLE_TABLIST_HEADERS, "> Market", "Ürün\tAdet\tFiyat\nOdun\t1\t$15\nÇakmak\t1\t$8\nSigara\t20\t$20\nSopa\t1\t$60\nTelefon\t1\t$250\nSim Kartý\t1\t$25\nBoombox\t1\t$500\nKulaklýk\t1\t$30\nKamera\t1\t$200\nBenzin Bidonu\t1\t$300\nDeodorant\t1\t$80\nTamir Kiti\t1\t$350", "Seç", "Ýptal");
				case 2, 5: DialogGoster(playerid, DIALOG_RESTAURANT, DIALOG_STYLE_TABLIST_HEADERS, "> Satýn Al", "Ürün\tFiyat\nPizza\t$35\nBurger\t$20\nTavuk\t$20\nSu\t$1\nGazoz\t$1\nBira\t$15\nVodka\t$55\nViski\t$73", "Seç", "Ýptal");
				case 12: DialogGoster(playerid, DIALOG_GIZLIDEPOBIR, DIALOG_STYLE_TABLIST_HEADERS, "Satýn Al", "Ürün\t\tFiyat\nKenevir Tohumu\t\t$50\nAmonyak\t\t$60\nEkolojik Asit\t\t$60\nStriknin\t\t$55\nMorfin\t\t$75\
					\nHidroklorik Asit\t\t$75\nPhenly-2-Nitropropen\t\t$85\nÝzopropil Alkol\t\t$90", "Satýn Al", "Ýptal"); 
				case 13: DialogGoster(playerid, DIALOG_GIZLIDEPOIKI, DIALOG_STYLE_TABLIST_HEADERS, "Satýn Al", "Ürün\t\tFiyat\nSodyum Hidroksit\t\t$85\nSülfürik Asit\t\t$85\nErgotamin\t\t$90\nLiserjik Asit\t\t$90\
					\nSafrol\t\t$90\nMetilamin Hidroklorür\t\t$90\nAmonyum Klorür\t\t$90\nDimetilamin Hidroklorür\t\t$90\nKeton\t\t$90", "Satýn Al", "Ýptal");
				case 14: DialogGoster(playerid, DIALOG_GIZLIDEPOUC, DIALOG_STYLE_TABLIST_HEADERS, "Satýn Al", "Ürün\t\tFiyat\nBenzen\t\t$95\nCiclopentilbromür\t\t$100\nPsödoefedrin\t\t$100\nKýrmýzý Fosfor\t\t$90\nPrometazin\t\t$95\nMetaliamin\t\t$100\nKodein\t\t$100", "Satýn Al", "Ýptal");
				case 7:
				{
					if(oyuncuData[playerid][oVIP] > 0 || oyuncuData[playerid][oOzelSkinAksesuar] > 0)
					{
						DialogGoster(playerid, DIALOG_GIYIM, DIALOG_STYLE_TABLIST_HEADERS, "> Giyim", "Ürün\t\tFiyat\nKýyafetler\nAksesuarlar\nEve Kýyafet Al\nVip Kýyafetleri\nÖzel Aksesuarlar", "Seç", "Ýptal"), oyuncunungiyim[playerid] = 1;
					}
					else
					{
						DialogGoster(playerid, DIALOG_GIYIM, DIALOG_STYLE_TABLIST_HEADERS, "> Giyim", "Ürün\t\tFiyat\nKýyafetler\nAksesuarlar\nEve Kýyafet Al", "Seç", "Ýptal"), oyuncunungiyim[playerid] = 1;
					}
				}
				case 10:
				{
					if(oyuncuData[playerid][oVIP] > 0 || oyuncuData[playerid][oOzelSkinAksesuar] > 0)
					{
						DialogGoster(playerid, DIALOG_GIYIM, DIALOG_STYLE_TABLIST_HEADERS, "> Giyim", "Ürün\t\tFiyat\nKýyafetler\nAksesuarlar\nEve Kýyafet Al\nVip Kýyafetleri\nÖzel Aksesuarlar", "Seç", "Ýptal"), oyuncunungiyim[playerid] = 2;
					}
					else
					{
						DialogGoster(playerid, DIALOG_GIYIM, DIALOG_STYLE_TABLIST_HEADERS, "> Giyim", "Ürün\t\tFiyat\nKýyafetler\nAksesuarlar\nEve Kýyafet Al", "Seç", "Ýptal"), oyuncunungiyim[playerid] = 2;
					}
				}
				case 11:
				{
					if(oyuncuData[playerid][oVIP] > 0 || oyuncuData[playerid][oOzelSkinAksesuar] > 0)
					{
						DialogGoster(playerid, DIALOG_GIYIM, DIALOG_STYLE_TABLIST_HEADERS, "> Giyim", "Ürün\t\tFiyat\nKýyafetler\nAksesuarlar\nEve Kýyafet Al\nVip Kýyafetleri\nÖzel Aksesuarlar", "Seç", "Ýptal"), oyuncunungiyim[playerid] = 3;
					}
					else
					{
						DialogGoster(playerid, DIALOG_GIYIM, DIALOG_STYLE_TABLIST_HEADERS, "> Giyim", "Ürün\t\tFiyat\nKýyafetler\nAksesuarlar\nEve Kýyafet Al", "Seç", "Ýptal"), oyuncunungiyim[playerid] = 3;
					}
				}
			}
			return 1;
		}
		hataMesaji(playerid, "Yakýnýnda satýn alabileceðin bir mülk yok veya bir iþyerinde deðilsin.");
		return 1;
	}

	CMD:isyeriyarat(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 5) return YetkinizYok(playerid);

		static id, tur;
		if(sscanf(params, "d", tur)) {
			kullanimMesaji(playerid, "/isyeriyarat [tür]");
			SendClientMessage(playerid, RENK_SARI, "[TÜRLER]:{FFFFFF} 1: Market - 2: Cafe & Restaurant - 3: Elektronik - 4: GYM - 5: Club/Bar");
			SendClientMessage(playerid, RENK_SARI, "[TÜRLER]:{FFFFFF} 6: Ofis - 7: Giyim - 8: Diðer - 9: Benzinlik Marketi - 10: Giyim 2 - 11: Giyim 3");
			SendClientMessage(playerid, RENK_SARI, "[TÜRLER]:{FFFFFF} 12: Gizli Depo 1 - 13: Gizli Depo 2 - 14: Gizli Depo 3 - 15: Otel/Apart - 16: Drug Lab");
			return 1;
		}
		if(tur < 1 || tur > 16)
			return hataMesaji(playerid, "Geçersiz tür. (1-16)");

		id = Isyeri_Yarat(playerid, tur);

		if(id < 0)
			return hataMesaji(playerid, "Sunucu iþyeri limitine ulaþtýðý için yeni iþyeri yaratýlamýyor!");

		SunucuMesaji(playerid, "Yeni bir iþyeri yarattýn. (ID: %d)", id);
		return 1;
	}

	CMD:idevletesat(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 5) return YetkinizYok(playerid);

		static id;
		if(sscanf(params, "d", id))
			return kullanimMesaji(playerid, "/idevletesat [iþyeri id]");

		if((id < 0 || id >= MAKSIMUM_ISYERI) || !IsyeriBilgi[id][isyeriKullanimda])
			return hataMesaji(playerid, "Geçersiz iþyeri belirtildi!");

		if(IsyeriBilgi[id][isyeriSahip] != 0)
			return hataMesaji(playerid, "Bu iþyerinin bir sahibi olduðu için devlete satýlamýyor.");

		IsyeriBilgi[id][isyeriSahipIsim][0] = 0;
		IsyeriBilgi[id][isyeriOrtakIsim][0] = 0;
		IsyeriBilgi[id][isyeriSahip] = -1;
		IsyeriBilgi[id][isyeriOrtak] = 0;
		IsyeriBilgi[id][isyeriDurum] = 1;
		Isyeri_Kaydet(id);
		Isyeri_Yenile(id);
		SunucuMesaji(playerid, "Ýþyeri %d baþarýyla devlete satýldý!", id);
		return 1;
	}

	CMD:isyerisil(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 7)
			return YetkinizYok(playerid);

		static id;
		if(sscanf(params, "d", id))
			return kullanimMesaji(playerid, "/isyerisil [iþyeri id]");

		if((id < 0 || id >= MAKSIMUM_ISYERI) || !IsyeriBilgi[id][isyeriKullanimda])
			return hataMesaji(playerid, "Geçersiz iþyeri belirtildi!");

		Isyeri_Sil(id);
		SunucuMesaji(playerid, "Ýþyeri %d baþarýyla silindi!", id);
		return 1;
	}

	CMD:isyeriduzenle(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 7) return YetkinizYok(playerid);

		static id, type[24], string[128];
		if(sscanf(params, "ds[24]S()[128]", id, type, string))
		{
			kullanimMesaji(playerid, "/isyeriduzenle [id] [isim]");
			SendClientMessage(playerid, RENK_SARI, "[ÝSÝMLER]:{FFFFFF} lokasyon, interior, isim, sahip, fiyat, durum, tur, ürün, ev, vw");
			return 1;
		}
		if((id < 0 || id >= MAKSIMUM_ISYERI) || !IsyeriBilgi[id][isyeriKullanimda])
			return hataMesaji(playerid, "Geçersiz iþyeri!");

		if(!strcmp(type, "lokasyon", true))
		{
			GetPlayerPos(playerid, IsyeriBilgi[id][isyeriPos][0], IsyeriBilgi[id][isyeriPos][1], IsyeriBilgi[id][isyeriPos][2]);
			GetPlayerFacingAngle(playerid, IsyeriBilgi[id][isyeriPos][3]);

			IsyeriBilgi[id][isyeriDisInt] = GetPlayerInterior(playerid);
			IsyeriBilgi[id][isyeriDisVW] = GetPlayerVirtualWorld(playerid);
			if(IsValidDynamicPickup(IsyeriBilgi[id][isyeriPickup])) DestroyDynamicPickup(IsyeriBilgi[id][isyeriPickup]);
			IsyeriBilgi[id][isyeriPickup] = CreateDynamicPickup(1239, 23, IsyeriBilgi[id][isyeriPos][0], IsyeriBilgi[id][isyeriPos][1], IsyeriBilgi[id][isyeriPos][2], IsyeriBilgi[id][isyeriDisVW], IsyeriBilgi[id][isyeriDisInt], -1, 10.0); // + 0.7
			Isyeri_Yenile(id);
			Isyeri_Kaydet(id);
			foreach(new i : Player) if(oyuncuData[i][oAdmin] > 0 && oyuncuData[i][oAdminDurum] == true)
			{
				SCM_Ex(i, RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s bir iþyerinin lokasyonunu deðiþtirdi. (ID: %d)", oyuncuData[playerid][oAdminNick], id);
			}

		}
		else if(!strcmp(type, "vergi", true))
		{
			static yenivergi;
			if(sscanf(string, "d", yenivergi)) return kullanimMesaji(playerid, "/isyeriduzenle [id] vergi [yeni vergi deðeri]");
			IsyeriBilgi[id][isyeriVergi] = yenivergi;
			if(IsyeriBilgi[id][isyeriVergi] >= 10000)
			{
				IsyeriBilgi[id][isyeriDurum] = 4;
			}
			Isyeri_Kaydet(id);
			Isyeri_Yenile(id);
			UstYoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s bir iþyerinin vergisini %d olarak deðiþtirdi. (ID: %d)", oyuncuData[playerid][oAdminNick], yenivergi, id);
		}
		else if(!strcmp(type, "girisucreti", true))
		{
			static girisucret;
			if(sscanf(string, "d", girisucret)) return kullanimMesaji(playerid, "/isyeriduzenle [id] girisucreti [yeni giriþ ücreti]");
			IsyeriBilgi[id][iGirisUcret] = girisucret;
			Isyeri_Kaydet(id);
			Isyeri_Yenile(id);
			UstYoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s bir iþyerinin giriþ ücretini %d olarak deðiþtirdi. (ID: %d)", oyuncuData[playerid][oAdminNick], girisucret, id);
		}
		else if(!strcmp(type, "interior", true))
		{
			GetPlayerPos(playerid, IsyeriBilgi[id][isyeriIcPos][0], IsyeriBilgi[id][isyeriIcPos][1], IsyeriBilgi[id][isyeriIcPos][2]);
			GetPlayerFacingAngle(playerid, IsyeriBilgi[id][isyeriIcPos][3]);

			IsyeriBilgi[id][isyeriInterior] = GetPlayerInterior(playerid);
			SetPlayerVirtualWorld(playerid, IsyeriBilgi[id][isyeriVW]);

			Isyeri_Kaydet(id);
			UstYoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s bir iþyerinin interiorunu deðiþtirdi. (ID: %d)", oyuncuData[playerid][oAdminNick], id);
		}
		else if(!strcmp(type, "vw", true))
		{
			GetPlayerPos(playerid, IsyeriBilgi[id][isyeriIcPos][0], IsyeriBilgi[id][isyeriIcPos][1], IsyeriBilgi[id][isyeriIcPos][2]);
			GetPlayerFacingAngle(playerid, IsyeriBilgi[id][isyeriIcPos][3]);

			IsyeriBilgi[id][isyeriVW] = 0;
			SetPlayerVirtualWorld(playerid, IsyeriBilgi[id][isyeriVW]);

			Isyeri_Kaydet(id);
			UstYoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s bir iþyerinin virtual worldunu sýfýrladý. (ID: %d)", oyuncuData[playerid][oAdminNick], id);
		}
		else if(!strcmp(type, "isim", true))
		{
			static yeniisim[128];

			if(sscanf(string, "s[128]", yeniisim))
				return kullanimMesaji(playerid, "/isyeriduzenle [id] [isim] [yeni isim]");

			format(IsyeriBilgi[id][isyeriAd], 128, yeniisim);

			Isyeri_Yenile(id);
			Isyeri_Kaydet(id);

			UstYoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s bir iþyerinin ismini deðiþtirdi. (ID: %d | Ýsim: %s)", oyuncuData[playerid][oAdminNick], id, yeniisim);
		}
		else if(!strcmp(type, "sahip", true))
		{
			static oyuncuid;
			if(sscanf(string, "d", oyuncuid))
				return kullanimMesaji(playerid, "/isyeriduzenle [id] [sahip] [oyuncu ID] - (-1 kaldýrýr)");

			if(oyuncuid == -1) {
				IsyeriBilgi[id][isyeriSahip] = 0;
				IsyeriBilgi[id][isyeriVergi] = 0;
				Isyeri_Kaydet(id);
				Isyeri_Yenile(id);
				UstYoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s bir iþyerinin sahibini deðiþitirdi. (ID: %d | Sahip: Yok)", oyuncuData[playerid][oAdminNick], id);
				return 1;
			}
			else {
				if(!IsPlayerConnected(oyuncuid))
					return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");

				IsyeriBilgi[id][isyeriSahip] = oyuncuData[oyuncuid][oID];
				Isyeri_Kaydet(id);
				IsyeriBilgi[id][isyeriSahipIsim][0] = 0;
				Isyeri_Yenile(id);
				UstYoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s bir iþyerinin sahibini deðiþitirdi. (ID: %d | Sahip: %s)", oyuncuData[playerid][oAdminNick], id, OyuncuIsim(oyuncuid));
				Log_Kaydet("loglar/isyeri_log.txt", "[%s] %s(%s) bir isyerinin sahibini degistirdi. Yeni sahip: %s", Tarih(), OyuncuIsim(playerid), oyuncuData[playerid][oAdminNick], OyuncuIsim(oyuncuid));
			}
		}
		else if(!strcmp(type, "fiyat", true))
		{
			static fiyat;
			if(sscanf(string, "d", fiyat))
				return kullanimMesaji(playerid, "/isyeriduzenle [id] [fiyat] [yeni fiyat]");

			if(fiyat < 1 || fiyat > 10000000)
				return hataMesaji(playerid, "Fiyat en az 1, en fazla 10,000,000 olabilir.");

			IsyeriBilgi[id][isyeriFiyat] = fiyat;
			Isyeri_Yenile(id);
			Isyeri_Kaydet(id);
			UstYoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s bir iþyerinin fiyatýný deðiþtirdi. (ID: %d | Yeni Fiyat: %s)", oyuncuData[playerid][oAdminNick], id, NumaraFormati(fiyat));
		}
		else if(!strcmp(type, "durum", true))
		{
			static durum;
			if(sscanf(string, "d", durum)) {
				kullanimMesaji(playerid, "/isyeriduzenle [id] [durum] [durum id]");
				SendClientMessage(playerid, RENK_SARI, "[DURUMLAR]:{FFFFFF} 1: Kilitsiz, 2: Kilitli, 3: Bakým");
				return 1;
			}

			if(durum < 1 || durum > 3)
				return hataMesaji(playerid, "Geçersiz durum.");

			IsyeriBilgi[id][isyeriDurum] = durum;
			Isyeri_Yenile(id);
			Isyeri_Kaydet(id);
			UstYoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s bir iþyerinin durumunu deðiþtirdi. (ID: %d | Yeni Durum: %d)", oyuncuData[playerid][oAdminNick], id, durum);
		}
		else if(!strcmp(type, "tur", true))
		{
			static tur;
			if(sscanf(string, "d", tur)) {
				kullanimMesaji(playerid, "/isyeriduzenle [id] [tur] [tür id]");
				SendClientMessage(playerid, RENK_SARI, "[TÜRLER]:{FFFFFF} 1: Market - 2: Cafe & Restaurant - 3: Elektronik - 4: GYM - 5: Club/Bar");
				SendClientMessage(playerid, RENK_SARI, "[TÜRLER]:{FFFFFF} 6: Ofis - 7: Giyim - 8: Diðer - 9: Benzinlik Marketi - 10: Giyim 2 - 11: Giyim 3");
				SendClientMessage(playerid, RENK_SARI, "[TÜRLER]:{FFFFFF} 12: Gizli Depo 1 - 13: Gizli Depo 2 - 14: Gizli Depo 3");
				return 1;
			}
			if(tur < 1 || tur > 14)
				return hataMesaji(playerid, "Geçersiz tür.");

			IsyeriBilgi[id][isyeriTur] = tur;
			if(tur == 7)
			{
				IsyeriBilgi[id][isyeriIcPos][0] = 207.7596;
				IsyeriBilgi[id][isyeriIcPos][1] = -110.9440;
				IsyeriBilgi[id][isyeriIcPos][2] = 1005.1328;
				IsyeriBilgi[id][isyeriIcPos][3] = 1.5479;
			}
			else if(tur == 10)
			{
				IsyeriBilgi[id][isyeriIcPos][0] = 204.3260;
				IsyeriBilgi[id][isyeriIcPos][1] = -168.6168;
				IsyeriBilgi[id][isyeriIcPos][2] = 1000.5234;
				IsyeriBilgi[id][isyeriIcPos][3] = 359.0411;
			}
			else if(tur == 11)
			{
				IsyeriBilgi[id][isyeriIcPos][0] = 227.2134;
				IsyeriBilgi[id][isyeriIcPos][1] = -8.1340;
				IsyeriBilgi[id][isyeriIcPos][2] = 1002.2109;
				IsyeriBilgi[id][isyeriIcPos][3] = 90.5120;
			}
			else if(tur == 12 || tur == 13 || tur == 14)
			{
				IsyeriBilgi[id][isyeriIcPos][0] = -204.0623;
				IsyeriBilgi[id][isyeriIcPos][1] = 2003.3226;
				IsyeriBilgi[id][isyeriIcPos][2] = 4301.0488;
				IsyeriBilgi[id][isyeriIcPos][3] = 178.8653;
			}
			Isyeri_Yenile(id);
			Isyeri_Kaydet(id);
			UstYoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s bir iþyerinin türünü deðiþtirdi. (ID: %d | Yeni Tür: %s)", oyuncuData[playerid][oAdminNick], id, isyeriturisim(id));
		}
		else if(!strcmp(type, "ürün", true))
		{
			static urun;
			if(sscanf(string, "d", urun)) return kullanimMesaji(playerid, "/isyeriduzenle [id] [ürün] [yeni ürün sayýsý]");

			if(urun < 0) return hataMesaji(playerid, "Ürün sayýsý sýfýrýn altýnda olamaz.");

			IsyeriBilgi[id][isyeriUrun] = urun;
			Isyeri_Yenile(id);
			Isyeri_Kaydet(id);
			UstYoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s bir iþyerinin ürün sayýsýný deðiþtirdi. (ID: %d | Ürün Sayýsý: %d)", oyuncuData[playerid][oAdminNick], id, urun);
		}
		else hataMesaji(playerid, "Geçersiz fonksiyon.");
		return 1;
	}

	CMD:konumkabul(playerid, params[])
	{
		if(oyuncuData[playerid][oHapisSure][0] > 0 || oyuncuData[playerid][oHapisSure][1] > 0) return hataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oDonduruldu] > 0) return hataMesaji(playerid, "Dondurulmuþken bu komutu kullanamazsýn.");

		static oyuncuid;
		if(sscanf(params, "u", oyuncuid)) return kullanimMesaji(playerid, "/konumkabul [oyuncu id/isim]");
		if(!IsPlayerConnected(oyuncuid)) return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");
		if(playerid == oyuncuid) return hataMesaji(playerid, "Bu komutu kendi üzerinde kullanamazsýn.");
		if(!oyuncuData[oyuncuid][oGiris]) return hataMesaji(playerid, "Oyuncu giriþ yapmamýþ, komut üzerinde kullanýlamaz.");
		if(oyuncuData[oyuncuid][oHapisSure][0] > 0 || oyuncuData[oyuncuid][oHapisSure][1] > 0) return hataMesaji(playerid, "Oyuncu hapiste, bu komutu onun üzerinde kullanamazsýn.");
		if(oyuncuData[oyuncuid][oYarali] == true) return hataMesaji(playerid, "Oyuncu yaralanmýþ, bu komut üzerinde kullanýlamýyor.");
		if(oyuncuData[oyuncuid][oDonduruldu] > 0) return hataMesaji(playerid, "Oyuncu dondurulma etkisinde, bu komut üzerinde kullanýlamýyor.");
		if(GetPVarInt(oyuncuid, "konumgonder") == 0) return hataMesaji(playerid, "Bu oyuncu size konum göndermemiþ.");
		if(YakinlikKontrol(playerid, oyuncuid, 3.0)) return hataMesaji(playerid, "Oyuncu zaten yanýnda.");

		SunucuMesaji(oyuncuid, "Karþýdaki kiþi konum gönderme isteðinizi kabul etti.");
		SunucuMesaji(playerid, "(ID:%d - %s) %d numaralý kiþinin konum isteðini kabul ettiniz. Kiþinin yeri haritanýzda iþaretlendi.", oyuncuid, OyuncuIsim(oyuncuid), oyuncuData[oyuncuid][oTelefonNumarasi]);
		new Float:X,Float:Y,Float:Z;
		GetPlayerPos(oyuncuid, X,Y,Z);
		SetPlayerRaceCheckpoint(playerid, 2, X, Y, Z, 0, 0, 0, 3.0);
		oyuncuData[oyuncuid][oKonumKisi] = -1;
		SetPVarInt(oyuncuid, "konumgonder", 0);
		return 1;
	}

	CMD:telefon(playerid, params[])
	{
		if(oyuncuData[playerid][oTelefon] != 1 || oyuncuData[playerid][oTelefonNumarasi] == 0)
			return hataMesaji(playerid, "Telefonunuz veya sim kartýnýz yok.");

		if(oyuncuData[playerid][oYarali] == true || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED)
			return hataMesaji(playerid, "Þu anda telefonunuzu kullanamazsýn.");

		if(oyuncuData[playerid][oGiris] == false) return hataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
		if(KomutUygunlukKontrol(playerid) == 0) return UygunDegilMesaj(playerid);
		if(GetPVarInt(playerid, "TelefonGoruntule") == 1) return hataMesaji(playerid, "Zaten þuanda telefonunuzu görüntülüyorsunuz, saklamak için çarpý iþaretine basýn."), IpucuMesaji(playerid, "Eðer imleç görünmüyorsa /imlec komutunu kullanýn.");

		TextDrawShowForPlayer(playerid, telefonyenidraw[0]);
		TextDrawShowForPlayer(playerid, telefonyenidraw[1]);
		TextDrawShowForPlayer(playerid, telefonyenidraw[2]);
		TextDrawShowForPlayer(playerid, telefonyenidraw[3]);
		TextDrawShowForPlayer(playerid, telefonyenidraw[4]);
		TextDrawShowForPlayer(playerid, telefonyenidraw[5]);
		TextDrawShowForPlayer(playerid, telefonyenidraw[6]);
		TextDrawShowForPlayer(playerid, telefonyenidraw[7]);
		TextDrawShowForPlayer(playerid, telefonyenidraw[8]);
		TextDrawShowForPlayer(playerid, telefonyenidraw[9]);
		TextDrawShowForPlayer(playerid, telefonyenidraw[10]);
		TextDrawShowForPlayer(playerid, telefonyenidraw[11]);
		TextDrawShowForPlayer(playerid, telefonyenidraw[12]);
		TextDrawShowForPlayer(playerid, telefonyenidraw[13]);
		TextDrawShowForPlayer(playerid, telefonyenidraw[14]);
		TextDrawShowForPlayer(playerid, telefonyenidraw[29]);
		SetPVarInt(playerid, "TelefonGoruntule", 1);
		cmd(playerid, 0, "ame elini cebine atar ve telefonunu çýkarýr.");
		SunucuMesaji(playerid, "Telefonunuzu çýkardýnýz, mouse imleci kaybolursa /imlec komutunu kullanabilirsiniz.");
		SunucuMesaji(playerid, "Telefon ekranýný gizlemek için telefonun sað üst kýsmýnda bulunan X iþaretine týklayýn.");
		SunucuMesaji(playerid, "Telefonu kapatmak için aþaðýdaki kareye, önceki sekmeye gitmek için geri tuþuna týklayýn.");

		SelectTextDraw(playerid, 0xFF0000FF);

		return 1;
	}

	CMD:imlec(playerid, params[])
	{
		SelectTextDraw(playerid, 0xFF0000FF);
		return 1;
	}

	CMD:ara(playerid, params[])
	{
		if(oyuncuData[playerid][oTelefon] != 1 || oyuncuData[playerid][oTelefonNumarasi] == 0)
			return hataMesaji(playerid, "Telefonunuz ya da sim kartýn yok!");

		if(oyuncuData[playerid][oTelefonDurum] == false)
			return hataMesaji(playerid, "Telefonunuz kapalý olduðu için bu komutu kullanamazsýn.");

		if(oyuncuData[playerid][oArama] > -1)
			return hataMesaji(playerid, "Arama yaparken bu komutu kullanamazsýn.");

		if(oyuncuData[playerid][oGiris] == false) return hataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oDonduruldu] > 0) return hataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oHapisSure][0] > 0 || oyuncuData[playerid][oHapisSure][1] > 0) return hataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
		//if(oyuncuData[playerid][oAdminDurum]) return hataMesaji(playerid, "Yönetici iþbaþýndayken bu komutu kullanamazsýn.");

		static numara, test[64],ankesor[64];
		if(sscanf(params, "d", numara))
			return kullanimMesaji(playerid, "/ara [telefon numarasý]");

		format(test, sizeof(test), "%d", numara);
		if(numara != 911 && numara != 444 && strlen(test) < 6)
			return hataMesaji(playerid, "Hatalý ya da eksik numara tuþladýn.");

		if(numara == oyuncuData[playerid][oTelefonNumarasi]) return hataMesaji(playerid, "Kendini arayamazsýn.");

		format(ankesor, sizeof(ankesor), "%d", numara);
		if (strlen(ankesor) == 6)
		{
			new query[100];
			mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM atelefon WHERE numara = '%d'", numara);
			mysql_tquery(g_SQL, query, "ankesorno", "dd", playerid, numara);
			oyuncuData[playerid][oArama] = numara;
		}

		if(numara == 911) {
			DialogGoster(playerid, DIALOG_911_SECIM, DIALOG_STYLE_MSGBOX, "> 911", "Aþaðýdaki servislerden hangisine ulaþmak istiyorsunuz?", "VCPD", "Hastane");
			cmd(playerid, 0, "ame telefonunu çýkartýr ve bir numarayý tuþlar.");
			return 1;
		}
		if(numara == 444) {
			DialogGoster(playerid, DIALOG_444_SECIM, DIALOG_STYLE_INPUT, "> 444", "Vice Taksi Duraðýna hoþ geldiniz. Nereye taksi istiyorsunuz?", "Çaðýr", "Iptal");
			cmd(playerid, 0, "ame telefonunu çýkartýr ve bir numarayý tuþlar.");
			return 1;
		}
		foreach(new i : Player) if(oyuncuData[i][oTelefonNumarasi] == numara) {
			if(oyuncuData[i][oTelefonDurum] == false || oyuncuData[i][oIzlenen] != INVALID_PLAYER_ID)
				return hataMesaji(playerid, "Aradýðýnýz numara þu anda çaðrý kabul etmemektedir lütfen daha sonra tekrar deneyin.");

			if(oyuncuData[i][oArama] > -1)
				return hataMesaji(playerid, "Hat meþgul çalýyor.");

			cmd(playerid, 0, "ame telefonunu çýkartýr ve bir numarayý tuþlar.");
			cmd(i, 2, "Telefonu çalmaktadýr.");
			oyuncuData[playerid][oArama] = i;
			SCM_Ex(i, 0x99C794FF, "Telefonun çalýyor! Arayan: %d(%s) | Yanýtlamak için /cevapla, reddetmek için /tkapat kullanabilirsin.", oyuncuData[playerid][oTelefonNumarasi], RehberKisiKontrol(i, oyuncuData[playerid][oTelefonNumarasi]));
			oyuncuData[playerid][oAramaSure] = -2;
			oyuncuData[i][oArama] = playerid;
			PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
			PlayerPlaySoundEx(i, 23000);
			if(!IsPlayerInAnyVehicle(playerid) && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_NONE)
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE),SetPlayerAttachedObject(playerid, 7, 18868, 6, 0.086043, 0.027719, 0.003817, 95.232246, 178.651031, 1.691840, 1.002077, 1.000000, 1.000000);

		}
		if(oyuncuData[playerid][oArama] == -1) {
			hataMesaji(playerid, "Aradýðýnýz numaraya þu anda ulaþýlamýyor lütfen daha sonra tekrar deneyin.");
		}
		return 1;
	}


	CMD:cevapla(playerid, params[])
	{
		if(oyuncuData[playerid][oArama] == -1 && GetPVarInt(playerid, "AnkesordenAraniyor") == 0 || oyuncuData[playerid][oCevaplandi] == true)
			return hataMesaji(playerid, "Aramada deðilsin ya da zaten aramaya cevap vermiþsin.");

		if(oyuncuData[playerid][oAramaSure] == -2)
			return hataMesaji(playerid, "Aramayý yapan sizseniz bu komutu kullanamazsýn.");

		if(oyuncuData[playerid][oGiris] == false) return hataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
		if(KomutUygunlukKontrol(playerid) == 0) return UygunDegilMesaj(playerid);
		//if(oyuncuData[playerid][oAdminDurum]) return hataMesaji(playerid, "Yönetici iþbaþýndayken bu komutu kullanamazsýn.");
		if(GetPVarInt(playerid, "AnkesordenAraniyor") == 1)
		{
			new h = GetPVarInt(playerid, "AnkesorID");
			AnkesorInfo[h][aArayan] = playerid;
			oyuncuData[playerid][oArama] = AnkesorInfo[h][aNumara];
			SunucuMesaji(AnkesorInfo[h][aKisi], "Karþýdaki kiþi telefonu açtý.");
			SunucuMesaji(playerid, "Telefona cevap verdin.");
			SetPVarInt(playerid, "AnkesorleKonusuyor", 1);
			SetPVarInt(AnkesorInfo[h][aKisi], "AnkesorleKonusuyor", 1);
			if(!IsPlayerInAnyVehicle(playerid) && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_NONE)
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);

			if(!IsPlayerInAnyVehicle(AnkesorInfo[h][aKisi]) && GetPlayerSpecialAction(AnkesorInfo[h][aKisi]) == SPECIAL_ACTION_NONE)
				SetPlayerSpecialAction(AnkesorInfo[h][aKisi], SPECIAL_ACTION_USECELLPHONE);
		}
		else
		{
			new oyuncuid = oyuncuData[playerid][oArama];
			SunucuMesaji(oyuncuid, "Karþýdaki kiþi telefonu açtý.");
			SunucuMesaji(playerid, "Telefona cevap verdin.");
			oyuncuData[playerid][oCevaplandi] = true;
			oyuncuData[oyuncuid][oCevaplandi] = true;
			oyuncuData[playerid][oAramaSure] = 0;
			oyuncuData[oyuncuid][oAramaSure] = 0;
			if(!IsPlayerInAnyVehicle(playerid) && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_NONE)
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE),SetPlayerAttachedObject(playerid, 7, 18868, 6, 0.086043, 0.027719, 0.003817, 95.232246, 178.651031, 1.691840, 1.002077, 1.000000, 1.000000);

			if(!IsPlayerInAnyVehicle(oyuncuid) && GetPlayerSpecialAction(oyuncuid) == SPECIAL_ACTION_NONE)
				SetPlayerSpecialAction(oyuncuid, SPECIAL_ACTION_USECELLPHONE),SetPlayerAttachedObject(oyuncuid, 7, 18868, 6, 0.086043, 0.027719, 0.003817, 95.232246, 178.651031, 1.691840, 1.002077, 1.000000, 1.000000);
		}
		return 1;
	}

	CMD:tkapat(playerid, params[])
	{
		if(oyuncuData[playerid][oArama] == -1 && oyuncuData[playerid][oCevaplandi] == false && GetPVarInt(playerid, "AnkesorleKonusuyor") == 0) hataMesaji(playerid, "Aramada deðilsin.");
		if(oyuncuData[playerid][oGiris] == false) return hataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oDonduruldu] > 0) return hataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oHapisSure][0] > 0 || oyuncuData[playerid][oHapisSure][1] > 0) return hataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
		//if(oyuncuData[playerid][oAdminDurum]) return hataMesaji(playerid, "Yönetici iþbaþýndayken bu komutu kullanamazsýn.");

		if (GetPVarInt(playerid, "AnkesorleKonusuyor") == 1)
			{
				new id = GetPVarInt(playerid, "AnkesorID");
				if(id > -1)
				{
					SunucuMesaji(playerid, "Telefonu kapattýn.");
					AnkesorInfo[id][aCaliyor] = 0;
					oyuncuData[playerid][oArama] = -1;
					oyuncuData[playerid][oKonumKisi] = -1;
					AnkesorInfo[id][aAktif] = 0;
					AnkesorInfo[id][aArayan] = -1;
					SetPVarInt(playerid, "AnkesorleKonusuyor", 0);
					SetPVarInt(playerid, "AnkesorCevaplandi", 0);
					if (AnkesorInfo[id][aKisi] > -1){
						SunucuMesaji(AnkesorInfo[id][aKisi], "Ankesörlü telefon kapandý.");
						SetPVarInt(AnkesorInfo[id][aKisi], "AnkesorleKonusuyor", 0);
						oyuncuData[AnkesorInfo[id][aKisi]][oArama] = -1;
						SetPVarInt(AnkesorInfo[id][aKisi], "AnkesorCevaplandi", 0);
						SetPlayerSpecialAction(AnkesorInfo[id][aKisi], SPECIAL_ACTION_STOPUSECELLPHONE),AnkesorInfo[id][aKisi] = -1;
					}
				}
				return 1;
			}

		else if(GetPVarInt(playerid, "AnkesordenAraniyor") == 1)
		{
			new h = GetPVarInt(playerid, "AnkesorID");
			SunucuMesaji(AnkesorInfo[h][aKisi], "Karþýdaki kiþi telefonu kapattý.");
			SunucuMesaji(playerid, "Telefonu kapattýn.");
			SetPVarInt(playerid, "AnkesorAcildi", 0);
			SetPVarInt(playerid, "AnkesordenAraniyor", 0);
			SetPVarInt(AnkesorInfo[h][aKisi], "AnkesorAcildi", 0);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			SetPlayerSpecialAction(AnkesorInfo[h][aKisi], SPECIAL_ACTION_STOPUSECELLPHONE);
			oyuncuData[playerid][oArama] = -1;
			AnkesorInfo[h][aAktif] = 0;
			AnkesorInfo[h][aKisi] = -1;
			oyuncuData[AnkesorInfo[h][aArayan]][oArama] = -1;
			AnkesorInfo[h][aArayan] = -1;
			return 1;
		}
		else
		{
			new oyuncuid = oyuncuData[playerid][oArama];
			oyuncuData[oyuncuid][oArama] = -1;
			oyuncuData[playerid][oAramaSure] = -1;
			oyuncuData[oyuncuid][oAramaSure] = -1;
			if(oyuncuData[playerid][oCevaplandi] == true) {
				SunucuMesaji(oyuncuid, "Karþýdaki kiþi telefonu kapattý.");
				SunucuMesaji(playerid, "Telefonu kapattýn.");
			}
			else if(oyuncuData[playerid][oCevaplandi] == false) {
				SunucuMesaji(oyuncuid, "Karþýdaki kiþi aramayý reddetti.");
				SunucuMesaji(playerid, "Aramayý iptal ettin.");
			}
			oyuncuData[playerid][oCevaplandi] = false;
			oyuncuData[oyuncuid][oCevaplandi] = false;
			RemovePlayerAttachedObject(playerid, 7);RemovePlayerAttachedObject(oyuncuid, 7);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			SetPlayerSpecialAction(oyuncuid, SPECIAL_ACTION_STOPUSECELLPHONE);
			oyuncuData[playerid][oArama] = -1;
		}
		return 1;
	}

	CMD:sms(playerid, params[])
	{
		if(oyuncuData[playerid][oTelefon] != 1 || oyuncuData[playerid][oTelefonNumarasi] == 0)
			return hataMesaji(playerid, "Telefonunuz veya sim kartýnýz yok!");

		if(oyuncuData[playerid][oTelefonDurum] == false)
			return hataMesaji(playerid, "Telefonunuz kapalý olduðu için bu komutu kullanamazsýn.");

		if(oyuncuData[playerid][oGiris] == false) return hataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oDonduruldu] > 0) return hataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oHapisSure][0] > 0 || oyuncuData[playerid][oHapisSure][1] > 0) return hataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
		//if(oyuncuData[playerid][oAdminDurum]) return hataMesaji(playerid, "Yönetici iþbaþýndayken bu komutu kullanamazsýn.");

		static numara, mesaj[128], num = -1;
		if(sscanf(params, "ds[128]", numara, mesaj))
			return kullanimMesaji(playerid, "/sms [numara] [mesaj]");

		if(numara == 0)
			return hataMesaji(playerid, "Bu telefon numarasý geçersizdir!");

		if(numara == 911)
			return hataMesaji(playerid, "911 hattýna mesaj gönderemezsin.");

		if(oyuncuData[playerid][oPara] < SMS_UCRET) return hataMesaji(playerid, "SMS ücretini karþýlamýyorsunuz.");

		new telisim[32], telnobasari = 0, telyeniisim[32], telnoyenibasari = 0;
		foreach(new i : Player) if(oyuncuData[i][oTelefonNumarasi] == numara) 
		{
			if(oyuncuData[i][oTelefonDurum] == false || oyuncuData[i][oIzlenen] != INVALID_PLAYER_ID)
				return hataMesaji(playerid, "Mesaj iletilemedi.");

			for(new a = 0; a < MAX_TELREHBER; a++) if(oyuncuData[playerid][oTelefonNumarasi] == RehberBilgi[i][a][rehbernumara])
			{
			telnobasari++;
			format(telisim, 32, RehberBilgi[i][a][rehberisim]);
			}
			for(new a = 0; a < MAX_TELREHBER; a++) if(oyuncuData[i][oTelefonNumarasi] == RehberBilgi[playerid][a][rehbernumara])
			{
			telnoyenibasari++;
			format(telyeniisim, 32, RehberBilgi[playerid][a][rehberisim]);
			}
			new smsquery[420];
			if(telnobasari == 0)
			{
				if(telnoyenibasari == 0)
				{
				mysql_format(g_SQL, smsquery, sizeof(smsquery), "INSERT INTO `smskayit` (`gonderenoID`, `alanoID`, `rehberad`, `rehbergonderenad`, `numara`, `gonderennumara`, `mesaj`) VALUES ('%d', '%d', 'Yok', 'Yok', '%d', '%d','%e')", oyuncuData[playerid][oID], oyuncuData[i][oID], oyuncuData[i][oTelefonNumarasi], oyuncuData[playerid][oTelefonNumarasi], mesaj);
				mysql_query(g_SQL, smsquery);
				SCM_Ex(i, RENK_KLASIK, "SMS alýndý. Numara: %d | Mesaj: %s", oyuncuData[playerid][oTelefonNumarasi], mesaj);
				cmd(i, 2, "Telefonundan mesaj bildirim sesi geldi.");
				cmd(playerid, 0, "ame telefonundaki tuþlara basarak mesaj gönderir.");
				SCM_Ex(playerid, RENK_KLASIK, "SMS gönderildi. Numara: %d | Mesaj: %s", oyuncuData[i][oTelefonNumarasi], mesaj);
				ParaEkle(playerid, -SMS_UCRET);
				num = i;
				}
				else
				{
				mysql_format(g_SQL, smsquery, sizeof(smsquery), "INSERT INTO `smskayit` (`gonderenoID`, `alanoID`, `rehberad`, `rehbergonderenad`, `numara`, `gonderennumara`, `mesaj`) VALUES ('%d', '%d', 'Yok', '%e', '%d', '%d', '%e')", oyuncuData[playerid][oID], oyuncuData[i][oID], telyeniisim, oyuncuData[i][oTelefonNumarasi], oyuncuData[playerid][oTelefonNumarasi], mesaj);
				mysql_query(g_SQL, smsquery);
				SCM_Ex(i, RENK_KLASIK, "SMS alýndý. Numara: %d | Mesaj: %s", oyuncuData[playerid][oTelefonNumarasi], mesaj);
				cmd(i, 2, "Telefonundan mesaj bildirim sesi geldi.");
				cmd(playerid, 0, "ame telefonundaki tuþlara basarak mesaj gönderir.");
				SCM_Ex(playerid, RENK_KLASIK, "SMS gönderildi. Numara: %s | Mesaj: %s", telyeniisim, mesaj);
				ParaEkle(playerid, -SMS_UCRET);
				num = i;
				}
			}
			else
			{
				if(telnoyenibasari == 0)
				{
				mysql_format(g_SQL, smsquery, sizeof(smsquery), "INSERT INTO `smskayit` (`gonderenoID`, `alanoID`, `rehberad`, `rehbergonderenad`, `numara`, `gonderennumara`, `mesaj`) VALUES ('%d', '%d', '%e', 'Yok', '%d', '%d', '%e')", oyuncuData[playerid][oID], oyuncuData[i][oID], telisim, oyuncuData[i][oTelefonNumarasi], oyuncuData[playerid][oTelefonNumarasi], mesaj);
				mysql_query(g_SQL, smsquery);
				SCM_Ex(i, RENK_KLASIK, "SMS alýndý. Numara: %s | Mesaj: %s", telisim, mesaj);
				cmd(i, 2, "Telefonundan mesaj bildirim sesi geldi.");
				cmd(playerid, 0, "ame telefonundaki tuþlara basarak mesaj gönderir.");
				SCM_Ex(playerid, RENK_KLASIK, "SMS gönderildi. Numara: %d | Mesaj: %s", oyuncuData[i][oTelefonNumarasi], mesaj);
				ParaEkle(playerid, -SMS_UCRET);
				num = i;
				}
				else
				{
				mysql_format(g_SQL, smsquery, sizeof(smsquery), "INSERT INTO `smskayit` (`gonderenoID`, `alanoID`, `rehberad`, `rehbergonderenad`, `numara`, `gonderennumara`, `mesaj`) VALUES ('%d', '%d', '%e', '%e', '%d', '%d', '%e')", oyuncuData[playerid][oID], oyuncuData[i][oID], telisim, telyeniisim, oyuncuData[i][oTelefonNumarasi], oyuncuData[playerid][oTelefonNumarasi], mesaj);
				mysql_query(g_SQL, smsquery);
				SCM_Ex(i, RENK_KLASIK, "SMS alýndý. Numara: %s | Mesaj: %s", telisim, mesaj);
				cmd(i, 2, "Telefonundan mesaj bildirim sesi geldi.");
				cmd(playerid, 0, "ame telefonundaki tuþlara basarak mesaj gönderir.");
				SCM_Ex(playerid, RENK_KLASIK, "SMS gönderildi. Numara: %s | Mesaj: %s", telyeniisim, mesaj);
				ParaEkle(playerid, -SMS_UCRET);
				num = i;
				}
			}
		}
		if(num == -1)
			return UyariMesaji(playerid, "Mesaj iletilemedi.");

		UyariMesaji(playerid, "Mesaj iletildi.");
		return 1;
	}

	CMD:gonder(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 1) return YetkinizYok(playerid);

		static oyuncuid, yer[32];
		if(sscanf(params, "us[32]", oyuncuid, yer))
			return kullanimMesaji(playerid, "/gonder [oyuncu ID/isim] [yer] (ls-lv-sf-idlewood-eastls-littleitaly-viceport-malibu-oceandocks)");

		if(!IsPlayerConnected(oyuncuid))
			return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");

		if(!strcmp(yer, "ls", true)) {
			if(IsPlayerInAnyVehicle(oyuncuid)) {
				SetVehiclePos(GetPlayerVehicleID(oyuncuid), 1529.6327, -1683.8873, 13.3828);
			}
			else {
				SetPlayerPos(oyuncuid, 1529.6327, -1683.8873, 13.3828);
			}
			SetPlayerInterior(oyuncuid, 0);
			SetPlayerVirtualWorld(oyuncuid, 0);
			SunucuMesaji(oyuncuid, "%s adlý yönetici sizi Los Santos'a ýþýnladý.", oyuncuData[playerid][oAdminNick]);
			SunucuMesaji(playerid, "%s adlý kiþiyi Los Santos'a ýþýnladýn.", OyuncuIsim(oyuncuid));
		}
		else if(!strcmp(yer, "lv", true)) {
			if(IsPlayerInAnyVehicle(oyuncuid)) {
				SetVehiclePos(GetPlayerVehicleID(oyuncuid), 2029.8564, 1009.2123, 10.8203);
			}
			else {
				SetPlayerPos(oyuncuid, 2029.8564,1009.2123,10.8203);
			}
			SetPlayerInterior(oyuncuid, 0);
			SetPlayerVirtualWorld(oyuncuid, 0);
			SunucuMesaji(oyuncuid, "%s adlý yönetici sizi Las Venturas'a ýþýnladý.", oyuncuData[playerid][oAdminNick]);
			SunucuMesaji(playerid, "%s adlý kiþiyi Las Venturas'a ýþýnladýn.", OyuncuIsim(oyuncuid));
		}
		else if(!strcmp(yer, "sf", true)) {
			if(IsPlayerInAnyVehicle(oyuncuid)) SetVehiclePos(GetPlayerVehicleID(oyuncuid), -1986.4033, 137.6835, 27.6875);
			else SetPlayerPos(oyuncuid, -1986.4033, 137.6835, 27.6875);
			SetPlayerInterior(oyuncuid, 0);
			SetPlayerVirtualWorld(oyuncuid, 0);
			SunucuMesaji(oyuncuid, "%s adlý yönetici sizi San Fierro'ya ýþýnladý.", oyuncuData[playerid][oAdminNick]);
			SunucuMesaji(playerid, "%s adlý kiþiyi San Fierro'ya ýþýnladýn.", OyuncuIsim(oyuncuid));
		}
		else if(!strcmp(yer, "idlewood", true))
		{
			if(IsPlayerInAnyVehicle(oyuncuid)) {
				SetVehiclePos(GetPlayerVehicleID(oyuncuid), 2079.0566,-1776.6274,13.5469);
			}
			else SetPlayerPos(oyuncuid, 2079.0566,-1776.6274,13.5469);
			SetPlayerInterior(oyuncuid, 0);
			SetPlayerVirtualWorld(oyuncuid, 0);
			SunucuMesaji(oyuncuid, "%s adlý yönetici sizi Idlewood'a ýþýnladý.", oyuncuData[playerid][oAdminNick]);
			SunucuMesaji(playerid, "%s adlý kiþiyi Idlewood'a ýþýnladýn.", OyuncuIsim(oyuncuid));
		}
		else if(!strcmp(yer, "eastls", true))
		{
			if(IsPlayerInAnyVehicle(oyuncuid)) {
				SetVehiclePos(GetPlayerVehicleID(oyuncuid), 2458.3025,-1436.7368,23.9518);
			}
			else SetPlayerPos(oyuncuid, 2458.3025,-1436.7368,23.9518);
			SetPlayerInterior(oyuncuid, 0);
			SetPlayerVirtualWorld(oyuncuid, 0);
			SunucuMesaji(oyuncuid, "%s adlý yönetici sizi East LS'e ýþýnladý.", oyuncuData[playerid][oAdminNick]);
			SunucuMesaji(playerid, "%s adlý kiþiyi East LS'e ýþýnladýn.", OyuncuIsim(oyuncuid));
		}
		else if(!strcmp(yer, "littleitaly", true))
		{
			if(IsPlayerInAnyVehicle(oyuncuid)) {
				SetVehiclePos(GetPlayerVehicleID(oyuncuid), 1089.3749,-1700.2115,14.3291);
			}
			else SetPlayerPos(oyuncuid, 1089.3749,-1700.2115,14.3291);
			SetPlayerInterior(oyuncuid, 0);
			SetPlayerVirtualWorld(oyuncuid, 0);
			SunucuMesaji(oyuncuid, "%s adlý yönetici sizi Little Italy'e ýþýnladý.", oyuncuData[playerid][oAdminNick]);
			SunucuMesaji(playerid, "%s adlý kiþiyi Little Italy'e ýþýnladýn.", OyuncuIsim(oyuncuid));
		}
		else if(!strcmp(yer, "viceport", true))
		{
			if(IsPlayerInAnyVehicle(oyuncuid)) {
				SetVehiclePos(GetPlayerVehicleID(oyuncuid), 143.8496,-1960.7256,4.9926);
			}
			else SetPlayerPos(oyuncuid, 143.8496,-1960.7256,4.9926);
			SetPlayerInterior(oyuncuid, 0);
			SetPlayerVirtualWorld(oyuncuid, 0);
			SunucuMesaji(oyuncuid, "%s adlý yönetici sizi Vice Port'a ýþýnladý.", oyuncuData[playerid][oAdminNick]);
			SunucuMesaji(playerid, "%s adlý kiþiyi Vice Port'a ýþýnladýn.", OyuncuIsim(oyuncuid));
		}
		else if(!strcmp(yer, "malibu", true))
		{
			if(IsPlayerInAnyVehicle(oyuncuid)) {
				SetVehiclePos(GetPlayerVehicleID(oyuncuid), 467.0401,-1828.9431,5.5122);
			}
			else SetPlayerPos(oyuncuid, 467.0401,-1828.9431,5.5122);
			SetPlayerInterior(oyuncuid, 0);
			SetPlayerVirtualWorld(oyuncuid, 0);
			SunucuMesaji(oyuncuid, "%s adlý yönetici sizi Malibu'ya ýþýnladý.", oyuncuData[playerid][oAdminNick]);
			SunucuMesaji(playerid, "%s adlý kiþiyi Malibu'ya ýþýnladýn.", OyuncuIsim(oyuncuid));
		}
		else if(!strcmp(yer, "oceandocks", true))
		{
			if(IsPlayerInAnyVehicle(oyuncuid)) {
				SetVehiclePos(GetPlayerVehicleID(oyuncuid), 2749.2122,-2492.1970,13.6432);
			}
			else SetPlayerPos(oyuncuid, 2749.2122,-2492.1970,13.6432);
			SetPlayerInterior(oyuncuid, 0);
			SetPlayerVirtualWorld(oyuncuid, 0);
			SunucuMesaji(oyuncuid, "%s adlý yönetici sizi Ocean Docks'a ýþýnladý.", oyuncuData[playerid][oAdminNick]);
			SunucuMesaji(playerid, "%s adlý kiþiyi Ocean Docks'a ýþýnladýn.", OyuncuIsim(oyuncuid));
		}
		else { hataMesaji(playerid, "Geçersiz yer!"); }
		return 1;
	}

	CMD:isyeri(playerid, params[])
	{
		if(oyuncuData[playerid][oGiris] == false) return hataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oDonduruldu] > 0) return hataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oHapisSure][0] > 0 || oyuncuData[playerid][oHapisSure][1] > 0) return hataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
		//if(oyuncuData[playerid][oAdminDurum]) return hataMesaji(playerid, "Yönetici iþbaþýndayken bu komutu kullanamazsýn.");

		new id = -1, menu[2048];
		if((id = Oyuncu_Isyerinde(playerid)) != -1 && Isyeri_SahipKontrol(playerid, id) || (id = Oyuncu_Isyerinde(playerid)) != -1 && IsyeriBilgi[id][isyeriOrtak] == oyuncuData[playerid][oID] || (id = Oyuncu_Isyerinde(playerid)) != -1 && IsyeriBilgi[id][isyeriSahip] == -1 && oyuncuData[playerid][oAdmin] > 4) {
			if(IsyeriBilgi[id][isyeriDurum] == 3 && oyuncuData[playerid][oAdmin] < 6 && !IsPlayerAdmin(playerid))
				return hataMesaji(playerid, "Bakýmdaki iþyeri üzerinde düzenleme yapýlamaz.");
			if(IsyeriBilgi[id][isyeriDurum] == 4 && !IsPlayerAdmin(playerid)) return hataMesaji(playerid, "Bu iþyeri vergi mühründe. Bankaya git ve /vergiode komutunu kullan.");

			if(IsyeriBilgi[id][isyeriTur] != 9) {
				format(menu, sizeof(menu), "Seçenek\nIþ yeri Ismi Deðiþtir\nKilit Durumunu Deðiþtir\nGiriþ Ücretini Deðiþtir\nMüzik Deðiþtir");
				if((id = Oyuncu_Isyerinde(playerid)) != -1 && IsyeriBilgi[id][isyeriOrtak] == oyuncuData[playerid][oID]) strcat(menu, "\nOrtaklýktan Ayrýl");
				if((id = Oyuncu_Isyerinde(playerid)) != -1 && Isyeri_SahipKontrol(playerid, id)) strcat(menu, "\nOrtak Deðiþtir\nOrtak Çýkar\nKasa Ýþlemleri\nÜrün Al($500)\nGiriþ Konumunu Deðiþtir\n{B70000}Sisteme Sat");
				DialogGoster(playerid, DIALOG_ISYERI, DIALOG_STYLE_TABLIST_HEADERS, "> Ýþyeri Menüsü", menu, "Seç", "Ýptal");
			}
			else if(IsyeriBilgi[id][isyeriTur] == 9) {
				format(menu, sizeof(menu), "Seçenek\nIþ yeri Ismi Deðiþtir\nKilit Durumunu Deðiþtir\nGiriþ Ücretini Deðiþtir\nMüzik Deðiþtir\nBenzin Ücreti Deðiþtir");
				if((id = Oyuncu_Isyerinde(playerid)) != -1 && IsyeriBilgi[id][isyeriOrtak] == oyuncuData[playerid][oID]) strcat(menu, "\nOrtaklýktan Ayrýl");
				if((id = Oyuncu_Isyerinde(playerid)) != -1 && Isyeri_SahipKontrol(playerid, id)) strcat(menu, "\nOrtak Deðiþtir\nOrtak Çýkar\nKasa Ýþlemleri\nÜrün Al($500)\n{B70000}Sisteme Sat");
				DialogGoster(playerid, DIALOG_ISYERI, DIALOG_STYLE_TABLIST_HEADERS, "> Ýþyeri Menüsü", menu, "Seç", "Ýptal");
			}
		}
		else if((id = Isyeri_Yakin(playerid)) != -1 && Isyeri_SahipKontrol(playerid, id) || (id = Isyeri_Yakin(playerid)) != -1 && IsyeriBilgi[id][isyeriOrtak] == oyuncuData[playerid][oID] || (id = Isyeri_Yakin(playerid)) != -1 && IsyeriBilgi[id][isyeriSahip] == -1 && oyuncuData[playerid][oAdmin] > 4) {
			if(IsyeriBilgi[id][isyeriDurum] == 3 && oyuncuData[playerid][oAdmin] < 6 && !IsPlayerAdmin(playerid))
				return hataMesaji(playerid, "Bakýmdaki iþyeri üzerinde düzenleme yapýlamaz.");

			if(IsyeriBilgi[id][isyeriTur] != 9) {
				format(menu, sizeof(menu), "Seçenek\nIþ yeri Ismi Deðiþtir\nKilit Durumunu Deðiþtir\nGiriþ Ücretini Deðiþtir\nMüzik Deðiþtir");
				if((id = Isyeri_Yakin(playerid)) != -1 && IsyeriBilgi[id][isyeriOrtak] == oyuncuData[playerid][oID]) strcat(menu, "\nOrtaklýktan Ayrýl");
				if((id = Isyeri_Yakin(playerid)) != -1 && Isyeri_SahipKontrol(playerid, id)) strcat(menu, "\nOrtak Deðiþtir\nOrtak Çýkar\nKasa Ýþlemleri\nÜrün Al($500)\n{B70000}Sisteme Sat");
				DialogGoster(playerid, DIALOG_ISYERI, DIALOG_STYLE_TABLIST_HEADERS, "> Ýþyeri Menüsü", menu, "Seç", "Ýptal");
			}
			else if(IsyeriBilgi[id][isyeriTur] == 9) {
				format(menu, sizeof(menu), "Seçenek\nIþ yeri Ismi Deðiþtir\nKilit Durumunu Deðiþtir\nGiriþ Ücretini Deðiþtir\nMüzik Deðiþtir\nBenzin Ücreti Deðiþtir");
				if((id = Isyeri_Yakin(playerid)) != -1 && IsyeriBilgi[id][isyeriOrtak] == oyuncuData[playerid][oID]) strcat(menu, "\n{B70000}Ortaklýktan Ayrýl");
				if((id = Isyeri_Yakin(playerid)) != -1 && Isyeri_SahipKontrol(playerid, id)) strcat(menu, "\nOrtak Deðiþtir\nOrtak Çýkar\nKasa Ýþlemleri\nÜrün Al($500)\n{B70000}Sisteme Sat");
				DialogGoster(playerid, DIALOG_ISYERI, DIALOG_STYLE_TABLIST_HEADERS, "> Ýþyeri Menüsü", menu, "Seç", "Ýptal");
			}
		}
		else hataMesaji(playerid, "Bir iþyerinin içinde ya da yakýnýnda deðilsin.");
		return 1;
	}

	CMD:ev(playerid, params[])
	{
		if(oyuncuData[playerid][oGiris] == false) return hataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oDonduruldu] > 0) return hataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oHapisSure][0] > 0 || oyuncuData[playerid][oHapisSure][1] > 0) return hataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
		//if(oyuncuData[playerid][oAdminDurum]) return hataMesaji(playerid, "Yönetici iþbaþýndayken bu komutu kullanamazsýn.");

		new menu[2048], cek = 0;
		if(Oyuncu_Evde(playerid) != -1)
		{
			new id = Oyuncu_Evde(playerid);
			if(Ev_SahipKontrol(playerid, id) || EvBilgi[id][evAnahtar] == oyuncuData[playerid][oID] || EvBilgi[id][evKiraci] == oyuncuData[playerid][oID])
			{
				if(EvBilgi[id][evDurum] == 4 && !IsPlayerAdmin(playerid)) return hataMesaji(playerid, "Bu ev vergi kilidinde, iþlem yapýlamaz.");
				if(EvBilgi[id][evDurum] == 3 && !IsPlayerAdmin(playerid)) return hataMesaji(playerid, "Bakýmdaki evler üzerinde iþlem yapýlamaz.");

				format(menu, sizeof(menu), "Seçenek\t\tDeðer\nKilit Durumunu Deðiþtir\nLamba Durumunu Deðiþtir\nKapý Pozisyonu Ayarla\nSilah Envanter\nEþya Envanter");
				DialogGoster(playerid, DIALOG_EV_SAHIP, DIALOG_STYLE_TABLIST_HEADERS, "> Ev Menüsü", menu, "Seç", "Ýptal");
				cek++;
			}
		}
		else
		{
			if(Ev_Yakin(playerid) != -1)
			{
				new id = Ev_Yakin(playerid);
				if(EvBilgi[id][evDurum] == 4 && !IsPlayerAdmin(playerid)) return hataMesaji(playerid, "Bu ev vergi kilidinde, iþlem yapýlamaz.");
				if(EvBilgi[id][evDurum] == 3 && !IsPlayerAdmin(playerid)) return hataMesaji(playerid, "Bakýmdaki evler üzerinde iþlem yapýlamaz.");
				format(menu, sizeof(menu), "Seçenek\t\tDeðer\nZil Çal");
				if((EvBilgi[id][evKiralik] == 1 || EvBilgi[id][evAnahtar] == oyuncuData[playerid][oID]) && !Ev_SahipKontrol(playerid, id)) strcat(menu, "\nEvi Kirala");
				if(EvBilgi[id][evKiraci] == oyuncuData[playerid][oID]) strcat(menu, "\n{B70000}Kiracýlýktan Ayrýl");
				if(Ev_SahipKontrol(playerid, id)) strcat(menu, "\nDekor Deðiþtir\nKilit Durumunu Deðiþtir\nKira durumunu deðiþtir\nKira ücretini deðiþtir\nKiracý Çýkart\n{B70000}Evi Sisteme Sat");
				DialogGoster(playerid, DIALOG_EV_KAPI, DIALOG_STYLE_TABLIST_HEADERS, "> Ev Menüsü", menu, "Seç", "Ýptal");
				cek++;
			}
		}
		if(cek == 0) return hataMesaji(playerid, "Bir eve yakýn deðilsin veya içerisinde olduðunuz ev sana ait deðil.");
		return 1;
	}

	CMD:evlamba(playerid, params[])
	{
		static id = -1, id2 = -1;
		if((id = Oyuncu_Evde(playerid)) == -1) return hataMesaji(playerid, "Herhangi bir evde deðilsin.");
		if(oyuncuData[playerid][oGiris] == false) return hataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oDonduruldu] > 0) return hataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oHapisSure][0] > 0 || oyuncuData[playerid][oHapisSure][1] > 0) return hataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
		//if(oyuncuData[playerid][oAdminDurum]) return hataMesaji(playerid, "Yönetici iþbaþýndayken bu komutu kullanamazsýn.");

		switch(EvBilgi[id][evLamba]) {
			case true: {
				EvBilgi[id][evLamba] = false;
				cmd(playerid, 1, "ýþýklarý açar.");
				foreach(new i : Player) if((id2 = Oyuncu_Evde(i)) != -1 && id2 == id) {
					PlayerTextDrawHide(i, oyuncuData[i][oTextdraw][2]);
				}
			}
			case false: {
				EvBilgi[id][evLamba] = true;
				cmd(playerid, 1, "ýþýklarý kapatýr.");
				foreach(new i : Player) if((id2 = Oyuncu_Evde(i)) != -1 && id2 == id) {
					PlayerTextDrawShow(i, oyuncuData[i][oTextdraw][2]);
				}
			}
		}
		return 1;
	}

	CMD:eme(playerid, params[])
	{
		static id = -1, id2 = -1;
		if((id = Oyuncu_EvKapida(playerid)) != -1) {
			if(isnull(params))
				return hataMesaji(playerid, "/eme [ev eylem]");

			foreach(new i : Player) {
				id2 = Ev_Yakin(i);
				if(id2 == id)
					SCM_Ex(i, RENK_PEMBE, "*%s %s", OyuncuIsim(playerid), params);
			}
			new mesajgonder[256];
			format(mesajgonder, sizeof(mesajgonder), "%s", params);
			cmd(playerid, 1, mesajgonder);
		}
		else if((id = Ev_Yakin(playerid)) != -1) {
			if(isnull(params))
				return hataMesaji(playerid, "/eme [ev eylem]");

			foreach(new i : Player) {
				id2 = Oyuncu_EvKapida(i);
				if(id2 == id)
					SCM_Ex(i, RENK_PEMBE, "*%s %s", OyuncuIsim(playerid), params);
			}
			new mesajgonder[256];
			format(mesajgonder, sizeof(mesajgonder), "%s", params);
			cmd(playerid, 1, mesajgonder);
		}
		else hataMesaji(playerid, "Bir eve yakýn veya evin iç kapýsýnda deðilsin.");
		return 1;
	}

	CMD:edo(playerid, params[])
	{
		static id = -1, id2 = -1;
		if((id = Oyuncu_EvKapida(playerid)) != -1) {
			if(isnull(params))
				return hataMesaji(playerid, "/edo [ev durum]");

			foreach(new i : Player) {
				id2 = Ev_Yakin(i);
				if(id2 == id)
					SCM_Ex(i, RENK_DO, "* %s (( %s ))", params, OyuncuIsim(playerid));
			}
			new mesajgonder[256];
			format(mesajgonder, sizeof(mesajgonder), "%s", params);
			cmd(playerid, 2, mesajgonder);
		}
		else if((id = Ev_Yakin(playerid)) != -1) {
			if(isnull(params))
				return hataMesaji(playerid, "/edo [ev durum]");

			foreach(new i : Player) {
				id2 = Oyuncu_EvKapida(i);
				if(id2 == id)
					SCM_Ex(i, RENK_DO, "* %s (( %s ))", params, OyuncuIsim(playerid));
			}
			new mesajgonder[256];
			format(mesajgonder, sizeof(mesajgonder), "%s", params);
			cmd(playerid, 2, mesajgonder);
		}
		else hataMesaji(playerid, "Bir eve yakýn veya evin iç kapýsýnda deðilsin.");
		return 1;
	}

	CMD:ime(playerid, params[])
	{
		static id = -1, id2 = -1;
		if((id = Oyuncu_IsyeriKapida(playerid)) != -1) {
			if(isnull(params))
				return hataMesaji(playerid, "/ime [isyeri eylem]");

			foreach(new i : Player) {
				id2 = Isyeri_Yakin(i);
				if(id2 == id)
					SCM_Ex(i, RENK_PEMBE, "*%s %s", OyuncuIsim(playerid), params);
			}
			new mesajgonder[256];
			format(mesajgonder, sizeof(mesajgonder), "%s", params);
			cmd(playerid, 1, mesajgonder);
		}
		else if((id = Isyeri_Yakin(playerid)) != -1) {
			if(isnull(params))
				return hataMesaji(playerid, "/ime [isyeri eylem]");

			foreach(new i : Player) {
				id2 = Oyuncu_IsyeriKapida(i);
				if(id2 == id)
					SCM_Ex(i, RENK_PEMBE, "*%s %s", OyuncuIsim(playerid), params);
			}
			new mesajgonder[256];
			format(mesajgonder, sizeof(mesajgonder), "%s", params);
			cmd(playerid, 1, mesajgonder);
		}
		else hataMesaji(playerid, "Bir iþyerine yakýn veya iþyerinin iç kapýsýnda deðilsin.");
		return 1;
	}

	CMD:ido(playerid, params[])
	{
		static id = -1, id2 = -1;
		if((id = Oyuncu_IsyeriKapida(playerid)) != -1) {
			if(isnull(params))
				return hataMesaji(playerid, "/ido [isyeri durum]");

			foreach(new i : Player) {
				id2 = Isyeri_Yakin(i);
				if(id2 == id)
					SCM_Ex(i, RENK_DO, "* %s (( %s ))", params, OyuncuIsim(playerid));
			}
			new mesajgonder[256];
			format(mesajgonder, sizeof(mesajgonder), "%s", params);
			cmd(playerid, 2, mesajgonder);
		}
		else if((id = Isyeri_Yakin(playerid)) != -1) {
			if(isnull(params))
				return hataMesaji(playerid, "/edo [ev durum]");

			foreach(new i : Player) {
				id2 = Oyuncu_IsyeriKapida(i);
				if(id2 == id)
					SCM_Ex(i, RENK_DO, "* %s (( %s ))", params, OyuncuIsim(playerid));
			}
			new mesajgonder[256];
			format(mesajgonder, sizeof(mesajgonder), "%s", params);
			cmd(playerid, 2, mesajgonder);
		}
		else hataMesaji(playerid, "Bir iþyerine yakýn veya iþyerinin iç kapýsýnda deðilsin.");
		return 1;
	}

	CMD:is(playerid, params[])
	{
		static id = -1, id2 = -1;
		if((id = Oyuncu_IsyeriKapida(playerid)) != -1) {
			if(isnull(params))
				return hataMesaji(playerid, "/is [isyerine bagirma]");

			foreach(new i : Player) {
				id2 = Isyeri_Yakin(i);
				if(id2 == id)
					SCM_Ex(i, RENK_KAPALISARI, "%s (baðýrarak): %s!", OyuncuIsim(playerid),params);
			}
			OzelYakinMesaj(playerid, 20.0, RENK_BEYAZ, "%s kapýya doðru baðýrýr: %s!", OyuncuIsim(playerid), params);
		}
		else if((id = Isyeri_Yakin(playerid)) != -1) {
			if(isnull(params))
				return hataMesaji(playerid, "/is [isyerine bagirma]");

			foreach(new i : Player) {
				id2 = Oyuncu_IsyeriKapida(i);
				if(id2 == id)
					SCM_Ex(i, RENK_KAPALISARI, "%s (baðýrarak): %s!", OyuncuIsim(playerid),params);
			}
			OzelYakinMesaj(playerid, 20.0, RENK_BEYAZ, "%s kapýya doðru baðýrýr: %s!", OyuncuIsim(playerid), params);
		}
		else hataMesaji(playerid, "Bir iþyerine yakýn veya iþyerinin iç kapýsýnda deðilsin.");
		return 1;
	}

	CMD:es(playerid, params[])
	{
		static id = -1, id2 = -1;
		if((id = Oyuncu_EvKapida(playerid)) != -1) {
			if(isnull(params))
				return hataMesaji(playerid, "/es [eve bagirma]");

			foreach(new i : Player) {
				id2 = Ev_Yakin(i);
				if(id2 == id)
					SCM_Ex(i, RENK_KAPALISARI, "%s (baðýrarak): %s!", OyuncuIsim(playerid),params);
			}
			OzelYakinMesaj(playerid, 20.0, RENK_BEYAZ, "%s kapýya doðru baðýrýr: %s!", OyuncuIsim(playerid), params);
		}
		else if((id = Ev_Yakin(playerid)) != -1) {
			if(isnull(params))
				return hataMesaji(playerid, "/es [eve bagirma]");

			foreach(new i : Player) {
				id2 = Oyuncu_EvKapida(i);
				if(id2 == id)
					SCM_Ex(i, RENK_KAPALISARI, "%s (baðýrarak): %s!", OyuncuIsim(playerid),params);
			}
			OzelYakinMesaj(playerid, 20.0, RENK_BEYAZ, "%s kapýya doðru baðýrýr: %s!", OyuncuIsim(playerid), params);
		}
		else hataMesaji(playerid, "Bir eve yakýn veya evin iç kapýsýnda deðilsin.");
		return 1;
	}

	CMD:evyarat(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 5) return YetkinizYok(playerid);
		static fiyat;
		if(sscanf(params, "d", fiyat)) return kullanimMesaji(playerid, "/evyarat [fiyat]");
		static id;
		id = Ev_Yarat(playerid, fiyat);
		if(id < 0)
			return hataMesaji(playerid, "Sunucu ev limitine ulaþtýðý için yeni ev yaratýlamýyor!");

		SunucuMesaji(playerid, "Yeni bir ev yarattýn. (ID: %d | Fiyat: %s)", id, NumaraFormati(fiyat));
		return 1;
	}

	CMD:evsil(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 5) return YetkinizYok(playerid);

		static id;
		if(sscanf(params, "d", id))
			return kullanimMesaji(playerid, "/evsil [ev id]");

		if((id < 0 || id >= MAKSIMUM_EV) || !EvBilgi[id][evKullanimda])
			return hataMesaji(playerid, "Geçersiz ev belirtildi!");

		Ev_Sil(id);
		SunucuMesaji(playerid, "Ev %d baþarýyla silindi!", id);
		return 1;
	}

	CMD:evduzenle(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 7) return YetkinizYok(playerid);

		static id, type[24], string[128];
		if(sscanf(params, "ds[24]S()[128]", id, type, string))
		{
			kullanimMesaji(playerid, "/evduzenle [id] [isim]");
			SendClientMessage(playerid, RENK_SARI, "[ÝSÝMLER]:{FFFFFF} lokasyon, interior, adres, sanaldunya, sahip, fiyat, durum, bakimbitir, dekorsifirla, vw, int, vergi");
			return 1;
		}
		if((id < 0 || id >= MAKSIMUM_EV) || !EvBilgi[id][evKullanimda])
			return hataMesaji(playerid, "Geçersiz ev!");

		if(!strcmp(type, "lokasyon", true))
		{
			GetPlayerPos(playerid, EvBilgi[id][evPos][0], EvBilgi[id][evPos][1], EvBilgi[id][evPos][2]);
			GetPlayerFacingAngle(playerid, EvBilgi[id][evPos][3]);

			EvBilgi[id][evDisInt] = GetPlayerInterior(playerid);
			EvBilgi[id][evDisVW] = GetPlayerVirtualWorld(playerid);
			if(IsValidDynamicPickup(EvBilgi[id][evPickup])) DestroyDynamicPickup(EvBilgi[id][evPickup]);
			EvBilgi[id][evPickup] = CreateDynamicPickup(1273, 23, EvBilgi[id][evPos][0], EvBilgi[id][evPos][1], EvBilgi[id][evPos][2], EvBilgi[id][evDisVW], EvBilgi[id][evDisInt], -1, 10.0); // + 0.7
			Ev_Yenile(id);
			Ev_Kaydet(id);
			foreach(new i : Player)	if(oyuncuData[i][oAdmin] > 0 && oyuncuData[i][oAdminDurum] == true)
			{
				SCM_Ex(i, RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s bir evin lokasyonunu deðiþtirdi. (ID: %d)", oyuncuData[playerid][oAdminNick], id);
			}
		}
		else if(!strcmp(type, "vergi", true))
		{
			static yenivergi;
			if(sscanf(string, "d", yenivergi)) return kullanimMesaji(playerid, "/evduzenle [id] vergi [yeni vergi deðeri]");
			EvBilgi[id][evVergi] = yenivergi;
			if(EvBilgi[id][evVergi] >= 10000)
			{
				EvBilgi[id][evDurum] = 4;
			}
			Ev_Kaydet(id);
			Ev_Yenile(id);
			UstYoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s bir evin vergisini %d olarak deðiþtirdi. (ID: %d)", oyuncuData[playerid][oAdminNick], yenivergi, id);
		}
		else if(!strcmp(type, "dekorsifirla", true))
		{
			EvBilgi[id][evIcPos][0] = 1412.639892;
			EvBilgi[id][evIcPos][1] = -1.787510;
			EvBilgi[id][evIcPos][2] = 1000.924377;
			EvBilgi[id][evIcPos][3] = 90.4601;
			EvBilgi[id][evInterior] = 1;
			EvBilgi[id][evDekor] = 0;
			Ev_Kaydet(id);
			UstYoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s bir evin dekorunu sýfýrladý. (ID: %d)", oyuncuData[playerid][oAdminNick], id);
		}
		else if(!strcmp(type, "vw", true))
		{
			new worldno;
			if(sscanf(string, "d", worldno)) return kullanimMesaji(playerid, "/evduzenle [id] vw [world]");
			if(worldno < 0 || worldno > 95000) return hataMesaji(playerid, "Geçersiz world deðeri.");
			EvBilgi[id][evVW] = worldno;
			Ev_Kaydet(id);
			UstYoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s bir evin virtual worldunu %d olarak deðiþtirdi. (ID: %d)", oyuncuData[playerid][oAdminNick], worldno, id);
		}
		else if(!strcmp(type, "int", true))
		{
			EvBilgi[id][evInterior] = 0;
			Ev_Kaydet(id);
			UstYoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s bir evin virtual worldunu sýfýrladý. (ID: %d)", oyuncuData[playerid][oAdminNick], id);
		}
		else if(!strcmp(type, "kiraucret", true))
		{
			static kiraucret;
			if(sscanf(string, "d", kiraucret)) return kullanimMesaji(playerid, "/evduzenle [id] kiraucret [ücret]");
			if(EvBilgi[id][evKiralik] < 1) return hataMesaji(playerid, "Bu ev kiralýk durumda deðil. '/evduzenle id kiradurum'");
			EvBilgi[id][evKiraUcret] = kiraucret;
			Ev_Yenile(id);
			Ev_Kaydet(id);
			UstYoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s bir evin kira ücretini %d olarak deðiþtirdi. (ID: %d)", oyuncuData[playerid][oAdminNick], kiraucret, id);
		}
		else if(!strcmp(type, "dekor", true))
		{
			new dekorid;
			if(sscanf(string, "d", dekorid)) return kullanimMesaji(playerid, "/evduzenle [id] dekor [dekor id]");
			adminevdekordegistir(playerid, id, dekorid);
			Ev_Yenile(id);
			Ev_Kaydet(id);
			UstYoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s bir evin dekorunu %d olarak deðiþtirdi. (ID: %d)", oyuncuData[playerid][oAdminNick], dekorid, id);
		}
		else if(!strcmp(type, "kiradurum", true))
		{
			if(EvBilgi[id][evKiralik] > 0)
			{
				EvBilgi[id][evKiralik] = 0;
				EvBilgi[id][evKiraciIsim][0] = 0;
				Ev_Yenile(id);
				Ev_Kaydet(id);
				UstYoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s bir evin kira durumunu pasif hale getirdi. (ID: %d)", oyuncuData[playerid][oAdminNick], id);
			}
			else if(EvBilgi[id][evKiralik] < 1)
			{
				EvBilgi[id][evKiralik] = 1;
				EvBilgi[id][evKiraciIsim][0] = 0;
				Ev_Yenile(id);
				Ev_Kaydet(id);
				UstYoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s bir evin kira durumunu aktif hale getirdi. (ID: %d)", oyuncuData[playerid][oAdminNick], id);
			}
		}
		else if(!strcmp(type, "interior", true))
		{
			GetPlayerPos(playerid, EvBilgi[id][evIcPos][0], EvBilgi[id][evIcPos][1], EvBilgi[id][evIcPos][2]);
			GetPlayerFacingAngle(playerid, EvBilgi[id][evIcPos][3]);

			EvBilgi[id][evInterior] = GetPlayerInterior(playerid);
			SetPlayerVirtualWorld(playerid, EvBilgi[id][evVW]);

			Ev_Kaydet(id);
			UstYoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s bir evin interiorunu deðiþtirdi. (ID: %d)", oyuncuData[playerid][oAdminNick], id);
		}
		else if(!strcmp(type, "sanaldunya", true))
		{
			static dunyaid;
			if(sscanf(string, "d", dunyaid))
				return kullanimMesaji(playerid, "/evduzenle [id] [sanaldunya] [sanal dünya]");

			EvBilgi[id][evVW] = dunyaid;
			Ev_Kaydet(id);
			UstYoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s bir evin sanal dünyasýný(VW'sini) deðiþtirdi. (ID: %d | SD: %d)", oyuncuData[playerid][oAdminNick], id, dunyaid);
		}
		else if(!strcmp(type, "adres", true))
		{
			static adres[64];

			if(sscanf(string, "s[64]", adres))
				return kullanimMesaji(playerid, "/evduzenle [id] [adres] [yeni adres]");

			format(EvBilgi[id][evAdres], 64, adres);
			Ev_Yenile(id);
			Ev_Kaydet(id);

			UstYoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s bir evin adresini deðiþitirdi. (ID: %d | Adres: \"%s\")", oyuncuData[playerid][oAdminNick], id, adres);
		}
		else if(!strcmp(type, "sahip", true))
		{
			static oyuncuid;
			if(sscanf(string, "d", oyuncuid))
				return kullanimMesaji(playerid, "/evduzenle [id] [sahip] [oyuncu ID] - (-1 kaldýrýr)");

			if(oyuncuid == -1) {
				EvBilgi[id][evSahip] = 0;
				Ev_Kaydet(id);
				Ev_Yenile(id);
				UstYoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s bir evin sahibini deðiþitirdi. (ID: %d | Sahip: Yok)", oyuncuData[playerid][oAdminNick], id);
				return 1;
			}
			else {
				if(!IsPlayerConnected(oyuncuid))
					return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");

				EvBilgi[id][evSahip] = oyuncuData[oyuncuid][oID];
				Ev_Kaydet(id);
				EvBilgi[id][evSahipIsim][0] = 0;
				Ev_Yenile(id);
				UstYoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s bir evin sahibini deðiþitirdi. (ID: %d | Sahip: %s)", oyuncuData[playerid][oAdminNick], id, OyuncuIsim(oyuncuid));
			}
		}
		else if(!strcmp(type, "fiyat", true))
		{
			static fiyat;
			if(sscanf(string, "d", fiyat))
				return kullanimMesaji(playerid, "/evduzenle [id] [fiyat] [yeni fiyat]");

			if(fiyat < 1 || fiyat > 10000000)
				return hataMesaji(playerid, "Fiyat en az 1, en fazla 10,000,000 olabilir.");

			EvBilgi[id][evFiyat] = fiyat;
			Ev_Yenile(id);
			Ev_Kaydet(id);
			UstYoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s bir evin fiyatýný deðiþtirdi. (ID: %d | Yeni Fiyat: %s)", oyuncuData[playerid][oAdminNick], id, NumaraFormati(fiyat));
		}
		else if(!strcmp(type, "durum", true))
		{
			static durum;
			if(sscanf(string, "d", durum)) {
				kullanimMesaji(playerid, "/evduzenle [id] [durum] [durum id]");
				SendClientMessage(playerid, RENK_SARI, "[DURUMLAR]:{FFFFFF} 1: Kilitsiz, 2: Kilitli, 3: Bakým");
				return 1;
			}

			if(durum < 1 || durum > 3)
				return hataMesaji(playerid, "Geçersiz durum.");

			EvBilgi[id][evDurum] = durum;
			Ev_Yenile(id);
			Ev_Kaydet(id);
			UstYoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s bir evin durumunu deðiþtirdi. (ID: %d | Yeni Durum: %d)", oyuncuData[playerid][oAdminNick], id, durum);
		}
		else if(!strcmp(type, "bakimbitir", true))
		{
			if(EvBilgi[id][evDurum] != 3) return hataMesaji(playerid, "Bu ev bakýmda deðil.");
			EvBilgi[id][evDurum] = 1;
			EvBilgi[id][evBakimSure] = 0;
			Ev_Yenile(id);
			Ev_Kaydet(id);
			UstYoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s bir evin bakým süresini bitirdi. (ID: %d)", oyuncuData[playerid][oAdminNick], id);
		}
		return 1;
	}

	CMD:hapis(playerid, params[])
	{
		if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return hataMesaji(playerid, "Polis deðilsin.");
		if(Tutuklama_Yakin(playerid) == -1) return hataMesaji(playerid, "Tutuklama noktasýna yakýn deðilsin.");
		static oyuncuid, dakika, sebep[128];
		if(sscanf(params, "uds[128]", oyuncuid, dakika, sebep))
			return kullanimMesaji(playerid, "/hapis [oyuncu id/isim] [dakika] [sebep]");

		if(!IsPlayerConnected(oyuncuid)) return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");
		if(!YakinlikKontrol(playerid, oyuncuid, 3.0)) return hataMesaji(playerid, "Girilen oyuncuya yakýn deðilsin.");
		if(oyuncuid == playerid) return hataMesaji(playerid, "Kendini hapise atamazsýn.");
		if(oyuncuData[oyuncuid][oAdminDurum] == true) return hataMesaji(playerid, "Yönetici iþbaþýndaki kiþiler hapise atýlamaz.");
		if(OyuncuBirlikTuru(oyuncuid) == BIRLIK_POLIS) return hataMesaji(playerid, "Polisler hapise atýlamaz.");
		if(dakika < 1 || dakika > 5000) return hataMesaji(playerid, "Dakika en az 1, en fazla 5000 olabilir.");
		if(strlen(sebep) < 5) return hataMesaji(playerid, "Sebep metni 5 karakterden az olamaz.");

		BirlikMesaji(oyuncuData[playerid][oBirlik], RENK_TELSIZ, "[OPERATOR] %s adlý polis memuru %s adlý kiþiyi %d dakika hapise attý.", OyuncuIsim(playerid), OyuncuIsim(oyuncuid), dakika);
		BirlikMesaji(oyuncuData[playerid][oBirlik], RENK_TELSIZ, "[OPERATOR] Ýþlediði Suç: %s", sebep);

		SunucuMesaji(oyuncuid, "%s adlý polis memuru sizi %d dakika hapise attý.", OyuncuIsim(playerid), dakika);
		SunucuMesaji(oyuncuid, "Sebep: %s", sebep);

		new query[250 + MAX_PLAYER_NAME + MAX_PLAYER_NAME + 150];
		mysql_format(g_SQL, query, sizeof(query), "INSERT INTO `iccezalar` (`KarakterAdi`, `CezaSure`, `Sebep`, `Polis`, `yasaklanmatarihi`) VALUES ('%e', '%d', '%e', '%e', '%e')", OyuncuIsim(oyuncuid), dakika, sebep, OyuncuIsim(playerid), SQLTarih());
		mysql_query(g_SQL, query);
		new Cache:GetCache, hapseatmasayi;
		mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM oyuncular WHERE ID = '%d'", oyuncuData[playerid][oID]);
		GetCache = mysql_query(g_SQL, query);
		cache_get_value_name_int(0, "HapseAtma", hapseatmasayi);
		cache_delete(GetCache);
		hapseatmasayi++;
		mysql_format(g_SQL, query, sizeof(query), "UPDATE oyuncular SET HapseAtma = '%d' WHERE ID = '%d'", hapseatmasayi, oyuncuData[playerid][oID]);
		mysql_query(g_SQL, query);
		new Cache:GetBCache, icsicilsayi;
		mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM oyuncular WHERE ID = '%d'", oyuncuData[oyuncuid][oID]);
		GetBCache = mysql_query(g_SQL, query);
		cache_get_value_name_int(0, "ICSicilSayi", icsicilsayi);
		cache_delete(GetBCache);
		icsicilsayi++;
		mysql_format(g_SQL, query, sizeof(query), "UPDATE oyuncular SET ICSicilSayi = '%d' WHERE ID = '%d'", icsicilsayi, oyuncuData[oyuncuid][oID]);
		mysql_query(g_SQL, query);
		oyuncuData[oyuncuid][oHapisSure][1] = dakika;
		ICHapiseAt(oyuncuid, Tutuklama_Yakin(playerid));
		return 1;
	}

	CMD:tyarat(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 7) return YetkinizYok(playerid);

		static id = -1;
		id = TutuklamaNoktasi_Yarat(playerid);

		if(id < 0)
			return hataMesaji(playerid, "Sunucu maksimum tutuklama noktasý limitine ulaþtýðý için yeni tutuklama noktasý eklenemiyor.");

		SunucuMesaji(playerid, "Tutuklama noktasý yaratýldý. (ID: %d)", id);
		return 1;
	}

	CMD:tkaldir(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 7) return YetkinizYok(playerid);

		static id;
		if(sscanf(params, "d", id))
			return kullanimMesaji(playerid, "/tkaldir [tutuklama noktasý id]");

		if((id < 0 || id >= MAKSIMUM_TUTUKLAMANOKTASI) || !TutuklamaNoktasi[id][tKullanimda])
			return hataMesaji(playerid, "Geçersiz tutuklama noktasý.");

		TutuklamaNoktasi_Kaldir(id);
		SunucuMesaji(playerid, "Tutuklama noktasý kaldýrýldý. (ID: %d)", id);
		return 1;
	}

	CMD:tduzenle(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 7) return YetkinizYok(playerid);

		static id, type[24], string[128];
		if(sscanf(params, "ds[24]S()[128]", id, type, string))
		{
			kullanimMesaji(playerid, "/tduzenle [id] [isim]");
			SendClientMessage(playerid, RENK_SARI, "[ÝSÝMLER]:{FFFFFF} lokasyon, hapis");
			return 1;
		}
		if((id < 0 || id >= MAKSIMUM_TUTUKLAMANOKTASI) || !TutuklamaNoktasi[id][tKullanimda])
			return hataMesaji(playerid, "Geçersiz tutuklama noktasý.");

		if(!strcmp(type, "lokasyon", true))
		{
			GetPlayerPos(playerid, TutuklamaNoktasi[id][tPos][0], TutuklamaNoktasi[id][tPos][1], TutuklamaNoktasi[id][tPos][2]);
			GetPlayerFacingAngle(playerid, TutuklamaNoktasi[id][tPos][3]);
			TutuklamaNoktasi[id][tInterior] = GetPlayerInterior(playerid);
			TutuklamaNoktasi[id][tWorld] = GetPlayerVirtualWorld(playerid);

			TutuklamaNoktasi_Yenile(id);
			TutuklamaNoktasi_Kaydet(id);
			YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s adlý yönetici bir tutuklama noktasýnýn yerini deðiþtirdi. (ID: %d)", oyuncuData[playerid][oAdminNick], id);
		}
		else if(!strcmp(type, "hapis", true))
		{
			GetPlayerPos(playerid, TutuklamaNoktasi[id][hPos][0], TutuklamaNoktasi[id][hPos][1], TutuklamaNoktasi[id][hPos][2]);
			GetPlayerFacingAngle(playerid, TutuklamaNoktasi[id][hPos][3]);
			TutuklamaNoktasi[id][hInterior] = GetPlayerInterior(playerid);
			TutuklamaNoktasi[id][hWorld] = GetPlayerVirtualWorld(playerid);

			TutuklamaNoktasi_Yenile(id);
			TutuklamaNoktasi_Kaydet(id);
			YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s adlý yönetici tutuklama noktasýnýn hapis interiorunu deðiþtirdi. (ID: %d)", oyuncuData[playerid][oAdminNick], id);
		}
		return 1;
	}

	CMD:atmyarat(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 5) return YetkinizYok(playerid);
		if(GetPlayerVirtualWorld(playerid) > 0 || GetPlayerInterior(playerid) > 0) return hataMesaji(playerid, "Interior ve farklý dünyalara ATM kurulamaz.");

		static id = -1;
		id = ATM_Yarat(playerid);

		if(id < 0) return hataMesaji(playerid, "Sunucu ATM limitine ulaþtýðý için yeni ATM yaratýlamýyor.");

		SunucuMesaji(playerid, "Yeni bir ATM yarattýn. (AID: %d)", id);
		return 1;
	}

	CMD:atmduzenle(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 5) return YetkinizYok(playerid);

		static id, type[24], string[128];
		if(sscanf(params, "ds[24]S()[128]", id, type, string))
		{
			kullanimMesaji(playerid, "/atmduzenle [id] [isim]");
			SendClientMessage(playerid, RENK_SARI, "[ÝSÝMLER]:{FFFFFF} lokasyon, pos, para");
			return 1;
		}
		if((id < 0 || id >= MAKSIMUM_ATM) || !ATMBilgi[id][atmKullanimda])
			return hataMesaji(playerid, "Geçersiz ID girdiniz.");

		if(!strcmp(type, "lokasyon", true))
		{
			static Float:x, Float:y, Float:z;
			GetPlayerPos(playerid, x, y, z);

			ATMBilgi[id][atmPos][0] = x;
			ATMBilgi[id][atmPos][1] = y;
			ATMBilgi[id][atmPos][2] = z;
			ATMBilgi[id][atmInterior] = GetPlayerInterior(playerid);
			ATMBilgi[id][atmWorld] = GetPlayerVirtualWorld(playerid);

			ATM_Yenile(id);
			ATM_Kaydet(id);
			YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s adlý yönetici bir atm'nin yerini deðiþtirdi. (ID: %d)", oyuncuData[playerid][oAdminNick], id);
		}
		else if(!strcmp(type, "pos", true))
		{
			EditDynamicObject(playerid, ATMBilgi[id][atmObje]);
			oyuncuData[playerid][oATMDuzenliyor] = id;
		}
		return 1;
	}

	CMD:atmsil(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 5) return YetkinizYok(playerid);

		static id;
		if(sscanf(params, "d", id)) return kullanimMesaji(playerid, "/atmsil [atm id]");

		if((id < 0 || id >= MAKSIMUM_ATM) || !ATMBilgi[id][atmKullanimda]) return hataMesaji(playerid, "Girilen ATM geçersiz.");

		ATM_Sil(id);
		SunucuMesaji(playerid, "ATM baþarýyla silindi. (ID: %d)", id);
		return 1;
	}

	CMD:banka(playerid, params[])
	{
		static id;
		if((id = Oyuncu_Binada(playerid)) != -1) {
			if(BinaBilgi[id][binaTur] != 1) return hataMesaji(playerid, "Bankada deðilsin.");
			if(oyuncuData[playerid][oHesapNumarasi] == 0) return hataMesaji(playerid, "Banka hesabýn yok.");

			static baslik[128];
			format(baslik, sizeof(baslik), "{FFFFFF}%s", BinaBilgi[id][bIsim]);
			DialogGoster(playerid, DIALOG_BANKA, DIALOG_STYLE_TABLIST_HEADERS, baslik, "Ýþlem\nHesap Detaylarý\nPara Çek\nPara Yatýr\nHavale\nMevduat Hesabý", "Seç", "Iptal");
			return true;
		}
		hataMesaji(playerid, "Bankada deðilsin.");
		return 1;
	}

	CMD:atm(playerid, params[])
	{
		if(ATM_Yakin(playerid) == -1) return hataMesaji(playerid, "ATM makinesinin yanýnda deðilsin.");
		if(oyuncuData[playerid][oHesapNumarasi] == 0) return hataMesaji(playerid, "Banka hesabýn yok.");
		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu komut araçta kullanýlamaz.");
		AnimOynat(playerid, "BAR", "Barcustom_get", 4.0, 0, 1, 0, 0, 0, 1);
		oyuncuData[playerid][pATMMenu] = true;
		for(new i ; i < sizeof(ATMTextDraw); i ++){PlayerTextDrawHide(playerid, ATMTextDraw[i][playerid]), PlayerTextDrawShow(playerid, ATMTextDraw[i][playerid]);}
			SelectTextDraw(playerid, 0x000000FF);
	//DialogGoster(playerid, DIALOG_BANKA, DIALOG_STYLE_TABLIST_HEADERS, "ATM", "Ýþlem\nHesap Detaylarý\nPara Çek\nPara Yatýr\nHavale", "Seç", "Iptal");
		return 1;
	}

	CMD:binayarat(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 5) return YetkinizYok(playerid);
		static isim[32], model, id;
		if(sscanf(params, "ds[32]", model, isim)) return kullanimMesaji(playerid, "/binayarat [model] [isim] - 'Model 0 > TP Noktasý'");
		if(model < 0 || model > 17) return hataMesaji(playerid, "Geçersiz model! (1-17)");

		id = Bina_Yarat(playerid, isim, model);
		if(id < 0) return hataMesaji(playerid, "Sunucu bina limitine ulaþtýðý için yeni bina yaratýlamýyor!");

		SunucuMesaji(playerid, "Yeni bir bina yarattýn. (ID: %d | Ýsim: %s)", id, isim);
		return 1;
	}

	CMD:binasil(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 7) return YetkinizYok(playerid);
		static id;
		if(sscanf(params, "d", id)) return kullanimMesaji(playerid, "/binasil [bina id]");
		if((id < 0 || id >= MAKSIMUM_BINA) || !BinaBilgi[id][bKullanimda]) return hataMesaji(playerid, "Geçersiz bina belirtildi!");

		Bina_Sil(id);
		SunucuMesaji(playerid, "Bina %d baþarýyla silindi!", id);
		return 1;
	}

	CMD:binaduzenle(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 5) return YetkinizYok(playerid);
		static id, type[24], string[128];
		if(sscanf(params, "ds[24]S()[128]", id, type, string))
		{
			kullanimMesaji(playerid, "/binaduzenle [id] [isim]");
			SendClientMessage(playerid, RENK_SARI, "[ÝSÝMLER]:{FFFFFF} yer, interior, isim, sanaldunya, durum, tur, model");
			return 1;
		}
		if((id < 0 || id >= MAKSIMUM_BINA) || !BinaBilgi[id][bKullanimda])
			return hataMesaji(playerid, "Geçersiz bina!");

		if(!strcmp(type, "yer", true))
		{
			GetPlayerPos(playerid, BinaBilgi[id][bPos][0], BinaBilgi[id][bPos][1], BinaBilgi[id][bPos][2]);
			GetPlayerFacingAngle(playerid, BinaBilgi[id][bPos][3]);

			BinaBilgi[id][bDisInt] = GetPlayerInterior(playerid);
			BinaBilgi[id][bDisVW] = GetPlayerVirtualWorld(playerid);

			Bina_Yenile(id);
			Bina_Kaydet(id);

			YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s bir binanýn yerini deðiþtirdi. (ID: %d)", oyuncuData[playerid][oAdminNick], id);
		}
		else if(!strcmp(type, "interior", true))
		{
			GetPlayerPos(playerid, BinaBilgi[id][bIPos][0], BinaBilgi[id][bIPos][1], BinaBilgi[id][bIPos][2]);
			GetPlayerFacingAngle(playerid, BinaBilgi[id][bIPos][3]);

			BinaBilgi[id][bInterior] = GetPlayerInterior(playerid);
			SetPlayerVirtualWorld(playerid, BinaBilgi[id][bVW]);

			Bina_Kaydet(id);
			YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s bir binanýn interiorunu deðiþtirdi. (ID: %d)", oyuncuData[playerid][oAdminNick], id);
		}
		else if(!strcmp(type, "sanaldunya", true))
		{
			static worldid;

			if(sscanf(string, "d", worldid))
				return kullanimMesaji(playerid, "/binaduzenle [id] [sanaldunya] [sanal dünya]");

			BinaBilgi[id][bVW] = worldid;
			Bina_Kaydet(id);
			YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s bir binanýn sanal dünyasýný(VW'sini) deðiþtirdi. (ID: %d | SD: %d)", oyuncuData[playerid][oAdminNick], id, worldid);
		}
		else if(!strcmp(type, "isim", true))
		{
			static isim[32];

			if(sscanf(string, "s[32]", isim))
				return kullanimMesaji(playerid, "/binaduzenle [id] [isim] [yeni isim]");

			format(BinaBilgi[id][bIsim], 32, isim);

			Bina_Yenile(id);
			Bina_Kaydet(id);

			YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s bir binanýn ismini deðiþtirdi. (ID: %d | Ýsim: \"%s\")", oyuncuData[playerid][oAdminNick], id, isim);
		}
		else if(!strcmp(type, "durum", true))
		{
			static durum;

			if(sscanf(string, "d", durum))
				return kullanimMesaji(playerid, "/binaduzenle [id] [durum] [yeni durum]");

			if(durum < 1 || durum > 3)
				return hataMesaji(playerid, "Geçersiz durum! (1-3)");

			BinaBilgi[id][binaDurum] = durum;
			Bina_Yenile(id);
			Bina_Kaydet(id);

			YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s bir binanýn durumunu deðiþtirdi. (ID: %d | Durum: %d)", oyuncuData[playerid][oAdminNick], id, durum);
		}
		else if(!strcmp(type, "tur", true))
		{
			static tur;
			if(sscanf(string, "d", tur)) {
				kullanimMesaji(playerid, "/binaduzenle [id] [tur] [yeni tür]");
				SCM_Ex(playerid, RENK_SARI, "[TURLER]: {FFFFFF}0: %s - 1: %s - 2: %s - 3: %s - 4: %s - 5: %s", binaturisim(0), binaturisim(1), binaturisim(2), binaturisim(3), binaturisim(4), binaturisim(5));
				SCM_Ex(playerid, RENK_SARI, "[TURLER]: {FFFFFF}6: %s", binaturisim(6));
				return 1;
			}
			if(tur < 0 || tur > 6)
				return hataMesaji(playerid, "Geçersiz bina türü! (0-6)");

			BinaBilgi[id][binaTur] = tur;
			Bina_Yenile(id);
			Bina_Kaydet(id);
			YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s bir binanýn türünü deðiþtirdi. (ID: %d | Tür: %s)", oyuncuData[playerid][oAdminNick], id, binaturisim(tur));
		}
		else if(!strcmp(type, "model", true))
		{
			static model;
			if(sscanf(string, "d", model))
				return kullanimMesaji(playerid, "/binaduzenle [id] [model] [yeni model]");

			if(model < 1 || model > 17)
				return hataMesaji(playerid, "Geçersiz model! (1-17)");

			BinaBilgi[id][bModel] = model;
			Bina_Yenile(id);
			Bina_Kaydet(id);
			YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s bir binanýn modelini deðiþtirdi. (ID: %d | Model: %d)", oyuncuData[playerid][oAdminNick], id, model);
		}
		return 1;
	}

	CMD:akiraucret(playerid, params[])
	{
		static id,ucret;
		if(sscanf(params, "dd", id, ucret)) return kullanimMesaji(playerid, "/akiraucret [araç id] [ücret]");
		if(!IsValidVehicle(id) || Arac_IDBul(id) == -1) return hataMesaji(playerid, "Geçersiz araç.");
		if(AracBilgi[id][aracFirma] != oyuncuData[playerid][oFirma]) return hataMesaji(playerid, "Bu araç sizin firmanýza ait deðil.");
		if(oyuncuData[playerid][oFirmarutbe] != 10) return hataMesaji(playerid, "Firma sahibi deðilsiniz.");
		if(ucret < 150 || ucret > 3500) return hataMesaji(playerid, "Kira ücreti en az 150, en fazla 3500 olabilir.");

		AracBilgi[id][aracKiralik] = 1;
		AracBilgi[id][aKiraUcret] = ucret;
		Arac_Kaydet(id);

		SunucuMesaji(playerid, "%s marka aracýn kira ücretini %s olarak ayarladýnýz.", AracModel(GetVehicleModel(id)), NumaraFormati(ucret));
		return 1;
	}

	alias:acek("getcar");

	CMD:apark(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 1) return hataMesaji(playerid, "Bu komutu sadece adminler kullanabilir.");
		if(!IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Herhangi bir aracýn içerisinde deðilsin.");

		static aracidsi;
		aracidsi = GetPlayerVehicleID(playerid);
		new aracid;
		if((aracid = Arac_IDBul(aracidsi)) != -1)
		{
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return hataMesaji(playerid, "Sürücü koltuðunda deðilsin.");

			GetPlayerPos(playerid, AracBilgi[aracid][aracPos][0], AracBilgi[aracid][aracPos][1], AracBilgi[aracid][aracPos][2]);

			new Float:araccani, aracsqlid = AracBilgi[aracid][aracID];
			GetVehicleHealth(AracBilgi[aracid][aracYarat], araccani);
			GetVehicleZAngle(AracBilgi[aracid][aracYarat], AracBilgi[aracid][aracPos][3]);

			Arac_Kaydet(aracid); ModifiyeKaydet(playerid, aracid);

			new aracgg = AracBilgi[aracid][aracYarat];

			Iter_Remove(Araclar, aracgg);
			DestroyVehicle(aracgg);
			AracVeriSifirla(aracgg);

			static spawnid;
			spawnid = AracSpawnla(aracsqlid);
			foreach(new i : Player)	if(oyuncuData[i][oAdmin] > 0 && oyuncuData[i][oAdminDurum] == true)
			{
				SCM_Ex(i, RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s bir aracýn lokasyonunu deðiþtirdi. (Araç ID: %d - Varsa, Yeni Akarma ID: %d)", oyuncuData[playerid][oAdminNick], aracgg, spawnid);
			}
			if(spawnid >= 2000) return hataMesaji(playerid, "Sunucu max araç limitine ulaþtýðý için araç yeniden spawnlanamadý.");
			PutPlayerInVehicle(playerid, spawnid, 0);
		}
		else hataMesaji(playerid, "Araç ID deðeri, iterator deðeri ile eþleþmiyor!");
		return 1;
	}

	CMD:acek(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 1) return YetkinizYok(playerid);
		static id;
		if(sscanf(params, "d", id)) return kullanimMesaji(playerid, "/acek [araç id]");
		if(!IsValidVehicle(id) || Arac_IDBul(id) == -1) return hataMesaji(playerid, "Geçersiz araç.");
		GetPlayerPos(playerid, oyuncuData[playerid][oPos][0], oyuncuData[playerid][oPos][2], oyuncuData[playerid][oPos][3]);
		SetVehiclePos(id, oyuncuData[playerid][oPos][0], oyuncuData[playerid][oPos][2] + 2, oyuncuData[playerid][oPos][3]);
		SetVehicleVirtualWorld(id, GetPlayerVirtualWorld(playerid));
		LinkVehicleToInterior(id, GetPlayerInterior(playerid));
		SunucuMesaji(playerid, "Araç %d yanýna çekildi.", id);
		return 1;
	}

	CMD:aspawn(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 1) return YetkinizYok(playerid);
		static id;
		if(sscanf(params, "d", id)) return kullanimMesaji(playerid, "/aspawn [araç id]");
		if(!IsValidVehicle(id) || Arac_IDBul(id) == -1) return hataMesaji(playerid, "Geçersiz araç.");

		SunucuMesaji(playerid, "Araç %d spawnlandý.", id);
		id = Arac_IDBul(id);
		Arac_Spawn(id);
		return 1;
	}

	CMD:frespawn(playerid, params[])
	{
		if(oyuncuData[playerid][oBirlik] == -1) return hataMesaji(playerid, "Birliðin yok!");
		if(BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikMaksRutbe] - 1 > oyuncuData[playerid][oBirlikRutbe]) return hataMesaji(playerid, "Yeterli rütbeye sahip deðilsin.");

		static sayi;
		sayi = 0;
		foreach(new i : Araclar) if(AracBilgi[i][aracBirlik] == BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikID])
		{
			if(SurucuBul(i) == INVALID_PLAYER_ID)
			{
				ASpawn(AracBilgi[i][aracYarat]);
				sayi++;
			}
		}
		if(sayi == 0) return hataMesaji(playerid, "Birliðine ait spawnlanabilecek araç bulunmuyor.");

		SunucuMesaji(playerid, "%d adet araç spawnlandý.", sayi);
		BirlikMesaji(oyuncuData[playerid][oBirlik], RENK_OLUSUM, "[BIRLIK] %s %s birlik araçlarýný respawnladý, %d adet araç yeniden çýkarýldý.", OyuncuRutbeAdi(playerid), OyuncuIsim(playerid), sayi);
		return 1;
	}

	alias:araclarispawnla("rac");
	CMD:araclarispawnla(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 4) return hataMesaji(playerid, "Bu komutu kullanma yetkin yok!");

		if(aracrespawn == true) {
			SCM_ExAll(RENK_YETKILI, "[YETKÝLÝ ÝÞLEM]: {FFFFFF}%s adlý yetkili araç respawn iþlemini durdurdu.", oyuncuData[playerid][oAdminNick]);
			KillTimer(arespawntimer);
			aracrespawn = false;
			return 1;
		}
		static saniye;
		if(sscanf(params, "d", saniye)) return kullanimMesaji(playerid, "/araclarispawnla [saniye]");
		if(saniye < 1 || saniye > 120) return hataMesaji(playerid, "Saniye en az 1, en fazla 120 olabilir!");

		if(aracrespawn == false) {
			SCM_ExAll(RENK_YETKILI, "[YETKÝLÝ ÝÞLEM]: {FFFFFF}%s adlý yetkili araç respawn iþlemini baþlattý %d saniye sonra araçlar respawnlanacak.", oyuncuData[playerid][oAdminNick], saniye);
			arespawntimer = SetTimerEx("kullanilmayanaraclarispawnla", saniye * 1000, 0, "d", playerid);
			aracrespawn = true;
		}
		return 1;
	}

	CMD:atamir(playerid)
	{
		new id = TamirhaneBul(playerid);
		if(id < 0)return hataMesaji(playerid, "Tamirhane giriþ noktasýna yakýn deðilsiniz.");
		if(GetPlayerVehicleID(playerid) == 0) return hataMesaji(playerid, "Tamirciye girebilmek için araçta olmalýsýnýz.");
		if(tamirciData[id][tamiricPos][0] == 0 && tamirciData[id][tamiricPos][1] == 0 && tamirciData[id][tamiricPos][2] == 0) return hataMesaji(playerid, "Bu tamirhane henüz ayarlanmamýþ.");
		if(oyuncuData[playerid][oPara] < tamirciData[id][tamirFiyat]) return hataMesaji(playerid, "Buraya girebilmek için %s paraya ihtiyacýn var.", NumaraFormati(tamirciData[id][tamirFiyat]));
		if(GetEngineStatus(GetPlayerVehicleID(playerid))) return hataMesaji(playerid, "Tamirciye girebilmek için motoru kapatmanýz gerekiyor.");
		if(oyuncuData[playerid][oMotorCalistir]) return hataMesaji(playerid, "Motoru çalýþtýrýrken tamirciye giremezsiniz.");
		if(GetPVarInt(playerid, "Tamircideyim") > 0) return hataMesaji(playerid, "Zaten tamircidesiniz.");
		SetPVarInt(playerid, "Tamircideyim", 1);
		new vehicleid = GetPlayerVehicleID(playerid);
		SetVehiclePos(vehicleid, tamirciData[id][tamiricPos][0], tamirciData[id][tamiricPos][1], tamirciData[id][tamiricPos][2]);
		SetVehicleZAngle(vehicleid, tamirciData[id][tamiricPos][3]);
		PutPlayerInVehicle(playerid, vehicleid, 0);
		TogglePlayerControllable(playerid, false);
		BilgiText(playerid, "~g~~h~~h~Araç tamir ediliyor...", 6 * 1000);
		tamirTimer[playerid] = SetTimerEx("TamirhaneTimer", 7 * 1000, false, "ddd", playerid, vehicleid, id);
		return 1;
	}


	CMD:atamiret(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 1) return YetkinizYok(playerid);
		if(IsPlayerInAnyVehicle(playerid) && isnull(params)) {
			AracTamirEt(GetPlayerVehicleID(playerid));
			SunucuMesaji(playerid, "Araç %d tamir edildi.", GetPlayerVehicleID(playerid));
		}
		else {
			static id;
			if(sscanf(params, "d", id))
				return kullanimMesaji(playerid, "/atamiret [araç id]");

			if(!IsValidVehicle(id) || Arac_IDBul(id) == -1)
				return hataMesaji(playerid, "Geçersiz araç.");

			AracTamirEt(id);
			SunucuMesaji(playerid, "Araç %d tamir edildi.", id);
		}
		return 1;
	}

	stock FiyatIndexCek(model)
	{
		new id = -1;
		for(new i = 0; i < sizeof(SatilikAraclar); i++)
		{
			if(SatilikAraclar[i][0] == model)
			{
				id = i;
				break;
			}
		}
		return id;
	}

	CMD:offaracver(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 7) return YetkinizYok(playerid);
		new id = Iter_Free(Araclar);
		if(id < 0) return hataMesaji(playerid, "Araç kapasitesi dolu.");
		static isim[34], model[32], renk1, renk2;
		if(sscanf(params, "s[34]s[32]I(-1)I(-1)", isim, model, renk1, renk2)) return kullanimMesaji(playerid, "/offaracver [isim] [model id/isim] [renk 1] [renk 2]");
		new oyuncuid = AktiflikKontrol(isim);
		if(IsPlayerConnected(oyuncuid)) return hataMesaji(playerid, "Girilen oyuncu oyunda, /aracver komutunu kullan.");		
		if((model[0] = GetVehicleModelByName(model)) == 0) return hataMesaji(playerid, "Geçersiz model.");
		new query[192], Cache:cache_Get, rows, oSqlId;
		mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM oyuncular WHERE isim = '%e'", isim);
		cache_Get = mysql_query(g_SQL, query);
		cache_get_row_count(rows);
		if(!rows){
			return hataMesaji(playerid, "Oyuncu bulunamadý."), cache_delete(cache_Get);
		}
		else{
			cache_get_value_name_int(0, "ID", oSqlId);
		}
		cache_delete(cache_Get);
		GetPlayerPos(playerid, oyuncuData[playerid][oPos][0], oyuncuData[playerid][oPos][1], oyuncuData[playerid][oPos][2]);
		GetPlayerFacingAngle(playerid, oyuncuData[playerid][oPos][3]);
		new inx = FiyatIndexCek(model[0]);
		if(inx == -1)
		{
			SunucuMesaji(playerid, "Araç galeride bulunmadýðý için vergi ödemeyecek (DÝKKAT).");
			Arac_Yarat(oSqlId, model[0], oyuncuData[playerid][oPos][0], oyuncuData[playerid][oPos][1], oyuncuData[playerid][oPos][2], oyuncuData[playerid][oPos][3], renk1, renk2, 0);
		}
		else
		{
			Arac_Yarat(oSqlId, model[0], oyuncuData[playerid][oPos][0], oyuncuData[playerid][oPos][1], oyuncuData[playerid][oPos][2], oyuncuData[playerid][oPos][3], renk1, renk2, SatilikAraclar[inx][1]);
		}
		return 1;
	}

	CMD:aracver(playerid, params[])
	{
		new id = Iter_Free(Araclar);
		if(oyuncuData[playerid][oAdmin] < 7) return YetkinizYok(playerid);
		if(id < 0) return hataMesaji(playerid, "Sunucunun araç kapasitesi doldu.");
		static oyuncuid, model[32], renk1, renk2;
		if(sscanf(params, "us[32]I(-1)I(-1)", oyuncuid, model, renk1, renk2)) return kullanimMesaji(playerid, "/aracver [oyuncu id/isim] [model id/isim] [renk 1] [renk 2]");

		if(!IsPlayerConnected(oyuncuid)) return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");
		if((model[0] = GetVehicleModelByName(model)) == 0) return hataMesaji(playerid, "Geçersiz model.");

		GetPlayerPos(playerid, oyuncuData[oyuncuid][oPos][0], oyuncuData[oyuncuid][oPos][1], oyuncuData[oyuncuid][oPos][2]);
		GetPlayerFacingAngle(playerid, oyuncuData[oyuncuid][oPos][3]);

		new inx = FiyatIndexCek(model[0]);
		if(inx == -1)
		{
			SunucuMesaji(playerid, "Araç galeride bulunmadýðý için vergi ödemeyecek (DÝKKAT).");
			Arac_Yarat(oyuncuData[oyuncuid][oID], model[0], oyuncuData[oyuncuid][oPos][0], oyuncuData[oyuncuid][oPos][1], oyuncuData[oyuncuid][oPos][2], oyuncuData[oyuncuid][oPos][3], renk1, renk2, 0);
		}
		else
		{
			Arac_Yarat(oyuncuData[oyuncuid][oID], model[0], oyuncuData[oyuncuid][oPos][0], oyuncuData[oyuncuid][oPos][1], oyuncuData[oyuncuid][oPos][2], oyuncuData[oyuncuid][oPos][3], renk1, renk2, SatilikAraclar[inx][1]);
		}

		SetPlayerPos(playerid, oyuncuData[oyuncuid][oPos][0], oyuncuData[oyuncuid][oPos][1], oyuncuData[oyuncuid][oPos][2] + 2);
		SunucuMesaji(oyuncuid, "%s adlý yönetici sana %s model araç verdi. (Kontrol için /araclarim)", oyuncuData[playerid][oAdminNick], GetVehicleName(model[0]));
		Log_Kaydet("loglar/admin_log.txt", "[%s] %s, %s adlý kiþiye %s model araç verdi.", Tarih(), oyuncuData[playerid][oAdminNick], OyuncuIsim(oyuncuid), GetVehicleName(model[0]));
		return 1;
	}

	CMD:aracyarat(playerid, params[])
	{
		new id = Iter_Free(Araclar);
		if(oyuncuData[playerid][oAdmin] < 5) return YetkinizYok(playerid);
		if(id < 0) return hataMesaji(playerid, "Sunucunun araç kapasitesi doldu.");
		static model[32], renk1, renk2;
		if(sscanf(params, "s[32]I(-1)I(-1)", model, renk1, renk2)) return kullanimMesaji(playerid, "/aracyarat [model id/isim] [renk 1] [renk 2]");
		if((model[0] = GetVehicleModelByName(model)) == 0) return hataMesaji(playerid, "Geçersiz model.");

		GetPlayerPos(playerid, oyuncuData[playerid][oPos][0], oyuncuData[playerid][oPos][1], oyuncuData[playerid][oPos][2]);
		GetPlayerFacingAngle(playerid, oyuncuData[playerid][oPos][3]);

		new inx = FiyatIndexCek(model[0]);

		if(inx == -1)
		{
			SunucuMesaji(playerid, "Araç galeride bulunmadýðý için vergi ödemeyecek (DÝKKAT).");
			Arac_Yarat(0, model[0], oyuncuData[playerid][oPos][0], oyuncuData[playerid][oPos][1], oyuncuData[playerid][oPos][2], oyuncuData[playerid][oPos][3], renk1, renk2, 0);
		}
		else
		{
			Arac_Yarat(0, model[0], oyuncuData[playerid][oPos][0], oyuncuData[playerid][oPos][1], oyuncuData[playerid][oPos][2], oyuncuData[playerid][oPos][3], renk1, renk2, SatilikAraclar[inx][1]);
		}
		if(id < 0) return hataMesaji(playerid, "Sunucu dinamik araç limitine ulaþtýðý için yeni araç yaratamýyorsunuz.");

		SetPlayerPos(playerid, oyuncuData[playerid][oPos][0], oyuncuData[playerid][oPos][1], oyuncuData[playerid][oPos][2] + 2);
		return 1;
	}

	CMD:aracsil(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 7) return YetkinizYok(playerid);
		static id;
		if(sscanf(params, "d", id)) return kullanimMesaji(playerid, "/aracsil [araç id]");
		if(!Iter_Contains(Araclar, id)) return hataMesaji(playerid, "Belirtilen ID'de araç mevcut deðil.");

		Arac_Sil(Arac_IDBul(id));
		DestroyDynamicObject(HelikopterKamera[id]);
		SunucuMesaji(playerid, "Araç %d baþarýyla silindi!", id);
		return 1;
	}

	CMD:aracsakla(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 1) return YetkinizYok(playerid);
		static id;
		if(sscanf(params, "d", id)) return kullanimMesaji(playerid, "/aracsakla [araç id]");
		if(!Iter_Contains(Araclar, id)) return hataMesaji(playerid, "Belirtilen ID'de araç mevcut deðil.");

		Arac_Sakla(Arac_IDBul(id));
		DestroyDynamicObject(HelikopterKamera[id]);
		SunucuMesaji(playerid, "Araç %d baþarýyla saklandý!", id);
		return 1;
	}

	CMD:park(playerid, params[])
	{
		if(!IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Herhangi bir aracýn içerisinde deðilsin.");
		if(oyuncuData[playerid][oGiris] == false) return hataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oDonduruldu] > 0) return hataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oHapisSure][0] > 0 || oyuncuData[playerid][oHapisSure][1] > 0) return hataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
		if(IsPlayerInRangeOfPoint(playerid, 40.0, 1128.1166,-1470.7040,2.9713)) return hataMesaji(playerid, "Burada aracýnýzý park edemezsiniz.");
		if(IsPlayerInRangeOfPoint(playerid, 90.0, 166.2840,-1859.0889,6.1201) || IsPlayerInRangeOfPoint(playerid, 100.0, 169.9184,-1974.3496,5.2028)) return hataMesaji(playerid, "Burada aracýnýzý park edemezsiniz.");
		if(oyuncuData[playerid][oPara] < 300) return hataMesaji(playerid, "Park etmek için yeterli paranýz bulunmuyor. (300$)");
		Dialog_Show(playerid, arac_park, DIALOG_STYLE_MSGBOX, "Araç Park", "Aracýnýzý 300$ karþýlýðýnda park etmek istiyor musunuz?", "Evet", "Iptal");
		return 1;
	}

	CMD:sat(playerid, params[])
	{
		if(oyuncuData[playerid][oGiris] == false) return hataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oDonduruldu] > 0) return hataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oHapisSure][0] > 0 || oyuncuData[playerid][oHapisSure][1] > 0) return hataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
		//if(oyuncuData[playerid][oAdminDurum]) return hataMesaji(playerid, "Yönetici iþbaþýndayken bu komutu kullanamazsýn.");

		static oyuncuid, tip[24], ileti[128], bilgi[256];
		if(sscanf(params, "us[24]S()[128]", oyuncuid, tip, ileti))
		{
			kullanimMesaji(playerid, "/sat [oyuncu id] [seçim]");
			SendClientMessage(playerid, RENK_SARI, "[SEÇÝM]:{FFFFFF} arac, ev, isyeri");
			return 1;
		}
		if(!IsPlayerConnected(oyuncuid))
			return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");

		if(!YakinlikKontrol(playerid, oyuncuid, 5.0))
			return hataMesaji(playerid, "Girilen oyuncuya yakýn deðilsin.");

		if(oyuncuid == playerid)
			return hataMesaji(playerid, "Kendine satamazsýn.");

		if(!strcmp(tip, "arac", true))
		{
			static fiyat, aracid = -1;
			if(!IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu komut sadece araçta kullanýlabilir.");

			//new aracsatilmadurumu = Arac_PlakaCeza(AracBilgi[GetPlayerVehicleID(playerid)][aracPlaka]);
			//if(aracsatilmadurumu != 0) return satilmaHatasi(playerid, aracsatilmadurumu);

			if(sscanf(ileti, "d", fiyat))
				return kullanimMesaji(playerid, "/sat [oyuncu id] arac [fiyat]");

			if(fiyat < 1)
				return hataMesaji(playerid, "Fiyat en az $1 olmalýdýr.");
				
				aracid = Arac_IDBul(GetPlayerVehicleID(playerid));
				
			new aracsiniri, Cache:GetCache, rows, vquery[124],modelid;
			modelid = GetVehicleModel(aracid);
			switch(oyuncuData[oyuncuid][oVIP])
			{
			case 0: {
				if(modelid == 531 || modelid == 532 || modelid == 610) {aracsiniri = 8;}
				else {aracsiniri = 3;}
				}
			case 1: {
				if(modelid == 531 || modelid == 532 || modelid == 610) {aracsiniri = 13;}
				else {aracsiniri = 10;}
				}
			}
			if(modelid == 510 || modelid == 509 || modelid == 481) return hataMesaji(playerid, "Bisikletler satýlamaz.");
			mysql_format(g_SQL, vquery, sizeof(vquery), "SELECT * FROM araclar WHERE aracSahip = '%d' AND aracModel != '531' AND aracModel != '532' AND aracModel != '610'", oyuncuData[oyuncuid][oID]);
			GetCache = mysql_query(g_SQL, vquery);
			cache_get_row_count(rows);
			if(rows >= aracsiniri) return hataMesaji(playerid, "Oyuncu araç sýnýrýna ulaþmýþ."), cache_delete(GetCache);
			cache_delete(GetCache);

			if(GetPVarInt(oyuncuid, "dialog") != -1)
				return hataMesaji(playerid, "Girilen oyuncuya þu anda satýþ önerisi verilemez, diyalogu kapatmasýný bekleyin.");

			if(IsPlayerInAnyVehicle(oyuncuid))
				return hataMesaji(playerid, "Aracý satabilmen için oyuncunun araçta olmamasý gerekiyor.");

			if(GetVehicleModel(aracid) == 423 || GetVehicleModel(aracid) == 424 || GetVehicleModel(aracid) == 470 || GetVehicleModel(aracid) == 486 || GetVehicleModel(aracid) == 494 || GetVehicleModel(aracid) == 502 || GetVehicleModel(aracid) == 503 || GetVehicleModel(aracid) == 504 || GetVehicleModel(aracid) == 508 || GetVehicleModel(aracid) == 524 || GetVehicleModel(aracid) == 556 || GetVehicleModel(aracid) == 557 || GetVehicleModel(aracid) == 568 || GetVehicleModel(aracid) == 588)
				return hataMesaji(playerid, "Bu araç satýlamaz.");
			if(GetVehicleModel(aracid) == 424 || GetVehicleModel(aracid) == 434 || GetVehicleModel(aracid) == 457 || GetVehicleModel(aracid) == 460 || GetVehicleModel(aracid) == 495 || GetVehicleModel(aracid) == 522 || GetVehicleModel(aracid) == 409 || GetVehicleModel(aracid) == 441)
				return hataMesaji(playerid, "Bu araç satýlamaz.");

			if(AracBilgi[aracid][aracVergi] > 0) return hataMesaji(playerid, "Vergisi ödenmemiþ aracý satamazsýn.");
			for(new r = 0; r != MAKSIMUM_BAGAJ_SLOT; r ++)
			{
				if(AracBilgi[aracid][aracSlot][r] > 0)
				{
					return hataMesaji(playerid, "Aracýn içinde silah bulunuyor. Satamazsýnýz.");
				}
			}
			if(Arac_SahipKontrol(playerid, aracid)) {
				SetPVarInt(oyuncuid, "aracsatan", playerid);
				SetPVarInt(oyuncuid, "satilanarac", aracid);
				SetPVarInt(oyuncuid, "aracfiyat", fiyat);
				oyuncuData[playerid][oSatisYapiyor] = true;
				SunucuMesaji(playerid, "%s adlý kiþiye %s model aracýný %s fiyatýna satma önerisinde bulundunuz.", OyuncuIsim(oyuncuid), AracModel(AracBilgi[aracid][aracModel]), NumaraFormati(fiyat));
				format(bilgi, sizeof(bilgi), "%s adlý oyuncu sana %s model aracýný %s fiyatýna satmak istiyor.", OyuncuIsim(playerid), AracModel(AracBilgi[aracid][aracModel]), NumaraFormati(fiyat));
				DialogGoster(oyuncuid, DIALOG_ARACSAT, DIALOG_STYLE_MSGBOX, "> Araç Satýþý", bilgi, "Onayla", "Reddet");
			}
			else hataMesaji(playerid, "Bu araç sana ait deðil.");
		}
		else if(!strcmp(tip, "ev", true))
		{
			static fiyat, evid = -1;
			evid = Ev_Yakin(playerid);
			if(evid == -1)
				return hataMesaji(playerid, "Bir eve yakýn deðilsin.");

			if(sscanf(ileti, "d", fiyat))
				return kullanimMesaji(playerid, "/sat [oyuncu id] ev [fiyat]");

			if(fiyat < 1)
				return hataMesaji(playerid, "Fiyat en az $1 olmalýdýr.");

			if(EvBilgi[evid][evDurum] == 4) return hataMesaji(playerid, "Vergi mühründeki evi satamazsýnýz.");
			new evsiniri, evsayisi = 0;
			switch(oyuncuData[oyuncuid][oVIP])
			{
				case 0: evsiniri = 3;
				case 1: evsiniri = 6;
			}
			for (new i = 0; i < MAKSIMUM_EV; i ++) if(Ev_SahipKontrol(oyuncuid, i)) {
				evsayisi++;
			}
			if(evsayisi >= evsiniri) return hataMesaji(playerid, "Bu oyuncu sahip olabileceði maksimum ev sýnýrýna ulaþmýþ.");

			if(GetPVarInt(oyuncuid, "dialog") != -1)
				return hataMesaji(playerid, "Girilen oyuncuya þu anda satýþ önerisi verilemez, diyalogu kapatmasýný bekleyin.");

			if(Ev_SahipKontrol(playerid, evid)) {
				new fiyatMax = EvBilgi[evid][evFiyat] + 50000;
				if(fiyat > fiyatMax) return hataMesaji(playerid, "Bir evi orijinal fiyatýndan en fazla $50.000 fazlasýna satabilirsiniz.");
				SetPVarInt(oyuncuid, "evsatan", playerid);
				SetPVarInt(oyuncuid, "satilanev", evid);
				SetPVarInt(oyuncuid, "evfiyat", fiyat);
				oyuncuData[playerid][oSatisYapiyor] = true;
				SunucuMesaji(playerid, "%s adlý kiþiye %s adresli evini %s fiyatýna satma önerisinde bulundunuz.", OyuncuIsim(oyuncuid), EvBilgi[evid][evAdres], NumaraFormati(fiyat));
				format(bilgi, sizeof(bilgi), "%s adlý oyuncu sana %s adresli evini %s fiyatýna satmak istiyor.", OyuncuIsim(playerid), EvBilgi[evid][evAdres], NumaraFormati(fiyat));
				DialogGoster(oyuncuid, DIALOG_EVSAT, DIALOG_STYLE_MSGBOX, "> Ev Satýþý", bilgi, "Onayla", "Reddet");
			}
			else hataMesaji(playerid, "Bu ev sana ait deðil.");
		}
		else if(!strcmp(tip, "isyeri", true))
		{
			static fiyat, id = -1;
			id = Isyeri_Yakin(playerid);
			if(id == -1)
				return hataMesaji(playerid, "Bir iþyerine yakýn deðilsin.");

			if(sscanf(ileti, "d", fiyat))
				return kullanimMesaji(playerid, "/sat [oyuncu id] [isyeri] [fiyat]");

			if(fiyat < 1)
				return hataMesaji(playerid, "Fiyat en az $1 olmalýdýr.");

			new isyerisiniri, isyerisayisi = 0;
			switch(oyuncuData[oyuncuid][oVIP])
			{
				case 0: isyerisiniri = 3;
				case 1: isyerisiniri = 6;
			}
			for (new i = 0; i < MAKSIMUM_ISYERI; i ++) if(Isyeri_SahipKontrol(oyuncuid, i)) {
				isyerisayisi++;
			}
			if(isyerisayisi >= isyerisiniri) return hataMesaji(playerid, "Bu oyuncu sahip olabileceði maksimum iþyeri sýnýrýna ulaþmýþ.");

			if(GetPVarInt(oyuncuid, "dialog") != -1)
				return hataMesaji(playerid, "Girilen oyuncuya þu anda satýþ önerisi verilemez, diyalogu kapatmasýný bekleyin.");

			if(Isyeri_SahipKontrol(playerid, id)) {
				if(IsyeriBilgi[id][isyeriVergi] > 0) return hataMesaji(playerid, "Satmadan önce iþyerinin vergisini ödemelisiniz.");
				new fiyatMax = IsyeriBilgi[id][isyeriFiyat] + 50000;
				if(fiyat > fiyatMax) return hataMesaji(playerid, "Bir iþyerini orijinal fiyatýndan en fazla $50.000 fazlasýna satabilirsiniz.");
				SetPVarInt(oyuncuid, "isyerisatan", playerid);
				SetPVarInt(oyuncuid, "satilanisyeri", id);
				SetPVarInt(oyuncuid, "isyerifiyat", fiyat);
				oyuncuData[playerid][oSatisYapiyor] = true;
				SunucuMesaji(playerid, "%s adlý kiþiye %s adlý iþyerini %s fiyatýna satma önerisinde bulundunuz.", OyuncuIsim(oyuncuid), IsyeriBilgi[id][isyeriAd], NumaraFormati(fiyat));
				format(bilgi, sizeof(bilgi), "%s adlý oyuncu sana %s adlý iþyerini %s fiyatýna satmak istiyor.", OyuncuIsim(playerid), IsyeriBilgi[id][isyeriAd], NumaraFormati(fiyat));
				DialogGoster(oyuncuid, DIALOG_ISYERISAT, DIALOG_STYLE_MSGBOX, "> Ýþyeri Satýþý", bilgi, "Onayla", "Reddet");
			}
			else hataMesaji(playerid, "Bu iþyeri sana ait deðil.");
		}
		return 1;
	}

	CMD:ymac(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 9) return YetkinizYok(playerid);
		new vehicleid = GetPlayerVehicleID(playerid);
		if(!IsEngineVehicle(vehicleid)) return hataMesaji(playerid, "Her hangi bir araçta deðilsin.");
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return hataMesaji(playerid, "Bu iþlemi yapabilmen için sürücü koltuðunda olman gerekir!");
		if(oyuncuData[playerid][oMotorCalistir]) return hataMesaji(playerid, "Zaten þu anda motor çalýþtýrýyorsunuz!");
		if(BenzinAliyor[playerid] != -1) return hataMesaji(playerid, "Benzin doldururken aracýn motorunu çalýþtýramazsýn.");

		switch(GetEngineStatus(vehicleid))
		{
			case false:
			{
				if((vehicleid = Arac_IDBul(vehicleid)) != -1) if(AracBilgi[vehicleid][aracBenzin] < 0) return hataMesaji(playerid, "Bu araçta benzin yok.");
				SetTimerEx("araccalistir", 100, false, "ii", playerid, GetPlayerVehicleID(playerid));
				cmd(playerid, 1, "anahtarý saat yönünde çevirir ve aracýn motorunu açmaya çalýþýr.");
			}
			case true:
			{
				SetEngineStatus(GetPlayerVehicleID(playerid), false);
				cmd(playerid, 1, "sað eliyle kontaðý çevirir ve aracýn motorunu kapatýr.");
				SetLightStatus(GetPlayerVehicleID(playerid), false);
			}
		}
		return 1;
	}

	CMD:evanahtarver(playerid, params[])
	{
		if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oHapisSure][0] > 0 || oyuncuData[playerid][oHapisSure][1] > 0) return hataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oDonduruldu] > 0) return hataMesaji(playerid, "Dondurulma etkisindeyken bu komutu kullanamazsýn.");

		static oyuncuid, evid;
		if(sscanf(params, "ud", oyuncuid, evid)) return kullanimMesaji(playerid, "/evanahtarver [oyuncu id/isim] [ev id]");
		if(!IsPlayerConnected(oyuncuid)) return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");
		if(!YakinlikKontrol(playerid, oyuncuid, 2.5)) return hataMesaji(playerid, "Girilen oyuncuya yakýn deðilsin.");
		if(oyuncuid == playerid) return hataMesaji(playerid, "Kendine anahtar veremezsin.");
		if(oyuncuData[oyuncuid][oYarali] == true) return hataMesaji(playerid, "Girilen kiþi yaralý, komut üzerinde kullanýlamaz.");
		if(oyuncuData[oyuncuid][oHapisSure][0] > 0 || oyuncuData[oyuncuid][oHapisSure][1] > 0) return hataMesaji(playerid, "Girilen kiþi hapiste, komut üzerinde kullanýlamaz.");
		if(oyuncuData[oyuncuid][oDonduruldu] > 0) return hataMesaji(playerid, "Girilen kiþi dondurulma etkisindeyken bu komutu kullanamazsýn.");
		if(oyuncuData[oyuncuid][oAdminDurum] == true) return hataMesaji(playerid, "Girilen kiþi yönetici iþbaþýnda, komutu üzerinde kullanamazsýn.");
		if(GetPVarInt(oyuncuid, "dialog") != -1) return hataMesaji(playerid, "Girilen oyuncuya þu anda satýþ önerisi verilemez, diyalogu kapatmasýný bekleyin.");
		if(evid < 0 || evid > MAKSIMUM_EV || !EvBilgi[evid][evKullanimda]) return hataMesaji(playerid, "Girilen evin sahibi deðilsin.");
		if(!Ev_SahipKontrol(playerid, evid)) return hataMesaji(playerid, "Girilen evin sahibi deðilsin.");
		if(EvBilgi[evid][evAnahtar] != 0) return hataMesaji(playerid, "Ev anahtarýný zaten vermiþsin. (/eanahtarsifirla)");

		static bilgi[144];
		SetPVarInt(oyuncuid, "evanahtaroneren", playerid);
		SetPVarInt(oyuncuid, "evanahtarid", evid);
		format(bilgi, sizeof(bilgi), "{FFFFFF}%s adlý oyuncu sana %d ID'li evinin anahtarýný vermeyi önerdi.", OyuncuIsim(playerid), evid);
		DialogGoster(oyuncuid, DIALOG_EVANAHTAR, DIALOG_STYLE_MSGBOX, "> Ev Anahtarý", bilgi, "Kabul", "Reddet");
		SunucuMesaji(playerid, "%s adlý kiþiye %d ID'li evinin anahtarýný vermeyi önerdin.", OyuncuIsim(oyuncuid), evid);
		return 1;
	}

	CMD:eanahtarsifirla(playerid, params[])
	{
		if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oHapisSure][0] > 0 || oyuncuData[playerid][oHapisSure][1] > 0) return hataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oDonduruldu] > 0) return hataMesaji(playerid, "Dondurulma etkisindeyken bu komutu kullanamazsýn.");

		static evid;
		if(sscanf(params, "d", evid)) return kullanimMesaji(playerid, "/eanahtarsifirla [ev id]");
		if(evid < 0 || evid > MAKSIMUM_EV || !EvBilgi[evid][evKullanimda]) return hataMesaji(playerid, "Girilen evin sahibi deðilsin.");
		if(!Ev_SahipKontrol(playerid, evid)) return hataMesaji(playerid, "Girilen evin sahibi deðilsin.");
		if(EvBilgi[evid][evAnahtar] == 0) return hataMesaji(playerid, "Ev anahtarýný kimseye vermedin.");

		EvBilgi[evid][evAnahtar] = 0;
		Ev_Kaydet(evid);
		SunucuMesaji(playerid, "Ev anahtarlarý sýfýrlandý.");
		return 1;
	}


	CMD:kilit(playerid, params[])
	{
		static id = -1;

		if((id = Ev_Yakin(playerid)) != -1)
		{
			if(Ev_SahipKontrol(playerid, id) || EvBilgi[id][evKiraci] == oyuncuData[playerid][oID] || EvBilgi[id][evAnahtar] == oyuncuData[playerid][oID]) {
				switch(EvBilgi[id][evDurum]) {
					case 1: {
						EvBilgi[id][evDurum] = 2;
						Ev_Yenile(id);
						cmd(playerid, 1, "evin kapýsýný kilitler.");
					}
					case 2: {
						EvBilgi[id][evDurum] = 1;
						Ev_Yenile(id);
						cmd(playerid, 1, "evin kapýsýnýn kilidini açar.");
					}
					default: hataMesaji(playerid, "Bu evin kilit durumunu deðiþtiremezsin.");
				}
			}
			else return hataMesaji(playerid, "Bu evin sahibi ya da kiracýsý deðilsin.");
		}
		else if((id = Isyeri_Yakin(playerid)) != -1)
		{
			if(Isyeri_SahipKontrol(playerid, id) || IsyeriBilgi[id][isyeriOrtak] == oyuncuData[playerid][oID] || oyuncuData[playerid][oAdmin] > 4)
			{
				switch(IsyeriBilgi[id][isyeriDurum]) {
					case 1: {
						IsyeriBilgi[id][isyeriDurum] = 2;
						Isyeri_Yenile(id);
						cmd(playerid, 1, "iþyeri kapýsýný kilitler.");
					}
					case 2: {
						IsyeriBilgi[id][isyeriDurum] = 1;
						Isyeri_Yenile(id);
						cmd(playerid, 1, "iþyeri kapýsýnýn kilidini açar.");
					}
					default: hataMesaji(playerid, "Bu iþyerinin kilit durumunu deðiþtiremezsin.");
				}
			}
			else hataMesaji(playerid, "Bu iþyerinin sahibi veya ortaðý deðilsin.");
		}
		else if((id = Oyuncu_Isyerinde(playerid)) != -1)
		{
			if(Isyeri_SahipKontrol(playerid, id) || IsyeriBilgi[id][isyeriOrtak] == oyuncuData[playerid][oID] || oyuncuData[playerid][oAdmin] > 4)
			{
				switch(IsyeriBilgi[id][isyeriDurum]) 
				{
					case 1: {
						IsyeriBilgi[id][isyeriDurum] = 2;
						Isyeri_Yenile(id);
						cmd(playerid, 1, "iþyeri kapýsýný kilitler.");
					}
					case 2: 
					{
						IsyeriBilgi[id][isyeriDurum] = 1;
						Isyeri_Yenile(id);
						cmd(playerid, 1, "iþyeri kapýsýnýn kilidini açar.");
					}
					default: hataMesaji(playerid, "Bu iþyerinin kilit durumunu deðiþtiremezsin.");
				}
			}
			else hataMesaji(playerid, "Bu iþyerinin sahibi veya ortaðý deðilsin.");
		}
		else if((id = Oyuncu_Evde(playerid)) != -1)
		{
			if(Ev_SahipKontrol(playerid, id) || EvBilgi[id][evKiraci] == oyuncuData[playerid][oID] || EvBilgi[id][evAnahtar] == oyuncuData[playerid][oID]) 
			{
				switch(EvBilgi[id][evDurum]) 
					{
					case 1: 
					{
						EvBilgi[id][evDurum] = 2;
						Ev_Yenile(id);
						cmd(playerid, 1, "evin kapýsýný kilitler.");
					}
					case 2: 
					{
						EvBilgi[id][evDurum] = 1;
						Ev_Yenile(id);
						cmd(playerid, 1, "evin kapýsýnýn kilidini açar.");
					}
					default: hataMesaji(playerid, "Bu evin kilit durumunu deðiþtiremezsin.");
				}
			}
			else return hataMesaji(playerid, "Bu evin sahibi ya da kiracýsý deðilsin.");
		}
		else hataMesaji(playerid, "Anahtarýna sahip olduðun herhangi bir araca, eve ya da iþ yerine yakýn deðilsin.");
		return 1;
	}

	CMD:siren(playerid, params[])
	{
		if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return hataMesaji(playerid, "Polis deðilsin.");
		if(!IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Herhangi bir aracýn içerisinde deðilsin.");
		if(oyuncuData[playerid][oHapisSure][0] > 0) return hataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oDonduruldu] > 0) return hataMesaji(playerid, "Dondurulma etkisindeyken bu komutu kullanamazsýn.");

		static id;
		id = GetPlayerVehicleID(playerid);
		if(!IsValidVehicle(id) || Arac_IDBul(id) == -1) return hataMesaji(playerid, "Geçersiz araç.");

		static sirenid;
		id = Arac_IDBul(id);
		switch (AracBilgi[id][sirenDurum])
		{
			case 0:
			{
				switch(AracBilgi[id][aracModel])
				{
					case 426: {
						if(sscanf(params, "d", sirenid))
							return kullanimMesaji(playerid, "/siren [id]");

						if(sirenid < 1 || sirenid > 4)
							return hataMesaji(playerid, "Geçersiz ID! (1-4)");

						switch(sirenid) {
							case 1: {
								AracBilgi[id][sirenObje] = CreateDynamicObject(19797,0.0,0.0,0,0.0,0.0,0.0);
								AttachDynamicObjectToVehicle(AracBilgi[id][sirenObje], GetPlayerVehicleID(playerid), -0.029052, 0.380187, 0.640010, 0.000000, 0.000000, 179.699996);
							}
							case 2: {
								AracBilgi[id][sirenObje] = CreateDynamicObject(19419,0.0,0.0,0,0.0,0.0,0.0);
								AttachDynamicObjectToVehicle(AracBilgi[id][sirenObje], GetPlayerVehicleID(playerid), 0.000000, -0.290016, 0.800012, 0.000000, 0.000000, 0.000000);
							}
							case 3: {
								AracBilgi[id][sirenObje] = CreateDynamicObject(19419,0.0,0.0,0,0.0,0.0,0.0);
								AttachDynamicObjectToVehicle(AracBilgi[id][sirenObje], GetPlayerVehicleID(playerid), -0.030029, -1.710021, 0.310005, 0.000000, 0.000000, 0.000000);
							}
							case 4: {
								AracBilgi[id][sirenObje] = CreateDynamicObject(18646,0.0,0.0,0,0.0,0.0,0.0);
								AttachDynamicObjectToVehicle(AracBilgi[id][sirenObje], GetPlayerVehicleID(playerid), -0.480468, 0.000000, 0.870014, 0.000000, 0.000000, 0.000000);
							}
						}
						AracBilgi[id][sirenDurum] = 1;
						SunucuMesaji(playerid, "Siren takýldý.");
					}

					case 445: {
						if(sscanf(params, "d", sirenid))
							return kullanimMesaji(playerid, "/siren [id]");

						if(sirenid < 1 || sirenid > 4)
							return hataMesaji(playerid, "Geçersiz ID! (1-4)");

						switch(sirenid) {
							case 1: {
								AracBilgi[id][sirenObje] = CreateDynamicObject(19797,0.0,0.0,0,0.0,0.0,0.0);
								AttachDynamicObjectToVehicle(AracBilgi[id][sirenObje], GetPlayerVehicleID(playerid), -0.029052, 0.380187, 0.640010, 0.000000, 0.000000, 179.699996);
							}
							case 2: {
								AracBilgi[id][sirenObje] = CreateDynamicObject(19419,0.0,0.0,0,0.0,0.0,0.0);
								AttachDynamicObjectToVehicle(AracBilgi[id][sirenObje], GetPlayerVehicleID(playerid), 0.000000, -0.290016, 0.800012, 0.000000, 0.000000, 0.000000);
							}
							case 3: {
								AracBilgi[id][sirenObje] = CreateDynamicObject(19419,0.0,0.0,0,0.0,0.0,0.0);
								AttachDynamicObjectToVehicle(AracBilgi[id][sirenObje], GetPlayerVehicleID(playerid), -0.030029, -1.710021, 0.310005, 0.000000, 0.000000, 0.000000);
							}
							case 4: {
								AracBilgi[id][sirenObje] = CreateDynamicObject(18646,0.0,0.0,0,0.0,0.0,0.0);
								AttachDynamicObjectToVehicle(AracBilgi[id][sirenObje], GetPlayerVehicleID(playerid), -0.480468, 0.000000, 0.870014, 0.000000, 0.000000, 0.000000);
							}
						}
						AracBilgi[id][sirenDurum] = 1;
						SunucuMesaji(playerid, "Siren takýldý.");
					}
					case 560: {
						if(sscanf(params, "d", sirenid))
							return kullanimMesaji(playerid, "/siren [id]");

						if(sirenid < 1 || sirenid > 4)
							return hataMesaji(playerid, "Geçersiz ID! (1-4)");

						switch(sirenid) {
							case 1: {
								AracBilgi[id][sirenObje] = CreateDynamicObject(19797,0.0,0.0,0,0.0,0.0,0.0);
								AttachDynamicObjectToVehicle(AracBilgi[id][sirenObje], GetPlayerVehicleID(playerid), -0.006347, 0.585411, 0.600008, 0.000000, 0.000000, 179.199951);
							}
							case 2: {
								AracBilgi[id][sirenObje] = CreateDynamicObject(19419, 0.0, 0.0, 0.0, 0.0, 0.0 ,0.0);
								AttachDynamicObjectToVehicle(AracBilgi[id][sirenObje], GetPlayerVehicleID(playerid), 0.000000, -0.240005, 0.830001, 0.000000, 0.000000, 0.000000);
							}
							case 3: {
								AracBilgi[id][sirenObje] = CreateDynamicObject(18646,0.0,0.0,0,0.0,0.0,0.0);
								AttachDynamicObjectToVehicle(AracBilgi[id][sirenObje], GetPlayerVehicleID(playerid), -0.590576, 0.239997, 0.870012, 0.000000, 0.000000, 0.000000);
							}
							case 4: {
								AracBilgi[id][sirenObje] = CreateDynamicObject(19419,0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
								AttachDynamicObjectToVehicle(AracBilgi[id][sirenObje], GetPlayerVehicleID(playerid), 0.000000, -1.370010, 0.350004, 0.000000, 0.000000, 0.000000);
							}
						}
						AracBilgi[id][sirenDurum] = 1;
						SunucuMesaji(playerid, "Siren takýldý.");
					}
					case 482: {
						if(sscanf(params, "d", sirenid))
							return kullanimMesaji(playerid, "/siren [id]");

						if(sirenid < 1 || sirenid > 4)
							return hataMesaji(playerid, "Geçersiz ID! (1-4)");

						switch(sirenid) {
							case 1: {
								AracBilgi[id][sirenObje] = CreateDynamicObject(19797,0.0,0.0,0,0.0,0.0,0.0);
								AttachDynamicObjectToVehicle(AracBilgi[id][sirenObje], GetPlayerVehicleID(playerid), 0.450317, 1.259994, 0.610006, 0.000000, 0.000000, 179.999954);
							}
							case 2: {
								AracBilgi[id][sirenObje] = CreateDynamicObject(19419,0.0,0.0,0,0.0,0.0,0.0);
								AttachDynamicObjectToVehicle(AracBilgi[id][sirenObje], GetPlayerVehicleID(playerid), 0.000000, 0.210006, 0.909999, 0.000000, 0.000000, 0.000000);
							}
							case 3: {
								AracBilgi[id][sirenObje] = CreateDynamicObject(18646,0.0,0.0,0,0.0,0.0,0.0);
								AttachDynamicObjectToVehicle(AracBilgi[id][sirenObje], GetPlayerVehicleID(playerid), -0.460449, 0.689971, 1.010009, 0.000000, 0.000000, 0.000000);
							}
							case 4: {
								AracBilgi[id][sirenObje] = CreateDynamicObject(19419,0.0,0.0,0,0.0,0.0,0.0);
								AttachDynamicObjectToVehicle(AracBilgi[id][sirenObje], GetPlayerVehicleID(playerid), 0.040039, -2.230049, -0.490003, 0.000000, 0.000000, 0.000000);
							}
						}
						AracBilgi[id][sirenDurum] = 1;
						SunucuMesaji(playerid, "Siren takýldý.");
					}
					case 490: {
						if(sscanf(params, "d", sirenid))
							return kullanimMesaji(playerid, "/siren [id]");

						if(sirenid < 1 || sirenid > 4)
							return hataMesaji(playerid, "Geçersiz ID! (1-4)");

						switch(sirenid) {
							case 1: {
								AracBilgi[id][sirenObje] = CreateDynamicObject(19797,0.0,0.0,0,0.0,0.0,0.0);
								AttachDynamicObjectToVehicle(AracBilgi[id][sirenObje], GetPlayerVehicleID(playerid), -0.992675, -1.521820, 0.560005, 0.000000, 0.000000, -85.800117);
							}
							case 2: {
								AracBilgi[id][sirenObje] = CreateDynamicObject(18646,0.0,0.0,0,0.0,0.0,0.0);
								AttachDynamicObjectToVehicle(AracBilgi[id][sirenObje], GetPlayerVehicleID(playerid), -0.750000, 0.739990, 1.120014, 0.000000, 0.000000, 0.000000);
							}
							case 3: {
								AracBilgi[id][sirenObje] = CreateDynamicObject(19419,0.0,0.0,0,0.0,0.0,0.0);
								AttachDynamicObjectToVehicle(AracBilgi[id][sirenObje], GetPlayerVehicleID(playerid), 0.000000, -2.799926, 0.399993, 0.000000, 0.000000, 0.000000);
							}
							case 4: {
								AracBilgi[id][sirenObje] = CreateDynamicObject(19797,0.0,0.0,0,0.0,0.0,0.0);
								AttachDynamicObjectToVehicle(AracBilgi[id][sirenObje], GetPlayerVehicleID(playerid), 0.938598, -1.464996, 0.510004, 0.000000, 0.000000, 91.600250);
							}
						}
						AracBilgi[id][sirenDurum] = 1;
						SunucuMesaji(playerid, "Siren takýldý.");
					}
					case 415: {
						if(sscanf(params, "d", sirenid))
							return kullanimMesaji(playerid, "/siren [id]");

						if(sirenid < 1 || sirenid > 4)
							return hataMesaji(playerid, "Geçersiz ID! (1-4)");

						switch(sirenid) {
							case 1: {
								AracBilgi[id][sirenObje] = CreateDynamicObject(18646,0.0,0.0,0,0.0,0.0,0.0);
								AttachDynamicObjectToVehicle(AracBilgi[id][sirenObje], GetPlayerVehicleID(playerid), -0.400, -0.360, 0.640, 0.000, 0.000, 0.000);
							}
							case 2: {
								AracBilgi[id][sirenObje] = CreateDynamicObject(19620,0.0,0.0,0,0.0,0.0,0.0);
								AttachDynamicObjectToVehicle(AracBilgi[id][sirenObje], GetPlayerVehicleID(playerid), 0.000000, -0.299987, 0.620006, 0.000000, 0.000000, 0.000000);
							}
							case 3: {
								AracBilgi[id][sirenObje] = CreateDynamicObject(19797,0.0,0.0,0,0.0,0.0,0.0);
								AttachDynamicObjectToVehicle(AracBilgi[id][sirenObje], GetPlayerVehicleID(playerid), -0.020, 0.170, 0.410, 0.000, 0.000, 180.000);
							}
							case 4: {
								AracBilgi[id][sirenObje] = CreateDynamicObject(19419,0.0,0.0,0,0.0,0.0,0.0);
								AttachDynamicObjectToVehicle(AracBilgi[id][sirenObje], GetPlayerVehicleID(playerid), 0.000000, 1.969985, 0.000000, 0.000000, 0.000000, 0.000000);
							}
						}
						AracBilgi[id][sirenDurum] = 1;
						SunucuMesaji(playerid, "Siren takýldý.");
					}
					case 541: {
						if(sscanf(params, "d", sirenid))
							return kullanimMesaji(playerid, "/siren [id]");

						if(sirenid < 1 || sirenid > 4)
							return hataMesaji(playerid, "Geçersiz ID! (1-4)");

						switch(sirenid) {
							case 1: {
								AracBilgi[id][sirenObje] = CreateDynamicObject(19797,0.0,0.0,0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
								AttachDynamicObjectToVehicle(AracBilgi[id][sirenObje], GetPlayerVehicleID(playerid), -0.013671, -1.349929, 0.029233, 0.000000, 178.800216, 0.000000);
							}
							case 2: {
								AracBilgi[id][sirenObje] = CreateDynamicObject(19797,0.0,0.0,0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
								AttachDynamicObjectToVehicle(AracBilgi[id][sirenObje], GetPlayerVehicleID(playerid), -0.021240, -1.384925, 0.413990, -6.200007, -2.599989, 0.900000);
							}
							case 3: {
								AracBilgi[id][sirenObje] = CreateDynamicObject(18646,0.0,0.0,0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
								AttachDynamicObjectToVehicle(AracBilgi[id][sirenObje], GetPlayerVehicleID(playerid), -0.030029, 0.579978, 0.269996, 0.000000, 0.000000, 0.000000);
							}
							case 4: {
								AracBilgi[id][sirenObje] = CreateDynamicObject(19797,0.0,0.0,0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
								AttachDynamicObjectToVehicle(AracBilgi[id][sirenObje], GetPlayerVehicleID(playerid), -0.009521, 0.609626, 0.640005, 0.000000, 0.000000, -175.900070);
							}
						}
						AracBilgi[id][sirenDurum] = 1;
						SunucuMesaji(playerid, "Siren takýldý.");
					}
					default: hataMesaji(playerid, "Bu araç modeline siren takýlamaz.");
				}
			}
			case 1:
			{
				AracBilgi[id][sirenDurum] = 0;
				DestroyDynamicObject(AracBilgi[id][sirenObje]);
				SunucuMesaji(playerid, "Siren kaldýrýldý.");
			}
		}
		return 1;
	}

	CMD:aracduzenle(playerid, params[])
	{
		if(oyuncuData[playerid][oAdmin] < 7) return YetkinizYok(playerid);
		static id, type[24], string[128];
		if(sscanf(params, "ds[24]S()[128]", id, type, string))
		{
			kullanimMesaji(playerid, "/aracduzenle [id] [isim]");
			SendClientMessage(playerid, RENK_SARI, "[ÝSÝMLER]:{FFFFFF} lokasyon, birlik, renk1, renk2, vw, plaka, sahip, tur, model, meslek, benzin, kilit, vergi");
			return 1;
		}
		if(!IsValidVehicle(id) || Arac_IDBul(id) == -1) return hataMesaji(playerid, "Geçersiz araç.");
		id = Arac_IDBul(id);

		if(!strcmp(type, "lokasyon", true))
		{
			SunucuMesaji(playerid, "/apark komutunu kullanýn.");
		}
		else if(!strcmp(type, "sahip", true))
		{
			static oyuncuid;
			if(sscanf(string, "u", oyuncuid))
			{
				kullanimMesaji(playerid, "/aracduzenle [id] sahip [oyuncu ID/isim]");
				return 1;
			}
			if(!IsPlayerConnected(oyuncuid))
				return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");

			AracBilgi[id][aracSahip] = oyuncuData[oyuncuid][oID];
			Arac_Kaydet(id);

			YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s bir aracýn sahibini deðiþtirdi. (ID: %d | Sahip: %s)", oyuncuData[playerid][oAdminNick], AracBilgi[id][aracYarat], OyuncuIsim(oyuncuid));
		}
		else if(!strcmp(type, "kasabosalt", true))
		{
			AracBilgi[id][aracKapasite] = 0;
			YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s bir aracýn kasasýný boþalttý.(Kapasiteyi sýfýrladý - ID: %d)", oyuncuData[playerid][oAdminNick], AracBilgi[id][aracYarat]);
		}
		else if(!strcmp(type, "model", true))
		{
			static yenimodel[32];
			if(sscanf(string, "s[32]", yenimodel))
			{
				kullanimMesaji(playerid, "/aracduzenle [id] model [yeni model]");
				return 1;
			}
			if((yenimodel[0] = GetVehicleModelByName(yenimodel)) == 0)
				return hataMesaji(playerid, "Geçersiz model.");

			AracBilgi[id][aracModel] = yenimodel[0];
			Arac_Spawn(id);
			Arac_Kaydet(id);

			YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s bir aracýn modelini deðiþtirdi. (ID: %d | Model: %s)", oyuncuData[playerid][oAdminNick], AracBilgi[id][aracYarat], AracModel(AracBilgi[id][aracModel]));
		}
		else if(!strcmp(type, "tur", true))
		{
			static tur;
			if(sscanf(string, "d", tur))
			{
				kullanimMesaji(playerid, "/aracduzenle [id] [tur] [tür id]");
				return 1;
			}
			if(tur < 0 || tur > 1)
				return hataMesaji(playerid, "Geçersiz tür.");

			AracBilgi[id][aracTur] = tur;
			Arac_Kaydet(id);

			YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s bir aracýn türünü deðiþtirdi. (ID: %d | Tür: %s)", oyuncuData[playerid][oAdminNick], AracBilgi[id][aracYarat], aracturisim(id));
		}
		else if(!strcmp(type, "birlik", true))
		{
			static birlik;
			if(sscanf(string, "d", birlik))
				return kullanimMesaji(playerid, "/aracduzenle [id] birlik [birlik ID]");

			if(birlik == -1) {
				AracBilgi[id][aracBirlik] = birlik;
				YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s adlý yönetici bir aracýn birliðini sildi. (ARAÇ ID: %d)", oyuncuData[playerid][oAdminNick], AracBilgi[id][aracYarat]);
			}
			else {
				if((birlik < 0 || birlik >= MAKSIMUM_BIRLIK) || !BirlikBilgi[birlik][birlikKullanimda]) {
					kullanimMesaji(playerid, "/aracduzenle [id] [birlik] [birlik ID]");
					hataMesaji(playerid, "Geçersiz birlik belirtildi!");
					return 1;
				}
				AracBilgi[id][aracBirlik] = BirlikBilgi[birlik][birlikID];
				YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s adlý yönetici bir aracý birliðe baðladý. (ID: %d | BÝRLÝK: %s)", oyuncuData[playerid][oAdminNick], AracBilgi[id][aracYarat], BirlikBilgi[birlik][birlikAd]);
			}
			Arac_Kaydet(id);
		}
		else if(!strcmp(type, "plaka", true))
		{
			static plaka[12];
			if(sscanf(string, "s[12]", plaka))
			{
				kullanimMesaji(playerid, "/aracduzenle [id] plaka [plaka] (sýfýrlamak için \"sýfýrla\" yazýn.)");
				return 1;
			}
			if(strlen(plaka) > 8) return hataMesaji(playerid, "Araç plakasý 8 karakterden uzun olamaz.");
			if(strcmp(plaka, "sýfýrla", true) == 0) {
				static iharfler[][] ={"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"};
				if(AracBilgi[id][aracID] < 100) {
					format(AracBilgi[id][aracPlaka], 12, "%s%s%d %s00%d", iharfler[random(sizeof(iharfler))], iharfler[random(sizeof(iharfler))], randomEx(1, 10), iharfler[random(sizeof(iharfler))], AracBilgi[id][aracID]);
				}
				else if(AracBilgi[id][aracID] < 1000) {
					format(AracBilgi[id][aracPlaka], 12, "%s%s%d %s0%d", iharfler[random(sizeof(iharfler))], iharfler[random(sizeof(iharfler))], randomEx(1, 10), iharfler[random(sizeof(iharfler))], AracBilgi[id][aracID]);
				}
				else if(AracBilgi[id][aracID] > 1000) {
					format(AracBilgi[id][aracPlaka], 12, "%s%s%d %s%d", iharfler[random(sizeof(iharfler))], iharfler[random(sizeof(iharfler))], randomEx(1, 10), iharfler[random(sizeof(iharfler))], AracBilgi[id][aracID]);
				}
				SunucuMesaji(playerid, "Plaka sýfýrlandý. (Yeni Plaka: %s)", AracBilgi[id][aracPlaka]);
			}
			else {
				format(AracBilgi[id][aracPlaka], 12, "%s", plaka);
				SunucuMesaji(playerid, "Plaka %s olarak düzenlendi.", AracBilgi[id][aracPlaka]);
			}
			Arac_Kaydet(id);
			Arac_Spawn(id);
		}
		else if(!strcmp(type, "renk1", true))
		{
			static renk1;
			if(sscanf(string, "d", renk1))
				return kullanimMesaji(playerid, "/aracduzenle [id] renk1 [renk ID]");

			if(renk1 < 0 || renk1 > 255)
				return hataMesaji(playerid, "Geçersiz bir renk girdiniz, renk ID'leri 0 ilâ 255 arasýndadýr.");

			AracBilgi[id][aracRenk1] = renk1;
			Arac_Kaydet(id);
			ChangeVehicleColor(AracBilgi[id][aracYarat], AracBilgi[id][aracRenk1], AracBilgi[id][aracRenk2]);
			YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s araç %d'nin birincil rengini %d olarak deðiþtirdi.", oyuncuData[playerid][oAdminNick], AracBilgi[id][aracYarat], renk1);
		}
		else if(!strcmp(type, "renk2", true))
		{
			static renk2;
			if(sscanf(string, "d", renk2))
				return kullanimMesaji(playerid, "/aracduzenle [id] [renk2] [renk ID]");

			if(renk2 < 0 || renk2 > 255)
				return hataMesaji(playerid, "Geçersiz bir renk girdiniz, renk ID'leri 0 ilâ 255 arasýndadýr.");

			AracBilgi[id][aracRenk2] = renk2;
			Arac_Kaydet(id);
			ChangeVehicleColor(AracBilgi[id][aracYarat], AracBilgi[id][aracRenk1], AracBilgi[id][aracRenk2]);
			YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s araç %d'nin ikincil rengini %d olarak deðiþtirdi.", oyuncuData[playerid][oAdminNick], AracBilgi[id][aracYarat], renk2);
		}
		else if(!strcmp(type, "vw", true))
		{
			static world;
			if(sscanf(string, "d", world))
				return kullanimMesaji(playerid, "/aracduzenle [id] [vw] [vw ID]");

			SetVehicleVirtualWorld(AracBilgi[id][aracYarat], world);
			AracBilgi[id][aracWorld] = world;
			Arac_Kaydet(id);
			YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s araç %d'nin worldunu %d olarak deðiþtirdi.", oyuncuData[playerid][oAdminNick], AracBilgi[id][aracYarat], world);
		}
		else if(!strcmp(type, "meslek", true))
		{
			static meslek;
			if(sscanf(string, "d", meslek))
				return kullanimMesaji(playerid, "/aracduzenle [id] meslek [meslek ID] (kaldýrmak için -1)");

			if((meslek < -1 || meslek >= MAKSIMUM_MESLEK) || meslek != -1 && !MeslekBilgi[meslek][mKullanimda]) return hataMesaji(playerid, "Geçersiz meslek girdiniz.");

			if(meslek != -1) {
				AracBilgi[id][aracMeslek] = MeslekBilgi[meslek][mTur];
				YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s bir aracýn mesleðini %s olarak deðiþtirdi. (ID: %d)", oyuncuData[playerid][oAdminNick], MeslekIsim(MeslekBilgi[meslek][mTur]), AracBilgi[id][aracYarat]);
			}
			else {
				AracBilgi[id][aracMeslek] = -1;
				YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s bir aracýn mesleðini kaldýrdý. (ID: %d)", oyuncuData[playerid][oAdminNick], AracBilgi[id][aracYarat]);
			}
			Arac_Kaydet(id);
		}
		else if(!strcmp(type, "benzin", true))
		{
			static Float:benzin;
			if(sscanf(string, "f", benzin))
				return kullanimMesaji(playerid, "/aracduzenle [id] benzin [miktar]");

			if(benzin < 0.0 || benzin > 100.0) return hataMesaji(playerid, "Girilen miktar geçersiz.");

			AracBilgi[id][aracBenzin] = benzin;
			Arac_Kaydet(id);
			YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s bir aracýn benzinini %.4f olarak deðiþtirdi. (ID: %d)", oyuncuData[playerid][oAdminNick], benzin, AracBilgi[id][aracYarat]);
		}
		else if(!strcmp(type, "vergi", true))
		{
			new vergi;
			if(sscanf(string, "d", vergi))
				return kullanimMesaji(playerid, "/aracduzenle [id] vergi [miktar]");

			AracBilgi[id][aracVergi] = vergi;
			Arac_Kaydet(id);
			YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s bir aracýn vergisini %d olarak deðiþtirdi. (ID: %d)", oyuncuData[playerid][oAdminNick], vergi, AracBilgi[id][aracYarat]);
		}
		else if(!strcmp(type, "kilit", true))
		{
			static engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(AracBilgi[id][aracYarat], engine, lights, alarm, doors, bonnet, boot, objective);
			if(!AracBilgi[id][aracKilit])
			{
				AracBilgi[id][aracKilit] = true;
				Arac_Kaydet(id);
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
				SetVehicleParamsEx(AracBilgi[id][aracYarat], engine, lights, alarm, 1, bonnet, boot, objective);
				SunucuMesaji(playerid, "Araç kilitlendi.");
			}
			else {
				AracBilgi[id][aracKilit] = false;
				Arac_Kaydet(id);
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
				SetVehicleParamsEx(AracBilgi[id][aracYarat], engine, lights, alarm, 0, bonnet, boot, objective);
				SunucuMesaji(playerid, "Aracýn kilidi açýldý.");
			}
		}
		else hataMesaji(playerid, "Geçersiz opsiyonel.");
		return 1;
	}

	CMD:selamlas(playerid, params[])
	{
		new
		id,
		selammesaj[64];

		if(GetPlayerState(playerid) != 1)
			return 1;

		if(oyuncuData[playerid][oHapisSure][0] > 0 && oyuncuData[playerid][oYarali] == true && oyuncuData[playerid][oDonduruldu] > 0) return hataMesaji(playerid, "Þuan bunu kullanamazsýnýz.");
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");

		if(sscanf(params, "d", id))
			return kullanimMesaji(playerid, "/selamlas [oyuncuid]");

		if(id != INVALID_PLAYER_ID)
		{
			if(YakinlikKontrol(playerid, id, 1.5))
			{
				SetPVarInt(id,"hsID",playerid);
				format(selammesaj, sizeof(selammesaj), "%s sizinle selamlaþmak istiyor?", OyuncuIsim(playerid));
				ShowPlayerDialog(id,DIALOG_SELAMLAS,DIALOG_STYLE_MSGBOX,"Selamlaþma",selammesaj,"Kabul","Red");
				SunucuMesaji(playerid, "%s adlý kiþiye selamlaþma isteði gönderdiniz.", OyuncuIsim(id));
			}
			else {
				hataMesaji(playerid,"Kiþiye yakýn olun.");
			}
		}
		else {
			hataMesaji(playerid,"Hatalý ID girdiniz.");
		}
		return 1;
	}

	CMD:bodypush(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");
		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
		ApplyAnimation(playerid,"GANGS","shake_cara",4.0,0,0,0,0,0);
		return 1;
	}

	CMD:lowbodypush(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");
		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
		ApplyAnimation(playerid,"GANGS","shake_carSH",4.0,0,0,0,0,0);
		return 1;
	}

	CMD:headbutt(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");
		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
		ApplyAnimation(playerid,"WAYFARER","WF_Fwd",4.0,0,0,0,0,0);
		return 1;
	}

	CMD:airkick(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");
		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
		ApplyAnimation(playerid,"FIGHT_C","FightC_M",4.0,0,1,1,0,0);
		return 1;
	}

	CMD:doorkick(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");
		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
		ApplyAnimation(playerid,"POLICE","Door_Kick",4.0,0,0,0,0,0);
		return 1;
	}

	CMD:leftslap(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");
		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
		ApplyAnimation(playerid,"PED","BIKE_elbowL",4.0,0,0,0,0,0);
		return 1;
	}

	CMD:elbow(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");
		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
		ApplyAnimation(playerid,"FIGHT_D","FightD_3",4.0,0,1,1,0,0);
		return 1;
	}

	CMD:coprun(playerid, params[])
	{
		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
		ApplyAnimation(playerid,"SWORD","sword_block",50.0,0,1,1,1,1);
		return 1;
	}

	CMD:handsup(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");
		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
		SetPVarInt(playerid, "anim", 1);
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
		return 1;
	}

	CMD:piss(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");
		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);
		SetPVarInt(playerid, "anim", 1);
		SetPlayerSpecialAction(playerid, 68);
		return 1;
	}

	CMD:sneak(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");
		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		AnimOynat(playerid, "PED", "Player_Sneak", 4.1, 1, 1, 1, 1, 1, 1);
		return 1;
	}

	CMD:drunk(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");
		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		AnimOynat(playerid, "PED", "WALK_DRUNK", 4.0, 1, 1, 1, 1, 1, 1);
		return 1;
	}

	CMD:bomb(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");
		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		AnimOynat(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0, 1);
		return 1;
	}

	CMD:rob(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");
		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		AnimOynat(playerid, "ped", "ARRESTgun", 4.0, 0, 1, 1, 1, 1, 1);
		return 1;
	}

	CMD:laugh(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");
		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		AnimOynat(playerid, "RAPPING", "Laugh_01", 4.0, 1, 0, 0, 0, 0, 1);
		return 1;
	}

	CMD:lookout(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");
		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		AnimOynat(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0, 1);
		return 1;
	}

	CMD:robman(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");
		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		AnimOynat(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0, 1);
		return 1;
	}

	CMD:hide(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");
		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		AnimOynat(playerid, "ped", "cower", 3.0, 1, 0, 0, 0, 0, 1);
		return 1;
	}

	CMD:vomit(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");
		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		AnimOynat(playerid, "FOOD", "EAT_Vomit_P", 3.0, 1, 0, 0, 0, 0, 1);
		return 1;
	}

	CMD:eat(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");
		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		AnimOynat(playerid, "FOOD", "EAT_Burger", 3.0, 1, 0, 0, 0, 0, 1);
		return 1;
	}

	CMD:slapass(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");
		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		AnimOynat(playerid, "SWEET", "sweet_ass_slap", 4.0, 0, 0, 0, 0, 0, 1);
		return 1;
	}

	CMD:crack(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");
		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		AnimOynat(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0, 1);
		return 1;
	}

	CMD:fucku(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");
		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		AnimOynat(playerid, "PED", "fucku", 4.0, 0, 0, 0, 0, 0, 1);
		return 1;
	}

	CMD:taichi(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");
		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		AnimOynat(playerid, "PARK", "Tai_Chi_Loop", 4.0, 1, 0, 0, 0, 0, 1);
		return 1;
	}

	CMD:drinkwater(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");
		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		AnimOynat(playerid, "BAR", "dnk_stndF_loop", 4.0, 1, 0, 0, 0, 0, 1);
		return 1;
	}

	CMD:checktime(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");
		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		AnimOynat(playerid, "COP_AMBIENT", "Coplook_watch", 4.0, 0, 0, 0, 0, 0, 1);
		return 1;
	}

	CMD:sleep(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");
		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		AnimOynat(playerid, "CRACK", "crckdeth4", 4.0, 0, 1, 1, 1, 0, 1);
		return 1;
	}

	CMD:blob(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");
		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		AnimOynat(playerid, "CRACK", "crckidle1", 4.0, 0, 1, 1, 1, 0, 1);
		return 1;
	}

	CMD:opendoor(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");
		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		AnimOynat(playerid, "AIRPORT", "thrw_barl_thrw", 4.0, 0, 0, 0, 0, 0, 1);
		return 1;
	}

	CMD:wavedown(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");
		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		AnimOynat(playerid, "BD_FIRE", "BD_Panic_01", 4.0, 0, 0, 0, 0, 0, 1);
		return 1;
	}

	CMD:cpr(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");
		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		AnimOynat(playerid, "MEDIC", "CPR", 4.0, 0, 0, 0, 0, 0, 1);
		return 1;
	}

	CMD:dive(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");

		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		AnimOynat(playerid, "DODGE", "Crush_Jump", 4.0, 0, 1, 1, 1, 0, 1);
		return 1;
	}

	CMD:showoff(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");

		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		AnimOynat(playerid, "Freeweights", "gym_free_celebrate", 4.0, 1, 0, 0, 0, 0, 1);
		return 1;
	}

	CMD:goggles(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");

		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		AnimOynat(playerid, "goggles", "goggles_put_on", 4.0, 0, 0, 0, 0, 0, 1);
		return 1;
	}

	CMD:cry(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");

		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		AnimOynat(playerid, "GRAVEYARD", "mrnF_loop", 4.0, 1, 0, 0, 0, 0, 1);
		return 1;
	}

	CMD:throw(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");

		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		AnimOynat(playerid, "GRENADE", "WEAPON_throw", 4.0, 0, 0, 0, 0, 0, 1);
		return 1;
	}

	CMD:robbed(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");

		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		AnimOynat(playerid, "SHOP", "SHP_Rob_GiveCash", 4.0, 1, 0, 0, 0, 0, 1);
		return 1;
	}

	CMD:hurt(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");

		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		AnimOynat(playerid, "SWAT", "gnstwall_injurd", 4.0, 1, 0, 0, 0, 0, 1);
		return 1;
	}

	CMD:box(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");

		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		AnimOynat(playerid, "GYMNASIUM", "GYMshadowbox", 4.0, 1, 0, 0, 0, 0, 1);
		return 1;
	}

	CMD:washhands(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");

		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		AnimOynat(playerid, "BD_FIRE", "wash_up", 4.0, 1, 0, 0, 0, 0, 1);
		return 1;
	}

	CMD:crabs(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");

		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		AnimOynat(playerid, "MISC", "Scratchballs_01", 4.0, 1, 0, 0, 0, 0, 1);
		return 1;
	}

	CMD:salute(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");

		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		AnimOynat(playerid, "ON_LOOKERS", "Pointup_loop", 4.0, 1, 0, 0, 0, 0, 1);
		return 1;
	}

	CMD:jerkoff(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");

		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		AnimOynat(playerid, "PAULNMAC", "wank_out", 4.0, 1, 0, 0, 0, 0, 1);
		return 1;
	}

	CMD:stop(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");

		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		AnimOynat(playerid, "PED", "endchat_01", 4.0, 1, 0, 0, 0, 0, 1);
		return 1;
	}

	CMD:rap(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");

		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		switch(strval(params))
		{
			case 1: AnimOynat(playerid, "RAPPING", "RAP_A_Loop", 4.0, 1, 0, 0, 0, 0, 1);
			case 2: AnimOynat(playerid, "RAPPING", "RAP_B_Loop", 4.0, 1, 0, 0, 0, 0, 1);
			case 3: AnimOynat(playerid, "RAPPING", "RAP_C_Loop", 4.0, 1, 0, 0, 0, 0, 1);
			default: kullanimMesaji(playerid, "/rap [1-3]");
		}
		return 1;
	}

	CMD:wank(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");

		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		switch(strval(params))
		{
			case 1: AnimOynat(playerid, "PAULNMAC", "wank_in", 4.0, 1, 0, 0, 0, 0, 1);
			case 2: AnimOynat(playerid, "PAULNMAC", "wank_loop", 4.0, 1, 0, 0, 0, 0, 1);
			case 3: AnimOynat(playerid, "PAULNMAC", "wank_out", 4.0, 1, 0, 0, 0, 0, 1);
			default: kullanimMesaji(playerid, "/wank [1-3]");
		}
		return 1;
	}

	CMD:chat(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");

		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		switch(strval(params))
		{
			case 1: AnimOynat(playerid, "PED", "IDLE_CHAT", 4.0, 1, 0, 0, 0, 0, 1);
			case 2: AnimOynat(playerid, "GANGS", "prtial_gngtlkA", 4.0, 1, 0, 0, 0, 0, 1);
			case 3:	AnimOynat(playerid, "GANGS", "prtial_gngtlkB", 4.0, 1, 0, 0, 0, 0, 1);
			case 4: AnimOynat(playerid, "GANGS", "prtial_gngtlkE", 4.0, 1, 0, 0, 0, 0, 1);
			case 5: AnimOynat(playerid, "GANGS", "prtial_gngtlkF", 4.0, 1, 0, 0, 0, 0, 1);
			case 6: AnimOynat(playerid, "GANGS", "prtial_gngtlkG", 4.0, 1, 0, 0, 0, 0, 1);
			case 7:	AnimOynat(playerid, "GANGS", "prtial_gngtlkH", 4.0, 1, 0, 0, 0, 0, 1);
			default: kullanimMesaji(playerid, "/chat [1-7]");
		}
		return 1;
	}

	CMD:sit(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");

		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		switch(strval(params))
		{
			case 1: AnimOynat(playerid, "Attractors", "Stepsit_in", 4.0, 0, 0, 0, 1, 0, 1);
			case 2: AnimOynat(playerid, "CRIB", "PED_Console_Loop", 4.0, 1, 0, 0, 0, 0, 1);
			case 3: AnimOynat(playerid, "INT_HOUSE", "LOU_In", 4.0, 0, 0, 0, 1, 1, 1);
			case 4: AnimOynat(playerid, "MISC", "SEAT_LR", 4.0, 1, 0, 0, 0, 0, 1);
			case 5: AnimOynat(playerid, "MISC", "Seat_talk_01", 4.0, 1, 0, 0, 0, 0, 1);
			case 6: AnimOynat(playerid, "MISC", "Seat_talk_02", 4.0, 1, 0, 0, 0, 0, 1);
			case 7: AnimOynat(playerid, "ped", "SEAT_down", 4.0, 0, 0, 0, 1, 1, 1);
			default: kullanimMesaji(playerid, "/sit [1-7]");
		}
		return 1;
	}

	CMD:bat(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");

		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		switch(strval(params))
		{
			case 1: AnimOynat(playerid,"BASEBALL","Bat_IDLE",4.1, 0, 1, 1, 1, 1, 1);
			case 2: AnimOynat(playerid, "CRACK", "Bbalbat_Idle_01", 4.0, 1, 0, 0, 0, 0, 1);
			case 3: AnimOynat(playerid, "CRACK", "Bbalbat_Idle_02", 4.0, 1, 0, 0, 0, 0, 1);
			default: kullanimMesaji(playerid, "/bat [1-3]");
		}
		return 1;
	}

	CMD:lean(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");

		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		switch(strval(params))
		{
			case 1: AnimOynat(playerid, "GANGS", "leanIDLE", 4.0, 0, 0, 0, 1, 0, 1);
			case 2: AnimOynat(playerid, "MISC", "Plyrlean_loop", 4.0, 0, 0, 0, 1, 0, 1);
			default: kullanimMesaji(playerid, "/lean [1-2]");
		}
		return 1;
	}

	CMD:gesture(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");

		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		switch(strval(params))
		{
			case 1: AnimOynat(playerid, "GHANDS", "gsign1", 4.0, 0, 0, 0, 0, 0, 1);
			case 2: AnimOynat(playerid, "GHANDS", "gsign1LH", 4.0, 0, 0, 0, 0, 0, 1);
			case 3: AnimOynat(playerid, "GHANDS", "gsign2", 4.0, 0, 0, 0, 0, 0, 1);
			case 4: AnimOynat(playerid, "GHANDS", "gsign2LH", 4.0, 0, 0, 0, 0, 0, 1);
			case 5: AnimOynat(playerid, "GHANDS", "gsign3", 4.0, 0, 0, 0, 0, 0, 1);
			case 6: AnimOynat(playerid, "GHANDS", "gsign3LH", 4.0, 0, 0, 0, 0, 0, 1);
			case 7: AnimOynat(playerid, "GHANDS", "gsign4", 4.0, 0, 0, 0, 0, 0, 1);
			case 8: AnimOynat(playerid, "GHANDS", "gsign4LH", 4.0, 0, 0, 0, 0, 0, 1);
			case 9: AnimOynat(playerid, "GHANDS", "gsign5", 4.0, 0, 0, 0, 0, 0, 1);
			case 10: AnimOynat(playerid, "GHANDS", "gsign5", 4.0, 0, 0, 0, 0, 0, 1);
			case 11: AnimOynat(playerid, "GHANDS", "gsign5LH", 4.0, 0, 0, 0, 0, 0, 1);
			case 12: AnimOynat(playerid, "GANGS", "Invite_No", 4.0, 0, 0, 0, 0, 0, 1);
			case 13: AnimOynat(playerid, "GANGS", "Invite_Yes", 4.0, 0, 0, 0, 0, 0, 1);
			case 14: AnimOynat(playerid, "GANGS", "prtial_gngtlkD", 4.0, 0, 0, 0, 0, 0, 1);
			case 15: AnimOynat(playerid, "GANGS", "smkcig_prtl", 4.0, 0, 0, 0, 0, 0, 1);
			default: kullanimMesaji(playerid, "/gesture [1-15]");
		}
		return 1;
	}

	CMD:lay(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");

		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		switch(strval(params))
		{
			case 1: AnimOynat(playerid, "BEACH", "bather", 4.0, 1, 0, 0, 0, 0, 1);
			case 2: AnimOynat(playerid, "BEACH", "Lay_Bac_Loop", 4.0, 1, 0, 0, 0, 0, 1);
			case 3: AnimOynat(playerid, "BEACH", "SitnWait_loop_W", 4.0, 1, 0, 0, 0, 0, 1);
			case 4: AnimOynat(playerid, "BEACH", "bather", 4.0, 1, 0, 0, 0, 0, 1);
			case 5: AnimOynat(playerid, "BEACH", "Lay_Bac_Loop", 4.0, 1, 0, 0, 0, 0, 1);
			case 6: AnimOynat(playerid, "BEACH", "ParkSit_W_loop", 4.0, 1, 0, 0, 0, 0, 1);
			case 7: AnimOynat(playerid, "BEACH", "SitnWait_loop_W", 4.0, 1, 0, 0, 0, 0, 1);
			case 8: AnimOynat(playerid, "BEACH", "ParkSit_M_loop", 4.0, 1, 0, 0, 0, 0, 1);
			default: kullanimMesaji(playerid, "/lay [1-8]");
		}
		return 1;
	}

	CMD:wave(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");

		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		switch(strval(params))
		{
			case 1: AnimOynat(playerid, "ON_LOOKERS", "wave_loop", 4.0, 1, 0, 0, 0, 0, 1);
			case 2: AnimOynat(playerid, "KISSING", "gfwave2", 4.0, 1, 0, 0, 0, 0, 1);
			case 3: AnimOynat(playerid, "PED", "endchat_03", 4.0, 1, 0, 0, 0, 0, 1);
			default: kullanimMesaji(playerid, "/wave [1-3]");
		}
		return 1;
	}

	CMD:signal(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");

		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		switch(strval(params))
		{
			case 1: AnimOynat(playerid, "POLICE", "CopTraf_Come", 4.0, 1, 0, 0, 0, 0, 1);
			case 2: AnimOynat(playerid, "POLICE", "CopTraf_Stop", 4.0, 1, 0, 0, 0, 0, 1);
			default: kullanimMesaji(playerid, "/signal [1-2]");
		}
		return 1;
	}

	CMD:nobreath(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");

		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		switch(strval(params))
		{
			case 1: AnimOynat(playerid, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0, 1);
			case 2: AnimOynat(playerid, "PED", "IDLE_tired", 4.0, 1, 0, 0, 0, 0, 1);
			case 3: AnimOynat(playerid, "FAT", "IDLE_tired", 4.0, 1, 0, 0, 0, 0, 1);
			default: kullanimMesaji(playerid, "/nobreath [1-3]");
		}
		return 1;
	}

	CMD:fall(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");

		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		switch(strval(params))
		{
			case 1: AnimOynat(playerid, "KNIFE", "KILL_Knife_Ped_Die", 4.0, 0, 1, 1, 1, 0, 1);
			case 2: AnimOynat(playerid, "PED", "KO_shot_face", 4.0, 0, 1, 1, 1, 0, 1);
			case 3: AnimOynat(playerid, "PED", "KO_shot_stom", 4.0, 0, 1, 1, 1, 0, 1);
			case 4: AnimOynat(playerid, "PED", "BIKE_fallR", 4.1, 0, 1, 1, 1, 0, 1);
			case 5: AnimOynat(playerid, "PED", "BIKE_fall_off", 4.1, 0, 1, 1, 1, 0, 1);
			default: kullanimMesaji(playerid, "/fall [1-5]");
		}
		return 1;
	}

	CMD:pedmove(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");

		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		switch(strval(params))
		{
			case 1: AnimOynat(playerid, "PED", "JOG_femaleA", 4.0, 1, 1, 1, 1, 1, 1);
			case 2: AnimOynat(playerid, "PED", "JOG_maleA", 4.0, 1, 1, 1, 1, 1, 1);
			case 3: AnimOynat(playerid, "PED", "WOMAN_walkfatold", 4.0, 1, 1, 1, 1, 1, 1);
			case 4: AnimOynat(playerid, "PED", "run_fat", 4.0, 1, 1, 1, 1, 1, 1);
			case 5: AnimOynat(playerid, "PED", "run_fatold", 4.0, 1, 1, 1, 1, 1, 1);
			case 6: AnimOynat(playerid, "PED", "run_old", 4.0, 1, 1, 1, 1, 1, 1);
			case 7: AnimOynat(playerid, "PED", "Run_Wuzi", 4.0, 1, 1, 1, 1, 1, 1);
			case 8: AnimOynat(playerid, "PED", "swat_run", 4.0, 1, 1, 1, 1, 1, 1);
			case 9: AnimOynat(playerid, "PED", "WALK_fat", 4.0, 1, 1, 1, 1, 1, 1);
			case 10: AnimOynat(playerid, "PED", "WALK_fatold", 4.0, 1, 1, 1, 1, 1, 1);
			case 11: AnimOynat(playerid, "PED", "WALK_gang1", 4.0, 1, 1, 1, 1, 1, 1);
			case 12: AnimOynat(playerid, "PED", "WALK_gang2", 4.0, 1, 1, 1, 1, 1, 1);
			case 13: AnimOynat(playerid, "PED", "WALK_old", 4.0, 1, 1, 1, 1, 1, 1);
			case 14: AnimOynat(playerid, "PED", "WALK_shuffle", 4.0, 1, 1, 1, 1, 1, 1);
			case 15: AnimOynat(playerid, "PED", "woman_run", 4.0, 1, 1, 1, 1, 1, 1);
			case 16: AnimOynat(playerid, "PED", "WOMAN_runbusy", 4.0, 1, 1, 1, 1, 1, 1);
			case 17: AnimOynat(playerid, "PED", "WOMAN_runfatold", 4.0, 1, 1, 1, 1, 1, 1);
			case 18: AnimOynat(playerid, "PED", "woman_runpanic", 4.0, 1, 1, 1, 1, 1, 1);
			case 19: AnimOynat(playerid, "PED", "WOMAN_runsexy", 4.0, 1, 1, 1, 1, 1, 1);
			case 20: AnimOynat(playerid, "PED", "WOMAN_walkbusy", 4.0, 1, 1, 1, 1, 1, 1);
			case 21: AnimOynat(playerid, "PED", "WOMAN_walkfatold", 4.0, 1, 1, 1, 1, 1, 1);
			case 22: AnimOynat(playerid, "PED", "WOMAN_walknorm", 4.0, 1, 1, 1, 1, 1, 1);
			case 23: AnimOynat(playerid, "PED", "WOMAN_walkold", 4.0, 1, 1, 1, 1, 1, 1);
			case 24: AnimOynat(playerid, "PED", "WOMAN_walkpro", 4.0, 1, 1, 1, 1, 1, 1);
			case 25: AnimOynat(playerid, "PED", "WOMAN_walksexy", 4.0, 1, 1, 1, 1, 1, 1);
			case 26: AnimOynat(playerid, "PED", "WOMAN_walkshop", 4.0, 1, 1, 1, 1, 1, 1);
			default: kullanimMesaji(playerid, "/pedmove [1-26]");
		}
		return 1;
	}

	CMD:stripclub(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");

		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		switch(strval(params))
		{
			case 1: AnimOynat(playerid, "STRIP", "PLY_CASH", 4.0, 1, 0, 0, 0, 0, 1);
			case 2: AnimOynat(playerid, "STRIP", "PUN_CASH", 4.0, 1, 0, 0, 0, 0, 1);
			default: kullanimMesaji(playerid, "/stripclub [1-2]");
		}
		return 1;
	}

	CMD:smoke(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");

		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		switch(strval(params))
		{
			case 1: AnimOynat(playerid, "SMOKING", "M_smk_in", 4.0, 0, 0, 0, 0, 0, 1);
			case 2: AnimOynat(playerid, "SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 0, 0, 1);
			default: kullanimMesaji(playerid, "/smoke [1-2]");
		}
		return 1;
	}

	CMD:dj(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");

		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		switch(strval(params))
		{
			case 1: AnimOynat(playerid, "SCRATCHING", "scdldlp", 4.0, 1, 0, 0, 0, 0, 1);
			case 2: AnimOynat(playerid, "SCRATCHING", "scdlulp", 4.0, 1, 0, 0, 0, 0, 1);
			case 3: AnimOynat(playerid, "SCRATCHING", "scdrdlp", 4.0, 1, 0, 0, 0, 0, 1);
			case 4: AnimOynat(playerid, "SCRATCHING", "scdrulp", 4.0, 1, 0, 0, 0, 0, 1);
			default: kullanimMesaji(playerid, "/dj [1-4]");
		}
		return 1;
	}

	CMD:reload(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");

		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		switch(strval(params))
		{
			case 1: AnimOynat(playerid, "BUDDY", "buddy_reload", 4.0, 0, 0, 0, 0, 0, 1);
			case 2: AnimOynat(playerid, "PYTHON", "python_reload", 4.0, 0, 0, 0, 0, 0, 1);
			default: kullanimMesaji(playerid, "/reload [1-2]");
		}
		return 1;
	}

	CMD:tag(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");

		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		switch(strval(params))
		{
			case 1: AnimOynat(playerid, "GRAFFITI", "graffiti_Chkout", 4.0, 1, 0, 0, 0, 0, 1);
			case 2: AnimOynat(playerid, "GRAFFITI", "spraycan_fire", 4.0, 1, 0, 0, 0, 0, 1);
			default: kullanimMesaji(playerid, "/tag [1-2]");
		}
		return 1;
	}

	CMD:deal(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");

		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		switch(strval(params))
		{
			case 1: AnimOynat(playerid, "DEALER", "DEALER_DEAL", 4.0, 1, 0, 0, 0, 0, 1);
			case 2: AnimOynat(playerid, "DEALER", "shop_pay", 4.0, 1, 0, 0, 0, 0, 1);
			default: kullanimMesaji(playerid, "/deal [1-2]");
		}
		return 1;
	}

	CMD:crossarms(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");

		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		switch(strval(params))
		{
			case 1: AnimOynat(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 0, 1, 1, 1, -1, 1);
			case 2: AnimOynat(playerid, "DEALER", "DEALER_IDLE", 4.0, 1, 0, 0, 0, 0, 1);
			case 3: AnimOynat(playerid, "GRAVEYARD", "mrnM_loop", 4.0, 1, 0, 0, 0, 0, 1);
			case 4: AnimOynat(playerid, "GRAVEYARD", "prst_loopa", 4.0, 1, 0, 0, 0, 0, 1);
			case 5: AnimOynat(playerid, "DEALER", "DEALER_IDLE_01", 4.0, 1, 0, 0, 0, 0, 1);
			default: kullanimMesaji(playerid, "/crossarms [1-5]");
		}
		return 1;
	}

	CMD:cheer(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");

		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		switch(strval(params))
		{
			case 1: AnimOynat(playerid, "ON_LOOKERS", "shout_01", 4.0, 1, 0, 0, 0, 0, 1);
			case 2: AnimOynat(playerid, "ON_LOOKERS", "shout_02", 4.0, 1, 0, 0, 0, 0, 1);
			case 3: AnimOynat(playerid, "ON_LOOKERS", "shout_in", 4.0, 1, 0, 0, 0, 0, 1);
			case 4: AnimOynat(playerid, "RIOT", "RIOT_ANGRY_B", 4.0, 1, 0, 0, 0, 0, 1);
			case 5: AnimOynat(playerid, "RIOT", "RIOT_CHANT", 4.0, 1, 0, 0, 0, 0, 1);
			case 6: AnimOynat(playerid, "RIOT", "RIOT_shout", 4.0, 1, 0, 0, 0, 0, 1);
			case 7: AnimOynat(playerid, "STRIP", "PUN_HOLLER", 4.0, 1, 0, 0, 0, 0, 1);
			case 8: AnimOynat(playerid, "OTB", "wtchrace_win", 4.0, 1, 0, 0, 0, 0, 1);
			default: kullanimMesaji(playerid, "/cheer [1-8]");
		}
		return 1;
	}

	CMD:siteat(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");

		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		switch(strval(params))
		{
			case 1: AnimOynat(playerid, "FOOD", "FF_Sit_Eat3", 4.0, 1, 0, 0, 0, 0, 1);
			case 2: AnimOynat(playerid, "FOOD", "FF_Sit_Eat2", 4.0, 1, 0, 0, 0, 0, 1);
			default: kullanimMesaji(playerid, "/siteat [1-2]");
		}
		return 1;
	}

	CMD:bar(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");

		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		switch(strval(params))
		{
			case 1: AnimOynat(playerid, "BAR", "Barcustom_get", 4.0, 0, 1, 0, 0, 0, 1);
			case 2: AnimOynat(playerid, "BAR", "Barserve_bottle", 4.0, 0, 0, 0, 0, 0, 1);
			case 3: AnimOynat(playerid, "BAR", "Barserve_give", 4.0, 0, 0, 0, 0, 0, 1);
			case 4: AnimOynat(playerid, "BAR", "dnk_stndM_loop", 4.0, 0, 0, 0, 0, 0, 1);
			case 5: AnimOynat(playerid, "BAR", "BARman_idle", 4.0, 1, 0, 0, 0, 0, 1);
			default: kullanimMesaji(playerid, "/bar [1-5]");
		}
		return 1;
	}

	CMD:dance(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");

		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		if(GetPlayerAnimationIndex(playerid) != 0) ClearAnimations(playerid);

		switch(strval(params))
		{
			case 1: SetPlayerSpecialAction(playerid, 5), SetPVarInt(playerid, "anim", 1);
			case 2: SetPlayerSpecialAction(playerid, 6), SetPVarInt(playerid, "anim", 1);
			case 3: SetPlayerSpecialAction(playerid, 7), SetPVarInt(playerid, "anim", 1);
			case 4: SetPlayerSpecialAction(playerid, 8), SetPVarInt(playerid, "anim", 1);
			case 5: AnimOynat(playerid, "DANCING", "DAN_Down_A", 4.0, 1, 0, 0, 0, 0, 1);
			case 6: AnimOynat(playerid, "DANCING", "DAN_Left_A", 4.0, 1, 0, 0, 0, 0, 1);
			case 7: AnimOynat(playerid, "DANCING", "DAN_Loop_A", 4.0, 1, 0, 0, 0, 0, 1);
			case 8: AnimOynat(playerid, "DANCING", "DAN_Right_A", 4.0, 1, 0, 0, 0, 0, 1);
			case 9: AnimOynat(playerid, "DANCING", "DAN_Up_A", 4.0, 1, 0, 0, 0, 0, 1);
			case 10: AnimOynat(playerid, "DANCING", "dnce_M_a", 4.0, 1, 0, 0, 0, 0, 1);
			case 11: AnimOynat(playerid, "DANCING", "dnce_M_b", 4.0, 1, 0, 0, 0, 0, 1);
			case 12: AnimOynat(playerid, "DANCING", "dnce_M_c", 4.0, 1, 0, 0, 0, 0, 1);
			case 13: AnimOynat(playerid, "DANCING", "dnce_M_c", 4.0, 1, 0, 0, 0, 0, 1);
			case 14: AnimOynat(playerid, "DANCING", "dnce_M_d", 4.0, 1, 0, 0, 0, 0, 1);
			default: kullanimMesaji(playerid, "/dance [1-14]");
		}
		return 1;
	}

	CMD:spank(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");

		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		switch(strval(params))
		{
			case 1: AnimOynat(playerid, "SNM", "SPANKINGW", 4.1, 1, 0, 0, 0, 0, 1);
			case 2: AnimOynat(playerid, "SNM", "SPANKINGP", 4.1, 1, 0, 0, 0, 0, 1);
			case 3: AnimOynat(playerid, "SNM", "SPANKEDW", 4.1, 1, 0, 0, 0, 0, 1);
			case 4: AnimOynat(playerid, "SNM", "SPANKEDP", 4.1, 1, 0, 0, 0, 0, 1);
			default: kullanimMesaji(playerid, "/spank [1-4]");
		}
		return 1;
	}

	CMD:sexy(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");

		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		switch(strval(params))
		{
			case 1: AnimOynat(playerid, "STRIP", "strip_E", 4.1, 1, 0, 0, 0, 0, 1);
			case 2: AnimOynat(playerid, "STRIP", "strip_G", 4.1, 1, 0, 0, 0, 0, 1);
			case 3: AnimOynat(playerid, "STRIP", "STR_A2B", 4.1, 0, 0, 0, 0, 0, 1);
			case 4: AnimOynat(playerid, "STRIP", "STR_Loop_A", 4.1, 1, 0, 0, 0, 0, 1);
			case 5: AnimOynat(playerid, "STRIP", "STR_Loop_B", 4.1, 1, 0, 0, 0, 0, 1);
			case 6: AnimOynat(playerid, "STRIP", "STR_Loop_C", 4.1, 1, 0, 0, 0, 0, 1);
			default: kullanimMesaji(playerid, "/sexy [1-6]");
		}
		return 1;
	}

	CMD:holdup(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");

		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		switch(strval(params))
		{
			case 1: AnimOynat(playerid, "POOL", "POOL_ChalkCue", 4.1, 0, 1, 1, 1, 1, 1);
			case 2: AnimOynat(playerid, "POOL", "POOL_Idle_Stance", 4.1, 0, 1, 1, 1, 1, 1);
			default: kullanimMesaji(playerid, "/holdup [1-2]");
		}
		return 1;
	}

	CMD:copa(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");

		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		switch(strval(params))
		{
			case 1: AnimOynat(playerid, "POLICE", "CopTraf_Away", 4.1, 0, 0, 0, 0, 0, 1);
			case 2: AnimOynat(playerid, "POLICE", "CopTraf_Come", 4.1, 0, 0, 0, 0, 0, 1);
			case 3: AnimOynat(playerid, "POLICE", "CopTraf_Left", 4.1, 0, 0, 0, 0, 0, 1);
			case 4: AnimOynat(playerid, "POLICE", "CopTraf_Stop", 4.1, 0, 0, 0, 0, 0, 1);
			case 5: AnimOynat(playerid, "POLICE", "Cop_move_FWD", 4.1, 1, 1, 1, 1, 1, 1);
			case 6: AnimOynat(playerid, "POLICE", "crm_drgbst_01", 4.1, 0, 0, 0, 1, 5000, 1);
			case 7: AnimOynat(playerid, "POLICE", "Door_Kick", 4.1, 0, 1, 1, 1, 1, 1);
			case 8: AnimOynat(playerid, "POLICE", "plc_drgbst_01", 4.1, 0, 0, 0, 0, 5000, 1);
			case 9: AnimOynat(playerid, "POLICE", "plc_drgbst_02", 4.1, 0, 0, 0, 0, 0, 1);
			default: kullanimMesaji(playerid, "/copa [1-9]");
		}
		return 1;
	}

	CMD:misc(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");

		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		switch(strval(params))
		{
			case 1: AnimOynat(playerid, "CAR", "Fixn_Car_Loop", 4.1, 1, 0, 0, 0, 0, 1);
			case 2: AnimOynat(playerid, "CAR", "flag_drop", 4.1, 0, 0, 0, 0, 0, 1);
			case 3: AnimOynat(playerid, "PED", "bomber", 4.1, 0, 0, 0, 0, 0, 1);
			default: kullanimMesaji(playerid, "/misc [1-3]");
		}
		return 1;
	}

	CMD:snatch(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");

		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		switch(strval(params))
		{
			case 1: AnimOynat(playerid, "PED", "BIKE_elbowL", 4.1, 0, 0, 0, 0, 0, 1);
			case 2: AnimOynat(playerid, "PED", "BIKE_elbowR", 4.1, 0, 0, 0, 0, 0, 1);
			default: kullanimMesaji(playerid, "/snatch [1-2]");
		}
		return 1;
	}

	CMD:blowjob(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");
		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		switch(strval(params))
		{
			case 1: AnimOynat(playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_P", 4.1, 1, 0, 0, 0, 0, 1);
			case 2: AnimOynat(playerid, "BLOWJOBZ", "BJ_STAND_LOOP_P", 4.1, 1, 0, 0, 0, 0, 1);
			case 3: AnimOynat(playerid, "BLOWJOBZ", "BJ_COUCH_START_W", 4.1, 1, 0, 0, 0, 0, 1);
			case 4: AnimOynat(playerid, "BLOWJOBZ", "w", 4.1, 1, 0, 0, 0, 0, 1);
			case 5: AnimOynat(playerid, "BLOWJOBZ", "BJ_COUCH_END_W", 4.1, 1, 0, 0, 0, 0, 1);
			case 6: AnimOynat(playerid, "BLOWJOBZ", "BJ_COUCH_START_P", 4.1, 1, 0, 0, 0, 0, 1);
			case 7: AnimOynat(playerid, "BLOWJOBZ", "BJ_COUCH_END_P", 4.1, 1, 0, 0, 0, 0, 1);
			case 8: AnimOynat(playerid, "BLOWJOBZ", "BJ_STAND_START_W", 4.1, 1, 0, 0, 0, 0, 1);
			case 9: AnimOynat(playerid, "BLOWJOBZ", "BJ_STAND_LOOP_W", 4.1, 1, 0, 0, 0, 0, 1);
			case 10: AnimOynat(playerid, "BLOWJOBZ", "BJ_STAND_END_W", 4.1, 1, 0, 0, 0, 0, 1);
			case 11: AnimOynat(playerid, "BLOWJOBZ", "BJ_STAND_START_P", 4.1, 1, 0, 0, 0, 0, 1);
			case 12: AnimOynat(playerid, "BLOWJOBZ", "BJ_STAND_END_P", 4.1, 1, 0, 0, 0, 0, 1);
			default: kullanimMesaji(playerid, "/blowjob [1-12]");
		}
		return 1;
	}

	CMD:kiss(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");

		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		switch(strval(params))
		{
			case 1: AnimOynat(playerid, "KISSING", "Playa_Kiss_01", 4.1, 0, 0, 0, 0, 0, 1);
			case 2: AnimOynat(playerid, "KISSING", "Playa_Kiss_02", 4.1, 0, 0, 0, 0, 0, 1);
			case 3: AnimOynat(playerid, "KISSING", "Playa_Kiss_03", 4.1, 0, 0, 0, 0, 0, 1);
			case 4: AnimOynat(playerid, "KISSING", "Grlfrd_Kiss_01", 4.1, 0, 0, 0, 0, 0, 1);
			case 5: AnimOynat(playerid, "KISSING", "Grlfrd_Kiss_02", 4.1, 0, 0, 0, 0, 0, 1);
			case 6: AnimOynat(playerid, "KISSING", "Grlfrd_Kiss_03", 4.1, 0, 0, 0, 0, 0, 1);
			default: kullanimMesaji(playerid, "/kiss [1-6]");
		}
		return 1;
	}

	CMD:idles(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");

		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		switch(strval(params))
		{
			case 1: AnimOynat(playerid, "PLAYIDLES", "shift", 4.1, 1, 1, 1, 1, 1, 1);
			case 2: AnimOynat(playerid, "PLAYIDLES", "shldr", 4.1, 1, 1, 1, 1, 1, 1);
			case 3: AnimOynat(playerid, "PLAYIDLES", "stretch", 4.1, 1, 1, 1, 1, 1, 1);
			case 4: AnimOynat(playerid, "PLAYIDLES", "strleg", 4.1, 1, 1, 1, 1, 1, 1);
			case 5: AnimOynat(playerid, "PLAYIDLES", "time", 4.1, 1, 1, 1, 1, 1, 1);
			case 6: AnimOynat(playerid, "COP_AMBIENT", "Copbrowse_loop", 4.1, 1, 0, 0, 0, 0, 1);
			case 7: AnimOynat(playerid, "COP_AMBIENT", "Coplook_loop", 4.1, 1, 0, 0, 0, 0, 1);
			case 8: AnimOynat(playerid, "COP_AMBIENT", "Coplook_shake", 4.1, 1, 0, 0, 0, 0, 1);
			case 9: AnimOynat(playerid, "COP_AMBIENT", "Coplook_think", 4.1, 1, 0, 0, 0, 0, 1);
			case 10: AnimOynat(playerid, "COP_AMBIENT", "Coplook_watch", 4.1, 1, 0, 0, 0, 0, 1);
			case 11: AnimOynat(playerid, "PED", "roadcross", 4.1, 1, 0, 0, 0, 0, 1);
			case 12: AnimOynat(playerid, "PED", "roadcross_female", 4.1, 1, 0, 0, 0, 0, 1);
			case 13: AnimOynat(playerid, "PED", "roadcross_gang", 4.1, 1, 0, 0, 0, 0, 1);
			case 14: AnimOynat(playerid, "PED", "roadcross_old", 4.1, 1, 0, 0, 0, 0, 1);
			case 15: AnimOynat(playerid, "PED", "woman_idlestance", 4.1, 1, 0, 0, 0, 0, 1);
			default: kullanimMesaji(playerid, "/idles [1-15]");
		}
		return 1;
	}

	CMD:aim(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");
		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		switch(strval(params))
		{
			case 1: AnimOynat(playerid,"PED","gang_gunstand",4.0,1,1,1,1,1);
			case 2: AnimOynat(playerid,"ped", "ARRESTgun", 4.0, 0, 1, 1, 1, -1);
			case 3: AnimOynat(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0);
			default: kullanimMesaji(playerid,"/aim [1-3]");
		}
		return 1;
	}

	CMD:sunbathe(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");

		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu animasyon araçlarda kullanýlamaz.");
		switch(strval(params))
		{
			case 1: AnimOynat(playerid, "SUNBATHE", "batherdown", 4.1, 0, 1, 1, 1, 1, 1);
			case 2: AnimOynat(playerid, "SUNBATHE", "batherup", 4.1, 0, 1, 1, 1, 1, 1);
			case 3: AnimOynat(playerid, "SUNBATHE", "Lay_Bac_in", 4.1, 0, 1, 1, 1, 1, 1);
			case 4: AnimOynat(playerid, "SUNBATHE", "Lay_Bac_out", 4.1, 0, 1, 1, 1, 1, 1);
			case 5: AnimOynat(playerid, "SUNBATHE", "ParkSit_M_IdleA", 4.1, 0, 1, 1, 1, 1, 1);
			case 6: AnimOynat(playerid, "SUNBATHE", "ParkSit_M_IdleB", 4.1, 0, 1, 1, 1, 1, 1);
			case 7: AnimOynat(playerid, "SUNBATHE", "ParkSit_M_IdleC", 4.1, 0, 1, 1, 1, 1, 1);
			case 8: AnimOynat(playerid, "SUNBATHE", "ParkSit_M_in", 4.1, 0, 1, 1, 1, 1, 1);
			case 9: AnimOynat(playerid, "SUNBATHE", "ParkSit_M_out", 4.1, 0, 1, 1, 1, 1, 1);
			case 10: AnimOynat(playerid, "SUNBATHE", "ParkSit_W_idleA", 4.1, 0, 1, 1, 1, 1, 1);
			case 11: AnimOynat(playerid, "SUNBATHE", "ParkSit_W_idleB", 4.1, 0, 1, 1, 1, 1, 1);
			case 12: AnimOynat(playerid, "SUNBATHE", "ParkSit_W_idleC", 4.1, 0, 1, 1, 1, 1, 1);
			case 13: AnimOynat(playerid, "SUNBATHE", "ParkSit_W_in", 4.1, 0, 1, 1, 1, 1, 1);
			case 14: AnimOynat(playerid, "SUNBATHE", "ParkSit_W_out", 4.1, 0, 1, 1, 1, 1, 1);
			case 15: AnimOynat(playerid, "SUNBATHE", "SBATHE_F_LieB2Sit", 4.1, 0, 1, 1, 1, 1, 1);
			case 16: AnimOynat(playerid, "SUNBATHE", "SBATHE_F_Out", 4.1, 0, 1, 1, 1, 1, 1);
			case 17: AnimOynat(playerid, "SUNBATHE", "SitnWait_in_W", 4.1, 0, 1, 1, 1, 1, 1);
			case 18: AnimOynat(playerid, "SUNBATHE", "SitnWait_out_W", 4.1, 0, 1, 1, 1, 1, 1);
			default: kullanimMesaji(playerid, "/sunbathe [1-18]");
		}
		return 1;
	}

	CMD:lowrider(playerid, params[])
	{
		new sistempasif = 1;
		if(sistempasif == 1) return hataMesaji(playerid, "Bu animasyon geçici olarak devre dýþý býrakýlmýþtýr.");
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");
		static aid;
		aid = GetPlayerVehicleID(playerid);
		if(GetVehicleModel(aid) != 536 && GetVehicleModel(aid) != 575 && GetVehicleModel(aid) != 567) return hataMesaji(playerid, "Bu anim sadece lowrider araçlarda kullanýlabilir.");

		switch(strval(params))
		{
			case 1: AnimOynat(playerid, "LOWRIDER", "lrgirl_bdbnce", 4.1, 0, 1, 1, 1, 1, 1);
			case 2: AnimOynat(playerid, "LOWRIDER", "lrgirl_hair", 4.1, 0, 1, 1, 1, 1, 1);
			case 3: AnimOynat(playerid, "LOWRIDER", "lrgirl_hurry", 4.1, 0, 1, 1, 1, 1, 1);
			case 4: AnimOynat(playerid, "LOWRIDER", "lrgirl_idleloop", 4.1, 0, 1, 1, 1, 1, 1);
			case 5: AnimOynat(playerid, "LOWRIDER", "lrgirl_idle_to_l0", 4.1, 0, 1, 1, 1, 1, 1);
			case 6: AnimOynat(playerid, "LOWRIDER", "lrgirl_l0_bnce", 4.1, 0, 1, 1, 1, 1, 1);
			case 7: AnimOynat(playerid, "LOWRIDER", "lrgirl_l0_loop", 4.1, 0, 1, 1, 1, 1, 1);
			case 8: AnimOynat(playerid, "LOWRIDER", "lrgirl_l0_to_l1", 4.1, 0, 1, 1, 1, 1, 1);
			case 9: AnimOynat(playerid, "LOWRIDER", "lrgirl_l12_to_l0", 4.1, 0, 1, 1, 1, 1, 1);
			case 10: AnimOynat(playerid, "LOWRIDER", "lrgirl_l1_bnce", 4.1, 0, 1, 1, 1, 1, 1);
			case 11: AnimOynat(playerid, "LOWRIDER", "lrgirl_l1_loop", 4.1, 0, 1, 1, 1, 1, 1);
			case 12: AnimOynat(playerid, "LOWRIDER", "lrgirl_l1_to_l2", 4.1, 0, 1, 1, 1, 1, 1);
			case 13: AnimOynat(playerid, "LOWRIDER", "lrgirl_l2_bnce", 4.1, 0, 1, 1, 1, 1, 1);
			case 14: AnimOynat(playerid, "LOWRIDER", "lrgirl_l2_loop", 4.1, 0, 1, 1, 1, 1, 1);
			case 15: AnimOynat(playerid, "LOWRIDER", "lrgirl_l2_to_l3", 4.1, 0, 1, 1, 1, 1, 1);
			case 16: AnimOynat(playerid, "LOWRIDER", "lrgirl_l345_to_l1", 4.1, 0, 1, 1, 1, 1, 1);
			case 17: AnimOynat(playerid, "LOWRIDER", "lrgirl_l3_bnce", 4.1, 0, 1, 1, 1, 1, 1);
			case 18: AnimOynat(playerid, "LOWRIDER", "lrgirl_l3_loop", 4.1, 0, 1, 1, 1, 1, 1);
			case 19: AnimOynat(playerid, "LOWRIDER", "lrgirl_l3_to_l4", 4.1, 0, 1, 1, 1, 1, 1);
			case 20: AnimOynat(playerid, "LOWRIDER", "lrgirl_l4_bnce", 4.1, 0, 1, 1, 1, 1, 1);
			case 21: AnimOynat(playerid, "LOWRIDER", "lrgirl_l4_loop", 4.1, 0, 1, 1, 1, 1, 1);
			case 22: AnimOynat(playerid, "LOWRIDER", "lrgirl_l4_to_l5", 4.1, 0, 1, 1, 1, 1, 1);
			case 23: AnimOynat(playerid, "LOWRIDER", "lrgirl_l5_bnce", 4.1, 0, 1, 1, 1, 1, 1);
			case 24: AnimOynat(playerid, "LOWRIDER", "lrgirl_l5_loop", 4.1, 0, 1, 1, 1, 1, 1);
			case 25: AnimOynat(playerid, "LOWRIDER", "prtial_gngtlkB", 4.1, 0, 1, 1, 1, 1, 1);
			case 26: AnimOynat(playerid, "LOWRIDER", "prtial_gngtlkC", 4.1, 0, 1, 1, 1, 1, 1);
			case 27: AnimOynat(playerid, "LOWRIDER", "prtial_gngtlkD", 4.1, 0, 1, 1, 1, 1, 1);
			case 28: AnimOynat(playerid, "LOWRIDER", "prtial_gngtlkE", 4.1, 0, 1, 1, 1, 1, 1);
			case 29: AnimOynat(playerid, "LOWRIDER", "prtial_gngtlkF", 4.1, 0, 1, 1, 1, 1, 1);
			case 30: AnimOynat(playerid, "LOWRIDER", "prtial_gngtlkG", 4.1, 0, 1, 1, 1, 1, 1);
			case 31: AnimOynat(playerid, "LOWRIDER", "prtial_gngtlkH", 4.1, 0, 1, 1, 1, 1, 1);
			default: kullanimMesaji(playerid, "/lowrider [1-31]");
		}
		return 1;
	}

	CMD:carchat(playerid, params[])
	{
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");
		static aid;
		aid = GetPlayerVehicleID(playerid);
		if(GetVehicleModel(aid) != 536 && GetVehicleModel(aid) != 575 && GetVehicleModel(aid) != 567) return hataMesaji(playerid, "Bu anim sadece lowrider araçlarda kullanýlabilir.");
		switch(strval(params))
		{
			case 1: AnimOynat(playerid, "CAR_CHAT", "carfone_in", 4.1, 0, 1, 1, 1, 1, 1);
			case 2: AnimOynat(playerid, "CAR_CHAT", "carfone_loopA", 4.1, 0, 1, 1, 1, 1, 1);
			case 3: AnimOynat(playerid, "CAR_CHAT", "carfone_loopA_to_B", 4.1, 0, 1, 1, 1, 1, 1);
			case 4: AnimOynat(playerid, "CAR_CHAT", "carfone_loopB", 4.1, 0, 1, 1, 1, 1, 1);
			case 5: AnimOynat(playerid, "CAR_CHAT", "carfone_loopB_to_A", 4.1, 0, 1, 1, 1, 1, 1);
			case 6: AnimOynat(playerid, "CAR_CHAT", "carfone_out", 4.1, 0, 1, 1, 1, 1, 1);
			case 7: AnimOynat(playerid, "CAR_CHAT", "CAR_Sc1_BL", 4.1, 0, 1, 1, 1, 1, 1);
			case 8: AnimOynat(playerid, "CAR_CHAT", "CAR_Sc1_BR", 4.1, 0, 1, 1, 1, 1, 1);
			case 9: AnimOynat(playerid, "CAR_CHAT", "CAR_Sc1_FL", 4.1, 0, 1, 1, 1, 1, 1);
			case 10: AnimOynat(playerid, "CAR_CHAT", "CAR_Sc1_FR", 4.1, 0, 1, 1, 1, 1, 1);
			case 11: AnimOynat(playerid, "CAR_CHAT", "CAR_Sc2_FL", 4.1, 0, 1, 1, 1, 1, 1);
			case 12: AnimOynat(playerid, "CAR_CHAT", "CAR_Sc3_BR", 4.1, 0, 1, 1, 1, 1, 1);
			case 13: AnimOynat(playerid, "CAR_CHAT", "CAR_Sc3_FL", 4.1, 0, 1, 1, 1, 1, 1);
			case 14: AnimOynat(playerid, "CAR_CHAT", "CAR_Sc3_FR", 4.1, 0, 1, 1, 1, 1, 1);
			case 15: AnimOynat(playerid, "CAR_CHAT", "CAR_Sc4_BL", 4.1, 0, 1, 1, 1, 1, 1);
			case 16: AnimOynat(playerid, "CAR_CHAT", "CAR_Sc4_BR", 4.1, 0, 1, 1, 1, 1, 1);
			case 17: AnimOynat(playerid, "CAR_CHAT", "CAR_Sc4_FL", 4.1, 0, 1, 1, 1, 1, 1);
			case 18: AnimOynat(playerid, "CAR_CHAT", "CAR_Sc4_FR", 4.1, 0, 1, 1, 1, 1, 1);
			case 19: AnimOynat(playerid, "CAR", "Sit_relaxed", 4.1, 0, 1, 1, 1, 1, 1);
	//case 20: AnimOynat(playerid, "CAR", "Tap_hand", 4.1, 1, 0, 0, 0, 0, 1);
			default: kullanimMesaji(playerid, "/carchat [1-19]");
		}
		return 1;
	}


	alias:animasyonlar("anims", "animler", "animlist", "animlistesi");

	alias:bodypush("itekle");				alias:lowbodypush("omuzat");
	alias:headbutt("kafaat");				alias:airkick("ucantekme");
	alias:doorkick("kapitekmele");			alias:leftslap("soldantokat");
	alias:elbow("dirsekvur");				alias:coprun("polisyuruyus");
	alias:handsup("ellerhavaya");			alias:piss("ise");
	alias:sneak("gizlice");					alias:drunk("sarhos");
	alias:bomb("bomba");					alias:rob("soygunyap");
	alias:laugh("kahkaha");					alias:lookout("disaribak");
	alias:hide("korun");
	alias:vomit("kus");						alias:eat("ye");
	alias:slapass("saplakla");				alias:crack("titre");
	alias:fucku("nevar");					alias:taichi("egzersiz");
	alias:drinkwater("suic");				alias:checktime("saatbak");
	alias:sleep("uyu");						alias:blob("kankaybi");
	alias:opendoor("kapiac");				alias:wavedown("asagisalla");
	alias:cpr("kalpmasaji");				alias:dive("dalgic");
	alias:showoff("havaat");				alias:goggles("gozluktak");
	alias:cry("agla");						alias:throw("serttokat");
	alias:robbed("soyuluyor");				alias:hurt("yarali");
	alias:washhands("elleriyika");			alias:crabs("kasin");
	alias:salute("selamdur");				alias:jerkoff("bosal");
	alias:stop("dur");						alias:wank("31cek");
	alias:chat("sohbet");					alias:sit("otur");
	alias:bat("beyzbol");					alias:lean("yaslan");
	alias:gesture("jest");					alias:lay("yereotur");
	alias:wave("elsalla");					alias:signal("sinyal");
	alias:nobreath("soluklan");				alias:fall("yeredus");
	alias:pedmove("yuru");					//alias:getjiggy("kivirt");
	alias:stripclub("stripklub");			alias:reload("sarjor");
	alias:tag("etiket");					alias:deal("anlasma");
	alias:crossarms("caprazkol");			alias:cheer("tezahurat");
	alias:siteat("yemekye");				alias:dance("dans");
	alias:spank("saplak");					alias:sexy("seksi");
	alias:holdup("geciktim","stickjup");	alias:copa("polis");
	alias:misc("yereuzan");					alias:snatch("kapmak");
	alias:blowjob("oralsex");				alias:kiss("op");
	alias:idles("bosta");					alias:sunbathe("gunbatimi");
	alias:aim("nisanal");

	CMD:animasyonlar(playerid, params[])
	{
		new str[4000];
		format(str, sizeof(str), "%sIngilizce\tTürkçe\n", str);
		strcat(str, "{D9BE9B}-» {FFFFFF}/bodypush\t{D9BE9B}-» {FFFFFF}/itekle\n");
		strcat(str, "{D9BE9B}-» {FFFFFF}/lowbodypush\t{D9BE9B}-» {FFFFFF}/omuzat\n");
		strcat(str, "{D9BE9B}-» {FFFFFF}/headbutt\t{D9BE9B}-» {FFFFFF}/kafaat\n");
		strcat(str, "{D9BE9B}-» {FFFFFF}/airkick\t{D9BE9B}-» {FFFFFF}/ucantekme\n");
		strcat(str, "{D9BE9B}-» {FFFFFF}/doorkick\t{D9BE9B}-» {FFFFFF}/kapitekmele\n");
		strcat(str, "{D9BE9B}-» {FFFFFF}/leftslap\t{D9BE9B}-» {FFFFFF}/soldantokat\n");
		strcat(str, "{D9BE9B}-» {FFFFFF}/elbow\t{D9BE9B}-» {FFFFFF}/dirsekvur\n");
		strcat(str, "{D9BE9B}-» {FFFFFF}/coprun\t{D9BE9B}-» {FFFFFF}/polisyuruyus\n");
		strcat(str, "{D9BE9B}-» {FFFFFF}/handsup\t{D9BE9B}-» {FFFFFF}/ellerhavaya\n");
		strcat(str, "{D9BE9B}-» {FFFFFF}/piss\t{D9BE9B}-» {FFFFFF}/ise\n");
		strcat(str, "{D9BE9B}-» {FFFFFF}/sneak\t{D9BE9B}-» {FFFFFF}/gizlice\n");
		strcat(str, "{D9BE9B}-» {FFFFFF}/drunk\t{D9BE9B}-» {FFFFFF}/sarhos\n");
		strcat(str, "{D9BE9B}-» {FFFFFF}/bomb\t{D9BE9B}-» {FFFFFF}/bomba\n");
		strcat(str, "{D9BE9B}-» {FFFFFF}/rob\t{D9BE9B}-» {FFFFFF}/soygun\n");
		strcat(str, "{D9BE9B}-» {FFFFFF}/laugh\t{D9BE9B}-» {FFFFFF}/kahkaha\n");
		strcat(str, "{D9BE9B}-» {FFFFFF}/lookout\t{D9BE9B}-» {FFFFFF}/disaribak\n");
		strcat(str, "{D9BE9B}-» {FFFFFF}/robman\t{D9BE9B}-» {FFFFFF}/silahtut\n");
		strcat(str, "{D9BE9B}-» {FFFFFF}/hide\t{D9BE9B}-» {FFFFFF}/korun\n");
		strcat(str, "{D9BE9B}-» {FFFFFF}/vomit\t{D9BE9B}-» {FFFFFF}/kus\n");
		strcat(str, "{D9BE9B}-» {FFFFFF}/eat\t{D9BE9B}-» {FFFFFF}/ye\n");
		strcat(str, "{D9BE9B}-» {FFFFFF}/slapass\t{D9BE9B}-» {FFFFFF}/saplakla\n");
		strcat(str, "{D9BE9B}-» {FFFFFF}/crack\t{D9BE9B}-» {FFFFFF}/titre\n");
		strcat(str, "{D9BE9B}-» {FFFFFF}/fucku\t{D9BE9B}-» {FFFFFF}/nevar\n");
		strcat(str, "{D9BE9B}-» {FFFFFF}/taichi\t{D9BE9B}-» {FFFFFF}/egzersiz\n");
		strcat(str, "{D9BE9B}-» {FFFFFF}/drinkwater\t{D9BE9B}-» {FFFFFF}/suic\n");
		strcat(str, "{D9BE9B}-» {FFFFFF}/checktime\t{D9BE9B}-» {FFFFFF}/saatbak\n");
		strcat(str, "{D9BE9B}-» {FFFFFF}/sleep\t{D9BE9B}-» {FFFFFF}/uyu\n");
		strcat(str, "{D9BE9B}-» {FFFFFF}/blob\t{D9BE9B}-» {FFFFFF}/kankaybi\n");
		strcat(str, "{D9BE9B}-» {FFFFFF}/opendoor\t{D9BE9B}-» {FFFFFF}/kapiac\n");
		strcat(str, "{D9BE9B}-» {FFFFFF}/wavedown\t{D9BE9B}-» {FFFFFF}/asagisalla\n");
		strcat(str, "{D9BE9B}-» {FFFFFF}/cpr\t{D9BE9B}-» {FFFFFF}/kalpmasaji\n");
		strcat(str, "{D9BE9B}-» {FFFFFF}/dive\t{D9BE9B}-» {FFFFFF}/dalgic\n");
		strcat(str, "{D9BE9B}-» {FFFFFF}/showoff\t{D9BE9B}-» {FFFFFF}/havaat\n");
		strcat(str, "{D9BE9B}-» {FFFFFF}/goggles\t{D9BE9B}-» {FFFFFF}/gozluktak\n");
		strcat(str, "{D9BE9B}-» {FFFFFF}/cry\t{D9BE9B}-» {FFFFFF}/agla\n");
		strcat(str, "{D9BE9B}-» {FFFFFF}/throw\t{D9BE9B}-» {FFFFFF}/serttokat\n");
		strcat(str, "{D9BE9B}-» {FFFFFF}/robbed\t{D9BE9B}-» {FFFFFF}/soyuluyor\n");
		strcat(str, "{D9BE9B}-» {FFFFFF}/hurt\t{D9BE9B}-» {FFFFFF}/yarali");
		ShowPlayerDialog(playerid, ANIMASYON_LISTESI, DIALOG_STYLE_TABLIST_HEADERS, "{FFFFFF}Animasyonlar - I.", str, "Sonraki", "Kapat");
	}

	/*CMD:animasyonlar(playerid, params[])
	{
		SunucuMesaji(playerid, "Animasyonlar:");
		SendClientMessage(playerid,-1,"/handsup - /drunk - /bomb - /rob - /laugh - /lookout - /robman - /crossarms - /sit - /sandalyeotur - /hide -/vomit /eat");
		SendClientMessage(playerid,-1,"/wave - /slapass - /deal - /taichi - /crack - /smoke - /chat - /dance - /dancing /fuck - /taichi - /drinkwater - /pedmove");
		SendClientMessage(playerid,-1,"/checktime - /sleep - /blob - /opendoor - /wavedown - /reload - /cpr - /dive - /showoff - /box - /tag - /salute - /bat");
		SendClientMessage(playerid,-1,"/goggles - /cry - /dj - /cheer - /throw - /robbed - /hurt - /nobreath - /bar - /dancing - /rap - /piss");
		SendClientMessage(playerid,-1,"/handwash - /signal - /stop - /gsign - /lay - /lean - /aim - /fall - /camera - /riot");
		SendClientMessage(playerid,-1,"Karþýlýklý Animasyonlar: /selamlas");
	}*/

		public oyuncucoz(oyuncuid)
		{
			if(oyuncuData[oyuncuid][oYarali] == true) return false;

			TogglePlayerControllable(oyuncuid, true);
			return 1;
		}

		public biletsakla(oyuncuid)
		{
			TextDrawHideForPlayer(oyuncuid, bilet_0);
			TextDrawHideForPlayer(oyuncuid, bilet_2);
			PlayerTextDrawHide(oyuncuid, bilet_1[oyuncuid]);
			return 1;
		}

		public bagajyenile(vehicleid)
		{
			AracBilgi[vehicleid][aracBagajcan] = 0;
			if(GetTrunkStatus(AracBilgi[vehicleid][aracYarat])) return SetTrunkStatus(vehicleid, false);
			return 1;
		}

		public eskivirtual(oyuncuid, dunya) SetPlayerVirtualWorld(oyuncuid, dunya);

		public yukteslim(oyuncuid)
		{
			TogglePlayerControllable(oyuncuid, true);
			SetPlayerCheckpoint(oyuncuid, 2782.1765, 915.4534, 10.7500, 5.0);
			SunucuMesaji(oyuncuid, "Yükleri boþalttýn, ödeme almak için kamyonu geri teslim etmen gerekiyor.");
			return 1;
		}

		public yukal(oyuncuid)
		{
			TogglePlayerControllable(oyuncuid, true);
			SunucuMesaji(oyuncuid, "Yük aldýn, haritandaki kýrmýzý noktalarý takip edin.");
			return true;
		}

		function YetkiliBildirimTimer()
		{
			new sorusayi = 0, reklamsayi = 0, raporsayi = 0;
			foreach(new i : Player)
			{
				if(oyuncuData[i][oSoruAtti] >= 1)
				{
					sorusayi++;
				}
			}
			foreach(new i : Player)
			{
				if(oyuncuData[i][oRaporAtti] >= 1)
				{
					raporsayi++;
				}
			}
			for(new i = 0; i != MAX_REKLAM; i++) 
			{
				if(ReklamBilgi[i][reklamkullanimda] == true) reklamsayi++;
			}
			if(sorusayi > 0 || reklamsayi > 0){
				foreach(new i : Player)
				{
					if(oyuncuData[i][oHelper] > 0)
					{
						SCM_Ex(i, RENK_ACIKKIRMIZI, "Þu anda bakýlmayý bekleyen %d soru ve %d reklam var.", sorusayi, reklamsayi);
					}
				}
			}
			if(raporsayi > 0 || reklamsayi > 0){
				foreach(new i : Player){
					if(oyuncuData[i][oAdmin] > 0){
						SCM_Ex(i, RENK_ACIKKIRMIZI, "Þu anda bakýlmayý bekleyen %d rapor ve %d reklam var.", raporsayi, reklamsayi);
					}
				}
			}
			return 1;
		}

		function SunucuDakikaTimer()
		{
			 for(new weed = 0; weed < sizeof(WeedInfo); weed++)
			{
				if(WeedInfo[weed][weedPlanted] == 1 && WeedInfo[weed][weedTime] > 0)
				{
					WeedInfo[weed][weedTime]--;
				}
			}

			otokayit++;
			if(otokayit > 14) {
				otokayit = 0;
				foreach(new i : Player) if(IsPlayerConnected(i) && oyuncuData[i][oGiris] == true) OyuncuKaydet(i);
				foreach(new a : Araclar) Arac_Kaydet(a);
				for (new p = 0; p != MAKSIMUM_BENZIN_POMPASI; p++)  if(BenzinPompasi[p][pompaKullanimda]) Pompa_Kaydet(p);
			}
		for (new i = 0; i != MAKSIMUM_UYUSTURUCU; i ++) if(UyusturucuBilgi[i][uKullanimda] == true) {
			if(UyusturucuBilgi[i][uDakika] == 720) {
				UyusturucuBilgi[i][uBakim] = 0;
				Uyusturucu_Yenile(i);
			}
			if(UyusturucuBilgi[i][uDakika] >= 1440) {
				UyusturucuBilgi[i][uGun]++;
				UyusturucuBilgi[i][uBakim] = 0;
				Uyusturucu_Yenile(i);
				UyusturucuBilgi[i][uDakika] = 0;
				switch(UyusturucuBilgi[i][uGun]) {
					case 1: UyusturucuBilgi[i][uDurum] = 5, Uyusturucu_Yenile(i), Uyusturucu_Kaydet(i);
					case 2: UyusturucuBilgi[i][uDurum] = 7, Uyusturucu_Yenile(i), Uyusturucu_Kaydet(i);
					case 3: UyusturucuBilgi[i][uDurum] = 9, Uyusturucu_Yenile(i), Uyusturucu_Kaydet(i);
					case 4: UyusturucuBilgi[i][uDurum] = 12, Uyusturucu_Yenile(i), Uyusturucu_Kaydet(i);
					case 5: UyusturucuBilgi[i][uDurum] = 15, Uyusturucu_Yenile(i), Uyusturucu_Kaydet(i);
					case 6: UyusturucuBilgi[i][uDurum] = 20, Uyusturucu_Yenile(i), Uyusturucu_Kaydet(i);
					case 7: UyusturucuBilgi[i][uDurum] = 25, Uyusturucu_Yenile(i), Uyusturucu_Kaydet(i);
					case 8: UyusturucuBilgi[i][uDurum] = 30, Uyusturucu_Yenile(i), Uyusturucu_Kaydet(i);
					case 9: UyusturucuBilgi[i][uDurum] = 35, Uyusturucu_Yenile(i), Uyusturucu_Kaydet(i);
					case 10: UyusturucuBilgi[i][uDurum] = 45, Uyusturucu_Yenile(i), Uyusturucu_Kaydet(i);
					case 11: UyusturucuBilgi[i][uDurum] = 50, Uyusturucu_Yenile(i), Uyusturucu_Kaydet(i);
					case 12: UyusturucuBilgi[i][uDurum] = 60, Uyusturucu_Yenile(i), Uyusturucu_Kaydet(i);
					case 13: UyusturucuBilgi[i][uDurum] = 65, Uyusturucu_Yenile(i), Uyusturucu_Kaydet(i);
					case 14: UyusturucuBilgi[i][uDurum] = 70, Uyusturucu_Yenile(i), Uyusturucu_Kaydet(i);
					case 15: UyusturucuBilgi[i][uDurum] = 75, Uyusturucu_Yenile(i), Uyusturucu_Kaydet(i);
					case 16: UyusturucuBilgi[i][uDurum] = 100, Uyusturucu_Yenile(i), Uyusturucu_Kaydet(i);
					case 17: Uyusturucu_Sil(i);
				}
			}
			if(UyusturucuBilgi[i][uBakim] == 1) {
				UyusturucuBilgi[i][uDakika]++;
			}
		}
		for (new i = 0; i != MAKSIMUM_ARAC; i++) if(AracBilgi[i][aracKiralik] == 1)
		{
			if(AracBilgi[i][aKiraZaman] == 1)
			{
				AracBilgi[i][aKiraZaman] = 0;
				AracBilgi[i][aracAnahtar] = -1;
				AracBilgi[i][aracKilit] = 0;
				ASpawn(AracBilgi[i][aracYarat]);
				Arac_Kaydet(i);
			}
			else if(AracBilgi[i][aKiraZaman] > 1)
			{
				AracBilgi[i][aKiraZaman]--;
				Arac_Kaydet(i);
			}
		}
		for (new i = 0; i != MAKSIMUM_EV; i++) if(EvBilgi[i][evKullanimda] == true && EvBilgi[i][evBakimSure] > 0) {
			if(EvBilgi[i][evBakimSure] == 1) {
				EvBilgi[i][evDurum] = 1;
				Ev_Yenile(i);
				Ev_Kaydet(i);
			}
			EvBilgi[i][evBakimSure]--;
		}
		return 1;
	}

	function uyusturucubasdon(playerid)
	{
		SetPlayerDrunkLevel(playerid, 0);
		SetPlayerWeather(playerid, SunucuWeather);
		KillTimer(oyuncuData[playerid][oBagimlilikTimerEx]);
		return 1;
	}

	function uyusturucuetkibuyuk(playerid)
	{
		AnimOynat(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0, 1);
		//ApplyAnimation(playerid, "CRACK", "crackdeth2", 4.0, 1, 0, 0, 0, 0, 1);
		oyuncuData[playerid][oBagimlilikTimer] = 8;
		oyuncuData[playerid][oBagimlilikDurum] = 1;
		KillTimer(oyuncuData[playerid][oBagimlilikTimerEx]);
		return 1;
	}
	
	public vcguardtimer(playerid) {
	vcGuardMesaji(playerid, "Çift aþamalý doðrulama sistemi için size verilen süre doldu, kicklendiniz.");
	KickEx(playerid);
	}

	forward OneHourTimer();
	public OneHourTimer() {
	for (new d = 0; d != MAX_CIFTLIK; d ++) if(CiftlikInfo[d][cAktif] && CiftlikInfo[d][cUrun] > 0 && CiftlikInfo[d][cOlgunlasma] > 0) {
	CiftlikInfo[d][cOlgunlasma] -= 1;
	new query[110];
	mysql_format(g_SQL, query, sizeof(query), "UPDATE arsalar SET olgunlasma = '%d' WHERE id = '%d'", CiftlikInfo[d][cOlgunlasma], d);
	mysql_tquery(g_SQL, query);
	}	
	}

	forward vc_DakikaTimer(playerid);
	public vc_DakikaTimer(playerid)
	{
		if(oyuncuData[playerid][oGiris] == false) return 1;
	    //SCM_Ex(playerid, -1, "Say: %d", oyuncuData[playerid][pDakikaTimeri]);

		if(oyuncuData[playerid][oBagimlilikTimer] == 0)
		{
			oyuncuData[playerid][oBagimlilikTimer] = 8;

			if(oyuncuData[playerid][oBagimlilik] >= 25)
			{
				SetPlayerDrunkLevel(playerid, 6000);
				oyuncuData[playerid][oBagimlilikTimerEx] = SetTimerEx("uyusturucubasdon", 15000, false, "i", playerid);
				SunucuMesaji(playerid, "Baþýnýn döndüðünü hissediyorsun, yoksunluk çekiyor olabilirsin. Uyuþturucu bulmayý dene.");
			}

			if(oyuncuData[playerid][oBagimlilik] >= 40)
			{
				SetPlayerDrunkLevel(playerid, 8000);
				SetPlayerWeather(playerid, 20);
				oyuncuData[playerid][oBagimlilikTimerEx] = SetTimerEx("uyusturucubasdon", 15000, false, "i", playerid);
				SunucuMesaji(playerid, "Baþýnýn döndüðünü hissediyorsun, yoksunluk çekiyor olabilirsin. Uyuþturucu bulmayý dene.");
			}

			if(oyuncuData[playerid][oBagimlilik] >= 60)
			{
				SetPlayerDrunkLevel(playerid, 10000);
				SetPlayerWeather(playerid, 20);

				/*if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
				{
					cmd(playerid, 0, "arac motor");
				}*/

				new string[38 + MAX_PLAYER_NAME];
				format(string, sizeof(string), "* %s krize giriyor, titremrye baþladý.", OyuncuIsim(playerid));
				SetPlayerChatBubble(playerid, string, RENK_PEMBE, 30.0, 10 * 1000);
				SCM_Ex(playerid, RENK_PEMBE, "* %s krize giriyor, titremeye baþladý.", OyuncuIsim(playerid));

				if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
				{
					oyuncuData[playerid][oBagimlilikTimerEx] = SetTimerEx("uyusturucuetkibuyuk", 6000, false, "i", playerid);
				}
				SunucuMesaji(playerid, "Terlemeye baþladýn, yoksunluk çekiyorsun.");
			}
		}

		if(oyuncuData[playerid][oBagimlilikTimer] > 3)
		{
			if(oyuncuData[playerid][oBagimlilik] >= 25)
			{
				SetPlayerDrunkLevel(playerid, 6000);
				oyuncuData[playerid][oBagimlilikTimerEx] = SetTimerEx("uyusturucubasdon", 15000, false, "i", playerid);
			}

			if(oyuncuData[playerid][oBagimlilik] >= 40)
			{
				SetPlayerDrunkLevel(playerid, 8000);
				SetPlayerWeather(playerid, 20);
				oyuncuData[playerid][oBagimlilikTimerEx] = SetTimerEx("uyusturucubasdon", 15000, false, "i", playerid);
			}

			if(oyuncuData[playerid][oBagimlilik] >= 60)
			{
				//if(!IsPlayerInAnyVehicle(playerid)) AnimOynat(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0, 1);
				
				new string[38 + MAX_PLAYER_NAME];
				format(string, sizeof(string), "* %s krize giriyor, titremeye baþladý.", OyuncuIsim(playerid));
				SetPlayerChatBubble(playerid, string, RENK_PEMBE, 30.0, 10 * 1000);
				SCM_Ex(playerid, RENK_PEMBE, "* %s krize giriyor, titremeye baþladý.", OyuncuIsim(playerid));
				oyuncuData[playerid][oBagimlilikTimer] = -1;
			}
		}

		if(oyuncuData[playerid][oBagimlilikTimer] == 3)
		{
			oyuncuData[playerid][oBagimlilikTimer] = -1;
		}

		if(oyuncuData[playerid][pDakikaTimeri] >= 60)
		{
			oyuncuData[playerid][oBagimlilikEtki]--;
			if(oyuncuData[playerid][oBagimlilikEtki] == 0 && oyuncuData[playerid][oBagimlilik] >= 25)
			{
				GameTextForPlayer(playerid, "~r~Kriz yaklasiyor..", 5000, 4);
				oyuncuData[playerid][oBagimlilikTimer] = 2;

				new string[38 + MAX_PLAYER_NAME];
				format(string, sizeof(string), "* %s terlemeye baþladý, uyuþturucu krizine giriyor.", OyuncuIsim(playerid));
				SetPlayerChatBubble(playerid, string, RENK_PEMBE, 30.0, 10 * 1000);
				SCM_Ex(playerid, RENK_PEMBE, "* %s terlemeye baþladý, uyuþturucu krizine giriyor.", OyuncuIsim(playerid));
			}

			if(GetPVarInt(playerid, "usatis") == 1)
			{
				if(!GIsPlayerPaused(playerid))
				{
					new vcm[60], sayi;
					sayi = randomEx(1, 6);
					oyuncuData[playerid][oUmiktar] += sayi;
					format(vcm, sizeof(vcm), "~g~~h~Satilan Uyusturucu: ~w~%d gr", oyuncuData[playerid][oUmiktar]);
					BilgiText(playerid, vcm, 59000);
					if(oyuncuData[playerid][oUmiktar] * 10 > 2000)
					{
						SunucuMesaji(playerid, "Paketinizdeki tüm uyuþturucularý sattýnýz, satýlan uyuþturucu miktarý: %d gr", oyuncuData[playerid][oUmiktar]);
						ParaEkle(playerid, oyuncuData[playerid][oUmiktar] * 10);
						oyuncuData[playerid][oUmiktar] = 0;
						BilgiText(playerid, "~g~~h~Uyusturucular Satildi!", 1000);
						new query[110], Cache:GetCache, satissayisi;
						mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM oyuncular WHERE ID = '%d'", oyuncuData[playerid][oID]);
						GetCache = mysql_query(g_SQL, query);	
						cache_get_value_name_int(0, "SatilanUyusturucu", satissayisi);
						cache_delete(GetCache);
						satissayisi++;
						mysql_format(g_SQL, query, sizeof(query), "UPDATE oyuncular SET SatilanUyusturucu = '%d' WHERE ID = '%d'", satissayisi, oyuncuData[playerid][oID]);
						mysql_query(g_SQL, query);
						DeletePVar(playerid, "usatis");
					}
				}
			}

		    //SCM_Ex(playerid, RENK_KIRMIZI, "Dakika geçiþ!");
			oyuncuData[playerid][pDakikaTimeri] = 0;
			if(oyuncuData[playerid][oHapisSure][0] > 0) {
				if(!IsPlayerInRangeOfPoint(playerid, 1.0, oyuncuData[playerid][oPos][0], oyuncuData[playerid][oPos][1], oyuncuData[playerid][oPos][2])) HapiseAt(playerid);
				if(oyuncuData[playerid][oHapisSure][0] < 2) {
					SetPlayerPos(playerid, 1529.6327, -1683.8873, 13.3828);
					SetPlayerInterior(playerid, 0);
					SetPlayerVirtualWorld(playerid, 0);
					PlayerTextDrawHide(playerid, HapisText[playerid]);
					SunucuMesaji(playerid, "Hapis süreniz bitti.");
					OyuncuKaydet(playerid);
					TogglePlayerControllable(playerid, true);
					PlayerTextDrawHide(playerid, HapisText[playerid]);
				}
				PlayerTextDrawHide(playerid, HapisText[playerid]);
				new hstr[256];
				format(hstr, sizeof(hstr), "~b~~h~~h~Kalan Sure:~w~ %d dk.", oyuncuData[playerid][oHapisSure][0]);
				PlayerTextDrawSetString(playerid, HapisText[playerid], hstr);
				oyuncuData[playerid][oHapisSure][0]--;
				PlayerTextDrawShow(playerid, HapisText[playerid]);
			}
			if(oyuncuData[playerid][oHapisSure][1] > 0  && oyuncuData[playerid][oAdminDurum] == false) {
				PlayerTextDrawHide(playerid, HapisText[playerid]);
				new hstr[256];
				format(hstr, sizeof(hstr), "~b~~h~~h~Kalan Sure:~w~ %d dk.", oyuncuData[playerid][oHapisSure][1]);
				PlayerTextDrawSetString(playerid, HapisText[playerid], hstr);
				PlayerTextDrawShow(playerid, HapisText[playerid]);
				if(oyuncuData[playerid][oHapisSure][1] < 2) {
					SetPlayerPos(playerid, 1529.6327, -1683.8873, 13.3828);
					SetPlayerInterior(playerid, 0);
					SetPlayerVirtualWorld(playerid, 0);
					oyuncuData[playerid][oHapisID] = -1;
					PlayerTextDrawHide(playerid, HapisText[playerid]);
					SunucuMesaji(playerid, "Hapis süreniz bitti.");
					OyuncuKaydet(playerid);
					TogglePlayerControllable(playerid, true);
				}
				oyuncuData[playerid][oHapisSure][1]--;
			}
			new zamanstring[64];
			format(zamanstring, sizeof zamanstring, "%s", Tarih());
			PlayerTextDrawSetString(playerid, sagaltdraw[playerid][2], zamanstring);
			if(oyuncuData[playerid][oIsbasi] == true)
			{
				oyuncuData[playerid][oMaasDakika]++;
			}
			else
			{
				oyuncuData[playerid][oDakika]++;
			}
			if(oyuncuData[playerid][oDakika] == 15 || oyuncuData[playerid][oDakika] == 30 || oyuncuData[playerid][oDakika] == 45 || oyuncuData[playerid][oDakika] == 58)
			{
				if(oyuncuData[playerid][oKokuDurum] == 1)
				{
					static string[128];
					format(string, sizeof(string), "** %s etrafýna kötü kokular yaymaktadýr.", OyuncuIsim(playerid));
					SetPlayerChatBubble(playerid, string, RENK_PEMBE, 30.0, 10 * 1000);
					SCM_Ex(playerid, RENK_PEMBE, "** %s etrafýna kötü kokular yaymaktadýr.", OyuncuIsim(playerid));
				}
			}
			if(oyuncuData[playerid][oDakika] > 59 || oyuncuData[playerid][oMaasDakika] > 59)
			{
				if(oyuncuData[playerid][oHirsizlikYetenek] == 1) oyuncuData[playerid][oAracCalmaSiniri] = 1;
				else if(oyuncuData[playerid][oHirsizlikYetenek] == 2) oyuncuData[playerid][oAracCalmaSiniri] = 1;
				else if(oyuncuData[playerid][oHirsizlikYetenek] == 3) oyuncuData[playerid][oAracCalmaSiniri] = 2;
				else if(oyuncuData[playerid][oHirsizlikYetenek] == 4) oyuncuData[playerid][oAracCalmaSiniri] = 2;
				else if(oyuncuData[playerid][oHirsizlikYetenek] == 5) oyuncuData[playerid][oAracCalmaSiniri] = 2;
				else if(oyuncuData[playerid][oHirsizlikYetenek] == 6) oyuncuData[playerid][oAracCalmaSiniri] = 3;
				else if(oyuncuData[playerid][oHirsizlikYetenek] == 7) oyuncuData[playerid][oAracCalmaSiniri] = 3;
				else if(oyuncuData[playerid][oHirsizlikYetenek] == 8) oyuncuData[playerid][oAracCalmaSiniri] = 4;
				else if(oyuncuData[playerid][oHirsizlikYetenek] == 9) oyuncuData[playerid][oAracCalmaSiniri] = 4;
				else if(oyuncuData[playerid][oHirsizlikYetenek] == 10) oyuncuData[playerid][oAracCalmaSiniri] = 5;
				oyuncuData[playerid][oBalikTutmaSinir] = 0;
				if(HirsizDurum[playerid] == true)
				{
					new saat,timestamp[30];
					gettime(saat);
					format(timestamp, sizeof(timestamp), "%02d", saat);
					if(strval(timestamp) < 21 && strval(timestamp) > 6) {
						HirsizDurum[playerid] = false;
						SunucuMesaji(playerid, "Soygun saatleri aþýldýði için otomatik olarak soygun modundan çýkarýldýnýz.");
					}
				}
				new ustlevel = oyuncuData[playerid][oSeviye] + 1, levelatlamaexp = ustlevel * levelexp;
				if(oyuncuData[playerid][oDortXExp] == 1)
				{
					oyuncuData[playerid][oExp] += 4;
					oyuncuData[playerid][oOynamaSaati]++;
				}
				else if(oyuncuData[playerid][oikixpayday] == 1 || IKIX_PAYDAY == true)
				{
					oyuncuData[playerid][oExp] += 2;
					oyuncuData[playerid][oOynamaSaati]++;
				}
				else
				{
					oyuncuData[playerid][oExp]++;
					oyuncuData[playerid][oOynamaSaati]++;
				}
				static maas;
				switch(oyuncuData[playerid][oSeviye])
				{
					case 1..5: maas = 150;
					case 6..9: maas = 160;
					case 10..19: maas = 175;
					case 20..29: maas = 185;
					case 30..900: maas = 200;
				}
				if(IKIX_PAYDAY == true)
				{
					maas = maas * 1;
				}
				new vcoin;
				switch(oyuncuData[playerid][oVIP])
				{
					case 1: vcoin = 2;
					default: vcoin = 1;
				}
				oyuncuData[playerid][oViceCoin] += vcoin;
				HesapKaydet(playerid);
				if((OyuncuBirlikTuru(playerid) == BIRLIK_POLIS || OyuncuBirlikTuru(playerid) == BIRLIK_DEVLET) && oyuncuData[playerid][oIsbasi] == true)
				{
					static bonus;
					switch(oyuncuData[playerid][oBirlikRutbe])
					{
						case 1: bonus = 325;
                        case 2: bonus = 350;
                        case 3: bonus = 380;
                        case 4,5: bonus = 400;
                        case 6,7: bonus = 420;
                        case 8,9: bonus = 440;
                        case 10: bonus = 470;
                        case 11: bonus = 490;
                        case 12,13: bonus = 500;
                        case 14: bonus = 520;
                        case 15,16: bonus = 530;
                        case 17,18: bonus = 540;
                        case 19,20: bonus = 560;
					}
					SCM_Ex(playerid, RENK_KLASIK, "EXP Ýlerlemesi: [{FFFFFF}%d/%d{99C794}] | Banka Parasý: [{FFFFFF}%s{99C794}]", oyuncuData[playerid][oExp], levelatlamaexp, NumaraFormati(oyuncuData[playerid][oBankaPara]));
					SCM_Ex(playerid, RENK_KLASIK, "Kazanýlan Maaþ: [{FFFFFF}%s{99C794}] | Kazanýlan vCoin: [{FFFFFF}%d{99C794}]", NumaraFormati(bonus), vcoin);
					oyuncuData[playerid][oBankaPara] += bonus;
					oyuncuData[playerid][oMaasDakika] = 0;
				}
				else if(OyuncuBirlikTuru(playerid) == BIRLIK_MEDIKAL && oyuncuData[playerid][oIsbasi] == true)
				{
					static bonus;
					switch(oyuncuData[playerid][oBirlikRutbe])
					{
						case 1: bonus = 355;
                        case 2: bonus = 370;
                        case 3: bonus = 400;
                        case 4,5: bonus = 420;
                        case 6,7: bonus = 440;
                        case 8,9: bonus = 460;
                        case 10: bonus = 490;
                        case 11: bonus = 510;
                        case 12,13: bonus = 530;
                        case 14: bonus = 550;
                        case 15,16: bonus = 570;
                        case 17,18: bonus = 590;
                        case 19,20: bonus = 600;
					}
					SCM_Ex(playerid, RENK_KLASIK, "EXP Ýlerlemesi: [{FFFFFF}%d/%d{99C794}] | Banka Parasý: [{FFFFFF}%s{99C794}]", oyuncuData[playerid][oExp], levelatlamaexp, NumaraFormati(oyuncuData[playerid][oBankaPara]));
					SCM_Ex(playerid, RENK_KLASIK, "Kazanýlan Maaþ: [{FFFFFF}%s{99C794}] | Kazanýlan vCoin: [{FFFFFF}%d{99C794}]", NumaraFormati(bonus), vcoin);
					oyuncuData[playerid][oBankaPara] += bonus;
					oyuncuData[playerid][oMaasDakika] = 0;
				}
				else
				{
					oyuncuData[playerid][oBankaPara] += maas;
					SCM_Ex(playerid, RENK_KLASIK, "EXP Ýlerlemesi: [{FFFFFF}%d/%d{99C794}] | Banka Parasý: [{FFFFFF}%s{99C794}]", oyuncuData[playerid][oExp], levelatlamaexp, NumaraFormati(oyuncuData[playerid][oBankaPara]));
					SCM_Ex(playerid, RENK_KLASIK, "Kazanýlan Maaþ: [{FFFFFF}%s{99C794}] | Kazanýlan vCoin: [{FFFFFF}%d{99C794}]", NumaraFormati(maas), vcoin);
					oyuncuData[playerid][oDakika] = 0;
				}
				for(new e = 0; e != MAKSIMUM_EV; e++) if(EvBilgi[e][evKullanimda] && EvBilgi[e][evKiraci] == oyuncuData[playerid][oID]) {
					if(oyuncuData[playerid][oBankaPara] >=  EvBilgi[e][evKiraUcret]) oyuncuData[playerid][oBankaPara] -= EvBilgi[e][evKiraUcret], EvBilgi[e][evKasa] += EvBilgi[e][evKiraUcret];
					else hataMesaji(playerid, "Banka hesabýnda kira ödemesi için yeterli ücret bulunamadý, kiracýlýktan çýkarýldýn."), EvBilgi[e][evKiraci] = 0, Ev_Kaydet(e);
					Ev_Kaydet(e);
					break;
				}
				for(new i = 0; i != MAKSIMUM_ISYERI; i ++) if(IsyeriBilgi[i][isyeriKullanimda] && IsyeriBilgi[i][isyeriSahip] == oyuncuData[playerid][oID])
				{
					new isyerigelir = IsyeriGelirAlgoritma(i);
					IsyeriBilgi[i][isyeriKasa] += isyerigelir;
					Isyeri_Kaydet(i);
				}
				if(oyuncuData[playerid][oMevduat] != 0)
				{
					if(oyuncuData[playerid][oMevduat] < mevduatLimit(playerid))
					{
						SCM_Ex(playerid, RENK_KLASIK, "   Mevduat (Yüzde): {FFFFFF}0.003");
						SCM_Ex(playerid, RENK_KLASIK, "   Mevduat (Miktar): {FFFFFF}%i$", floatround(oyuncuData[playerid][oMevduat] * 0.003));
						oyuncuData[playerid][oMevduat] += floatround(oyuncuData[playerid][oMevduat] * 0.003);
						SCM_Ex(playerid, RENK_KLASIK, "   Mevduat (Banka Hesabý): {FFFFFF}%i$", oyuncuData[playerid][oMevduat]);
					}
					else
					{
						hataMesaji(playerid, "Mevduat hesabýnýz maksimum miktarda doldurulmuþ. (%d/%d)", oyuncuData[playerid][oMevduat], mevduatLimit(playerid));
					}
				}
				oyuncuData[playerid][oGYMHak] = 0;
				if(oyuncuData[playerid][oBirikenKoku] < 10) oyuncuData[playerid][oBirikenKoku]++;
				if(oyuncuData[playerid][oBirikenKoku] >= 10)
				{
					SCM_Ex(playerid, RENK_GRI, "Berbat kokuyorsun, marketten deodorant alýp üstüne sýkmazsan rezil olabilirsin.");
					oyuncuData[playerid][oKokuDurum] = 1;
				}
				if(oyuncuData[playerid][oExp] >= levelatlamaexp)
				{
					oyuncuData[playerid][oExp] -= levelatlamaexp;
					oyuncuData[playerid][oSeviye]++;
					SCM_Ex(playerid, 0x009F2CFF, "Seviyen yükseldi! Yeni seviyen: %d", oyuncuData[playerid][oSeviye]);
					oyuncuData[playerid][oYetenekPuani]++;
					SCM_Ex(playerid, 0x009F2CFF, "Seviye atladýðýn için bir yetenek puaný kazandýn ayrýca 1000$ bonusu kaptýn.");
					ParaEkle(playerid, 1000);
				}
				new yetenekstring[32];
				format(yetenekstring, sizeof yetenekstring, "%d", oyuncuData[playerid][oYetenekPuani]);
				PlayerTextDrawSetString(playerid, sagaltdraw[playerid][3], yetenekstring);
			}
			new paydaystring[6];
			format(paydaystring, sizeof paydaystring, "%d", 60 - oyuncuData[playerid][oDakika]);
			PlayerTextDrawSetString(playerid, sagaltdraw[playerid][4], paydaystring);
			OyuncuKaydet(playerid);
		}
		return 1;
	}

	public levelsenk(playerid)
	{
		new ustlevel = oyuncuData[playerid][oSeviye] + 1, levelatlamaexp = ustlevel * levelexp;
		if(oyuncuData[playerid][oExp] >= levelatlamaexp)
		{
			oyuncuData[playerid][oExp] -= levelatlamaexp;
			oyuncuData[playerid][oSeviye]++;
			SetTimerEx("levelsenk", 1, false, "i", playerid);
		}
		return 1;
	}

	forward OyuncuSaniyeTimer(playerid);
	public OyuncuSaniyeTimer(playerid)
	{
		if(oyuncuData[playerid][oGiris] == false) return 1;
		oyuncuData[playerid][pDakikaTimeri]++;
		static mesaj[256], Float:can, Float:zirh, id, tarih[36];

		if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS)
		{
			new player_weaponid = GetPlayerWeapon(playerid);
			if(player_weaponid == WEAPON_COLT45 || player_weaponid == WEAPON_DEAGLE || player_weaponid == WEAPON_UZI || player_weaponid == WEAPON_SHOTGUN || player_weaponid == WEAPON_AK47)
			{
				new Cache:kontrol, query[256], rows;
				mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM player_weapons WHERE weapon_gameid = '%d' AND weapon_statusid = '%d'", player_weaponid, SILAH_OYUNCU_USTUNDE);
				kontrol = mysql_query(g_SQL, query);
				cache_get_row_count(rows);
				if(rows == 0)
				{
					for (new i = 0; i < 13; i ++) {
						oyuncuData[playerid][oSilah][i] = 0;
					}
					SilahSilEx(playerid, player_weaponid);
				}
				cache_delete(kontrol);
			}
		}
		GetPlayerHealth(playerid, can);
		GetPlayerArmour(playerid, zirh);
		getdate(tarih[2], tarih[1], tarih[0]);
		gettime(tarih[3], tarih[4], tarih[5]);
		//printf("%d", GetPlayerAnimationIndex(playerid));
		if(oyuncuData[playerid][oYaraliSure] > 0 && GetPlayerAnimationIndex(playerid) != 1150) ApplyAnimation(playerid, "PED", "FLOOR_hit", 4.1, 0, 1, 1, 1, 0, 1);

		if(oyuncuData[playerid][oYarali] == false && oyuncuData[playerid][oYaraliSure] > 0) oyuncuData[playerid][oYarali] = true;
		if(IcecekBeklemeSuresi[playerid] > 0) IcecekBeklemeSuresi[playerid]--;
		if(IsPlayerInAnyVehicle(playerid)) if(AracBilgi[Arac_IDBul(GetPlayerVehicleID(playerid))][aracTur] == 1 && AracHizKontrol(playerid) > 55) {
			oyuncuData[playerid][oEhliyetUyari]++;
			if(oyuncuData[playerid][oEhliyetUyari] > 2) EhliyetTestiiptal(playerid), UyariMesaji(playerid, "Ehliyet testi hýz sýnýrýný geçtiðin için testin iptal oldu.");
			else if(oyuncuData[playerid][oEhliyetUyari] < 3) UyariMesaji(playerid, "Ehliyet testi hýz sýnýrýný geçtiðiniz için uyarý aldýnýz, yavaþ kullanýn. (%d/3)", oyuncuData[playerid][oEhliyetUyari]);
		}

		if(RecentlyFired[playerid] != 0)
		{
 			RecentlyFired[playerid] -= 1;
		}

		if(TransportTime[playerid] > 0)
		{
			if(TransportTime[playerid] >= 31)
			{
				TransportTime[playerid] = 1;
				if(TransportDriver[playerid] < 999 && TransportDuty[playerid] != 1)
				{
					if(IsPlayerConnected(TransportDriver[playerid]))
					{
						TransportCost[playerid] += TransportValue[TransportDriver[playerid]];
						TransportCost[TransportDriver[playerid]] = TransportCost[playerid];
					}
				}
			}

			new string[128];
			TransportTime[playerid]++;
			format(string, sizeof(string), "sure: %d ~g~ucret: %d$",TransportTime[playerid],TransportCost[playerid]);
			GameTextForPlayer(playerid, string,250,1);
		}
		if(oyuncuData[playerid][oTamirSure] > 0) {
			oyuncuData[playerid][oTamirSure]--;
			format(mesaj, sizeof(mesaj), "~r~TAMIR: ~w~%d saniye", oyuncuData[playerid][oTamirSure]);
			GameTextForPlayer(playerid, mesaj, 1000, 3);
		}
		if(oyuncuData[playerid][oGraffitiSure] > 0)
		{
			if(oyuncuData[playerid][oGraffitiSure] <= 1){GraffitiBitir(playerid);}
			else{

				oyuncuData[playerid][oGraffitiSure]--;
				format(mesaj, sizeof(mesaj), "~b~~h~~h~OLUSTURULUYOR: ~w~%d saniye", oyuncuData[playerid][oGraffitiSure]);
				GameTextForPlayer(playerid, mesaj, 1000, 3);
				SetPlayerAttachedObject(playerid, 5, 18729, 6, -0.048000, -0.272000, 0.048999, -70.899963, 23.499889, -81.500015, 0.354000, 0.947000, 0.182999);
				ApplyAnimation(playerid, "GRAFFITI", "spraycan_fire", 4.1, 1, 0, 0, 0, 0, 1);}
			}
			if(oyuncuData[playerid][oYaraliSure] > 0) {
				if(oyuncuData[playerid][oYaraliSure] <= 1) BayginlikBitir(playerid);

				oyuncuData[playerid][oYaraliSure]--;
				format(mesaj, sizeof(mesaj), "~r~YARALISIN: ~w~%d saniye", oyuncuData[playerid][oYaraliSure]);
				GameTextForPlayer(playerid, mesaj, 1000, 3);
			}
			if(oyuncuData[playerid][oDonduruldu] > 0)
			{
				oyuncuData[playerid][oDonduruldu]--;
				format(mesaj, sizeof(mesaj), "~r~DONDURULMA ETKISI: ~w~%d saniye", oyuncuData[playerid][oDonduruldu]);
				GameTextForPlayer(playerid, mesaj, 1000, 3);
				if(GetPlayerAnimationIndex(playerid) != 386) ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.1, 1, 0, 0, 0, 0);
				if(!oyuncuData[playerid][oDonduruldu])
				{
					ClearAnimations(playerid);
					TogglePlayerControllable(playerid, true);
				}
			}
			if(oyuncuData[playerid][oArama] > -1 && oyuncuData[playerid][oCevaplandi] == true) {
				oyuncuData[playerid][oAramaSure]++;
			}
			if((id = Boombox_Yakin(playerid)) != INVALID_PLAYER_ID && oyuncuData[playerid][oBoombox] != id && strlen(BoomboxBilgi[id][boomboxURL]) && !IsPlayerInAnyVehicle(playerid))
			{
				strunpack(mesaj, BoomboxBilgi[id][boomboxURL]);
				oyuncuData[playerid][oBoombox] = id;
				StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, mesaj, BoomboxBilgi[id][boomboxPos][0], BoomboxBilgi[id][boomboxPos][1], BoomboxBilgi[id][boomboxPos][2], 30.0, 1);
			}
			else if(oyuncuData[playerid][oBoombox] != INVALID_PLAYER_ID && !IsPlayerInRangeOfPoint(playerid, 30.0, BoomboxBilgi[oyuncuData[playerid][oBoombox]][boomboxPos][0], BoomboxBilgi[oyuncuData[playerid][oBoombox]][boomboxPos][1], BoomboxBilgi[oyuncuData[playerid][oBoombox]][boomboxPos][2]))
				oyuncuData[playerid][oBoombox] = INVALID_PLAYER_ID, StopAudioStreamForPlayer(playerid);
			return 1;
		}

		forward CiftlikBar(playerid, id, list);
			public CiftlikBar(playerid, id, list)
			{
			if(GetPlayerProgressBarValue(playerid, ciftlikprog[playerid]) >= CiftlikInfo[id][cDonum])
			{
				

				SunucuMesaji(playerid, "Baþarýyla çiftliðinize %s bitkisini ektiniz.", ekinlerveri[list][ekinisim]);
				Doluluk[playerid] = 0;
				CiftlikInfo[id][cIslem] = false;
				HidePlayerProgressBar(playerid, ciftlikprog[playerid]);
				DestroyPlayerProgressBar(playerid, ciftlikprog[playerid]);
				TextDrawHideForPlayer(playerid, ciftlik_0);
				TextDrawHideForPlayer(playerid, ciftlik_1);
				KillTimer(ciftlikUpdater[playerid]);
				SetPVarInt(playerid, "CiftlikEkimIslem", 0);
				DeletePVar(playerid, "CiftlikEkimIslem");
				return 1;
			}

			if(oyuncuData[playerid][oCiftlik] != -1)
			{
				if(floatround(GetVehicleSpeed2(GetPlayerVehicleID(playerid), 0)) > 15) {
				Doluluk[playerid] += 5;
				SetPlayerProgressBarValue(playerid, ciftlikprog[playerid], Doluluk[playerid]);
				EkinYarat(playerid, id);
			}
			}
			else
			{
				UyariMesaji(playerid, "Tarla sýnýrlarý dýþýna çýktýðýnýz için ekim iþlemi kesildi.");
				new cc = GetPVarInt(playerid,"oncekiciftlik");
				CiftlikInfo[cc][cIslem] = false;
				Doluluk[playerid] = 0;
				HidePlayerProgressBar(playerid, ciftlikprog[playerid]);
				TextDrawHideForPlayer(playerid, ciftlik_0);
				TextDrawHideForPlayer(playerid, ciftlik_1);
				KillTimer(ciftlikUpdater[playerid]);
				SetPVarInt(playerid, "CiftlikEkimIslem", 0);
				DeletePVar(playerid, "CiftlikEkimIslem");
				DeletePVar(playerid, "oncekiciftlik");
			}
			return 1;
		} 

		forward truckerariza(playerid);
		public truckerariza(playerid)
		{
			GameTextForPlayer(playerid, "ARIZA DUZELDI... YOLA DEVAM!", 3500, 3);
			TogglePlayerControllable(playerid, true);
			if(oyuncuData[playerid][oTirGuzergah] == 4) SetPlayerCheckpoint(playerid,1666.7053,-870.7173,60.7799,5.0);
			return 1;
		}

		forward truckermola(playerid);
		public truckermola(playerid)
		{
			GameTextForPlayer(playerid, "MOLA SONA ERDI... YOLA DEVAM!", 3500, 3);
			TogglePlayerControllable(playerid, true);
			if(oyuncuData[playerid][oTirGuzergah] == 2) SetPlayerCheckpoint(playerid,-1206.9690,1861.5886,41.8115,5.0);
			else if(oyuncuData[playerid][oTirGuzergah] == 4) SetPlayerCheckpoint(playerid,1401.7883,443.5526,20.6263,5.0);
			return 1;
		}

		forward truckerbeklet(playerid);
		public truckerbeklet(playerid)
		{
	//new aracid = GetPlayerVehicleID(playerid);
			if(truckerseviyebirde[playerid] > 0 || truckerseviyeikide[playerid] > 0)
			{
				GameTextForPlayer(playerid, "MALLAR YUKLENDI!", 2500, 3);
				TogglePlayerControllable(playerid, true);
				SendClientMessage(playerid, RENK_KLASIK, "Mallar aracýna yüklendi, devam et!");
				if(truckerseviyebirde[playerid] > 0) SetPlayerCheckpoint(playerid, 1073.3940,-330.4630,73.9753, 5.0);
				else if(truckerseviyeikide[playerid] > 0) SetPlayerCheckpoint(playerid,832.1244,-565.1978,16.2810,5.0);
				oyuncuData[playerid][oTruckerBasari] = true;
			}
			else if(truckerseviyeucte[playerid] > 0)
			{
				if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
				{
					truckerseviyeucte[playerid] = 0;
					RemovePlayerFromVehicle(playerid);
					ASpawn(GetPlayerVehicleID(playerid));
					oyuncuData[playerid][oTirGuzergah] = 0;
					SetPlayerPos(playerid, 2289.5610,-2357.6519,13.5469);
					DisablePlayerCheckpoint(playerid);
					hataMesaji(playerid, "Dorse bulunamadý, görev baþarýsýz.");
					TogglePlayerControllable(playerid, true);
					return 1;
				}
				else
				{
					DorseYuku[GetPlayerVehicleID(playerid)] = false;
					SetVehicleToRespawn(GetVehicleTrailer(GetPlayerVehicleID(playerid)));

					GameTextForPlayer(playerid, "DORSE BIRAKILDI!", 2500, 3);
					TogglePlayerControllable(playerid, true);
					SendClientMessage(playerid, RENK_KLASIK, "Dorseyi teslim ettin, þimdi geri dönmelisin.");
					if(oyuncuData[playerid][oTirGuzergah] == 1) SetPlayerCheckpoint(playerid,-2253.3892,2329.1965,5.8326,5.0);
					else if(oyuncuData[playerid][oTirGuzergah] == 2) SetPlayerCheckpoint(playerid,-1245.6908,2676.2278,48.3646,5.0);
					else if(oyuncuData[playerid][oTirGuzergah] == 3) SetPlayerCheckpoint(playerid,2796.1250,1265.6013,11.3344,5.0);
					else if(oyuncuData[playerid][oTirGuzergah] == 4) SetPlayerCheckpoint(playerid,-276.8288,1114.2740,20.1808,5.0);
					oyuncuData[playerid][oTruckerBasari] = true;
				}
			}
			return 1;
		}

		forward OnCreateYat(playerid);
		public OnCreateYat(playerid) {
			SendClientMessage(playerid, RENK_ACIKYESIL, "Satýn alma iþlemini baþarýyla gerçekleþtirdiniz.");
			SendClientMessage(playerid, RENK_ACIKYESIL, "Yatýnýz deniz fenerinin yanýnda bulunan iskelededir.");
			return 1;
		}

		forward OnCommandCreateShell(playerid, silah);
		public OnCommandCreateShell(playerid, silah)
		{
			new string[128];
			new     rows,
						serial,
							Float:X,
								Float:Y,
									Float:Z;

			GetPlayerPos(playerid, X, Y, Z);
			cache_get_row_count(rows);
			for(new i = 0; i != rows; i++)
			{
				cache_get_value_index_int(i, 0, serial);
				if(silah == 30) // aks
				{
					for(new shell = 0; shell < sizeof(ShellInfo); shell++)
					{
						if(ShellInfo[shell][shellDropped] == 0)
						{
							GetPlayerPos(playerid, X, Y, Z);
							if(!serial) format(string, sizeof(string), "MERMÝ KOVANI: 7.62×39MM | XXXXXX\n/kovantopla");
							else format(string, sizeof(string), "MERMÝ KOVANI: 7.62×39MM | %i\n/kovantopla", serial);
							ShellInfo[shell][ShellCasing] = CreateDynamic3DTextLabel(string, COLOR_LIGHTRED, X, Y, Z-1, 2.0);
							ShellInfo[shell][shellDropped] = 1;
							ShellInfo[shell][shellX] = X;
							ShellInfo[shell][shellY] = Y;
							ShellInfo[shell][shellZ] = Z;
							ShellInfo[shell][shellWorld] = GetPlayerVirtualWorld(playerid);
							ShellInfo[shell][shellTime] = 15;
							ShellInfo[shell][shellSerial] = serial;
							return 1;
						}
					}
				}
				if(silah == 28) // Uzi's
				{
					for(new shell = 0; shell < sizeof(ShellInfo); shell++)
					{
						if(ShellInfo[shell][shellDropped] == 0)
						{
							GetPlayerPos(playerid, X, Y, Z);
							if(!serial) format(string, sizeof(string), "MERMÝ KOVANI: .22 LR | XXXXXX\n/kovantopla");
							else format(string, sizeof(string), "MERMÝ KOVANI: .22 LR | %i\n/kovantopla", serial);
							ShellInfo[shell][ShellCasing] = CreateDynamic3DTextLabel(string, COLOR_LIGHTRED, X, Y, Z-1, 2.0);
							ShellInfo[shell][shellDropped] = 1;
							ShellInfo[shell][shellX] = X;
							ShellInfo[shell][shellY] = Y;
							ShellInfo[shell][shellZ] = Z;
							ShellInfo[shell][shellWorld] = GetPlayerVirtualWorld(playerid);
							ShellInfo[shell][shellTime] = 15;
							ShellInfo[shell][shellSerial] = serial;
							return 1;
						}
					}
				}
				if(silah == 25) // Remington 870
				{
					for(new shell = 0; shell < sizeof(ShellInfo); shell++)
					{
						if(ShellInfo[shell][shellDropped] == 0)
						{
							GetPlayerPos(playerid, X, Y, Z);
							if(!serial) format(string, sizeof(string), "MERMÝ KOVANI: 12'lik FÝÞEK | XXXXXX\n/kovantopla");
							else format(string, sizeof(string), "MERMÝ KOVANI: 12'lik FÝÞEK | %i\n/kovantopla", serial);
							ShellInfo[shell][ShellCasing] = CreateDynamic3DTextLabel(string, COLOR_LIGHTRED, X, Y, Z-1, 2.0);
							ShellInfo[shell][shellDropped] = 1;
							ShellInfo[shell][shellX] = X;
							ShellInfo[shell][shellY] = Y;
							ShellInfo[shell][shellZ] = Z;
							ShellInfo[shell][shellWorld] = GetPlayerVirtualWorld(playerid);
							ShellInfo[shell][shellTime] = 15;
							ShellInfo[shell][shellSerial] = serial;
							return 1;
						}
					}
				}
				if(silah == 24)
				{
					for(new shell = 0; shell < sizeof(ShellInfo); shell++)
					{
						if(ShellInfo[shell][shellDropped] == 0)
						{
							GetPlayerPos(playerid, X, Y, Z);
							if(!serial) format(string, sizeof(string), "MERMÝ KOVANI: .45 GAP | XXXXXX\n/kovantopla");
							else format(string, sizeof(string), "MERMÝ KOVANI: .45 GAP | %i\n/kovantopla", serial);
							ShellInfo[shell][ShellCasing] = CreateDynamic3DTextLabel(string, COLOR_LIGHTRED, X, Y, Z-1, 2.0);
							ShellInfo[shell][shellDropped] = 1;
							ShellInfo[shell][shellX] = X;
							ShellInfo[shell][shellY] = Y;
							ShellInfo[shell][shellZ] = Z;
							ShellInfo[shell][shellWorld] = GetPlayerVirtualWorld(playerid);
							ShellInfo[shell][shellTime] = 15;
							ShellInfo[shell][shellSerial] = serial;
							return 1;
						}
					}
				}
				if(silah == 22) // colt
				{
					for(new shell = 0; shell < sizeof(ShellInfo); shell++)
					{
						if(ShellInfo[shell][shellDropped] == 0)
						{
							GetPlayerPos(playerid, X, Y, Z);
							if(!serial) format(string, sizeof(string), "MERMÝ KOVANI: .45 ACP | XXXXXX\n/kovantopla");
							else format(string, sizeof(string), "MERMÝ KOVANI: .45 GAP | %i\n/kovantopla", serial);
							ShellInfo[shell][ShellCasing] = CreateDynamic3DTextLabel(string, COLOR_LIGHTRED, X, Y, Z-1, 2.0);
							ShellInfo[shell][shellDropped] = 1;
							ShellInfo[shell][shellX] = X;
							ShellInfo[shell][shellY] = Y;
							ShellInfo[shell][shellZ] = Z;
							ShellInfo[shell][shellWorld] = GetPlayerVirtualWorld(playerid);
							ShellInfo[shell][shellTime] = 15;
							ShellInfo[shell][shellSerial] = serial;
							return 1;
						}
					}
				}
			}
			return 1;
		}

		/*forward OnCreateKaravan(playerid);
		public OnCreateKaravan(playerid) {
			SunucuMesaji(playerid, "Satýn alma iþlemini baþarýyla gerçekleþtirdiniz.");
			SunucuMesaji(playerid, "Karavanýnýz aracýnýza otomatik olarak baðlandý uygun bir yerde '/karavan park' yapýn.");
			return 1;
		} */

		forward FirmadanAt(playerid, firma);
		public FirmadanAt(playerid, firma) {
			new isim[MAX_PLAYER_NAME],
			query[130];

			format(isim, 24, "%s", vericek_varchar(0, "isim"));
			new pID = OyuncuIDcek(isim);

			mysql_format(g_SQL, query, sizeof(query), "%s adlý kiþi sizi '%s' adlý firmadan çýkardý.", OyuncuIsim(playerid), FirmaInfo[firma][fIsim]);
			SendClientMessage(pID, -1, query);
			oyuncuData[pID][oFirmarutbe] = 0;
			oyuncuData[pID][oFirma] = -1;

			mysql_format(g_SQL, query, sizeof(query), "UPDATE `oyuncular` SET `firma` = 0, `firmarutbe` = 0 WHERE `isim` = '%e'", isim);
			mysql_query(g_SQL, query);
			SunucuMesaji(playerid, "%s adlý kiþiyi '%s' birliðinden çýkardýnýz.", OyuncuIsimEx(isim), FirmaInfo[firma][fIsim]);
			FirmaLiderMenu(playerid);
			return 1;
		}

		stock FirmaLiderMenu(playerid)
		{
			ShowPlayerDialog(playerid, DIALOG_FIRMA_LIDER, DIALOG_STYLE_LIST, "{F5E600}Firma Yönetimi", "Ýþçiler/Ýþçileri Yönet\nFirma Duyurusu\nRütbe Ýsimleri\nÝþbaþý Skinleri\nFirma Kanalý Aç/Kapat\nFirma Araç Ýþlemleri\nFirmayý Taþý", "Seç", "Iptal");
		}

		forward FirmaYarat(playerid, inputtext[], tur);
		public FirmaYarat(playerid, inputtext[], tur)
		{
			static rows;

			cache_get_row_count(rows);
			if(rows == 0)
			{
				new query[195];
				new did = Iter_Free(Firma);
				if(did < 0) return hataMesaji(playerid, "Daha fazla firma kurulamaz firma limiti aþýldý.");
				mysql_format(g_SQL, query, sizeof(query), "INSERT INTO `firmalar` (`id`, `isim`, `liderrutbe`, `not`, `alan`, `maas`) VALUES ('%d', '%e', 10, '[%e]', '%d', 250)", did, inputtext, inputtext, tur);
				mysql_tquery(g_SQL, query, "FirmaYaratResult", "iisi", did, playerid, inputtext, tur);
				ParaEkle(playerid, -fTurveri[tur][fTurBedel]);
			}
			else
			{
				hataMesaji(playerid, "Bu isimde bir firma zaten bulunuyor lütfen baþka bir isim girin.");
				ShowPlayerDialog(playerid, DIALOG_FIRMA_KUR_ISIM, DIALOG_STYLE_INPUT, "{F5E600}Firma Kurma", "Lütfen firmanýz için bir isim belirleyin:", "Tamam", "Iptal");
			}

			return 1;
		}

		forward FirmaYaratResult(firma, playerid, inputtext[], tur);
		public FirmaYaratResult(firma, playerid, inputtext[], tur) {
			new labelString[150], Float:X, Float:Y, Float:Z, interior, vw, query[250];
			vw = GetPlayerVirtualWorld(playerid), interior = GetPlayerInterior(playerid), GetPlayerPos(playerid, X,Y,Z);
			if(isnull(FirmaInfo[firma][fIsim])) {
				FirmaInfo[firma][fID] = firma;
			}

			format(gVar3000, sizeof(gVar3000), "%s", EOS);
			for(new i = 1; i != 11; i++) {
				format(FirmaRutbe[firma][i], 30, "Rutbe %i", i);
				FirmaSkin[firma][i] = 8;
				if(isnull(gVar3000)) {
					mysql_format(g_SQL, gVar3000, sizeof(gVar3000), "INSERT INTO `firmarutbeleri` (`id`, `rutbe`, `isim`, `skin`) VALUES (%i, %i, 'Rutbe %i', 8)", FirmaInfo[firma][fID], i, i);
				} else {
					mysql_format(g_SQL, gVar3000, sizeof(gVar3000), "%s, (%i, %i, 'Rutbe %i', 8)", gVar3000, FirmaInfo[firma][fID], i, i);
				}
			}

			mysql_query(g_SQL, gVar3000);
			format(gVar3000, sizeof(gVar3000), "%s", EOS);
			format(FirmaInfo[firma][fIsim], 40, "%s", inputtext);
			FirmaInfo[firma][fLiderrutbe] = 10;
			FirmaInfo[firma][fAlan] = tur;
			FirmaInfo[firma][fKasa] = 0;
			FirmaInfo[firma][fMaas] = 250;
			FirmaInfo[firma][fiX] = X;
			FirmaInfo[firma][fiY] = Y;
			FirmaInfo[firma][fiZ] = Z;
			FirmaInfo[firma][fiVw] = vw;
			FirmaInfo[firma][fiInt] = interior;
			FirmaInfo[firma][fAlimlar] = 0;
			FirmaInfo[firma][fKameraman] = -1;
			if(FirmaInfo[firma][fAlan] == 2) FirmaInfo[firma][fKontrat][0] = 1, FirmaInfo[firma][fKontrat][1] = 1;
			oyuncuData[playerid][oFirma] = firma;
			oyuncuData[playerid][oFirmarutbe] = 10;
			format(FirmaInfo[firma][fNot], 200, "[%s]", inputtext);
			FirmaInfo[firma][fPickupb] = CreateDynamicPickup(1210, 23, FirmaInfo[firma][fiX], FirmaInfo[firma][fiY], FirmaInfo[firma][fiZ],FirmaInfo[firma][fiVw],FirmaInfo[firma][fiInt]);
			format(labelString, sizeof(labelString), "[{F5E600}%s{FFFFFF}]\nFirma menüsüne eriþmek için {F5E600}'/fmenu'{FFFFFF}", FirmaInfo[firma][fIsim]);
			FirmaInfo[firma][fLabelb] = CreateDynamic3DTextLabel(labelString, -1, FirmaInfo[firma][fiX], FirmaInfo[firma][fiY], FirmaInfo[firma][fiZ] + 0.8, 3, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, FirmaInfo[firma][fiVw],FirmaInfo[firma][fiInt]);
			SetPVarInt(playerid, "FirmaYonetimi", firma);
			Iter_Add(Firma, firma);
			mysql_format(g_SQL, query, sizeof(query), "UPDATE `firmalar` SET `x` = %f, `y` = %f, `z` = %f, `vw` = %i, `interior` = %i WHERE `id` = %i", FirmaInfo[firma][fiX],FirmaInfo[firma][fiY],FirmaInfo[firma][fiZ],FirmaInfo[firma][fiVw],FirmaInfo[firma][fiInt], FirmaInfo[firma][fID]);
			mysql_query(g_SQL, query);
			YoneticiMesaji(RENK_ACIKKIRMIZI, "« YONETICI » {FFFFFF}%s adlý kiþi '%s' (Slot: %i) adýnda yeni bir firma kurdu.", OyuncuIsim(playerid), inputtext, firma);
			FirmaLiderMenu(playerid);
			return 1;
		}

		public hesapnoarat(playerid, hesapno)
		{
			static rows, query[128];
			cache_get_row_count(rows);
			if(!rows)
			{
				oyuncuData[playerid][oHesapNumarasi] = hesapno;
			}
			else if(rows){
				new hesapno2 = randomEx(100000, 999999);
				mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM oyuncular WHERE HesapNumarasi = '%d'", hesapno2);
				mysql_tquery(g_SQL, query, "hesapnoarat", "dd", playerid, hesapno2);
			}
			return 1;
		}

		public vnoarat(playerid, vno)
		{
			static rows, query[128];
			cache_get_row_count(rows);
			if(!rows)
			{
				if(oyuncuData[playerid][oVatandaslikNo] > 0)
					return 0;

				oyuncuData[playerid][oVatandaslikNo] = vno;
				OyuncuKaydet(playerid);
			}
			else if(rows){
				new vno3 = randomEx(10000000, 99999999);
				mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM oyuncular WHERE VatandaslikNo = '%d'", vno3);
				mysql_tquery(g_SQL, query, "vnoarat", "dd", playerid, vno3);
			}
			return 1;
		}

		public telefonnoarat(playerid, telno)
		{
			static rows, query[128];
			cache_get_row_count(rows);
			if(!rows)
			{
				oyuncuData[playerid][oTelefonNumarasi] = telno;
				OyuncuKaydet(playerid);
				SunucuMesaji(playerid, "Yeni bir sim kartý satýn aldýn, telefon numaran: %d", telno);
			}
			else if(rows){
				new telno2 = randomEx(1000000, 9999999);
				mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM oyuncular WHERE TelefonNumarasi = '%d'", telno2);
				mysql_tquery(g_SQL, query, "telefonnoarat", "dd", playerid, telno2);
			}
			return 1;
		}

		public ankesorno(playerid, ano)
		{
			static rows;
			cache_get_row_count(rows);
			if(rows > 0)
			{
				foreach(new i : Ankesorlu) if(AnkesorInfo[i][aNumara] == ano) {
					if(AnkesorInfo[i][aAktif] == 1)
						return hataMesaji(playerid, "Aradýðýnýz numara þu anda bir baþka kiþiyle görüþmektedir, daha sonra tekrar deneyin.");

					if(AnkesorInfo[i][aCaliyor] == 1)
						return hataMesaji(playerid, "Aradýðýnýz numaraya þuanda ulaþýlamýyor, daha sonra tekrar deneyin.");

					cmd(playerid, 1, "telefonunu çýkarýr ve bir arama yapar.");
					SetPVarInt(playerid, "AnkesorID", i);
					SetPVarInt(playerid, "AnkesorleKonusuyor", 1);
					if(!IsPlayerInAnyVehicle(playerid) && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_NONE)
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
					AnkesorInfo[i][aCaliyor] = 1;
					AnkesorInfo[i][aArayan] = playerid;
					foreach(new r : Player) if(IsPlayerInRangeOfPoint(r, 5.0, AnkesorInfo[i][aX], AnkesorInfo[i][aY], AnkesorInfo[i][aZ])) {
						ankesortime[playerid] = SetTimerEx("AnkesorCaliyor",5000,1,"dd",r,i);
					}
				}
			}
			else
			{
				hataMesaji(playerid, "Aradýðýnýz numaraya ulaþýlamadý, tuþladýðýnýz numara yanlýþ olabilir.");
				oyuncuData[playerid][oArama] = -1;
			}
			return 1;
		}


		public AracYaratildi(aracid)
		{
			if(aracid == -1 || !AracBilgi[aracid][aracKullanimda])
				return 0;

			static iharfler[][] ={"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"};
			AracBilgi[aracid][aracID] = cache_insert_id();
			if(AracBilgi[aracid][aracID] < 100) {
				format(AracBilgi[aracid][aracPlaka], 12, "%s%s%d %s00%d", iharfler[random(sizeof(iharfler))], iharfler[random(sizeof(iharfler))], randomEx(1, 10), iharfler[random(sizeof(iharfler))], AracBilgi[aracid][aracID]);
			}
			else if(AracBilgi[aracid][aracID] < 1000) {
				format(AracBilgi[aracid][aracPlaka], 12, "%s%s%d %s0%d", iharfler[random(sizeof(iharfler))], iharfler[random(sizeof(iharfler))], randomEx(1, 10), iharfler[random(sizeof(iharfler))], AracBilgi[aracid][aracID]);
			}
			else if(AracBilgi[aracid][aracID] > 1000) {
				format(AracBilgi[aracid][aracPlaka], 12, "%s%s%d %s%d", iharfler[random(sizeof(iharfler))], iharfler[random(sizeof(iharfler))], randomEx(1, 10), iharfler[random(sizeof(iharfler))], AracBilgi[aracid][aracID]);
			}
			Arac_Kaydet(aracid);
			Arac_Spawn(aracid);
			return 1;
		}

		public araccalistir(playerid, aracid)
		{
			static Float:araccan, sayi, tarih[16];
			gettime(tarih[0], tarih[1], tarih[2]);

			GetVehicleHealth(aracid, araccan);
			new model = GetVehicleModel(aracid);
			oyuncuData[playerid][oMotorCalistir] = false;
			if(oyuncuData[playerid][oEhliyetTesti] > 0) {
				EhliyetCheckpoint_Son[playerid] = false;
				SunucuMesaji(playerid, "Ehliyet sýnavýna baþladýn, hýz sýnýrý 90 km/h, hýz sýnýrýný aþmamaya özen göster.");
				SetPlayerCheckpoint(playerid, 949.5048,-1392.8918,13.0291, 6.0);
			}
			if(araccan >= 750) {
				SetEngineStatus(aracid, true);
				OzelYakinMesaj(playerid, 30.0, RENK_DO, " %s model aracýn motoru çalýþtý. (( %s ))", AracModel(model), OyuncuIsim(playerid));
			}
			else if(araccan > 350 && araccan < 750) {
				sayi = randomEx(1, 10);
				if(sayi < 8) {
					SetEngineStatus(aracid, true);
					OzelYakinMesaj(playerid, 30.0, RENK_DO, " %s model aracýn motoru çalýþtý. (( %s ))", AracModel(model), OyuncuIsim(playerid));
				}
				else if(sayi > 7) {
					hataMesaji(playerid, "Aracýn hasarlý olduðu için motoru çalýþtýramadýn. Tekrar deneyin.");
					OzelYakinMesaj(playerid, 30.0, RENK_DO, " %s model araç hasarlý olduðu için motoru çalýþmadý. (( %s ))", AracModel(model), OyuncuIsim(playerid));
				}
			}
			else if(araccan < 351) {
				hataMesaji(playerid, "Aracýn aðýr hasarlý olduðu için motoru çalýþtýramadýn.");
				OzelYakinMesaj(playerid, 30.0, RENK_DO, " %s model araç aðýr hasarlý olduðu için motoru çalýþmadý. (( %s ))", AracModel(model), OyuncuIsim(playerid));
			}
			return 1;
		}

		public UyusturucuBakimYap(playerid, id)
		{
			if(UyusturucuBilgi[id][uBakim] == 1)
				return hataMesaji(playerid, "Bakým zaten yapýlmýþ."), TogglePlayerControllable(playerid, true);

			UyusturucuBilgi[id][uBakim] = 1;
			ParaEkle(playerid, -100);
			Uyusturucu_Kaydet(id);
			Uyusturucu_Yenile(id);
			TogglePlayerControllable(playerid, true);
			return 1;
		}

		public UyusturucuTopla(playerid, id)
		{
			if(UyusturucuBilgi[id][uBakim] == 0)
				return hataMesaji(playerid, "Bu uyuþturucu toplanamaz."), TogglePlayerControllable(playerid, true);

			switch(UyusturucuBilgi[id][uDurum]) {
				case 15..35: oyuncuData[playerid][oUyusturucu][0] += 30;
				case 36..74: oyuncuData[playerid][oUyusturucu][1] += 60;
				case 75..99: oyuncuData[playerid][oUyusturucu][2] += 100;
				case 100: oyuncuData[playerid][oUyusturucu][2] += 110;
			}
			TogglePlayerControllable(playerid, true);
			OyuncuKaydet(playerid);
			Uyusturucu_Sil(id);
			return 1;
		}

		public kullanilmayanaraclarispawnla(playerid)
		{
			static sayi = 0;
			sayi = 0;
			foreach(new i : Araclar)
			{
				if(IsValidVehicle(i) && SurucuBul(i) == INVALID_PLAYER_ID)
				{
					ASpawn(i);
					sayi++;
				}
			}
			if(!sayi)
				return hataMesaji(playerid, "Re-spawn edilebilecek araç yok.");

			aracrespawn = false;
			SCM_ExAll(RENK_YETKILI, "[YETKÝLÝ ÝÞLEM]: {FFFFFF}Respawn iþlemi tamamlandý ve %d adet araç spawnlandý!", sayi);
			return 1;
		}

		forward craftyapiyor(playerid, tip);
		public craftyapiyor(playerid, tip) {
			new tid = GetPVarInt(playerid, "cTezgahID");
			if(tip == 0) return hataMesaji(playerid, "Craft baþarýsýz oldu, hiçbir þey üretemediniz."), GameTextForPlayer(playerid, "~r~CRAFT BASARISIZ!", 750, 4),oyuncuData[playerid][oCraft] = false,TogglePlayerControllable(playerid, true),ClearAnimations(playerid), DestroyDynamic3DTextLabel(TezgahInfo[tid][tGeciciLabel]);
			SunucuMesaji(playerid, "Tebrikler baþarýyla %s adlý itemi ürettiniz.", ItemArray[tip - 1][iisim]);
			/*if(oyuncuData[playerid][oUretimYetenek] > 2 && oyuncuData[playerid][oUretimYetenek] < 7)
			{
				oyuncuData[playerid][oUretimYetenekEXP]++;
				if(oyuncuData[playerid][oUretimYetenekEXP] == 3)
				{
					oyuncuData[playerid][oUretimYetenekEXP] = 0;
					oyuncuData[playerid][oUretimYetenek]++;
					SunucuMesaji(playerid, "Üretim yeteneðiniz yükseldi! Yeni üretim seviyeniz: %d", oyuncuData[playerid][oUretimYetenek]);
				}
			} */
			ItemEkle(playerid, tip, 1);
			GameTextForPlayer(playerid, "~g~TEBRIKLER!", 750, 4);
			oyuncuData[playerid][oCraft] = false;
			TogglePlayerControllable(playerid, true);
			ClearAnimations(playerid);
			if(IsValidDynamic3DTextLabel(TezgahInfo[tid][tGeciciLabel])) DestroyDynamic3DTextLabel(TezgahInfo[tid][tGeciciLabel]);
			return 1;
		}

		public KapiKir_Ev(playerid, id)
		{
			static mesaj[128];
			if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS || Ev_Yakin(playerid) != id)
				return 0;

			switch (random(6))
			{
				case 0..2:
				{
					format(mesaj, sizeof(mesaj), "Kapý kýrma iþlemi baþarýsýz oldu, %s dengesini kaybederek yere düþtü.", OyuncuIsim(playerid));
					cmd(playerid, 2, mesaj);
				}
				default:
				{
					EvBilgi[id][evDurum] = 1;
					Ev_Yenile(id);
					cmd(playerid, 2, "Evin kapýsý kýrýlmýþtýr.");
				}
			}
			return 1;
		}

		public KapiKir_Isyeri(playerid, id)
		{
			static mesaj[128];
			if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS || Isyeri_Yakin(playerid) != id)
				return 0;

			switch (random(6))
			{
				case 0..2:
				{
					format(mesaj, sizeof(mesaj), "Kapý kýrma iþlemi baþarýsýz oldu, %s dengesini kaybederek yere düþtü.", OyuncuIsim(playerid));
					cmd(playerid, 2, mesaj);
				}
				default:
				{
					IsyeriBilgi[id][isyeriDurum] = 1;
					Isyeri_Yenile(id);
					cmd(playerid, 2, "Ýþyerinin kapýsý kýrýlmýþtýr.");
				}
			}
			return 1;
		}

		public CezaArat(oyuncuid, aranan[])
		{
			new bilgi[1024], sebep[128], tarih[128], rows, fields, sayi, miktar, memur[60];
			cache_get_row_count(rows);
			cache_get_field_count(fields);
			if(!rows) return hataMesaji(oyuncuid, "%s adýna ödenmemiþ bir ceza yok.", aranan);

			bilgi[0] = 0, sayi = 0;
			strcat(bilgi, "Sebep\tTarih\tMiktar\n");
			for(new i = 0; i < rows; i ++) if(vericek_int(i, "cezaOdendi") == 0){
				sayi++;
				format(tarih, sizeof(tarih), "%s", vericek_varchar(i, "cezaTarih"));
				format(sebep, sizeof(sebep), "%s", vericek_varchar(i, "cezaSebep"));
				format(memur, sizeof(memur), "%s", vericek_varchar(i, "cezaMemur"));
				miktar = vericek_int(i, "cezaUcret");

				format(bilgi, sizeof(bilgi), "%s%s\t%s\t%s\n", bilgi, sebep, tarih, NumaraFormati(miktar));
			}
			if(!sayi) return hataMesaji(oyuncuid, "%s adýna ödenmemiþ bir ceza yok.", aranan);
			format(tarih, sizeof(tarih), "Ceza Kayýtlarý (%s)", vericek_varchar(0, "cezaSQL"));
			DialogGoster(oyuncuid, DIALOG_CEZA_KISISEL, DIALOG_STYLE_TABLIST_HEADERS, tarih, bilgi, "Öde", "Kapat");
			return 1;
		}

		public AracCezaArat(oyuncuid, plaka[])
		{
			new bilgi[1024], sebep[128], tarih[128], rows, fields, sayi, miktar, memur[60], id;
			cache_get_row_count(rows);
			cache_get_field_count(fields);
			if(!rows) return hataMesaji(oyuncuid, "%s plakasýna kayýtlý ödenmemiþ bir ceza yok.", plaka);

			bilgi[0] = 0, sayi = 0;
			strcat(bilgi, "ID\tSebep\tTarih\tMiktar\n");
			for(new i = 0; i < rows; i ++) if(vericek_int(i, "cezaOdendi") == 0){
				sayi++;
				format(tarih, sizeof(tarih), "%s", vericek_varchar(i, "cezaTarih"));
				format(sebep, sizeof(sebep), "%s", vericek_varchar(i, "cezaSebep"));
				format(memur, sizeof(memur), "%s", vericek_varchar(i, "cezaKesen"));
				miktar = vericek_int(i, "cezaUcret");
				id = vericek_int(i, "cezaID");

				format(bilgi, sizeof(bilgi), "%s%d\t%s\t%s\t%s\n", bilgi, id, sebep, tarih, NumaraFormati(miktar));
			}
			if(!sayi) return hataMesaji(oyuncuid, "%s plakasýna kayýtlý ödenmemiþ bir ceza yok.", plaka);
			format(tarih, sizeof(tarih), "Ceza Kayýtlarý (%s)", plaka);
			DialogGoster(oyuncuid, DIALOG_CEZA_ARAC, DIALOG_STYLE_TABLIST_HEADERS, tarih, bilgi, "Öde", "Kapat");
			return 1;
		}

		public CezaOdeme(oyuncuid, odeme)
		{
			new rows, fields, miktar;
			cache_get_row_count(rows);
			cache_get_field_count(fields);
			if(!rows) return hataMesaji(oyuncuid, "Bir hata oluþtu tekrar deneyin.");

			if(odeme == 0) {
				new bilgi[256];
				format(cezaodemesebep[oyuncuid], 96, "%s", vericek_varchar(0, "cezaSebep"));
				format(bilgi, sizeof(bilgi), "%s sebepli %s deðerindeki cezanýzý ödemeyi onaylýyor musunuz?", vericek_varchar(0, "cezaSebep"), NumaraFormati(vericek_int(0, "cezaUcret")));
				DialogGoster(oyuncuid, DIALOG_CEZA_KISISEL_ODE, DIALOG_STYLE_MSGBOX, "Ceza Ödeme Onay", bilgi, "Öde", "Ýptal");
			}
			else if(odeme == 1)
			{
				miktar = vericek_int(0, "cezaUcret");
				if(oyuncuData[oyuncuid][oPara] < miktar) return hataMesaji(oyuncuid, "Bu cezayý ödeyecek kadar paran yok.");

				ParaEkle(oyuncuid, -miktar);
				SunucuMesaji(oyuncuid, "%s miktarýndaki %s sebepli cezaný ödedin.", NumaraFormati(miktar), vericek_varchar(0, "cezaSebep"));
				new mysql[256];
				format(mysql, sizeof(mysql), "UPDATE `cezalar` SET `cezaOdendi` = '1' WHERE `cezaSQL` = '%e' AND `cezaID` = '%d'", OyuncuIsim(oyuncuid, 1), vericek_int(0, "cezaID"));
				mysql_tquery(g_SQL, mysql);
			}
			return 1;
		}

		public AracCezaOdeme(oyuncuid, odeme)
		{
			new rows, fields, miktar, aracid = GetPVarInt(oyuncuid, "cezaaracid");
			cache_get_row_count(rows);
			cache_get_field_count(fields);
			if(!rows) return hataMesaji(oyuncuid, "Bir hata oluþtu tekrar deneyin.");

			if(odeme == 0) {
				new bilgi[256];
				SetPVarInt(oyuncuid, "PVar_CezaID", vericek_int(0, "cezaID"));
				format(cezaodemesebep[oyuncuid], 96, "%s", vericek_varchar(0, "cezaSebep"));
				format(bilgi, sizeof(bilgi), "%s sebepli %s deðerindeki cezanýzý ödemeyi onaylýyor musunuz?", vericek_varchar(0, "cezaSebep"), NumaraFormati(vericek_int(0, "cezaUcret")));
				DialogGoster(oyuncuid, DIALOG_CEZA_ARAC_ODE, DIALOG_STYLE_MSGBOX, "Ceza Ödeme Onay", bilgi, "Öde", "Ýptal");
			}
			else if(odeme == 1)
			{
				miktar = vericek_int(0, "cezaUcret");
				if(oyuncuData[oyuncuid][oPara] < miktar) return hataMesaji(oyuncuid, "Bu cezayý ödeyecek kadar paran yok.");

				ParaEkle(oyuncuid, -miktar);
				SunucuMesaji(oyuncuid, "%s miktarýndaki %s sebepli cezaný ödedin.", NumaraFormati(miktar), vericek_varchar(0, "cezaSebep"));
				new mysql[256];
				format(mysql, sizeof(mysql), "UPDATE `araccezalari` SET `cezaOdendi` = '1' WHERE `aracPlaka` = '%e' AND `cezaID` = '%d'", AracBilgi[aracid][aracPlaka], vericek_int(0, "cezaID"));
				mysql_tquery(g_SQL, mysql);
			}
			return 1;
		}


		public CezaListele(oyuncuid, isim[])
		{
			new bilgi[1024], sebep[64], tarih[36], rows, fields, sayi, odenmis, durum[24], miktar, memur[MAX_PLAYER_NAME];
			cache_get_row_count(rows);
			cache_get_field_count(fields);
			if(!rows) return hataMesaji(oyuncuid, "%s adýna kesilmiþ bir ceza yok.", isim);

			bilgi[0] = 0, sayi = 0, odenmis = 0;
			strcat(bilgi, "Sebep\t\tTarih\t\t\t\tMiktar\t\tDurum\tMemur\n");
			for(new i = 0; i < rows; i ++) {
				sayi++;
				format(tarih, sizeof(tarih), "%s", vericek_varchar(i, "cezaTarih"));
				format(sebep, sizeof(sebep), "%s", vericek_varchar(i, "cezaSebep"));
				format(memur, sizeof(memur), "%s", vericek_varchar(i, "cezaMemur"));
				odenmis = vericek_int(i, "cezaOdendi");
				miktar = vericek_int(i, "cezaUcret");

				format(durum, sizeof(durum), "%s", (odenmis == 1) ? ("{33AA33}Ödenmiþ") : ("{B70000}Ödenmemiþ"));
				format(bilgi, sizeof(bilgi), "%s%s\t{FFFFFF}%s\t\t%s\t\t%s\t\n", bilgi, sebep, tarih, NumaraFormati(miktar), durum, memur);
			}
			format(tarih, sizeof(tarih), "Ceza Kayýtlarý (%s)", isim);
			DialogGoster(oyuncuid, 0, DIALOG_STYLE_TABLIST_HEADERS, tarih, bilgi, "Kapat", "");
			return 1;
		}

		public KisiSorgula(oyuncu[], gosterilenid, secenek)
		{
			new bilgi[2048], ekleme[2048], rows, fields, isim[MAX_PLAYER_NAME + 1];
			cache_get_row_count(rows);
			cache_get_field_count(fields);
			if(!rows) {
				switch(secenek) {
					case 0: hataMesaji(gosterilenid, "%s adlý kiþiye ait kayýt bulunamadý.", oyuncu);
					case 1: hataMesaji(gosterilenid, "Vatandaþlýk numarasýna ait kayýt bulunamadý. (%s)", oyuncu);
					case 2: hataMesaji(gosterilenid, "Telefon numarasýna ait kayýt bulunamadý. (%s)", oyuncu);
				}
				return 1;
			}
			bilgi[0] = 0;
			for(new i = 0; i < rows; i ++) {
				format(isim, sizeof(isim), "%s", vericek_varchar(i, "isim"));
				for (new b = 0, len = strlen(isim); b < len; b ++) {
					if(isim[b] == '_') isim[b] = ' ';
				}

				format(bilgi, sizeof(bilgi), "{AFAFAF}Ad & Soyad:\t\t{FFFFFF}%s\n", isim);
				format(ekleme, sizeof(ekleme), "{AFAFAF}Doðum Tarihi:\t\t{FFFFFF}%s\n", vericek_varchar(i, "dogumtarihi"));
				strcat(bilgi, ekleme, sizeof(ekleme));
				format(ekleme, sizeof(ekleme), "{AFAFAF}Doðum Yeri:\t\t{FFFFFF}%s\n", vericek_varchar(i, "DogumYeri"));
				strcat(bilgi, ekleme, sizeof(ekleme));
				format(ekleme, sizeof(ekleme), "{AFAFAF}Cinsiyet:\t\t{FFFFFF}%s\n\n\n", (vericek_int(i, "Cinsiyet")) ? ("Erkek") : ("Kadýn"));
				strcat(bilgi, ekleme, sizeof(ekleme));
				format(ekleme, sizeof(ekleme), "{AFAFAF}Telefon Numarasý:\t{FFFFFF}%d\n", vericek_int(i, "TelefonNumarasi"));
				strcat(bilgi, ekleme, sizeof(ekleme));
				format(ekleme, sizeof(ekleme), "{AFAFAF}Vatandaþlýk NO:\t{FFFFFF}%d\n", vericek_int(i, "VatandaslikNo"));
				strcat(bilgi, ekleme, sizeof(ekleme));
				format(ekleme, sizeof(ekleme), "{AFAFAF}Meslek:\t\t{FFFFFF}%s\n", MeslekIsim(vericek_int(i, "Meslek")));
				strcat(bilgi, ekleme, sizeof(ekleme));
				format(ekleme, sizeof(ekleme), "{AFAFAF}Ehliyet:\t\t\t{FFFFFF}%s\n", (vericek_int(i, "Ehliyet") == 0) ? ("{B70000}Yok") : ("{33AA33}Mevcut"));
				strcat(bilgi, ekleme, sizeof(ekleme));
				format(ekleme, sizeof(ekleme), "{AFAFAF}Silah Ruhsatý:\t\t{FFFFFF}%s\n", (vericek_int(i, "Ruhsat") == 0) ? ("{B70000}Yok") : ("{33AA33}Mevcut"));
				strcat(bilgi, ekleme, sizeof(ekleme));
			}
			format(ekleme, sizeof(ekleme), "Kiþi Bilgileri (%s)", isim);
			DialogGoster(gosterilenid, DIALOG_MDC_KISISORGULA2, DIALOG_STYLE_TABLIST, ekleme, bilgi, "Geri", "Kapat");
			return 1;
		}

		public AranmaSorgula(oyuncu[], gosterilenid)
		{
			new bilgi[1024], ekleyen[MAX_PLAYER_NAME + 1], tarih[36 + MAX_PLAYER_NAME], rows, fields, sayi, suc[144];
			cache_get_row_count(rows);
			cache_get_field_count(fields);
			if(!rows) return hataMesaji(gosterilenid, "%s adlý kiþinin aranma kaydý yok.", oyuncu);

			bilgi[0] = 0, sayi = 0;
			strcat(bilgi, "ID\tTarih\tEkleyen\tSuç\n");
			for(new i = 0; i < rows; i ++) {
				sayi++;
				format(tarih, sizeof(tarih), "%s", vericek_varchar(i, "tarih"));
				format(ekleyen, sizeof(ekleyen), "%s", vericek_varchar(i, "ekleyen"));
				format(suc, sizeof(suc), "%s", vericek_varchar(i, "suc"));

				MDC_SucluSQL[gosterilenid][i] = vericek_int(i, "id");

				format(bilgi, sizeof(bilgi), "%s%d\t%s\t%s\t%s\n", bilgi, vericek_int(i, "id"), tarih, ekleyen, suc);
			}
			format(tarih, sizeof(tarih), "Aranma Kayýtlarý (%s - %d)", oyuncu, sayi);
			DialogGoster(gosterilenid, DIALOG_SUCKONTROL, DIALOG_STYLE_TABLIST_HEADERS, tarih, bilgi, "Kaydý Sil", "Kapat");
			return 1;
		}

		public AranmaKayitlari(oyuncuid)
		{
			new bilgi[1024], oyuncu[MAX_PLAYER_NAME + 1], rows, fields, sayi, tarih[36], bool:online = false;
			cache_get_row_count(rows);
			cache_get_field_count(fields);
			if(!rows) return hataMesaji(oyuncuid, "Aranma kaydý yok.");

			bilgi[0] = 0, sayi = 0;
			strcat(bilgi, "Oyuncu\tAktif\n");
			for(new i = 0; i < rows; i ++) {
				online = false;
				format(oyuncu, sizeof(oyuncu), "%s", vericek_varchar(i, "isim"));
				foreach(new o : Player) if(!strcmp(oyuncuData[o][oIsim], oyuncu, true)) { online = true; }
				if(strfind(bilgi, oyuncu) == -1) {
					format(bilgi, sizeof(bilgi), "%s%s\t%s\n", bilgi, oyuncu, (online == false) ? ("{B70000}Hayýr") : ("{0DFF00}Evet")), sayi++;
				}
			}
			if(sayi == 0) return hataMesaji(oyuncuid, "Aranma kaydý yok.");
			format(tarih, sizeof(tarih), "Arananlar Listesi (%d)", sayi);
			DialogGoster(oyuncuid, DIALOG_ARANMAKAYITLARI, DIALOG_STYLE_TABLIST_HEADERS, tarih, bilgi, "Detaylar", "Geri");
			return 1;
		}

		public skinduzelt(oyuncuid)
		{
			switch(oyuncuData[oyuncuid][oGeciciKiyafet]) {
				case 0: SetPlayerSkin(oyuncuid, oyuncuData[oyuncuid][oKiyafet]);
				default: SetPlayerSkin(oyuncuid, oyuncuData[oyuncuid][oGeciciKiyafet]);
			}
			if(oyuncuData[oyuncuid][oYarali] == false) {
				ClearAnimations(oyuncuid);
				TogglePlayerControllable(oyuncuid, true);
			}
			if(oyuncuData[oyuncuid][oYaraliSure] > 0) {
				TogglePlayerControllable(oyuncuid, false);
				ApplyAnimation(oyuncuid, "PED", "FLOOR_hit", 4.1, 0, 1, 1, 1, 0, 1);
			}
			return 1;
		}

		stock GirisDuzelt(oyuncuid)
		{
	//if(YuklemeTamamlandi[oyuncuid] == false) return false;
			if(oyuncuData[oyuncuid][oGiris] == true) return false;

			TogglePlayerControllable(oyuncuid, false);
			TogglePlayerSpectating(oyuncuid, false);
			SetPlayerPos(oyuncuid, 841.8337, -3724.8364, 18.1219);
			SetPlayerFacingAngle(oyuncuid, 270.0);
			SetTimerEx("HileKontrol1", 1000, 0, "i", oyuncuid);
			return 1;
		}

		stock AsansorYakin(playerid)
		{
			if(IsPlayerInRangeOfPoint(playerid, 2.5, 1493.4991, -1791.1809, 2981.3540) || IsPlayerInRangeOfPoint(playerid, 2.5, 1482.5685, -1848.7686, 3645.6270) || IsPlayerInRangeOfPoint(playerid, 2.5, 1493.6021, -1786.3867, 2676.0129))
				return 1;
			else if(IsPlayerInRangeOfPoint(playerid, 2.5, 193.8061,1915.0837,529.9813) || IsPlayerInRangeOfPoint(playerid, 2.5, 2018.3427,1584.6659,6753.0479) || IsPlayerInRangeOfPoint(playerid, 2.5, 1705.0577,946.5693,1129.9878))
				return 1;
			else if(IsPlayerInRangeOfPoint(playerid, 2.5, 1579.3479,-1677.8439,62.2155) || IsPlayerInRangeOfPoint(playerid, 2.5, 1705.0577,946.5693,1129.9878) || IsPlayerInRangeOfPoint(playerid, 2.5, 2268.0557,2448.6104,3.5313))
				return 1;
			else if(IsPlayerInRangeOfPoint(playerid, 2.5, 1568.6520, -1689.9709, 6.2188) || IsPlayerInRangeOfPoint(playerid, 2.5, 2268.0027,2449.0930,-7.1953) || IsPlayerInRangeOfPoint(playerid, 2.5, 1570.0018,-1678.4226,25.1468))
				return 1;
			else return 0;
		}

		stock IlkHarfBuyut(ch)
		{
			if(ch == 'q') ch = 'Q';
			else if(ch == 'w') ch = 'W';
			else if(ch == 'e') ch = 'E';
			else if(ch == 'r') ch = 'R';
			else if(ch == 't') ch = 'T';
			else if(ch == 'y') ch = 'Y';
			else if(ch == 'u') ch = 'U';
			else if(ch == 'ý') ch = 'I';
			else if(ch == 'o') ch = 'O';
			else if(ch == 'p') ch = 'P';
			else if(ch == 'ð') ch = 'Ð';
			else if(ch == 'ü') ch = 'Ü';
			else if(ch == 'a') ch = 'A';
			else if(ch == 's') ch = 'S';
			else if(ch == 'd') ch = 'D';
			else if(ch == 'f') ch = 'F';
			else if(ch == 'g') ch = 'G';
			else if(ch == 'h') ch = 'H';
			else if(ch == 'j') ch = 'J';
			else if(ch == 'k') ch = 'K';
			else if(ch == 'l') ch = 'L';
			else if(ch == 'þ') ch = 'Þ';
			else if(ch == 'i') ch = 'Ý';
			else if(ch == 'z') ch = 'Z';
			else if(ch == 'x') ch = 'X';
			else if(ch == 'c') ch = 'C';
			else if(ch == 'v') ch = 'V';
			else if(ch == 'b') ch = 'B';
			else if(ch == 'n') ch = 'N';
			else if(ch == 'm') ch = 'M';
			else if(ch == 'ö') ch = 'Ö';
			else if(ch == 'ç') ch = 'Ç';
			return ch;
		}

		stock FixTR(yazi[])
		{
			for (new i, l = strlen(yazi); i != l; i++)
			{
				switch(yazi[i])
				{
					case 'ý': yazi[i] = 'i';
					case 'ð': yazi[i] = 'g';
					case 'ü': yazi[i] = 'u';
					case 'þ': yazi[i] = 's';
					case 'ö': yazi[i] = 'o';
					case 'ç': yazi[i] = 'c';
					case 'Ð': yazi[i] = 'G';
					case 'Ü': yazi[i] = 'U';
					case 'Þ': yazi[i] = 'S';
					case 'Ý': yazi[i] = 'I';
					case 'Ö': yazi[i] = 'Ö';
					case 'Ç': yazi[i] = 'C';
				}
			}
			return 1;
		}

		stock EhliyetTestiiptal(playerid)
		{
			ASpawn(oyuncuData[playerid][oSonBinilenArac]);
			oyuncuData[playerid][oEhliyetTesti] = 0;
			EhliyetCheckpoint_Son[playerid] = false;
			oyuncuData[playerid][oEhliyetUyari] = 0;
			DisablePlayerCheckpoint(playerid);
			SetPlayerPos(playerid, 963.8155,-1388.3026,13.4456);
			SetPlayerFacingAngle(playerid, 354.5067);
			return 1;
		}

		stock PlayerPlaySoundEx(playerid, sound)
		{
			new Float:x, Float:y, Float:z;
			GetPlayerPos(playerid, x, y, z);

			foreach (new i : Player) if (IsPlayerInRangeOfPoint(i, 20.0, x, y, z)) {
				PlayerPlaySound(i, sound, x, y, z);
			}
			return 1;
		}

		stock CezaArat1(oyuncuid, aranan[])
		{
			new sorgu[128];
			mysql_format(g_SQL, sorgu, sizeof(sorgu), "SELECT * FROM `cezalar` WHERE `cezaSQL` = '%e'", aranan);
			mysql_tquery(g_SQL, sorgu, "CezaArat", "ds", oyuncuid, aranan);
			return 1;
		}

		stock AracSorgu(oyuncuid)
		{
			new Cache:VeriCek, query[165], str[1024], cek = 0, aracidcek[256];
			mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `araclar` WHERE aracSahip = '%d' LIMIT %d", oyuncuData[oyuncuid][oID], MAX_OYUNCU_ARAC);
			VeriCek = mysql_query(g_SQL, query);
			new rows = cache_num_rows();
			if(rows)
			{
				new model, plaka[32];
				strcat(str, "{CDCDCD}Model\t{CDCDCD}Plaka\n");
				for(new i = 0; i < rows; i++)
				{
					cache_get_value_name_int(i, "aracID", AracSlotSQL[oyuncuid][i]);
					cache_get_value_name_int(i, "aracModel", model);
					cache_get_value_name(i, "aracPlaka", plaka);
					if(AracDurumuCek(AracSlotSQL[oyuncuid][i]) > 0)
					{
						format(aracidcek, sizeof(aracidcek), "(%d)", AracDurumuCek(AracSlotSQL[oyuncuid][i]));
					}
					else format(aracidcek, sizeof(aracidcek), "");
					format(str, sizeof(str), "%s%s\t%s\n", str, GetVehicleName(model), plaka);
					cek++;
				}
			}
			cache_delete(VeriCek);
			if(!cek) return hataMesaji(oyuncuid, "Adýnýza kayýtlý araç mevcut deðil.");
			ShowPlayerDialog(oyuncuid, ARACCEZA_MENU, DIALOG_STYLE_TABLIST_HEADERS, "{89C7EF}Araç Listesi:{FFFFFF} Aracýnýzý seçip ceza ode butonuna basýn.", str, "Ceza Öde", "Iptal");
			return 1;
		}

		stock CezaOde(oyuncuid, ceza[], odeme)
		{
			new sorgu[128];
			mysql_format(g_SQL, sorgu, sizeof(sorgu), "SELECT * FROM `cezalar` WHERE `cezaSQL` = '%e' AND `cezaSebep` = '%e'", OyuncuIsim(oyuncuid, 1), ceza);
			mysql_tquery(g_SQL, sorgu, "CezaOdeme", "dd", oyuncuid, odeme);
			return 1;
		}

		stock AracCezaOde(oyuncuid, ceza, odeme)
		{
			new sorgu[128];
			mysql_format(g_SQL, sorgu, sizeof(sorgu), "SELECT * FROM `araccezalari` WHERE `cezaID` = '%d'", ceza);
			mysql_tquery(g_SQL, sorgu, "AracCezaOdeme", "dd", oyuncuid, odeme);
			return 1;
		}

		stock CezaGoster(oyuncuid, isim[])
		{
			new sorgu[128];
			mysql_format(g_SQL, sorgu, sizeof(sorgu), "SELECT * FROM `cezalar` WHERE `cezaSQL` = '%e'", isim);
			mysql_tquery(g_SQL, sorgu, "CezaListele", "ds", oyuncuid, isim);
			return 1;
		}

		stock ArananlarListesi(oyuncuid)
		{
			new sorgu[144 + MAX_PLAYER_NAME];
			mysql_format(g_SQL, sorgu, sizeof(sorgu), "SELECT * FROM `suckayitlari`");
			mysql_tquery(g_SQL, sorgu, "AranmaKayitlari", "d", oyuncuid);
			return 1;
		}

		stock NumaraSahibiBul(numara)
		{
			foreach (new i : Player) if(oyuncuData[i][oTelefonNumarasi] == numara && oyuncuData[i][oTelefon] != 0) return i;
			return INVALID_PLAYER_ID;
		}


		stock dekordegistir(playerid, i, dekorid)
		{
			switch(dekorid) {
				case 0: {
					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = 1412.639892;
					EvBilgi[i][evIcPos][1] = -1.787510;
					EvBilgi[i][evIcPos][2] = 1000.924377;
					EvBilgi[i][evIcPos][3] = 90.4601;
					EvBilgi[i][evInterior] = 1;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
				}
				case 1: {
					if(oyuncuData[playerid][oPara] < 15000) return hataMesaji(playerid, "Yeterli paran yok.($15000)");
					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = -2369.5337;
					EvBilgi[i][evIcPos][1] = 435.1958;
					EvBilgi[i][evIcPos][2] = 3453.1218;
					EvBilgi[i][evIcPos][3] = 0.0;
					EvBilgi[i][evInterior] = 1;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
					ParaEkle(playerid, -15000);
				}
				case 2: {
					if(oyuncuData[playerid][oPara] < 10000) return hataMesaji(playerid, "Yeterli paran yok.($10000)");

					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = 2439.1328;
					EvBilgi[i][evIcPos][1] = -95.9174;
					EvBilgi[i][evIcPos][2] = 1147.8845;
					EvBilgi[i][evIcPos][3] = 0.0;
					EvBilgi[i][evInterior] = 1;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
					ParaEkle(playerid, -10000);
				}
				case 3: {
					if(oyuncuData[playerid][oPara] < 10000) return hataMesaji(playerid, "Yeterli paran yok.($10000)");

					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = 857.8408;
					EvBilgi[i][evIcPos][1] = 31.3968;
					EvBilgi[i][evIcPos][2] = 582.6943;
					EvBilgi[i][evIcPos][3] = 0.0;
					EvBilgi[i][evInterior] = 1;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
					ParaEkle(playerid, -10000);
				}
				case 4: {
					if(oyuncuData[playerid][oPara] < 60000) return hataMesaji(playerid, "Yeterli paran yok.($60000)");

					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = -674.9788;
					EvBilgi[i][evIcPos][1] = -2166.0142;
					EvBilgi[i][evIcPos][2] = 1502.0964;
					EvBilgi[i][evIcPos][3] = 0.0;
					EvBilgi[i][evInterior] = 1;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
					ParaEkle(playerid, -60000);
				}
				case 5: {
					if(oyuncuData[playerid][oPara] < 40000) return hataMesaji(playerid, "Yeterli paran yok.($40000)");

					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = -2169.9768;
					EvBilgi[i][evIcPos][1] = -2135.8308;
					EvBilgi[i][evIcPos][2] = 1503.1005;
					EvBilgi[i][evIcPos][3] = 0.0;
					EvBilgi[i][evInterior] = 1;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
					ParaEkle(playerid, -40000);
				}
				case 6: {
					if(oyuncuData[playerid][oPara] < 60000) return hataMesaji(playerid, "Yeterli paran yok.($60000)");

					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = -1838.9821;
					EvBilgi[i][evIcPos][1] = 1227.9738;
					EvBilgi[i][evIcPos][2] = 1502.0082;
					EvBilgi[i][evIcPos][3] = 0.0;
					EvBilgi[i][evInterior] = 1;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
					ParaEkle(playerid, -60000);
				}
				case 7: {
					if(oyuncuData[playerid][oPara] < 40000) return hataMesaji(playerid, "Yeterli paran yok.($40000)");

					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = 2408.0198;
					EvBilgi[i][evIcPos][1] = -434.1076;
					EvBilgi[i][evIcPos][2] = 1503.0000;
					EvBilgi[i][evIcPos][3] = 0.0;
					EvBilgi[i][evInterior] = 1;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
					ParaEkle(playerid, -40000);
				}
				case 8: {
					if(oyuncuData[playerid][oPara] < 30000) return hataMesaji(playerid, "Yeterli paran yok.($5000)");

					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = 64.5504;
					EvBilgi[i][evIcPos][1] = -239.8190;
					EvBilgi[i][evIcPos][2] = 1201.7629;
					EvBilgi[i][evIcPos][3] = 0.0;
					EvBilgi[i][evInterior] = 1;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
					ParaEkle(playerid, -30000);
				}
				case 9: {
					if(oyuncuData[playerid][oPara] < 60000) return hataMesaji(playerid, "Yeterli paran yok.($60000)");

					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = 2778.0417;
					EvBilgi[i][evIcPos][1] = -65.6767;
					EvBilgi[i][evIcPos][2] = 1318.8390;
					EvBilgi[i][evIcPos][3] = 0.0;
					EvBilgi[i][evInterior] = 1;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
					ParaEkle(playerid, -60000);
				}
				case 10: {
					if(oyuncuData[playerid][oPara] < 50000) return hataMesaji(playerid, "Yeterli paran yok.($50000)");

					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = 438.9539;
					EvBilgi[i][evIcPos][1] = 1364.9796;
					EvBilgi[i][evIcPos][2] = 1118.8416;
					EvBilgi[i][evIcPos][3] = 0.0;
					EvBilgi[i][evInterior] = 1;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
					ParaEkle(playerid, -50000);
				}
				case 11: {
					if(oyuncuData[playerid][oPara] < 15000) return hataMesaji(playerid, "Yeterli paran yok.($15000)");

					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = -2158.7776;
					EvBilgi[i][evIcPos][1] = 643.1409;
					EvBilgi[i][evIcPos][2] = 1052.3750;
					EvBilgi[i][evIcPos][3] = 0.0;
					EvBilgi[i][evInterior] = 1;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
					ParaEkle(playerid, -15000);
				}
				case 12: {
					if(oyuncuData[playerid][oPara] < 10000) return hataMesaji(playerid, "Yeterli paran yok.($10000)");

					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = 2807.5481;
					EvBilgi[i][evIcPos][1] = -1174.4093;
					EvBilgi[i][evIcPos][2] = 1025.5703;
					EvBilgi[i][evIcPos][3] = 0.0;
					EvBilgi[i][evInterior] = 8;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
					ParaEkle(playerid, -10000);
				}
				case 13: { 
					if(oyuncuData[playerid][oPara] < 8000) return hataMesaji(playerid, "Yeterli paran yok.($8000)");

					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = 318.564971;
					EvBilgi[i][evIcPos][1] = 1118.209960;
					EvBilgi[i][evIcPos][2] = 1083.882812;
					EvBilgi[i][evIcPos][3] = 0.0;
					EvBilgi[i][evInterior] = 5;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
					ParaEkle(playerid, -8000);
				}
				case 14:
				{
					if(oyuncuData[playerid][oPara] < 7000) return hataMesaji(playerid, "Yeterli paran yok.($7000)");

					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = 2495.8567;
					EvBilgi[i][evIcPos][1] = -1692.2336;
					EvBilgi[i][evIcPos][2] = 1014.7422;
					EvBilgi[i][evIcPos][3] = 0.0;
					EvBilgi[i][evInterior] = 3;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
					ParaEkle(playerid, -7000);
				}
				case 15: {
					if(oyuncuData[playerid][oPara] < 10000) return hataMesaji(playerid, "Yeterli paran yok.($10000)");

					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = 2468.8259;
					EvBilgi[i][evIcPos][1] = -1698.3224;
					EvBilgi[i][evIcPos][2] = 1013.5078;
					EvBilgi[i][evIcPos][3] = 0.0;
					EvBilgi[i][evInterior] = 2;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
					ParaEkle(playerid, -10000);
				}
				case 16: {
					if(oyuncuData[playerid][oPara] < 30000) return hataMesaji(playerid, "Yeterli paran yok.($30000)");

					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = 2324.419921;
					EvBilgi[i][evIcPos][1] = -1145.568359;
					EvBilgi[i][evIcPos][2] = 1050.710083;
					EvBilgi[i][evIcPos][3] = 0.0;
					EvBilgi[i][evInterior] = 12;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
					ParaEkle(playerid, -30000);
				}
				case 23: 
				{
					if(oyuncuData[playerid][oPara] < 5000) return hataMesaji(playerid, "Yeterli paran yok.($5000)");

					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = 266.5019;
					EvBilgi[i][evIcPos][1] = 304.8576;
					EvBilgi[i][evIcPos][2] = 999.1484;
					EvBilgi[i][evIcPos][3] = 0.0;
					EvBilgi[i][evInterior] = 2;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
					ParaEkle(playerid, -5000);
				}
				case 24: 
				{
					if(oyuncuData[playerid][oPara] < 40000) return hataMesaji(playerid, "Yeterli paran yok.($40000)");

					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = 1236.8832;
					EvBilgi[i][evIcPos][1] = -667.2654;
					EvBilgi[i][evIcPos][2] = 2085.6919;
					EvBilgi[i][evIcPos][3] = 0.0;
					EvBilgi[i][evInterior] = 1;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
					ParaEkle(playerid, -40000);
				}
				case 25: //masonplay evi
				{
					if(oyuncuData[playerid][oPara] < 50000) return hataMesaji(playerid, "Yeterli paran yok.($50000)");

					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = 244.5059;
					EvBilgi[i][evIcPos][1] = 1767.8184;
					EvBilgi[i][evIcPos][2] = 1000.6110;
					EvBilgi[i][evIcPos][3] = 0.0;
					EvBilgi[i][evInterior] = 1;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
					ParaEkle(playerid, -50000);
				}
				case 26://güzel malikane
				{
					if(oyuncuData[playerid][oPara] < 60000) return hataMesaji(playerid, "Yeterli paran yok.($60000)");

					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = 1568.5181;
					EvBilgi[i][evIcPos][1] = -4.3185;
					EvBilgi[i][evIcPos][2] = 1100.9153;
					EvBilgi[i][evIcPos][3] = 179.5240;
					EvBilgi[i][evInterior] = 0;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
					ParaEkle(playerid, -60000);
				}
				case 27: { //karavan interior
					if(oyuncuData[playerid][oPara] < 5000) return hataMesaji(playerid, "Yeterli paran yok.($5000)");

					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = 2513.3462;
					EvBilgi[i][evIcPos][1] = -1729.0845;
					EvBilgi[i][evIcPos][2] = 2778.6372;
					EvBilgi[i][evIcPos][3] = 87.9297;
					EvBilgi[i][evInterior] = 0;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
					ParaEkle(playerid, -5000);
				}
				case 28: { // lüks otel odasý
					if(oyuncuData[playerid][oPara] < 10000) return hataMesaji(playerid, "Yeterli paran yok.($10000)");

					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = 444.6640;
					EvBilgi[i][evIcPos][1] = 510.0681;
					EvBilgi[i][evIcPos][2] = 1001.6638;
					EvBilgi[i][evIcPos][3] = 271.4584;
					EvBilgi[i][evInterior] = 0;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
					ParaEkle(playerid, -10000);
				}
				default:
				{
					hataMesaji(playerid, "Bu ev dekoru geçici olarak devre dýþý býrakýlmýþtýr.");
				}
			}
			return 1;
		}

		stock adminevdekordegistir(playerid, i, dekorid)
		{
			switch(dekorid) {
				case 0: {
					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = 1412.639892;
					EvBilgi[i][evIcPos][1] = -1.787510;
					EvBilgi[i][evIcPos][2] = 1000.924377;
					EvBilgi[i][evIcPos][3] = 90.4601;
					EvBilgi[i][evInterior] = 1;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
				}
				case 1: {
					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = -2369.5337;
					EvBilgi[i][evIcPos][1] = 435.1958;
					EvBilgi[i][evIcPos][2] = 3453.1218;
					EvBilgi[i][evIcPos][3] = 0.0;
					EvBilgi[i][evInterior] = 1;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
				}
				case 2: {
					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = 2439.1328;
					EvBilgi[i][evIcPos][1] = -95.9174;
					EvBilgi[i][evIcPos][2] = 1147.8845;
					EvBilgi[i][evIcPos][3] = 0.0;
					EvBilgi[i][evInterior] = 1;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
				}
				case 3: {
					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = 857.8408;
					EvBilgi[i][evIcPos][1] = 31.3968;
					EvBilgi[i][evIcPos][2] = 582.6943;
					EvBilgi[i][evIcPos][3] = 0.0;
					EvBilgi[i][evInterior] = 1;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
				}
				case 4: {
					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = -674.9788;
					EvBilgi[i][evIcPos][1] = -2166.0142;
					EvBilgi[i][evIcPos][2] = 1502.0964;
					EvBilgi[i][evIcPos][3] = 0.0;
					EvBilgi[i][evInterior] = 1;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
				}
				case 5: {
					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = -2169.9768;
					EvBilgi[i][evIcPos][1] = -2135.8308;
					EvBilgi[i][evIcPos][2] = 1503.1005;
					EvBilgi[i][evIcPos][3] = 0.0;
					EvBilgi[i][evInterior] = 1;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
				}
				case 6: {
					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = -1838.9821;
					EvBilgi[i][evIcPos][1] = 1227.9738;
					EvBilgi[i][evIcPos][2] = 1502.0082;
					EvBilgi[i][evIcPos][3] = 0.0;
					EvBilgi[i][evInterior] = 1;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
				}
				case 7: {
					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = 2408.0198;
					EvBilgi[i][evIcPos][1] = -434.1076;
					EvBilgi[i][evIcPos][2] = 1503.0000;
					EvBilgi[i][evIcPos][3] = 0.0;
					EvBilgi[i][evInterior] = 1;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
				}
				case 8: {
					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = 64.5504;
					EvBilgi[i][evIcPos][1] = -239.8190;
					EvBilgi[i][evIcPos][2] = 1201.7629;
					EvBilgi[i][evIcPos][3] = 0.0;
					EvBilgi[i][evInterior] = 1;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
				}
				case 9: {
					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = 2778.0417;
					EvBilgi[i][evIcPos][1] = -65.6767;
					EvBilgi[i][evIcPos][2] = 1318.8390;
					EvBilgi[i][evIcPos][3] = 0.0;
					EvBilgi[i][evInterior] = 1;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
				}
				case 10: {
					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = 438.9539;
					EvBilgi[i][evIcPos][1] = 1364.9796;
					EvBilgi[i][evIcPos][2] = 1118.8416;
					EvBilgi[i][evIcPos][3] = 0.0;
					EvBilgi[i][evInterior] = 1;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
				}
				case 11: {
					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = -2158.7776;
					EvBilgi[i][evIcPos][1] = 643.1409;
					EvBilgi[i][evIcPos][2] = 1052.3750;
					EvBilgi[i][evIcPos][3] = 0.0;
					EvBilgi[i][evInterior] = 1;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
				}
				case 12: {
					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = 2807.5481;
					EvBilgi[i][evIcPos][1] = -1174.4093;
					EvBilgi[i][evIcPos][2] = 1025.5703;
					EvBilgi[i][evIcPos][3] = 0.0;
					EvBilgi[i][evInterior] = 8;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
				}
				case 13: { 
					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = 318.564971;
					EvBilgi[i][evIcPos][1] = 1118.209960;
					EvBilgi[i][evIcPos][2] = 1083.882812;
					EvBilgi[i][evIcPos][3] = 0.0;
					EvBilgi[i][evInterior] = 5;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
				}
				case 14:
				{
					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = 2495.8567;
					EvBilgi[i][evIcPos][1] = -1692.2336;
					EvBilgi[i][evIcPos][2] = 1014.7422;
					EvBilgi[i][evIcPos][3] = 0.0;
					EvBilgi[i][evInterior] = 3;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
				}
				case 15: {
					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = 2468.8259;
					EvBilgi[i][evIcPos][1] = -1698.3224;
					EvBilgi[i][evIcPos][2] = 1013.5078;
					EvBilgi[i][evIcPos][3] = 0.0;
					EvBilgi[i][evInterior] = 2;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
				}
				case 16: {
					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = 2324.419921;
					EvBilgi[i][evIcPos][1] = -1145.568359;
					EvBilgi[i][evIcPos][2] = 1050.710083;
					EvBilgi[i][evIcPos][3] = 0.0;
					EvBilgi[i][evInterior] = 12;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
				}
				case 23: 
				{
					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = 266.5019;
					EvBilgi[i][evIcPos][1] = 304.8576;
					EvBilgi[i][evIcPos][2] = 999.1484;
					EvBilgi[i][evIcPos][3] = 0.0;
					EvBilgi[i][evInterior] = 2;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
				}
				case 24: 
				{
					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = 1236.8832;
					EvBilgi[i][evIcPos][1] = -667.2654;
					EvBilgi[i][evIcPos][2] = 2085.6919;
					EvBilgi[i][evIcPos][3] = 0.0;
					EvBilgi[i][evInterior] = 1;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
				}
				case 25: //masonplay evi
				{
					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = 244.5059;
					EvBilgi[i][evIcPos][1] = 1767.8184;
					EvBilgi[i][evIcPos][2] = 1000.6110;
					EvBilgi[i][evIcPos][3] = 0.0;
					EvBilgi[i][evInterior] = 1;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
				}
				case 26: //ahþap ev
				{
					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = 237.38561;
					EvBilgi[i][evIcPos][1] = -667.1615;
					EvBilgi[i][evIcPos][2] = 2085.6919;
					EvBilgi[i][evIcPos][3] = 179.6201;
					EvBilgi[i][evInterior] = 0;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
				}
				case 27: // dandik ev
				{
					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = -2369.5979;
					EvBilgi[i][evIcPos][1] = 434.8756;
					EvBilgi[i][evIcPos][2] = 452.12183;
					EvBilgi[i][evIcPos][3] = 95.6185;
					EvBilgi[i][evInterior] = 0;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
				}
				case 28: //ev küçüük
				{
					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = 439.34502;
					EvBilgi[i][evIcPos][1] = -95.8520;
					EvBilgi[i][evIcPos][2] = 146.88451;
					EvBilgi[i][evIcPos][3] = 184.6491;
					EvBilgi[i][evInterior] = 0;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
				}
				case 29: //ghetto aðýr ghetto kayýt stüdyosu
				{
					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = 2158.7039;
					EvBilgi[i][evIcPos][1] = -1737.0090;
					EvBilgi[i][evIcPos][2] = 3001.0859;
					EvBilgi[i][evIcPos][3] = 96.3118;
					EvBilgi[i][evInterior] = 0;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
				}
				case 30://güzel malikane
				{
					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = 1568.5181;
					EvBilgi[i][evIcPos][1] = -4.3185;
					EvBilgi[i][evIcPos][2] = 1100.9153;
					EvBilgi[i][evIcPos][3] = 179.5240;
					EvBilgi[i][evInterior] = 0;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
				}
				case 31:// kedili ev
				{
					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = 64.2439;
					EvBilgi[i][evIcPos][1] = -240.0393;
					EvBilgi[i][evIcPos][2] = 1201.7629;
					EvBilgi[i][evIcPos][3] = 269.5881;
					EvBilgi[i][evInterior] = 0;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
				}
				case 32:// küçük ev rose
				{
					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = 857.2134;
					EvBilgi[i][evIcPos][1] = 1.29003;
					EvBilgi[i][evIcPos][2] = 581.6943;
					EvBilgi[i][evIcPos][3] = 93.8816;
					EvBilgi[i][evInterior] = 0;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
				}
				case 33://kv1 house
				{
					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = 438.8365;
					EvBilgi[i][evIcPos][1] = 1365.0884;
					EvBilgi[i][evIcPos][2] = 1118.8416;
					EvBilgi[i][evIcPos][3] = 89.3437;
					EvBilgi[i][evInterior] = 0;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
				}
				case 34:// lüks ev 2
				{
					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = -674.8892;
					EvBilgi[i][evIcPos][1] = -2165.9714;
					EvBilgi[i][evIcPos][2] = 1501.0964;
					EvBilgi[i][evIcPos][3] = 87.4548;
					EvBilgi[i][evInterior] = 0;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
				}
				case 35:// lüks ev 3
				{
					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = -2170.1421;
					EvBilgi[i][evIcPos][1] = -2135.9539;
					EvBilgi[i][evIcPos][2] = 501.1005;
					EvBilgi[i][evIcPos][3] = 2.1904;
					EvBilgi[i][evInterior] = 0;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
				}
				case 36: //mafia int evi
				{
					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = 2777.8931;
					EvBilgi[i][evIcPos][1] = -65.6212;
					EvBilgi[i][evIcPos][2] = 1318.8390;
					EvBilgi[i][evIcPos][3] = 179.8078;
					EvBilgi[i][evInterior] = 0;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
				}
				case 38: { //percy miller evi nuub ID:37 TO ID:17
					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = 2434.9587;
					EvBilgi[i][evIcPos][1] = -1622.3802;
					EvBilgi[i][evIcPos][2] = 1568.9280;
					EvBilgi[i][evIcPos][3] = 356.7046;
					EvBilgi[i][evInterior] = 0;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
					}
				case 39: { // valachinin evi
					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = -1426.9221;
					EvBilgi[i][evIcPos][1] = 1723.5494;
					EvBilgi[i][evIcPos][2] = 1501.9989;
					EvBilgi[i][evIcPos][3] = 269.6121;
					EvBilgi[i][evInterior] = 0;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
					}
				case 40: { //yeni yil evi
					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = 2408.1670;
					EvBilgi[i][evIcPos][1] = -434.1099;
					EvBilgi[i][evIcPos][2] = 1502.0000;
					EvBilgi[i][evIcPos][3] = 189.5112;
					EvBilgi[i][evInterior] = 0;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
				}
				case 41: { // cadi evi
					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = -1839.0179;
					EvBilgi[i][evIcPos][1] = 1227.9777;
					EvBilgi[i][evIcPos][2] = 1501.0082;
					EvBilgi[i][evIcPos][3] = 355.7637;
					EvBilgi[i][evInterior] = 0;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
				}
				case 42: {  // güzel kýrmýzý ev interioru
					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = 1411.2767;
					EvBilgi[i][evIcPos][1] = -1481.9347;
					EvBilgi[i][evIcPos][2] = 106.9689;
					EvBilgi[i][evIcPos][3] = 266.7698;
					EvBilgi[i][evInterior] = 0;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
				}
				case 43: { //karavan interior
					if(EvBilgi[i][evDekor] == dekorid) return hataMesaji(playerid, "Bu ev zaten bu dekora sahip.");
					EvBilgi[i][evIcPos][0] = 2513.3462;
					EvBilgi[i][evIcPos][1] = -1729.0845;
					EvBilgi[i][evIcPos][2] = 2778.6372;
					EvBilgi[i][evIcPos][3] = 87.9297;
					EvBilgi[i][evInterior] = 0;
					EvBilgi[i][evDekor] = dekorid;
					Ev_Kaydet(i);
				}
				default:
				{
					hataMesaji(playerid, "Bu ev dekoru geçici olarak devre dýþý býrakýlmýþtýr.");
				}
			}
			return 1;
		}

		stock aracbirlikturbul(arac)
		{
			static birlik, aracid;
			aracid = Arac_IDBul(arac);
			if(AracBilgi[aracid][aracBirlik] > -1) {
				birlik = AracBilgi[aracid][aracBirlik];
				return BirlikBilgi[BirlikIDBul(birlik)][birlikTur];
			}
			return -1;
		}

		stock BirlikIDBul(sqlid)
		{
			for (new i = 0; i != MAKSIMUM_BIRLIK; i ++) if(BirlikBilgi[i][birlikKullanimda] && BirlikBilgi[i][birlikID] == sqlid)
				return i;

			return -1;
		}

stock SHKGereksinim(playerid) // Silah hilesi kontrol gereksinim
{
	if(GetPlayerWeapon(playerid) == 23 && TaserKontrol(playerid) || GetPlayerWeapon(playerid) == 25 && BeanbagKontrol(playerid))
		return 1;

	if(GetPlayerWeapon(playerid) == WEAPON_PARACHUTE)
		return 1;

	return 0;
}

stock binaturisim(tur)
{
	static turisim[64];
	switch(tur) {
		case 0: turisim = "Yok";
		case 1: turisim = "Banka";
		case 2: turisim = "DMV";
		case 3: turisim = "Polis Departmaný";
		case 4: turisim = "Devlet";
		case 5: turisim = "Hastane";
		case 6: turisim = "Haber Ajansý";
	}
	return turisim;
}

stock YetkinizYok(playerid) return hataMesaji(playerid, "Sunucuda böyle bir komut bulunmamaktadýr.");
stock UygunDegilMesaj(playerid) return hataMesaji(playerid, "Bu komutu þu anda kullanamazsýnýz.");

new stock aracIsimler[][] = {
	"Landstalker", "Bravura", "Buffalo", "Linerunner", "Perrenial", "Sentinel", "Dumper", "Firetruck", "Trashmaster",
	"Stretch", "Manana", "Infernus", "Voodoo", "Pony", "Mule", "Cheetah", "Ambulance", "Leviathan", "Moonbeam",
	"Esperanto", "Taxi", "Washington", "Bobcat", "Whoopee", "BF Injection", "Hunter", "Premier", "Enforcer",
	"Securicar", "Banshee", "Predator", "Bus", "Rhino", "Barracks", "Hotknife", "Trailer", "Previon", "Coach",
	"Cabbie", "Stallion", "Rumpo", "RC Bandit", "Romero", "Packer", "Monster", "Admiral", "Squalo", "Seasparrow",
	"Pizzaboy", "Tram", "Trailer", "Turismo", "Speeder", "Reefer", "Tropic", "Flatbed", "Yankee", "Caddy", "Solair",
	"Berkley's", "Skimmer", "PCJ-600", "Faggio", "Freeway", "RC Baron", "RC Raider", "Glendale", "Oceanic",
	"Sanchez", "Sparrow", "Patriot", "Quad", "Coastguard", "Dinghy", "Hermes", "Sabre", "Rustler", "ZR-350", "Walton",
	"Regina", "Comet", "BMX", "Burrito", "Camper", "Marquis", "Baggage", "Dozer", "Maverick", "News Chopper", "Rancher",
	"FBI Rancher", "Virgo", "Greenwood", "Jetmax", "Hotring", "Sandking", "Blista", "Police Maverick",
	"Boxville", "Benson", "Mesa", "RC Goblin", "Hotring Racer A", "Hotring Racer B", "Bloodring Banger", "Rancher",
	"Super GT", "Elegant", "Journey", "Bike", "Mountain Bike", "Beagle", "Cropduster", "Stunt", "Tanker", "Roadtrain",
	"Nebula", "Majestic", "Buccaneer", "Shamal", "Hydra", "FCR-900", "NRG-500", "HPV1000", "Cement Truck", "Tow Truck",
	"Fortune", "Cadrona", "SWAT Truck", "Willard", "Forklift", "Tractor", "Combine", "Feltzer", "Remington", "Slamvan",
	"Blade", "Streak", "Freight", "Vortex", "Vincent", "Bullet", "Clover", "Sadler", "Firetruck", "Hustler", "Intruder",
	"Primo", "Cargobob", "Tampa", "Sunrise", "Merit", "Utility", "Nevada", "Yosemite", "Windsor", "Monster", "Monster",
	"Uranus", "Jester", "Sultan", "Stratum", "Elegy", "Raindance", "RC Tiger", "Flash", "Tahoma", "Savanna", "Bandito",
	"Freight Flat", "Streak Carriage", "Kart", "Mower", "Dune", "Sweeper", "Broadway", "Tornado", "AT-400", "DFT-30",
	"Huntley", "Stafford", "BF-400", "News Van", "Tug", "Trailer", "Emperor", "Wayfarer", "Euros", "Hotdog", "Club",
	"Freight Box", "Trailer", "Andromada", "Dodo", "RC Cam", "Launch", "VCPD Devriye Aracý", "VCPD Devriye Aracý", "VCPD Devriye Aracý",
	"Police Rancher", "Picador", "S.W.A.T", "Alpha", "Phoenix", "Glendale", "Sadler", "Luggage", "Luggage", "Stairs",
	"Boxville", "Tiller", "Utility Trailer"
};

stock GetVehicleModelByName(const name[])
{
	if(IsNumeric(name) && (strval(name) >= 400 && strval(name) <= 611))
		return strval(name);

	for (new i = 0; i < sizeof(aracIsimler); i ++)
	{
		if(strfind(aracIsimler[i], name, true) != -1)
		{
			return i + 400;
		}
	}
	return 0;
}

stock Arac_IDBul(vehicleid)
{
	foreach(new i : Araclar) if(i == vehicleid) {
		return i;
	}
	return -1;
}

stock IsNumeric(const str[])
{
	for (new i = 0, l = strlen(str); i != l; i ++)
	{
		if(i == 0 && str[0] == '-')
			continue;

		else if(str[i] < '0' || str[i] > '9')
			return 0;
	}
	return 1;
}

stock Pompa_GetFreeID()
{
	for (new i = 0; i < MAKSIMUM_BENZIN_POMPASI; i ++) if(!BenzinPompasi[i][pompaKullanimda]) {
		return i;
	}
	return -1;
}

stock Pompa_Kaldir(pompaid)
{
	if(pompaid != -1 && BenzinPompasi[pompaid][pompaKullanimda])
	{
		new string[90];

		format(string, sizeof(string), "DELETE FROM `benzinpompalari` WHERE `pompaID` = '%d'", BenzinPompasi[pompaid][pompaID]);
		mysql_tquery(g_SQL, string);

		if(IsValidDynamic3DTextLabel(BenzinPompasi[pompaid][pompaText3D])) DestroyDynamic3DTextLabel(BenzinPompasi[pompaid][pompaText3D]);
		if(IsValidDynamicObject(BenzinPompasi[pompaid][pompaObje])) DestroyDynamicObject(BenzinPompasi[pompaid][pompaObje]);

		/*foreach (new i : Player) if(oyuncuData[i][pGasPump] == pompaid) {
		    StopRefilling(i);
		}*/
		    BenzinPompasi[pompaid][pompaKullanimda] = false;
		    BenzinPompasi[pompaid][pompaBenzin] = 0;
		}
		return 1;
	}

	stock Pompa_Yarat(playerid, isyeriid, ucret)
	{
		static Float:x, Float:y, Float:z, Float:angle, string[64], id = -1;

		if(GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
		{
			if((id = Pompa_GetFreeID()) != -1)
			{
				x += 5.0 * floatsin(-angle, degrees);
				y += 5.0 * floatcos(-angle, degrees);

				BenzinPompasi[id][pompaKullanimda] = true;
				BenzinPompasi[id][pompaIsyeri] = IsyeriBilgi[isyeriid][isyeriID];
				BenzinPompasi[id][pompaPos][0] = x;
				BenzinPompasi[id][pompaPos][1] = y;
				BenzinPompasi[id][pompaPos][2] = z;
				BenzinPompasi[id][pompaPos][3] = angle;
				BenzinPompasi[id][pompaBenzin] = 2000;
				BenzinPompasi[id][pompaObje] = CreateDynamicObject(3465, x, y, z, 0.0, 0.0, angle);
				BenzinPompasi[id][pompaUcret] = ucret;

				format(string, sizeof(string), "INSERT INTO `benzinpompalari` (`pompaIsyeri`) VALUES(%d)", IsyeriBilgi[isyeriid][isyeriID]);
				mysql_tquery(g_SQL, string, "BenzinPompasiYaratildi", "d", id);
				return id;
			}
		}
		return -1;
	}

	stock Pompa_Yenile(pompaid)
	{
		if(pompaid != -1 && BenzinPompasi[pompaid][pompaKullanimda])
		{
			new bilgi[128];
			format(bilgi, sizeof(bilgi), "POMPA %d\n{27A40}/benzinal", pompaid);
			if(IsValidDynamic3DTextLabel(BenzinPompasi[pompaid][pompaText3D])) DestroyDynamic3DTextLabel(BenzinPompasi[pompaid][pompaText3D]);
			if(IsValidDynamicObject(BenzinPompasi[pompaid][pompaObje])) DestroyDynamicObject(BenzinPompasi[pompaid][pompaObje]);

			BenzinPompasi[pompaid][pompaText3D] = CreateDynamic3DTextLabel(bilgi, RENK_SERVER, BenzinPompasi[pompaid][pompaPos][0], BenzinPompasi[pompaid][pompaPos][1], BenzinPompasi[pompaid][pompaPos][2] + 1.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, -1);
			BenzinPompasi[pompaid][pompaObje] = CreateDynamicObject(3465, BenzinPompasi[pompaid][pompaPos][0], BenzinPompasi[pompaid][pompaPos][1], BenzinPompasi[pompaid][pompaPos][2], 0.0, 0.0, BenzinPompasi[pompaid][pompaPos][3]);
		}
		return 1;
	}

	stock Pompa_Kaydet(pompaid)
	{
		new query[384];
		mysql_format(g_SQL, query, sizeof(query), "UPDATE `benzinpompalari` SET `pompaPosX` = '%.4f', `pompaPosY` = '%.4f', `pompaPosZ` = '%.4f', `pompaPosA` = '%.4f', `pompaBenzin` = '%d'",
			BenzinPompasi[pompaid][pompaPos][0],
			BenzinPompasi[pompaid][pompaPos][1],
			BenzinPompasi[pompaid][pompaPos][2],
			BenzinPompasi[pompaid][pompaPos][3],
			BenzinPompasi[pompaid][pompaBenzin]
			);
		mysql_format(g_SQL, query, sizeof(query), "%s, `pompaUcret` = '%d', `pompaIsyeri` = '%d' WHERE `pompaID` = '%d'",
			query,
			BenzinPompasi[pompaid][pompaUcret],
			BenzinPompasi[pompaid][pompaIsyeri],
			BenzinPompasi[pompaid][pompaID]
			);
		return mysql_tquery(g_SQL, query);
	}

	stock Arac_Spawn(aracid)
	{
		SetVehicleToRespawn(aracid);
		SetVehicleVirtualWorld(aracid, AracBilgi[aracid][aracWorld]);
		SetVehicleHealth(aracid, 999.9);
		return 1;
	}

	stock Arac_Yarat(sahipid, modelid, Float:x, Float:y, Float:z, Float:angle, renk1, renk2, fiyat = 0)
	{
	//#pragma unused playerid
		new aracid;
		if(renk1 == -1) renk1 = random(255);
		if(renk2 == -1) renk2 = random(255);
		aracid = CreateVehicle(modelid, x, y, z, angle, renk1, renk2, -1);

		AracBilgi[aracid][aracCani] = 999.9;
		SetVehicleHealth(aracid, 999.9);
		AracBilgi[aracid][aracYarat] = aracid;
		AracBilgi[aracid][aracKullanimda] = true;
		AracBilgi[aracid][aracModel] = modelid;
		AracBilgi[aracid][aracTur] = 0;
		AracBilgi[aracid][aracSahip] = sahipid;
		AracBilgi[aracid][aracPos][0] = x;
		AracBilgi[aracid][aracPos][1] = y;
		AracBilgi[aracid][aracPos][2] = z;
		AracBilgi[aracid][aracPos][3] = angle;
		AracBilgi[aracid][araccalintisure] = 0;
		AracBilgi[aracid][kilitseviye] = 0;
		AracBilgi[aracid][alarmseviye] = 0;
		AracBilgi[aracid][aracSigorta] = 5;
		AracBilgi[aracid][aracRadyoDurum] = false;
		AracBilgi[aracid][aracRenk1] = renk1;
		AracBilgi[aracid][aracRenk2] = renk2;
		AracBilgi[aracid][aracPaintjob] = -1;
		AracBilgi[aracid][aracKilit] = false;
		format(AracBilgi[aracid][aracYazi], 128, "");
		AracBilgi[aracid][aracAnahtar] = -1;
		AracBilgi[aracid][aracKiralik] = 0;
		AracBilgi[aracid][aKiraUcret] = 0;
		AracBilgi[aracid][aracMeslek] = -1;
		AracBilgi[aracid][aracKM] = 0.00;
	//AracBilgi[aracid][aracOzelPlaka] = 0;
		AracBilgi[aracid][aracBenzin] = 80.0;
		AracBilgi[aracid][aracFiyat] = fiyat;
		AracBilgi[aracid][aracVergi] = 0;
		AracBilgi[aracid][aracBirlik] = -1;
		AracBilgi[aracid][aracFirma] = -1;
		AracBilgi[aracid][aracInt] = 0;
		AracBilgi[aracid][aracWorld] = 0;
		for(new mod_i = 0; mod_i < 14; mod_i++){AracBilgi[aracid][aracParca][mod_i] = 0;}
			mysql_tquery(g_SQL, "INSERT INTO `araclar` (`aracModel`) VALUES(0)", "AracYaratildi", "d", aracid);
		Iter_Add(Araclar, aracid);
		return 1;
	}

	stock AracRespawn()
	{
		foreach(new aracid : Araclar) if(IsValidVehicle(aracid))
		{
			if(AracBilgi[aracid][aracBirlik] == -1 && AracBilgi[aracid][aracMeslek] == -1 && AracBilgi[aracid][aracFirma] == -1 && AracBilgi[aracid][aracTur] == 0)
			{
				if(SurucuBul(aracid) == INVALID_PLAYER_ID)
				{
					if(aractabeladurum[aracid] == 1)
					{
						if(IsValidDynamic3DTextLabel(AracBilgi[aracid][aracText])) DestroyDynamic3DTextLabel(AracBilgi[aracid][aracText]);
						aractabeladurum[AracBilgi[aracid][aracYarat]] = 0;
						AracBilgi[aracid][aracYazi][0] = 0;
					}

					AracBilgi[aracid][aracKullanimda] = false;
					AracBilgi[aracid][aracID] = 0;
					AracBilgi[aracid][aracSahip] = 0;

					Iter_SafeRemove(Araclar, 0, AracBilgi[aracid][aracYarat]);
					if(IsValidVehicle(AracBilgi[aracid][aracYarat])) DestroyVehicle(AracBilgi[aracid][aracYarat]);
					AracBilgi[aracid][aracYarat] = 0;
				}
			}
			else
			{
				if(SurucuBul(aracid) == INVALID_PLAYER_ID)
				{
					SetVehicleToRespawn(aracid);
				}
			}
		}
		return 1;
	}

	stock Arac_Sil(aracid)
	{
		if(aracid != -1 && AracBilgi[aracid][aracKullanimda])
		{
			static string[128];
			format(string, sizeof(string), "DELETE FROM `araclar` WHERE `aracid` = '%d'", AracBilgi[aracid][aracID]);
			mysql_tquery(g_SQL, string);

			if(aractabeladurum[aracid] == 1)
			{
				if(IsValidDynamic3DTextLabel(AracBilgi[aracid][aracText])) DestroyDynamic3DTextLabel(AracBilgi[aracid][aracText]);
				aractabeladurum[AracBilgi[aracid][aracYarat]] = 0;
				AracBilgi[aracid][aracYazi][0] = 0;
			}

			if(IsValidVehicle(aracid))
				DestroyVehicle(aracid);

			AracBilgi[aracid][aracKullanimda] = false;
			AracBilgi[aracid][aracID] = 0;
			AracBilgi[aracid][aracSahip] = 0;
			AracBilgi[aracid][aracYarat] = 0;
			Iter_Remove(Araclar, aracid);
		}
		return 1;
	}

	stock Arac_Sakla(aracid)
	{
		if(aracid != -1 && AracBilgi[aracid][aracKullanimda])
		{
			if(aractabeladurum[aracid] == 1)
			{
				if(IsValidDynamic3DTextLabel(AracBilgi[aracid][aracText])) DestroyDynamic3DTextLabel(AracBilgi[aracid][aracText]);
				aractabeladurum[AracBilgi[aracid][aracYarat]] = 0;
				AracBilgi[aracid][aracYazi][0] = 0;
			}

			if(IsValidVehicle(aracid))
				DestroyVehicle(aracid);

			AracBilgi[aracid][aracKullanimda] = false;
			AracBilgi[aracid][aracID] = 0;
			AracBilgi[aracid][aracSahip] = 0;
			AracBilgi[aracid][aracYarat] = 0;
			Iter_Remove(Araclar, aracid);
		}
		return 1;
	}

	stock Firmaarac_TamamenSil(aracid)
	{
		if(aracid != -1)
		{
			static string[128];
			format(string, sizeof(string), "DELETE FROM `araclar` WHERE `aracFirma` = '%d'", AracBilgi[aracid][aracFirma]);
			mysql_tquery(g_SQL, string);

			if(aractabeladurum[aracid] == 1)
			{
				if(IsValidDynamic3DTextLabel(AracBilgi[aracid][aracText])) DestroyDynamic3DTextLabel(AracBilgi[aracid][aracText]);
				aractabeladurum[AracBilgi[aracid][aracYarat]] = 0;
				AracBilgi[aracid][aracYazi][0] = 0;
			}

			if(IsValidVehicle(AracBilgi[aracid][aracYarat]))
				DestroyVehicle(AracBilgi[aracid][aracYarat]);

			AracBilgi[aracid][aracKullanimda] = false;
			AracBilgi[aracid][aracID] = 0;
			AracBilgi[aracid][aracSahip] = 0;
			AracBilgi[aracid][aracYarat] = 0;
			AracBilgi[aracid][aracFirma] = -1;

			Iter_SafeRemove(Araclar, 0, aracid);
		}

		return 1;
	}

	stock Firmaarac_Sil(aracid)
	{
		if(aracid != -1 && AracBilgi[aracid][aracKullanimda])
		{
			static string[128];
			format(string, sizeof(string), "DELETE FROM `araclar` WHERE `aracPlaka` = '%e'", AracBilgi[aracid][aracPlaka]);
			mysql_tquery(g_SQL, string);

			if(aractabeladurum[aracid] == 1)
			{
				if(IsValidDynamic3DTextLabel(AracBilgi[aracid][aracText])) DestroyDynamic3DTextLabel(AracBilgi[aracid][aracText]);
				aractabeladurum[AracBilgi[aracid][aracYarat]] = 0;
				AracBilgi[aracid][aracYazi][0] = 0;
			}

			if(IsValidVehicle(AracBilgi[aracid][aracYarat]))
				DestroyVehicle(AracBilgi[aracid][aracYarat]);

			AracBilgi[aracid][aracKullanimda] = false;
			AracBilgi[aracid][aracID] = 0;
			AracBilgi[aracid][aracSahip] = 0;
			AracBilgi[aracid][aracYarat] = 0;
			Iter_Remove(Araclar, aracid);
		}
		return 1;
	}

	stock Arac_Kaydet(aracid)
	{
		static query[2400];

		mysql_format(g_SQL, query, sizeof(query), "UPDATE `araclar` SET `aracModel` = '%d', `aracPlaka` = '%e', `aracSahip` = '%d', `aracPosX` = '%.4f', `aracPosY` = '%.4f', `aracPosZ` = '%.4f', `aracPosR` = '%.4f', `aracRenk1` = '%d', `aracRenk2` = '%d', `aracPaintjob` = '%d', `aracKilit` = '%d' WHERE `aracID` = '%d'",
			AracBilgi[aracid][aracModel],
			AracBilgi[aracid][aracPlaka],
			AracBilgi[aracid][aracSahip],
			AracBilgi[aracid][aracPos][0],
			AracBilgi[aracid][aracPos][1],
			AracBilgi[aracid][aracPos][2],
			AracBilgi[aracid][aracPos][3],
			AracBilgi[aracid][aracRenk1],
			AracBilgi[aracid][aracRenk2],
			AracBilgi[aracid][aracPaintjob],
			AracBilgi[aracid][aracKilit],
			AracBilgi[aracid][aracID]
			);
		mysql_tquery(g_SQL, query);
		mysql_format(g_SQL, query, sizeof(query), "UPDATE `araclar` SET `aracBirlik` = '%d', `aracYazi` = '%e', `aracTur` = '%d', `Anahtar` = '%d', `Kiralik` = '%d', `KiraUcret` = '%d', `KiraZaman` = '%d' WHERE `aracID` = '%d'",
			AracBilgi[aracid][aracBirlik],
			AracBilgi[aracid][aracYazi],
			AracBilgi[aracid][aracTur],
			AracBilgi[aracid][aracAnahtar],
			AracBilgi[aracid][aracKiralik],
			AracBilgi[aracid][aKiraUcret],
			AracBilgi[aracid][aKiraZaman],
			AracBilgi[aracid][aracID]
			);
		mysql_tquery(g_SQL, query);
		mysql_format(g_SQL, query, sizeof(query), "UPDATE `araclar` SET `aracWorld` = '%d', `aracInt` = '%d', `aracMeslek` = '%d', `aracKM` = '%.2f', `aracBenzin` = '%.2f', `aracFiyat` = '%d', `aracVergi` = '%d' WHERE `aracID` = '%d'",
			AracBilgi[aracid][aracWorld],
			AracBilgi[aracid][aracInt],
			AracBilgi[aracid][aracMeslek],
			AracBilgi[aracid][aracKM],
			AracBilgi[aracid][aracBenzin],
			AracBilgi[aracid][aracFiyat],
			AracBilgi[aracid][aracVergi],
			AracBilgi[aracid][aracID]
			);
		mysql_tquery(g_SQL, query);
		mysql_format(g_SQL, query, sizeof(query), "UPDATE `araclar` SET `aracCeza` = '%d', `araccalintisure` = '%d', `aracFirma` = '%d', `aracSigorta` = '%d', `kilitseviye` = '%d', `alarmseviye` = '%d', `araccan` = '%d' WHERE `aracID` = '%d'",
			AracBilgi[aracid][aracCeza],
			AracBilgi[aracid][araccalintisure],
			AracBilgi[aracid][aracFirma],
			AracBilgi[aracid][aracSigorta],
			AracBilgi[aracid][kilitseviye],
			AracBilgi[aracid][alarmseviye],
			AracCaniCek(aracid),
			AracBilgi[aracid][aracID]
			);
		mysql_tquery(g_SQL, query);
		return 1;
	}

	stock Boombox_Yerlestir(playerid)
	{
		new Float:angle, string[512];
		GetPlayerFacingAngle(playerid, angle);

		strpack(BoomboxBilgi[playerid][boomboxURL], "", 128 char);
		GetPlayerPos(playerid, BoomboxBilgi[playerid][boomboxPos][0], BoomboxBilgi[playerid][boomboxPos][1], BoomboxBilgi[playerid][boomboxPos][2]);

		BoomboxBilgi[playerid][boomboxKullanimda] = true;
		BoomboxBilgi[playerid][boomboxInterior] = GetPlayerInterior(playerid);
		BoomboxBilgi[playerid][boomboxWorld] = GetPlayerVirtualWorld(playerid);
		format(string, sizeof(string), "[Müzik Kutusu]\nYerleþtiren: %s", OyuncuIsim(playerid));
		BoomboxBilgi[playerid][boomboxObje] = CreateDynamicObject(2226, BoomboxBilgi[playerid][boomboxPos][0], BoomboxBilgi[playerid][boomboxPos][1], BoomboxBilgi[playerid][boomboxPos][2] - 0.9, 0.0, 0.0, angle, BoomboxBilgi[playerid][boomboxWorld], BoomboxBilgi[playerid][boomboxInterior]);
		BoomboxBilgi[playerid][boomboxText3D] = CreateDynamic3DTextLabel(string, RENK_SERVER, BoomboxBilgi[playerid][boomboxPos][0], BoomboxBilgi[playerid][boomboxPos][1], BoomboxBilgi[playerid][boomboxPos][2] - 0.7, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, BoomboxBilgi[playerid][boomboxWorld], BoomboxBilgi[playerid][boomboxInterior]);
		return 1;
	}

	stock Birlik_Yarat(isim[], amac, kisaltma[], kurucu)
	{
		new i = Iter_Free(Birlikler);
		if(i == -1) return 0;
		BirlikBilgi[i][birlikKullanimda] = true;
		format(BirlikBilgi[i][birlikAd], 32, "%s", isim);

		BirlikBilgi[i][birlikTur] = BIRLIK_ONAYSIZ;
		BirlikBilgi[i][birlikAmaci] = amac;
		BirlikBilgi[i][birlikMaksRutbe] = 20;
		BirlikBilgi[i][bDolapPos][0] = 0.0;
		BirlikBilgi[i][bDolapPos][1] = 0.0;
		BirlikBilgi[i][bDolapPos][2] = 0.0;
		BirlikBilgi[i][birlikOnay] = 1;
		format(BirlikBilgi[i][birlikkisaltma], 9, "%s", kisaltma);
		BirlikBilgi[i][oKanal] = 1;
		BirlikBilgi[i][birlikLevel] = 1;
		BirlikBilgi[i][birlikaraci] = 0;
		BirlikBilgi[i][birlikisyeri] = 0;
		BirlikRutbeleriSifirla(i);
		Birlik_Yenile(i);
		new query[1024];
		if(kurucu == -1)
		{
			mysql_format(g_SQL, query, sizeof(query), "INSERT INTO `birlikler` (`birlikID`, `birlikMaksRutbe`, `birlikOnay`, `birlikKurulus`, `birlikKurucu`, `birlikKisaltma`) VALUES('%d', 20, 1, '%e', -1, '%e')", i, Tarih(), BirlikBilgi[i][birlikkisaltma]);
			mysql_tquery(g_SQL, query);
		}
		else if(kurucu != -1)
		{
			mysql_format(g_SQL, query, sizeof(query), "INSERT INTO `birlikler` (`birlikID`, `birlikMaksRutbe`, `birlikOnay`, `birlikKurulus`, `birlikKurucu`, `birlikKisaltma`) VALUES('%d', 20, 1, '%e', '%e', '%e')", i, Tarih(), OyuncuIsim(kurucu), BirlikBilgi[i][birlikkisaltma]);
			mysql_tquery(g_SQL, query);
		}
		BirlikBilgi[i][birlikID] = i;
		Iter_Add(Birlikler, i);
		Birlik_Kaydet(i);
		return 1;
	}

	stock SQL_Baglan()
	{
		new MySQLOpt: option_id = mysql_init_options();
		mysql_set_option(option_id, AUTO_RECONNECT, true);
	#if SQL_BAGLANTI == 1
		g_SQL = mysql_connect(SQL_HOST, SQL_AD, SQL_SIFRE, SQL_DATABASE, option_id);
	#elseif SQL_BAGLANTI == 2
		g_SQL = mysql_connect(T_SQL_HOST, T_SQL_AD, T_SQL_SIFRE, T_SQL_DATABASE, option_id);
	#endif
		if (g_SQL == MYSQL_INVALID_HANDLE || mysql_errno(g_SQL) != 0)
		{
			print("[SUNUCU] Veritabanýna baðlantý saðlanamadý.\a");
			SendRconCommand("exit");
			return 1;
		}
		print("[SUNUCU] Veritabanýna baðlantý saðlandý.");
		mysql_log(ERROR | WARNING);
		mysql_set_charset("latin5", g_SQL);
		return true;
	}

	stock Tarih()
	{
		static tarih[36];
		getdate(tarih[2], tarih[1], tarih[0]);
		gettime(tarih[3], tarih[4], tarih[5]);
		format(tarih, sizeof(tarih), "%02d/%02d/%d, %02d:%02d", tarih[0], tarih[1], tarih[2], tarih[3], tarih[4]);
		return tarih;
	}

	stock SQLTarih()
	{
		static tarih[36];
		getdate(tarih[2], tarih[1], tarih[0]);
		format(tarih, sizeof(tarih), "%02d.%02d.%d", tarih[0], tarih[1], tarih[2]);
		return tarih;
	}

/* stock HesapKontrol(playerid, sifre[])
{
	static query[512], isim[MAX_PLAYER_NAME];
	GetPlayerName(playerid, isim, sizeof(isim));
	format(query, sizeof(query), "SELECT `isim` FROM `oyuncular` WHERE `isim` = '%s' AND `sifre` = '%s'", isim, MD5_Hash(sifre));
	return mysql_tquery(g_SQL, query, "GirisTest", "d", playerid);
} */

	stock BirlikRutbeleriSifirla(birlikid) {
		format(BirlikBilgi[birlikid][birlikR1], 32, "Yok");
		format(BirlikBilgi[birlikid][birlikR2], 32, "Yok");
		format(BirlikBilgi[birlikid][birlikR3], 32, "Yok");
		format(BirlikBilgi[birlikid][birlikR4], 32, "Yok");
		format(BirlikBilgi[birlikid][birlikR5], 32, "Yok");
		format(BirlikBilgi[birlikid][birlikR6], 32, "Yok");
		format(BirlikBilgi[birlikid][birlikR7], 32, "Yok");
		format(BirlikBilgi[birlikid][birlikR8], 32, "Yok");
		format(BirlikBilgi[birlikid][birlikR9], 32, "Yok");
		format(BirlikBilgi[birlikid][birlikR10], 32, "Yok");
		format(BirlikBilgi[birlikid][birlikR11], 32, "Yok");
		format(BirlikBilgi[birlikid][birlikR12], 32, "Yok");
		format(BirlikBilgi[birlikid][birlikR13], 32, "Yok");
		format(BirlikBilgi[birlikid][birlikR14], 32, "Yok");
		format(BirlikBilgi[birlikid][birlikR15], 32, "Yok");
		format(BirlikBilgi[birlikid][birlikR16], 32, "Yok");
		format(BirlikBilgi[birlikid][birlikR17], 32, "Yok");
		format(BirlikBilgi[birlikid][birlikR18], 32, "Yok");
		format(BirlikBilgi[birlikid][birlikR19], 32, "Yok");
		format(BirlikBilgi[birlikid][birlikR20], 32, "Yok");
		return true;
	}

	stock birlikarat(isim[])
	{
		static sayi = 0;
		sayi = 0;
		for (new i = 0; i != MAKSIMUM_BIRLIK; i ++) if(BirlikBilgi[i][birlikKullanimda])
		{
			if(!strcmp(BirlikBilgi[i][birlikAd], isim, true)) {
				sayi++;
			}
		}
		return sayi;
	}

	stock BirlikRutbeDuzenle(playerid)
	{
		static birlikid, yazi[640 + 128];
		birlikid = oyuncuData[playerid][oBirlik];
		if(oyuncuData[playerid][oBirlikRutbe] < BirlikBilgi[birlikid][birlikMaksRutbe])
			return hataMesaji(playerid, "Bu iþlem sadece birlik lideri tarafýndan yapýlabilir."), cmd(playerid, 0, "birlik");

		switch(BirlikBilgi[birlikid][birlikMaksRutbe]) {
			case 1: format(yazi, sizeof(yazi), "%s\n", BirlikBilgi[birlikid][birlikR1]);
			case 2: format(yazi, sizeof(yazi), "%s\n%s\n", BirlikBilgi[birlikid][birlikR1], BirlikBilgi[birlikid][birlikR2]);
			case 3: format(yazi, sizeof(yazi), "%s\n%s\n%s\n", BirlikBilgi[birlikid][birlikR1], BirlikBilgi[birlikid][birlikR2], BirlikBilgi[birlikid][birlikR3]);
			case 4: format(yazi, sizeof(yazi), "%s\n%s\n%s\n%s\n",
				BirlikBilgi[birlikid][birlikR1],
				BirlikBilgi[birlikid][birlikR2],
				BirlikBilgi[birlikid][birlikR3],
				BirlikBilgi[birlikid][birlikR4]);
			case 5: format(yazi, sizeof(yazi), "%s\n%s\n%s\n%s\n%s\n",
				BirlikBilgi[birlikid][birlikR1],
				BirlikBilgi[birlikid][birlikR2],
				BirlikBilgi[birlikid][birlikR3],
				BirlikBilgi[birlikid][birlikR4],
				BirlikBilgi[birlikid][birlikR5]);
			case 6: format(yazi, sizeof(yazi), "%s\n%s\n%s\n%s\n%s\n%s\n",
				BirlikBilgi[birlikid][birlikR1],
				BirlikBilgi[birlikid][birlikR2],
				BirlikBilgi[birlikid][birlikR3],
				BirlikBilgi[birlikid][birlikR4],
				BirlikBilgi[birlikid][birlikR5],
				BirlikBilgi[birlikid][birlikR6]);
			case 7: format(yazi, sizeof(yazi), "%s\n%s\n%s\n%s\n%s\n%s\n%s\n",
				BirlikBilgi[birlikid][birlikR1],
				BirlikBilgi[birlikid][birlikR2],
				BirlikBilgi[birlikid][birlikR3],
				BirlikBilgi[birlikid][birlikR4],
				BirlikBilgi[birlikid][birlikR5],
				BirlikBilgi[birlikid][birlikR6],
				BirlikBilgi[birlikid][birlikR7]);
			case 8: format(yazi, sizeof(yazi), "%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n",
				BirlikBilgi[birlikid][birlikR1],
				BirlikBilgi[birlikid][birlikR2],
				BirlikBilgi[birlikid][birlikR3],
				BirlikBilgi[birlikid][birlikR4],
				BirlikBilgi[birlikid][birlikR5],
				BirlikBilgi[birlikid][birlikR6],
				BirlikBilgi[birlikid][birlikR7],
				BirlikBilgi[birlikid][birlikR8]);
			case 9: format(yazi, sizeof(yazi), "%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n",
				BirlikBilgi[birlikid][birlikR1],
				BirlikBilgi[birlikid][birlikR2],
				BirlikBilgi[birlikid][birlikR3],
				BirlikBilgi[birlikid][birlikR4],
				BirlikBilgi[birlikid][birlikR5],
				BirlikBilgi[birlikid][birlikR6],
				BirlikBilgi[birlikid][birlikR7],
				BirlikBilgi[birlikid][birlikR8],
				BirlikBilgi[birlikid][birlikR9]);
			case 10: format(yazi, sizeof(yazi), "%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n",
				BirlikBilgi[birlikid][birlikR1],
				BirlikBilgi[birlikid][birlikR2],
				BirlikBilgi[birlikid][birlikR3],
				BirlikBilgi[birlikid][birlikR4],
				BirlikBilgi[birlikid][birlikR5],
				BirlikBilgi[birlikid][birlikR6],
				BirlikBilgi[birlikid][birlikR7],
				BirlikBilgi[birlikid][birlikR8],
				BirlikBilgi[birlikid][birlikR9],
				BirlikBilgi[birlikid][birlikR10]);
			case 11: format(yazi, sizeof(yazi), "%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n",
				BirlikBilgi[birlikid][birlikR1],
				BirlikBilgi[birlikid][birlikR2],
				BirlikBilgi[birlikid][birlikR3],
				BirlikBilgi[birlikid][birlikR4],
				BirlikBilgi[birlikid][birlikR5],
				BirlikBilgi[birlikid][birlikR6],
				BirlikBilgi[birlikid][birlikR7],
				BirlikBilgi[birlikid][birlikR8],
				BirlikBilgi[birlikid][birlikR9],
				BirlikBilgi[birlikid][birlikR10],
				BirlikBilgi[birlikid][birlikR11]);
			case 12: format(yazi, sizeof(yazi), "%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n",
				BirlikBilgi[birlikid][birlikR1],
				BirlikBilgi[birlikid][birlikR2],
				BirlikBilgi[birlikid][birlikR3],
				BirlikBilgi[birlikid][birlikR4],
				BirlikBilgi[birlikid][birlikR5],
				BirlikBilgi[birlikid][birlikR6],
				BirlikBilgi[birlikid][birlikR7],
				BirlikBilgi[birlikid][birlikR8],
				BirlikBilgi[birlikid][birlikR9],
				BirlikBilgi[birlikid][birlikR10],
				BirlikBilgi[birlikid][birlikR11],
				BirlikBilgi[birlikid][birlikR12]);
			case 13: format(yazi, sizeof(yazi), "%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n",
				BirlikBilgi[birlikid][birlikR1],
				BirlikBilgi[birlikid][birlikR2],
				BirlikBilgi[birlikid][birlikR3],
				BirlikBilgi[birlikid][birlikR4],
				BirlikBilgi[birlikid][birlikR5],
				BirlikBilgi[birlikid][birlikR6],
				BirlikBilgi[birlikid][birlikR7],
				BirlikBilgi[birlikid][birlikR8],
				BirlikBilgi[birlikid][birlikR9],
				BirlikBilgi[birlikid][birlikR10],
				BirlikBilgi[birlikid][birlikR11],
				BirlikBilgi[birlikid][birlikR12],
				BirlikBilgi[birlikid][birlikR13]);
			case 14: format(yazi, sizeof(yazi), "%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n",
				BirlikBilgi[birlikid][birlikR1],
				BirlikBilgi[birlikid][birlikR2],
				BirlikBilgi[birlikid][birlikR3],
				BirlikBilgi[birlikid][birlikR4],
				BirlikBilgi[birlikid][birlikR5],
				BirlikBilgi[birlikid][birlikR6],
				BirlikBilgi[birlikid][birlikR7],
				BirlikBilgi[birlikid][birlikR8],
				BirlikBilgi[birlikid][birlikR9],
				BirlikBilgi[birlikid][birlikR10],
				BirlikBilgi[birlikid][birlikR11],
				BirlikBilgi[birlikid][birlikR12],
				BirlikBilgi[birlikid][birlikR13],
				BirlikBilgi[birlikid][birlikR14]);
			case 15: format(yazi, sizeof(yazi), "%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n",
				BirlikBilgi[birlikid][birlikR1],
				BirlikBilgi[birlikid][birlikR2],
				BirlikBilgi[birlikid][birlikR3],
				BirlikBilgi[birlikid][birlikR4],
				BirlikBilgi[birlikid][birlikR5],
				BirlikBilgi[birlikid][birlikR6],
				BirlikBilgi[birlikid][birlikR7],
				BirlikBilgi[birlikid][birlikR8],
				BirlikBilgi[birlikid][birlikR9],
				BirlikBilgi[birlikid][birlikR10],
				BirlikBilgi[birlikid][birlikR11],
				BirlikBilgi[birlikid][birlikR12],
				BirlikBilgi[birlikid][birlikR13],
				BirlikBilgi[birlikid][birlikR14],
				BirlikBilgi[birlikid][birlikR15]);
			case 16: format(yazi, sizeof(yazi), "%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n",
				BirlikBilgi[birlikid][birlikR1],
				BirlikBilgi[birlikid][birlikR2],
				BirlikBilgi[birlikid][birlikR3],
				BirlikBilgi[birlikid][birlikR4],
				BirlikBilgi[birlikid][birlikR5],
				BirlikBilgi[birlikid][birlikR6],
				BirlikBilgi[birlikid][birlikR7],
				BirlikBilgi[birlikid][birlikR8],
				BirlikBilgi[birlikid][birlikR9],
				BirlikBilgi[birlikid][birlikR10],
				BirlikBilgi[birlikid][birlikR11],
				BirlikBilgi[birlikid][birlikR12],
				BirlikBilgi[birlikid][birlikR13],
				BirlikBilgi[birlikid][birlikR14],
				BirlikBilgi[birlikid][birlikR15],
				BirlikBilgi[birlikid][birlikR16]);
			case 17: format(yazi, sizeof(yazi), "%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n",
				BirlikBilgi[birlikid][birlikR1],
				BirlikBilgi[birlikid][birlikR2],
				BirlikBilgi[birlikid][birlikR3],
				BirlikBilgi[birlikid][birlikR4],
				BirlikBilgi[birlikid][birlikR5],
				BirlikBilgi[birlikid][birlikR6],
				BirlikBilgi[birlikid][birlikR7],
				BirlikBilgi[birlikid][birlikR8],
				BirlikBilgi[birlikid][birlikR9],
				BirlikBilgi[birlikid][birlikR10],
				BirlikBilgi[birlikid][birlikR11],
				BirlikBilgi[birlikid][birlikR12],
				BirlikBilgi[birlikid][birlikR13],
				BirlikBilgi[birlikid][birlikR14],
				BirlikBilgi[birlikid][birlikR15],
				BirlikBilgi[birlikid][birlikR16],
				BirlikBilgi[birlikid][birlikR17]);
			case 18: format(yazi, sizeof(yazi), "%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n",
				BirlikBilgi[birlikid][birlikR1],
				BirlikBilgi[birlikid][birlikR2],
				BirlikBilgi[birlikid][birlikR3],
				BirlikBilgi[birlikid][birlikR4],
				BirlikBilgi[birlikid][birlikR5],
				BirlikBilgi[birlikid][birlikR6],
				BirlikBilgi[birlikid][birlikR7],
				BirlikBilgi[birlikid][birlikR8],
				BirlikBilgi[birlikid][birlikR9],
				BirlikBilgi[birlikid][birlikR10],
				BirlikBilgi[birlikid][birlikR11],
				BirlikBilgi[birlikid][birlikR12],
				BirlikBilgi[birlikid][birlikR13],
				BirlikBilgi[birlikid][birlikR14],
				BirlikBilgi[birlikid][birlikR15],
				BirlikBilgi[birlikid][birlikR16],
				BirlikBilgi[birlikid][birlikR17],
				BirlikBilgi[birlikid][birlikR18]);
			case 19: format(yazi, sizeof(yazi), "%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n",
				BirlikBilgi[birlikid][birlikR1],
				BirlikBilgi[birlikid][birlikR2],
				BirlikBilgi[birlikid][birlikR3],
				BirlikBilgi[birlikid][birlikR4],
				BirlikBilgi[birlikid][birlikR5],
				BirlikBilgi[birlikid][birlikR6],
				BirlikBilgi[birlikid][birlikR7],
				BirlikBilgi[birlikid][birlikR8],
				BirlikBilgi[birlikid][birlikR9],
				BirlikBilgi[birlikid][birlikR10],
				BirlikBilgi[birlikid][birlikR11],
				BirlikBilgi[birlikid][birlikR12],
				BirlikBilgi[birlikid][birlikR13],
				BirlikBilgi[birlikid][birlikR14],
				BirlikBilgi[birlikid][birlikR15],
				BirlikBilgi[birlikid][birlikR16],
				BirlikBilgi[birlikid][birlikR17],
				BirlikBilgi[birlikid][birlikR18],
				BirlikBilgi[birlikid][birlikR19]);
			case 20: format(yazi, sizeof(yazi), "%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n",
				BirlikBilgi[birlikid][birlikR1],
				BirlikBilgi[birlikid][birlikR2],
				BirlikBilgi[birlikid][birlikR3],
				BirlikBilgi[birlikid][birlikR4],
				BirlikBilgi[birlikid][birlikR5],
				BirlikBilgi[birlikid][birlikR6],
				BirlikBilgi[birlikid][birlikR7],
				BirlikBilgi[birlikid][birlikR8],
				BirlikBilgi[birlikid][birlikR9],
				BirlikBilgi[birlikid][birlikR10],
				BirlikBilgi[birlikid][birlikR11],
				BirlikBilgi[birlikid][birlikR12],
				BirlikBilgi[birlikid][birlikR13],
				BirlikBilgi[birlikid][birlikR14],
				BirlikBilgi[birlikid][birlikR15],
				BirlikBilgi[birlikid][birlikR16],
				BirlikBilgi[birlikid][birlikR17],
				BirlikBilgi[birlikid][birlikR18],
				BirlikBilgi[birlikid][birlikR19],
				BirlikBilgi[birlikid][birlikR20]);
		}
		DialogGoster(playerid, DIALOG_BIRLIK_RDUZENLE, DIALOG_STYLE_TABLIST, BirlikBilgi[birlikid][birlikAd], yazi, "Düzenle", "Ýptal");
		return 1;
	}

	stock birlikturadi(birlikid)
	{
		static tur[32];
		switch(BirlikBilgi[birlikid][birlikTur]) {
			case BIRLIK_POLIS: tur = "Polis";
			case BIRLIK_MEDIKAL: tur = "Medikal";
			case BIRLIK_DEVLET: tur = "Devlet";
			case BIRLIK_HABERAJANSI: tur = "Haber Ajansý";
			case BIRLIK_ONAYSIZ: tur = "Onaysýz Birlik";
			case BIRLIK_ONAYLI: tur = "Onaylý Birlik";
			case BIRLIK_AVUKAT: tur = "Baro";
			default: tur = "Belirlenemedi";
		}
		return tur;
	}

	stock birlikodurum(birlikid)
	{
		static yazi[32];
		switch(BirlikBilgi[birlikid][oKanal]) {
			case 1: yazi = "AÇIK";
			case 0: yazi = "KAPALI";
		}
		return yazi;
	}

	stock OyuncuBirlikTuru(playerid)
	{
		if(oyuncuData[playerid][oBirlik] > -1) return BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikTur];
		return -1;
	}

	stock BirlikSifirla(playerid)
	{
		if(OyuncuBirlikTuru(playerid) == BIRLIK_POLIS) {
			oyuncuData[playerid][oIsbasi] = false;
			SilahlariSifirla(playerid);
			SetPlayerColor(playerid, RENK_VARSAYILAN);
			ZirhDuzenle(playerid, 0);
			oyuncuData[playerid][oGeciciKiyafet] = 0;
			SetPlayerSkin(playerid, oyuncuData[playerid][oKiyafet]);
			//DestroyDynamic3DTextLabel(pdrozet[playerid]);
		}
		for(new i = 0; i != MAKSIMUM_ARAC; i++) if(Arac_SahipKontrol(playerid, i) && oyuncuData[playerid][oBirlik] == AracBilgi[i][aracBirlik]) {
			AracBilgi[i][aracBirlik] = -1;
			Arac_Kaydet(i);
		}
		for(new z = 0; z!= MAKSIMUM_ISYERI; z++) if(Isyeri_SahipKontrol(playerid, z) && oyuncuData[playerid][oBirlik] == IsyeriBilgi[z][isyeriBirlik])
		{
			IsyeriBilgi[z][isyeriBirlik] = -1;
			Isyeri_Kaydet(z);
		}
		Log_Kaydet("loglar/birlik_giris_cikis.txt", "[%s] %s adli kisi %s adli birlikten ayrildi/atildi.", Tarih(), OyuncuIsim(playerid), BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikAd]);
		oyuncuData[playerid][oBirlik] = -1;
		oyuncuData[playerid][oBirlikRutbe] = 0;
		OyuncuKaydet(playerid);
	}

	stock BirlikAyarla(playerid, id)
	{
		if(id != -1 && BirlikBilgi[id][birlikKullanimda])
		{
			BirlikSifirla(playerid);
			oyuncuData[playerid][oBirlik] = id;
			oyuncuData[playerid][oBirlikRutbe] = BirlikBilgi[id][birlikMaksRutbe];
			OyuncuKaydet(playerid);
			Birlik_Kaydet(id);
			Log_Kaydet("loglar/birlik_giris_cikis.txt", "[%s] %s adli kisi %s adli birlige katildi.", Tarih(), OyuncuIsim(playerid), BirlikBilgi[id][birlikAd]);
		}
		return 1;
	}

	stock birlik_id_bul(sqlid)
	{
		for (new i = 0; i != MAKSIMUM_BIRLIK; i ++) if(BirlikBilgi[i][birlikKullanimda] && BirlikBilgi[i][birlikID] == sqlid)
			return i;

		return -1;
	}

	stock Isyeri_Kaydet(isyeriid)
	{
		static query[768];
		mysql_format(g_SQL, query, sizeof(query), "UPDATE `isyerleri` SET `Ad` = '%e', `Durum` = '%d', `isyeriPosX` = '%.4f', `isyeriPosY` = '%.4f', `isyeriPosZ` = '%.4f', `isyeriPosA` = '%.4f', `isyeriVW` = '%d', `isyeriInt` = '%d'",
			IsyeriBilgi[isyeriid][isyeriAd],
			IsyeriBilgi[isyeriid][isyeriDurum],
			IsyeriBilgi[isyeriid][isyeriPos][0],
			IsyeriBilgi[isyeriid][isyeriPos][1],
			IsyeriBilgi[isyeriid][isyeriPos][2],
			IsyeriBilgi[isyeriid][isyeriPos][3],
			IsyeriBilgi[isyeriid][isyeriVW],
			IsyeriBilgi[isyeriid][isyeriInterior]
			);
		mysql_format(g_SQL, query, sizeof(query), "%s, `isyeriIcPosX` = '%.4f', `isyeriIcPosY` = '%.4f', `isyeriIcPosZ` = '%.4f', `isyeriIcPosA` = '%.4f', `isyeriDisInt` = '%d', `isyeriDisVW` = '%d', `isyeriSahip` = '%d', `isyeriVergi` = '%d', `isyeriBirlik` = '%d'",
			query,
			IsyeriBilgi[isyeriid][isyeriIcPos][0],
			IsyeriBilgi[isyeriid][isyeriIcPos][1],
			IsyeriBilgi[isyeriid][isyeriIcPos][2],
			IsyeriBilgi[isyeriid][isyeriIcPos][3],
			IsyeriBilgi[isyeriid][isyeriDisInt],
			IsyeriBilgi[isyeriid][isyeriDisVW],
			IsyeriBilgi[isyeriid][isyeriSahip],
			IsyeriBilgi[isyeriid][isyeriVergi],
			IsyeriBilgi[isyeriid][isyeriBirlik]
			);
		mysql_format(g_SQL, query, sizeof(query), "%s, `isyeriFiyat` = '%d', `isyeriTur` = '%d', `GirisUcreti` = '%d', `isyeriKasa` = '%d', `isyeriOrtak` = '%d', `isyeriMuzik` = '%e', `isyeriUrun` = '%d'  WHERE `isyeriID` = '%d'",
			query,
			IsyeriBilgi[isyeriid][isyeriFiyat],
			IsyeriBilgi[isyeriid][isyeriTur],
			IsyeriBilgi[isyeriid][iGirisUcret],
			IsyeriBilgi[isyeriid][isyeriKasa],
			IsyeriBilgi[isyeriid][isyeriOrtak],
			IsyeriBilgi[isyeriid][isyeriMuzik],
			IsyeriBilgi[isyeriid][isyeriUrun],
			IsyeriBilgi[isyeriid][isyeriID]
			);
		mysql_tquery(g_SQL, query);
		return 1;
	}

		stock Ciftlik_Kaydet(ciftlikid)
	{
		static query[550];
		mysql_format(g_SQL, query, sizeof(query), "UPDATE `arsalar` SET `minx` = '%f', `miny` = '%f', `maxx` = '%f', `maxy` = '%f', `sahip` = '%e', `isim` = '%e' WHERE `id` = '%d'",
			CiftlikInfo[ciftlikid][cminX],
			CiftlikInfo[ciftlikid][cminY],
			CiftlikInfo[ciftlikid][cmaxX],
			CiftlikInfo[ciftlikid][cmaxY],
			CiftlikInfo[ciftlikid][cSahip],
			CiftlikInfo[ciftlikid][cIsim],
			ciftlikid
			);
		mysql_tquery(g_SQL, query);
		mysql_format(g_SQL, query, sizeof(query), "UPDATE `arsalar` SET `para` = '%d', `kasa` = '%d', `urun` = '%d', `olgunlasma` = '%d', `SahipID` = '%d' WHERE `id` = '%d'",
			CiftlikInfo[ciftlikid][cPara],
			CiftlikInfo[ciftlikid][cKasa],
			CiftlikInfo[ciftlikid][cUrun],
			CiftlikInfo[ciftlikid][cOlgunlasma],
			CiftlikInfo[ciftlikid][cSahipID],
			ciftlikid
			);
		mysql_tquery(g_SQL, query);
		return 1;
	}

	stock Ev_Kaydet(evid)
	{
		static query[768];
		mysql_format(g_SQL, query, sizeof(query), "UPDATE `evler` SET `Adres` = '%e', `Durum` = '%d', `evPosX` = '%.4f', `evPosY` = '%.4f', `evPosZ` = '%.4f', `evPosA` = '%.4f', `evVW` = '%d', `evInt` = '%d', `Dekor` = '%d', `bSure` = '%d'",
			EvBilgi[evid][evAdres],
			EvBilgi[evid][evDurum],
			EvBilgi[evid][evPos][0],
			EvBilgi[evid][evPos][1],
			EvBilgi[evid][evPos][2],
			EvBilgi[evid][evPos][3],
			EvBilgi[evid][evVW],
			EvBilgi[evid][evInterior],
			EvBilgi[evid][evDekor],
			EvBilgi[evid][evBakimSure]
			);
		mysql_format(g_SQL, query, sizeof(query), "%s, `evIcPosX` = '%.4f', `evIcPosY` = '%.4f', `evIcPosZ` = '%.4f', `evIcPosA` = '%.4f', `evDisInt` = '%d', `evDisVW` = '%d', `evSahip` = '%d', `evVergi` = '%d', `evFiyat` = '%d'",
			query,
			EvBilgi[evid][evIcPos][0],
			EvBilgi[evid][evIcPos][1],
			EvBilgi[evid][evIcPos][2],
			EvBilgi[evid][evIcPos][3],
			EvBilgi[evid][evDisInt],
			EvBilgi[evid][evDisVW],
			EvBilgi[evid][evSahip],
			EvBilgi[evid][evVergi],
			EvBilgi[evid][evFiyat]
			);
		mysql_format(g_SQL, query, sizeof(query), "%s, `EvAnahtar` = '%d', `Kiralik` = '%d', `Kiraci` = '%d', `KiraUcret` = '%d', `Kasa` = '%d' WHERE `evID` = '%d'",
			query,
			EvBilgi[evid][evAnahtar],
			EvBilgi[evid][evKiralik],
			EvBilgi[evid][evKiraci],
			EvBilgi[evid][evKiraUcret],
			EvBilgi[evid][evKasa],
			EvBilgi[evid][evID]
			);
		mysql_tquery(g_SQL, query);
		return 1;
	}

	stock Birlik_Kaydet(birlikid)
	{
		new query[1024];
		mysql_format(g_SQL, query, sizeof(query), "UPDATE `birlikler` SET `birlikAd` = '%e', `birlikMaksRutbe` = '%d', `bDolapX` = '%.4f', `bDolapY` = '%.4f', `bDolapZ` = '%.4f', `bDolapVW` = '%d', `bDolapInt` = '%d', `birlikTur` = '%d', `birlikKisaltma` = '%e' WHERE `birlikID` = '%d'",
			BirlikBilgi[birlikid][birlikAd],
			BirlikBilgi[birlikid][birlikMaksRutbe],
			BirlikBilgi[birlikid][bDolapPos][0],
			BirlikBilgi[birlikid][bDolapPos][1],
			BirlikBilgi[birlikid][bDolapPos][2],
			BirlikBilgi[birlikid][bDolapVW],
			BirlikBilgi[birlikid][bDolapInt],
			BirlikBilgi[birlikid][birlikTur],
			BirlikBilgi[birlikid][birlikkisaltma],
			BirlikBilgi[birlikid][birlikID]
			);
		mysql_tquery(g_SQL, query);
		mysql_format(g_SQL, query, sizeof(query), "UPDATE `birlikler` SET `oDurum` = '%d', `uyeSayisi` = '%d', `Level` = '%d', `Duyuru` = '%e', `BirlikAraci` = '%d', `BirlikIsyeri` = '%d', `BirlikAmaci` = '%d', `birlikOnay` = '%d' WHERE `birlikID` = '%d'",
			BirlikBilgi[birlikid][oKanal],
			Birlik_ToplamUye(birlikid),
			BirlikBilgi[birlikid][birlikLevel],
			BirlikBilgi[birlikid][birlikDuyuru],
			BirlikBilgi[birlikid][birlikaraci],
			BirlikBilgi[birlikid][birlikisyeri],
			BirlikBilgi[birlikid][birlikAmaci],
			BirlikBilgi[birlikid][birlikOnay],
			BirlikBilgi[birlikid][birlikID]
			);
		mysql_tquery(g_SQL, query);
		BirlikRutbeleriKaydet(birlikid);
		return 1;
	}

	stock BirlikRutbeleriKaydet(birlikid)
	{
		new query[1536];
		mysql_format(g_SQL, query, sizeof(query), "UPDATE `birlikler` SET `birlikRutbe1` = '%e', `birlikRutbe2` = '%e', `birlikRutbe3` = '%e', `birlikRutbe4` = '%e', `birlikRutbe5` = '%e', `birlikRutbe6` = '%e', `birlikRutbe7` = '%e', `birlikRutbe8` = '%e', `birlikRutbe9` = '%e', `birlikRutbe10` = '%e' WHERE `birlikID` = '%d'",
			BirlikBilgi[birlikid][birlikR1],
			BirlikBilgi[birlikid][birlikR2],
			BirlikBilgi[birlikid][birlikR3],
			BirlikBilgi[birlikid][birlikR4],
			BirlikBilgi[birlikid][birlikR5],
			BirlikBilgi[birlikid][birlikR6],
			BirlikBilgi[birlikid][birlikR7],
			BirlikBilgi[birlikid][birlikR8],
			BirlikBilgi[birlikid][birlikR9],
			BirlikBilgi[birlikid][birlikR10],
			BirlikBilgi[birlikid][birlikID]
			);

		mysql_tquery(g_SQL, query);

		mysql_format(g_SQL, query, sizeof(query), "UPDATE `birlikler` SET `birlikRutbe11` = '%e', `birlikRutbe12` = '%e', `birlikRutbe13` = '%e', `birlikRutbe14` = '%e', `birlikRutbe15` = '%e', `birlikRutbe16` = '%e', `birlikRutbe17` = '%e', `birlikRutbe18` = '%e', `birlikRutbe19` = '%e', `birlikRutbe20` = '%e' WHERE `birlikID` = '%d'",
			BirlikBilgi[birlikid][birlikR11],
			BirlikBilgi[birlikid][birlikR12],
			BirlikBilgi[birlikid][birlikR13],
			BirlikBilgi[birlikid][birlikR14],
			BirlikBilgi[birlikid][birlikR15],
			BirlikBilgi[birlikid][birlikR16],
			BirlikBilgi[birlikid][birlikR17],
			BirlikBilgi[birlikid][birlikR18],
			BirlikBilgi[birlikid][birlikR19],
			BirlikBilgi[birlikid][birlikR20],
			BirlikBilgi[birlikid][birlikID]
			);
		mysql_tquery(g_SQL, query);
		return 1;
	}

	stock Birlik_Yenile(birlikid)
	{
		if(birlikid != -1 && BirlikBilgi[birlikid][birlikKullanimda])
		{
			if(BirlikBilgi[birlikid][bDolapPos][0] != 0.0 && BirlikBilgi[birlikid][bDolapPos][1] != 0.0 && BirlikBilgi[birlikid][bDolapPos][2] != 0.0)
			{
				static string[128];
				if(IsValidDynamicPickup(BirlikBilgi[birlikid][bDolapPickup])) DestroyDynamicPickup(BirlikBilgi[birlikid][bDolapPickup]);

				if(IsValidDynamic3DTextLabel(BirlikBilgi[birlikid][bDolapText3D]))
					DestroyDynamic3DTextLabel(BirlikBilgi[birlikid][bDolapText3D]);

				BirlikBilgi[birlikid][bDolapPickup] = CreateDynamicPickup(1239, 0, BirlikBilgi[birlikid][bDolapPos][0], BirlikBilgi[birlikid][bDolapPos][1], BirlikBilgi[birlikid][bDolapPos][2], BirlikBilgi[birlikid][bDolapVW], BirlikBilgi[birlikid][bDolapInt]);

				format(string, sizeof(string), "[%s - Dolap]\n{FFFFFF}/dolap", BirlikBilgi[birlikid][birlikAd]);
				BirlikBilgi[birlikid][bDolapText3D] = CreateDynamic3DTextLabel(string, RENK_SERVER, BirlikBilgi[birlikid][bDolapPos][0], BirlikBilgi[birlikid][bDolapPos][1], BirlikBilgi[birlikid][bDolapPos][2], 3.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 0, BirlikBilgi[birlikid][bDolapVW], BirlikBilgi[birlikid][bDolapInt]);
			}
		}
		return 1;
	}

	stock Boombox_Kaldir(playerid)
	{
		if(BoomboxBilgi[playerid][boomboxKullanimda])
		{
			if(IsValidDynamicObject(BoomboxBilgi[playerid][boomboxObje]))
				DestroyDynamicObject(BoomboxBilgi[playerid][boomboxObje]);

			if(IsValidDynamic3DTextLabel(BoomboxBilgi[playerid][boomboxText3D]))
				DestroyDynamic3DTextLabel(BoomboxBilgi[playerid][boomboxText3D]);

			foreach (new i : Player) if(oyuncuData[i][oBoombox] == playerid) {
				StopAudioStreamForPlayer(i);
			}
			BoomboxBilgi[playerid][boomboxKullanimda] = false;
			BoomboxBilgi[playerid][boomboxInterior] = 0;
			BoomboxBilgi[playerid][boomboxWorld] = 0;
		}
		return 1;
	}

	stock Birlik_Sil(birlikid)
	{
		if(birlikid != -1 && BirlikBilgi[birlikid][birlikKullanimda])
		{
			new string[256];
			mysql_format(g_SQL, string, sizeof(string), "DELETE FROM `birlikler` WHERE `birlikID` = '%d'", BirlikBilgi[birlikid][birlikID]);
			mysql_query(g_SQL, string);

			mysql_format(g_SQL, string, sizeof(string), "UPDATE `oyuncular` SET `birlik` = '-1', `birlikrutbe` = 0 WHERE `birlik` = '%d'", BirlikBilgi[birlikid][birlikID]);
			mysql_query(g_SQL, string);

			foreach (new i : Player)
			{
				if(oyuncuData[i][oBirlik] == birlikid) {
					oyuncuData[i][oBirlik] = -1;
					oyuncuData[i][oBirlikRutbe] = 0;
				}
			}
			if(IsValidDynamicPickup(BirlikBilgi[birlikid][bDolapPickup]))
				DestroyDynamicPickup(BirlikBilgi[birlikid][bDolapPickup]);

			if(IsValidDynamic3DTextLabel(BirlikBilgi[birlikid][bDolapText3D]))
				DestroyDynamic3DTextLabel(BirlikBilgi[birlikid][bDolapText3D]);

			BirlikBilgi[birlikid][birlikKullanimda] = false;
			BirlikBilgi[birlikid][birlikID] = 0;
			Iter_Remove(Birlikler, birlikid);
		}
		return 1;
	}

		stock Isyeri_Yarat(playerid, tur)
	{
		static Float:x, Float:y, Float:z, Float:angle;
		if(GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
		{
			for(new i = 0; i != MAKSIMUM_ISYERI; i ++)
			{
				if(!IsyeriBilgi[i][isyeriKullanimda])
				{
					IsyeriBilgi[i][isyeriKullanimda] = true;
					format(IsyeriBilgi[i][isyeriAd], 128, VARSAYILAN_ISYERI_ADI);
					IsyeriBilgi[i][isyeriPos][0] = x;
					IsyeriBilgi[i][isyeriPos][1] = y;
					IsyeriBilgi[i][isyeriPos][2] = z;
					IsyeriBilgi[i][isyeriPos][3] = angle;

					if(tur == 16)
					{
					IsyeriBilgi[i][isyeriIcPos][0] = 2318.2290;
					IsyeriBilgi[i][isyeriIcPos][1] = -1786.7961;
					IsyeriBilgi[i][isyeriIcPos][2] = 1600.7520;
					IsyeriBilgi[i][isyeriIcPos][3] = 179.2456;
					}
					else
					{
					IsyeriBilgi[i][isyeriIcPos][0] = -25.884498;
					IsyeriBilgi[i][isyeriIcPos][1] = -185.868988;
					IsyeriBilgi[i][isyeriIcPos][2] = 1003.546875;
					IsyeriBilgi[i][isyeriIcPos][3] = 0.0000;
					}

					IsyeriBilgi[i][isyeriDisInt] = GetPlayerInterior(playerid);
					IsyeriBilgi[i][isyeriDisVW] = GetPlayerVirtualWorld(playerid);

					IsyeriBilgi[i][isyeriVergi] = 0;
					IsyeriBilgi[i][isyeriInterior] = 17;
					IsyeriBilgi[i][isyeriDurum] = 3;
					IsyeriBilgi[i][isyeriSahip] = 0;
					IsyeriBilgi[i][isyeriOrtak] = 0;
					IsyeriBilgi[i][isyeriOrtakIsim][0] = 0;
					IsyeriBilgi[i][isyeriFiyat] = 75000;
					IsyeriBilgi[i][isyeriBirlik] = -1;
					IsyeriBilgi[i][isyeriTur] = tur;
					IsyeriBilgi[i][isyeriKasa] = 0;
					IsyeriBilgi[i][iGirisUcret] = 0;
					IsyeriBilgi[i][isyeriMuzik][0] = 0;
					IsyeriBilgi[i][isyeriUrun] = 50;
					IsyeriBilgi[i][isyeriPickup] = CreateDynamicPickup(1239, 23, IsyeriBilgi[i][isyeriPos][0], IsyeriBilgi[i][isyeriPos][1], IsyeriBilgi[i][isyeriPos][2], IsyeriBilgi[i][isyeriDisVW], IsyeriBilgi[i][isyeriDisInt], -1, 10.0); // + 0.7
					Isyeri_Yenile(i);
					mysql_tquery(g_SQL, "INSERT INTO `isyerleri` (`isyeriSahip`) VALUES(0)", "IsyeriYaratildi", "d", i);
					return i;
				}
			}
		}
		return -1;
	}


	stock Isyeri_Sil(isyeriid)
	{
		if(isyeriid != -1 && IsyeriBilgi[isyeriid][isyeriKullanimda])
		{
			static string[128];
			format(string, sizeof(string), "DELETE FROM `isyerleri` WHERE `isyeriID` = '%d'", IsyeriBilgi[isyeriid][isyeriID]);
			mysql_tquery(g_SQL, string);

			if(IsValidDynamicPickup(IsyeriBilgi[isyeriid][isyeriPickup]))
				DestroyDynamicPickup(IsyeriBilgi[isyeriid][isyeriPickup]);

			new DB_Query[300];
			mysql_format(g_SQL, DB_Query, sizeof(DB_Query), "SELECT * FROM `furniture_data` WHERE `furniture_bizid` = '%d'", IsyeriBilgi[isyeriid][isyeriID]);
			new Cache:veri = mysql_query(g_SQL, DB_Query, true);
			new rows = cache_num_rows();
			if(rows)
			{
				new objid, objeid;
				for(new i; i < rows; i++)
				{
					cache_get_value_name_int(0, "furniture_id", objid);

					cache_get_value_name_int(0, "furniture_objectid", objeid);

					DestroyDynamicObject(objeid);

					mysql_format(g_SQL, DB_Query, sizeof(DB_Query), "DELETE FROM `textureler` WHERE `ObjeSQL` = '%d'", objid);
					mysql_query(g_SQL, DB_Query, true);

					mysql_format(g_SQL, DB_Query, sizeof(DB_Query), "DELETE FROM `furniture_data` WHERE `furniture_bizid` = '%d'", IsyeriBilgi[isyeriid][isyeriID]);
					mysql_query(g_SQL, DB_Query, true);
				}
			}
			cache_delete(veri);

			IsyeriBilgi[isyeriid][isyeriKullanimda] = false;
			IsyeriBilgi[isyeriid][isyeriID] = 0;
		}
		return 1;
	}

	stock Business_RemovePumps(isyeriid)
	{
		if(IsyeriBilgi[isyeriid][isyeriKullanimda] && IsyeriBilgi[isyeriid][isyeriTuru] == 9)
		{
			static string[32];
	    /*foreach (new i : Player) if(oyuncuData[i][pRefill] != INVALID_VEHICLE_ID && oyuncuData[i][pGasStation] == isyeriid)
	    {
	        StopRefilling(i);
	    }*/
	        for (new i = 0; i != MAKSIMUM_BENZIN_POMPASI; i ++) if(BenzinPompasi[i][pompaKullanimda] && BenzinPompasi[i][pompaIsyeri] == IsyeriBilgi[isyeriid][isyeriID])
	        {
	        	DestroyDynamicObject(BenzinPompasi[i][pompaObje]);
	        	if(IsValidDynamic3DTextLabel(BenzinPompasi[i][pompaText3D])) DestroyDynamic3DTextLabel(BenzinPompasi[i][pompaText3D]);

	        	BenzinPompasi[i][pompaKullanimda] = 0;
	        	BenzinPompasi[i][pompaBenzin] = 0;
	        }
	        format(string, sizeof(string), "DELETE FROM `benzinpompalari` WHERE `pompaIsyeri` = '%d'", IsyeriBilgi[isyeriid][isyeriID]);
	        mysql_tquery(g_SQL, string);
	    }
	    return 1;
	}

	stock Ev_Yarat(playerid, fiyat)
	{
		static Float:x, Float:y, Float:z, Float:angle;
		if(GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
		{
			for(new i = 0; i != MAKSIMUM_EV; i ++) if(!EvBilgi[i][evKullanimda])
			{
				EvBilgi[i][evKullanimda] = true;
				EvBilgi[i][evPos][0] = x;
				EvBilgi[i][evPos][1] = y;
				EvBilgi[i][evPos][2] = z;
				EvBilgi[i][evPos][3] = angle;
				EvBilgi[i][evIcPos][0] = 1412.639892;
				EvBilgi[i][evIcPos][1] = -1.787510;
				EvBilgi[i][evIcPos][2] = 1000.924377;
				EvBilgi[i][evIcPos][3] = 90.4601;
				EvBilgi[i][evInterior] = 1;

				new adresiverlan[128];
				format(adresiverlan, sizeof(adresiverlan), "%s", LokasyonBul(EvBilgi[i][evPos][0], EvBilgi[i][evPos][1], EvBilgi[i][evPos][2]));
				format(EvBilgi[i][evAdres], 128, adresiverlan);

				EvBilgi[i][evDisInt] = GetPlayerInterior(playerid);
				EvBilgi[i][evDisVW] = GetPlayerVirtualWorld(playerid);

				EvBilgi[i][evInterior] = 1;
				EvBilgi[i][evDurum] = 1;
				EvBilgi[i][evSahip] = 0;
				EvBilgi[i][evFiyat] = fiyat;
				EvBilgi[i][evDekor] = 0;
				EvBilgi[i][evAnahtar] = 0;
				EvBilgi[i][evKiraci] = 0;
				EvBilgi[i][evKiraUcret] = 20;
				EvBilgi[i][evVergi] = 0;
				EvBilgi[i][evKiralik] = 0;
				EvBilgi[i][evKasa] = 0;
				EvBilgi[i][evPickup] = CreateDynamicPickup(1273, 23, EvBilgi[i][evPos][0], EvBilgi[i][evPos][1], EvBilgi[i][evPos][2], EvBilgi[i][evDisVW], EvBilgi[i][evDisInt], -1, 10.0); // + 0.7
				Ev_Yenile(i);
				mysql_tquery(g_SQL, "INSERT INTO `evler` (`Adres`) VALUES ('-')", "EvYaratildi", "d", i);
				return i;
			}
		}
		return -1;
	}

	stock Ev_Sil(evid)
	{
		if(evid != -1 && EvBilgi[evid][evKullanimda])
		{
			static string[64];
			format(string, sizeof(string), "DELETE FROM `evler` WHERE `evID` = '%d'", EvBilgi[evid][evID]);
			mysql_tquery(g_SQL, string);

			if(IsValidDynamicPickup(EvBilgi[evid][evPickup]))
				DestroyDynamicPickup(EvBilgi[evid][evPickup]);

			new DB_Query[300];
			mysql_format(g_SQL, DB_Query, sizeof(DB_Query), "SELECT * FROM `furniture_data` WHERE `furniture_houseid` = '%d'", EvBilgi[evid][evID]);
			new Cache:veri = mysql_query(g_SQL, DB_Query, true);
			new rows = cache_num_rows();
			if(rows)
			{
				new objid, objeid;
				for(new i; i < rows; i++)
				{
					cache_get_value_name_int(0, "furniture_id", objid);
					cache_get_value_name_int(0, "furniture_objectid", objeid);

					DestroyDynamicObject(objeid);

					mysql_format(g_SQL, DB_Query, sizeof(DB_Query), "DELETE FROM `textureler` WHERE `ObjeSQL` = '%d'", objid);
					mysql_query(g_SQL, DB_Query, true);

					mysql_format(g_SQL, DB_Query, sizeof(DB_Query), "DELETE FROM `furniture_data` WHERE `furniture_houseid` = '%d'", EvBilgi[evid][evID]);
					mysql_query(g_SQL, DB_Query, true);
				}
			}
			cache_delete(veri);
			EvEnvanterBosalt(evid);
			EvBilgi[evid][evDurum] = 1;
			EvBilgi[evid][evSahip] = 0;
			EvBilgi[evid][evDekor] = 0;
			EvBilgi[evid][evAnahtar] = 0;
			EvBilgi[evid][evKiraci] = 0;
			EvBilgi[evid][evKiraUcret] = 20;
			EvBilgi[evid][evKiralik] = 0;
			EvBilgi[evid][evKasa] = 0;
			EvBilgi[evid][evKullanimda] = false;
			EvBilgi[evid][evID] = 0;
		}
		return 1;
	}

	stock Barikat_Yarat(playerid, model)
	{
		static Float:x, Float:y, Float:z, Float:angle;
		if(GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
		{
			for(new i = 0; i != MAKSIMUM_BARIKAT; i ++) if(!BarikatBilgi[i][barikatKullanimda])
			{
				BarikatBilgi[i][barikatKullanimda] = true;
				BarikatBilgi[i][barikatPos][0] = x + (3.0 * floatsin(-angle, degrees));
				BarikatBilgi[i][barikatPos][1] = y + (3.0 * floatcos(-angle, degrees));
				BarikatBilgi[i][barikatPos][2] = z - 0.7;
				BarikatBilgi[i][barikatPos][3] = 0.0;
				BarikatBilgi[i][barikatPos][4] = 0.0;
				BarikatBilgi[i][barikatPos][5] = angle;
				BarikatBilgi[i][barikatModel] = model;

				BarikatBilgi[i][barikatObje] = CreateDynamicObject(BarikatBilgi[i][barikatModel], BarikatBilgi[i][barikatPos][0], BarikatBilgi[i][barikatPos][1], BarikatBilgi[i][barikatPos][2], BarikatBilgi[i][barikatPos][3], BarikatBilgi[i][barikatPos][4], BarikatBilgi[i][barikatPos][5], 0, 0);
				Barikat_Yenile(i);
				return i;
			}
		}
		return -1;
	}

	stock Barikat_Kaldir(barikatid)
	{
		if(barikatid != -1 && BarikatBilgi[barikatid][barikatKullanimda])
		{
			if(IsValidDynamic3DTextLabel(BarikatBilgi[barikatid][barikatText]))
				DestroyDynamic3DTextLabel(BarikatBilgi[barikatid][barikatText]);

			if(IsValidDynamicObject(BarikatBilgi[barikatid][barikatObje]))
				DestroyDynamicObject(BarikatBilgi[barikatid][barikatObje]);

			BarikatBilgi[barikatid][barikatKullanimda] = false;
		}
		return 1;
	}

	stock Bina_Yarat(playerid, isim[], model)
	{
		static Float:x, Float:y, Float:z, Float:angle;
		if(GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
		{
			for(new i = 0; i != MAKSIMUM_BINA; i ++) if(!BinaBilgi[i][bKullanimda])
			{
				BinaBilgi[i][bKullanimda] = true;
				BinaBilgi[i][bModel] = model;
				format(BinaBilgi[i][bIsim], 32, isim);
				BinaBilgi[i][bPos][0] = x;
				BinaBilgi[i][bPos][1] = y;
				BinaBilgi[i][bPos][2] = z;
				BinaBilgi[i][bPos][3] = angle;

				BinaBilgi[i][bIPos][0] = x;
				BinaBilgi[i][bIPos][1] = y;
				BinaBilgi[i][bIPos][2] = z + 10000;
				BinaBilgi[i][bIPos][3] = 0.0000;

				BinaBilgi[i][bDisInt] = GetPlayerInterior(playerid);
				BinaBilgi[i][bDisVW] = GetPlayerVirtualWorld(playerid);
				BinaBilgi[i][bInterior] = 0;
				BinaBilgi[i][bVW] = 0;
				BinaBilgi[i][binaDurum] = 1;
				BinaBilgi[i][binaTur] = 0;
				Bina_Yenile(i);
				mysql_tquery(g_SQL, "INSERT INTO `binalar` (`binaModel`) VALUES(0)", "BinaYaratildi", "d", i);
				return i;
			}
		}
		return -1;
	}

	stock Bina_Sil(binaid)
	{
		if(binaid != -1 && BinaBilgi[binaid][bKullanimda])
		{
			static string[64];
			format(string, sizeof(string), "DELETE FROM `binalar` WHERE `bID` = '%d'", BinaBilgi[binaid][bID]);
			mysql_tquery(g_SQL, string);

			if(IsValidDynamic3DTextLabel(BinaBilgi[binaid][binaText]))
				DestroyDynamic3DTextLabel(BinaBilgi[binaid][binaText]);

			if(IsValidDynamicPickup(BinaBilgi[binaid][bPickup]))
				DestroyDynamicPickup(BinaBilgi[binaid][bPickup]);

			BinaBilgi[binaid][bKullanimda] = false;
			BinaBilgi[binaid][bID] = 0;
		}
		return 1;
	}

	stock ATM_Yarat(playerid)
	{
		static Float:x, Float:y, Float:z, Float:angle;
		if(GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
		{
			for (new i = 0; i != MAKSIMUM_ATM; i ++) if(!ATMBilgi[i][atmKullanimda])
			{
				ATMBilgi[i][atmKullanimda] = true;

				x += 1.0 * floatsin(-angle, degrees);
				y += 1.0 * floatcos(-angle, degrees);

				ATMBilgi[i][atmPos][0] = x;
				ATMBilgi[i][atmPos][1] = y;
				ATMBilgi[i][atmPos][2] = z;
				ATMBilgi[i][atmPos][3] = angle;

				ATMBilgi[i][atmInterior] = GetPlayerInterior(playerid);
				ATMBilgi[i][atmWorld] = GetPlayerVirtualWorld(playerid);
				ATMBilgi[i][atmPara] = 10000;

				ATM_Yenile(i);
				mysql_tquery(g_SQL, "INSERT INTO `atm` (`atmWorld`) VALUES ('0')", "ATMYaratildi", "d", i);
				return i;
			}
		}
		return -1;
	}

	stock ATM_Sil(atmid)
	{
		if(atmid != -1 && ATMBilgi[atmid][atmKullanimda])
		{
			static string[128];
			format(string, sizeof(string), "DELETE FROM `atm` WHERE `atmID` = '%d'", ATMBilgi[atmid][atmID]);
			mysql_tquery(g_SQL, string);

			if(IsValidDynamicObject(ATMBilgi[atmid][atmObje]))
				DestroyDynamicObject(ATMBilgi[atmid][atmObje]);

			if(IsValidDynamic3DTextLabel(ATMBilgi[atmid][atmText3D]))
				DestroyDynamic3DTextLabel(ATMBilgi[atmid][atmText3D]);

			ATMBilgi[atmid][atmKullanimda] = false;
			ATMBilgi[atmid][atmID] = 0;
		}
		return 1;
	}

	stock ATM_Label(atmid)
	{
		new labelString[200];
		format(labelString, sizeof(labelString), "[ATM %d]\nÝçerisindeki Para: {FFFFFF}%s\n/atm", atmid, NumaraFormati(ATMBilgi[atmid][atmPara]));
		UpdateDynamic3DTextLabelText(ATMBilgi[atmid][atmText3D], RENK_SERVER, labelString);
		return 1;
	}

	stock ATM_Yenile(atmid)
	{
		if(atmid != -1 && ATMBilgi[atmid][atmKullanimda])
		{
			if(IsValidDynamicObject(ATMBilgi[atmid][atmObje]))
				DestroyDynamicObject(ATMBilgi[atmid][atmObje]);

			ATMBilgi[atmid][atmObje] = CreateDynamicObject(19324, ATMBilgi[atmid][atmPos][0], ATMBilgi[atmid][atmPos][1], ATMBilgi[atmid][atmPos][2], 0.0, 0.0, ATMBilgi[atmid][atmPos][3], ATMBilgi[atmid][atmWorld], ATMBilgi[atmid][atmInterior]);
			return 1;
		}
		return 0;
	}

	stock Uyusturucu_Yarat(playerid)
	{
		static Float:x, Float:y, Float:z, Float:angle;
		if(GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
		{
			for(new i = 0; i != MAKSIMUM_UYUSTURUCU; i++) if(!UyusturucuBilgi[i][uKullanimda])
			{
				UyusturucuBilgi[i][uKullanimda] = true;
				UyusturucuBilgi[i][uPos][0] = x;
				UyusturucuBilgi[i][uPos][1] = y;
				UyusturucuBilgi[i][uPos][2] = z - 0.70;
				UyusturucuBilgi[i][uPos][3] = angle;
				UyusturucuBilgi[i][uInterior] = GetPlayerInterior(playerid);
				UyusturucuBilgi[i][uWorld] = GetPlayerVirtualWorld(playerid);
				UyusturucuBilgi[i][uDakika] = 0;
				UyusturucuBilgi[i][uGun] = 0;
				UyusturucuBilgi[i][uDurum] = 0;
				UyusturucuBilgi[i][uBakim] = 1;
				UyusturucuBilgi[i][uEv] = EvBilgi[Oyuncu_Evde(playerid)][evID];
				oyuncuData[playerid][oTohum]--;
				oyuncuData[playerid][oLamba]--;
				oyuncuData[playerid][oGubre]--;
				oyuncuData[playerid][oSaksi]--;
				oyuncuData[playerid][oVantilator]--;
				mysql_tquery(g_SQL, "INSERT INTO `uyusturucular` (`uWorld`) VALUES ('0')", "UyusturucuYaratildi", "d", i);
				return i;
			}
		}
		return -1;
	}

	stock Uyusturucu_Sil(uid)
	{
		if(uid != -1 && UyusturucuBilgi[uid][uKullanimda])
		{
			static kaldir[128];
			format(kaldir, sizeof(kaldir), "DELETE FROM `uyusturucular` WHERE `uID` = '%d'", UyusturucuBilgi[uid][uID]);
			mysql_tquery(g_SQL, kaldir);

			if(IsValidDynamicObject(UyusturucuBilgi[uid][uObje]))
				DestroyDynamicObject(UyusturucuBilgi[uid][uObje]);

			if(IsValidDynamic3DTextLabel(UyusturucuBilgi[uid][uText]))
				DestroyDynamic3DTextLabel(UyusturucuBilgi[uid][uText]);

			UyusturucuBilgi[uid][uKullanimda] = false;
			UyusturucuBilgi[uid][uID] = 0;
		}
		return 1;
	}

	stock Uyusturucu_Yenile(uid)
	{
		if(uid != -1 && UyusturucuBilgi[uid][uKullanimda])
		{
			if(IsValidDynamicObject(UyusturucuBilgi[uid][uObje]))
				DestroyDynamicObject(UyusturucuBilgi[uid][uObje]);

			if(IsValidDynamic3DTextLabel(UyusturucuBilgi[uid][uText]))
				DestroyDynamic3DTextLabel(UyusturucuBilgi[uid][uText]);

			static bilgi[256], tur[20];
			switch(UyusturucuBilgi[uid][uDurum]) {
				case 0..14: tur = "Yok";
				case 15..34: tur = "{E9ED10}Düþük";
				case 35..74: tur = "{14D43B}Orta";
				case 75..100: tur = "{DB0A0A}Yüksek";
			}
			format(bilgi, sizeof(bilgi), "{FCFCFC}Kalite: %s\n{FCFCFC}Durum: {10F2C5}%d%%\n{FCFCFC}Bakým: {FF8B26}%s", tur, UyusturucuBilgi[uid][uDurum], (UyusturucuBilgi[uid][uBakim] == 1) ? ("Yapýlmýþ") : ("Yapýlmamýþ"));
			UyusturucuBilgi[uid][uObje] = CreateDynamicObject(2244, UyusturucuBilgi[uid][uPos][0], UyusturucuBilgi[uid][uPos][1], UyusturucuBilgi[uid][uPos][2], 0.0, 0.0, UyusturucuBilgi[uid][uPos][3], UyusturucuBilgi[uid][uWorld], UyusturucuBilgi[uid][uInterior]);
			UyusturucuBilgi[uid][uText] = CreateDynamic3DTextLabel(bilgi, RENK_SERVER, UyusturucuBilgi[uid][uPos][0], UyusturucuBilgi[uid][uPos][1], UyusturucuBilgi[uid][uPos][2] + 0.30, 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, UyusturucuBilgi[uid][uWorld], UyusturucuBilgi[uid][uInterior]);
			if(UyusturucuBilgi[uid][uDurum] < 15) {
				SetDynamicObjectMaterial(UyusturucuBilgi[uid][uObje], 2, 19478, "signsurf", "sign", 0xFFFFFFFF);
			}
			else if(UyusturucuBilgi[uid][uDurum] > 15) {
				SetDynamicObjectMaterial(UyusturucuBilgi[uid][uObje], 2, 2, "plants_TABLETOP", "CJ_PLANT", 0xFF2ECC71);
			}
			return 1;
		}
		return 0;
	}

	stock Uyusturucu_Kaydet(uid)
	{
		static query[512];
		mysql_format(g_SQL, query, sizeof(query), "UPDATE `uyusturucular` SET `posX` = '%.4f', `posY` = '%.4f', `posZ` = '%.4f', `posA` = '%.4f', `uInterior` = '%d', `uWorld` = '%d'",
			UyusturucuBilgi[uid][uPos][0],
			UyusturucuBilgi[uid][uPos][1],
			UyusturucuBilgi[uid][uPos][2],
			UyusturucuBilgi[uid][uPos][3],
			UyusturucuBilgi[uid][uInterior],
			UyusturucuBilgi[uid][uWorld]
			);
		mysql_format(g_SQL, query, sizeof(query), "%s, `Bakim` = '%d', `Durum` = '%d', `Ev` = '%d' WHERE `uID` = '%d'",
			query,
			UyusturucuBilgi[uid][uBakim],
			UyusturucuBilgi[uid][uDurum],
			UyusturucuBilgi[uid][uEv],
			UyusturucuBilgi[uid][uID]
			);
		return mysql_tquery(g_SQL, query);
	}

	stock ATM_Kaydet(atmid)
	{
		static query[512];
		mysql_format(g_SQL, query, sizeof(query), "UPDATE `atm` SET `atmX` = '%.4f', `atmY` = '%.4f', `atmZ` = '%.4f', `atmA` = '%.4f', `atmInterior` = '%d', `atmWorld` = '%d', `atmPara` = '%d' WHERE `atmID` = '%d'",
			ATMBilgi[atmid][atmPos][0],
			ATMBilgi[atmid][atmPos][1],
			ATMBilgi[atmid][atmPos][2],
			ATMBilgi[atmid][atmPos][3],
			ATMBilgi[atmid][atmInterior],
			ATMBilgi[atmid][atmWorld],
			ATMBilgi[atmid][atmPara],
			ATMBilgi[atmid][atmID]
			);
		return mysql_tquery(g_SQL, query);
	}

	stock TutuklamaNoktasi_Yarat(playerid)
	{
		static Float:x, Float:y, Float:z, Float:angle;
		if(GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
		{
			for (new i = 0; i < MAKSIMUM_TUTUKLAMANOKTASI; i++) if(!TutuklamaNoktasi[i][tKullanimda])
			{
				TutuklamaNoktasi[i][tKullanimda] = true;
				TutuklamaNoktasi[i][tPos][0] = x;
				TutuklamaNoktasi[i][tPos][1] = y;
				TutuklamaNoktasi[i][tPos][2] = z;
				TutuklamaNoktasi[i][tPos][3] = angle;
				TutuklamaNoktasi[i][tInterior] = GetPlayerInterior(playerid);
				TutuklamaNoktasi[i][tWorld] = GetPlayerVirtualWorld(playerid);

				TutuklamaNoktasi[i][hPos][0] = 0.0;
				TutuklamaNoktasi[i][hPos][1] = 0.0;
				TutuklamaNoktasi[i][hPos][2] = 0.0;
				TutuklamaNoktasi[i][hPos][3] = 0.0;
				TutuklamaNoktasi[i][hInterior] = 0;
				TutuklamaNoktasi[i][hWorld] = 0;

				TutuklamaNoktasi_Yenile(i);
				mysql_tquery(g_SQL, "INSERT INTO `tutuklamanoktalari` (`tWorld`) VALUES(0)", "TNoktasiYaratildi", "d", i);
				return i;
			}
		}
		return -1;
	}

	stock TutuklamaNoktasi_Kaldir(tid)
	{
		if(tid != -1 && TutuklamaNoktasi[tid][tKullanimda])
		{
			static sil[64];
			format(sil, sizeof(sil), "DELETE FROM `tutuklamanoktalari` WHERE `tID` = '%d'", TutuklamaNoktasi[tid][tID]);
			mysql_tquery(g_SQL, sil);

			if(IsValidDynamicPickup(TutuklamaNoktasi[tid][tPickup]))
				DestroyDynamicPickup(TutuklamaNoktasi[tid][tPickup]);

			if(IsValidDynamic3DTextLabel(TutuklamaNoktasi[tid][tText]))
				DestroyDynamic3DTextLabel(TutuklamaNoktasi[tid][tText]);

			TutuklamaNoktasi[tid][tKullanimda] = false;
			TutuklamaNoktasi[tid][tID] = 0;
		}
		return 1;
	}

	stock TutuklamaNoktasi_Kaydet(tid)
	{
		static kaydet[1024];
		kaydet[0] = 0;
		format(kaydet, sizeof(kaydet), "UPDATE `tutuklamanoktalari` SET `x` = '%.4f', `y` = '%.4f', `z` = '%.4f', `a` = '%.4f', `tInterior` = '%d', `tWorld` = '%d'",
			TutuklamaNoktasi[tid][tPos][0],
			TutuklamaNoktasi[tid][tPos][1],
			TutuklamaNoktasi[tid][tPos][2],
			TutuklamaNoktasi[tid][tPos][3],
			TutuklamaNoktasi[tid][tInterior],
			TutuklamaNoktasi[tid][tWorld]
			);
		format(kaydet, sizeof(kaydet), "%s, `hx` = '%.4f', `hy` = '%.4f', `hz` = '%.4f', `ha` = '%.4f', `hInterior` = '%d', `hWorld` = '%d' WHERE `tID` = '%d'",
			kaydet,
			TutuklamaNoktasi[tid][hPos][0],
			TutuklamaNoktasi[tid][hPos][1],
			TutuklamaNoktasi[tid][hPos][2],
			TutuklamaNoktasi[tid][hPos][3],
			TutuklamaNoktasi[tid][hInterior],
			TutuklamaNoktasi[tid][hWorld],
			TutuklamaNoktasi[tid][tID]
			);
		mysql_tquery(g_SQL, kaydet);
		return 1;
	}

	stock TutuklamaNoktasi_Yenile(tid)
	{
		if(tid != -1 && TutuklamaNoktasi[tid][tKullanimda])
		{
			if(IsValidDynamicPickup(TutuklamaNoktasi[tid][tPickup]))
				DestroyDynamicPickup(TutuklamaNoktasi[tid][tPickup]);

			if(IsValidDynamic3DTextLabel(TutuklamaNoktasi[tid][tText]))
				DestroyDynamic3DTextLabel(TutuklamaNoktasi[tid][tText]);

			static bilgi[512];
			format(bilgi, sizeof(bilgi), "[Tutuklama Noktasý %d]\n{FFFFFF}Tutuklama için /hapis", tid);
		TutuklamaNoktasi[tid][tPickup] = CreateDynamicPickup(1247, 23, TutuklamaNoktasi[tid][tPos][0], TutuklamaNoktasi[tid][tPos][1], TutuklamaNoktasi[tid][tPos][2], TutuklamaNoktasi[tid][tWorld], TutuklamaNoktasi[tid][tInterior]); // + 0.7
		TutuklamaNoktasi[tid][tText] = CreateDynamic3DTextLabel(bilgi, RENK_SERVER, TutuklamaNoktasi[tid][tPos][0], TutuklamaNoktasi[tid][tPos][1], TutuklamaNoktasi[tid][tPos][2]+0.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, TutuklamaNoktasi[tid][tWorld], TutuklamaNoktasi[tid][tInterior]);
		return 1;
	}
	return 0;
}

stock Meslek_Yarat(playerid, tur)
{
	static Float:x, Float:y, Float:z;
	if(GetPlayerPos(playerid, x, y, z))
	{
		for (new i = 0; i != MAKSIMUM_MESLEK; i ++) if(!MeslekBilgi[i][mKullanimda])
		{
			MeslekBilgi[i][mKullanimda] = true;
			MeslekBilgi[i][mTur] = tur;

			MeslekBilgi[i][mPos][0] = x;
			MeslekBilgi[i][mPos][1] = y;
			MeslekBilgi[i][mPos][2] = z;
			MeslekBilgi[i][mInterior] = GetPlayerInterior(playerid);
			MeslekBilgi[i][mWorld] = GetPlayerVirtualWorld(playerid);
			Meslek_Yenile(i);
			mysql_tquery(g_SQL, "INSERT INTO `meslekler` (`mInterior`) VALUES(0)", "MeslekYaratildi", "d", i);
			return i;
		}
	}
	return -1;
}

stock Meslek_Yenile(meslekid)
{
	static bilgi[128];
	if(meslekid != -1 && MeslekBilgi[meslekid][mKullanimda])
	{
		if(IsValidDynamic3DTextLabel(MeslekBilgi[meslekid][mText]))
			DestroyDynamic3DTextLabel(MeslekBilgi[meslekid][mText]);

		if(IsValidDynamicPickup(MeslekBilgi[meslekid][mPickup]))
			DestroyDynamicPickup(MeslekBilgi[meslekid][mPickup]);

		format(bilgi, sizeof(bilgi), "[%s]\n{FFFFFF}Mesleðe katýlmak için \"/meslekgir\"", MeslekIsim(MeslekBilgi[meslekid][mTur]));
		MeslekBilgi[meslekid][mText] = CreateDynamic3DTextLabel(bilgi, RENK_SERVER, MeslekBilgi[meslekid][mPos][0], MeslekBilgi[meslekid][mPos][1], MeslekBilgi[meslekid][mPos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, MeslekBilgi[meslekid][mWorld], MeslekBilgi[meslekid][mInterior]);
		MeslekBilgi[meslekid][mPickup] = CreateDynamicPickup(1239, 23, MeslekBilgi[meslekid][mPos][0], MeslekBilgi[meslekid][mPos][1], MeslekBilgi[meslekid][mPos][2], MeslekBilgi[meslekid][mWorld], MeslekBilgi[meslekid][mInterior]);
	}
	return 1;
}

stock Meslek_Sil(meslekid)
{
	if(meslekid != -1 && MeslekBilgi[meslekid][mKullanimda])
	{
		static query[96];
		mysql_format(g_SQL, query, sizeof(query), "DELETE FROM `meslekler` WHERE `mID` = '%d'", MeslekBilgi[meslekid][mID]);
		mysql_tquery(g_SQL, query);

		if(IsValidDynamic3DTextLabel(MeslekBilgi[meslekid][mText]))
			DestroyDynamic3DTextLabel(MeslekBilgi[meslekid][mText]);

		if(IsValidDynamicPickup(MeslekBilgi[meslekid][mPickup]))
			DestroyDynamicPickup(MeslekBilgi[meslekid][mPickup]);

		MeslekBilgi[meslekid][mKullanimda] = false;
		MeslekBilgi[meslekid][mTur] = 0;
		MeslekBilgi[meslekid][mID] = 0;
	}
	return 1;
}

stock Meslek_Kaydet(meslekid)
{
	static query[512];

	mysql_format(g_SQL, query, sizeof(query), "UPDATE `meslekler` SET `meslekTur` = '%d', `mPosX` = '%.4f', `mPosY` = '%.4f', `mPosZ` = '%.4f', `mInterior` = '%d', `mWorld` = '%d' WHERE `mID` = '%d'",
		MeslekBilgi[meslekid][mTur],
		MeslekBilgi[meslekid][mPos][0],
		MeslekBilgi[meslekid][mPos][1],
		MeslekBilgi[meslekid][mPos][2],
		MeslekBilgi[meslekid][mInterior],
		MeslekBilgi[meslekid][mWorld],
		MeslekBilgi[meslekid][mID]
		);
	return mysql_tquery(g_SQL, query);
}

stock MeslekIsim(tur)
{
	static isim[24];
	switch(tur)
	{
		case 1: isim = "Konteyner Taþýmacýlýðý";
		case 2: isim = "Týr Þoförlüðü";
		case 3: isim = "Kamyon Þoförlüðü";
		case 4: isim = "Taksi Þoförlüðü";
		case 5: isim = "Trucker Mesleði";
		default: isim = "Yok";
	}
	return isim;
}

public OyuncuYaratildi(playerid)
{
	oyuncuData[playerid][oID] = cache_insert_id();
	new vno = randomEx(10000000, 99999999), query[256];
	mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM oyuncular WHERE VatandaslikNo = '%d'", vno);
	mysql_tquery(g_SQL, query, "vnoarat", "dd", playerid, vno);
	oyuncuData[playerid][oIlkGiris] = true;
	oyuncuData[playerid][oGiris] = true;
	OyuncuKaydet(playerid);
	return 1;
}

public MeslekYaratildi(meslekid)
{
	if(meslekid == -1 || !MeslekBilgi[meslekid][mKullanimda])
		return 0;

	MeslekBilgi[meslekid][mID] = cache_insert_id();
	Meslek_Kaydet(meslekid);
	return 1;
}

public isyeriisimarat(isyeriid)
{
	static rows, fields, isim[32];
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(rows) {
		cache_get_value_name(0, "isim", isim);
		for (new i = 0, len = strlen(isim); i < len; i ++) {
			if(isim[i] == '_') isim[i] = ' ';
		}
		format(IsyeriBilgi[isyeriid][isyeriSahipIsim], sizeof(isim), "%s", isim);
		if(IsyeriBilgi[isyeriid][isyeriOrtak] == 0) format(IsyeriBilgi[isyeriid][isyeriOrtakIsim], sizeof(isim), "Yok");
		Isyeri_Yenile(isyeriid);
	}
	return 1;
}

public isyeriortakisimarat(isyeriid)
{
	static rows, fields, isim[32];
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(rows) {
		cache_get_value_name(0, "isim", isim);
		for(new i = 0, len = strlen(isim); i < len; i++) {
			if(isim[i] == '_') isim[i] = ' ';
		}
		format(IsyeriBilgi[isyeriid][isyeriOrtakIsim], sizeof(isim), "%s", isim);
		return Isyeri_Yenile(isyeriid);
	}
	format(IsyeriBilgi[isyeriid][isyeriOrtakIsim], sizeof(isim), "Yok");
	Isyeri_Yenile(isyeriid);
	return 1;
}

public evkiraciisimarat(evid)
{
	static rows, fields, isim[32];
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(rows) {
		cache_get_value_name(0, "isim", isim);
		for (new i = 0, len = strlen(isim); i < len; i ++) {
			if(isim[i] == '_') isim[i] = ' ';
		}
		format(EvBilgi[evid][evKiraciIsim], sizeof(isim), "%s", isim);
		Ev_Yenile(evid);
	}
	return 1;
}
public evisimarat(evid)
{
	static rows, fields, isim[32];
	cache_get_row_count(rows);
	cache_get_field_count(fields);
	if(rows) {
		cache_get_value_name(0, "isim", isim);
		for (new i = 0, len = strlen(isim); i < len; i ++) {
			if(isim[i] == '_') isim[i] = ' ';
		}
		format(EvBilgi[evid][evSahipIsim], sizeof(isim), "%s", isim);
		Ev_Yenile(evid);
	}
	return 1;
}

function EvYaratildi(evid)
{
	if(evid == -1 || !EvBilgi[evid][evKullanimda])
		return 0;

	EvBilgi[evid][evID] = cache_insert_id();
	EvBilgi[evid][evVW] = EvBilgi[evid][evID];
	new adresiverlan[128];
	format(adresiverlan, sizeof(adresiverlan), "%s", LokasyonBul(EvBilgi[evid][evPos][0], EvBilgi[evid][evPos][1], EvBilgi[evid][evPos][2]));
	format(EvBilgi[evid][evAdres], 128, adresiverlan);
	Ev_Kaydet(evid);
	Ev_Yenile(evid);
	return 1;
}

public TNoktasiYaratildi(tid)
{
	if(tid == -1 || !TutuklamaNoktasi[tid][tKullanimda])
		return 0;

	TutuklamaNoktasi[tid][tID] = cache_insert_id();
	TutuklamaNoktasi_Kaydet(tid);
	return 1;
}

public IsyeriYaratildi(isyeriid)
{
	if(isyeriid == -1 || !IsyeriBilgi[isyeriid][isyeriKullanimda])
		return 0;

	IsyeriBilgi[isyeriid][isyeriID] = cache_insert_id();
	IsyeriBilgi[isyeriid][isyeriVW] = IsyeriBilgi[isyeriid][isyeriID] + 30000;
	Isyeri_Kaydet(isyeriid);
	Isyeri_Yenile(isyeriid);
	return 1;
}

public BenzinPompasiYaratildi(pompaid)
{
	BenzinPompasi[pompaid][pompaID] = cache_insert_id();
	Pompa_Kaydet(pompaid);
	Pompa_Yenile(pompaid);
	return 1;
}

public BinaYaratildi(binaid)
{
	if(binaid == -1 || !BinaBilgi[binaid][bKullanimda])
		return 0;

	BinaBilgi[binaid][bID] = cache_insert_id();
	BinaBilgi[binaid][bVW] = BinaBilgi[binaid][bID] + 7000;
	Bina_Kaydet(binaid);
	return 1;
}

public ATMYaratildi(atmid)
{
	if(atmid == -1 || !ATMBilgi[atmid][atmKullanimda])
		return 0;

	ATMBilgi[atmid][atmID] = cache_insert_id();
	ATM_Kaydet(atmid);
	return 1;
}

public UyusturucuYaratildi(uid)
{
	if(uid == -1 || !UyusturucuBilgi[uid][uKullanimda])
		return 0;

	UyusturucuBilgi[uid][uID] = cache_insert_id();
	Uyusturucu_Yenile(uid);
	Uyusturucu_Kaydet(uid);
	return 1;
}

public Evleri_Yukle()
{
	static rows, fields, mesaj[128];

	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for (new i = 0; i < rows; i ++) if(i < MAKSIMUM_EV)
	{
		EvBilgi[i][evKullanimda] = true;
		EvBilgi[i][evID] = vericek_int(i, "evID");
		format(EvBilgi[i][evAdres], 128, "%s", vericek_varchar(i, "Adres"));
		EvBilgi[i][evDurum] = vericek_int(i, "Durum");
		EvBilgi[i][evPos][0] = vericek_float(i, "evPosX");
		EvBilgi[i][evPos][1] = vericek_float(i, "evPosY");
		EvBilgi[i][evPos][2] = vericek_float(i, "evPosZ");
		EvBilgi[i][evPos][3] = vericek_float(i, "evPosA");
		EvBilgi[i][evIcPos][0] = vericek_float(i, "evIcPosX");
		EvBilgi[i][evIcPos][1] = vericek_float(i, "evIcPosY");
		EvBilgi[i][evIcPos][2] = vericek_float(i, "evIcPosZ");
		EvBilgi[i][evIcPos][3] = vericek_float(i, "evIcPosA");
		EvBilgi[i][evInterior] = vericek_int(i, "evInt");
		EvBilgi[i][evVW] = vericek_int(i, "evVW");
		EvBilgi[i][evDisVW] = vericek_int(i, "evDisVW");
		EvBilgi[i][evDisInt] = vericek_int(i, "evDisInt");
		EvBilgi[i][evSahip] = vericek_int(i, "evSahip");
		EvBilgi[i][evFiyat] = vericek_int(i, "evFiyat");
		EvBilgi[i][evDekor] = vericek_int(i, "Dekor");
		EvBilgi[i][evBakimSure] = vericek_int(i, "bSure");
		EvBilgi[i][evAnahtar] = vericek_int(i, "EvAnahtar");
		EvBilgi[i][evKiralik] = vericek_int(i, "Kiralik");
		EvBilgi[i][evKiraci] = vericek_int(i, "Kiraci");
		EvBilgi[i][evKiraUcret] = vericek_int(i, "KiraUcret");
		EvBilgi[i][evVergi] = vericek_int(i, "evVergi");
		EvBilgi[i][evKasa] = vericek_int(i, "Kasa");
		EvBilgi[i][evLamba] = true;		
		EvBilgi[i][evPickup] = CreateDynamicPickup(1273, 23, EvBilgi[i][evPos][0], EvBilgi[i][evPos][1], EvBilgi[i][evPos][2], EvBilgi[i][evDisVW], EvBilgi[i][evDisInt], -1, 10.0); // + 0.7
		Ev_Yenile(i);
		for (new e = 0; e < MAX_ITEM; e ++) {
			EvEnvanterData[i][i_tip][e] = 0;
			EvEnvanterData[i][i_var][e] = 0;
			EvEnvanterData[i][i_aktif][e] = false;
		}
		new query[100];
		mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM ev_envanter WHERE EvId = '%d'", EvBilgi[i][evID]);
		mysql_tquery(g_SQL, query, "EvEnvanterYuklendi", "d", i);
	}
	if(rows < 1) format(mesaj, sizeof(mesaj), "[SUNUCU] Veritabanýnda sunucuya entegre edilecek ev bulunamadý!");
	else if(rows > 0) format(mesaj, sizeof(mesaj), "[SUNUCU] %d adet ev yüklendi.", rows);
	printf(mesaj);
	return 1;
}

function EvEnvanterYuklendi(evid)
{
	new rows, slot, tip, miktar;
	cache_get_row_count(rows);
	for(new i; i < rows; i++)
	{
		slot = vericek_int(i, "ItemSlot");
		tip = vericek_int(i, "ItemTip");
		miktar = vericek_int(i, "ItemMiktar");
		EvEnvanterData[evid][i_tip][slot] = tip;
		EvEnvanterData[evid][i_var][slot] = miktar;
		EvEnvanterData[evid][i_aktif][slot] = true;
	}
	return 1;
}

public OnItemlerYuklendi(playerid)
{
	static rows, fields, slot, tip, miktar;

	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for (new i = 0; i < rows; i ++) if(i < MAX_ITEM && rows > 0)
	{
		slot = vericek_int(i, "slot");
		tip = vericek_int(i, "tip");
		miktar = vericek_int(i, "var");
		EnvanterData[playerid][i_tip][slot] = tip;
		EnvanterData[playerid][i_var][slot] = miktar;
		EnvanterData[playerid][i_aktif][slot] = true;
		oyuncuData[playerid][pEnvanterAgirlik] = floatadd(oyuncuData[playerid][pEnvanterAgirlik],ItemArray[ EnvanterData[playerid][i_tip][slot] - 1 ][igram]);
	}
	return 1;
}

public Yat_Yukle()
{
	static rows, fields, mesaj[128];

	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for (new i = 0; i < rows; i ++) if(i < MAX_YAT)
	{
		YatInfo[i][yID] = vericek_int(i, "id");
		YatInfo[i][yX] = vericek_float(i, "x");
		YatInfo[i][yY] = vericek_float(i, "y");
		YatInfo[i][yZ] = vericek_float(i, "z");
		YatInfo[i][yrX] = vericek_float(i, "rx");
		YatInfo[i][yrY] = vericek_float(i, "ry");
		YatInfo[i][yrZ] = vericek_float(i, "rz");
		YatInfo[i][yPara] = vericek_int(i, "para");
		format(YatInfo[i][ySahip], 64, "%s", vericek_varchar(i, "sahip"));
		format(YatInfo[i][yIsim], 64, "%s", vericek_varchar(i, "isim"));
		YatInfo[i][yAktif] = 1;
		YatInfo[i][yRadyo] = 0;
		YatInfo[i][yKullanimda] = 0;
		YatInfo[i][yObje] = CreateDynamicObject(-2005, YatInfo[i][yX], YatInfo[i][yY], YatInfo[i][yZ], YatInfo[i][yrX], YatInfo[i][yrY], YatInfo[i][yrZ]); //CreateObject(-2005, YatInfo[i][yX], YatInfo[i][yY], YatInfo[i][yZ], YatInfo[i][yrX], YatInfo[i][yrY], YatInfo[i][yrZ]);
		YatInfo[i][yAttach] = CreateDynamicObject(2232, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0); //CreateObject(2232, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		AttachDynamicObjectToObject(YatInfo[i][yAttach], YatInfo[i][yObje], 4.358591, -9.824934, 3.768443, 0.0, 0.0, -89.900032);
		YatInfo[i][yReis] = CreateDynamicObject(19482, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0); //CreateObject(19482, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		SetDynamicObjectMaterialText(YatInfo[i][yReis], 0, YatInfo[i][yIsim], 130, "Ariel", 60, 1, 0xFFFFFFFF, 0x00000000, 0);
		AttachDynamicObjectToObject(YatInfo[i][yReis], YatInfo[i][yObje], -6.261342, 12.250880, -2.792347, -1.200000, 0.899999, 173.800033);
		YatInfo[i][yKasa] = CreateDynamicObject(1829, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0); //CreateObject(1829, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		AttachDynamicObjectToObject(YatInfo[i][yKasa], YatInfo[i][yObje], -4.126798, -0.237221, 0.848311, 0.000000, 0.000000, 0.000000);
	}
	if(rows < 1) format(mesaj, sizeof(mesaj), "[SUNUCU] Veritabanýnda sunucuya entegre edilecek yat bulunamadý!");
	else if(rows > 0) format(mesaj, sizeof(mesaj), "[SUNUCU] %d adet yat yüklendi.", rows);
	printf(mesaj);
	return 1;
}

public Garaj_Yukle()
{
	static rows, fields, mesaj[128],labelString[100];

	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for (new i = 0; i < rows; i ++) if(i < MAX_GARAJ)
	{
		GarajInfo[i][gID] = vericek_int(i, "id");
		GarajInfo[i][gX] = vericek_float(i, "x");
		GarajInfo[i][gY] = vericek_float(i, "y");
		GarajInfo[i][gZ] = vericek_float(i, "z");
		format(GarajInfo[i][gSahip], 64, "%s", vericek_varchar(i, "sahip"));
		GarajInfo[i][gKasa] = vericek_int(i, "kasa");
		GarajInfo[i][gInt] = vericek_int(i, "interior");
		GarajInfo[i][gVw] = vericek_int(i, "vw");
		GarajInfo[i][gKilit] = vericek_int(i, "kilit");
		GarajInfo[i][gKapasite] = vericek_int(i, "kapasite");
		GarajInfo[i][gBirlik] = vericek_int(i, "birlik");
		GarajInfo[i][gPickup] = CreateDynamicPickup(19132, 23,GarajInfo[i][gX], GarajInfo[i][gY], GarajInfo[i][gZ], -1,-1,-1, 50.0);
		format(labelString, sizeof(labelString), "[%s]\n{AFAFAF}[GARAJ(%d)]\n[SAHÝP]{FFFFFF} %s", (GarajInfo[i][gKilit] != 0) ? ("{F00E0E}KÝLÝTLÝ{FFFFFF}") : ("{43D91A}AÇIK{FFFFFF}"), GarajInfo[i][gID], GarajInfo[i][gSahip]);
		GarajInfo[i][gLabel] = CreateDynamic3DTextLabel(labelString, -1, GarajInfo[i][gX], GarajInfo[i][gY], GarajInfo[i][gZ]+0.8, 15, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
		Iter_Add(Garajlar, GarajInfo[i][gID]);
	}
	if(rows < 1) format(mesaj, sizeof(mesaj), "[SUNUCU] Veritabanýnda sunucuya entegre edilecek garaj bulunamadý!");
	else if(rows > 0) format(mesaj, sizeof(mesaj), "[SUNUCU] %d adet garaj yüklendi.", rows);
	printf(mesaj);
	return 1;
}

public Yeritem_Yukle()
{
	static rows, fields, mesaj[128],string[80],obje;

	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for (new i_row = 0; i_row < rows; i_row ++) if(i_row < MAX_BIRAKILANITEM)
	{
		new i;
		BirakilanItemler[i_row][itemid] = vericek_int(i_row, "id");
		i = BirakilanItemler[i_row][itemid];
		BirakilanItemler[i][iX] = vericek_float(i_row, "x");
		BirakilanItemler[i][iY] = vericek_float(i_row, "y");
		BirakilanItemler[i][iZ] = vericek_float(i_row, "z");
		BirakilanItemler[i][itemvw] = vericek_int(i_row, "vw");
		BirakilanItemler[i][itemint] = vericek_int(i_row, "interior");
		BirakilanItemler[i][itemid] = vericek_int(i_row, "id");
		BirakilanItemler[i][itemtip] = vericek_int(i_row, "tip");
		BirakilanItemler[i][itemmiktar] = vericek_int(i_row, "miktar");
		obje = vericek_int(i_row, "obje");

		BirakilanItemler[i][itemobje] = CreateDynamicObject(obje,BirakilanItemler[i][iX],BirakilanItemler[i][iY],BirakilanItemler[i][iZ],0.0,0.0,0.0,BirakilanItemler[i][itemvw],BirakilanItemler[i][itemint], -1,50.0);

		format(string, sizeof(string), "EÞYA: %s\n'/esyaal'", ItemArray[ BirakilanItemler[i][itemtip] - 1][iisim]);
		//BirakilanItemler[i][txt3D] = CreateDynamic3DTextLabel(string, RENK_OZELKIRMIZI, BirakilanItemler[i][iX], BirakilanItemler[i][iY], (BirakilanItemler[i][iZ] + 0.50), 1.0, -1, -1, 1, BirakilanItemler[i][itemvw], BirakilanItemler[i][itemint]);
		BirakilanItemler[i][txt3D] = CreateDynamic3DTextLabel(string, RENK_OZELKIRMIZI, BirakilanItemler[i][iX], BirakilanItemler[i][iY], (BirakilanItemler[i][iZ] + 0.50), 1.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, BirakilanItemler[i][itemvw], BirakilanItemler[i][itemint]);
		Iter_Add(Itemler, BirakilanItemler[i][itemid]);
	}
	if(rows < 1) format(mesaj, sizeof(mesaj), "[SUNUCU] Veritabanýnda sunucuya entegre edilecek yere birakilmis item bulunamadý!");
	else if(rows > 0) format(mesaj, sizeof(mesaj), "[SUNUCU] %d adet yere birakilmis item yüklendi.", rows);
	printf(mesaj);
	return 1;
}

public Kutu_Yukle()
{
	static rows, fields, mesaj[128];

	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for (new i = 0; i < rows; i ++) if(i < MAX_CUVAL)
	{
		KutuInfo[i][kID] = vericek_int(i, "id");
		KutuInfo[i][kX] = vericek_float(i, "x");
		KutuInfo[i][kY] = vericek_float(i, "y");
		KutuInfo[i][kZ] = vericek_float(i, "z");
		KutuInfo[i][kInt] = vericek_int(i, "interior");
		KutuInfo[i][kVw] = vericek_int(i, "vw");
		KutuInfo[i][kObje] = CreateDynamicObject(2912,KutuInfo[i][kX],KutuInfo[i][kY],KutuInfo[i][kZ],0.0,0.0,0.0,KutuInfo[i][kVw],KutuInfo[i][kInt], -1,50.0);
		KutuInfo[i][kLabel] = CreateDynamic3DTextLabel("[EÞYA KUTUSU]", RENK_OZELKIRMIZI, KutuInfo[i][kX],KutuInfo[i][kY],KutuInfo[i][kZ], 3.0);
		Iter_Add(Kutu, KutuInfo[i][kID]);
	}
	if(rows < 1) format(mesaj, sizeof(mesaj), "[SUNUCU] Veritabanýnda sunucuya entegre edilecek kutu bulunamadý!");
	else if(rows > 0) format(mesaj, sizeof(mesaj), "[SUNUCU] %d adet kutu yüklendi.", rows);
	printf(mesaj);
	return 1;
}

public Ankesor_Yukle()
{
	static rows, fields, mesaj[128],labelString[100];

	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for (new i = 0; i < rows; i ++) if(i < MAX_YAT)
	{
		AnkesorInfo[i][aID] = vericek_int(i, "id");
		AnkesorInfo[i][aX] = vericek_float(i, "x");
		AnkesorInfo[i][aY] = vericek_float(i, "y");
		AnkesorInfo[i][aZ] = vericek_float(i, "z");
		AnkesorInfo[i][arX] = vericek_float(i, "rx");
		AnkesorInfo[i][arY] = vericek_float(i, "ry");
		AnkesorInfo[i][arZ] = vericek_float(i, "rz");
		AnkesorInfo[i][aVw] = vericek_int(i, "vw");
		AnkesorInfo[i][aInt] = vericek_int(i, "interior");
		AnkesorInfo[i][aNumara] = vericek_int(i, "numara");
		AnkesorInfo[i][aAktif] = 0;
		AnkesorInfo[i][aCaliyor] = 0;
		AnkesorInfo[i][aKisi] = -1;
		AnkesorInfo[i][aArayan] = -1;
		Iter_Add(Ankesorlu, i);

		AnkesorInfo[i][aObje] = CreateDynamicObject(1216, AnkesorInfo[i][aX], AnkesorInfo[i][aY], AnkesorInfo[i][aZ], AnkesorInfo[i][arX], AnkesorInfo[i][arY], AnkesorInfo[i][arZ], AnkesorInfo[i][aVw],AnkesorInfo[i][aInt]);
		format(labelString, sizeof(labelString), "[Ankesörlü Telefon %d]\n{AFAFAF}Numara: {FFFFFF}%d\n{AFAFAF}(/atel)", i, AnkesorInfo[i][aNumara]);
		AnkesorInfo[i][aLabel] = CreateDynamic3DTextLabel(labelString, RENK_SERVER, AnkesorInfo[i][aX], AnkesorInfo[i][aY], AnkesorInfo[i][aZ] + 1.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, AnkesorInfo[i][aVw], AnkesorInfo[i][aInt]);
	}
	if(rows < 1) format(mesaj, sizeof(mesaj), "[SUNUCU] Veritabanýnda sunucuya entegre edilecek ankesörlü telefon bulunamadý!");
	else if(rows > 0) format(mesaj, sizeof(mesaj), "[SUNUCU] %d adet ankesörlü telefon yüklendi.", rows);
	printf(mesaj);
	return 1;
}

public Isyerlerini_Yukle()
{
	static rows, fields, mesaj[128];
	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for (new i = 0; i < rows; i ++) if(i < MAKSIMUM_ISYERI)
	{
		IsyeriBilgi[i][isyeriKullanimda] = true;
		IsyeriBilgi[i][isyeriID] = vericek_int(i, "isyeriID");

		format(IsyeriBilgi[i][isyeriAd], 128, "%s", vericek_varchar(i, "Ad"));
		IsyeriBilgi[i][isyeriDurum] = vericek_int(i, "Durum");
		IsyeriBilgi[i][isyeriPos][0] = vericek_float(i, "isyeriPosX");
		IsyeriBilgi[i][isyeriPos][1] = vericek_float(i, "isyeriPosY");
		IsyeriBilgi[i][isyeriPos][2] = vericek_float(i, "isyeriPosZ");
		IsyeriBilgi[i][isyeriPos][3] = vericek_float(i, "isyeriPosA");
		IsyeriBilgi[i][isyeriIcPos][0] = vericek_float(i, "isyeriIcPosX");
		IsyeriBilgi[i][isyeriIcPos][1] = vericek_float(i, "isyeriIcPosY");
		IsyeriBilgi[i][isyeriIcPos][2] = vericek_float(i, "isyeriIcPosZ");
		IsyeriBilgi[i][isyeriIcPos][3] = vericek_float(i, "isyeriIcPosA");
		IsyeriBilgi[i][isyeriInterior] = vericek_int(i, "isyeriInt");
		IsyeriBilgi[i][isyeriVW] = vericek_int(i, "isyeriVW");
		IsyeriBilgi[i][isyeriDisVW] = vericek_int(i, "isyeriDisVW");
		IsyeriBilgi[i][isyeriDisInt] = vericek_int(i, "isyeriDisInt");
		IsyeriBilgi[i][isyeriSahip] = vericek_int(i, "isyeriSahip");
		IsyeriBilgi[i][isyeriOrtak] = vericek_int(i, "isyeriOrtak");
		IsyeriBilgi[i][isyeriFiyat] = vericek_int(i, "isyeriFiyat");
		IsyeriBilgi[i][isyeriTur] = vericek_int(i, "isyeriTur");
		IsyeriBilgi[i][isyeriKasa] = vericek_int(i, "isyeriKasa");
		IsyeriBilgi[i][iGirisUcret] = vericek_int(i, "GirisUcreti");
		IsyeriBilgi[i][isyeriVergi] = vericek_int(i, "isyeriVergi");
		IsyeriBilgi[i][isyeriBirlik] = vericek_int(i, "isyeriBirlik");
		format(IsyeriBilgi[i][isyeriMuzik], 128, "%s", vericek_varchar(i, "isyeriMuzik"));
		IsyeriBilgi[i][isyeriUrun] = vericek_int(i, "isyeriUrun");
		IsyeriBilgi[i][isyeriPickup] = CreateDynamicPickup(1239, 23, IsyeriBilgi[i][isyeriPos][0], IsyeriBilgi[i][isyeriPos][1], IsyeriBilgi[i][isyeriPos][2], IsyeriBilgi[i][isyeriDisVW], IsyeriBilgi[i][isyeriDisInt], -1, 10.0); // + 0.7
		Isyeri_Yenile(i);
	}
	if(rows < 1) format(mesaj, sizeof(mesaj), "[SUNUCU] Veritabanýnda sunucuya entegre edilecek iþyeri bulunamadý!");
	else if(rows > 0) format(mesaj, sizeof(mesaj), "[SUNUCU] %d adet iþyeri yüklendi.", rows);
	printf(mesaj);
	return 1;
}

public Binalari_Yukle()
{
	static rows, fields, mesaj[128];

	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for (new i = 0; i < rows; i ++) if(i < MAKSIMUM_BINA)
	{
		BinaBilgi[i][bKullanimda] = true;
		BinaBilgi[i][bID] = vericek_int(i, "bID");

		format(BinaBilgi[i][bIsim], 32, "%s", vericek_varchar(i, "binaAdi"));
		BinaBilgi[i][bModel] = vericek_int(i, "binaModel");
		BinaBilgi[i][bPos][0] = vericek_float(i, "bPosX");
		BinaBilgi[i][bPos][1] = vericek_float(i, "bPosY");
		BinaBilgi[i][bPos][2] = vericek_float(i, "bPosZ");
		BinaBilgi[i][bPos][3] = vericek_float(i, "bPosA");
		BinaBilgi[i][bIPos][0] = vericek_float(i, "bIPosX");
		BinaBilgi[i][bIPos][1] = vericek_float(i, "bIPosY");
		BinaBilgi[i][bIPos][2] = vericek_float(i, "bIPosZ");
		BinaBilgi[i][bIPos][3] = vericek_float(i, "bIPosA");
		BinaBilgi[i][bInterior] = vericek_int(i, "bInterior");
		BinaBilgi[i][bVW] = vericek_int(i, "bVW");
		BinaBilgi[i][bDisVW] = vericek_int(i, "bDisVW");
		BinaBilgi[i][bDisInt] = vericek_int(i, "bDisInt");
		BinaBilgi[i][binaDurum] = vericek_int(i, "binaDurum");
		BinaBilgi[i][binaTur] = vericek_int(i, "binaTur");
		Bina_Yenile(i);
	}
	if(rows < 1) {
		format(mesaj, sizeof(mesaj), "[SUNUCU] Veritabanýnda sunucuya entegre edilecek bina bulunamadý!");
	}
	else if(rows > 0) {
		format(mesaj, sizeof(mesaj), "[SUNUCU] %d adet bina yüklendi.", rows);
	}
	printf(mesaj);
	return 1;
}

public Atmleri_Yukle()
{
	static rows, fields, mesaj[128];

	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for (new i = 0; i < rows; i ++) if(i < MAKSIMUM_ATM)
	{
		ATMBilgi[i][atmKullanimda] = true;
		ATMBilgi[i][atmID] = vericek_int(i, "atmID");

		ATMBilgi[i][atmPos][0] = vericek_float(i, "atmX");
		ATMBilgi[i][atmPos][1] = vericek_float(i, "atmY");
		ATMBilgi[i][atmPos][2] = vericek_float(i, "atmZ");
		ATMBilgi[i][atmPos][3] = vericek_float(i, "atmA");
		ATMBilgi[i][atmInterior] = vericek_int(i, "atmInterior");
		ATMBilgi[i][atmWorld] = vericek_int(i, "atmWorld");
		ATMBilgi[i][atmPara] = vericek_int(i, "atmPara");
		ATM_Yenile(i);
	}
	if(rows < 1) {
		format(mesaj, sizeof(mesaj), "[SUNUCU] Veritabanýnda sunucuya entegre edilecek atm bulunamadý!");
	}
	else if(rows > 0) {
		format(mesaj, sizeof(mesaj), "[SUNUCU] %d adet atm yüklendi.", rows);
	}
	printf(mesaj);
	return 1;
}

public Meslekleri_Yukle()
{
	static rows, fields, mesaj[128];
	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for (new i = 0; i < rows; i ++) if(i < MAKSIMUM_MESLEK)
	{
		MeslekBilgi[i][mKullanimda] = true;
		MeslekBilgi[i][mID] = vericek_int(i, "mID");

		MeslekBilgi[i][mPos][0] = vericek_float(i, "mPosX");
		MeslekBilgi[i][mPos][1] = vericek_float(i, "mPosY");
		MeslekBilgi[i][mPos][2] = vericek_float(i, "mPosZ");
		MeslekBilgi[i][mInterior] = vericek_int(i, "mInterior");
		MeslekBilgi[i][mWorld] = vericek_int(i, "mWorld");
		MeslekBilgi[i][mTur] = vericek_int(i, "meslekTur");
		Meslek_Yenile(i);
	}
	if(rows < 1) {
		format(mesaj, sizeof(mesaj), "[SUNUCU] Veritabanýnda sunucuya entegre edilecek meslek bulunamadý!");
	}
	else if(rows > 0) {
		format(mesaj, sizeof(mesaj), "[SUNUCU] %d adet meslek yüklendi.", rows);
	}
	printf(mesaj);
	return 1;
}

public Uyusturuculari_Yukle()
{
	static rows, fields, mesaj[128];

	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for (new i = 0; i < rows; i ++) if(i < MAKSIMUM_UYUSTURUCU)
	{
		UyusturucuBilgi[i][uKullanimda] = true;
		UyusturucuBilgi[i][uID] = vericek_int(i, "uID");

		UyusturucuBilgi[i][uPos][0] = vericek_float(i, "posX");
		UyusturucuBilgi[i][uPos][1] = vericek_float(i, "posY");
		UyusturucuBilgi[i][uPos][2] = vericek_float(i, "posZ");
		UyusturucuBilgi[i][uPos][3] = vericek_float(i, "posA");
		UyusturucuBilgi[i][uInterior] = vericek_int(i, "uInterior");
		UyusturucuBilgi[i][uWorld] = vericek_int(i, "uWorld");
		UyusturucuBilgi[i][uDurum] = vericek_int(i, "Durum");
		UyusturucuBilgi[i][uEv] = vericek_int(i, "Ev");
		Uyusturucu_Yenile(i);
	}
	if(rows < 1) format(mesaj, sizeof(mesaj), "[SUNUCU] Veritabanýnda sunucuya entegre edilecek uyuþturucu saksýsý bulunamadý!");
	else if(rows > 0) format(mesaj, sizeof(mesaj), "[SUNUCU] %d adet uyuþturucu saksýsý yüklendi.", rows);
	printf(mesaj);
	return 1;
}

public TutuklamaNoktasi_Yukle()
{
	static rows, fields, mesaj[128];

	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for (new i = 0; i < rows; i ++) if(i < MAKSIMUM_TUTUKLAMANOKTASI)
	{
		TutuklamaNoktasi[i][tKullanimda] = true;
		TutuklamaNoktasi[i][tID] = vericek_int(i, "tID");

		TutuklamaNoktasi[i][tPos][0] = vericek_float(i, "x");
		TutuklamaNoktasi[i][tPos][1] = vericek_float(i, "y");
		TutuklamaNoktasi[i][tPos][2] = vericek_float(i, "z");
		TutuklamaNoktasi[i][tPos][3] = vericek_float(i, "a");
		TutuklamaNoktasi[i][tInterior] = vericek_int(i, "tInterior");
		TutuklamaNoktasi[i][tWorld] = vericek_int(i, "tWorld");

		TutuklamaNoktasi[i][hPos][0] = vericek_float(i, "hx");
		TutuklamaNoktasi[i][hPos][1] = vericek_float(i, "hy");
		TutuklamaNoktasi[i][hPos][2] = vericek_float(i, "hz");
		TutuklamaNoktasi[i][hPos][3] = vericek_float(i, "ha");
		TutuklamaNoktasi[i][hInterior] = vericek_int(i, "hInterior");
		TutuklamaNoktasi[i][hWorld] = vericek_int(i, "hWorld");
		TutuklamaNoktasi_Yenile(i);
	}
	if(rows < 1) format(mesaj, sizeof(mesaj), "[SUNUCU] Veritabanýnda sunucuya entegre edilecek tutuklama noktasý bulunamadý!");
	else if(rows > 0) format(mesaj, sizeof(mesaj), "[SUNUCU] %d adet tutuklama noktasý yüklendi.", rows);
	printf(mesaj);
	return 1;
}

public Firmaarac_Yukle()
{
	new yukle,
	mesaj[256],
	arac,
	Float:X,
	Float:Y,
	Float:Z,
	Float:A,
	firma,
	model,
	renk1,
	renk2,
	aplaka[12],
	id,
	rows,
	kiralik,
	kirazaman,
	kiraucret,
	fields;

	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for(new r = 0; r != rows; r++) {
		X = vericek_float(r, "aracPosX");
		Y = vericek_float(r, "aracPosY");
		Z = vericek_float(r, "aracPosZ");
		A = vericek_float(r, "aracPosR");
		id = vericek_int(r, "aracID");
		renk1 = vericek_int(r, "aracRenk1");
		renk2 = vericek_int(r, "aracRenk2");
		firma = vericek_int(r, "aracFirma");
		model = vericek_int(r, "aracModel");
		kiralik = vericek_int(r, "Kiralik");
		kirazaman = vericek_int(r, "KiraZaman");
		kiraucret = vericek_int(r, "KiraUcret");
		format(aplaka, 12, "%s", vericek_varchar(r, "aracPlaka"));

		arac = CreateVehicle(model, X, Y, Z, A, renk1, renk2, -1);
		AracBilgi[arac][aracID] = id;
		AracBilgi[arac][aracYarat] = arac;
		AracBilgi[arac][aracKullanimda] = true;
		AracBilgi[arac][aracModel] = model;
		AracBilgi[arac][aracTur] = 0;
		AracBilgi[arac][aracSahip] = 0;
		AracBilgi[arac][aracSigorta] = 5;
		AracBilgi[arac][kilitseviye] = 0;
		AracBilgi[arac][aracRadyoDurum] = false;
		AracBilgi[arac][araccalintisure] = 0;
		AracBilgi[arac][alarmseviye] = 0;
		AracBilgi[arac][aracPos][0] = X;
		AracBilgi[arac][aracPos][1] = Y;
		AracBilgi[arac][aracPos][2] = Z;
		AracBilgi[arac][aracPos][3] = A;
		AracBilgi[arac][aracRenk1] = renk1;
		AracBilgi[arac][aracRenk2] = renk2;
		AracBilgi[arac][aracPaintjob] = -1;
		AracBilgi[arac][aracKilit] = false;
		format(AracBilgi[arac][aracPlaka], 128, aplaka);
		AracBilgi[arac][aracAnahtar] = -1;
		AracBilgi[arac][aracMeslek] = -1;
		AracBilgi[arac][aracKM] = 0.00;
		AracBilgi[arac][aracBenzin] = 75.0;
		AracBilgi[arac][aracFiyat] = 0;
		AracBilgi[arac][aracBirlik] = -1;
		AracBilgi[arac][aracFirma] = firma;
		AracBilgi[arac][aracKiralik] = kiralik;
		AracBilgi[arac][aKiraZaman] = kirazaman;
		AracBilgi[arac][aKiraUcret] = kiraucret;
		AracBilgi[arac][aracInt] = 0;
		AracBilgi[arac][aracWorld] = 0;
		for(new mod_i = 0; mod_i < 14; mod_i++){AracBilgi[arac][aracParca][mod_i] = 0;}

			Iter_Add(Araclar, arac);
		yukle++;

		Arac_Spawn(arac);
	    //printf("%d", ii);
	}
	if(yukle < 1) format(mesaj, sizeof(mesaj), "[SUNUCU] Veritabanýnda sunucuya entegre edilecek firma aracý bulunamadý!");
	else if(yukle > 0) format(mesaj, sizeof(mesaj), "[SUNUCU] %d adet firma aracý yüklendi.", yukle);
	printf(mesaj);
	return 1;
}

public Tezgah_Yukle()
{
	static rows, fields, mesaj[128],string[100];

	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for (new i = 0; i < rows; i ++) if(i < MAX_TEZGAH)
	{
		TezgahInfo[i][tID] = vericek_int(i, "id");
		format(TezgahInfo[i][tSahip], 24, "%s", vericek_varchar(i, "sahip"));
		TezgahInfo[i][tX] = vericek_float(i, "x");
		TezgahInfo[i][tY] = vericek_float(i, "y");
		TezgahInfo[i][tZ] = vericek_float(i, "z");
		TezgahInfo[i][trX] = vericek_float(i, "rx");
		TezgahInfo[i][trY] = vericek_float(i, "ry");
		TezgahInfo[i][trZ] = vericek_float(i, "rz");
		TezgahInfo[i][tInt] = vericek_int(i, "interior");
		TezgahInfo[i][tVw] = vericek_int(i, "vw");
		TezgahInfo[i][tObje] = CreateDynamicObject(-2020,TezgahInfo[i][tX],TezgahInfo[i][tY],TezgahInfo[i][tZ],TezgahInfo[i][trX],TezgahInfo[i][trY],TezgahInfo[i][trZ],TezgahInfo[i][tVw],TezgahInfo[i][tInt], -1,50.0);
		format(string, sizeof(string), "{F2DA4E}[CRAFT MASASI]\nID: {FFFFFF}%d\n{F2DA4E}Sahip: {FFFFFF}%s", TezgahInfo[i][tID], TezgahInfo[i][tSahip]);
		TezgahInfo[i][tLabel] = CreateDynamic3DTextLabel(string, RENK_OZELKIRMIZI, TezgahInfo[i][tX], TezgahInfo[i][tY], TezgahInfo[i][tZ], 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, TezgahInfo[i][tVw], TezgahInfo[i][tInt]);
		Iter_Add(Tezgah, TezgahInfo[i][tID]); 
	}
	if(rows < 1) format(mesaj, sizeof(mesaj), "[SUNUCU] Veritabanýnda sunucuya entegre edilecek craft tezgahý bulunamadý!");
	else if(rows > 0) format(mesaj, sizeof(mesaj), "[SUNUCU] %d adet craft tezgahý yüklendi.", rows);
	printf(mesaj);
	return 1;
}

public Seyyar_Yukle()
{
	static rows, fields, mesaj[128],string[180];

	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for (new i = 0; i < rows; i ++) if(i < MAX_SEYYAR)
	{
		SeyyarInfo[i][sID] = vericek_int(i, "id");
		format(SeyyarInfo[i][sSahip], 24, "%s", vericek_varchar(i, "sahip"));
		SeyyarInfo[i][sX] = vericek_float(i, "x");
		SeyyarInfo[i][sY] = vericek_float(i, "y");
		SeyyarInfo[i][sZ] = vericek_float(i, "z");
		SeyyarInfo[i][srX] = vericek_float(i, "rx");
		SeyyarInfo[i][srY] = vericek_float(i, "ry");
		SeyyarInfo[i][srZ] = vericek_float(i, "rz");
		SeyyarInfo[i][sInt] = vericek_int(i, "interior");
		SeyyarInfo[i][sVw] = vericek_int(i, "vw");
		SeyyarInfo[i][sKasa] = vericek_int(i, "kasa");
		SeyyarInfo[i][sTur] = vericek_int(i, "tur");
		SeyyarInfo[i][sObje] = CreateDynamicObject(seyyarveri[SeyyarInfo[i][sTur]][0],SeyyarInfo[i][sX],SeyyarInfo[i][sY],SeyyarInfo[i][sZ],SeyyarInfo[i][srX],SeyyarInfo[i][srY],SeyyarInfo[i][srZ],SeyyarInfo[i][sVw],SeyyarInfo[i][sInt], -1,50.0);
		format(string, sizeof(string), "{C24748}[TEZGAH]\nID: {FFFFFF}%d\n{C24748}Tür: {FFFFFF}%s\n{C24748}Sahip: {FFFFFF}%s\n'/satinal'", SeyyarInfo[i][sID], TezgahTuru(SeyyarInfo[i][sTur]), SeyyarInfo[i][sSahip]);
		SeyyarInfo[i][sLabel] = CreateDynamic3DTextLabel(string, RENK_OZELKIRMIZI, SeyyarInfo[i][sX], SeyyarInfo[i][sY], SeyyarInfo[i][sZ], 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);
		Iter_Add(Seyyar, SeyyarInfo[i][sID]);
	}
	if(rows < 1) format(mesaj, sizeof(mesaj), "[SUNUCU] Veritabanýnda sunucuya entegre edilecek seyyar tezgahý bulunamadý!");
	else if(rows > 0) format(mesaj, sizeof(mesaj), "[SUNUCU] %d adet seyyar tezgahý yüklendi.", rows);
	printf(mesaj);
	return 1;
}

public Tnokta_Yukle()
{
	static rows, fields, mesaj[128];

	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for (new i = 0; i < rows; i ++) if(i < MAX_TNOKTA)
	{
		TeleportData[i][telID] = vericek_int(i, "id");
		format(TeleportData[i][telIsim], 64, "%s", vericek_varchar(i, "isim"));
		TeleportData[i][telX] = vericek_float(i, "x");
		TeleportData[i][telY] = vericek_float(i, "y");
		TeleportData[i][telZ] = vericek_float(i, "z");
		TeleportData[i][teldestX] = vericek_float(i, "dx");
		TeleportData[i][teldestY] = vericek_float(i, "dy");
		TeleportData[i][teldestZ] = vericek_float(i, "dz");
		TeleportData[i][telInt] = vericek_int(i, "interior");
		TeleportData[i][telVW] = vericek_int(i, "vw");
		TeleportData[i][teldestInt] = vericek_int(i, "dinterior");
		TeleportData[i][teldestVW] = vericek_int(i, "dvw");
		Iter_Add(Teleportlar, TeleportData[i][telID]);
	}
	if(rows < 1) format(mesaj, sizeof(mesaj), "[SUNUCU] Veritabanýnda sunucuya entegre edilecek teleport noktasý bulunamadý!");
	else if(rows > 0) format(mesaj, sizeof(mesaj), "[SUNUCU] %d adet teleport noktasý yüklendi.", rows);
	printf(mesaj);
	return 1;
}


public Araclari_Yukle()
{
	new yukle,
	modstr[256],
	mesaj[256],
	arac,
	Float:X,
	Float:Y,
	Float:Z,
	Float:A,
	model,
	renk1,
	renk2,
	aplaka[12],
	aracyazi[128],
	id,
	rows,
	kiralik,
	kirazaman,
	kiraucret,
	arackilit,
	aracpaintjob,
	aracbirlik,
	aracsahip,
	aractur,
	kilitseviyesi,
	araccalintisuresi,
	alarmseviyesi,
	aracSigortasi,
	Anahtar,
	aracWorldsi,
	aracIntsi,
	aracMesleksi,
	Float:aracKMsi,
	Float:aracBenzinsi,
	Float:aracCansi,
	aracFiyatsi,
	aracVergisi,
	aracCezasi,
	firma,
	fields;

	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for(new r = 0; r != rows; r++) {
		X = vericek_float(r, "aracPosX");
		Y = vericek_float(r, "aracPosY");
		Z = vericek_float(r, "aracPosZ");
		A = vericek_float(r, "aracPosR");
		id = vericek_int(r, "aracID");
		renk1 = vericek_int(r, "aracRenk1");
		renk2 = vericek_int(r, "aracRenk2");
		model = vericek_int(r, "aracModel");
		kiralik = vericek_int(r, "Kiralik");
		kirazaman = vericek_int(r, "KiraZaman");
		kiraucret = vericek_int(r, "KiraUcret");
		format(aracyazi, 128, "%s", vericek_varchar(r, "aracYazi"));
		aractur = vericek_int(r, "aracTur");
		arackilit = vericek_int(r, "aracKilit");
		aracpaintjob = vericek_int(r, "aracPaintjob");
		aracbirlik = vericek_int(r, "aracBirlik");
		aracsahip = vericek_int(r, "aracSahip");
		kilitseviyesi = vericek_int(r, "kilitseviye");
		araccalintisuresi = vericek_int(r, "araccalintisure");
		alarmseviyesi = vericek_int(r, "alarmseviye");
		aracSigortasi = vericek_int(r, "aracSigorta");
		Anahtar = vericek_int(r, "Anahtar");
        //AracBilgi[ii][aracOzelPlaka] = vericek_int(i, "aracOzelPlaka");
		aracWorldsi = vericek_int(r, "aracWorld");
		aracIntsi = vericek_int(r, "aracInt");
		aracMesleksi = vericek_int(r, "aracMeslek");
		aracKMsi = vericek_float(r, "aracKM");
		aracBenzinsi = vericek_float(r, "aracBenzin");
		aracFiyatsi = vericek_int(r, "aracFiyat");
		aracVergisi = vericek_int(r, "aracVergi");
		aracCezasi = vericek_int(r, "aracCeza");
		firma = vericek_int(r, "aracFirma");
		aracCansi = vericek_float(r, "araccan");
		format(aplaka, 12, "%s", vericek_varchar(r, "aracPlaka"));
		if(aracbirlik == 0)
		{
			arac = CreateVehicle(model, X, Y, Z, A, renk1, renk2, -1, 1);
		}
		else arac = CreateVehicle(model, X, Y, Z, A, renk1, renk2, -1);
		AracBilgi[arac][aracID] = id;
		AracBilgi[arac][aracYarat] = arac;
		AracBilgi[arac][aracKullanimda] = true;
		AracBilgi[arac][aracModel] = model;
		AracBilgi[arac][aracTur] = aractur;
		AracBilgi[arac][aracSahip] = aracsahip;
		AracBilgi[arac][aracSigorta] = aracSigortasi;
		AracBilgi[arac][kilitseviye] = kilitseviyesi;
		AracBilgi[arac][aracRadyoDurum] = false;
		AracBilgi[arac][araccalintisure] = araccalintisuresi;
		AracBilgi[arac][alarmseviye] = alarmseviyesi;
		AracBilgi[arac][aracPos][0] = X;
		AracBilgi[arac][aracPos][1] = Y;
		AracBilgi[arac][aracPos][2] = Z;
		AracBilgi[arac][aracPos][3] = A;
		AracBilgi[arac][aracRenk1] = renk1;
		AracBilgi[arac][aracRenk2] = renk2;
		AracBilgi[arac][aracPaintjob] = aracpaintjob;
		AracBilgi[arac][aracKilit] = arackilit;
		format(AracBilgi[arac][aracPlaka], 12, aplaka);
		format(AracBilgi[arac][aracYazi], 128, aracyazi);
		AracBilgi[arac][aracAnahtar] = Anahtar;
		AracBilgi[arac][aracMeslek] = aracMesleksi;
		AracBilgi[arac][aracKM] = aracKMsi;
		AracBilgi[arac][aracBenzin] = aracBenzinsi;
		AracBilgi[arac][aracFiyat] = aracFiyatsi;
		AracBilgi[arac][aracBirlik] = aracbirlik;
		AracBilgi[arac][aracFirma] = firma;
		AracBilgi[arac][aracCani] = aracCansi;
		for(new mod_i = 0; mod_i < 14; mod_i++){AracBilgi[arac][aracParca][mod_i] = 0;}
			new slotno[16], slotvarno[16];
		for(new ii = 1; ii < 5; ii++)
		{
			format(slotno, sizeof(slotno), "aSlot%d", ii);
			AracBilgi[arac][aracSlot][ii-1] = vericek_int(r, slotno);
		}
		for(new iii = 1; iii < 5; iii++)
		{
			format(slotvarno, sizeof(slotvarno), "aSlot%dVar", iii);
			AracBilgi[arac][aracSlotVar][iii-1] = vericek_int(r, slotvarno);
		}
		AracBilgi[arac][aracKiralik] = kiralik;
		AracBilgi[arac][aKiraZaman] = kirazaman;
		AracBilgi[arac][aKiraUcret] = kiraucret;
		AracBilgi[arac][aracInt] = aracIntsi;
		AracBilgi[arac][aracWorld] = aracWorldsi;
		AracBilgi[arac][aracVergi] = aracVergisi;
		AracBilgi[arac][aracCeza] = aracCezasi;

		for(new xxx = 0; xxx < 14; xxx++)
		{
			format(modstr, sizeof(modstr), "Parca_%d", xxx);
			AracBilgi[arac][aracParca][xxx] = vericek_int(r, modstr);
			if(AracBilgi[arac][aracParca][xxx] > 0) AddVehicleComponent(AracBilgi[arac][aracYarat], AracBilgi[arac][aracParca][xxx] );
		}

		Iter_Add(Araclar, arac);
		yukle++;

		Arac_Spawn(arac);
	    //printf("%d", ii);
	}
	if(rows < 1) format(mesaj, sizeof(mesaj), "[SUNUCU] Veritabanýnda sunucuya entegre edilecek araç bulunamadý!");
	else if(rows > 0) format(mesaj, sizeof(mesaj), "[SUNUCU] %d adet araç yüklendi.", rows);
	printf(mesaj);
	return 1;
}

function AracSpawnla(sqlid)
{
	new Cache:VeriCek, query[165], arac = 2000;
	mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `araclar` WHERE `aracID` = '%d'", sqlid);
	VeriCek = mysql_query(g_SQL, query);
	new rows = cache_num_rows();
	if(rows)
	{
		new modstr[256],
		Float:X,
		Float:Y,
		Float:Z,
		Float:A,
		model,
		renk1,
		renk2,
		aplaka[12],
		aracyazi[128],
		id,
		kiralik,
		kirazaman,
		kiraucret,
		arackilit,
		aracpaintjob,
		aracbirlik,
		aracsahip,
		aractur,
		kilitseviyesi,
		araccalintisuresi,
		alarmseviyesi,
		aracSigortasi,
		Anahtar,
		aracWorldsi,
		aracIntsi,
		aracMesleksi,
		Float:aracKMsi,
		Float:aracBenzinsi,
		aracFiyatsi,
		aracVergisi,
		aracCezasi,
		Float:aracCanix,
		firma, r = 0;

		X = vericek_float(r, "aracPosX");
		Y = vericek_float(r, "aracPosY");
		Z = vericek_float(r, "aracPosZ");
		A = vericek_float(r, "aracPosR");
		id = vericek_int(r, "aracID");
		renk1 = vericek_int(r, "aracRenk1");
		renk2 = vericek_int(r, "aracRenk2");
		model = vericek_int(r, "aracModel");
		kiralik = vericek_int(r, "Kiralik");
		kirazaman = vericek_int(r, "KiraZaman");
		kiraucret = vericek_int(r, "KiraUcret");
		format(aracyazi, 128, "%s", vericek_varchar(r, "aracYazi"));
		aractur = vericek_int(r, "aracTur");
		arackilit = vericek_int(r, "aracKilit");
		aracpaintjob = vericek_int(r, "aracPaintjob");
		aracbirlik = vericek_int(r, "aracBirlik");
		aracsahip = vericek_int(r, "aracSahip");
		kilitseviyesi = vericek_int(r, "kilitseviye");
		araccalintisuresi = vericek_int(r, "araccalintisure");
		alarmseviyesi = vericek_int(r, "alarmseviye");
		aracSigortasi = vericek_int(r, "aracSigorta");
		Anahtar = vericek_int(r, "Anahtar");
        //AracBilgi[ii][aracOzelPlaka] = vericek_int(i, "aracOzelPlaka");
		aracWorldsi = vericek_int(r, "aracWorld");
		aracIntsi = vericek_int(r, "aracInt");
		aracMesleksi = vericek_int(r, "aracMeslek");
		aracKMsi = vericek_float(r, "aracKM");
		aracBenzinsi = vericek_float(r, "aracBenzin");
		aracFiyatsi = vericek_int(r, "aracFiyat");
		aracVergisi = vericek_int(r, "aracVergi");
		aracCezasi = vericek_int(r, "aracCeza");
		firma = vericek_int(r, "aracFirma");
		aracCanix = vericek_float(r, "araccan");
		format(aplaka, 12, "%s", vericek_varchar(r, "aracPlaka"));

		arac = CreateVehicle(model, X, Y, Z, A, renk1, renk2, -1);
		AracBilgi[arac][aracID] = id;
		AracBilgi[arac][aracYarat] = arac;
		AracBilgi[arac][aracKullanimda] = true;
		AracBilgi[arac][aracModel] = model;
		AracBilgi[arac][aracTur] = aractur;
		AracBilgi[arac][aracSahip] = aracsahip;
		AracBilgi[arac][aracSigorta] = aracSigortasi;
		AracBilgi[arac][kilitseviye] = kilitseviyesi;
		AracBilgi[arac][araccalintisure] = araccalintisuresi;
		AracBilgi[arac][aracRadyoDurum] = false;
		AracBilgi[arac][alarmseviye] = alarmseviyesi;
		AracBilgi[arac][aracPos][0] = X;
		AracBilgi[arac][aracPos][1] = Y;
		AracBilgi[arac][aracPos][2] = Z;
		AracBilgi[arac][aracPos][3] = A;
		AracBilgi[arac][aracRenk1] = renk1;
		AracBilgi[arac][aracRenk2] = renk2;
		AracBilgi[arac][aracPaintjob] = aracpaintjob;
		AracBilgi[arac][aracKilit] = arackilit;
		format(AracBilgi[arac][aracPlaka], 12, aplaka);
		format(AracBilgi[arac][aracYazi], 128, aracyazi);
		AracBilgi[arac][aracAnahtar] = Anahtar;
		AracBilgi[arac][aracMeslek] = aracMesleksi;
		AracBilgi[arac][aracKM] = aracKMsi;
		AracBilgi[arac][aracBenzin] = aracBenzinsi;
		AracBilgi[arac][aracFiyat] = aracFiyatsi;
		AracBilgi[arac][aracBirlik] = aracbirlik;
		AracBilgi[arac][aracFirma] = firma;

		AracBilgi[arac][aracKiralik] = kiralik;
		AracBilgi[arac][aKiraZaman] = kirazaman;
		AracBilgi[arac][aKiraUcret] = kiraucret;
		AracBilgi[arac][aracInt] = aracIntsi;
		AracBilgi[arac][aracWorld] = aracWorldsi;
		AracBilgi[arac][aracVergi] = aracVergisi;
		AracBilgi[arac][aracCeza] = aracCezasi;
		AracBilgi[arac][aracCani] = aracCanix;

		SetVehicleHealth(AracBilgi[arac][aracYarat], AracBilgi[arac][aracCani]);

		for(new mod_i = 0; mod_i < 14; mod_i++){AracBilgi[arac][aracParca][mod_i] = 0;}

			for(new xxx = 0; xxx < 14; xxx++)
			{
				format(modstr, sizeof(modstr), "Parca_%d", xxx);
				AracBilgi[arac][aracParca][xxx] = vericek_int(r, modstr);
				if(AracBilgi[arac][aracParca][xxx] > 0) AddVehicleComponent(AracBilgi[arac][aracYarat], AracBilgi[arac][aracParca][xxx] );
			}
			new slotno[16], slotvarno[16];
			for(new ii = 1; ii < 5; ii++)
			{
				format(slotno, sizeof(slotno), "aSlot%d", ii);
				AracBilgi[arac][aracSlot][ii-1] = vericek_int(r, slotno);
			}
			for(new iii = 1; iii < 5; iii++)
			{
				format(slotvarno, sizeof(slotvarno), "aSlot%dVar", iii);
				AracBilgi[arac][aracSlotVar][iii-1] = vericek_int(r, slotvarno);
			}
			Iter_Add(Araclar, arac);

			Arac_Spawn(arac);
		}
		cache_delete(VeriCek);
		return arac;
	}

	stock AracVeriSifirla(arac)
	{
		AracBilgi[arac][aracID] = 0;
		AracBilgi[arac][aracYarat] = 0;
		AracBilgi[arac][aracKullanimda] = false;
		AracBilgi[arac][aracModel] = 0;
		AracBilgi[arac][aracTur] = 0;
		AracBilgi[arac][aracSahip] = 0;
		AracBilgi[arac][aracSigorta] = 0;
		AracBilgi[arac][kilitseviye] = 0;
		AracBilgi[arac][araccalintisure] = 0;
		AracBilgi[arac][aracRadyoDurum] = false;
		AracBilgi[arac][alarmseviye] = 0;
		AracBilgi[arac][aracPos][0] = 0.0;
		AracBilgi[arac][aracPos][1] = 0.0;
		AracBilgi[arac][aracPos][2] = 0.0;
		AracBilgi[arac][aracPos][3] = 0.0;
		AracBilgi[arac][aracRenk1] = 0;
		AracBilgi[arac][aracRenk2] = 0;
		AracBilgi[arac][aracPaintjob] = 0;
		AracBilgi[arac][aracKilit] = 0;
		format(AracBilgi[arac][aracPlaka], 12, "-");
		format(AracBilgi[arac][aracYazi], 128, "-");
		AracBilgi[arac][aracAnahtar] = 0;
		AracBilgi[arac][aracMeslek] = 0;
		AracBilgi[arac][aracKM] = 0;
		AracBilgi[arac][aracBenzin] = 0;
		AracBilgi[arac][aracFiyat] = 0;
		AracBilgi[arac][aracBirlik] = -1;
		AracBilgi[arac][aracFirma] = -1;

		AracBilgi[arac][aracKiralik] = 0;
		AracBilgi[arac][aKiraZaman] = 0;
		AracBilgi[arac][aKiraUcret] = 0;
		AracBilgi[arac][aracInt] = 0;
		AracBilgi[arac][aracWorld] = 0;
		AracBilgi[arac][aracVergi] = 0;
		AracBilgi[arac][aracCeza] = 0;
		return 1;
	}

	public Birlikleri_Yukle()
	{
		static rows, fields, mesaj[128];
		cache_get_row_count(rows);
		cache_get_field_count(fields);
		new i, yukle;
		while(yukle < rows)
		{
			i = vericek_int(yukle, "birlikID");
			BirlikBilgi[i][birlikID] = i;
			BirlikBilgi[i][birlikKullanimda] = true;
			format(BirlikBilgi[i][birlikAd], 32, "%s", vericek_varchar(yukle, "birlikAd"));
			BirlikBilgi[i][bDolapPos][0] = vericek_float(yukle, "bDolapX");
			BirlikBilgi[i][bDolapPos][1] = vericek_float(yukle, "bDolapY");
			BirlikBilgi[i][bDolapPos][2] = vericek_float(yukle, "bDolapZ");
			BirlikBilgi[i][birlikTur] = vericek_int(yukle, "birlikTur");
			BirlikBilgi[i][birlikAmaci] = vericek_int(yukle, "BirlikAmaci");
			BirlikBilgi[i][birlikOnay] = vericek_int(yukle, "birlikOnay");
			BirlikBilgi[i][bDolapInt] = vericek_int(yukle, "bDolapInt");
			BirlikBilgi[i][bDolapVW] = vericek_int(yukle, "bDolapVW");
			BirlikBilgi[i][birlikMaksRutbe] = vericek_int(yukle, "birlikMaksRutbe");
			BirlikBilgi[i][oKanal] = vericek_int(yukle, "oDurum");
			format(BirlikBilgi[i][birlikR1], 32, "%s", vericek_varchar(yukle, "birlikRutbe1"));
			format(BirlikBilgi[i][birlikR2], 32, "%s", vericek_varchar(yukle, "birlikRutbe2"));
			format(BirlikBilgi[i][birlikR3], 32, "%s", vericek_varchar(yukle, "birlikRutbe3"));
			format(BirlikBilgi[i][birlikR4], 32, "%s", vericek_varchar(yukle, "birlikRutbe4"));
			format(BirlikBilgi[i][birlikR5], 32, "%s", vericek_varchar(yukle, "birlikRutbe5"));
			format(BirlikBilgi[i][birlikR6], 32, "%s", vericek_varchar(yukle, "birlikRutbe6"));
			format(BirlikBilgi[i][birlikR7], 32, "%s", vericek_varchar(yukle, "birlikRutbe7"));
			format(BirlikBilgi[i][birlikR8], 32, "%s", vericek_varchar(yukle, "birlikRutbe8"));
			format(BirlikBilgi[i][birlikR9], 32, "%s", vericek_varchar(yukle, "birlikRutbe9"));
			format(BirlikBilgi[i][birlikR10], 32, "%s", vericek_varchar(yukle, "birlikRutbe10"));
			format(BirlikBilgi[i][birlikR11], 32, "%s", vericek_varchar(yukle, "birlikRutbe11"));
			format(BirlikBilgi[i][birlikR12], 32, "%s", vericek_varchar(yukle, "birlikRutbe12"));
			format(BirlikBilgi[i][birlikR13], 32, "%s", vericek_varchar(yukle, "birlikRutbe13"));
			format(BirlikBilgi[i][birlikR14], 32, "%s", vericek_varchar(yukle, "birlikRutbe14"));
			format(BirlikBilgi[i][birlikR15], 32, "%s", vericek_varchar(yukle, "birlikRutbe15"));
			format(BirlikBilgi[i][birlikR16], 32, "%s", vericek_varchar(yukle, "birlikRutbe16"));
			format(BirlikBilgi[i][birlikR17], 32, "%s", vericek_varchar(yukle, "birlikRutbe17"));
			format(BirlikBilgi[i][birlikR18], 32, "%s", vericek_varchar(yukle, "birlikRutbe18"));
			format(BirlikBilgi[i][birlikR19], 32, "%s", vericek_varchar(yukle, "birlikRutbe19"));
			format(BirlikBilgi[i][birlikR20], 32, "%s", vericek_varchar(yukle, "birlikRutbe20"));
			BirlikBilgi[i][birlikLevel] = vericek_int(yukle, "Level");
			format(BirlikBilgi[i][birlikDuyuru], 48, "%s", vericek_varchar(yukle, "Duyuru"));
			format(BirlikBilgi[i][birlikkisaltma], 9, "%s", vericek_varchar(yukle, "birlikKisaltma"));
			BirlikBilgi[i][birlikaraci] = vericek_int(yukle, "BirlikAraci");
			BirlikBilgi[i][birlikisyeri] = vericek_int(yukle, "BirlikIsyeri");
			Iter_Add(Birlikler, i);
			Birlik_Yenile(i);
			yukle++;
		}
		if(rows < 1) format(mesaj, sizeof(mesaj), "[SUNUCU] Veritabanýnda sunucuya entegre edilecek birlik bulunamadý!");
		else if(rows > 0) format(mesaj, sizeof(mesaj), "[SUNUCU] %d adet birlik yüklendi.", rows);
		printf(mesaj);
		return 1;
	}

	public pdaractamir(playerid, aracid)
	{
		if(IsPlayerConnected(playerid)) {
			AracTamirEt(aracid);
			TogglePlayerControllable(playerid, true);
		}
		return 1;
	}

	public aractamir(playerid, aracid, slot, ucret)
	{
		PaynSpray[slot] = false;
		if(IsPlayerConnected(playerid)) {
			new id = Arac_IDBul(aracid);
			AracTamirEt(aracid);
			TogglePlayerControllable(playerid, true);
			if(AracBilgi[id][aracBirlik] > -1) {
				static aracbirlik;
				aracbirlik = BirlikIDBul(AracBilgi[id][aracBirlik]);
				if(BirlikBilgi[aracbirlik][birlikTur] == BIRLIK_POLIS || BirlikBilgi[aracbirlik][birlikTur] == BIRLIK_MEDIKAL || BirlikBilgi[aracbirlik][birlikTur] == BIRLIK_DEVLET)
					return SunucuMesaji(playerid, "Devlet aracýný tamir ettirdiðiniz için ücret alýnmadý.");

				SunucuMesaji(playerid, "Aracýný tamir ettirmek için %d$ ödediniz.", ucret);
				ParaEkle(playerid, -ucret);
			}
			else {
				SunucuMesaji(playerid, "Aracýný tamir ettirmek için %d$ ödediniz.", ucret);
				ParaEkle(playerid, -ucret);
			}
		}
		return 1;
	}

	public AnkesorYaratildi(id)
	{
		static query[2056];
		mysql_format(g_SQL, query, sizeof(query), "UPDATE `atelefon` SET `x` = '%.4f', `y` = '%.4f', `z` = '%.4f', `rx` = '%.4f', `ry` = '%.4f', `rz` = '%.4f', `vw` = '%d', `interior` = '%d', `numara` = '%d' WHERE `id` = '%d'",
			AnkesorInfo[id][aX],
			AnkesorInfo[id][aY],
			AnkesorInfo[id][aZ],
			AnkesorInfo[id][arX],
			AnkesorInfo[id][arY],
			AnkesorInfo[id][arZ],
			AnkesorInfo[id][aVw],
			AnkesorInfo[id][aInt],
			AnkesorInfo[id][aNumara],
			id
			);
		return mysql_tquery(g_SQL, query);
	}


	public EtkiSifirla(playerid)
	{
		SetPlayerWeather(playerid, 0);
		if(oyuncuData[playerid][oAclik] > 0 && oyuncuData[playerid][oSusuzluk] > 0) SetPlayerDrunkLevel(playerid, 0);
		return 1;
	}

	public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
	{
	    if(MDC_Ekrani[playerid] == true)
	    {
			if(playertextid == MDC[6][playerid])
			{
			    ShowPlayerDialog(playerid, PDPC_ISIMSORGU, DIALOG_STYLE_INPUT, MDC_BASLIK, "Sorgulanacak kiþinin adýný ve soy adýný girin:", "Sorgula", "");
			}
			else if(playertextid == MDC[47][playerid])
			{
			    ShowPlayerDialog(playerid, PDPC_BOLOKAYIT, DIALOG_STYLE_LIST, MDC_BASLIK, "BOLO>:\t {CDCDCD}Yeni kayýt oluþtur++\nBOLO>:\t {CDCDCD}Kayýt listesini göster", "Devam", "Iptal");
	  		}
			else if(playertextid == MDC[7][playerid])
			{
		        ShowPlayerDialog(playerid, PDPC_PLAKASORGU, DIALOG_STYLE_INPUT, MDC_BASLIK, "Sorgulanacak plakayý eksiksiz ve doðru biçimde girin:", "Sorgula", "");
			}
			else if(playertextid == MDC[34][playerid])
		 	{
		 	    pdpc_sayfa[playerid] = 0;
		 	    Sicil_Kayitlari(playerid, VCPD_KontrolStr[playerid], 0);
		 	}
		 	else if(playertextid == MDC[12][playerid])
		 	{
		 	    cmd(playerid, 0, "destek");
		 	}
		 	else if(playertextid == MDC[10][playerid])
          	{
              ShowPlayerDialog(playerid, PDPC_ARANANLAR, DIALOG_STYLE_LIST, MDC_BASLIK, "APB>:\t {CDCDCD}Yeni kayýt oluþtur++\nAPB>:\t {CDCDCD}Aranan listesini göster", "Devam", "Iptal");
          	}
		 	else if(playertextid == MDC[11][playerid])
		 	{
				if(oyuncuData[playerid][oBirlikRutbe] < 5) return hataMesaji(playerid, "Bu fonksiyonu kullanabilmek için yeterli rütbede deðilsiniz."), SelectTextDraw(playerid, 0xFF0000FF);
				if(oyuncuData[playerid][oIsbasi] == false) return hataMesaji(playerid, "Ýþbaþý yapmalýsýnýz.");
				if(GISEKAPALI == 0)
				{
					SelectTextDraw(playerid, 0xFF0000FF);
					GISEKAPALI = 1;
					BirlikTelsizMesaji(oyuncuData[playerid][oBirlik], RENK_TAN, "** [VCPD HQ]: %s adlý polis memuru giþeleri araç geçiþlerine kapattý.", OyuncuIsim(playerid));
				}
				else if(GISEKAPALI == 1)
				{
					SelectTextDraw(playerid, 0xFF0000FF);
					GISEKAPALI = 0;
					BirlikTelsizMesaji(oyuncuData[playerid][oBirlik], RENK_TAN, "** [VCPD HQ]: %s adlý polis memuru giþeleri araç geçiþlerine açtý.", OyuncuIsim(playerid));
				}
				PlayerPlaySound(playerid, 6400, 0.0, 0.0, 0.0);
   			}
			else if(playertextid == MDC[13][playerid])
		 	{
				PlayerPlaySound(playerid, 6400, 0.0, 0.0, 0.0);
				if(gDashCam{playerid} == 0)
				{
					SunucuMesaji(playerid, "Dash-Cam aktif hale getirildi.");
					gDashCamCheck[playerid] = SetTimerEx ("UpdateDashCam", dcam_UpdateRate, true, "i", playerid);
					gDashCam{playerid} = 1;
					ShowDashCam(playerid);
				}
				else if(gDashCam{playerid} == 1)
				{
					SunucuMesaji(playerid, "Dash-Cam kapalý duruma getirildi.");
					KillTimer(gDashCamCheck[playerid]);
					gDashCamAuto{playerid} = 0;
					gDashCam{playerid} = 0;
					HideDashCam(playerid);
				}
		 	}
		 	else if(playertextid == MDC[8][playerid])
		 	{
	        	ShowPlayerDialog(playerid, PDPC_EVSORGULA, DIALOG_STYLE_INPUT, MDC_BASLIK, "Sorgulanacak evin kapý numarasýný eksiksiz ve doðru biçimde girin:", "Sorgula", "");
		 	}
		 	else if(playertextid == MDC[9][playerid])
		 	{
	        	ShowPlayerDialog(playerid, PDPC_ISSORGULA, DIALOG_STYLE_INPUT, MDC_BASLIK, "Sorgulanacak iþyerinin kapý numarasýný eksiksiz ve doðru biçimde girin:", "Sorgula", "");
		 	}
		 	else if(playertextid == MDC[41][playerid])
			{
				new query[256], Cache:VeriGetir, rows;
				mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `evler` WHERE `evID` = '%d'", MDC_GenelID[playerid]);
				VeriGetir = mysql_query(g_SQL, query);
				rows = cache_num_rows();
				if(rows)
				{
				    new Float:mdc_Pos[4];
				    cache_get_value_name_float(0, "evPosX", mdc_Pos[0]);
				    cache_get_value_name_float(0, "evPosY", mdc_Pos[1]);
				    cache_get_value_name_float(0, "evPosZ", mdc_Pos[2]);

				    SetPlayerCheckpoint(playerid, mdc_Pos[0], mdc_Pos[1], mdc_Pos[2], 2.0);
				    ShowPlayerDialog(playerid, BOS_MESAJ, DIALOG_STYLE_MSGBOX, MDC_BASLIK, "{FFFFFF}Ev konumu GPS haritanýzda iþaretlendi.", "Kapat", "");
				}
				cache_delete(VeriGetir);
		 	}
		 	else if(playertextid == MDC[46][playerid])
			{
				new query[256], Cache:VeriGetir, rows;
				mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `isyerleri` WHERE `isyeriID` = '%d'", MDC_GenelID[playerid]);
				VeriGetir = mysql_query(g_SQL, query);
				rows = cache_num_rows();
				if(rows)
				{
				    new Float:mdc_Pos[4];
				    cache_get_value_name_float(0, "isyeriPosX", mdc_Pos[0]);
				    cache_get_value_name_float(0, "isyeriPosY", mdc_Pos[1]);
				    cache_get_value_name_float(0, "isyeriPosZ", mdc_Pos[2]);

				    SetPlayerCheckpoint(playerid, mdc_Pos[0], mdc_Pos[1], mdc_Pos[2], 2.0);
				    ShowPlayerDialog(playerid, BOS_MESAJ, DIALOG_STYLE_MSGBOX, MDC_BASLIK, "{FFFFFF}Iþyeri konumu GPS haritanýzda iþaretlendi.", "Kapat", "");
				}
				cache_delete(VeriGetir);
		 	}
		 	else if(playertextid == MDC[36][playerid])
		 	{
	            ShowPlayerDialog(playerid, PDPC_NOSORGULA, DIALOG_STYLE_INPUT, MDC_BASLIK, "Sorgulanacak numarayý eksiksiz ve doðru biçimde girin:", "Sorgula", "");
		 	}
		 	else if(playertextid == MDC[33][playerid])
		 	{
				new query[128], Cache:kontrolettir;
				mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `araclar` WHERE `aracPlaka` = '%e'", VCPD_KontrolStr[playerid]);
				kontrolettir = mysql_query(g_SQL, query);
				new rows = cache_num_rows();
				if(rows)
				{
				    if(vericek_int(0, "aranma") == 0)
				    {
						PlayerTextDrawSetString(playerid, MDC[35][playerid], "ARANMA STATUSU: ~r~ARANIYOR");
						mysql_format(g_SQL, query, sizeof(query), "UPDATE `araclar` SET `aranma` = '1' WHERE `aracPlaka` = '%e'", VCPD_KontrolStr[playerid]);
		  			}
		  			else
		  			{
		  			    PlayerTextDrawSetString(playerid, MDC[35][playerid], "ARANMA STATUSU: ARANMIYOR");
						mysql_format(g_SQL, query, sizeof(query), "UPDATE `araclar` SET `aranma` = '0' WHERE `aracPlaka` = '%e'", VCPD_KontrolStr[playerid]);
					}
					mysql_query(g_SQL, query);
				}
				cache_delete(kontrolettir);
		 	}
			else if(playertextid == MDC[32][playerid])
			{
			    AracSicil_Kayitlari(playerid, VCPD_KontrolStr[playerid]);
		 	}
			else if(playertextid == MDC[23][playerid])
			{
			    IsimSicil_Kayitlari(playerid, VCPD_KontrolStr[playerid]);
		 	}
	 	}
		if(playertextid == tarim9[playerid])
	    {
		for(new i = 0; i < 9; i++) {
		TextDrawHideForPlayer(playerid, tarim[i]);
		}
		PlayerTextDrawHide(playerid, tarim9[playerid]); 
		CancelSelectTextDraw( playerid );
		}
		if( playertextid == AracModifye[ playerid ][ 1 ] ) {

			if( TPInfo[ playerid ][ tPaintjob ] == false ) {

				new compid = -1, vehicleid = GetPVarInt(playerid, "modifiyecomparac");

				for( new i = ( TPInfo[ playerid ][ tID ]+1 ); i < MAX_PARCA; i++ ) {
					if( cInfo[ i ][ cTip ] == TPInfo[ playerid ][ tType ] ) {
						if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
							compid = i;
							break;
						}
					}
				}
				if( compid == -1 ) return hataMesaji( playerid, "Daha fazla ileri gidemezsiniz." );

				RemoveVehicleComponent( vehicleid, cInfo[ TPInfo[ playerid ][ tID ] ][ cID ] );

				TPInfo[ playerid ][ tID ] = compid;

				format( globalstring, sizeof( globalstring ), "%s", cInfo[ compid ][ cIsim ] );
				PlayerTextDrawSetString( playerid, AracModifye[ playerid ][ 3 ], globalstring );
				format( globalstring, sizeof( globalstring ), "%d$", cInfo[ compid ][ cFiyat ] );
				PlayerTextDrawSetString( playerid, AracModifye[ playerid ][ 6 ], globalstring );

				AddVehicleComponent( vehicleid, cInfo[ compid ][ cID ] );

				SelectTextDraw( playerid, RENK_DO );
			}
		}
		if( playertextid == AracModifye[ playerid ][ 2 ] ) {
			if( TPInfo[ playerid ][ tPaintjob ] == false ) {

				new compid = -1, vehicleid = GetPVarInt(playerid, "modifiyecomparac");

				for( new i = (TPInfo[ playerid ][ tID ]-1); i > 0; i-- ) {
					if( cInfo[ i ][ cTip ] == TPInfo[ playerid ][ tType ] ) {
						if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
							compid = i;
							break;
						}
					}
				}
				if( compid == -1 ) return hataMesaji( playerid, "Daha fazla geri gidemezsiniz." );

				RemoveVehicleComponent( vehicleid, cInfo[ TPInfo[ playerid ][ tID ] ][ cID ] );

				TPInfo[ playerid ][ tID ] = compid;

				format( globalstring, sizeof( globalstring ), "%s", cInfo[ compid ][ cIsim ] );
				PlayerTextDrawSetString( playerid, AracModifye[ playerid ][ 3 ], globalstring );
				format( globalstring, sizeof( globalstring ), "%d$", cInfo[ compid ][ cFiyat ] );
				PlayerTextDrawSetString( playerid, AracModifye[ playerid ][ 6 ], globalstring );

				AddVehicleComponent( vehicleid, cInfo[ compid ][ cID ] );

				SelectTextDraw( playerid, RENK_DO );
			}
		}
		if( playertextid == AracModifye[ playerid ][ 4 ] ) {

			new Float:Pos[ 6 ], vehicleid = GetPVarInt(playerid, "modifiyecomparac"), query[120];

			if( TPInfo[ playerid ][ tPaintjob ] == false ) {

				if( oyuncuData[playerid][oPara] < cInfo[ TPInfo[ playerid ][ tID ] ][ cFiyat ] ) return hataMesaji(playerid, "Yeterli paranýz bulunmamaktadýr.");

				new cid = TPInfo[ playerid ][ tID ];

				RemoveVehicleComponent( vehicleid, cInfo[ TPInfo[ playerid ][ tID ] ][ cID ] );

				format(query, sizeof(query), "** %s önündeki araca doðru yönelir ve uðraþmaya baþlar.", OyuncuIsim(playerid));
				ProxDetector(12, playerid, query, RENK_PEMBE);
				SetTimerEx("aracmodifiye", 20000, false, "iddd", playerid, cInfo[ TPInfo[ playerid ][ tID ] ][ cFiyat ] , vehicleid, cInfo[ cid ][ cID ]);
				TogglePlayerControllable(playerid, false);
				GameTextForPlayer(playerid, "~w~MODIFIYE YAPILIYOR...", 1200000, 4);
			}
			GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 0, 6, 2 );
			SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

			GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
			SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

			CancelSelectTextDraw( playerid );

			TuningTDControl( playerid, false );

		}
		if( playertextid == AracModifye[ playerid ][ 5 ] ) {

			new Float:Pos[ 6 ], vehicleid = GetPVarInt(playerid, "modifiyecomparac");

			if( TPInfo[ playerid ][ tPaintjob ] == false ) {

				RemoveVehicleComponent( vehicleid, cInfo[ TPInfo[ playerid ][ tID ] ][ cID ] );
			}
			GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 0, 6, 2 );
			SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

			GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
			SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
			ShowPlayerDialog(playerid, DIALOG_ARACMOD, DIALOG_STYLE_LIST, "Modifiye Parçalarý", "Egzos\nÖn Tampon\nArka Tampon\nTavan\nRüzgarlýk\nYan Etekler\nJantlar\nStereo\nHidrolik\nNitro", "Seç", "Iptal");

			CancelSelectTextDraw( playerid );

			TuningTDControl( playerid, false );
			TogglePlayerControllable( playerid, true );
		}
		
		if (playertextid == yetenekdraw[playerid][19])
		{
			if(oyuncuData[playerid][oYetenekPuani] < 1) return hataMesaji(playerid, "Yetenek puanýnýz yok.");
			if(oyuncuData[playerid][oLiderlikYetenek] == 10) return hataMesaji(playerid, "Bu yeteneði daha fazla yükseltemezsin.");
			new string[128];
			oyuncuData[playerid][oYetenekPuani]--;
			format(string, sizeof(string), "%d", oyuncuData[playerid][oYetenekPuani]);
			PlayerTextDrawSetString(playerid, yetenekdraw[playerid][17], string);
			oyuncuData[playerid][oLiderlikYetenekEXP]++;
			if(oyuncuData[playerid][oYetenekPuani] < 1)
			{
				PlayerTextDrawHide(playerid, yetenekdraw[playerid][19]);
				PlayerTextDrawHide(playerid, yetenekdraw[playerid][20]);
				PlayerTextDrawHide(playerid, yetenekdraw[playerid][21]);
				PlayerTextDrawHide(playerid, yetenekdraw[playerid][22]);
				PlayerTextDrawHide(playerid, yetenekdraw[playerid][23]);
				PlayerTextDrawHide(playerid, yetenekdraw[playerid][24]);
				PlayerTextDrawHide(playerid, yetenekdraw[playerid][25]);
			}
			format(string, sizeof(string), "%d/3", oyuncuData[playerid][oLiderlikYetenekEXP]);
			PlayerTextDrawSetString(playerid, yetenekdraw[playerid][1], string);
			SunucuMesaji(playerid, "Bir yetenek puanýný liderliðe verdin.", oyuncuData[playerid][oLiderlikYetenekEXP]);
			new yetenekstring[32];
			format(yetenekstring, sizeof yetenekstring, "%d", oyuncuData[playerid][oYetenekPuani]);
			PlayerTextDrawSetString(playerid, sagaltdraw[playerid][3], yetenekstring);
			if(oyuncuData[playerid][oLiderlikYetenekEXP] == 3)
			{
				oyuncuData[playerid][oLiderlikYetenekEXP] = 0;
				oyuncuData[playerid][oLiderlikYetenek]++;
				format(string, sizeof(string), "%d/3", oyuncuData[playerid][oLiderlikYetenekEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][1], string);
				format(string, sizeof(string), "%d", oyuncuData[playerid][oLiderlikYetenek]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][9], string);
				SunucuMesaji(playerid, "Liderlik yeteneðiniz yükseldi! Yeni liderlik seviyeniz: %d", oyuncuData[playerid][oLiderlikYetenek]);
			}
		}
		if (playertextid == yetenekdraw[playerid][20])
		{
			if(oyuncuData[playerid][oYetenekPuani] < 1) return hataMesaji(playerid, "Yetenek puanýnýz yok.");
			if(oyuncuData[playerid][oHirsizlikYetenek] == 10) return hataMesaji(playerid, "Bu yeteneði daha fazla yükseltemezsin.");
			new string[128];
			oyuncuData[playerid][oYetenekPuani]--;
			format(string, sizeof(string), "%d", oyuncuData[playerid][oYetenekPuani]);
			PlayerTextDrawSetString(playerid, yetenekdraw[playerid][17], string);
			oyuncuData[playerid][oHirsizlikYetenekEXP]++;
			if(oyuncuData[playerid][oYetenekPuani] < 1)
			{
				PlayerTextDrawHide(playerid, yetenekdraw[playerid][19]);
				PlayerTextDrawHide(playerid, yetenekdraw[playerid][20]);
				PlayerTextDrawHide(playerid, yetenekdraw[playerid][21]);
				PlayerTextDrawHide(playerid, yetenekdraw[playerid][22]);
				PlayerTextDrawHide(playerid, yetenekdraw[playerid][23]);
				PlayerTextDrawHide(playerid, yetenekdraw[playerid][24]);
				PlayerTextDrawHide(playerid, yetenekdraw[playerid][25]);
			}
			format(string, sizeof(string), "%d/3", oyuncuData[playerid][oHirsizlikYetenekEXP]);
			PlayerTextDrawSetString(playerid, yetenekdraw[playerid][2], string);
			SunucuMesaji(playerid, "Bir yetenek puanýný hýrsýzlýða verdin.", oyuncuData[playerid][oHirsizlikYetenekEXP]);
			new yetenekstring[32];
			format(yetenekstring, sizeof yetenekstring, "%d", oyuncuData[playerid][oYetenekPuani]);
			PlayerTextDrawSetString(playerid, sagaltdraw[playerid][3], yetenekstring);
			if(oyuncuData[playerid][oHirsizlikYetenekEXP] == 3)
			{
				oyuncuData[playerid][oHirsizlikYetenekEXP] = 0;
				oyuncuData[playerid][oHirsizlikYetenek]++;
				format(string, sizeof(string), "%d/3", oyuncuData[playerid][oHirsizlikYetenekEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][2], string);
				format(string, sizeof(string), "%d", oyuncuData[playerid][oHirsizlikYetenek]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][10], string);
				SunucuMesaji(playerid, "Hýrsýzlýk yeteneðiniz yükseldi! Yeni hýrsýzlýk seviyeniz: %d", oyuncuData[playerid][oHirsizlikYetenek]);
			}
		}
		if (playertextid == yetenekdraw[playerid][21])
		{
			if(oyuncuData[playerid][oYetenekPuani] < 1) return hataMesaji(playerid, "Yetenek puanýnýz yok.");
			if(oyuncuData[playerid][oSurusYetenek] == 10) return hataMesaji(playerid, "Bu yeteneði daha fazla yükseltemezsin.");
			new string[128];
			oyuncuData[playerid][oYetenekPuani]--;
			format(string, sizeof(string), "%d", oyuncuData[playerid][oYetenekPuani]);
			PlayerTextDrawSetString(playerid, yetenekdraw[playerid][17], string);
			oyuncuData[playerid][oSurusYetenekEXP]++;
			if(oyuncuData[playerid][oYetenekPuani] < 1)
			{
				PlayerTextDrawHide(playerid, yetenekdraw[playerid][19]);
				PlayerTextDrawHide(playerid, yetenekdraw[playerid][20]);
				PlayerTextDrawHide(playerid, yetenekdraw[playerid][21]);
				PlayerTextDrawHide(playerid, yetenekdraw[playerid][22]);
				PlayerTextDrawHide(playerid, yetenekdraw[playerid][23]);
				PlayerTextDrawHide(playerid, yetenekdraw[playerid][24]);
				PlayerTextDrawHide(playerid, yetenekdraw[playerid][25]);
			}
			format(string, sizeof(string), "%d/3", oyuncuData[playerid][oSurusYetenekEXP]);
			PlayerTextDrawSetString(playerid, yetenekdraw[playerid][3], string);
			SunucuMesaji(playerid, "Bir yetenek puanýný sürüþe verdin.", oyuncuData[playerid][oSurusYetenekEXP]);
			new yetenekstring[32];
			format(yetenekstring, sizeof yetenekstring, "%d", oyuncuData[playerid][oYetenekPuani]);
			PlayerTextDrawSetString(playerid, sagaltdraw[playerid][3], yetenekstring);
			if(oyuncuData[playerid][oSurusYetenekEXP] == 3)
			{
				oyuncuData[playerid][oSurusYetenekEXP] = 0;
				oyuncuData[playerid][oSurusYetenek]++;
				format(string, sizeof(string), "%d/3", oyuncuData[playerid][oSurusYetenekEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][3], string);
				format(string, sizeof(string), "%d", oyuncuData[playerid][oSurusYetenek]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][11], string);
				SunucuMesaji(playerid, "Sürüþ yeteneðiniz yükseldi! Yeni sürüþ seviyeniz: %d", oyuncuData[playerid][oSurusYetenek]);
			}
		}
		if (playertextid == yetenekdraw[playerid][22])
		{
			if(oyuncuData[playerid][oYetenekPuani] < 1) return hataMesaji(playerid, "Yetenek puanýnýz yok.");
			if(oyuncuData[playerid][oUretimYetenek] == 10) return hataMesaji(playerid, "Bu yeteneði daha fazla yükseltemezsin.");
			new string[128];
			oyuncuData[playerid][oYetenekPuani]--;
			format(string, sizeof(string), "%d", oyuncuData[playerid][oYetenekPuani]);
			PlayerTextDrawSetString(playerid, yetenekdraw[playerid][17], string);
			oyuncuData[playerid][oUretimYetenekEXP]++;
			if(oyuncuData[playerid][oYetenekPuani] < 1)
			{
				PlayerTextDrawHide(playerid, yetenekdraw[playerid][19]);
				PlayerTextDrawHide(playerid, yetenekdraw[playerid][20]);
				PlayerTextDrawHide(playerid, yetenekdraw[playerid][21]);
				PlayerTextDrawHide(playerid, yetenekdraw[playerid][22]);
				PlayerTextDrawHide(playerid, yetenekdraw[playerid][23]);
				PlayerTextDrawHide(playerid, yetenekdraw[playerid][24]);
				PlayerTextDrawHide(playerid, yetenekdraw[playerid][25]);
			}
			format(string, sizeof(string), "%d/3", oyuncuData[playerid][oUretimYetenekEXP]);
			PlayerTextDrawSetString(playerid, yetenekdraw[playerid][4], string);
			SunucuMesaji(playerid, "Bir yetenek puanýný üretime verdin.", oyuncuData[playerid][oUretimYetenekEXP]);
			new yetenekstring[32];
			format(yetenekstring, sizeof yetenekstring, "%d", oyuncuData[playerid][oYetenekPuani]);
			PlayerTextDrawSetString(playerid, sagaltdraw[playerid][3], yetenekstring);
			if(oyuncuData[playerid][oUretimYetenekEXP] == 3)
			{
				oyuncuData[playerid][oUretimYetenekEXP] = 0;
				oyuncuData[playerid][oUretimYetenek]++;
				format(string, sizeof(string), "%d/3", oyuncuData[playerid][oUretimYetenekEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][4], string);
				format(string, sizeof(string), "%d", oyuncuData[playerid][oUretimYetenek]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][12], string);
				SunucuMesaji(playerid, "Üretim yeteneðiniz yükseldi! Yeni üretim seviyeniz: %d", oyuncuData[playerid][oUretimYetenek]);
			}
		}
		if (playertextid == yetenekdraw[playerid][23])
		{
			if(oyuncuData[playerid][oYetenekPuani] < 1) return hataMesaji(playerid, "Yetenek puanýnýz yok.");
			if(oyuncuData[playerid][oGucYetenek] == 20) return hataMesaji(playerid, "Bu yeteneði daha fazla yükseltemezsin.");
			new string[128];
			oyuncuData[playerid][oYetenekPuani]--;
			format(string, sizeof(string), "%d", oyuncuData[playerid][oYetenekPuani]);
			PlayerTextDrawSetString(playerid, yetenekdraw[playerid][17], string);
			oyuncuData[playerid][oGucYetenekEXP] += 750;
			if(oyuncuData[playerid][oYetenekPuani] < 1)
			{
				PlayerTextDrawHide(playerid, yetenekdraw[playerid][19]);
				PlayerTextDrawHide(playerid, yetenekdraw[playerid][20]);
				PlayerTextDrawHide(playerid, yetenekdraw[playerid][21]);
				PlayerTextDrawHide(playerid, yetenekdraw[playerid][22]);
				PlayerTextDrawHide(playerid, yetenekdraw[playerid][23]);
				PlayerTextDrawHide(playerid, yetenekdraw[playerid][24]);
				PlayerTextDrawHide(playerid, yetenekdraw[playerid][25]);
			}
			if(oyuncuData[playerid][oGucYetenek] == 0)
			{
				format(string, sizeof(string), "%d/1000", oyuncuData[playerid][oGucYetenekEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
			}
			else if(oyuncuData[playerid][oGucYetenek] == 1)
			{
				format(string, sizeof(string), "%d/2000", oyuncuData[playerid][oGucYetenekEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
			}
			else if(oyuncuData[playerid][oGucYetenek] == 2)
			{
				format(string, sizeof(string), "%d/3000", oyuncuData[playerid][oGucYetenekEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
			}
			else if(oyuncuData[playerid][oGucYetenek] == 3)
			{
				format(string, sizeof(string), "%d/4000", oyuncuData[playerid][oGucYetenekEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
			}
			else if(oyuncuData[playerid][oGucYetenek] == 4)
			{
				format(string, sizeof(string), "%d/5000", oyuncuData[playerid][oGucYetenekEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
			}
			else if(oyuncuData[playerid][oGucYetenek] == 5)
			{
				format(string, sizeof(string), "%d/6000", oyuncuData[playerid][oGucYetenekEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
			}
			else if(oyuncuData[playerid][oGucYetenek] == 6)
			{
				format(string, sizeof(string), "%d/7000", oyuncuData[playerid][oGucYetenekEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
			}
			else if(oyuncuData[playerid][oGucYetenek] == 7)
			{
				format(string, sizeof(string), "%d/8000", oyuncuData[playerid][oGucYetenekEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
			}
			else if(oyuncuData[playerid][oGucYetenek] == 8)
			{
				format(string, sizeof(string), "%d/9000", oyuncuData[playerid][oGucYetenekEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
			}
			else if(oyuncuData[playerid][oGucYetenek] == 9)
			{
				format(string, sizeof(string), "%d/10000", oyuncuData[playerid][oGucYetenekEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
			}
			else if(oyuncuData[playerid][oGucYetenek] == 10)
			{
				format(string, sizeof(string), "%d/11000", oyuncuData[playerid][oGucYetenekEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
			}
			else if(oyuncuData[playerid][oGucYetenek] == 11)
			{
				format(string, sizeof(string), "%d/12000", oyuncuData[playerid][oGucYetenekEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
			}
			else if(oyuncuData[playerid][oGucYetenek] == 12)
			{
				format(string, sizeof(string), "%d/13000", oyuncuData[playerid][oGucYetenekEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
			}
			else if(oyuncuData[playerid][oGucYetenek] == 13)
			{
				format(string, sizeof(string), "%d/14000", oyuncuData[playerid][oGucYetenekEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
			}
			else if(oyuncuData[playerid][oGucYetenek] == 14)
			{
				format(string, sizeof(string), "%d/15000", oyuncuData[playerid][oGucYetenekEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
			}
			else if(oyuncuData[playerid][oGucYetenek] == 15)
			{
				format(string, sizeof(string), "%d/16000", oyuncuData[playerid][oGucYetenekEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
			}
			else if(oyuncuData[playerid][oGucYetenek] == 16)
			{
				format(string, sizeof(string), "%d/17000", oyuncuData[playerid][oGucYetenekEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
			}
			else if(oyuncuData[playerid][oGucYetenek] == 17)
			{
				format(string, sizeof(string), "%d/18000", oyuncuData[playerid][oGucYetenekEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
			}
			else if(oyuncuData[playerid][oGucYetenek] == 18)
			{
				format(string, sizeof(string), "%d/19000", oyuncuData[playerid][oGucYetenekEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
			}
			else if(oyuncuData[playerid][oGucYetenek] == 19)
			{
				format(string, sizeof(string), "%d/20000", oyuncuData[playerid][oGucYetenekEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
			}
			else if(oyuncuData[playerid][oGucYetenek] == 20)
			{
				format(string, sizeof(string), "MAX");
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
			}
			SunucuMesaji(playerid, "Bir yetenek puanýný kas gücüne verdin.", oyuncuData[playerid][oGucYetenekEXP]);
			new yetenekstring[32];
			format(yetenekstring, sizeof yetenekstring, "%d", oyuncuData[playerid][oYetenekPuani]);
			PlayerTextDrawSetString(playerid, sagaltdraw[playerid][3], yetenekstring);
			if(oyuncuData[playerid][oGucYetenekEXP] > 999 && oyuncuData[playerid][oGucYetenek] < 1)
			{
				oyuncuData[playerid][oGucYetenekEXP] -= 1000;
				oyuncuData[playerid][oGucYetenek] ++;
				format(string, sizeof(string), "%d/2000", oyuncuData[playerid][oGucYetenekEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
				format(string, sizeof(string), "%d", oyuncuData[playerid][oGucYetenek]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][13], string);
				SunucuMesaji(playerid, "Kas gücü yeteneðiniz yükseldi! Yeni kas gücü seviyeniz: %d", oyuncuData[playerid][oGucYetenek]);
			}
			if(oyuncuData[playerid][oGucYetenekEXP] > 1999 && oyuncuData[playerid][oGucYetenek] < 2)
			{
				oyuncuData[playerid][oGucYetenekEXP] -= 2000;
				oyuncuData[playerid][oGucYetenek] ++;
				format(string, sizeof(string), "%d/3000", oyuncuData[playerid][oGucYetenekEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
				format(string, sizeof(string), "%d", oyuncuData[playerid][oGucYetenek]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][13], string);
				SunucuMesaji(playerid, "Kas gücü yeteneðiniz yükseldi! Yeni kas gücü seviyeniz: %d", oyuncuData[playerid][oGucYetenek]);
			}
			if(oyuncuData[playerid][oGucYetenekEXP] > 2999 && oyuncuData[playerid][oGucYetenek] < 3)
			{
				oyuncuData[playerid][oGucYetenekEXP] -= 3000;
				oyuncuData[playerid][oGucYetenek] ++;
				format(string, sizeof(string), "%d/4000", oyuncuData[playerid][oGucYetenekEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
				format(string, sizeof(string), "%d", oyuncuData[playerid][oGucYetenek]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][13], string);
				SunucuMesaji(playerid, "Kas gücü yeteneðiniz yükseldi! Yeni kas gücü seviyeniz: %d", oyuncuData[playerid][oGucYetenek]);
			}
			if(oyuncuData[playerid][oGucYetenekEXP] > 3999 && oyuncuData[playerid][oGucYetenek] < 4)
			{
				oyuncuData[playerid][oGucYetenekEXP] -= 4000;
				oyuncuData[playerid][oGucYetenek] ++;
				format(string, sizeof(string), "%d/5000", oyuncuData[playerid][oGucYetenekEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
				format(string, sizeof(string), "%d", oyuncuData[playerid][oGucYetenek]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][13], string);
				SunucuMesaji(playerid, "Kas gücü yeteneðiniz yükseldi! Yeni kas gücü seviyeniz: %d", oyuncuData[playerid][oGucYetenek]);
			}
			if(oyuncuData[playerid][oGucYetenekEXP] > 4999 && oyuncuData[playerid][oGucYetenek] < 5)
			{
				oyuncuData[playerid][oGucYetenekEXP] -= 5000;
				oyuncuData[playerid][oGucYetenek] ++;
				format(string, sizeof(string), "%d/6000", oyuncuData[playerid][oGucYetenekEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
				format(string, sizeof(string), "%d", oyuncuData[playerid][oGucYetenek]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][13], string);
				SunucuMesaji(playerid, "Kas gücü yeteneðiniz yükseldi! Yeni kas gücü seviyeniz: %d", oyuncuData[playerid][oGucYetenek]);
			}
			if(oyuncuData[playerid][oGucYetenekEXP] > 5999 && oyuncuData[playerid][oGucYetenek] < 6)
			{
				oyuncuData[playerid][oGucYetenekEXP] -= 6000;
				oyuncuData[playerid][oGucYetenek] ++;
				format(string, sizeof(string), "%d/7000", oyuncuData[playerid][oGucYetenekEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
				format(string, sizeof(string), "%d", oyuncuData[playerid][oGucYetenek]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][13], string);
				SunucuMesaji(playerid, "Kas gücü yeteneðiniz yükseldi! Yeni kas gücü seviyeniz: %d", oyuncuData[playerid][oGucYetenek]);
			}
			if(oyuncuData[playerid][oGucYetenekEXP] > 6999 && oyuncuData[playerid][oGucYetenek] < 7)
			{
				oyuncuData[playerid][oGucYetenekEXP] -= 7000;
				oyuncuData[playerid][oGucYetenek] ++;
				format(string, sizeof(string), "%d/8000", oyuncuData[playerid][oGucYetenekEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
				format(string, sizeof(string), "%d", oyuncuData[playerid][oGucYetenek]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][13], string);
				SunucuMesaji(playerid, "Kas gücü yeteneðiniz yükseldi! Yeni kas gücü seviyeniz: %d", oyuncuData[playerid][oGucYetenek]);
			}
			if(oyuncuData[playerid][oGucYetenekEXP] > 7999 && oyuncuData[playerid][oGucYetenek] < 8)
			{
				oyuncuData[playerid][oGucYetenekEXP] -= 8000;
				oyuncuData[playerid][oGucYetenek] ++;
				format(string, sizeof(string), "%d/9000", oyuncuData[playerid][oGucYetenekEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
				format(string, sizeof(string), "%d", oyuncuData[playerid][oGucYetenek]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][13], string);
				SunucuMesaji(playerid, "Kas gücü yeteneðiniz yükseldi! Yeni kas gücü seviyeniz: %d", oyuncuData[playerid][oGucYetenek]);
			}
			if(oyuncuData[playerid][oGucYetenekEXP] > 8999 && oyuncuData[playerid][oGucYetenek] < 9)
			{
				oyuncuData[playerid][oGucYetenekEXP] -= 9000;
				oyuncuData[playerid][oGucYetenek] ++;
				format(string, sizeof(string), "%d/10000", oyuncuData[playerid][oGucYetenekEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
				format(string, sizeof(string), "%d", oyuncuData[playerid][oGucYetenek]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][13], string);
				SunucuMesaji(playerid, "Kas gücü yeteneðiniz yükseldi! Yeni kas gücü seviyeniz: %d", oyuncuData[playerid][oGucYetenek]);
			}
			if(oyuncuData[playerid][oGucYetenekEXP] > 9999 && oyuncuData[playerid][oGucYetenek] < 10)
			{
				oyuncuData[playerid][oGucYetenekEXP] -= 10000;
				oyuncuData[playerid][oGucYetenek] ++;
				format(string, sizeof(string), "%d/11000", oyuncuData[playerid][oGucYetenekEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
				format(string, sizeof(string), "%d", oyuncuData[playerid][oGucYetenek]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][13], string);
				SunucuMesaji(playerid, "Kas gücü yeteneðiniz yükseldi! Yeni kas gücü seviyeniz: %d", oyuncuData[playerid][oGucYetenek]);
			}
			if(oyuncuData[playerid][oGucYetenekEXP] > 10999 && oyuncuData[playerid][oGucYetenek] < 11)
			{
				oyuncuData[playerid][oGucYetenekEXP] -= 11000;
				oyuncuData[playerid][oGucYetenek] ++;
				format(string, sizeof(string), "%d/12000", oyuncuData[playerid][oGucYetenekEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
				format(string, sizeof(string), "%d", oyuncuData[playerid][oGucYetenek]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][13], string);
				SunucuMesaji(playerid, "Kas gücü yeteneðiniz yükseldi! Yeni kas gücü seviyeniz: %d", oyuncuData[playerid][oGucYetenek]);
			}
			if(oyuncuData[playerid][oGucYetenekEXP] > 11999 && oyuncuData[playerid][oGucYetenek] < 12)
			{
				oyuncuData[playerid][oGucYetenekEXP] -= 12000;
				oyuncuData[playerid][oGucYetenek] ++;
				format(string, sizeof(string), "%d/13000", oyuncuData[playerid][oGucYetenekEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
				format(string, sizeof(string), "%d", oyuncuData[playerid][oGucYetenek]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][13], string);
				SunucuMesaji(playerid, "Kas gücü yeteneðiniz yükseldi! Yeni kas gücü seviyeniz: %d", oyuncuData[playerid][oGucYetenek]);
			}
			if(oyuncuData[playerid][oGucYetenekEXP] > 12999 && oyuncuData[playerid][oGucYetenek] < 13)
			{
				oyuncuData[playerid][oGucYetenekEXP] -= 13000;
				oyuncuData[playerid][oGucYetenek] ++;
				format(string, sizeof(string), "%d/14000", oyuncuData[playerid][oGucYetenekEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
				format(string, sizeof(string), "%d", oyuncuData[playerid][oGucYetenek]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][13], string);
				SunucuMesaji(playerid, "Kas gücü yeteneðiniz yükseldi! Yeni kas gücü seviyeniz: %d", oyuncuData[playerid][oGucYetenek]);
			}
			if(oyuncuData[playerid][oGucYetenekEXP] > 13999 && oyuncuData[playerid][oGucYetenek] < 14)
			{
				oyuncuData[playerid][oGucYetenekEXP] -= 14000;
				oyuncuData[playerid][oGucYetenek] ++;
				format(string, sizeof(string), "%d/15000", oyuncuData[playerid][oGucYetenekEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
				format(string, sizeof(string), "%d", oyuncuData[playerid][oGucYetenek]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][13], string);
				SunucuMesaji(playerid, "Kas gücü yeteneðiniz yükseldi! Yeni kas gücü seviyeniz: %d", oyuncuData[playerid][oGucYetenek]);
			}
			if(oyuncuData[playerid][oGucYetenekEXP] > 14999 && oyuncuData[playerid][oGucYetenek] < 15)
			{
				oyuncuData[playerid][oGucYetenekEXP] -= 15000;
				oyuncuData[playerid][oGucYetenek] ++;
				format(string, sizeof(string), "%d/16000", oyuncuData[playerid][oGucYetenekEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
				format(string, sizeof(string), "%d", oyuncuData[playerid][oGucYetenek]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][13], string);
				SunucuMesaji(playerid, "Kas gücü yeteneðiniz yükseldi! Yeni kas gücü seviyeniz: %d", oyuncuData[playerid][oGucYetenek]);
			}
			if(oyuncuData[playerid][oGucYetenekEXP] > 15999 && oyuncuData[playerid][oGucYetenek] < 16)
			{
				oyuncuData[playerid][oGucYetenekEXP] -= 16000;
				oyuncuData[playerid][oGucYetenek] ++;
				format(string, sizeof(string), "%d/17000", oyuncuData[playerid][oGucYetenekEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
				format(string, sizeof(string), "%d", oyuncuData[playerid][oGucYetenek]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][13], string);
				SunucuMesaji(playerid, "Kas gücü yeteneðiniz yükseldi! Yeni kas gücü seviyeniz: %d", oyuncuData[playerid][oGucYetenek]);
			}
			if(oyuncuData[playerid][oGucYetenekEXP] > 16999 && oyuncuData[playerid][oGucYetenek] < 17)
			{
				oyuncuData[playerid][oGucYetenekEXP] -= 17000;
				oyuncuData[playerid][oGucYetenek] ++;
				format(string, sizeof(string), "%d/18000", oyuncuData[playerid][oGucYetenekEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
				format(string, sizeof(string), "%d", oyuncuData[playerid][oGucYetenek]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][13], string);
				SunucuMesaji(playerid, "Kas gücü yeteneðiniz yükseldi! Yeni kas gücü seviyeniz: %d", oyuncuData[playerid][oGucYetenek]);
			}
			if(oyuncuData[playerid][oGucYetenekEXP] > 17999 && oyuncuData[playerid][oGucYetenek] < 18)
			{
				oyuncuData[playerid][oGucYetenekEXP] -= 18000;
				oyuncuData[playerid][oGucYetenek] ++;
				format(string, sizeof(string), "%d/19000", oyuncuData[playerid][oGucYetenekEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
				format(string, sizeof(string), "%d", oyuncuData[playerid][oGucYetenek]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][13], string);
				SunucuMesaji(playerid, "Kas gücü yeteneðiniz yükseldi! Yeni kas gücü seviyeniz: %d", oyuncuData[playerid][oGucYetenek]);
			}
			if(oyuncuData[playerid][oGucYetenekEXP] > 18999 && oyuncuData[playerid][oGucYetenek] < 19)
			{
				oyuncuData[playerid][oGucYetenekEXP] -= 19000;
				oyuncuData[playerid][oGucYetenek] ++;
				format(string, sizeof(string), "%d/20000", oyuncuData[playerid][oGucYetenekEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
				format(string, sizeof(string), "%d", oyuncuData[playerid][oGucYetenek]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][13], string);
				SunucuMesaji(playerid, "Kas gücü yeteneðiniz yükseldi! Yeni kas gücü seviyeniz: %d", oyuncuData[playerid][oGucYetenek]);
			}
			if(oyuncuData[playerid][oGucYetenekEXP] > 19999 && oyuncuData[playerid][oGucYetenek] < 20)
			{
				oyuncuData[playerid][oGucYetenekEXP] -= 20000;
				oyuncuData[playerid][oGucYetenek] ++;
				format(string, sizeof(string), "MAX");
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][5], string);
				format(string, sizeof(string), "%d", oyuncuData[playerid][oGucYetenek]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][13], string);
				SunucuMesaji(playerid, "Kas gücü yeteneðiniz yükseldi! Yeni kas gücü seviyeniz: %d", oyuncuData[playerid][oGucYetenek]);
			}
		}
		if (playertextid == yetenekdraw[playerid][24])
		{
			if(oyuncuData[playerid][oYetenekPuani] < 1) return hataMesaji(playerid, "Yetenek puanýnýz yok.");
			if(oyuncuData[playerid][oDayaniklilik] == 20) return hataMesaji(playerid, "Bu yeteneði daha fazla yükseltemezsin.");
			new string[128];
			oyuncuData[playerid][oYetenekPuani]--;
			format(string, sizeof(string), "%d", oyuncuData[playerid][oYetenekPuani]);
			PlayerTextDrawSetString(playerid, yetenekdraw[playerid][17], string);
			oyuncuData[playerid][oDayaniklilikEXP] += 250;
			if(oyuncuData[playerid][oYetenekPuani] < 1)
			{
				PlayerTextDrawHide(playerid, yetenekdraw[playerid][19]);
				PlayerTextDrawHide(playerid, yetenekdraw[playerid][20]);
				PlayerTextDrawHide(playerid, yetenekdraw[playerid][21]);
				PlayerTextDrawHide(playerid, yetenekdraw[playerid][22]);
				PlayerTextDrawHide(playerid, yetenekdraw[playerid][23]);
				PlayerTextDrawHide(playerid, yetenekdraw[playerid][24]);
				PlayerTextDrawHide(playerid, yetenekdraw[playerid][25]);
			}
			if(oyuncuData[playerid][oDayaniklilik] == 0)
			{
				format(string, sizeof(string), "%d/1000", oyuncuData[playerid][oDayaniklilikEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
			}
			else if(oyuncuData[playerid][oDayaniklilik] == 1)
			{
				format(string, sizeof(string), "%d/2000", oyuncuData[playerid][oDayaniklilikEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
			}
			else if(oyuncuData[playerid][oDayaniklilik] == 2)
			{
				format(string, sizeof(string), "%d/3000", oyuncuData[playerid][oDayaniklilikEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
			}
			else if(oyuncuData[playerid][oDayaniklilik] == 3)
			{
				format(string, sizeof(string), "%d/4000", oyuncuData[playerid][oDayaniklilikEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
			}
			else if(oyuncuData[playerid][oDayaniklilik] == 4)
			{
				format(string, sizeof(string), "%d/5000", oyuncuData[playerid][oDayaniklilikEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
			}
			else if(oyuncuData[playerid][oDayaniklilik] == 5)
			{
				format(string, sizeof(string), "%d/6000", oyuncuData[playerid][oDayaniklilikEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
			}
			else if(oyuncuData[playerid][oDayaniklilik] == 6)
			{
				format(string, sizeof(string), "%d/7000", oyuncuData[playerid][oDayaniklilikEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
			}
			else if(oyuncuData[playerid][oDayaniklilik] == 7)
			{
				format(string, sizeof(string), "%d/8000", oyuncuData[playerid][oDayaniklilikEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
			}
			else if(oyuncuData[playerid][oDayaniklilik] == 8)
			{
				format(string, sizeof(string), "%d/9000", oyuncuData[playerid][oDayaniklilikEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
			}
			else if(oyuncuData[playerid][oDayaniklilik] == 9)
			{
				format(string, sizeof(string), "%d/10000", oyuncuData[playerid][oDayaniklilikEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
			}
			else if(oyuncuData[playerid][oDayaniklilik] == 10)
			{
				format(string, sizeof(string), "%d/11000", oyuncuData[playerid][oDayaniklilikEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
			}
			else if(oyuncuData[playerid][oDayaniklilik] == 11)
			{
				format(string, sizeof(string), "%d/12000", oyuncuData[playerid][oDayaniklilikEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
			}
			else if(oyuncuData[playerid][oDayaniklilik] == 12)
			{
				format(string, sizeof(string), "%d/13000", oyuncuData[playerid][oDayaniklilikEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
			}
			else if(oyuncuData[playerid][oDayaniklilik] == 13)
			{
				format(string, sizeof(string), "%d/14000", oyuncuData[playerid][oDayaniklilikEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
			}
			else if(oyuncuData[playerid][oDayaniklilik] == 14)
			{
				format(string, sizeof(string), "%d/15000", oyuncuData[playerid][oDayaniklilikEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
			}
			else if(oyuncuData[playerid][oDayaniklilik] == 15)
			{
				format(string, sizeof(string), "%d/16000", oyuncuData[playerid][oDayaniklilikEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
			}
			else if(oyuncuData[playerid][oDayaniklilik] == 16)
			{
				format(string, sizeof(string), "%d/17000", oyuncuData[playerid][oDayaniklilikEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
			}
			else if(oyuncuData[playerid][oDayaniklilik] == 17)
			{
				format(string, sizeof(string), "%d/18000", oyuncuData[playerid][oDayaniklilikEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
			}
			else if(oyuncuData[playerid][oDayaniklilik] == 18)
			{
				format(string, sizeof(string), "%d/19000", oyuncuData[playerid][oDayaniklilikEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
			}
			else if(oyuncuData[playerid][oDayaniklilik] == 19)
			{
				format(string, sizeof(string), "%d/20000", oyuncuData[playerid][oDayaniklilikEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
			}
			else if(oyuncuData[playerid][oDayaniklilik] == 20)
			{
				format(string, sizeof(string), "MAX");
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
			}
			SunucuMesaji(playerid, "Bir yetenek puanýný dayanýklýlýða verdin.", oyuncuData[playerid][oDayaniklilikEXP]);
			new yetenekstring[32];
			format(yetenekstring, sizeof yetenekstring, "%d", oyuncuData[playerid][oYetenekPuani]);
			PlayerTextDrawSetString(playerid, sagaltdraw[playerid][3], yetenekstring);
			if(oyuncuData[playerid][oDayaniklilikEXP] > 999 && oyuncuData[playerid][oDayaniklilik] < 1)
			{
				oyuncuData[playerid][oDayaniklilikEXP] -= 1000;
				oyuncuData[playerid][oDayaniklilik] ++;
				format(string, sizeof(string), "%d/2000", oyuncuData[playerid][oDayaniklilikEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
				format(string, sizeof(string), "%d", oyuncuData[playerid][oDayaniklilik]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][14], string);
				SunucuMesaji(playerid, "Dayanýklýlýk(vücut) yeteneðiniz yükseldi! Yeni vücut seviyeniz: %d", oyuncuData[playerid][oDayaniklilik]);
			}
			if(oyuncuData[playerid][oDayaniklilikEXP] > 1999 && oyuncuData[playerid][oDayaniklilik] < 2)
			{
				oyuncuData[playerid][oDayaniklilikEXP] -= 2000;
				oyuncuData[playerid][oDayaniklilik] ++;
				format(string, sizeof(string), "%d/3000", oyuncuData[playerid][oDayaniklilikEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
				format(string, sizeof(string), "%d", oyuncuData[playerid][oDayaniklilik]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][14], string);
				SunucuMesaji(playerid, "Dayanýklýlýk(vücut) yeteneðiniz yükseldi! Yeni vücut seviyeniz: %d", oyuncuData[playerid][oDayaniklilik]);
			}
			if(oyuncuData[playerid][oDayaniklilikEXP] > 2999 && oyuncuData[playerid][oDayaniklilik] < 3)
			{
				oyuncuData[playerid][oDayaniklilikEXP] -= 3000;
				oyuncuData[playerid][oDayaniklilik] ++;
				format(string, sizeof(string), "%d/4000", oyuncuData[playerid][oDayaniklilikEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
				format(string, sizeof(string), "%d", oyuncuData[playerid][oDayaniklilik]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][14], string);
				SunucuMesaji(playerid, "Dayanýklýlýk(vücut) yeteneðiniz yükseldi! Yeni vücut seviyeniz: %d", oyuncuData[playerid][oDayaniklilik]);
			}
			if(oyuncuData[playerid][oDayaniklilikEXP] > 3999 && oyuncuData[playerid][oDayaniklilik] < 4)
			{
				oyuncuData[playerid][oDayaniklilikEXP] -= 4000;
				oyuncuData[playerid][oDayaniklilik] ++;
				format(string, sizeof(string), "%d/5000", oyuncuData[playerid][oDayaniklilikEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
				format(string, sizeof(string), "%d", oyuncuData[playerid][oDayaniklilik]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][14], string);
				SunucuMesaji(playerid, "Dayanýklýlýk(vücut) yeteneðiniz yükseldi! Yeni vücut seviyeniz: %d", oyuncuData[playerid][oDayaniklilik]);
			}
			if(oyuncuData[playerid][oDayaniklilikEXP] > 4999 && oyuncuData[playerid][oDayaniklilik] < 5)
			{
				oyuncuData[playerid][oDayaniklilikEXP] -= 5000;
				oyuncuData[playerid][oDayaniklilik] ++;
				format(string, sizeof(string), "%d/6000", oyuncuData[playerid][oDayaniklilikEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
				format(string, sizeof(string), "%d", oyuncuData[playerid][oDayaniklilik]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][14], string);
				SunucuMesaji(playerid, "Dayanýklýlýk(vücut) yeteneðiniz yükseldi! Yeni vücut seviyeniz: %d", oyuncuData[playerid][oDayaniklilik]);
			}
			if(oyuncuData[playerid][oDayaniklilikEXP] > 5999 && oyuncuData[playerid][oDayaniklilik] < 6)
			{
				oyuncuData[playerid][oDayaniklilikEXP] -= 6000;
				oyuncuData[playerid][oDayaniklilik] ++;
				format(string, sizeof(string), "%d/7000", oyuncuData[playerid][oDayaniklilikEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
				format(string, sizeof(string), "%d", oyuncuData[playerid][oDayaniklilik]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][14], string);
				SunucuMesaji(playerid, "Dayanýklýlýk(vücut) yeteneðiniz yükseldi! Yeni vücut seviyeniz: %d", oyuncuData[playerid][oDayaniklilik]);
			}
			if(oyuncuData[playerid][oDayaniklilikEXP] > 6999 && oyuncuData[playerid][oDayaniklilik] < 7)
			{
				oyuncuData[playerid][oDayaniklilikEXP] -= 7000;
				oyuncuData[playerid][oDayaniklilik] ++;
				format(string, sizeof(string), "%d/8000", oyuncuData[playerid][oDayaniklilikEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
				format(string, sizeof(string), "%d", oyuncuData[playerid][oDayaniklilik]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][14], string);
				SunucuMesaji(playerid, "Dayanýklýlýk(vücut) yeteneðiniz yükseldi! Yeni vücut seviyeniz: %d", oyuncuData[playerid][oDayaniklilik]);
			}
			if(oyuncuData[playerid][oDayaniklilikEXP] > 7999 && oyuncuData[playerid][oDayaniklilik] < 8)
			{
				oyuncuData[playerid][oDayaniklilikEXP] -= 8000;
				oyuncuData[playerid][oDayaniklilik] ++;
				format(string, sizeof(string), "%d/9000", oyuncuData[playerid][oDayaniklilikEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
				format(string, sizeof(string), "%d", oyuncuData[playerid][oDayaniklilik]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][14], string);
				SunucuMesaji(playerid, "Dayanýklýlýk(vücut) yeteneðiniz yükseldi! Yeni vücut seviyeniz: %d", oyuncuData[playerid][oDayaniklilik]);
			}
			if(oyuncuData[playerid][oDayaniklilikEXP] > 8999 && oyuncuData[playerid][oDayaniklilik] < 9)
			{
				oyuncuData[playerid][oDayaniklilikEXP] -= 9000;
				oyuncuData[playerid][oDayaniklilik] ++;
				format(string, sizeof(string), "%d/10000", oyuncuData[playerid][oDayaniklilikEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
				format(string, sizeof(string), "%d", oyuncuData[playerid][oDayaniklilik]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][14], string);
				SunucuMesaji(playerid, "Dayanýklýlýk(vücut) yeteneðiniz yükseldi! Yeni vücut seviyeniz: %d", oyuncuData[playerid][oDayaniklilik]);
			}
			if(oyuncuData[playerid][oDayaniklilikEXP] > 9999 && oyuncuData[playerid][oDayaniklilik] < 10)
			{
				oyuncuData[playerid][oDayaniklilikEXP] -= 10000;
				oyuncuData[playerid][oDayaniklilik] ++;
				format(string, sizeof(string), "%d/11000", oyuncuData[playerid][oDayaniklilikEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
				format(string, sizeof(string), "%d", oyuncuData[playerid][oDayaniklilik]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][14], string);
				SunucuMesaji(playerid, "Dayanýklýlýk(vücut) yeteneðiniz yükseldi! Yeni vücut seviyeniz: %d", oyuncuData[playerid][oDayaniklilik]);
			}
			if(oyuncuData[playerid][oDayaniklilikEXP] > 10999 && oyuncuData[playerid][oDayaniklilik] < 11)
			{
				oyuncuData[playerid][oDayaniklilikEXP] -= 11000;
				oyuncuData[playerid][oDayaniklilik] ++;
				format(string, sizeof(string), "%d/12000", oyuncuData[playerid][oDayaniklilikEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
				format(string, sizeof(string), "%d", oyuncuData[playerid][oDayaniklilik]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][14], string);
				SunucuMesaji(playerid, "Dayanýklýlýk(vücut) yeteneðiniz yükseldi! Yeni vücut seviyeniz: %d", oyuncuData[playerid][oDayaniklilik]);
			}
			if(oyuncuData[playerid][oDayaniklilikEXP] > 11999 && oyuncuData[playerid][oDayaniklilik] < 12)
			{
				oyuncuData[playerid][oDayaniklilikEXP] -= 12000;
				oyuncuData[playerid][oDayaniklilik] ++;
				format(string, sizeof(string), "%d/13000", oyuncuData[playerid][oDayaniklilikEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
				format(string, sizeof(string), "%d", oyuncuData[playerid][oDayaniklilik]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][14], string);
				SunucuMesaji(playerid, "Dayanýklýlýk(vücut) yeteneðiniz yükseldi! Yeni vücut seviyeniz: %d", oyuncuData[playerid][oDayaniklilik]);
			}
			if(oyuncuData[playerid][oDayaniklilikEXP] > 12999 && oyuncuData[playerid][oDayaniklilik] < 13)
			{
				oyuncuData[playerid][oDayaniklilikEXP] -= 13000;
				oyuncuData[playerid][oDayaniklilik] ++;
				format(string, sizeof(string), "%d/14000", oyuncuData[playerid][oDayaniklilikEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
				format(string, sizeof(string), "%d", oyuncuData[playerid][oDayaniklilik]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][14], string);
				SunucuMesaji(playerid, "Dayanýklýlýk(vücut) yeteneðiniz yükseldi! Yeni vücut seviyeniz: %d", oyuncuData[playerid][oDayaniklilik]);
			}
			if(oyuncuData[playerid][oDayaniklilikEXP] > 13999 && oyuncuData[playerid][oDayaniklilik] < 14)
			{
				oyuncuData[playerid][oDayaniklilikEXP] -= 14000;
				oyuncuData[playerid][oDayaniklilik] ++;
				format(string, sizeof(string), "%d/15000", oyuncuData[playerid][oDayaniklilikEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
				format(string, sizeof(string), "%d", oyuncuData[playerid][oDayaniklilik]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][14], string);
				SunucuMesaji(playerid, "Dayanýklýlýk(vücut) yeteneðiniz yükseldi! Yeni vücut seviyeniz: %d", oyuncuData[playerid][oDayaniklilik]);
			}
			if(oyuncuData[playerid][oDayaniklilikEXP] > 14999 && oyuncuData[playerid][oDayaniklilik] < 15)
			{
				oyuncuData[playerid][oDayaniklilikEXP] -= 15000;
				oyuncuData[playerid][oDayaniklilik] ++;
				format(string, sizeof(string), "%d/16000", oyuncuData[playerid][oDayaniklilikEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
				format(string, sizeof(string), "%d", oyuncuData[playerid][oDayaniklilik]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][14], string);
				SunucuMesaji(playerid, "Dayanýklýlýk(vücut) yeteneðiniz yükseldi! Yeni vücut seviyeniz: %d", oyuncuData[playerid][oDayaniklilik]);
			}
			if(oyuncuData[playerid][oDayaniklilikEXP] > 15999 && oyuncuData[playerid][oDayaniklilik] < 16)
			{
				oyuncuData[playerid][oDayaniklilikEXP] -= 16000;
				oyuncuData[playerid][oDayaniklilik] ++;
				format(string, sizeof(string), "%d/17000", oyuncuData[playerid][oDayaniklilikEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
				format(string, sizeof(string), "%d", oyuncuData[playerid][oDayaniklilik]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][14], string);
				SunucuMesaji(playerid, "Dayanýklýlýk(vücut) yeteneðiniz yükseldi! Yeni vücut seviyeniz: %d", oyuncuData[playerid][oDayaniklilik]);
			}
			if(oyuncuData[playerid][oDayaniklilikEXP] > 16999 && oyuncuData[playerid][oDayaniklilik] < 17)
			{
				oyuncuData[playerid][oDayaniklilikEXP] -= 17000;
				oyuncuData[playerid][oDayaniklilik] ++;
				format(string, sizeof(string), "%d/18000", oyuncuData[playerid][oDayaniklilikEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
				format(string, sizeof(string), "%d", oyuncuData[playerid][oDayaniklilik]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][14], string);
				SunucuMesaji(playerid, "Dayanýklýlýk(vücut) yeteneðiniz yükseldi! Yeni vücut seviyeniz: %d", oyuncuData[playerid][oDayaniklilik]);
			}
			if(oyuncuData[playerid][oDayaniklilikEXP] > 17999 && oyuncuData[playerid][oDayaniklilik] < 18)
			{
				oyuncuData[playerid][oDayaniklilikEXP] -= 18000;
				oyuncuData[playerid][oDayaniklilik] ++;
				format(string, sizeof(string), "%d/19000", oyuncuData[playerid][oDayaniklilikEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
				format(string, sizeof(string), "%d", oyuncuData[playerid][oDayaniklilik]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][14], string);
				SunucuMesaji(playerid, "Dayanýklýlýk(vücut) yeteneðiniz yükseldi! Yeni vücut seviyeniz: %d", oyuncuData[playerid][oDayaniklilik]);
			}
			if(oyuncuData[playerid][oDayaniklilikEXP] > 18999 && oyuncuData[playerid][oDayaniklilik] < 19)
			{
				oyuncuData[playerid][oDayaniklilikEXP] -= 19000;
				oyuncuData[playerid][oDayaniklilik] ++;
				format(string, sizeof(string), "%d/20000", oyuncuData[playerid][oDayaniklilikEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
				format(string, sizeof(string), "%d", oyuncuData[playerid][oDayaniklilik]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][14], string);
				SunucuMesaji(playerid, "Dayanýklýlýk(vücut) yeteneðiniz yükseldi! Yeni vücut seviyeniz: %d", oyuncuData[playerid][oDayaniklilik]);
			}
			if(oyuncuData[playerid][oDayaniklilikEXP] > 19999 && oyuncuData[playerid][oDayaniklilik] < 20)
			{
				oyuncuData[playerid][oDayaniklilikEXP] -= 20000;
				oyuncuData[playerid][oDayaniklilik] ++;
				format(string, sizeof(string), "MAX");
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][6], string);
				format(string, sizeof(string), "%d", oyuncuData[playerid][oDayaniklilik]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][14], string);
				SunucuMesaji(playerid, "Dayanýklýlýk(vücut) yeteneðiniz yükseldi! Yeni vücut seviyeniz: %d", oyuncuData[playerid][oDayaniklilik]);
			}
		}
		if (playertextid == yetenekdraw[playerid][25])
		{
			if(oyuncuData[playerid][oYetenekPuani] < 1) return hataMesaji(playerid, "Yetenek puanýnýz yok.");
			if(oyuncuData[playerid][oKimyaYetenek] == 10) return hataMesaji(playerid, "Bu yeteneði daha fazla yükseltemezsin.");
			new string[128];
			oyuncuData[playerid][oYetenekPuani]--;
			format(string, sizeof(string), "%d", oyuncuData[playerid][oYetenekPuani]);
			PlayerTextDrawSetString(playerid, yetenekdraw[playerid][17], string);
			oyuncuData[playerid][oKimyaYetenekEXP]++;
			if(oyuncuData[playerid][oYetenekPuani] < 1)
			{
				PlayerTextDrawHide(playerid, yetenekdraw[playerid][19]);
				PlayerTextDrawHide(playerid, yetenekdraw[playerid][20]);
				PlayerTextDrawHide(playerid, yetenekdraw[playerid][21]);
				PlayerTextDrawHide(playerid, yetenekdraw[playerid][22]);
				PlayerTextDrawHide(playerid, yetenekdraw[playerid][23]);
				PlayerTextDrawHide(playerid, yetenekdraw[playerid][24]);
				PlayerTextDrawHide(playerid, yetenekdraw[playerid][25]);
			}
			format(string, sizeof(string), "%d/3", oyuncuData[playerid][oKimyaYetenekEXP]);
			PlayerTextDrawSetString(playerid, yetenekdraw[playerid][7], string);
			SunucuMesaji(playerid, "Bir yetenek puanýný kimyaya verdin.", oyuncuData[playerid][oKimyaYetenekEXP]);
			new yetenekstring[32];
			format(yetenekstring, sizeof yetenekstring, "%d", oyuncuData[playerid][oYetenekPuani]);
			PlayerTextDrawSetString(playerid, sagaltdraw[playerid][3], yetenekstring);
			if(oyuncuData[playerid][oKimyaYetenekEXP] == 3)
			{
				oyuncuData[playerid][oKimyaYetenekEXP] = 0;
				oyuncuData[playerid][oKimyaYetenek]++;
				format(string, sizeof(string), "%d/3", oyuncuData[playerid][oKimyaYetenekEXP]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][7], string);
				format(string, sizeof(string), "%d", oyuncuData[playerid][oKimyaYetenek]);
				PlayerTextDrawSetString(playerid, yetenekdraw[playerid][15], string);
				SunucuMesaji(playerid, "Üretim yeteneðiniz yükseldi! Yeni üretim seviyeniz: %d", oyuncuData[playerid][oKimyaYetenek]);
			}
		}
		if (playertextid == yetenekdraw[playerid][26])
		{
			PlayerTextDrawHide(playerid, yetenekdraw[playerid][0]);
			PlayerTextDrawHide(playerid, yetenekdraw[playerid][1]);
			PlayerTextDrawHide(playerid, yetenekdraw[playerid][2]);
			PlayerTextDrawHide(playerid, yetenekdraw[playerid][3]);
			PlayerTextDrawHide(playerid, yetenekdraw[playerid][4]);
			PlayerTextDrawHide(playerid, yetenekdraw[playerid][5]);
			PlayerTextDrawHide(playerid, yetenekdraw[playerid][6]);
			PlayerTextDrawHide(playerid, yetenekdraw[playerid][7]);
			PlayerTextDrawHide(playerid, yetenekdraw[playerid][8]);
			PlayerTextDrawHide(playerid, yetenekdraw[playerid][9]);
			PlayerTextDrawHide(playerid, yetenekdraw[playerid][10]);
			PlayerTextDrawHide(playerid, yetenekdraw[playerid][11]);
			PlayerTextDrawHide(playerid, yetenekdraw[playerid][12]);
			PlayerTextDrawHide(playerid, yetenekdraw[playerid][13]);
			PlayerTextDrawHide(playerid, yetenekdraw[playerid][14]);
			PlayerTextDrawHide(playerid, yetenekdraw[playerid][15]);
			PlayerTextDrawHide(playerid, yetenekdraw[playerid][16]);
			PlayerTextDrawHide(playerid, yetenekdraw[playerid][17]);
			PlayerTextDrawHide(playerid, yetenekdraw[playerid][18]);
			PlayerTextDrawHide(playerid, yetenekdraw[playerid][19]);
			PlayerTextDrawHide(playerid, yetenekdraw[playerid][20]);
			PlayerTextDrawHide(playerid, yetenekdraw[playerid][21]);
			PlayerTextDrawHide(playerid, yetenekdraw[playerid][22]);
			PlayerTextDrawHide(playerid, yetenekdraw[playerid][23]);
			PlayerTextDrawHide(playerid, yetenekdraw[playerid][24]);
			PlayerTextDrawHide(playerid, yetenekdraw[playerid][25]);
			PlayerTextDrawHide(playerid, yetenekdraw[playerid][26]);
			CancelSelectTextDraw(playerid);
		}
		if (playertextid == characterSelect[playerid][21])
		{
			if(!OyuncuKarakter[playerid][0][0]) return hataMesaji(playerid, "Boþ slot seçtiniz.");
			Ban_Kontrol(playerid, 0);
		}
		if (playertextid == characterSelect[playerid][22])
		{
			if(!OyuncuKarakter[playerid][1][0]) return hataMesaji(playerid, "Boþ slot seçtiniz.");
			Ban_Kontrol(playerid, 1);
		}
		if (playertextid == characterSelect[playerid][23])
		{
			if(!OyuncuKarakter[playerid][2][0]) return hataMesaji(playerid, "Boþ slot seçtiniz.");
			Ban_Kontrol(playerid, 2);
		}
		if (playertextid == characterSelect[playerid][24])
		{
			if(!OyuncuKarakter[playerid][3][0]) return hataMesaji(playerid, "Boþ slot seçtiniz.");
			Ban_Kontrol(playerid, 3);
		}
		if (playertextid == TDEditor_PTD[playerid][0])
		{
	 		new str[MAX_PLAYER_NAME + 1 + 85];
			format(str, sizeof(str), "{FFFFFF}Sunucuya hoþgeldin {ffd369}%s\n{FFFFFF}Hesabýna giriþ yapabilmek için kutucuðu doldurmalýsýn.", OyuncuIsim(playerid, 1));
			ShowPlayerDialog(playerid, DIALOG_GIRIS, DIALOG_STYLE_PASSWORD, "Nitro Roleplay - Giriþ Yap", str, "Onayla", "Çýkýþ");
		}
		if (playertextid == TDEditor_PTD[playerid][3])
		{
			new sifre[128];
			if(girilensifre[playerid] == -1) return SendClientMessage(playerid, RENK_KLASIK, "Giriþ yapmadan önce þifrenizi girmelisiniz.");
			static query[512];
			strunpack(sifre, girilensifre[playerid], sizeof(sifre));
			mysql_format(g_SQL, query, sizeof(query), "SELECT `forumid` FROM `hesaplar` WHERE `forumid` = '%d' AND `sifre` = '%e'", oyuncuData[playerid][oForumID], MD5_Hash(sifre));
			return mysql_tquery(g_SQL, query, "GirisTest", "d", playerid);
		}
		if (playertextid == TDEditor_PTD[playerid][2])
		{
			SendClientMessage(playerid, RENK_KLASIK, "Çýkýþ yaptýnýz.");
			Kick(playerid);
		}
		if(oyuncuData[playerid][pATMMenu] == true)
		{
			new detaylar[256];

			if(playertextid == ATMTextDraw[3][playerid])
			{
				format(detaylar, sizeof(detaylar), "{FFFFFF}Hesap Sahibi: \t%s\nHesap NO: \t%d\nBakiye: \t%s", OyuncuIsim(playerid), oyuncuData[playerid][oHesapNumarasi], NumaraFormati(oyuncuData[playerid][oBankaPara]));
				DialogGoster(playerid, 0, DIALOG_STYLE_MSGBOX, "Hesap Detaylarý", detaylar, "Kapat", "");
			}
			else if(playertextid == ATMTextDraw[4][playerid])
			{
				DialogGoster(playerid, DIALOG_BANKA_PARACEK, DIALOG_STYLE_INPUT, "ATM", "{FFFFFF}Lütfen hesabýndan çekmek istediðin para miktarýný gir;", "Çek", "Ýptal");
			}
			else if(playertextid == ATMTextDraw[5][playerid])
			{
				DialogGoster(playerid, DIALOG_BANKA_PARAYATIR, DIALOG_STYLE_INPUT, "ATM", "{FFFFFF}Lütfen hesabýna yatýrmak istediðin para miktarýný gir;", "Yatýr", "Ýptal");
			}
			else if(playertextid == ATMTextDraw[6][playerid])
			{
				DialogGoster(playerid, DIALOG_BANKA_TRANSFER, DIALOG_STYLE_INPUT, "ATM", "{FFFFFF}Lütfen transfer yapacaðýn hesap numarasýný gir;", "Seç", "Ýptal");
			}
			else if(playertextid == ATMTextDraw[8][playerid])
			{
				oyuncuData[playerid][pATMMenu] = false;
				for(new i; i < sizeof(ATMTextDraw); i++) { PlayerTextDrawHide(playerid, ATMTextDraw[i][playerid]); }
					CancelSelectTextDraw(playerid);
			}
		}
		return 1;
	}

	public HileKontrol1(playerid) {
		SetCameraBehindPlayer(playerid);
		CancelSelectTextDraw(playerid);
		new Float:x, Float:y, Float:z;
		GetPlayerCameraFrontVector(playerid, x, y, z);
	#pragma unused x
	#pragma unused y
		if(z < -0.8) {
	    #if ANTI_HILE   true
			UyariMesaji(playerid, "Hile ile giriþ yapamazsýn.");
			return KickEx(playerid);
		#endif
		}
		static query[128 + MAX_PLAYER_NAME];
		mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM hesapban WHERE forumid = '%d'", oyuncuData[playerid][oForumID]);
		mysql_tquery(g_SQL, query, "forumyasaklamaarat", "d", playerid);
		return false;
	}

	public benzinal(oyuncuid, aracid) {
		new pompaid = BenzinAliyor[oyuncuid], ucret = 4;
		if(oyuncuData[oyuncuid][oPara] < ucret) return KillTimer(BenzinTimer[oyuncuid]), BenzinAliyor[oyuncuid] = -1, SunucuMesaji(oyuncuid, "Paranýz bittiði için benzin alma iþlemi durdu."), TogglePlayerControllable(oyuncuid, true);
		if(AracBilgi[aracid][aracBenzin] > 99.9) return KillTimer(BenzinTimer[oyuncuid]), BenzinAliyor[oyuncuid] = -1, SunucuMesaji(oyuncuid, "Aracýnýzýn benzin tanký full olarak doldu."), TogglePlayerControllable(oyuncuid, true);
		if(pompaid == -1) return KillTimer(BenzinTimer[oyuncuid]), BenzinAliyor[oyuncuid] = -1, TogglePlayerControllable(oyuncuid, true);

		if(aracbirlikturbul(GetPlayerVehicleID(oyuncuid)) != BIRLIK_POLIS && aracbirlikturbul(GetPlayerVehicleID(oyuncuid)) != BIRLIK_DEVLET && aracbirlikturbul(GetPlayerVehicleID(oyuncuid)) != BIRLIK_MEDIKAL)
		{
			ParaEkle(oyuncuid, -ucret);
		}

		AracBilgi[aracid][aracBenzin] += 1.0;

		return false;
	}

	stock Barikat_Yenile(barikatid)
	{
		if(barikatid != -1 && BarikatBilgi[barikatid][barikatKullanimda])
		{
			if(IsValidDynamic3DTextLabel(BarikatBilgi[barikatid][barikatText]))
				DestroyDynamic3DTextLabel(BarikatBilgi[barikatid][barikatText]);

			if(IsValidDynamicObject(BarikatBilgi[barikatid][barikatObje]))
				DestroyDynamicObject(BarikatBilgi[barikatid][barikatObje]);

			static bilgi[96];
			format(bilgi, sizeof(bilgi), "BARIKAT\nID: {FFFFFF}%d", barikatid);
			BarikatBilgi[barikatid][barikatText] = CreateDynamic3DTextLabel(bilgi, RENK_SERVER, BarikatBilgi[barikatid][barikatPos][0], BarikatBilgi[barikatid][barikatPos][1], BarikatBilgi[barikatid][barikatPos][2] + 1.0, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, 0, 0);
			BarikatBilgi[barikatid][barikatObje] = CreateDynamicObject(BarikatBilgi[barikatid][barikatModel], BarikatBilgi[barikatid][barikatPos][0], BarikatBilgi[barikatid][barikatPos][1], BarikatBilgi[barikatid][barikatPos][2], BarikatBilgi[barikatid][barikatPos][3], BarikatBilgi[barikatid][barikatPos][4], BarikatBilgi[barikatid][barikatPos][5], 0, 0);
		}
		return 1;
	}

stock Ev_Yenile(evid)
{
	//static model;
	if(evid != -1 && EvBilgi[evid][evKullanimda])
	{
		/*if(IsValidDynamicPickup(EvBilgi[evid][evPickup]))
			DestroyDynamicPickup(EvBilgi[evid][evPickup]);

		switch(EvBilgi[evid][evDurum]) {
			case 1: model = 1273;  //format(evdurum, sizeof(evdurum), "{33AA33}Kilitsiz");
			case 2: model = 19522; // format(evdurum, sizeof(evdurum), "{B70000}Kilitli");
			case 3: model = 19524; // format(evdurum, sizeof(evdurum), "{E0AB2F}Bakým / Tadilat");
		} */

		/*if(EvBilgi[evid][evSahip] == 0) {
			format(bilgi, sizeof(bilgi), "{AFAFAF}Kapý NO: {FFFFFF}%d\n{AFAFAF}Adres: {FFFFFF}%s\n{AFAFAF}Fiyat: {33AA33}%s\n{AFAFAF}Durum: {33AA33}Satýlýk", evid, EvBilgi[evid][evAdres], NumaraFormati(EvBilgi[evid][evFiyat]));
		} */
		if(EvBilgi[evid][evSahip] > 0) {
			if(isnull(EvBilgi[evid][evSahipIsim])) return evisimbul(evid); //format(bilgi, sizeof(bilgi), "{AFAFAF}Kapý NO: {FFFFFF}%d\n{AFAFAF}Adres: {FFFFFF}%s\n{AFAFAF}Sahip: {FFFFFF}%s\n{AFAFAF}Durum: %s", evid, EvBilgi[evid][evAdres], EvBilgi[evid][evSahipIsim], evdurum);
		}
		//if(EvBilgi[evid][evKiralik] == 1 && EvBilgi[evid][evKiraci] == 0)
			//format(bilgi, sizeof(bilgi), "%s\n{AFAFAF}Bu ev kiralýk!\n{AFAFAF}Kira Ücreti: {33AA33}%s", bilgi, NumaraFormati(EvBilgi[evid][evKiraUcret]));
		if(EvBilgi[evid][evKiralik] == 1 && EvBilgi[evid][evKiraci] > 0) {
			if(isnull(EvBilgi[evid][evKiraciIsim])) return evkiraciisimbul(evid);
			//format(bilgi, sizeof(bilgi), "%s\n{AFAFAF}Kiracý: {FFFFFF}%s", bilgi, EvBilgi[evid][evKiraciIsim]);
		}
        //EvBilgi[evid][evPickup] = CreateDynamicPickup(model, 23, EvBilgi[evid][evPos][0], EvBilgi[evid][evPos][1], EvBilgi[evid][evPos][2], EvBilgi[evid][evDisVW], EvBilgi[evid][evDisInt], -1, 10.0); // + 0.7
    }
    return 1;
}

stock evkiraciisimbul(evid)
{
	if(EvBilgi[evid][evKiraci] > 0) {
		static query[256];
		mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `oyuncular` WHERE `ID` = '%d'", EvBilgi[evid][evKiraci]);
		mysql_tquery(g_SQL, query, "evkiraciisimarat", "d", evid);
	}
	return 1;
}

stock evisimbul(evid)
{
	if(EvBilgi[evid][evSahip] > 0) {
		static query[256];
		mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `oyuncular` WHERE `ID` = '%d'", EvBilgi[evid][evSahip]);
		mysql_tquery(g_SQL, query, "evisimarat", "d", evid);
	}
	return 1;
}

stock Isyeri_Yenile(isyeriid)
{
	//static string[2048], isyeridurum[128], model;
	if(isyeriid != -1 && IsyeriBilgi[isyeriid][isyeriKullanimda])
	{
		//if(IsValidDynamicPickup(IsyeriBilgi[isyeriid][isyeriPickup]))
		//	DestroyDynamicPickup(IsyeriBilgi[isyeriid][isyeriPickup]);

		/*switch(IsyeriBilgi[isyeriid][isyeriDurum]) {
		    case 1: isyeridurum = "{33AA33}Kilitsiz"; // kilitsiz
		    case 2: isyeridurum = "{B70000}Kilitli"; // kilitli
			case 3: isyeridurum = "{E0AB2F}Bakým / Tadilat"; // bakýmda
			case 4: isyeridurum = "{E0AB2F}Vergi Mührü"; // vergi mührü
		}
		switch(IsyeriBilgi[isyeriid][isyeriTur]) {
			case 1, 9: model = 1239;
			case 2: model = 1239;
			case 3: model = 1239;
			case 4: model = 1239;
			case 5: model = 1239;
			case 6: model = 1239;
			case 7: model = 1275;
			case 8: model = 1239;
			case 10: model = 1275;
			case 11: model = 1275;
			case 12: model = 1241;
			case 13: model = 1241;
			case 14: model = 1241;
			case 15: model = 1314;
			default: model = 1239;
		} */
		/*if(IsyeriBilgi[isyeriid][isyeriSahip] < 1 && IsyeriBilgi[isyeriid][isyeriSahip] != -1) {
			format(string, sizeof(string), "{AFAFAF}Kapý NO: {FFFFFF}%d\n{AFAFAF}Ad: {FFFFFF}%s\n{AFAFAF}Ýþyeri Türü: {FFFFFF}%s\n{AFAFAF}Fiyat: {33AA33}%s\n{AFAFAF}Durum: {33AA33}Satýlýk",
				isyeriid,
				IsyeriBilgi[isyeriid][isyeriAd],
				isyeriturisim(isyeriid),
				NumaraFormati(IsyeriBilgi[isyeriid][isyeriFiyat])
				);
		}*/
		if(IsyeriBilgi[isyeriid][isyeriSahip] > 0 || IsyeriBilgi[isyeriid][isyeriSahip] == -1) {
			if(isnull(IsyeriBilgi[isyeriid][isyeriSahipIsim]) || isnull(IsyeriBilgi[isyeriid][isyeriOrtakIsim])) return isyeriisimbul(isyeriid);
			/*format(string, sizeof(string), "{AFAFAF}Kapý NO: {FFFFFF}%d\n{AFAFAF}Ad: {FFFFFF}%s\n{AFAFAF}Sahip: {FFFFFF}%s\n{AFAFAF}Ortak: {FFFFFF}%s\n{AFAFAF}Giriþ Ücreti: {33AA33}%s\n{AFAFAF}Ýþyeri Türü: {FFFFFF}%s\n{AFAFAF}Durum: %s",
				isyeriid,
				IsyeriBilgi[isyeriid][isyeriAd],
				IsyeriBilgi[isyeriid][isyeriSahipIsim],
				IsyeriBilgi[isyeriid][isyeriOrtakIsim],
				NumaraFormati(IsyeriBilgi[isyeriid][iGirisUcret]),
				isyeriturisim(isyeriid),
				isyeridurum
				); */
		}
		//IsyeriBilgi[isyeriid][isyeriText] = CreateDynamic3DTextLabel(string, RENK_SERVER, IsyeriBilgi[isyeriid][isyeriPos][0], IsyeriBilgi[isyeriid][isyeriPos][1], IsyeriBilgi[isyeriid][isyeriPos][2], 2.5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, IsyeriBilgi[isyeriid][isyeriDisVW], IsyeriBilgi[isyeriid][isyeriDisInt]);
        //IsyeriBilgi[isyeriid][isyeriPickup] = CreateDynamicPickup(model, 23, IsyeriBilgi[isyeriid][isyeriPos][0], IsyeriBilgi[isyeriid][isyeriPos][1], IsyeriBilgi[isyeriid][isyeriPos][2], IsyeriBilgi[isyeriid][isyeriDisVW], IsyeriBilgi[isyeriid][isyeriDisInt]); // + 0.7
    }
    return 1;
}

stock isyeriisimbul(isyeriid)
{
	if(IsyeriBilgi[isyeriid][isyeriSahip] > 0) {
		static query[64];
		mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `oyuncular` WHERE `ID` = '%d'", IsyeriBilgi[isyeriid][isyeriSahip]);
		mysql_tquery(g_SQL, query, "isyeriisimarat", "d", isyeriid);
	}
	if(IsyeriBilgi[isyeriid][isyeriOrtak] > 0 && isnull(IsyeriBilgi[isyeriid][isyeriOrtakIsim])) {
		static query[64];
		mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `oyuncular` WHERE `ID` = '%d'", IsyeriBilgi[isyeriid][isyeriOrtak]);
		mysql_tquery(g_SQL, query, "isyeriortakisimarat", "d", isyeriid);
	}
	else if(IsyeriBilgi[isyeriid][isyeriSahip] == -1) {
		for (new i = 0; i != MAKSIMUM_BIRLIK; i ++) if(BirlikBilgi[i][birlikTur] == BIRLIK_DEVLET)
		{
			format(IsyeriBilgi[isyeriid][isyeriSahipIsim], 32, "%s", BirlikBilgi[i][birlikAd]);
			format(IsyeriBilgi[isyeriid][isyeriOrtakIsim], 32, "Yok");
			Isyeri_Yenile(isyeriid);
			return 1;
		}
		format(IsyeriBilgi[isyeriid][isyeriSahipIsim], 32, "Devlet");
		format(IsyeriBilgi[isyeriid][isyeriOrtakIsim], 32, "Yok");
		Isyeri_Yenile(isyeriid);
	}
	return 1;
}

stock isyeriturisim(isyeriid) {
	static tur[64];
	switch(IsyeriBilgi[isyeriid][isyeriTur]) {
		case 1: tur = "Market";
		case 2: tur = "Cafe & Restaurant";
		case 3: tur = "Elektronik/Market";
		case 4: tur = "GYM";
		case 5: tur = "Club/Bar";
		case 6: tur = "Ofis";
		case 7: tur = "Giyim";
		case 8: tur = "Diger";
		case 9: tur = "Benzinlik Marketi";
		case 10: tur = "Giyim 2";
		case 11: tur = "Giyim 3";
		case 12: tur = "Gizli Depo 1";
		case 13: tur = "Gizli Depo 2";
		case 14: tur = "Gizli Depo 3";
		case 15: tur = "Otel/Apart";
		case 16: tur = "Drug Lab";
	}
	return tur;
}

stock Bina_Yenile(binaid)
{
	static string[512], binadurum[64], pickup;
	if(binaid != -1 && BinaBilgi[binaid][bKullanimda])
	{
		if(IsValidDynamic3DTextLabel(BinaBilgi[binaid][binaText]))
			DestroyDynamic3DTextLabel(BinaBilgi[binaid][binaText]);

		if(IsValidDynamicPickup(BinaBilgi[binaid][bPickup]))
			DestroyDynamicPickup(BinaBilgi[binaid][bPickup]);

		switch(BinaBilgi[binaid][binaDurum]) {
		    case 1: binadurum = "{33AA33}Kilitsiz"; // kilitsiz
		    case 2: binadurum = "{B70000}Kilitli"; // kilitli
			case 3: binadurum = "{E0AB2F}Bakým / Tadilat"; // bakýmda
		}
		switch(BinaBilgi[binaid][bModel]) {
			case 1: pickup = 1212;
			case 2: pickup = 1239;
			case 3: pickup = 1240;
			case 4: pickup = 1241;
			case 5: pickup = 1247;
			case 6: pickup = 1274;
			case 7: pickup = 1254;
			case 8: pickup = 1276;
			case 9: pickup = 1277;
			case 10: pickup = 1313;
			case 11: pickup = 1314;
			case 12: pickup = 1318;
			case 13: pickup = 1581;
			case 14: pickup = 1650;
			case 15: pickup = 19522;
			case 16: pickup = 19627;
			case 17: pickup = 11712;
			default: pickup = 1318;
		}
		if(BinaBilgi[binaid][bModel] != 0)
		{
			format(string, sizeof(string), "ID: {FFFFFF}%d\n{AFAFAF}Ad: {FFFFFF}%s\n{AFAFAF}Durum: %s\n{AFAFAF}Tür: {FFFFFF}%s", binaid, BinaBilgi[binaid][bIsim], binadurum, binaturisim(BinaBilgi[binaid][binaTur]));
			BinaBilgi[binaid][binaText] = CreateDynamic3DTextLabel(string, RENK_SERVER, BinaBilgi[binaid][bPos][0], BinaBilgi[binaid][bPos][1], BinaBilgi[binaid][bPos][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, BinaBilgi[binaid][bDisVW], BinaBilgi[binaid][bDisInt]);
        BinaBilgi[binaid][bPickup] = CreateDynamicPickup(pickup, 23, BinaBilgi[binaid][bPos][0], BinaBilgi[binaid][bPos][1], BinaBilgi[binaid][bPos][2], BinaBilgi[binaid][bDisVW], BinaBilgi[binaid][bDisInt]); // + 0.7
    }
}
return 1;
}

stock Bina_Kaydet(binaid)
{
	static query[512 * 3];
	mysql_format(g_SQL, query, sizeof(query), "UPDATE `binalar` SET `binaAdi` = '%e', `binaModel` = '%d', `bPosX` = '%.4f', `bPosY` = '%.4f', `bPosZ` = '%.4f', `bPosA` = '%.4f', `bIPosX` = '%.4f', `bIPosY` = '%.4f', `bIPosZ` = '%.4f', `bIPosA` = '%.4f', `bInterior` = '%d'",
		BinaBilgi[binaid][bIsim],
		BinaBilgi[binaid][bModel],
		BinaBilgi[binaid][bPos][0],
		BinaBilgi[binaid][bPos][1],
		BinaBilgi[binaid][bPos][2],
		BinaBilgi[binaid][bPos][3],
		BinaBilgi[binaid][bIPos][0],
		BinaBilgi[binaid][bIPos][1],
		BinaBilgi[binaid][bIPos][2],
		BinaBilgi[binaid][bIPos][3],
		BinaBilgi[binaid][bInterior]
		);
	mysql_format(g_SQL, query, sizeof(query), "%s, `bVW` = '%d', `bDisVW` = '%d', `bDisInt` = '%d', `binaDurum` = '%d', `binaTur` = '%d' WHERE `bID` = '%d'",
		query,
		BinaBilgi[binaid][bVW],
		BinaBilgi[binaid][bDisVW],
		BinaBilgi[binaid][bDisInt],
		BinaBilgi[binaid][binaDurum],
		BinaBilgi[binaid][binaTur],
		BinaBilgi[binaid][bID]
		);
	mysql_tquery(g_SQL, query);
	return 1;
}

stock TextdrawlariYarat(playerid)
{

	TermalText[playerid] = CreatePlayerTextDraw(playerid, 313.000000, 226.000000, "+");
	PlayerTextDrawFont(playerid, TermalText[playerid], 2);
	PlayerTextDrawLetterSize(playerid, TermalText[playerid], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, TermalText[playerid], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, TermalText[playerid], 0);
	PlayerTextDrawSetShadow(playerid, TermalText[playerid], 0);
	PlayerTextDrawAlignment(playerid, TermalText[playerid], 1);
	PlayerTextDrawColor(playerid, TermalText[playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, TermalText[playerid], 255);
	PlayerTextDrawBoxColor(playerid, TermalText[playerid], 50);
	PlayerTextDrawUseBox(playerid, TermalText[playerid], 0);
	PlayerTextDrawSetProportional(playerid, TermalText[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, TermalText[playerid], 0);

	RenklerDraw[0][playerid] = CreatePlayerTextDraw(playerid, 125.000000, 290.000000, "mdl-2003:kalip");
	PlayerTextDrawFont(playerid, RenklerDraw[0][playerid], 4);
	PlayerTextDrawLetterSize(playerid, RenklerDraw[0][playerid], 0.600000, 2.000000);
	PlayerTextDrawTextSize(playerid, RenklerDraw[0][playerid], 140.500000, 147.000000);
	PlayerTextDrawSetOutline(playerid, RenklerDraw[0][playerid], 1);
	PlayerTextDrawSetShadow(playerid, RenklerDraw[0][playerid], 0);
	PlayerTextDrawAlignment(playerid, RenklerDraw[0][playerid], 1);
	PlayerTextDrawColor(playerid, RenklerDraw[0][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, RenklerDraw[0][playerid], 255);
	PlayerTextDrawBoxColor(playerid, RenklerDraw[0][playerid], 50);
	PlayerTextDrawUseBox(playerid, RenklerDraw[0][playerid], 1);
	PlayerTextDrawSetProportional(playerid, RenklerDraw[0][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, RenklerDraw[0][playerid], 0);

	RenklerDraw[1][playerid] = CreatePlayerTextDraw(playerid, 197.000000, 277.000000, "~w~Kapatmak icin ~r~/renkler~w~ yaziniz");
	PlayerTextDrawFont(playerid, RenklerDraw[1][playerid], 2);
	PlayerTextDrawLetterSize(playerid, RenklerDraw[1][playerid], 0.179166, 1.000000);
	PlayerTextDrawTextSize(playerid, RenklerDraw[1][playerid], 710.000000, 167.500000);
	PlayerTextDrawSetOutline(playerid, RenklerDraw[1][playerid], 0);
	PlayerTextDrawSetShadow(playerid, RenklerDraw[1][playerid], 1);
	PlayerTextDrawAlignment(playerid, RenklerDraw[1][playerid], 2);
	PlayerTextDrawColor(playerid, RenklerDraw[1][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, RenklerDraw[1][playerid], 255);
	PlayerTextDrawBoxColor(playerid, RenklerDraw[1][playerid], 50);
	PlayerTextDrawUseBox(playerid, RenklerDraw[1][playerid], 1);
	PlayerTextDrawSetProportional(playerid, RenklerDraw[1][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, RenklerDraw[1][playerid], 0);

	Bilgi[playerid] = CreatePlayerTextDraw(playerid, 319.063079, 383.833343, "bilgimesaji");
	PlayerTextDrawLetterSize(playerid, Bilgi[playerid], 0.243850, 1.197500);
	PlayerTextDrawAlignment(playerid, Bilgi[playerid], 2);
	PlayerTextDrawColor(playerid, Bilgi[playerid], -1);
	PlayerTextDrawSetShadow(playerid, Bilgi[playerid], 0);
	PlayerTextDrawSetOutline(playerid, Bilgi[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, Bilgi[playerid], 51);
	PlayerTextDrawFont(playerid, Bilgi[playerid], 2);
	PlayerTextDrawSetProportional(playerid, Bilgi[playerid], 1);

	oyuncuData[playerid][oTextdraw][2] = CreatePlayerTextDraw(playerid, 644.000000, 1.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, oyuncuData[playerid][oTextdraw][2], 255);
	PlayerTextDrawFont(playerid, oyuncuData[playerid][oTextdraw][2], 1);
	PlayerTextDrawLetterSize(playerid, oyuncuData[playerid][oTextdraw][2], 0.530000, 51.000000);
	PlayerTextDrawColor(playerid, oyuncuData[playerid][oTextdraw][2], -1);
	PlayerTextDrawSetOutline(playerid, oyuncuData[playerid][oTextdraw][2], 0);
	PlayerTextDrawSetProportional(playerid, oyuncuData[playerid][oTextdraw][2], 1);
	PlayerTextDrawSetShadow(playerid, oyuncuData[playerid][oTextdraw][2], 1);
	PlayerTextDrawUseBox(playerid, oyuncuData[playerid][oTextdraw][2], 1);
	PlayerTextDrawBoxColor(playerid, oyuncuData[playerid][oTextdraw][2], 119);
	PlayerTextDrawTextSize(playerid, oyuncuData[playerid][oTextdraw][2], -6.000000, 30.000000);
	PlayerTextDrawSetSelectable(playerid, oyuncuData[playerid][oTextdraw][2], 0);

	AracGosterge[0][playerid] = CreatePlayerTextDraw(playerid, 532.000000, 123.000000, "~y~benzin:");
	PlayerTextDrawFont(playerid, AracGosterge[0][playerid], 3);
	PlayerTextDrawLetterSize(playerid, AracGosterge[0][playerid], 0.383332, 0.850000);
	PlayerTextDrawTextSize(playerid, AracGosterge[0][playerid], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, AracGosterge[0][playerid], 1);
	PlayerTextDrawSetShadow(playerid, AracGosterge[0][playerid], 0);
	PlayerTextDrawAlignment(playerid, AracGosterge[0][playerid], 2);
	PlayerTextDrawColor(playerid, AracGosterge[0][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, AracGosterge[0][playerid], 255);
	PlayerTextDrawBoxColor(playerid, AracGosterge[0][playerid], 0);
	PlayerTextDrawUseBox(playerid, AracGosterge[0][playerid], 1);
	PlayerTextDrawSetProportional(playerid, AracGosterge[0][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, AracGosterge[0][playerid], 0);

	AracGosterge[1][playerid] = CreatePlayerTextDraw(playerid, 556.000000, 137.000000, "~y~kilometre:");
	PlayerTextDrawFont(playerid, AracGosterge[1][playerid], 3);
	PlayerTextDrawLetterSize(playerid, AracGosterge[1][playerid], 0.383332, 0.850000);
	PlayerTextDrawTextSize(playerid, AracGosterge[1][playerid], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, AracGosterge[1][playerid], 1);
	PlayerTextDrawSetShadow(playerid, AracGosterge[1][playerid], 0);
	PlayerTextDrawAlignment(playerid, AracGosterge[1][playerid], 3);
	PlayerTextDrawColor(playerid, AracGosterge[1][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, AracGosterge[1][playerid], 255);
	PlayerTextDrawBoxColor(playerid, AracGosterge[1][playerid], 0);
	PlayerTextDrawUseBox(playerid, AracGosterge[1][playerid], 1);
	PlayerTextDrawSetProportional(playerid, AracGosterge[1][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, AracGosterge[1][playerid], 0);

	AracGosterge[2][playerid] = CreatePlayerTextDraw(playerid, 544.000000, 108.000000, "~y~hiz:");
	PlayerTextDrawFont(playerid, AracGosterge[2][playerid], 3);
	PlayerTextDrawLetterSize(playerid, AracGosterge[2][playerid], 0.383332, 0.850000);
	PlayerTextDrawTextSize(playerid, AracGosterge[2][playerid], 400.000000, 17.000000);
	PlayerTextDrawSetOutline(playerid, AracGosterge[2][playerid], 1);
	PlayerTextDrawSetShadow(playerid, AracGosterge[2][playerid], 0);
	PlayerTextDrawAlignment(playerid, AracGosterge[2][playerid], 2);
	PlayerTextDrawColor(playerid, AracGosterge[2][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, AracGosterge[2][playerid], 255);
	PlayerTextDrawBoxColor(playerid, AracGosterge[2][playerid], 0);
	PlayerTextDrawUseBox(playerid, AracGosterge[2][playerid], 1);
	PlayerTextDrawSetProportional(playerid, AracGosterge[2][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, AracGosterge[2][playerid], 0);

	AracGosterge[3][playerid] = CreatePlayerTextDraw(playerid, 562.000000, 106.000000, "~w~1 kmh");
	PlayerTextDrawFont(playerid, AracGosterge[3][playerid], 3);
	PlayerTextDrawLetterSize(playerid, AracGosterge[3][playerid], 0.208333, 1.100000);
	PlayerTextDrawTextSize(playerid, AracGosterge[3][playerid], 653.500000, 47.000000);
	PlayerTextDrawSetOutline(playerid, AracGosterge[3][playerid], 1);
	PlayerTextDrawSetShadow(playerid, AracGosterge[3][playerid], 0);
	PlayerTextDrawAlignment(playerid, AracGosterge[3][playerid], 1);
	PlayerTextDrawColor(playerid, AracGosterge[3][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, AracGosterge[3][playerid], 255);
	PlayerTextDrawBoxColor(playerid, AracGosterge[3][playerid], 50);
	PlayerTextDrawUseBox(playerid, AracGosterge[3][playerid], 0);
	PlayerTextDrawSetProportional(playerid, AracGosterge[3][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, AracGosterge[3][playerid], 0);

	AracGosterge[4][playerid] = CreatePlayerTextDraw(playerid, 562.000000, 121.000000, "~w~1 lt");
	PlayerTextDrawFont(playerid, AracGosterge[4][playerid], 3);
	PlayerTextDrawLetterSize(playerid, AracGosterge[4][playerid], 0.208333, 1.100000);
	PlayerTextDrawTextSize(playerid, AracGosterge[4][playerid], 653.500000, 47.000000);
	PlayerTextDrawSetOutline(playerid, AracGosterge[4][playerid], 1);
	PlayerTextDrawSetShadow(playerid, AracGosterge[4][playerid], 0);
	PlayerTextDrawAlignment(playerid, AracGosterge[4][playerid], 1);
	PlayerTextDrawColor(playerid, AracGosterge[4][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, AracGosterge[4][playerid], 255);
	PlayerTextDrawBoxColor(playerid, AracGosterge[4][playerid], 50);
	PlayerTextDrawUseBox(playerid, AracGosterge[4][playerid], 0);
	PlayerTextDrawSetProportional(playerid, AracGosterge[4][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, AracGosterge[4][playerid], 0);

	AracGosterge[5][playerid] = CreatePlayerTextDraw(playerid, 562.000000, 135.000000, "~w~1 km");
	PlayerTextDrawFont(playerid, AracGosterge[5][playerid], 3);
	PlayerTextDrawLetterSize(playerid, AracGosterge[5][playerid], 0.208333, 1.100000);
	PlayerTextDrawTextSize(playerid, AracGosterge[5][playerid], 653.500000, 47.000000);
	PlayerTextDrawSetOutline(playerid, AracGosterge[5][playerid], 1);
	PlayerTextDrawSetShadow(playerid, AracGosterge[5][playerid], 0);
	PlayerTextDrawAlignment(playerid, AracGosterge[5][playerid], 1);
	PlayerTextDrawColor(playerid, AracGosterge[5][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, AracGosterge[5][playerid], 255);
	PlayerTextDrawBoxColor(playerid, AracGosterge[5][playerid], 50);
	PlayerTextDrawUseBox(playerid, AracGosterge[5][playerid], 0);
	PlayerTextDrawSetProportional(playerid, AracGosterge[5][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, AracGosterge[5][playerid], 0);

	ATMTextDraw[0][playerid] = CreatePlayerTextDraw(playerid, 321.000000, 116.000000, "_");
	PlayerTextDrawFont(playerid, ATMTextDraw[0][playerid], 1);
	PlayerTextDrawLetterSize(playerid, ATMTextDraw[0][playerid], 0.600000, 24.350002);
	PlayerTextDrawTextSize(playerid, ATMTextDraw[0][playerid], 304.000000, 315.000000);
	PlayerTextDrawSetOutline(playerid, ATMTextDraw[0][playerid], 1);
	PlayerTextDrawSetShadow(playerid, ATMTextDraw[0][playerid], 0);
	PlayerTextDrawAlignment(playerid, ATMTextDraw[0][playerid], 2);
	PlayerTextDrawColor(playerid, ATMTextDraw[0][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, ATMTextDraw[0][playerid], 255);
	PlayerTextDrawBoxColor(playerid, ATMTextDraw[0][playerid], -21);
	PlayerTextDrawUseBox(playerid, ATMTextDraw[0][playerid], 1);
	PlayerTextDrawSetProportional(playerid, ATMTextDraw[0][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, ATMTextDraw[0][playerid], 0);

	ATMTextDraw[1][playerid] = CreatePlayerTextDraw(playerid, 163.000000, 162.000000, "_");
	PlayerTextDrawFont(playerid, ATMTextDraw[1][playerid], 1);
	PlayerTextDrawLetterSize(playerid, ATMTextDraw[1][playerid], 0.600000, 0.349999);
	PlayerTextDrawTextSize(playerid, ATMTextDraw[1][playerid], 478.500000, 77.500000);
	PlayerTextDrawSetOutline(playerid, ATMTextDraw[1][playerid], 1);
	PlayerTextDrawSetShadow(playerid, ATMTextDraw[1][playerid], 0);
	PlayerTextDrawAlignment(playerid, ATMTextDraw[1][playerid], 1);
	PlayerTextDrawColor(playerid, ATMTextDraw[1][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, ATMTextDraw[1][playerid], 255);
	PlayerTextDrawBoxColor(playerid, ATMTextDraw[1][playerid], 111);
	PlayerTextDrawUseBox(playerid, ATMTextDraw[1][playerid], 1);
	PlayerTextDrawSetProportional(playerid, ATMTextDraw[1][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, ATMTextDraw[1][playerid], 0);

	ATMTextDraw[2][playerid] = CreatePlayerTextDraw(playerid, 321.000000, 126.000000, "~l~VICE~r~BANK");
	PlayerTextDrawFont(playerid, ATMTextDraw[2][playerid], 2);
	PlayerTextDrawLetterSize(playerid, ATMTextDraw[2][playerid], 0.604165, 2.249999);
	PlayerTextDrawTextSize(playerid, ATMTextDraw[2][playerid], 400.000000, 294.000000);
	PlayerTextDrawSetOutline(playerid, ATMTextDraw[2][playerid], 0);
	PlayerTextDrawSetShadow(playerid, ATMTextDraw[2][playerid], 0);
	PlayerTextDrawAlignment(playerid, ATMTextDraw[2][playerid], 2);
	PlayerTextDrawColor(playerid, ATMTextDraw[2][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, ATMTextDraw[2][playerid], 255);
	PlayerTextDrawBoxColor(playerid, ATMTextDraw[2][playerid], 55);
	PlayerTextDrawUseBox(playerid, ATMTextDraw[2][playerid], 1);
	PlayerTextDrawSetProportional(playerid, ATMTextDraw[2][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, ATMTextDraw[2][playerid], 0);

	ATMTextDraw[3][playerid] = CreatePlayerTextDraw(playerid, 321.000000, 180.000000, "Hesap Bilgileri");
	PlayerTextDrawFont(playerid, ATMTextDraw[3][playerid], 2);
	PlayerTextDrawLetterSize(playerid, ATMTextDraw[3][playerid], 0.279166, 1.500000);
	PlayerTextDrawTextSize(playerid, ATMTextDraw[3][playerid], 7.500000, 134.000000);
	PlayerTextDrawSetOutline(playerid, ATMTextDraw[3][playerid], 0);
	PlayerTextDrawSetShadow(playerid, ATMTextDraw[3][playerid], 1);
	PlayerTextDrawAlignment(playerid, ATMTextDraw[3][playerid], 2);
	PlayerTextDrawColor(playerid, ATMTextDraw[3][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, ATMTextDraw[3][playerid], 255);
	PlayerTextDrawBoxColor(playerid, ATMTextDraw[3][playerid], 50);
	PlayerTextDrawUseBox(playerid, ATMTextDraw[3][playerid], 1);
	PlayerTextDrawSetProportional(playerid, ATMTextDraw[3][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, ATMTextDraw[3][playerid], 1);

	ATMTextDraw[4][playerid] = CreatePlayerTextDraw(playerid, 321.000000, 210.000000, "PARA CEK");
	PlayerTextDrawFont(playerid, ATMTextDraw[4][playerid], 2);
	PlayerTextDrawLetterSize(playerid, ATMTextDraw[4][playerid], 0.279166, 1.500000);
	PlayerTextDrawTextSize(playerid, ATMTextDraw[4][playerid], 7.500000, 134.000000);
	PlayerTextDrawSetOutline(playerid, ATMTextDraw[4][playerid], 0);
	PlayerTextDrawSetShadow(playerid, ATMTextDraw[4][playerid], 1);
	PlayerTextDrawAlignment(playerid, ATMTextDraw[4][playerid], 2);
	PlayerTextDrawColor(playerid, ATMTextDraw[4][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, ATMTextDraw[4][playerid], 255);
	PlayerTextDrawBoxColor(playerid, ATMTextDraw[4][playerid], 50);
	PlayerTextDrawUseBox(playerid, ATMTextDraw[4][playerid], 1);
	PlayerTextDrawSetProportional(playerid, ATMTextDraw[4][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, ATMTextDraw[4][playerid], 1);

	ATMTextDraw[5][playerid] = CreatePlayerTextDraw(playerid, 321.000000, 240.000000, "PARA YATIR");
	PlayerTextDrawFont(playerid, ATMTextDraw[5][playerid], 2);
	PlayerTextDrawLetterSize(playerid, ATMTextDraw[5][playerid], 0.279166, 1.500000);
	PlayerTextDrawTextSize(playerid, ATMTextDraw[5][playerid], 7.500000, 134.000000);
	PlayerTextDrawSetOutline(playerid, ATMTextDraw[5][playerid], 0);
	PlayerTextDrawSetShadow(playerid, ATMTextDraw[5][playerid], 1);
	PlayerTextDrawAlignment(playerid, ATMTextDraw[5][playerid], 2);
	PlayerTextDrawColor(playerid, ATMTextDraw[5][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, ATMTextDraw[5][playerid], 255);
	PlayerTextDrawBoxColor(playerid, ATMTextDraw[5][playerid], 50);
	PlayerTextDrawUseBox(playerid, ATMTextDraw[5][playerid], 1);
	PlayerTextDrawSetProportional(playerid, ATMTextDraw[5][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, ATMTextDraw[5][playerid], 1);

	ATMTextDraw[6][playerid] = CreatePlayerTextDraw(playerid, 321.000000, 270.000000, "HAVALE");
	PlayerTextDrawFont(playerid, ATMTextDraw[6][playerid], 2);
	PlayerTextDrawLetterSize(playerid, ATMTextDraw[6][playerid], 0.279166, 1.500000);
	PlayerTextDrawTextSize(playerid, ATMTextDraw[6][playerid], 7.500000, 134.000000);
	PlayerTextDrawSetOutline(playerid, ATMTextDraw[6][playerid], 0);
	PlayerTextDrawSetShadow(playerid, ATMTextDraw[6][playerid], 1);
	PlayerTextDrawAlignment(playerid, ATMTextDraw[6][playerid], 2);
	PlayerTextDrawColor(playerid, ATMTextDraw[6][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, ATMTextDraw[6][playerid], 255);
	PlayerTextDrawBoxColor(playerid, ATMTextDraw[6][playerid], 50);
	PlayerTextDrawUseBox(playerid, ATMTextDraw[6][playerid], 1);
	PlayerTextDrawSetProportional(playerid, ATMTextDraw[6][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, ATMTextDraw[6][playerid], 1);

	ATMTextDraw[7][playerid] = CreatePlayerTextDraw(playerid, 163.000000, 298.000000, "_");
	PlayerTextDrawFont(playerid, ATMTextDraw[7][playerid], 0);
	PlayerTextDrawLetterSize(playerid, ATMTextDraw[7][playerid], 0.600000, 0.349999);
	PlayerTextDrawTextSize(playerid, ATMTextDraw[7][playerid], 478.500000, 77.500000);
	PlayerTextDrawSetOutline(playerid, ATMTextDraw[7][playerid], 1);
	PlayerTextDrawSetShadow(playerid, ATMTextDraw[7][playerid], 0);
	PlayerTextDrawAlignment(playerid, ATMTextDraw[7][playerid], 1);
	PlayerTextDrawColor(playerid, ATMTextDraw[7][playerid], -1);
	PlayerTextDrawBackgroundColor(playerid, ATMTextDraw[7][playerid], 255);
	PlayerTextDrawBoxColor(playerid, ATMTextDraw[7][playerid], 111);
	PlayerTextDrawUseBox(playerid, ATMTextDraw[7][playerid], 1);
	PlayerTextDrawSetProportional(playerid, ATMTextDraw[7][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, ATMTextDraw[7][playerid], 0);

	ATMTextDraw[8][playerid] = CreatePlayerTextDraw(playerid, 444.000000, 315.000000, "IPTAL ET");
	PlayerTextDrawFont(playerid, ATMTextDraw[8][playerid], 2);
	PlayerTextDrawLetterSize(playerid, ATMTextDraw[8][playerid], 0.279166, 1.500000);
	PlayerTextDrawTextSize(playerid, ATMTextDraw[8][playerid], 8.000000, 53.000000);
	PlayerTextDrawSetOutline(playerid, ATMTextDraw[8][playerid], 0);
	PlayerTextDrawSetShadow(playerid, ATMTextDraw[8][playerid], 0);
	PlayerTextDrawAlignment(playerid, ATMTextDraw[8][playerid], 2);
	PlayerTextDrawColor(playerid, ATMTextDraw[8][playerid], -1523963137);
	PlayerTextDrawBackgroundColor(playerid, ATMTextDraw[8][playerid], 255);
	PlayerTextDrawBoxColor(playerid, ATMTextDraw[8][playerid], 50);
	PlayerTextDrawUseBox(playerid, ATMTextDraw[8][playerid], 1);
	PlayerTextDrawSetProportional(playerid, ATMTextDraw[8][playerid], 1);
	PlayerTextDrawSetSelectable(playerid, ATMTextDraw[8][playerid], 1);
	return 1;
}

stock ObjeleriYarat()
{
	HavaAlaniKapi[0] = CreateDynamicObject(988, 1964.48792, -2189.76563, 13.55250,   0.00000, 0.00000, 180.00000);
	HavaAlaniKapi[1] = CreateDynamicObject(988, 1958.99146, -2189.76563, 13.56700,   0.00000, 0.00000, 180.00000);
	return 1;
}

stock oyuncuDataleri(gosterilenid, oyuncuid)
{
	static ustlevel, yazi[144], bilgimesaji[1152], hesapdurumu[16], vipdurumu[16];
	static birlik[64], rutbe[64],firma[64], firmarutbe[64], uniforma[6], kiyafet;
	ustlevel = oyuncuData[oyuncuid][oSeviye] + 1;
	ustlevel = ustlevel * levelexp;
	if(oyuncuData[oyuncuid][oBirlik] > -1) {
		format(birlik, sizeof(birlik), "%s", BirlikBilgi[oyuncuData[oyuncuid][oBirlik]][birlikAd]);
		format(rutbe, sizeof(rutbe), "%s", OyuncuRutbeAdi(oyuncuid));
	}
	else if(oyuncuData[oyuncuid][oBirlik] == -1) birlik = "Yok", rutbe = "Yok";
	if(oyuncuData[oyuncuid][oFirma] > -1) {
		format(firma, sizeof(firma), "%s", FirmaInfo[oyuncuData[oyuncuid][oFirma]][fIsim]);
		format(firmarutbe, sizeof(firmarutbe), "%s", GetFirmaRutbe(oyuncuid));
	}
	else if(oyuncuData[oyuncuid][oFirma] == -1) firma = "Yok", firmarutbe = "Yok";
	switch(oyuncuData[oyuncuid][oGeciciKiyafet]) {
		case 0: uniforma = "Yok";
		default: {
			if(oyuncuData[oyuncuid][oGeciciKiyafet] >= 20000) format(uniforma, sizeof(uniforma), "%d", oyuncuData[oyuncuid][oGeciciKiyafet] - 19689);
			else if(oyuncuData[oyuncuid][oGeciciKiyafet] < 20000) format(uniforma, sizeof(uniforma), "%d", oyuncuData[oyuncuid][oGeciciKiyafet]);
		}
	}
	switch(oyuncuData[oyuncuid][oVIP])
	{
		case 1: vipdurumu = "VIP";
		default: vipdurumu = "Yok";
	}
	if(oyuncuData[oyuncuid][oAdmin] > 0) format(hesapdurumu, sizeof(hesapdurumu), "%s", adminlevelisim(oyuncuid, oyuncuData[oyuncuid][oAdmin]));
	else if(oyuncuData[oyuncuid][oHelper] > 0) hesapdurumu = "Tester";
	else if(oyuncuData[oyuncuid][oAdmin] < 1 && oyuncuData[oyuncuid][oHelper] < 1) hesapdurumu = "Oyuncu";
	bilgimesaji[0] = 0;
	new karakterdurumu[64];
	switch(oyuncuData[oyuncuid][oKarakterDurum])
	{
		case 1: karakterdurumu = "ANA KARAKTER";
		case 2: karakterdurumu = "ALT KARAKTER";
		default: karakterdurumu = "BÝLÝNMEYEN KARAKTER";
	}
	SCM_Ex(gosterilenid, 0xAA00FFFF, "________________[%s]________________", karakterdurumu);
	format(yazi, sizeof(yazi), "|| Karakter: %s | Seviye: %d | Seviye EXP: %d/%d | Kýyafet: %d | Üniforma: %s ||\n", OyuncuIsim(oyuncuid), oyuncuData[oyuncuid][oSeviye], oyuncuData[oyuncuid][oExp], ustlevel, kiyafet, uniforma);
	SCM_Ex(gosterilenid, RENK_KOYUMAVI, "%s", yazi);
	format(yazi, sizeof(yazi), "|| Cinsiyet: %s | Doðum Tarihi: %s | Doðum Yeri: %s | Ten Rengi: %s ||\n", (oyuncuData[oyuncuid][oCinsiyet] == 1) ? ("Erkek") : ("Kadýn"), oyuncuData[oyuncuid][oDogumTarihi], oyuncuData[oyuncuid][oDogumYeri], (oyuncuData[oyuncuid][oTenRengi] == 1) ? ("Beyaz") : ("Siyah"));
	SCM_Ex(gosterilenid, RENK_GRI, "%s", yazi);
	format(yazi, sizeof(yazi), "|| SQL ID: %d | Para: %s | Oynama Saati: %d | Hesap: %s ||\n", oyuncuData[oyuncuid][oID], NumaraFormati(oyuncuData[oyuncuid][oPara]), oyuncuData[oyuncuid][oOynamaSaati], hesapdurumu);
	SCM_Ex(gosterilenid, RENK_KOYUMAVI, "%s", yazi);
	format(yazi, sizeof(yazi), "|| Birlik: %s | Rütbe: %s | Forum Adý:%s || VIP Durumu: %s\n", birlik, rutbe, oyuncuData[oyuncuid][oForumAdi], vipdurumu);
	SCM_Ex(gosterilenid, RENK_GRI, "%s", yazi);
	format(yazi, sizeof(yazi), "|| Telefon: %s | Telefon Numarasý: %d | Banka Hesabý: %s | Hesap No: %d || Mevduat: %s\n", (oyuncuData[oyuncuid][oTelefon] == 0) ? ("Yok") : ("Mevcut"), oyuncuData[oyuncuid][oTelefonNumarasi], NumaraFormati(oyuncuData[oyuncuid][oBankaPara]), oyuncuData[oyuncuid][oHesapNumarasi],NumaraFormati(oyuncuData[oyuncuid][oMevduat]));
	SCM_Ex(gosterilenid, RENK_KOYUMAVI, "%s", yazi);
	format(yazi, sizeof(yazi), "|| Market Bakiyesi: %s | Son Giriþ: %s | Meslek: %s ||\n", NumaraFormati(oyuncuData[oyuncuid][oVicePoint]), oyuncuData[oyuncuid][oSonGiris], MeslekIsim(oyuncuData[oyuncuid][oMeslek]));
	SCM_Ex(gosterilenid, RENK_GRI, "%s", yazi);
	format(yazi, sizeof(yazi), "|| Payday: %d dakika | Maaþ: %d dakika | Firma: %s | Firma Rütbe: %s | Baðýmlýlýk: %d ||\n", 60 - oyuncuData[oyuncuid][oDakika], 60 - oyuncuData[oyuncuid][oMaasDakika], firma, firmarutbe, oyuncuData[oyuncuid][oBagimlilik]);
	SCM_Ex(gosterilenid, RENK_KOYUMAVI, "%s", yazi);
	//strcat(bilgimesaji, yazi);
	//DialogGoster(gosterilenid, 0, DIALOG_STYLE_MSGBOX, OyuncuIsim(oyuncuid), bilgimesaji, "Kapat", "");
	return 1;
}

stock OyuncuEnvanter(gosterilenid, oyuncuid)
{
	new yazi[144];
	format(yazi, sizeof(yazi), "(( Vantilatör: %s | Lamba: %s | Tohum: %s | Odun: %s ))\n", NumaraFormati(oyuncuData[oyuncuid][oVantilator], ""), NumaraFormati(oyuncuData[oyuncuid][oLamba], ""), NumaraFormati(oyuncuData[oyuncuid][oTohum], ""), NumaraFormati(oyuncuData[oyuncuid][oOdun], ""));
	SCM_Ex(gosterilenid, RENK_KARAKTER, "%s", yazi);
	format(yazi, sizeof(yazi), "(( Çakmak: %s | Sigara: %s | Gübre: %s | Saksý: %s ))\n", (oyuncuData[oyuncuid][oCakmak] == false) ? ("Yok") : ("Mevcut"), NumaraFormati(oyuncuData[oyuncuid][oSigara], ""), NumaraFormati(oyuncuData[oyuncuid][oGubre], ""), NumaraFormati(oyuncuData[oyuncuid][oSaksi], ""));
	SCM_Ex(gosterilenid, RENK_BEYAZ, "%s", yazi);

	return 1;
}

stock OyuncuRutbeAdi(oyuncuid)
{
	static rutbe[64];
	switch(oyuncuData[oyuncuid][oBirlikRutbe]) {
		case 1: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[oyuncuData[oyuncuid][oBirlik]][birlikR1]);
		case 2: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[oyuncuData[oyuncuid][oBirlik]][birlikR2]);
		case 3: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[oyuncuData[oyuncuid][oBirlik]][birlikR3]);
		case 4: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[oyuncuData[oyuncuid][oBirlik]][birlikR4]);
		case 5: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[oyuncuData[oyuncuid][oBirlik]][birlikR5]);
		case 6: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[oyuncuData[oyuncuid][oBirlik]][birlikR6]);
		case 7: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[oyuncuData[oyuncuid][oBirlik]][birlikR7]);
		case 8: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[oyuncuData[oyuncuid][oBirlik]][birlikR8]);
		case 9: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[oyuncuData[oyuncuid][oBirlik]][birlikR9]);
		case 10: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[oyuncuData[oyuncuid][oBirlik]][birlikR10]);
		case 11: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[oyuncuData[oyuncuid][oBirlik]][birlikR11]);
		case 12: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[oyuncuData[oyuncuid][oBirlik]][birlikR12]);
		case 13: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[oyuncuData[oyuncuid][oBirlik]][birlikR13]);
		case 14: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[oyuncuData[oyuncuid][oBirlik]][birlikR14]);
		case 15: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[oyuncuData[oyuncuid][oBirlik]][birlikR15]);
		case 16: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[oyuncuData[oyuncuid][oBirlik]][birlikR16]);
		case 17: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[oyuncuData[oyuncuid][oBirlik]][birlikR17]);
		case 18: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[oyuncuData[oyuncuid][oBirlik]][birlikR18]);
		case 19: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[oyuncuData[oyuncuid][oBirlik]][birlikR19]);
		case 20: format(rutbe, sizeof(rutbe), "%s", BirlikBilgi[oyuncuData[oyuncuid][oBirlik]][birlikR20]);
		default: format(rutbe, sizeof(rutbe), "Yok");
	}
	return rutbe;
}

stock SQL_ReturnEscaped(const mesaj[])
{
	static geri[256];
	mysql_escape_string(mesaj, geri);
	return geri;
}

stock SohbetTemizle(playerid, bool:istek)
{
	for(new i = 0; i < 100; i++) SendClientMessage(playerid, RENK_BEYAZ, " ");
		if(istek == true) return SunucuMesaji(playerid, "Chatbox baþarýyla temizlendi.");
	return true;
}

stock Boombox_URLAyarla(playerid, url[])
{
	if(BoomboxBilgi[playerid][boomboxKullanimda])
	{
		strpack(BoomboxBilgi[playerid][boomboxURL], url, 128 char);
		foreach (new i : Player) if(oyuncuData[i][oBoombox] == playerid)
		{
			StopAudioStreamForPlayer(i);
			PlayAudioStreamForPlayer(i, url, BoomboxBilgi[playerid][boomboxPos][0], BoomboxBilgi[playerid][boomboxPos][1], BoomboxBilgi[playerid][boomboxPos][2], 30.0, 1);
		}
	}
	return 1;
}

stock Boombox_Yakin(playerid)
{
	foreach (new i : Player) if(BoomboxBilgi[i][boomboxKullanimda] && GetPlayerInterior(playerid) == BoomboxBilgi[i][boomboxInterior] && GetPlayerVirtualWorld(playerid) == BoomboxBilgi[i][boomboxWorld] && IsPlayerInRangeOfPoint(playerid, 30.0, BoomboxBilgi[i][boomboxPos][0], BoomboxBilgi[i][boomboxPos][1], BoomboxBilgi[i][boomboxPos][2])) {
		return i;
	}
	return INVALID_PLAYER_ID;
}

stock Bina_Yakin(playerid)
{
	for (new i = 0; i != MAKSIMUM_BINA; i ++) if(BinaBilgi[i][bKullanimda] && IsPlayerInRangeOfPoint(playerid, 2.5, BinaBilgi[i][bPos][0], BinaBilgi[i][bPos][1], BinaBilgi[i][bPos][2]))
	{
		if(GetPlayerInterior(playerid) == BinaBilgi[i][bDisInt] && GetPlayerVirtualWorld(playerid) == BinaBilgi[i][bDisVW])
			return i;
	}
	return -1;
}

stock Ev_Yakin(playerid)
{
	for (new i = 0; i != MAKSIMUM_EV; i ++) if(EvBilgi[i][evKullanimda] && IsPlayerInRangeOfPoint(playerid, 2.5, EvBilgi[i][evPos][0], EvBilgi[i][evPos][1], EvBilgi[i][evPos][2]))
	{
		if(GetPlayerInterior(playerid) == EvBilgi[i][evDisInt] && GetPlayerVirtualWorld(playerid) == EvBilgi[i][evDisVW])
			return i;
	}
	return -1;
}

stock Tutuklama_Yakin(playerid)
{
	for (new i = 0; i != MAKSIMUM_TUTUKLAMANOKTASI; i ++) if(TutuklamaNoktasi[i][tKullanimda] && IsPlayerInRangeOfPoint(playerid, 3.0, TutuklamaNoktasi[i][tPos][0], TutuklamaNoktasi[i][tPos][1], TutuklamaNoktasi[i][tPos][2]))
	{
		if(GetPlayerInterior(playerid) == TutuklamaNoktasi[i][tInterior] && GetPlayerVirtualWorld(playerid) == TutuklamaNoktasi[i][tWorld])
			return i;
	}
	return -1;
}

stock Uyusturucu_Yakin(playerid)
{
	for(new i = 0; i != MAKSIMUM_UYUSTURUCU; i ++) if(UyusturucuBilgi[i][uKullanimda] && IsPlayerInRangeOfPoint(playerid, 2.5, UyusturucuBilgi[i][uPos][0], UyusturucuBilgi[i][uPos][1], UyusturucuBilgi[i][uPos][2]))
	{
		if(GetPlayerInterior(playerid) == UyusturucuBilgi[i][uInterior] && GetPlayerVirtualWorld(playerid) == UyusturucuBilgi[i][uWorld])
			return i;
	}
	return -1;
}

stock Isyeri_Yakin(playerid)
{
	for (new i = 0; i != MAKSIMUM_ISYERI; i ++) if(IsyeriBilgi[i][isyeriKullanimda] && IsPlayerInRangeOfPoint(playerid, 2.5, IsyeriBilgi[i][isyeriPos][0], IsyeriBilgi[i][isyeriPos][1], IsyeriBilgi[i][isyeriPos][2]))
	{
		if(GetPlayerInterior(playerid) == IsyeriBilgi[i][isyeriDisInt] && GetPlayerVirtualWorld(playerid) == IsyeriBilgi[i][isyeriDisVW])
			return i;
	}
	return -1;
}

stock Oyuncu_Isyerinde(playerid)
{
	for (new i = 0; i != MAKSIMUM_ISYERI; i ++) if(IsyeriBilgi[i][isyeriKullanimda] && GetPlayerInterior(playerid) == IsyeriBilgi[i][isyeriInterior] && GetPlayerVirtualWorld(playerid) == IsyeriBilgi[i][isyeriVW]) {
		return i;
	}
	return -1;
}

stock Oyuncu_IsyeriKapida(playerid, Float:uzaklik = 2.5)
{
	for (new i = 0; i != MAKSIMUM_ISYERI; i ++) if(IsyeriBilgi[i][isyeriKullanimda] && IsPlayerInRangeOfPoint(playerid, uzaklik, IsyeriBilgi[i][isyeriIcPos][0], IsyeriBilgi[i][isyeriIcPos][1], IsyeriBilgi[i][isyeriIcPos][2]))
	{
		if(GetPlayerInterior(playerid) == IsyeriBilgi[i][isyeriInterior] && GetPlayerVirtualWorld(playerid) == IsyeriBilgi[i][isyeriVW])
			return i;
	}
	return -1;
}

stock Oyuncu_EvKapida(playerid)
{
	for (new i = 0; i != MAKSIMUM_EV; i ++) if(EvBilgi[i][evKullanimda] && IsPlayerInRangeOfPoint(playerid, 2.5, EvBilgi[i][evIcPos][0], EvBilgi[i][evIcPos][1], EvBilgi[i][evIcPos][2]))
	{
		if(GetPlayerInterior(playerid) == EvBilgi[i][evInterior] && GetPlayerVirtualWorld(playerid) == EvBilgi[i][evVW])
			return i;
	}
	return -1;
}

stock Oyuncu_BinaKapida(playerid)
{
	for (new i = 0; i != MAKSIMUM_BINA; i ++) if(BinaBilgi[i][bKullanimda] && IsPlayerInRangeOfPoint(playerid, 2.5, BinaBilgi[i][bIPos][0], BinaBilgi[i][bIPos][1], BinaBilgi[i][bIPos][2]))
	{
		if(GetPlayerInterior(playerid) == BinaBilgi[i][bInterior] && GetPlayerVirtualWorld(playerid) == BinaBilgi[i][bVW])
			return i;
	}
	return -1;
}

stock NoktaBul(playerid)
{
	foreach(new i : Teleportlar)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.5, TeleportData[i][telX], TeleportData[i][telY], TeleportData[i][telZ]) && GetPlayerVirtualWorld(playerid) == TeleportData[i][telVW]) return i;
	}
	return -1;
}

stock NoktaCikisBul(playerid)
{
	foreach(new i : Teleportlar)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.5, TeleportData[i][teldestX], TeleportData[i][teldestY], TeleportData[i][teldestZ]) && (GetPlayerVirtualWorld(playerid) == TeleportData[i][teldestVW])) return i;
	}
	return -1;
}

stock Oyuncu_Binada(playerid)
{
	for (new i = 0; i != MAKSIMUM_BINA; i ++) if(BinaBilgi[i][bKullanimda] && GetPlayerInterior(playerid) == BinaBilgi[i][bInterior] && GetPlayerVirtualWorld(playerid) == BinaBilgi[i][bVW]) {
		return i;
	}
	return -1;
}

stock Meslek_Yakin(playerid)
{
	for (new i = 0; i != MAKSIMUM_MESLEK; i ++) if(MeslekBilgi[i][mKullanimda] && IsPlayerInRangeOfPoint(playerid, 2.5, MeslekBilgi[i][mPos][0], MeslekBilgi[i][mPos][1], MeslekBilgi[i][mPos][2]))
	{
		if(GetPlayerInterior(playerid) == MeslekBilgi[i][mInterior] && GetPlayerVirtualWorld(playerid) == MeslekBilgi[i][mWorld])
			return i;
	}
	return -1;
}

stock Pompa_Yakin(playerid)
{
	for (new i = 0; i < sizeof(PompaVeri); i++) if(IsPlayerInRangeOfPoint(playerid, 4.0, PompaVeri[i][pompX], PompaVeri[i][pompY], PompaVeri[i][pompZ])) {
		return 1;
	}
	return -1;
}

stock adminrenk(playerid)
{
	new str[256];
	switch(oyuncuData[playerid][oAdmin])
	{
		case 1..5:strcat(str, "0DFF00");
		case 6:strcat(str, "A48282");
		case 7:strcat(str, "154671");
		case 8:strcat(str, "B70000");
		default:strcat(str, "0DFF00");
	}
	return str;
}

stock oadminrenk(level)
{
	new str[256];
	switch(level)
	{
		case 1..5:strcat(str, "75BD85");
		case 6:strcat(str, "A48282");
		case 7:strcat(str, "154671");
		case 8:strcat(str, "B70000");
		default:strcat(str, "0DFF00");
	}
	return str;
}

stock RomaRakami(sayi)
{
	new str[50];
	switch(sayi)
	{
		case 0: str = "";
		case 1: str = "I";
		case 2: str = "II";
		case 3: str = "III";
		case 4: str = "IV";
		case 5: str = "V";
		case 6: str = "VI";
		case 7: str = "VII";
		case 8: str = "VIII";
		case 9: str = "IX";
		case 10: str = "X";
	}
	return str;
}

stock adminlevelisim(i, level)
{
	#pragma unused i
	static mesaj[32];
	switch(level)
	{
		case 1..4: mesaj = "Oyun Yetkilisi";
		case 5,6,7: mesaj = "Genel Yetkili";
		case 8: mesaj = "Developer";
		case 9: mesaj = "Yönetici";
		default: mesaj = "Hatali Yetki";
	}
	return mesaj;
}

stock ParaDuzenle(playerid, miktar)
{
	oyuncuData[playerid][oPara] = 0;
	return ParaEkle(playerid, miktar);
}

stock FirmaParaEkle(firmaid, miktar)
{
	new query[120];
	FirmaInfo[firmaid][fKasa] += miktar;
	mysql_format(g_SQL, query, sizeof(query), "UPDATE `firmalar` SET `kasa` = %d WHERE `id` = %i", FirmaInfo[firmaid][fKasa], firmaid);
	mysql_query(g_SQL, query);
}

stock TezgahParaEkle(seyyarid, miktar)
{
	new query[120];
	SeyyarInfo[seyyarid][sKasa] += miktar;
	mysql_format(g_SQL, query, sizeof(query), "UPDATE `seyyarlar` SET `kasa` = %d WHERE `id` = %i", SeyyarInfo[seyyarid][sKasa], seyyarid);
	mysql_query(g_SQL, query);
}


stock ParaEkle(playerid, miktar, yontem = 0)
{
	new para_yontem[32];
	switch(yontem){		
		case YONTEM_PARAVER: para_yontem = "/paraver";
		case YONTEM_ARAC_SAT: para_yontem = "Arac Oyuncuya Satis";
		case YONTEM_ARAC_SISTEME_SAT: para_yontem = "Arac Sisteme Satis";
		case YONTEM_OFFLINE_TRANSFER: para_yontem = "Offline Transfer";
		case YONTEM_KASA_KOY: para_yontem = "Kasaya Koyma";
		case YONTEM_KASA_CEK: para_yontem = "Kasadan Cekme";
		case YONTEM_FIRMAKASA_CEK: para_yontem = "Firma Kasa Cekme";
		case YONTEM_FIRMAKASA_KOY: para_yontem = "Firma Kasa Koyma";
		case YONTEM_APARAVER: para_yontem = "/aparaver";
		case YONTEM_BANKA_PARAYATIR: para_yontem = "Banka Para Yatirma";
		case YONTEM_BANKA_PARACEK: para_yontem = "Banka Para Cekme";
		default: para_yontem = "Bilinmiyor";
	}
	new query[280];
	oyuncuData[playerid][oPara] += miktar;
	Log_Kaydet("loglar/para_ekle.txt", "[%s] (NT_%d) %s - Gelen Para: %s. Yontem: %s", Tarih(), oyuncuData[playerid][oForumID], OyuncuIsim(playerid), NumaraFormati(miktar), para_yontem);
	if(miktar != 0)
	{
		if(miktar < 0)
		{
			format(query, sizeof(query), "~r~~h~%s$", NumaraFormati(miktar));
			GameTextForPlayer(playerid, query, 1500, 1);
		}
		else
		{
			format(query, sizeof(query), "~g~~h~%s$", NumaraFormati(miktar));
			GameTextForPlayer(playerid, query, 1500, 1);
		}
	}
	return GivePlayerMoney(playerid, miktar);
}

stock KickEx(playerid)
{
	SetPVarInt(playerid, "Kick", 1);
	return SetTimerEx("KickTimer", 200, false, "d", playerid);
}

public KickTimer(playerid) return Kick(playerid);

public kanamainterval(playerid)
{
	SetPlayerHealth(playerid,0.0);
	UyariMesaji(playerid, "Kanamanýz devam ederken tedavi olmadýðýnýz için bayýldýnýz.");
	oyuncuData[playerid][oKanama] = 0;
	DestroyDynamic3DTextLabel(KanamaLabeli[playerid]);
	KillTimer(KanamaTimer[playerid]);
	return 1;
}

stock PlatformBul(playerid) { 
	new sonuc;
	for( new o; o != sizeof plant_pos; o ++ )
    {
		if(GetPlayerDistanceFromPoint(playerid, plant_pos[o][0], plant_pos[o][1], plant_pos[o][2]) <= 2.0)
		{
			sonuc = o;
			return sonuc;
		}
    }
	return -1;
}

stock MasaBul(playerid) { 
	new sonuc;
	for( new o; o != sizeof mmasa_pos; o ++ )
    {
		if(GetPlayerDistanceFromPoint(playerid, mmasa_pos[o][0], mmasa_pos[o][1], mmasa_pos[o][2]) <= 2.0)
		{
			sonuc = o;
			return sonuc;
		}
    }
	return -1;
}


stock OyuncuIsim(playerid, tur = 0)
{
	static isim[MAX_PLAYER_NAME + 1];
	GetPlayerName(playerid, isim, sizeof(isim));
	switch(tur)
	{
		case 0:
		{
			if(oyuncuData[playerid][oGazMaskedurum] == 0 && oyuncuData[playerid][oKarMaskedurum] == 0)
			{
				for (new i = 0, len = strlen(isim); i < len; i ++)
				{
					if(isim[i] == '_') isim[i] = ' ';
				}
			}
			else if(oyuncuData[playerid][oGazMaskedurum] == 1) format(isim,sizeof(isim),"%s",oyuncuData[playerid][oGazMaskeisim]);
			else if(oyuncuData[playerid][oKarMaskedurum] == 1) format(isim,sizeof(isim),"%s",oyuncuData[playerid][oKarMaskeisim]);
		}
	}
	return isim;
}

stock OyuncuIsimEx(isim[]) {
	new pname[MAX_PLAYER_NAME];
	format(pname, sizeof(pname), "%s", isim);
	new pos = strfind(pname, "_");
	if(pos != -1) {
		pname[pos] = ' ';
	}

	return pname;
}

forward CozulmeTimer(playerid);
public CozulmeTimer(playerid) {
	oyuncuData[playerid][oEtkisizHalde] = false;
	TogglePlayerControllable(playerid, 1);
}

forward RehberEklendi(playerid, id);
public RehberEklendi(playerid, id)
{
	RehberBilgi[playerid][id][rehberID] = cache_insert_id();
	return 1;
}
function OyuncuBalikTutuyor(playerid)
{
	TogglePlayerControllable(playerid, 1);
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0);
	baliktutuyor[playerid] = false;
	oyuncuData[playerid][oBalikTutmaSinir]++;
	new balikoran = randomEx(1, 11), cikanbalik = randomEx(0, 4);
	if(balikoran < 5)
	{
		SendClientMessage(playerid, RENK_KIRMIZI, "[!] {FFFFFF}Oltaya hiçbir þey takýlmadý.");
	}
	else if(balikoran == 5)
	{
		SendClientMessage(playerid, RENK_YESIL, "[!] {FFFFFF}Oltaya bir inci takýldý, oldukça baþarýlý bir av.");
		oyuncuData[playerid][oBalik][4]++;
	}
	else if(balikoran > 5)
	{
		SCM_Ex(playerid, RENK_KLASIK, "[!] {FFFFFF}Oltaya bir %s takýldý, baþarýlý bir av.", BalikIsim(cikanbalik));
		oyuncuData[playerid][oBalik][cikanbalik]++;
		switch(oyuncuData[playerid][balikseviye])
		{
			case 0:
			{
				oyuncuData[playerid][balikexp]++;
				if(oyuncuData[playerid][balikexp] >= 150)
				{
					oyuncuData[playerid][balikexp] = 0;
					oyuncuData[playerid][balikseviye]++;
					new string[64];
					format(string, sizeof(string), "Balýk tutma ustalýk seviyeniz yükseldi. Yeni seviyeniz: %d", oyuncuData[playerid][balikseviye]);
					SendClientMessage(playerid, RENK_KLASIK, string);
				}
			}
			case 1:
			{
				oyuncuData[playerid][balikexp]++;
				if(oyuncuData[playerid][balikexp] >= 300)
				{
					oyuncuData[playerid][balikexp] = 0;
					oyuncuData[playerid][balikseviye]++;
					new string[64];
					format(string, sizeof(string), "Balýk tutma ustalýk seviyeniz yükseldi. Yeni seviyeniz: %d", oyuncuData[playerid][balikseviye]);
					SendClientMessage(playerid, RENK_KLASIK, string);
				}
			}
			case 2:
			{
				oyuncuData[playerid][balikexp]++;
				if(oyuncuData[playerid][balikexp] >= 450)
				{
					oyuncuData[playerid][balikexp] = 0;
					oyuncuData[playerid][balikseviye]++;
					new string[64];
					format(string, sizeof(string), "Balýk tutma ustalýk seviyeniz yükseldi. Yeni seviyeniz: %d", oyuncuData[playerid][balikseviye]);
					SendClientMessage(playerid, RENK_KLASIK, string);
				}
			}
			case 3:
			{
				oyuncuData[playerid][balikexp]++;
				if(oyuncuData[playerid][balikexp] >= 600)
				{
					oyuncuData[playerid][balikexp] = 0;
					oyuncuData[playerid][balikseviye]++;
					new string[64];
					format(string, sizeof(string), "Balýk tutma ustalýk seviyeniz yükseldi. Yeni seviyeniz: %d", oyuncuData[playerid][balikseviye]);
					SendClientMessage(playerid, RENK_KLASIK, string);
				}
			}
			case 4:
			{
				oyuncuData[playerid][balikexp]++;
				if(oyuncuData[playerid][balikexp] >= 750)
				{
					oyuncuData[playerid][balikexp] = 0;
					oyuncuData[playerid][balikseviye]++;
					new string[64];
					format(string, sizeof(string), "Balýk tutma ustalýk seviyeniz yükseldi. Yeni seviyeniz: %d - Maksimum seviyeye ulaþtýnýz!", oyuncuData[playerid][balikseviye]);
					SendClientMessage(playerid, RENK_KLASIK, string);
				}
			}
		}
	}
	SetPVarInt(playerid, "TeknedeBalikTutuyor", 0);
	DeletePVar(playerid, "TeknedeBalikTutuyor");
	KillTimer(oyuncuData[playerid][oBalikTutmaTimer]);
	return 1;
}

stock TaserKontrol(playerid) return (GetPlayerWeapon(playerid) == 23 && oyuncuData[playerid][oTaser]);
stock BeanbagKontrol(playerid) return (GetPlayerWeapon(playerid) == 25 && oyuncuData[playerid][oBeanbag]);

stock SilahIsim(silahid)
{
	static silahisim[32];
	GetWeaponName(silahid, silahisim, sizeof(silahisim));

	if(!silahid) silahisim = "Yok";
	else if(silahid == 18) silahisim = "Molotov Cocktail";
	else if(silahid == 44) silahisim = "Nightvision";
	else if(silahid == 45) silahisim = "Infrared";
	return silahisim;
}

stock HesapKaydet(playerid)
{
	if(!oyuncuData[playerid][oGiris]) return 0;
	static kaydet[1280];
	format(kaydet, sizeof(kaydet), "UPDATE `hesaplar` SET `Admin` = '%d', `oPremiumSkinBir` = '%d', `oPremiumSkinIki` = '%d', `oPremiumSkinUc` = '%d', `IsimDegisimHakki` = '%d', `OzelSkinAksesuar` = '%d', `PlakaDegisimHakki` = '%d', `TelefonDegisimHakki` = '%d', `BankaHesapDegisimHakki` = '%d', `UcuncuDilHakki` = '%d', `BisikletHakki` = '%d'",
		oyuncuData[playerid][oAdmin],
		oyuncuData[playerid][oPremiumSkin][0],
		oyuncuData[playerid][oPremiumSkin][1],
		oyuncuData[playerid][oPremiumSkin][2],
		oyuncuData[playerid][oIsimDegisimHakki],
		oyuncuData[playerid][oOzelSkinAksesuar],
		oyuncuData[playerid][oPlakaDegisimHakki],
		oyuncuData[playerid][oTelefonDegisimHakki],
		oyuncuData[playerid][oBankaHesapDegisimHakki],
		oyuncuData[playerid][oUcuncuDilHakki],
		oyuncuData[playerid][oBisikletHakki]
		);
	format(kaydet, sizeof(kaydet), "%s , `ViceCoin` = '%d', `VicePoint` = '%d', `BakilanRapor` = '%d', `BakilanSoru` = '%d'",
		kaydet,
		oyuncuData[playerid][oViceCoin],
		oyuncuData[playerid][oVicePoint],
		oyuncuData[playerid][oBakilanRapor],
		oyuncuData[playerid][oBakilanSoru]
		);
	format(kaydet, sizeof(kaydet), "%s , `BesYetenekPuani` = '%d', `OnYetenekPuani` = '%d', `OnBesYetenekPuani` = '%d', `YetenekSifirlamaHakki` = '%d', `OzelSkinAksesuar` = '%d', `ikixpayday` = '%d', `VIP` = '%d' WHERE `forumid` = '%d'",
		kaydet,
		oyuncuData[playerid][oBesYetenekPuani],
		oyuncuData[playerid][oOnYetenekPuani],
		oyuncuData[playerid][oOnBesYetenekPuani],
		oyuncuData[playerid][oYetenekSifirlamaHakki],
		oyuncuData[playerid][oOzelSkinAksesuar],
		oyuncuData[playerid][oikixpayday],
		oyuncuData[playerid][oVIP],
		oyuncuData[playerid][oForumID]
		);
	mysql_tquery(g_SQL, kaydet);
	return 1;
}

stock OyuncuKaydet(playerid)
{
	if(!oyuncuData[playerid][oGiris]) return 0;
	oyuncuData[playerid][oInterior] = GetPlayerInterior(playerid);
	oyuncuData[playerid][oVW] = GetPlayerVirtualWorld(playerid);
	if(GetPVarInt(playerid, "Kick") == 0) GetPlayerPos(playerid, oyuncuData[playerid][oPos][0], oyuncuData[playerid][oPos][1], oyuncuData[playerid][oPos][2]);
	GetPlayerFacingAngle(playerid, oyuncuData[playerid][oPos][3]);
	if(oyuncuData[playerid][oBirlik] > -1) oyuncuData[playerid][oBirlik] = BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikID];
	static kaydet[4240], kaydet2[4240], isimkaydet[256];
		mysql_format(g_SQL, kaydet, sizeof(kaydet), "UPDATE `oyuncular` SET `Kiyafet` = '%d', `oyuncuban` = '%d', `AdminNick` = '%e', `x` = '%.4f', `y` = '%.4f', `z` = '%.4f', `a` = '%.4f', `Can` = '%.4f', `Zirh` = '%.4f', `oKiyafetDolabiBir` = '%d', `oKiyafetDolabiIki` = '%d', `oKiyafetDolabiUc` = '%d', `Helper` = '%d'",
			oyuncuData[playerid][oKiyafet],
			oyuncuData[playerid][oyuncuban],
			oyuncuData[playerid][oAdminNick],
			oyuncuData[playerid][oPos][0],
			oyuncuData[playerid][oPos][1],
			oyuncuData[playerid][oPos][2],
			oyuncuData[playerid][oPos][3],
			oyuncuData[playerid][oCan],
			oyuncuData[playerid][oZirh],
			oyuncuData[playerid][oKiyafetDolabi][0],
			oyuncuData[playerid][oKiyafetDolabi][1],
			oyuncuData[playerid][oKiyafetDolabi][2],
			oyuncuData[playerid][oHelper]
			);
		mysql_format(g_SQL, kaydet, sizeof(kaydet), "%s, `Para` = '%d', `interior` = '%d', `vw` = '%d', `Cinsiyet` = '%d', `Level` = '%d', `Exp` = '%d', `Dakika` = '%d', `MaasDakika` = '%d', `OynamaSaati` = '%d', `DogumYeri` = '%e'",
			kaydet,
			oyuncuData[playerid][oPara],
			oyuncuData[playerid][oInterior],
			oyuncuData[playerid][oVW],
			oyuncuData[playerid][oCinsiyet],
			oyuncuData[playerid][oSeviye],
			oyuncuData[playerid][oExp],
			oyuncuData[playerid][oDakika],
			oyuncuData[playerid][oMaasDakika],
			oyuncuData[playerid][oOynamaSaati],
			oyuncuData[playerid][oDogumYeri]
			);
		mysql_format(g_SQL, kaydet, sizeof(kaydet), "%s, `dogumtarihi` = '%e', `yaratildi` = '%d', `yaralisure` = '%d', `TenRengi` = '%d'",
			kaydet,
			oyuncuData[playerid][oDogumTarihi],
			oyuncuData[playerid][oKarakterYaratildi],
			oyuncuData[playerid][oYaraliSure],
			oyuncuData[playerid][oTenRengi]
			);
		mysql_format(g_SQL, kaydet, sizeof(kaydet), "%s, `isbasi` = '%i', `ForumAdi` = '%e', `GKiyafet` = '%d', `Ehliyet` = '%i', `Kibrit` = '%d', `Cakmak` = '%d', `Odun` = '%d', `HesapNumarasi` = '%d', `oAracCalmaSiniri` = '%d', `Gozalti` = '%d'",
			kaydet,
			oyuncuData[playerid][oIsbasi],
			oyuncuData[playerid][oForumAdi],
			oyuncuData[playerid][oGeciciKiyafet],
			oyuncuData[playerid][oEhliyet],
			oyuncuData[playerid][oKibrit],
			oyuncuData[playerid][oCakmak],
			oyuncuData[playerid][oOdun],
			oyuncuData[playerid][oHesapNumarasi],
			oyuncuData[playerid][oAracCalmaSiniri],
			oyuncuData[playerid][oGozalti]
			//oyuncuData[playerid][oAtYarisi],
			//oyuncuData[playerid][oAtBahis],
			//oyuncuData[playerid][oOynananAt]
			);
		mysql_format(g_SQL, kaydet, sizeof(kaydet), "%s, `Sigara` = '%d', `BankaPara` = '%d', `Telefon` = '%d', `TelefonNumarasi` = '%d', `Gubre` = '%d', `Saksi` = '%d', `Vantilator` = '%d', `GYMHak` = '%d', `BalikTutmaSinir` = '%d', `Kulaklik` = '%d', `Yemler` = '%d', `BalikEXP` = '%d', `BalikSeviye` = '%d', `YetenekPuani` = '%d'",
			kaydet,
			oyuncuData[playerid][oSigara],
			oyuncuData[playerid][oBankaPara],
			oyuncuData[playerid][oTelefon],
			oyuncuData[playerid][oTelefonNumarasi],
			oyuncuData[playerid][oGubre],
			oyuncuData[playerid][oSaksi],
			oyuncuData[playerid][oVantilator],
			oyuncuData[playerid][oGYMHak],
			oyuncuData[playerid][oBalikTutmaSinir],
			oyuncuData[playerid][oKulaklik],
			oyuncuData[playerid][oyemsayisi],
			oyuncuData[playerid][balikexp],
			oyuncuData[playerid][balikseviye],
			oyuncuData[playerid][oYetenekPuani]
			);
		mysql_format(g_SQL, kaydet, sizeof(kaydet), "%s, `Tohum` = '%d', `UyusturucuC` = '%d', `UyusturucuB` = '%d', `UyusturucuA` = '%d', `UyusturucuOnay` = '%d', `oTruckerSeviye` = '%d', `oTruckerEXP` = '%d', `LiderlikYetenek` = '%d', `UretimYetenek` = '%d', `SurusYetenek` = '%d', `KimyaYetenek` = '%d', `HirsizlikYetenek` = '%d', `GucYetenek` = '%d' WHERE `ID` = '%d'",
			kaydet,
			oyuncuData[playerid][oTohum],
			oyuncuData[playerid][oUyusturucu][0],
			oyuncuData[playerid][oUyusturucu][1],
			oyuncuData[playerid][oUyusturucu][2],
			oyuncuData[playerid][oUyusturucuOnay],
			oyuncuData[playerid][oTruckerSeviye],
			oyuncuData[playerid][oTruckerEXP],
			oyuncuData[playerid][oLiderlikYetenek],
			oyuncuData[playerid][oUretimYetenek],
			oyuncuData[playerid][oSurusYetenek],
			oyuncuData[playerid][oKimyaYetenek],
			oyuncuData[playerid][oHirsizlikYetenek],
			oyuncuData[playerid][oGucYetenek],
			oyuncuData[playerid][oID]
			);
		mysql_format(g_SQL, kaydet2, sizeof(kaydet2), "UPDATE `oyuncular` SET `Balik0` = '%d', `Balik1` = '%d', `Balik2` = '%d', `Balik3` = '%d', `Balik4` = '%d', `PDEhliyetUyari` = '%d', `KokuDurum` = '%d', `BirikenKoku` = '%d'",
			oyuncuData[playerid][oBalik][0],
			oyuncuData[playerid][oBalik][1],
			oyuncuData[playerid][oBalik][2],
			oyuncuData[playerid][oBalik][3],
			oyuncuData[playerid][oBalik][4],
			oyuncuData[playerid][oPDEhliyetUyari],
			oyuncuData[playerid][oKokuDurum],
			oyuncuData[playerid][oBirikenKoku]
			);
		mysql_format(g_SQL, kaydet2, sizeof(kaydet2), "%s, `Hapis` = '%d', `ICHapis` = '%d', `VatandaslikNo` = '%d', `Ruhsat` = '%d', `IDHapis` = '%d', `Meslek` = '%d', `EkstraDil` = '%d', `UcuncuDil` = '%d', `LiderlikEXP` = '%d', `UretimEXP` = '%d', `SurusEXP` = '%d', `KimyaEXP` = '%d', `HirsizlikEXP` = '%d', `GucEXP` = '%d', `UcusLisansi` = '%d'",
			kaydet2,
			oyuncuData[playerid][oHapisSure][0],
			oyuncuData[playerid][oHapisSure][1],
			oyuncuData[playerid][oVatandaslikNo],
			oyuncuData[playerid][oRuhsat],
			oyuncuData[playerid][oHapisID],
			oyuncuData[playerid][oMeslek],
			oyuncuData[playerid][oEkstraDil],
			oyuncuData[playerid][oUcuncuDil],
			oyuncuData[playerid][oLiderlikYetenekEXP],
			oyuncuData[playerid][oUretimYetenekEXP],
			oyuncuData[playerid][oSurusYetenekEXP],
			oyuncuData[playerid][oKimyaYetenekEXP],
			oyuncuData[playerid][oHirsizlikYetenekEXP],
			oyuncuData[playerid][oGucYetenekEXP],
			oyuncuData[playerid][oUcusLisansi]
			);
		mysql_format(g_SQL, kaydet2, sizeof(kaydet2), "%s, `boombox` = '%d', `Asansor` = '%d', `Kanama` = '%d', `firma` = '%d', `firmarutbe` = '%d', `mtercih` = '%d', `Dayaniklilik` = '%d', `DayaniklilikEXP` = '%d', `SonGiris` = '%e', `mevduat` = '%d', `talkAnim` = '%d', `bagimlilik` = '%d', `bagimlilikEtki` = '%d' WHERE `ID` = '%d'",
			kaydet2,
			oyuncuData[playerid][oMuzikKutusu],
			oyuncuData[playerid][oAsansor],
			oyuncuData[playerid][oKanama],
			oyuncuData[playerid][oFirma],
			oyuncuData[playerid][oFirmarutbe],
			oyuncuData[playerid][oMedyatercih],
			oyuncuData[playerid][oDayaniklilik],
			oyuncuData[playerid][oDayaniklilikEXP],
			oyuncuData[playerid][oSonGiris],
			oyuncuData[playerid][oMevduat],
			oyuncuData[playerid][oKonusmaAnimasyon],
			oyuncuData[playerid][oBagimlilik],
			oyuncuData[playerid][oBagimlilikEtki],
			oyuncuData[playerid][oID]
			);
		mysql_format(g_SQL, isimkaydet, sizeof(isimkaydet), "UPDATE oyuncular SET isim = '%e' WHERE ID = '%d'", oyuncuData[playerid][oIsim], oyuncuData[playerid][oID]);
		mysql_tquery(g_SQL, isimkaydet);
		mysql_tquery(g_SQL, kaydet);
		mysql_tquery(g_SQL, kaydet2);
		new birlikkaydet[300];
		mysql_format(g_SQL, birlikkaydet, sizeof(birlikkaydet), "UPDATE oyuncular SET `birlik` = '%d', `birlikrutbe` = '%d', `birlikrutbead` = '%e' WHERE ID = '%d'",
		oyuncuData[playerid][oBirlik],
		oyuncuData[playerid][oBirlikRutbe],
		OyuncuRutbeAdi(playerid),
		oyuncuData[playerid][oID]
		);
		mysql_tquery(g_SQL, birlikkaydet);
		return 1;
	}

	stock OyuncuCinsiyetSec(playerid)
	return DialogGoster(playerid, DIALOG_CINSIYET, DIALOG_STYLE_MSGBOX, "{FFFFFF}Kayýt {1ACAFD}» {FFFFFF} Cinsiyet Seç", "{FFFFFF}Oyun içindeki karakterinizin cinsiyetini belirleyin.\n\n\
		{FC4442}Uyarý: {FFFFFF}Cinsiyetinizi doðru seçiniz aksi taktirde 'karakter yapýlandýrma' paketi dýþýnda deðiþtiremezsiniz.", "Erkek", "Bayan");

	stock OyuncuTenRengiSec(playerid)
	return DialogGoster(playerid, DIALOG_TEN_RENGI, DIALOG_STYLE_TABLIST, "{FFFFFF}Kayýt {1ACAFD}» {FFFFFF} Ten Rengi Seç", "Beyaz\nSiyah", "Seç", "");

	stock SCM_Ex(playerid, color, const text[], {Float, _}:...)
	{
		static args, str[150];
		if((args = numargs()) == 3)
		{
			SendClientMessage(playerid, color, text);
		}
		else
		{
			while (--args >= 3)
			{
			#emit LCTRL 5
			#emit LOAD.alt args
			#emit SHL.C.alt 2
			#emit ADD.C 12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
			}
		#emit PUSH.S text
		#emit PUSH.C 144
		#emit PUSH.C str
		#emit PUSH.S 8
		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

			SendSplitMessage(playerid, color, str);

		#emit RETN
		}
		return true;
	}

	stock SendSplitMessage(playerid, color, final[])
	{
		static buffer[EX_SPLITLENGTH + 5], len;
		len = strlen(final);
		if(len > EX_SPLITLENGTH)
		{
			new times = (len/EX_SPLITLENGTH);
			for(new i = 0; i < times+1; i++)
			{
				strdel(buffer, 0, EX_SPLITLENGTH+5);
				if(len-(i*EX_SPLITLENGTH)>EX_SPLITLENGTH)
				{
					strmid(buffer, final, EX_SPLITLENGTH*i, EX_SPLITLENGTH*(i+1));
					format(buffer, sizeof(buffer), "%s ...", buffer);
				}
				else
				{
					strmid(buffer, final, EX_SPLITLENGTH*i, len);
				}
				SendClientMessage(playerid, color, buffer);
			}
		}
		else
		{
			SendClientMessage(playerid, color, final);
		}
	}

	stock FirmaMesaji(firma, mesaj[])
	{
		foreach(new i : Player) {
			if(oyuncuData[i][oFirma] == firma) {
				SendClientMessage(i, RENK_FIRMA, mesaj);
			}
		}
		return 1;
	}


	stock BirlikMesaji(birlikid, renk, const str[], {Float,_}:...)
	{
		static args, start, end, string[144];
	#emit LOAD.S.pri 8
	#emit STOR.pri args

		if(args > 12)
		{
		#emit ADDR.pri str
		#emit STOR.pri start

			for (end = start + (args - 12); end > start; end -= 4)
			{
	        #emit LREF.pri end
	        #emit PUSH.pri
			}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

			foreach (new i : Player) if(oyuncuData[i][oBirlik] == birlikid) {
				SendSplitMessage(i, renk, string);
			}
			return 1;
		}
		foreach (new i : Player) if(oyuncuData[i][oBirlik] == birlikid) {
			SendClientMessage(i, renk, str);
		}
		return 1;
	}

	stock BirlikTelsizMesaji(birlikid, renk, const str[], {Float,_}:...)
	{
		static args, start, end, string[144];
	#emit LOAD.S.pri 8
	#emit STOR.pri args

		if(args > 12)
		{
		#emit ADDR.pri str
		#emit STOR.pri start

			for (end = start + (args - 12); end > start; end -= 4)
			{
	        #emit LREF.pri end
	        #emit PUSH.pri
			}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

			foreach (new i : Player) if(oyuncuData[i][oBirlik] == birlikid) {
				SendSplitMessage(i, renk, string);
			}
			return 1;
		}
		foreach (new i : Player) if(oyuncuData[i][oBirlik] == birlikid) {
			SendClientMessage(i, renk, str);
		}
		return 1;
	}

	stock BirlikPDTelsizMesaji(birlikid, renk, const str[], {Float,_}:...)
	{
		static args, start, end, string[144];
	#emit LOAD.S.pri 8
	#emit STOR.pri args

		if(args > 12)
		{
		#emit ADDR.pri str
		#emit STOR.pri start

			for (end = start + (args - 12); end > start; end -= 4)
			{
	        #emit LREF.pri end
	        #emit PUSH.pri
			}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

			foreach (new i : Player) if(oyuncuData[i][oBirlik] == birlikid && oyuncuData[i][oIsbasi] == true) {
				SendSplitMessage(i, renk, string);
			}
			return 1;
		}
		foreach (new i : Player) if(oyuncuData[i][oBirlik] == birlikid && oyuncuData[i][oIsbasi] == true) {
			SendClientMessage(i, renk, str);
		}
		return 1;
	}

	stock BirlikMesajiEx(tip, color, const str[], {Float,_}:...)
	{
		static args, start, end, string[144];
	#emit LOAD.S.pri 8
	#emit STOR.pri args

		if(args > 12)
		{
		#emit ADDR.pri str
		#emit STOR.pri start

			for (end = start + (args - 12); end > start; end -= 4)
			{
	        #emit LREF.pri end
	        #emit PUSH.pri
			}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

			foreach (new i : Player) if(oyuncuData[i][oBirlik] != -1 && OyuncuBirlikTuru(i) == tip ) {
				SendClientMessage(i, color, string);
			}
			return 1;
		}
		foreach (new i : Player) if(oyuncuData[i][oBirlik] != -1 && OyuncuBirlikTuru(i) == tip) {
			SendClientMessage(i, color, str);
		}
		return 1;
	}

	stock OzelYakinMesaj(playerid, Float:radius, color, const str[], {Float,_}:...)
	{
		static args, start, end, string[144];
	#emit LOAD.S.pri 8
	#emit STOR.pri args

		if(args > 16)
		{
		#emit ADDR.pri str
		#emit STOR.pri start

			for (end = start + (args - 16); end > start; end -= 4)
			{
	        #emit LREF.pri end
	        #emit PUSH.pri
			}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit CONST.alt 4
		#emit SUB
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

			foreach (new i : Player)
			{
				if(YakinlikKontrol(i, playerid, radius)) {
					SendSplitMessage(i, color, string);
				}
			}
			return 1;
		}
		foreach (new i : Player)
		{
			if(YakinlikKontrol(i, playerid, radius)) {
				SendClientMessage(i, color, str);
			}
		}
		return 1;
	}

	stock YoneticiMesaji(color, const str[], {Float,_}:...)
	{
		static args, start, end, string[144];
	#emit LOAD.S.pri 8
	#emit STOR.pri args

		if(args > 8)
		{
		#emit ADDR.pri str
		#emit STOR.pri start

			for (end = start + (args - 8); end > start; end -= 4)
			{
	        #emit LREF.pri end
	        #emit PUSH.pri
			}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

			foreach (new i : Player)
			{
				if(oyuncuData[i][oGiris] == true)
				{
					if(oyuncuData[i][oAdmin] > 0 && oyuncuData[i][oAMesajKapat] == 0) {
						SendSplitMessage(i, color, string);
					}
				}
			}
			return 1;
		}
		foreach (new i : Player)
		{
			if(oyuncuData[i][oGiris] == true)
			{
				if(oyuncuData[i][oAdmin] > 0 && oyuncuData[i][oAMesajKapat] == 0) {
					SendClientMessage(i, color, str);
				}
			}
		}
		return 1;
	}

	stock UstYoneticiMesaji(color, const str[], {Float,_}:...)
	{
		static args, start, end, string[144];
	#emit LOAD.S.pri 8
	#emit STOR.pri args

		if(args > 8)
		{
		#emit ADDR.pri str
		#emit STOR.pri start

			for (end = start + (args - 8); end > start; end -= 4)
			{
	        #emit LREF.pri end
	        #emit PUSH.pri
			}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

			foreach (new i : Player)
			{
				if(oyuncuData[i][oGiris] == true)
				{
					if(oyuncuData[i][oAdmin] > 7) {
						SendSplitMessage(i, color, string);
					}
				}
			}
			return 1;
		}
		foreach (new i : Player)
		{
			if(oyuncuData[i][oGiris] == true)
			{
				if(oyuncuData[i][oAdmin] > 7)
				{
					SendClientMessage(i, color, str);
				}
			}
		}
		return 1;
	}

	stock TesterMesaji(color, const str[], {Float,_}:...)
	{
		static args, start, end, string[144];
	#emit LOAD.S.pri 8
	#emit STOR.pri args

		if(args > 8)
		{
		#emit ADDR.pri str
		#emit STOR.pri start

			for (end = start + (args - 8); end > start; end -= 4)
			{
	        #emit LREF.pri end
	        #emit PUSH.pri
			}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

			foreach (new i : Player)
			{
				if(oyuncuData[i][oGiris] == true)
				{
					if(oyuncuData[i][oHelper] > 0 || oyuncuData[i][oAdmin] > 0 && oyuncuData[i][oAMesajKapat] == 0)
					{
						SendClientMessage(i, color, string);
					}
				}
			}
			return 1;
		}
		foreach (new i : Player)
		{
			if(oyuncuData[i][oGiris] == true)
			{
				if(oyuncuData[i][oHelper] > 0 || oyuncuData[i][oAdmin] > 0 && oyuncuData[i][oAMesajKapat] == 0)
				{
					SendClientMessage(i, color, str);
				}
			}
		}
		return 1;
	}

	stock SCM_ExAll(color, const text[], {Float, _}:...)
	{
		static args, str[144];

		if((args = numargs()) == 2)
		{
			SendClientMessageToAll(color, text);
		}
		else
		{
			while (--args >= 2)
			{
			#emit LCTRL 5
			#emit LOAD.alt args
			#emit SHL.C.alt 2
			#emit ADD.C 12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
			}
		#emit PUSH.S text
		#emit PUSH.C 144
		#emit PUSH.C str
		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri
		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

			SendClientMessageToAll(color, str);
		#emit RETN
		}
		return 1;
	}

	stock GetFirmaRutbe(playerid) {
		new rank[30];
		format(rank, sizeof(rank), "%s", FirmaRutbe[oyuncuData[playerid][oFirma]][oyuncuData[playerid][oFirmarutbe]]);
		return rank;
	}

	stock NumaraFormati(numara, onek[] = "$")
	{
		static mesaj[32], length;
		format(mesaj, sizeof(mesaj), "%d", (numara < 0) ? (-numara) : (numara));

		if((length = strlen(mesaj)) > 3)
		{
			for (new i = length, l = 0; --i >= 0; l ++) {
				if((l > 0) && (l % 3 == 0)) strins(mesaj, ",", i + 1);
			}
		}
		if(onek[0] != 0)
			strins(mesaj, onek, 0);

		if(numara < 0)
			strins(mesaj, "-", 0);

		return mesaj;
	}

	stock Float:vericek_float(row, const field_name[])
	{
		static Float:str;
		Log_Kaydet("loglar/debug_float.txt", "[%s] DEBUG: %d - %s", Tarih(), row, field_name);
		cache_get_value_name_float(row, field_name, str);
		return str;
	}

	stock vericek_int(row, const field_name[])
	{
		static str;
		cache_get_value_name_int(row, field_name, str);
		return str;
	}

	stock vericek_bool(row, const field_name[])
	{
		static bool:test, bool:test2;
		cache_get_value_name_bool(row, field_name, test);
		switch(test) {
			case 1: test2 = true;
			default: test2 = false;
		}
		return test2;
	}

	stock vericek_varchar(row, const field_name[])
	{
		static bilgi[1024];
		cache_get_value_name(row, field_name, bilgi);
		return bilgi;
	}

	stock RolePlayIsimKontrol(const isim[]) {
		if(!isim[0] || strfind(isim, "_") == -1)
			return 0;

		else for (new i = 0, len = strlen(isim); i != len; i ++) {
			if((i == 0) && (isim[i] < 'A' || isim[i] > 'Z'))
				return 0;

			else if((i != 0 && i < len  && isim[i] == '_') && (isim[i + 1] < 'A' || isim[i + 1] > 'Z'))
				return 0;

			else if((isim[i] < 'A' || isim[i] > 'Z') && (isim[i] < 'a' || isim[i] > 'z') && isim[i] != '_' && isim[i] != '.')
				return 0;
		}
		return 1;
	}

	stock YakinlikKontrol(playerid, hedefid, Float:radius)
	{
		static Float:fX, Float:fY, Float:fZ;
		GetPlayerPos(hedefid, fX, fY, fZ);
		return (GetPlayerInterior(playerid) == GetPlayerInterior(hedefid) && oyuncuData[hedefid][oIzlenen] == INVALID_PLAYER_ID && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(hedefid)) && IsPlayerInRangeOfPoint(playerid, radius, fX, fY, fZ);
	}

	stock OyuncuyuOyuncuyaGonder(playerid, hedefid)
	{
		GetPlayerPos(hedefid, oyuncuData[hedefid][oPos][0], oyuncuData[hedefid][oPos][1], oyuncuData[hedefid][oPos][2]);
		if(IsPlayerInAnyVehicle(playerid))
		{
			SetVehiclePos(GetPlayerVehicleID(playerid), oyuncuData[hedefid][oPos][0], oyuncuData[hedefid][oPos][1] + 2, oyuncuData[hedefid][oPos][2]);
			LinkVehicleToInterior(GetPlayerVehicleID(playerid), GetPlayerInterior(hedefid));
		}
		else SetPlayerPos(playerid, oyuncuData[hedefid][oPos][0] + 1, oyuncuData[hedefid][oPos][1], oyuncuData[hedefid][oPos][2]);
		SetPlayerInterior(playerid, GetPlayerInterior(hedefid));
		SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(hedefid));
	}

	stock OyuncuSpawnla(playerid)
	{
		SetPlayerPos(playerid, RandomSPAWN[random(sizeof(RandomSPAWN))][0], RandomSPAWN[random(sizeof(RandomSPAWN))][1], RandomSPAWN[random(sizeof(RandomSPAWN))][2]);
		SetPlayerFacingAngle(playerid, RandomSPAWN[random(sizeof(RandomSPAWN))][3]);
		SetCameraBehindPlayer(playerid);
		TogglePlayerControllable(playerid, true);
		if(oyuncuData[playerid][oGiris] == false) oyuncuData[playerid][oGiris] = true;
		return 1;
	}

	stock BosAraciSpawnla(aracid)
	{
		SetVehiclePos(aracid, RandomSPAWN[random(sizeof(RandomSPAWN))][0], RandomSPAWN[random(sizeof(RandomSPAWN))][1], RandomSPAWN[random(sizeof(RandomSPAWN))][2]);
		SetVehicleZAngle(aracid, RandomSPAWN[random(sizeof(RandomSPAWN))][3]);
		LinkVehicleToInterior(aracid, 0);
		return 1;
	}

	stock Ev_SahipKontrol(playerid, evid)
	{
		if(EvBilgi[evid][evKullanimda] && EvBilgi[evid][evSahip] == oyuncuData[playerid][oID])
			return 1;

		return 0;
	}

	stock Isyeri_SahipKontrol(playerid, isyeriid)
	{
		if(IsyeriBilgi[isyeriid][isyeriKullanimda] && IsyeriBilgi[isyeriid][isyeriSahip] == oyuncuData[playerid][oID])
			return 1;

		return 0;
	}

	stock GetEngineStatus(vehicleid)
	{
		static engine, lights, alarm, doors, bonnet, boot, objective;

		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

		if(engine != 1)
			return 0;

		return 1;
	}

	stock GetHoodStatus(vehicleid)
	{
		static engine, lights, alarm, doors, bonnet, boot, objective;

		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

		if(bonnet != 1)
			return 0;

		return 1;
	}

	stock GetTrunkStatus(vehicleid)
	{
		static engine, lights, alarm, doors, bonnet, boot, objective;

		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

		if(boot != 1)
			return 0;

		return 1;
	}

	stock GetLightStatus(vehicleid)
	{
		static engine, lights, alarm, doors, bonnet, boot, objective;

		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

		if(lights != 1)
			return 0;

		return 1;
	}

	stock SetEngineStatus(vehicleid, status)
	{
		static engine, lights, alarm, doors, bonnet, boot, objective;

		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		return SetVehicleParamsEx(vehicleid, status, lights, alarm, doors, bonnet, boot, objective);
	}

	stock SetLightStatus(vehicleid, status)
	{
		static engine, lights, alarm, doors, bonnet, boot, objective;

		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		return SetVehicleParamsEx(vehicleid, engine, status, alarm, doors, bonnet, boot, objective);
	}

	stock SetTrunkStatus(vehicleid, status)
	{
		static engine, lights, alarm, doors, bonnet, boot, objective;

		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		return SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, status, objective);
	}

	stock SetHoodStatus(vehicleid, status)
	{
		static engine, lights, alarm, doors, bonnet, boot, objective;

		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		return SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, status, boot, objective);
	}

	stock Arac_CalintiKontrol(aracid)
	{
		if(AracBilgi[aracid][araccalintisure] == 0) return 1;
		return 0;
	}

	stock Arac_SahipKontrol(playerid, carid)
	{
		if((AracBilgi[carid][aracKullanimda] && AracBilgi[carid][aracSahip] != 0) && AracBilgi[carid][aracSahip] == oyuncuData[playerid][oID]) return 1;
		return 0;
	}

	stock Arac_Anahtar(playerid, aracid)
	{
		if(!oyuncuData[playerid][oGiris] || oyuncuData[playerid][oID] == -1) return false;
		if(AracBilgi[aracid][aracAnahtar] == oyuncuData[playerid][oID]) return true;
		return false;
	}

	stock Arac_Meslek(playerid, aracid)
	{
		if(!oyuncuData[playerid][oGiris] || oyuncuData[playerid][oID] == -1) return false;
		if(AracBilgi[aracid][aracMeslek] > -1 && AracBilgi[aracid][aracMeslek] == oyuncuData[playerid][oMeslek]) return true;
		return false;
	}

	stock Arac_Birlik(playerid, aracid)
	{
		if(!oyuncuData[playerid][oGiris] || oyuncuData[playerid][oID] == -1) return false;
		if(AracBilgi[aracid][aracBirlik] > -1 && AracBilgi[aracid][aracBirlik] == oyuncuData[playerid][oBirlik]) return true;
		return false;
	}

	stock Arac_Firma(playerid, aracid)
	{
		if(!oyuncuData[playerid][oGiris] || oyuncuData[playerid][oID] == -1) return false;
		if(AracBilgi[aracid][aracFirma] > -1 && AracBilgi[aracid][aracFirma] == oyuncuData[playerid][oFirma]) return true;
		return false;
	}

	stock Arac_Ehliyet(playerid, aracid)
	{
		if(!oyuncuData[playerid][oGiris] || oyuncuData[playerid][oID] == -1) return false;
		if(oyuncuData[playerid][oEhliyetTesti] > 0 && AracBilgi[aracid][aracTur] == 1) return true;
		return false;
	}

	stock IsEngineVehicle(vehicleid)
	{
		static const g_aengineStatus[] = {
			1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
			1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
			1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1,
			1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0
		};
		static modelid;
		modelid = GetVehicleModel(vehicleid);
		if(modelid < 400 || modelid > 611)
			return 0;

		return (g_aengineStatus[modelid - 400]);
	}

	stock IsDoorVehicle(vehicleid)
	{
		switch (GetVehicleModel(vehicleid)) {
			case 400..424, 426..429, 431..440, 442..445, 451, 455, 456, 458, 459, 466, 467, 470, 474, 475:
			return 1;

			case 477..480, 482, 483, 486, 489, 490..492, 494..496, 498..500, 502..508, 514..518, 524..529, 533..536:
			return 1;

			case 540..547, 549..552, 554..562, 565..568, 573, 575, 576, 578..580, 582, 585, 587..589, 596..605, 609:
			return 1;
		}
		return 0;
	}

	stock randomEx(min, max)
	return random(max-min)+min;

	stock IsPlayerNearHood(playerid, vehicleid)
	{
		static Float:fX, Float:fY, Float:fZ;
		GetVehicleHood(vehicleid, fX, fY, fZ);
		return (GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(vehicleid)) && IsPlayerInRangeOfPoint(playerid, 3.0, fX, fY, fZ);
	}

	stock GetVehicleHood(vehicleid, &Float:x, &Float:y, &Float:z)
	{
		if(!GetVehicleModel(vehicleid) || vehicleid == INVALID_VEHICLE_ID)
			return (x = 0.0, y = 0.0, z = 0.0), 0;

		static Float:pos[7];
		GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, pos[0], pos[1], pos[2]);
		GetVehiclePos(vehicleid, pos[3], pos[4], pos[5]);
		GetVehicleZAngle(vehicleid, pos[6]);

		x = pos[3] + (floatsqroot(pos[1] + pos[1]) * floatsin(-pos[6], degrees));
		y = pos[4] + (floatsqroot(pos[1] + pos[1]) * floatcos(-pos[6], degrees));
		z = pos[5];
		return 1;
	}

	stock SilahHilesiIslem(playerid, aldigisilah)
	{
		static silahismi[64];
		GetWeaponName(aldigisilah, silahismi, sizeof(silahismi));
		SCM_ExAll(RENK_YETKILI, "[YETKÝLÝ ÝÞLEM]: {FFFFFF}Sistem, %s adlý kiþiyi oyundan attý. sebep: Silah Hilesi (%s)", OyuncuIsim(playerid), silahismi);
		return KickEx(playerid);
	}

	stock aracturisim(aracid)
	{
		static tur[64];
		switch(AracBilgi[aracid][aracTur]) {
			case 1: tur = "Kurs Aracý";
			default: tur = "Yok";
		}
		return tur;
	}

	stock AracModel(model)
	{
		static modelisim[32] = "Yok";
		if(model < 400 || model > 611)
			return modelisim;

		format(modelisim, sizeof(modelisim), aracIsimler[model - 400]);
		return modelisim;
	}

	stock OyuncuSilah(playerid)
	{
		static silahid;
		silahid = GetPlayerWeapon(playerid);
		if(1 <= silahid <= 46 && oyuncuData[playerid][oSilah][SilahSlotBul[silahid]] == silahid)
			return silahid;

		return 0;
	}

	stock SilahKaydet(playerid)
	{
		for (new i = 0; i < 13; i ++) if(oyuncuData[playerid][oSilah][i])
		{
			if((i == 2 && oyuncuData[playerid][oTaser]) || (i == 3 && oyuncuData[playerid][oBeanbag]))
				continue;

			GetPlayerWeaponData(playerid, i, oyuncuData[playerid][oSilah][i], oyuncuData[playerid][oMermi][i]);

			if(oyuncuData[playerid][oSilah][i] != 0 && !oyuncuData[playerid][oMermi][i]) {
				oyuncuData[playerid][oSilah][i] = 0;
			}

			new query[128];
			mysql_format(g_SQL, query, sizeof query, "UPDATE `oyuncular` SET `Silah%d` = '%d', `Mermi%d` = '%d' WHERE `id` = '%d'", i, oyuncuData[playerid][oSilah][i], i, oyuncuData[playerid][oMermi][i], oyuncuData[playerid][oID]);
			mysql_tquery(g_SQL, query);
		}
		return 1;
	}

	stock SilahlariSifirlaEx(playerid)
	{
		for (new i = 0; i < 13; i ++) {
			oyuncuData[playerid][oSilah][i] = 0;
			oyuncuData[playerid][oMermi][i] = 0;
		}
		ResetPlayerWeapons(playerid);

		for (new i = 0; i < 13; i ++)
		{
			new
			query[95];
			mysql_format(g_SQL, query, sizeof query, "UPDATE `oyuncular` SET `Silah%d` = '%d', `Mermi%d` = '%d' WHERE `id` = '%d'", i, 0, i, 0, oyuncuData[playerid][oID]);
			mysql_tquery(g_SQL, query);
		}

		if(OyuncuBirlikTuru(playerid) == BIRLIK_POLIS)
		{
			SilahKaydet(playerid);
		}
	}

	stock SilahAyarla(playerid)
	{
		if(OyuncuBirlikTuru(playerid) == BIRLIK_POLIS)
		{
			new query[65];
			mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `oyuncular` WHERE `id` = '%d'", oyuncuData[playerid][oID]);
			mysql_tquery(g_SQL, query, "OnPlayerSystemWeapon", "d", playerid);
		}
		return 1;
	}

	forward OnPlayerSystemWeapon(playerid);
	public OnPlayerSystemWeapon(playerid)
	{
		new rows;
		cache_get_row_count(rows);

		new silahvericek[10];
		new mermivericek[10];
		for (new i = 0; i < rows; i ++)
		{
			for(new x = 1; x < 13; x++)
			{
				format(silahvericek, sizeof(silahvericek), "Silah%d", x);
				format(mermivericek, sizeof(mermivericek), "Mermi%d", x);
				cache_get_value_name_int(i, silahvericek, oyuncuData[playerid][oSilah][x]);
				cache_get_value_name_int(i, mermivericek, oyuncuData[playerid][oMermi][x]);
				GivePlayerWeapon(playerid, oyuncuData[playerid][oSilah][x], oyuncuData[playerid][oMermi][x]);
			}
		}
		return 1;
	}

	stock SilahSilEx(playerid, silahid)
	{
		ResetPlayerWeapons(playerid);
		for (new i = 0; i < 13; i ++) {
			if(oyuncuData[playerid][oSilah][i] != silahid) {
				GivePlayerWeapon(playerid, oyuncuData[playerid][oSilah][i], oyuncuData[playerid][oMermi][i]);
			}
			else {
				oyuncuData[playerid][oSilah][i] = 0;
				oyuncuData[playerid][oMermi][i] = 0;

				new
				query[95];
				mysql_format(g_SQL, query, sizeof query, "UPDATE `oyuncular` SET `Silah%d` = '%d', `Mermi%d` = '%d' WHERE `id` = '%d'", i, oyuncuData[playerid][oSilah][i], i, oyuncuData[playerid][oMermi][i], oyuncuData[playerid][oID]);
				mysql_tquery(g_SQL, query);

				if(OyuncuBirlikTuru(playerid) == BIRLIK_POLIS)
				{
					SilahKaydet(playerid);
				}
			}
		}
		return 1;
	}

	stock SilahSil(playerid, silahid)
	{
		new silahkoru[13], mermikoru[13];
		for(new i = 0; i < 13; i++)
		{
			GetPlayerWeaponData(playerid, i, silahkoru[i], mermikoru[i]);
			ResetPlayerWeapons(playerid);
		}
		for(new i = 0; i < 13; i++)
		{
			if(silahkoru[i] == silahid || mermikoru[i] == 0) continue;
			GivePlayerWeapon(playerid, silahkoru[i], mermikoru[i]);
		}
		new query[250];

		mysql_format(g_SQL, query, sizeof query, "DELETE FROM `player_weapons` WHERE `weapon_userid` = '%d' AND `weapon_gameid` = '%d' AND `weapon_statusid` = '%d'", oyuncuData[playerid][oID], silahid, SILAH_OYUNCU_USTUNDE);
		mysql_tquery(g_SQL, query);

		mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `player_weapons` WHERE `weapon_userid` = '%d' AND `weapon_statusid` = '%d'", oyuncuData[playerid][oID], SILAH_OYUNCU_USTUNDE);
		mysql_tquery(g_SQL, query, "OnPlayerGetWeapons", "d", playerid);
		return 1;
	}

	stock SilahSlotKontrol(playerid, slotid)
	{
		new silah, mermi, slot;
		for (new i = 0; i < 13; i ++) {
			GetPlayerWeaponData(playerid, i, silah, mermi);
			slot = SilahSlotBul[silah];
			if(slot == slotid) return 1;
		}
		return 0;
	}

	stock SilahlariSifirla(playerid)
	{
		for (new i = 0; i < 13; i ++) {
			oyuncuData[playerid][oSilah][i] = 0;
			oyuncuData[playerid][oMermi][i] = 0;
		}
		ResetPlayerWeapons(playerid);

		for (new i = 0; i < 13; i ++)
		{
			new
			query[95];
			mysql_format(g_SQL, query, sizeof query, "DELETE FROM `player_weapons` WHERE `weapon_userid` = '%d'", oyuncuData[playerid][oID]);
			mysql_tquery(g_SQL, query);
		}
		SilahlariSifirlaEx(playerid);
	}

	stock VeritabaniSilahVer(playerid, silahid, mermi)
	{
		if(silahid < 0 || silahid > 46) return false;
    	new Cache:kontrol, query[250];
    	mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM player_weapons WHERE weapon_userid = '%d' AND `weapon_statusid` = '%d'", oyuncuData[playerid][oID], SILAH_OYUNCU_USTUNDE);
    	kontrol = mysql_query(g_SQL, query);
    	new rows = cache_num_rows(), wlimit;
    	if(OyuncuBirlikTuru(playerid) == BIRLIK_POLIS && oyuncuData[playerid][oIsbasi] == true) { wlimit = 6; }
    	else { wlimit = 2; }
    	if(rows < wlimit)
    	{
	    	GivePlayerWeapon(playerid, silahid, mermi);

			mysql_format(g_SQL, query, sizeof query, "INSERT INTO `player_weapons` (`weapon_gameid`, `weapon_ammo`, `weapon_userid`, `weapon_statusid`) VALUES('%d', '%d','%d', '%d')", silahid, mermi, oyuncuData[playerid][oID], SILAH_OYUNCU_USTUNDE);
			mysql_tquery(g_SQL, query);

			mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `player_weapons` WHERE `weapon_userid` = '%d' AND `weapon_statusid` = '%d'", oyuncuData[playerid][oID], SILAH_OYUNCU_USTUNDE);
			mysql_tquery(g_SQL, query, "OnPlayerGetWeapons", "d", playerid);
		}
		else
		{
			hataMesaji(playerid, "Üstünde maksimum %d silah taþýyabilirsin.", wlimit);
		}
		cache_delete(kontrol);
		return 1;
	}

	stock SilahVer(playerid, silahid, mermi)
	{
		if(silahid < 0 || silahid > 46) return false;
		GivePlayerWeapon(playerid, silahid, mermi);

		new
		weaponid,
		ammo,
		query[95];

		for(new x = 1; x < 13; x++)
		{
			oyuncuData[playerid][oSilah][x] = silahid;
			oyuncuData[playerid][oMermi][x] = mermi;
			GetPlayerWeaponData(playerid, x, weaponid, ammo);

			if(!weaponid) continue;

			mysql_format(g_SQL, query, sizeof query, "UPDATE `oyuncular` SET `Silah%d` = '%d', `Mermi%d` = '%d' WHERE `id` = '%d'", x, weaponid, x, ammo, oyuncuData[playerid][oID]);
			mysql_tquery(g_SQL, query);
		}
		return 1;
	}

	stock EnvanterSilahEkle(playerid, silahid, mermi)
	{
		if(silahid < 0 || silahid > 46) return false;
		if(SilahSlotKontrol(playerid, SilahSlotBul[silahid]) && SilahSlotBul[silahid] != 0)
		{
			oyuncuData[playerid][oSilah][SilahSlotBul[silahid]] = silahid;
			oyuncuData[playerid][oMermi][SilahSlotBul[silahid]] += mermi;
		}
		return 1;
	}

	stock OyuncuSilahDegistirdi(playerid, eskisilah, yenisilah)
	{
		eskisilah = GetPlayerWeapon(playerid);
		if(oyuncuData[playerid][oSilah][SilahSlotBul[eskisilah]] != GetPlayerWeapon(playerid) && oyuncuData[playerid][oBeanbag]) SilahHilesiIslem(playerid, yenisilah);
		return 1;
	}

	stock LokasyonBul(Float:fX, Float:fY, Float:fZ)
	{
		enum bolgeBilgi
		{
			bolgeAdi[32 char],
			Float:bolgePos[6]
		};
		new const bolgelerBilgi[][bolgeBilgi] =
		{
			{!"The Big Ear", 	              {-410.00, 1403.30, -3.00, -137.90, 1681.20, 200.00}},
			{!"Aldea Malvada",                {-1372.10, 2498.50, 0.00, -1277.50, 2615.30, 200.00}},
			{!"Angel Pine",                   {-2324.90, -2584.20, -6.10, -1964.20, -2212.10, 200.00}},
			{!"Arco del Oeste",               {-901.10, 2221.80, 0.00, -592.00, 2571.90, 200.00}},
			{!"Avispa Country Club",          {-2646.40, -355.40, 0.00, -2270.00, -222.50, 200.00}},
			{!"Avispa Country Club",          {-2831.80, -430.20, -6.10, -2646.40, -222.50, 200.00}},
			{!"Avispa Country Club",          {-2361.50, -417.10, 0.00, -2270.00, -355.40, 200.00}},
			{!"Avispa Country Club",          {-2667.80, -302.10, -28.80, -2646.40, -262.30, 71.10}},
			{!"Avispa Country Club",          {-2470.00, -355.40, 0.00, -2270.00, -318.40, 46.10}},
			{!"Avispa Country Club",          {-2550.00, -355.40, 0.00, -2470.00, -318.40, 39.70}},
			{!"Back o Beyond",                {-1166.90, -2641.10, 0.00, -321.70, -1856.00, 200.00}},
			{!"Battery Point",                {-2741.00, 1268.40, -4.50, -2533.00, 1490.40, 200.00}},
			{!"Bayside",                      {-2741.00, 2175.10, 0.00, -2353.10, 2722.70, 200.00}},
			{!"Bayside Marina",               {-2353.10, 2275.70, 0.00, -2153.10, 2475.70, 200.00}},
			{!"Beacon Hill",                  {-399.60, -1075.50, -1.40, -319.00, -977.50, 198.50}},
			{!"Blackfield",                   {964.30, 1203.20, -89.00, 1197.30, 1403.20, 110.90}},
			{!"Blackfield",                   {964.30, 1403.20, -89.00, 1197.30, 1726.20, 110.90}},
			{!"Blackfield Chapel",            {1375.60, 596.30, -89.00, 1558.00, 823.20, 110.90}},
			{!"Blackfield Chapel",            {1325.60, 596.30, -89.00, 1375.60, 795.00, 110.90}},
			{!"Blackfield Intersection",      {1197.30, 1044.60, -89.00, 1277.00, 1163.30, 110.90}},
			{!"Blackfield Intersection",      {1166.50, 795.00, -89.00, 1375.60, 1044.60, 110.90}},
			{!"Blackfield Intersection",      {1277.00, 1044.60, -89.00, 1315.30, 1087.60, 110.90}},
			{!"Blackfield Intersection",      {1375.60, 823.20, -89.00, 1457.30, 919.40, 110.90}},
			{!"Blueberry",                    {104.50, -220.10, 2.30, 349.60, 152.20, 200.00}},
			{!"Blueberry",                    {19.60, -404.10, 3.80, 349.60, -220.10, 200.00}},
			{!"Blueberry Acres",              {-319.60, -220.10, 0.00, 104.50, 293.30, 200.00}},
			{!"Caligula's Palace",            {2087.30, 1543.20, -89.00, 2437.30, 1703.20, 110.90}},
			{!"Caligula's Palace",            {2137.40, 1703.20, -89.00, 2437.30, 1783.20, 110.90}},
			{!"Calton Heights",               {-2274.10, 744.10, -6.10, -1982.30, 1358.90, 200.00}},
			{!"Chinatown",                    {-2274.10, 578.30, -7.60, -2078.60, 744.10, 200.00}},
			{!"City Hall",                    {-2867.80, 277.40, -9.10, -2593.40, 458.40, 200.00}},
			{!"Come-A-Lot",                   {2087.30, 943.20, -89.00, 2623.10, 1203.20, 110.90}},
			{!"Commerce",                     {1323.90, -1842.20, -89.00, 1701.90, -1722.20, 110.90}},
			{!"Commerce",                     {1323.90, -1722.20, -89.00, 1440.90, -1577.50, 110.90}},
			{!"Commerce",                     {1370.80, -1577.50, -89.00, 1463.90, -1384.90, 110.90}},
			{!"Commerce",                     {1463.90, -1577.50, -89.00, 1667.90, -1430.80, 110.90}},
			{!"Commerce",                     {1583.50, -1722.20, -89.00, 1758.90, -1577.50, 110.90}},
			{!"Commerce",                     {1667.90, -1577.50, -89.00, 1812.60, -1430.80, 110.90}},
			{!"Conference Center",            {1046.10, -1804.20, -89.00, 1323.90, -1722.20, 110.90}},
			{!"Conference Center",            {1073.20, -1842.20, -89.00, 1323.90, -1804.20, 110.90}},
			{!"Cranberry Station",            {-2007.80, 56.30, 0.00, -1922.00, 224.70, 100.00}},
			{!"Creek",                        {2749.90, 1937.20, -89.00, 2921.60, 2669.70, 110.90}},
			{!"Dillimore",                    {580.70, -674.80, -9.50, 861.00, -404.70, 200.00}},
			{!"Doherty",                      {-2270.00, -324.10, -0.00, -1794.90, -222.50, 200.00}},
			{!"Doherty",                      {-2173.00, -222.50, -0.00, -1794.90, 265.20, 200.00}},
			{!"Downtown",                     {-1982.30, 744.10, -6.10, -1871.70, 1274.20, 200.00}},
			{!"Downtown",                     {-1871.70, 1176.40, -4.50, -1620.30, 1274.20, 200.00}},
			{!"Downtown",                     {-1700.00, 744.20, -6.10, -1580.00, 1176.50, 200.00}},
			{!"Downtown",                     {-1580.00, 744.20, -6.10, -1499.80, 1025.90, 200.00}},
			{!"Downtown",                     {-2078.60, 578.30, -7.60, -1499.80, 744.20, 200.00}},
			{!"Downtown",                     {-1993.20, 265.20, -9.10, -1794.90, 578.30, 200.00}},
			{!"Downtown Los Santos",          {1463.90, -1430.80, -89.00, 1724.70, -1290.80, 110.90}},
			{!"Downtown Los Santos",          {1724.70, -1430.80, -89.00, 1812.60, -1250.90, 110.90}},
			{!"Downtown Los Santos",          {1463.90, -1290.80, -89.00, 1724.70, -1150.80, 110.90}},
			{!"Downtown Los Santos",          {1370.80, -1384.90, -89.00, 1463.90, -1170.80, 110.90}},
			{!"Downtown Los Santos",          {1724.70, -1250.90, -89.00, 1812.60, -1150.80, 110.90}},
			{!"Downtown Los Santos",          {1370.80, -1170.80, -89.00, 1463.90, -1130.80, 110.90}},
			{!"Downtown Los Santos",          {1378.30, -1130.80, -89.00, 1463.90, -1026.30, 110.90}},
			{!"Downtown Los Santos",          {1391.00, -1026.30, -89.00, 1463.90, -926.90, 110.90}},
			{!"Downtown Los Santos",          {1507.50, -1385.20, 110.90, 1582.50, -1325.30, 335.90}},
			{!"East Beach",                   {2632.80, -1852.80, -89.00, 2959.30, -1668.10, 110.90}},
			{!"East Beach",                   {2632.80, -1668.10, -89.00, 2747.70, -1393.40, 110.90}},
			{!"East Beach",                   {2747.70, -1668.10, -89.00, 2959.30, -1498.60, 110.90}},
			{!"East Beach",                   {2747.70, -1498.60, -89.00, 2959.30, -1120.00, 110.90}},
			{!"East Los Santos",              {2421.00, -1628.50, -89.00, 2632.80, -1454.30, 110.90}},
			{!"East Los Santos",              {2222.50, -1628.50, -89.00, 2421.00, -1494.00, 110.90}},
			{!"East Los Santos",              {2266.20, -1494.00, -89.00, 2381.60, -1372.00, 110.90}},
			{!"East Los Santos",              {2381.60, -1494.00, -89.00, 2421.00, -1454.30, 110.90}},
			{!"East Los Santos",              {2281.40, -1372.00, -89.00, 2381.60, -1135.00, 110.90}},
			{!"East Los Santos",              {2381.60, -1454.30, -89.00, 2462.10, -1135.00, 110.90}},
			{!"East Los Santos",              {2462.10, -1454.30, -89.00, 2581.70, -1135.00, 110.90}},
			{!"Easter Basin",                 {-1794.90, 249.90, -9.10, -1242.90, 578.30, 200.00}},
			{!"Easter Basin",                 {-1794.90, -50.00, -0.00, -1499.80, 249.90, 200.00}},
			{!"Easter Bay Airport",           {-1499.80, -50.00, -0.00, -1242.90, 249.90, 200.00}},
			{!"Easter Bay Airport",           {-1794.90, -730.10, -3.00, -1213.90, -50.00, 200.00}},
			{!"Easter Bay Airport",           {-1213.90, -730.10, 0.00, -1132.80, -50.00, 200.00}},
			{!"Easter Bay Airport",           {-1242.90, -50.00, 0.00, -1213.90, 578.30, 200.00}},
			{!"Easter Bay Airport",           {-1213.90, -50.00, -4.50, -947.90, 578.30, 200.00}},
			{!"Easter Bay Airport",           {-1315.40, -405.30, 15.40, -1264.40, -209.50, 25.40}},
			{!"Easter Bay Airport",           {-1354.30, -287.30, 15.40, -1315.40, -209.50, 25.40}},
			{!"Easter Bay Airport",           {-1490.30, -209.50, 15.40, -1264.40, -148.30, 25.40}},
			{!"Easter Bay Chemicals",         {-1132.80, -768.00, 0.00, -956.40, -578.10, 200.00}},
			{!"Easter Bay Chemicals",         {-1132.80, -787.30, 0.00, -956.40, -768.00, 200.00}},
			{!"El Castillo del Diablo",       {-464.50, 2217.60, 0.00, -208.50, 2580.30, 200.00}},
			{!"El Castillo del Diablo",       {-208.50, 2123.00, -7.60, 114.00, 2337.10, 200.00}},
			{!"El Castillo del Diablo",       {-208.50, 2337.10, 0.00, 8.40, 2487.10, 200.00}},
			{!"El Corona",                    {1812.60, -2179.20, -89.00, 1970.60, -1852.80, 110.90}},
			{!"El Corona",                    {1692.60, -2179.20, -89.00, 1812.60, -1842.20, 110.90}},
			{!"El Quebrados",                 {-1645.20, 2498.50, 0.00, -1372.10, 2777.80, 200.00}},
			{!"Esplanade East",               {-1620.30, 1176.50, -4.50, -1580.00, 1274.20, 200.00}},
			{!"Esplanade East",               {-1580.00, 1025.90, -6.10, -1499.80, 1274.20, 200.00}},
			{!"Esplanade East",               {-1499.80, 578.30, -79.60, -1339.80, 1274.20, 20.30}},
			{!"Esplanade North",              {-2533.00, 1358.90, -4.50, -1996.60, 1501.20, 200.00}},
			{!"Esplanade North",              {-1996.60, 1358.90, -4.50, -1524.20, 1592.50, 200.00}},
			{!"Esplanade North",              {-1982.30, 1274.20, -4.50, -1524.20, 1358.90, 200.00}},
			{!"Fallen Tree",                  {-792.20, -698.50, -5.30, -452.40, -380.00, 200.00}},
			{!"Fallow Bridge",                {434.30, 366.50, 0.00, 603.00, 555.60, 200.00}},
			{!"Fern Ridge",                   {508.10, -139.20, 0.00, 1306.60, 119.50, 200.00}},
			{!"Financial",                    {-1871.70, 744.10, -6.10, -1701.30, 1176.40, 300.00}},
			{!"Fisher's Lagoon",              {1916.90, -233.30, -100.00, 2131.70, 13.80, 200.00}},
			{!"Flint Intersection",           {-187.70, -1596.70, -89.00, 17.00, -1276.60, 110.90}},
			{!"Flint Range",                  {-594.10, -1648.50, 0.00, -187.70, -1276.60, 200.00}},
			{!"Fort Carson",                  {-376.20, 826.30, -3.00, 123.70, 1220.40, 200.00}},
			{!"Foster Valley",                {-2270.00, -430.20, -0.00, -2178.60, -324.10, 200.00}},
			{!"Foster Valley",                {-2178.60, -599.80, -0.00, -1794.90, -324.10, 200.00}},
			{!"Foster Valley",                {-2178.60, -1115.50, 0.00, -1794.90, -599.80, 200.00}},
			{!"Foster Valley",                {-2178.60, -1250.90, 0.00, -1794.90, -1115.50, 200.00}},
			{!"Frederick Bridge",             {2759.20, 296.50, 0.00, 2774.20, 594.70, 200.00}},
			{!"Gant Bridge",                  {-2741.40, 1659.60, -6.10, -2616.40, 2175.10, 200.00}},
			{!"Gant Bridge",                  {-2741.00, 1490.40, -6.10, -2616.40, 1659.60, 200.00}},
			{!"Ganton",                       {2222.50, -1852.80, -89.00, 2632.80, -1722.30, 110.90}},
			{!"Ganton",                       {2222.50, -1722.30, -89.00, 2632.80, -1628.50, 110.90}},
			{!"Garcia",                       {-2411.20, -222.50, -0.00, -2173.00, 265.20, 200.00}},
			{!"Garcia",                       {-2395.10, -222.50, -5.30, -2354.00, -204.70, 200.00}},
			{!"Garver Bridge",                {-1339.80, 828.10, -89.00, -1213.90, 1057.00, 110.90}},
			{!"Garver Bridge",                {-1213.90, 950.00, -89.00, -1087.90, 1178.90, 110.90}},
			{!"Garver Bridge",                {-1499.80, 696.40, -179.60, -1339.80, 925.30, 20.30}},
			{!"Glen Park",                    {1812.60, -1449.60, -89.00, 1996.90, -1350.70, 110.90}},
			{!"Glen Park",                    {1812.60, -1100.80, -89.00, 1994.30, -973.30, 110.90}},
			{!"Glen Park",                    {1812.60, -1350.70, -89.00, 2056.80, -1100.80, 110.90}},
			{!"Green Palms",                  {176.50, 1305.40, -3.00, 338.60, 1520.70, 200.00}},
			{!"Greenglass College",           {964.30, 1044.60, -89.00, 1197.30, 1203.20, 110.90}},
			{!"Greenglass College",           {964.30, 930.80, -89.00, 1166.50, 1044.60, 110.90}},
			{!"Hampton Barns",                {603.00, 264.30, 0.00, 761.90, 366.50, 200.00}},
			{!"Hankypanky Point",             {2576.90, 62.10, 0.00, 2759.20, 385.50, 200.00}},
			{!"Harry Gold Parkway",           {1777.30, 863.20, -89.00, 1817.30, 2342.80, 110.90}},
			{!"Hashbury",                     {-2593.40, -222.50, -0.00, -2411.20, 54.70, 200.00}},
			{!"Hilltop Farm",                 {967.30, -450.30, -3.00, 1176.70, -217.90, 200.00}},
			{!"Hunter Quarry",                {337.20, 710.80, -115.20, 860.50, 1031.70, 203.70}},
			{!"Idlewood",                     {1812.60, -1852.80, -89.00, 1971.60, -1742.30, 110.90}},
			{!"Idlewood",                     {1812.60, -1742.30, -89.00, 1951.60, -1602.30, 110.90}},
			{!"Idlewood",                     {1951.60, -1742.30, -89.00, 2124.60, -1602.30, 110.90}},
			{!"Idlewood",                     {1812.60, -1602.30, -89.00, 2124.60, -1449.60, 110.90}},
			{!"Idlewood",                     {2124.60, -1742.30, -89.00, 2222.50, -1494.00, 110.90}},
			{!"Idlewood",                     {1971.60, -1852.80, -89.00, 2222.50, -1742.30, 110.90}},
			{!"Jefferson",                    {1996.90, -1449.60, -89.00, 2056.80, -1350.70, 110.90}},
			{!"Jefferson",                    {2124.60, -1494.00, -89.00, 2266.20, -1449.60, 110.90}},
			{!"Jefferson",                    {2056.80, -1372.00, -89.00, 2281.40, -1210.70, 110.90}},
			{!"Jefferson",                    {2056.80, -1210.70, -89.00, 2185.30, -1126.30, 110.90}},
			{!"Jefferson",                    {2185.30, -1210.70, -89.00, 2281.40, -1154.50, 110.90}},
			{!"Jefferson",                    {2056.80, -1449.60, -89.00, 2266.20, -1372.00, 110.90}},
			{!"Julius Thruway East",          {2623.10, 943.20, -89.00, 2749.90, 1055.90, 110.90}},
			{!"Julius Thruway East",          {2685.10, 1055.90, -89.00, 2749.90, 2626.50, 110.90}},
			{!"Julius Thruway East",          {2536.40, 2442.50, -89.00, 2685.10, 2542.50, 110.90}},
			{!"Julius Thruway East",          {2625.10, 2202.70, -89.00, 2685.10, 2442.50, 110.90}},
			{!"Julius Thruway North",         {2498.20, 2542.50, -89.00, 2685.10, 2626.50, 110.90}},
			{!"Julius Thruway North",         {2237.40, 2542.50, -89.00, 2498.20, 2663.10, 110.90}},
			{!"Julius Thruway North",         {2121.40, 2508.20, -89.00, 2237.40, 2663.10, 110.90}},
			{!"Julius Thruway North",         {1938.80, 2508.20, -89.00, 2121.40, 2624.20, 110.90}},
			{!"Julius Thruway North",         {1534.50, 2433.20, -89.00, 1848.40, 2583.20, 110.90}},
			{!"Julius Thruway North",         {1848.40, 2478.40, -89.00, 1938.80, 2553.40, 110.90}},
			{!"Julius Thruway North",         {1704.50, 2342.80, -89.00, 1848.40, 2433.20, 110.90}},
			{!"Julius Thruway North",         {1377.30, 2433.20, -89.00, 1534.50, 2507.20, 110.90}},
			{!"Julius Thruway South",         {1457.30, 823.20, -89.00, 2377.30, 863.20, 110.90}},
			{!"Julius Thruway South",         {2377.30, 788.80, -89.00, 2537.30, 897.90, 110.90}},
			{!"Julius Thruway West",          {1197.30, 1163.30, -89.00, 1236.60, 2243.20, 110.90}},
			{!"Julius Thruway West",          {1236.60, 2142.80, -89.00, 1297.40, 2243.20, 110.90}},
			{!"Juniper Hill",                 {-2533.00, 578.30, -7.60, -2274.10, 968.30, 200.00}},
			{!"Juniper Hollow",               {-2533.00, 968.30, -6.10, -2274.10, 1358.90, 200.00}},
			{!"K.A.C.C. Military Fuels",      {2498.20, 2626.50, -89.00, 2749.90, 2861.50, 110.90}},
			{!"Kincaid Bridge",               {-1339.80, 599.20, -89.00, -1213.90, 828.10, 110.90}},
			{!"Kincaid Bridge",               {-1213.90, 721.10, -89.00, -1087.90, 950.00, 110.90}},
			{!"Kincaid Bridge",               {-1087.90, 855.30, -89.00, -961.90, 986.20, 110.90}},
			{!"Kings",                       {-2329.30, 458.40, -7.60, -1993.20, 578.30, 200.00}},
			{!"Kings",                       {-2411.20, 265.20, -9.10, -1993.20, 373.50, 200.00}},
			{!"Kings",                       {-2253.50, 373.50, -9.10, -1993.20, 458.40, 200.00}},
			{!"LVA Freight Depot",            {1457.30, 863.20, -89.00, 1777.40, 1143.20, 110.90}},
			{!"LVA Freight Depot",            {1375.60, 919.40, -89.00, 1457.30, 1203.20, 110.90}},
			{!"LVA Freight Depot",            {1277.00, 1087.60, -89.00, 1375.60, 1203.20, 110.90}},
			{!"LVA Freight Depot",            {1315.30, 1044.60, -89.00, 1375.60, 1087.60, 110.90}},
			{!"LVA Freight Depot",            {1236.60, 1163.40, -89.00, 1277.00, 1203.20, 110.90}},
			{!"Las Barrancas",                {-926.10, 1398.70, -3.00, -719.20, 1634.60, 200.00}},
			{!"Las Brujas",                   {-365.10, 2123.00, -3.00, -208.50, 2217.60, 200.00}},
			{!"Las Colinas",                  {1994.30, -1100.80, -89.00, 2056.80, -920.80, 110.90}},
			{!"Las Colinas",                  {2056.80, -1126.30, -89.00, 2126.80, -920.80, 110.90}},
			{!"Las Colinas",                  {2185.30, -1154.50, -89.00, 2281.40, -934.40, 110.90}},
			{!"Las Colinas",                  {2126.80, -1126.30, -89.00, 2185.30, -934.40, 110.90}},
			{!"Las Colinas",                  {2747.70, -1120.00, -89.00, 2959.30, -945.00, 110.90}},
			{!"Las Colinas",                  {2632.70, -1135.00, -89.00, 2747.70, -945.00, 110.90}},
			{!"Las Colinas",                  {2281.40, -1135.00, -89.00, 2632.70, -945.00, 110.90}},
			{!"Las Payasadas",                {-354.30, 2580.30, 2.00, -133.60, 2816.80, 200.00}},
			{!"Las Venturas Airport",         {1236.60, 1203.20, -89.00, 1457.30, 1883.10, 110.90}},
			{!"Las Venturas Airport",         {1457.30, 1203.20, -89.00, 1777.30, 1883.10, 110.90}},
			{!"Las Venturas Airport",         {1457.30, 1143.20, -89.00, 1777.40, 1203.20, 110.90}},
			{!"Las Venturas Airport",         {1515.80, 1586.40, -12.50, 1729.90, 1714.50, 87.50}},
			{!"Last Dime Motel",              {1823.00, 596.30, -89.00, 1997.20, 823.20, 110.90}},
			{!"Leafy Hollow",                 {-1166.90, -1856.00, 0.00, -815.60, -1602.00, 200.00}},
			{!"Liberty City",                 {-1000.00, 400.00, 1300.00, -700.00, 600.00, 1400.00}},
			{!"Lil' Probe Inn",               {-90.20, 1286.80, -3.00, 153.80, 1554.10, 200.00}},
			{!"Linden Side",                  {2749.90, 943.20, -89.00, 2923.30, 1198.90, 110.90}},
			{!"Linden Station",               {2749.90, 1198.90, -89.00, 2923.30, 1548.90, 110.90}},
			{!"Linden Station",               {2811.20, 1229.50, -39.50, 2861.20, 1407.50, 60.40}},
			{!"Little Mexico",                {1701.90, -1842.20, -89.00, 1812.60, -1722.20, 110.90}},
			{!"Little Mexico",                {1758.90, -1722.20, -89.00, 1812.60, -1577.50, 110.90}},
			{!"Los Flores",                   {2581.70, -1454.30, -89.00, 2632.80, -1393.40, 110.90}},
			{!"Los Flores",                   {2581.70, -1393.40, -89.00, 2747.70, -1135.00, 110.90}},
			{!"Los Santos International",     {1249.60, -2394.30, -89.00, 1852.00, -2179.20, 110.90}},
			{!"Los Santos International",     {1852.00, -2394.30, -89.00, 2089.00, -2179.20, 110.90}},
			{!"Los Santos International",     {1382.70, -2730.80, -89.00, 2201.80, -2394.30, 110.90}},
			{!"Los Santos International",     {1974.60, -2394.30, -39.00, 2089.00, -2256.50, 60.90}},
			{!"Los Santos International",     {1400.90, -2669.20, -39.00, 2189.80, -2597.20, 60.90}},
			{!"Los Santos International",     {2051.60, -2597.20, -39.00, 2152.40, -2394.30, 60.90}},
			{!"Marina",                       {647.70, -1804.20, -89.00, 851.40, -1577.50, 110.90}},
			{!"Marina",                       {647.70, -1577.50, -89.00, 807.90, -1416.20, 110.90}},
			{!"Marina",                       {807.90, -1577.50, -89.00, 926.90, -1416.20, 110.90}},
			{!"Market",                       {787.40, -1416.20, -89.00, 1072.60, -1310.20, 110.90}},
			{!"Market",                       {952.60, -1310.20, -89.00, 1072.60, -1130.80, 110.90}},
			{!"Market",                       {1072.60, -1416.20, -89.00, 1370.80, -1130.80, 110.90}},
			{!"Market",                       {926.90, -1577.50, -89.00, 1370.80, -1416.20, 110.90}},
			{!"Market Station",               {787.40, -1410.90, -34.10, 866.00, -1310.20, 65.80}},
			{!"Martin Bridge",                {-222.10, 293.30, 0.00, -122.10, 476.40, 200.00}},
			{!"Missionary Hill",              {-2994.40, -811.20, 0.00, -2178.60, -430.20, 200.00}},
			{!"Montgomery",                   {1119.50, 119.50, -3.00, 1451.40, 493.30, 200.00}},
			{!"Montgomery",                   {1451.40, 347.40, -6.10, 1582.40, 420.80, 200.00}},
			{!"Montgomery Intersection",      {1546.60, 208.10, 0.00, 1745.80, 347.40, 200.00}},
			{!"Montgomery Intersection",      {1582.40, 347.40, 0.00, 1664.60, 401.70, 200.00}},
			{!"Mulholland",                   {1414.00, -768.00, -89.00, 1667.60, -452.40, 110.90}},
			{!"Mulholland",                   {1281.10, -452.40, -89.00, 1641.10, -290.90, 110.90}},
			{!"Mulholland",                   {1269.10, -768.00, -89.00, 1414.00, -452.40, 110.90}},
			{!"Mulholland",                   {1357.00, -926.90, -89.00, 1463.90, -768.00, 110.90}},
			{!"Mulholland",                   {1318.10, -910.10, -89.00, 1357.00, -768.00, 110.90}},
			{!"Mulholland",                   {1169.10, -910.10, -89.00, 1318.10, -768.00, 110.90}},
			{!"Mulholland",                   {768.60, -954.60, -89.00, 952.60, -860.60, 110.90}},
			{!"Mulholland",                   {687.80, -860.60, -89.00, 911.80, -768.00, 110.90}},
			{!"Mulholland",                   {737.50, -768.00, -89.00, 1142.20, -674.80, 110.90}},
			{!"Mulholland",                   {1096.40, -910.10, -89.00, 1169.10, -768.00, 110.90}},
			{!"Mulholland",                   {952.60, -937.10, -89.00, 1096.40, -860.60, 110.90}},
			{!"Mulholland",                   {911.80, -860.60, -89.00, 1096.40, -768.00, 110.90}},
			{!"Mulholland",                   {861.00, -674.80, -89.00, 1156.50, -600.80, 110.90}},
			{!"Mulholland Intersection",      {1463.90, -1150.80, -89.00, 1812.60, -768.00, 110.90}},
			{!"North Rock",                   {2285.30, -768.00, 0.00, 2770.50, -269.70, 200.00}},
			{!"Ocean Docks",                  {2373.70, -2697.00, -89.00, 2809.20, -2330.40, 110.90}},
			{!"Ocean Docks",                  {2201.80, -2418.30, -89.00, 2324.00, -2095.00, 110.90}},
			{!"Ocean Docks",                  {2324.00, -2302.30, -89.00, 2703.50, -2145.10, 110.90}},
			{!"Ocean Docks",                  {2089.00, -2394.30, -89.00, 2201.80, -2235.80, 110.90}},
			{!"Ocean Docks",                  {2201.80, -2730.80, -89.00, 2324.00, -2418.30, 110.90}},
			{!"Ocean Docks",                  {2703.50, -2302.30, -89.00, 2959.30, -2126.90, 110.90}},
			{!"Ocean Docks",                  {2324.00, -2145.10, -89.00, 2703.50, -2059.20, 110.90}},
			{!"Ocean Flats",                  {-2994.40, 277.40, -9.10, -2867.80, 458.40, 200.00}},
			{!"Ocean Flats",                  {-2994.40, -222.50, -0.00, -2593.40, 277.40, 200.00}},
			{!"Ocean Flats",                  {-2994.40, -430.20, -0.00, -2831.80, -222.50, 200.00}},
			{!"Octane Springs",               {338.60, 1228.50, 0.00, 664.30, 1655.00, 200.00}},
			{!"Old Venturas Strip",           {2162.30, 2012.10, -89.00, 2685.10, 2202.70, 110.90}},
			{!"Palisades",                    {-2994.40, 458.40, -6.10, -2741.00, 1339.60, 200.00}},
			{!"Palomino Creek",               {2160.20, -149.00, 0.00, 2576.90, 228.30, 200.00}},
			{!"Paradiso",                     {-2741.00, 793.40, -6.10, -2533.00, 1268.40, 200.00}},
			{!"Pershing Square",              {1440.90, -1722.20, -89.00, 1583.50, -1577.50, 110.90}},
			{!"Pilgrim",                      {2437.30, 1383.20, -89.00, 2624.40, 1783.20, 110.90}},
			{!"Pilgrim",                      {2624.40, 1383.20, -89.00, 2685.10, 1783.20, 110.90}},
			{!"Pilson Intersection",          {1098.30, 2243.20, -89.00, 1377.30, 2507.20, 110.90}},
			{!"Pirates in Men's Pants",       {1817.30, 1469.20, -89.00, 2027.40, 1703.20, 110.90}},
			{!"Playa del Seville",            {2703.50, -2126.90, -89.00, 2959.30, -1852.80, 110.90}},
			{!"Prickle Pine",                 {1534.50, 2583.20, -89.00, 1848.40, 2863.20, 110.90}},
			{!"Prickle Pine",                 {1117.40, 2507.20, -89.00, 1534.50, 2723.20, 110.90}},
			{!"Prickle Pine",                 {1848.40, 2553.40, -89.00, 1938.80, 2863.20, 110.90}},
			{!"Prickle Pine",                 {1938.80, 2624.20, -89.00, 2121.40, 2861.50, 110.90}},
			{!"Queens",                       {-2533.00, 458.40, 0.00, -2329.30, 578.30, 200.00}},
			{!"Queens",                       {-2593.40, 54.70, 0.00, -2411.20, 458.40, 200.00}},
			{!"Queens",                       {-2411.20, 373.50, 0.00, -2253.50, 458.40, 200.00}},
			{!"Randolph Industrial Estate",   {1558.00, 596.30, -89.00, 1823.00, 823.20, 110.90}},
			{!"Redsands East",                {1817.30, 2011.80, -89.00, 2106.70, 2202.70, 110.90}},
			{!"Redsands East",                {1817.30, 2202.70, -89.00, 2011.90, 2342.80, 110.90}},
			{!"Redsands East",                {1848.40, 2342.80, -89.00, 2011.90, 2478.40, 110.90}},
			{!"Redsands West",                {1236.60, 1883.10, -89.00, 1777.30, 2142.80, 110.90}},
			{!"Redsands West",                {1297.40, 2142.80, -89.00, 1777.30, 2243.20, 110.90}},
			{!"Redsands West",                {1377.30, 2243.20, -89.00, 1704.50, 2433.20, 110.90}},
			{!"Redsands West",                {1704.50, 2243.20, -89.00, 1777.30, 2342.80, 110.90}},
			{!"Regular Tom",                  {-405.70, 1712.80, -3.00, -276.70, 1892.70, 200.00}},
			{!"Richman",                      {647.50, -1118.20, -89.00, 787.40, -954.60, 110.90}},
			{!"Richman",                      {647.50, -954.60, -89.00, 768.60, -860.60, 110.90}},
			{!"Richman",                      {225.10, -1369.60, -89.00, 334.50, -1292.00, 110.90}},
			{!"Richman",                      {225.10, -1292.00, -89.00, 466.20, -1235.00, 110.90}},
			{!"Richman",                      {72.60, -1404.90, -89.00, 225.10, -1235.00, 110.90}},
			{!"Richman",                      {72.60, -1235.00, -89.00, 321.30, -1008.10, 110.90}},
			{!"Richman",                      {321.30, -1235.00, -89.00, 647.50, -1044.00, 110.90}},
			{!"Richman",                      {321.30, -1044.00, -89.00, 647.50, -860.60, 110.90}},
			{!"Richman",                      {321.30, -860.60, -89.00, 687.80, -768.00, 110.90}},
			{!"Richman",                      {321.30, -768.00, -89.00, 700.70, -674.80, 110.90}},
			{!"Robada Intersection",          {-1119.00, 1178.90, -89.00, -862.00, 1351.40, 110.90}},
			{!"Roca Escalante",               {2237.40, 2202.70, -89.00, 2536.40, 2542.50, 110.90}},
			{!"Roca Escalante",               {2536.40, 2202.70, -89.00, 2625.10, 2442.50, 110.90}},
			{!"Rockshore East",               {2537.30, 676.50, -89.00, 2902.30, 943.20, 110.90}},
			{!"Rockshore West",               {1997.20, 596.30, -89.00, 2377.30, 823.20, 110.90}},
			{!"Rockshore West",               {2377.30, 596.30, -89.00, 2537.30, 788.80, 110.90}},
			{!"Rodeo",                        {72.60, -1684.60, -89.00, 225.10, -1544.10, 110.90}},
			{!"Rodeo",                        {72.60, -1544.10, -89.00, 225.10, -1404.90, 110.90}},
			{!"Rodeo",                        {225.10, -1684.60, -89.00, 312.80, -1501.90, 110.90}},
			{!"Rodeo",                        {225.10, -1501.90, -89.00, 334.50, -1369.60, 110.90}},
			{!"Rodeo",                        {334.50, -1501.90, -89.00, 422.60, -1406.00, 110.90}},
			{!"Rodeo",                        {312.80, -1684.60, -89.00, 422.60, -1501.90, 110.90}},
			{!"Rodeo",                        {422.60, -1684.60, -89.00, 558.00, -1570.20, 110.90}},
			{!"Rodeo",                        {558.00, -1684.60, -89.00, 647.50, -1384.90, 110.90}},
			{!"Rodeo",                        {466.20, -1570.20, -89.00, 558.00, -1385.00, 110.90}},
			{!"Rodeo",                        {422.60, -1570.20, -89.00, 466.20, -1406.00, 110.90}},
			{!"Rodeo",                        {466.20, -1385.00, -89.00, 647.50, -1235.00, 110.90}},
			{!"Rodeo",                        {334.50, -1406.00, -89.00, 466.20, -1292.00, 110.90}},
			{!"Royal Casino",                 {2087.30, 1383.20, -89.00, 2437.30, 1543.20, 110.90}},
			{!"San Andreas Sound",            {2450.30, 385.50, -100.00, 2759.20, 562.30, 200.00}},
			{!"Santa Flora",                  {-2741.00, 458.40, -7.60, -2533.00, 793.40, 200.00}},
			{!"Santa Maria Beach",            {342.60, -2173.20, -89.00, 647.70, -1684.60, 110.90}},
			{!"Santa Maria Beach",            {72.60, -2173.20, -89.00, 342.60, -1684.60, 110.90}},
			{!"Shady Cabin",                  {-1632.80, -2263.40, -3.00, -1601.30, -2231.70, 200.00}},
			{!"Shady Creeks",                 {-1820.60, -2643.60, -8.00, -1226.70, -1771.60, 200.00}},
			{!"Shady Creeks",                 {-2030.10, -2174.80, -6.10, -1820.60, -1771.60, 200.00}},
			{!"Sobell Rail Yards",            {2749.90, 1548.90, -89.00, 2923.30, 1937.20, 110.90}},
			{!"Spinybed",                     {2121.40, 2663.10, -89.00, 2498.20, 2861.50, 110.90}},
			{!"Starfish Casino",              {2437.30, 1783.20, -89.00, 2685.10, 2012.10, 110.90}},
			{!"Starfish Casino",              {2437.30, 1858.10, -39.00, 2495.00, 1970.80, 60.90}},
			{!"Starfish Casino",              {2162.30, 1883.20, -89.00, 2437.30, 2012.10, 110.90}},
			{!"Temple",                       {1252.30, -1130.80, -89.00, 1378.30, -1026.30, 110.90}},
			{!"Temple",                       {1252.30, -1026.30, -89.00, 1391.00, -926.90, 110.90}},
			{!"Temple",                       {1252.30, -926.90, -89.00, 1357.00, -910.10, 110.90}},
			{!"Temple",                       {952.60, -1130.80, -89.00, 1096.40, -937.10, 110.90}},
			{!"Temple",                       {1096.40, -1130.80, -89.00, 1252.30, -1026.30, 110.90}},
			{!"Temple",                       {1096.40, -1026.30, -89.00, 1252.30, -910.10, 110.90}},
			{!"The Camel's Toe",              {2087.30, 1203.20, -89.00, 2640.40, 1383.20, 110.90}},
			{!"The Clown's Pocket",           {2162.30, 1783.20, -89.00, 2437.30, 1883.20, 110.90}},
			{!"The Emerald Isle",             {2011.90, 2202.70, -89.00, 2237.40, 2508.20, 110.90}},
			{!"The Farm",                     {-1209.60, -1317.10, 114.90, -908.10, -787.30, 251.90}},
			{!"The Four Dragons Casino",      {1817.30, 863.20, -89.00, 2027.30, 1083.20, 110.90}},
			{!"The High Roller",              {1817.30, 1283.20, -89.00, 2027.30, 1469.20, 110.90}},
			{!"The Mako Span",                {1664.60, 401.70, 0.00, 1785.10, 567.20, 200.00}},
			{!"The Panopticon",               {-947.90, -304.30, -1.10, -319.60, 327.00, 200.00}},
			{!"The Pink Swan",                {1817.30, 1083.20, -89.00, 2027.30, 1283.20, 110.90}},
			{!"The Sherman Dam",              {-968.70, 1929.40, -3.00, -481.10, 2155.20, 200.00}},
			{!"The Strip",                    {2027.40, 863.20, -89.00, 2087.30, 1703.20, 110.90}},
			{!"The Strip",                    {2106.70, 1863.20, -89.00, 2162.30, 2202.70, 110.90}},
			{!"The Strip",                    {2027.40, 1783.20, -89.00, 2162.30, 1863.20, 110.90}},
			{!"The Strip",                    {2027.40, 1703.20, -89.00, 2137.40, 1783.20, 110.90}},
			{!"The Visage",                   {1817.30, 1863.20, -89.00, 2106.70, 2011.80, 110.90}},
			{!"The Visage",                   {1817.30, 1703.20, -89.00, 2027.40, 1863.20, 110.90}},
			{!"Unity Station",                {1692.60, -1971.80, -20.40, 1812.60, -1932.80, 79.50}},
			{!"Valle Ocultado",               {-936.60, 2611.40, 2.00, -715.90, 2847.90, 200.00}},
			{!"Verdant Bluffs",               {930.20, -2488.40, -89.00, 1249.60, -2006.70, 110.90}},
			{!"Verdant Bluffs",               {1073.20, -2006.70, -89.00, 1249.60, -1842.20, 110.90}},
			{!"Verdant Bluffs",               {1249.60, -2179.20, -89.00, 1692.60, -1842.20, 110.90}},
			{!"Verdant Meadows",              {37.00, 2337.10, -3.00, 435.90, 2677.90, 200.00}},
			{!"Verona Beach",                 {647.70, -2173.20, -89.00, 930.20, -1804.20, 110.90}},
			{!"Verona Beach",                 {930.20, -2006.70, -89.00, 1073.20, -1804.20, 110.90}},
			{!"Verona Beach",                 {851.40, -1804.20, -89.00, 1046.10, -1577.50, 110.90}},
			{!"Verona Beach",                 {1161.50, -1722.20, -89.00, 1323.90, -1577.50, 110.90}},
			{!"Verona Beach",                 {1046.10, -1722.20, -89.00, 1161.50, -1577.50, 110.90}},
			{!"Vinewood",                     {787.40, -1310.20, -89.00, 952.60, -1130.80, 110.90}},
			{!"Vinewood",                     {787.40, -1130.80, -89.00, 952.60, -954.60, 110.90}},
			{!"Vinewood",                     {647.50, -1227.20, -89.00, 787.40, -1118.20, 110.90}},
			{!"Vinewood",                     {647.70, -1416.20, -89.00, 787.40, -1227.20, 110.90}},
			{!"Whitewood Estates",            {883.30, 1726.20, -89.00, 1098.30, 2507.20, 110.90}},
			{!"Whitewood Estates",            {1098.30, 1726.20, -89.00, 1197.30, 2243.20, 110.90}},
			{!"Willowfield",                  {1970.60, -2179.20, -89.00, 2089.00, -1852.80, 110.90}},
			{!"Willowfield",                  {2089.00, -2235.80, -89.00, 2201.80, -1989.90, 110.90}},
			{!"Willowfield",                  {2089.00, -1989.90, -89.00, 2324.00, -1852.80, 110.90}},
			{!"Willowfield",                  {2201.80, -2095.00, -89.00, 2324.00, -1989.90, 110.90}},
			{!"Willowfield",                  {2541.70, -1941.40, -89.00, 2703.50, -1852.80, 110.90}},
			{!"Willowfield",                  {2324.00, -2059.20, -89.00, 2541.70, -1852.80, 110.90}},
			{!"Willowfield",                  {2541.70, -2059.20, -89.00, 2703.50, -1941.40, 110.90}},
			{!"Yellow Bell Station",          {1377.40, 2600.40, -21.90, 1492.40, 2687.30, 78.00}},
			{!"Los Santos",                   {44.60, -2892.90, -242.90, 2997.00, -768.00, 900.00}},
			{!"Las Venturas",                 {869.40, 596.30, -242.90, 2997.00, 2993.80, 900.00}},
			{!"Bone County",                  {-480.50, 596.30, -242.90, 869.40, 2993.80, 900.00}},
			{!"Tierra Robada",                {-2997.40, 1659.60, -242.90, -480.50, 2993.80, 900.00}},
			{!"Tierra Robada",                {-1213.90, 596.30, -242.90, -480.50, 1659.60, 900.00}},
			{!"San Fierro",                   {-2997.40, -1115.50, -242.90, -1213.90, 1659.60, 900.00}},
			{!"Red County",                   {-1213.90, -768.00, -242.90, 2997.00, 596.30, 900.00}},
			{!"Flint County",                 {-1213.90, -2892.90, -242.90, 44.60, -768.00, 900.00}},
			{!"Whetstone",                    {-2997.40, -2892.90, -242.90, -1213.90, -1115.50, 900.00}}
		};
		static isim[32] = "San Andreas";

		for (new i = 0; i != sizeof(bolgelerBilgi); i ++) if((fX >= bolgelerBilgi[i][bolgePos][0] && fX <= bolgelerBilgi[i][bolgePos][3]) && (fY >= bolgelerBilgi[i][bolgePos][1] && fY <= bolgelerBilgi[i][bolgePos][4]) && (fZ >= bolgelerBilgi[i][bolgePos][2] && fZ <= bolgelerBilgi[i][bolgePos][5])) {
			strunpack(isim, bolgelerBilgi[i][bolgeAdi]);
			break;
		}
		return isim;
	}

	stock IsPlayerIdle(playerid) {
		new index = GetPlayerAnimationIndex(playerid);
		return ((index == 1275) || (1181 <= index <= 1192));
	}

	stock KoltukKontrol(vehicleid, start = 1)
	{
		static seats;
		seats = KoltukSayiKontrol(vehicleid);
		for (new i = start; i < seats; i ++) if(!AracKoltukKullanimda(vehicleid, i)) {
			return i;
		}
		return -1;
	}

	stock GetVehicleFromBehind(vehicleid)
	{
		static Float:fCoords[7];

		GetVehiclePos(vehicleid, fCoords[0], fCoords[1], fCoords[2]);
		GetVehicleZAngle(vehicleid, fCoords[3]);

		foreach(new i : Araclar) if(i != vehicleid && GetVehiclePos(i, fCoords[4], fCoords[5], fCoords[6]))
		{
			if(floatabs(fCoords[0] - fCoords[4]) < 6 && floatabs(fCoords[1] - fCoords[5]) < 6 && floatabs(fCoords[2] - fCoords[6]) < 6)
				return i;
		}
		return INVALID_VEHICLE_ID;
	}

	stock KoltukSayiKontrol(vehicleid)
	{
		static const koltuklar[] = {
			4, 2, 2, 2, 4, 4, 1, 2, 2, 4, 2, 2, 2, 4, 2, 2, 4, 2, 4, 2, 4, 4, 2, 2, 2, 1, 4, 4, 4, 2,
			1, 7, 1, 2, 2, 0, 2, 7, 4, 2, 4, 1, 2, 2, 2, 4, 1, 2, 1, 0, 0, 2, 1, 1, 1, 2, 2, 2, 4, 4,
			2, 2, 2, 2, 1, 1, 4, 4, 2, 2, 4, 2, 1, 1, 2, 2, 1, 2, 2, 4, 2, 1, 4, 3, 1, 1, 1, 4, 2, 2,
			4, 2, 4, 1, 2, 2, 2, 4, 4, 2, 2, 1, 2, 2, 2, 2, 2, 4, 2, 1, 1, 2, 1, 1, 2, 2, 4, 2, 2, 1,
			1, 2, 2, 2, 2, 2, 2, 2, 2, 4, 1, 1, 1, 2, 2, 2, 2, 7, 7, 1, 4, 2, 2, 2, 2, 2, 4, 4, 2, 2,
			4, 4, 2, 1, 2, 2, 2, 2, 2, 2, 4, 4, 2, 2, 1, 2, 4, 4, 1, 0, 0, 1, 1, 2, 1, 2, 2, 1, 2, 4,
			4, 2, 4, 1, 0, 4, 2, 2, 2, 2, 0, 0, 7, 2, 2, 1, 4, 4, 4, 2, 2, 2, 2, 2, 4, 2, 0, 0, 0, 4,
			0, 0
		};
		static model;
		model = GetVehicleModel(vehicleid);
		if(400 <= model <= 611)
			return koltuklar[model - 400];

		return 0;
	}

	stock YakinAracKontrol(playerid)
	{
		static Float:fX, Float:fY, Float:fZ;
		foreach(new i : Araclar) if(IsValidVehicle(i) && GetVehiclePos(i, fX, fY, fZ))
		{
			if(IsPlayerInRangeOfPoint(playerid, 3.5, fX, fY, fZ)) return i;
		}
		return INVALID_VEHICLE_ID;
	}

	stock AracKoltukKullanimda(vehicleid, seat)
	{
		foreach (new i : Player) if(IsPlayerInVehicle(i, vehicleid) && GetPlayerVehicleSeat(i) == seat) {
			return 1;
		}
		return 0;
	}

	stock SurucuBul(vehicleid) {
		foreach (new i : Player) {
			if(GetPlayerState(i) == PLAYER_STATE_DRIVER && GetPlayerVehicleID(i) == vehicleid) return i;
		}
		return INVALID_PLAYER_ID;
	}

	stock AracDuzelt(aracid)
	{
		static Float:fAngle;
		GetVehicleZAngle(aracid, fAngle);
		SetVehicleZAngle(aracid, fAngle);
		return SetVehicleVelocity(aracid, 0.0, 0.0, 0.0);
	}

	stock Oyuncu_Evde(playerid)
	{
		for (new i = 0; i != MAKSIMUM_EV; i ++) if(EvBilgi[i][evKullanimda] && GetPlayerInterior(playerid) == EvBilgi[i][evInterior] && GetPlayerVirtualWorld(playerid) == EvBilgi[i][evVW]) {
			return i;
		}
		return -1;
	}

	stock OyuncuDolapYakin(playerid)
	{
		static birlikid;
		birlikid = oyuncuData[playerid][oBirlik];
		if(birlikid == -1)
			return 0;

		if(IsPlayerInRangeOfPoint(playerid, 5.0, BirlikBilgi[birlikid][bDolapPos][0], BirlikBilgi[birlikid][bDolapPos][1], BirlikBilgi[birlikid][bDolapPos][2]) && GetPlayerInterior(playerid) == BirlikBilgi[birlikid][bDolapInt] && GetPlayerVirtualWorld(playerid) == BirlikBilgi[birlikid][bDolapVW])
			return 1;

		return 0;
	}

	stock SarjorYenilemeAnimasyon(playerid, silahid)
	{
		switch (silahid)
		{
			case 22: ApplyAnimation(playerid, "COLT45", "colt45_reload", 4.1, 0, 0, 0, 0, 0);
			case 23: ApplyAnimation(playerid, "SILENCED", "Silence_reload", 4.1, 0, 0, 0, 0, 0);
			case 24: ApplyAnimation(playerid, "PYTHON", "python_reload", 4.1, 0, 0, 0, 0, 0);
			case 25, 27: ApplyAnimation(playerid, "BUDDY", "buddy_reload", 4.1, 0, 0, 0, 0, 0);
			case 26: ApplyAnimation(playerid, "COLT45", "sawnoff_reload", 4.1, 0, 0, 0, 0, 0);
			case 29..31, 33, 34: ApplyAnimation(playerid, "RIFLE", "rifle_load", 4.1, 0, 0, 0, 0, 0);
			case 28, 32: ApplyAnimation(playerid, "TEC", "tec_reload", 4.1, 0, 0, 0, 0, 0);
		}
		return 1;
	}

	stock ATM_Yakin(playerid)
	{
		new sonuc = -1;
		for (new i; i != MAKSIMUM_ATM; i ++)
		{
			if(ATMBilgi[i][atmKullanimda] && IsPlayerInRangeOfPoint(playerid, 2.5, ATMBilgi[i][atmPos][0], ATMBilgi[i][atmPos][1], ATMBilgi[i][atmPos][2]))
			{
				sonuc = i;
			}
		}
		return sonuc;
	}

	stock CanDuzenle(playerid, Float:can)
	return oyuncuData[playerid][oCan] = can, SetPlayerHealth(playerid, can);

	stock CanYukselt(playerid, Float:can)
	{
		new Float:HP;
		GetPlayerHealth(playerid, HP);
		SetPlayerHealth(playerid,HP + can);
		return 1;
	}

	stock ZirhDuzenle(playerid, Float:zirh)
	return oyuncuData[playerid][oZirh] = zirh, SetPlayerArmour(playerid, zirh);

	stock Arac_Yakin(playerid)
	{
		static Float:fX, Float:fY, Float:fZ;
		foreach(new i : Araclar) {
			GetVehiclePos(AracBilgi[i][aracYarat], fX, fY, fZ);
			if(IsPlayerInRangeOfPoint(playerid, 3.8, fX, fY, fZ)) {
				return i;
			}
		}
		return -1;
	}

	stock Hasar_Ekle(playerid, bodypart, Float:hasar, hasarveren, silahid)
	{
		for (new i = 0; i != MAKSIMUM_HASAR; i ++)
		{
			if(!HasarBilgi[playerid][i][hasarVarmi])
			{
				HasarBilgi[playerid][i][hasarVarmi] = true;
				HasarBilgi[playerid][i][hasarBolge] = bodypart;
				HasarBilgi[playerid][i][hasarVeren] = hasarveren;
				HasarBilgi[playerid][i][hasarDeger] = hasar;
				HasarBilgi[playerid][i][hasarSilah] = silahid;
				return i;
			}
		}
		return -1;
	}

	stock Ceza_Ekle(oyuncuid, ceza, sebep[], memur[])
	{
		if(!IsPlayerConnected(oyuncuid)) return 0;
		if(ceza < 1 || ceza > MAKSIMUM_CEZA) return 0;
		new string[1024], cezatarih[36], cezasebep[64];
		format(cezatarih, 36, Tarih());
		format(cezasebep, 64, sebep);
		mysql_format(g_SQL, string, sizeof(string), "INSERT INTO `cezalar` (`cezaSQL`, `cezaMemur`, `cezaUcret`, `cezaTarih`, `cezaSebep`) VALUES('%e', '%e','%d', '%e', '%e')", OyuncuIsim(oyuncuid, 1), memur, ceza, cezatarih, sebep);
		return mysql_tquery(g_SQL, string);
	}

	stock Arac_Ceza_Ekle(aracid, ceza, sebep[], memur[])
	{
		if(!Iter_Contains(Araclar, aracid)) return 0;
		if(ceza < 50 || ceza > 5000) return 0;
		new string[1024], cezatarih[36], cezasebep[64];
		format(cezatarih, 36, Tarih());
		format(cezasebep, 64, sebep);
		mysql_format(g_SQL, string, sizeof(string), "INSERT INTO `araccezalari` (`aracPlaka`, `cezaKesen`, `cezaUcret`, `cezaTarih`, `cezaSebep`) VALUES('%e', '%e','%d', '%e', '%e')", AracBilgi[aracid][aracPlaka], memur, ceza, cezatarih, sebep);
		return mysql_tquery(g_SQL, string);
	}

	stock HasarBolge(bolge)
	{
		static bilgi[24];
		switch(bolge)
		{
			case 3: bilgi = "Karýn";
			case 4: bilgi = "Kalça";
			case 5: bilgi = "Sol El";
			case 6: bilgi = "Sað El";
			case 7: bilgi = "Sol Ayak";
			case 8: bilgi = "Sað Ayak";
			case 9: bilgi = "Kafa";
			default: bilgi = "Yok & Diðer";
		}
		return bilgi;
	}

	stock HapiseAt(oyuncuid)
	{
		switch(random(4))
		{
			case 0: SetPlayerPos(oyuncuid, -9.8222,2337.3325,24.3034);
			case 1: SetPlayerPos(oyuncuid, -10.4860,2330.1338,24.3034);
			case 2: SetPlayerPos(oyuncuid, -18.2210,2322.5164,24.3034);
			case 3: SetPlayerPos(oyuncuid, -26.6612,2321.0889,24.3034);
		}
		SetPlayerInterior(oyuncuid, 0);
		SetPlayerVirtualWorld(oyuncuid, oyuncuData[oyuncuid][oID]);
		TogglePlayerControllable(oyuncuid, false);
		return GetPlayerPos(oyuncuid, oyuncuData[oyuncuid][oPos][0], oyuncuData[oyuncuid][oPos][1], oyuncuData[oyuncuid][oPos][2]);
	}

	stock ICHapiseAt(oyuncuid, id)
	{
		if(id == -1) id = 0;
		SetPlayerPos(oyuncuid, TutuklamaNoktasi[id][hPos][0], TutuklamaNoktasi[id][hPos][1], TutuklamaNoktasi[id][hPos][2]);
		SetPlayerFacingAngle(oyuncuid, TutuklamaNoktasi[id][hPos][3]);
		SetPlayerInterior(oyuncuid, TutuklamaNoktasi[id][hInterior]);
		SetPlayerVirtualWorld(oyuncuid, TutuklamaNoktasi[id][hWorld]);
		TogglePlayerControllable(oyuncuid, false);
		SetTimerEx("oyuncucoz", 2000, false, "i", oyuncuid);
		oyuncuData[oyuncuid][oKelepceli] = 0;
		SetPlayerSpecialAction(oyuncuid, SPECIAL_ACTION_NONE);
		RemovePlayerAttachedObject(oyuncuid, 5);
		oyuncuData[oyuncuid][oHapisID] = id;
		return OyuncuKaydet(oyuncuid);
	}

	stock AntiDeAMX()
	{
		new a[][] =
		{
			"Unarmed (Fist)",
			"Brass K"
		};
	#pragma unused a
	}

	stock WasteDeAMXersTime()
	{
		new b;
    #emit load.pri b
    #emit stor.pri b
	}

	stock IsPlayerInWater(playerid)
	{
		GetPlayerPos(playerid, oyuncuData[playerid][oPos][0], oyuncuData[playerid][oPos][1], oyuncuData[playerid][oPos][2]);
		if(oyuncuData[playerid][oPos][2] < 0.7) switch(GetPlayerAnimationIndex(playerid)) { case 1543, 1538, 1539: return 1; }
		if(GetPlayerDistanceFromPoint(playerid, -965, 2438, 42) <= 700 && oyuncuData[playerid][oPos][2] < 45) return 1;
		new Float:water_places[][] =
		{
			{25.0,  2313.0, -1417.0,        23.0},
			{15.0,  1280.0, -773.0,         1082.0},
			{15.0,  1279.0, -804.0,         86.0},
			{20.0,  1094.0, -674.0,         111.0},
			{26.0,  194.0,  -1232.0,        76.0},
			{25.0,  2583.0, 2385.0,         15.0},
			{25.0,  225.0,  -1187.0,        73.0},
			{50.0,  1973.0, -1198.0,        17.0}
		};
		for(new t = 0; t < sizeof water_places; t++)
			if(GetPlayerDistanceFromPoint(playerid, water_places[t][1], water_places[t][2], water_places[t][3]) <= water_places[t][0]) return 1;

		return 0;
	}

	stock HileKontrol(playerid)
	{
    #if ANTI_HILE true
		if(IsPlayerAdmin(playerid)) return false;
		if(IsPlayerInAnyVehicle(playerid) && AracCan(GetPlayerVehicleID(playerid)) > 999.9) {
			SetVehicleHealth(GetPlayerVehicleID(playerid), 999.9);
			SCM_ExAll(RENK_YETKILI, "[YETKÝLÝ ÝÞLEM]: {FFFFFF}Sistem, %s adlý kiþiyi oyundan attý. sebep: Hile (#008)", OyuncuIsim(playerid));
			return KickEx(playerid);
		}
		if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK && oyuncuData[playerid][oJetpack] == false) {
			SCM_ExAll(RENK_YETKILI, "[YETKÝLÝ ÝÞLEM]: {FFFFFF}Sistem, %s adlý kiþiyi oyundan attý. sebep: Hile(#009)", OyuncuIsim(playerid));
			return KickEx(playerid);
		}
		switch(GetPlayerAnimationIndex(playerid))
		{
			case 1543, 1538, 1539:
			{
				if(!IsPlayerInWater(playerid)) {
					SCM_ExAll(RENK_YETKILI, "[YETKÝLÝ ÝÞLEM]: {FFFFFF}Sistem, %s adlý kiþiyi oyundan attý. sebep: Hile (#010)", OyuncuIsim(playerid));
					return KickEx(playerid);
				}
			}
		}
	#endif
	#pragma unused playerid
		return 0;
	}

	stock Float:AracCan(aracid) {
		static Float:araccan;
		GetVehicleHealth(aracid, araccan);
		return araccan;
	}

	stock AktiflikKontrol(text[]) {

		new strPos, returnID = 0, bool: isnum = true;
		while(text[strPos]) {
			if(isnum) {
				if('0' <= text[strPos] <= '9') returnID = (returnID * 10) + (text[strPos] - '0');
				else isnum = false;
			}
			strPos++;
		}
		if(isnum) {
			if(IsPlayerConnected(returnID)) return returnID;
		}
		else {

			new sz_playerName[MAX_PLAYER_NAME];
			foreach(new i : Player) {
				GetPlayerName(i, sz_playerName, MAX_PLAYER_NAME);
				if(!strcmp(sz_playerName, text, true, strPos)) return i;
			}
		}
		return INVALID_PLAYER_ID;
	}

	stock OfflineParaVer(id, miktar)
	{
		static query[256];
		mysql_format(g_SQL, query, sizeof(query), "UPDATE `oyuncular` SET `BankaPara` = `BankaPara`+%d WHERE `ID` = '%d'", miktar, id);
		mysql_query(g_SQL, query);
		return 1;
	}

	stock SQL_AktiflikKontrol(sqlid)
	{
		foreach(new i : Player) if(oyuncuData[i][oID] == sqlid) return i;
		return -1;
	}

	stock SQLID_IsimKontrol(sqlid)
	{
		new Cache:VeriCek, query[256], isim[256], rows;
		mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `oyuncular` WHERE `ID` = '%d'", sqlid);
		VeriCek = mysql_query(g_SQL, query);
		if(rows)
		{
			format(isim, sizeof(isim), "%s", vericek_varchar(0, "isim"));
		}
		cache_delete(VeriCek);
		return isim;
	}

	stock BotKontrol(vehicleid)
	{
		switch(GetVehicleModel(vehicleid)) {
			case 430, 446, 452, 453, 454, 472, 473, 484, 493, 595: return 1;
		}
		return 0;
	}

	stock BisikletKontrol(aracid)
	{
		static sonuc;
		switch(GetVehicleModel(aracid))
		{
			case 509, 481, 510, 462, 448, 581, 522, 461, 521, 523, 463, 586, 468, 471: sonuc = GetVehicleModel(aracid);
			default: sonuc = 0;
		}
		return sonuc;
	}

	stock OyuncuZirh(playerid)
	{
		static Float:amount;
		GetPlayerArmour(playerid, amount);
		return floatround(amount, floatround_round);
	}

	stock OyuncuCan(playerid)
	{
		static Float:amount;
		GetPlayerHealth(playerid, amount);
		return floatround(amount, floatround_round);
	}

	stock BirlikLevelUcret(birlikid)
	{
		static ucret;
		switch(BirlikBilgi[birlikid][birlikLevel]) {
			case 1: ucret = 3000;
			case 2: ucret = 5000;
			case 3: ucret = 7000;
			case 4: ucret = 15000;
			case 5: ucret = 30000;
			default: ucret = 0;
		}
		return ucret;
	}

	stock uturadi(tur) {
		static bilgi[24];
		switch(tur) {
			case 0: bilgi = "Düþük";
			case 1: bilgi = "Orta";
			case 2: bilgi = "Yüksek";
			default: bilgi = "Yok";
		}
		return bilgi;
	}

	stock Log_Kaydet(const path[], const str[], {Float,_}:...)
	{
		static args, start, end, File:file, string[1024];
		if((start = strfind(path, "/")) != -1) {
			strmid(string, path, 0, start + 1);

			if(!fexist(string))
				return printf("Girilen log klasörü geçersiz. (%s)", string);
		}
	#emit LOAD.S.pri 8
	#emit STOR.pri args

		file = fopen(path, io_append);

		if(!file)
			return 0;

		if(args > 8)
		{
		#emit ADDR.pri str
		#emit STOR.pri start

			for (end = start + (args - 8); end > start; end -= 4)
			{
	        #emit LREF.pri end
	        #emit PUSH.pri
			}
		#emit PUSH.S str
		#emit PUSH.C 1024
		#emit PUSH.C string
		#emit PUSH.C args
		#emit SYSREQ.C format

			fwrite(file, string);
			fwrite(file, "\r\n");
			fclose(file);

		#emit LCTRL 5
		#emit SCTRL 4
		#emit RETN
		}
		fwrite(file, str);
		fwrite(file, "\r\n");
		fclose(file);
		return 1;
	}

	stock AnimCek(playerid)
	{
		if(!IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			new animcik[32], animismine[32];
			GetAnimationName(GetPlayerAnimationIndex(playerid),animcik,32,animismine,32);
			if(!strcmp(animcik, "SWIM", true) && !strcmp(animismine, "SWIM_GLIDE", true)) return 1;
			else if(!strcmp(animcik, "SWIM", true) && !strcmp(animismine, "SWIM_BREAST", true)) return 1;
			else if(!strcmp(animcik, "SWIM", true) && !strcmp(animismine, "SWIM_CRAWL", true)) return 1;
			else if(!strcmp(animcik, "SWIM", true) && !strcmp(animismine, "SWIM_DIVE_UNDER", true)) return 1;
			else if(!strcmp(animcik, "SWIM", true) && !strcmp(animismine, "SWIM_DIVE_GLIDE", true)) return 1;
			else if(!strcmp(animcik, "SWIM", true) && !strcmp(animismine, "SWIM_UNDER", true)) return 1;
			else if(!strcmp(animcik, "SWIM", true) && !strcmp(animismine, "SWIM_TREAD", true)) return 1;
			else if(GetPlayerWeapon(playerid) != 46)
			{
				if(!strcmp(animcik, "PARACHUTE", true) && !strcmp(animismine, "FALL_SkyDive_Accel", true)) return 1;
				if(!strcmp(animcik, "PARACHUTE", true) && !strcmp(animismine, "FALL_SKYDIVE", true)) return 1;
			}
		}
		return 0;
	}

	stock PosCek(playerid)
	{
		new Float:x,Float:y,Float:z;
		GetPlayerPos(playerid, x, y, z);
		if((x >= -1408.0629 && y >= 2021.0587 && x <= -460.9319 && y <= 2861.4893) ||
			(x >= 1269.5886 && y >= -810.4507 && x <= 1288.8916 && y <= -800.5959) ||
			(x >= 1086.6010 && y >= -683.6998 && x <= 1103.0225 && y <= -662.1832) ||
			(x >= 169.6879 && y >= -1392.6630 && x <= 281.5444 && y <= -1168.9749) ||
			(x >= -828.3018 && y >= -2107.1487 && x <= -443.5032 && y <= -1855.6273) ||
			(x >= 1198.9982 && y >= -2407.0581 && x <= 1275.7397 && y <= -2341.6262) ||
			(x >= 2293.1467 && y >= -1432.5869 && x <= 2331.7388 && y <= -1397.6476) ||
			(x >= 1915.3196 && y >= -1236.2382 && x <= 2016.6565 && y <= -1167.9290) ||
			(x >= -2747.1692 && y >= -510.1152 && x <= -2663.2468 && y <= -411.4905) ||
			(x >= 1838.8041 && y >= 1463.2024 && x <= 2035.4167 && y <= 1703.0480) ||
			(x >= 2049.6646 && y >= 1843.3029 && x <= 2119.9021 && y <= 1983.5464) ||
			(x >= 2094.9255 && y >= 1085.2852 && x <= 2179.1790 && y <= 1183.0610) ||
			(x >= 2545.3718 && y >= 2347.7112 && x <= 2593.6794 && y <= 2403.8040))
		{
			return 1;
		}
		return 0;
	}

	stock DialogGoster(playerid, dialogid, stil, baslik[], icerik[], mesaj1[], mesaj2[]) {
		SetPVarInt(playerid, "dialog", dialogid);
		return ShowPlayerDialog(playerid, dialogid, stil, baslik, icerik, mesaj1, mesaj2);
	}

	stock AnimOynat(playerid, animlib[], animname[], Float:Speed, looping, lockx, locky, freeze, time, lp = 0)
	{
		if(oyuncuData[playerid][oHapisSure][0] > 0) return hataMesaji(playerid, "Hapisteyken animasyon kullanamazsýn.");
		if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken animasyon kullanamazsýn.");
		if(oyuncuData[playerid][oDonduruldu] > 0) return hataMesaji(playerid, "Dondurulma etkisindeyken animasyon kullanamazsýn.");

		if(!IsPlayerInAnyVehicle(playerid)) ClearAnimations(playerid);
		SetPVarInt(playerid, "anim", 1);
		return ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, freeze, time, lp);
	}

	stock OyuncuIP(playerid) {
		static ip[16];
		GetPlayerIp(playerid, ip, sizeof(ip));
		return ip;
	}


	stock AracTamirEt(aracid) return RepairVehicle(aracid), SetVehicleHealth(aracid, 999.9);
	stock ASpawn(aracid) return Arac_Spawn(Arac_IDBul(aracid));
	stock GostergeKontrol(aracid)
	{
		if(GetVehicleModel(aracid) == 509 || GetVehicleModel(aracid) == 510 || GetVehicleModel(aracid) == 481 || !IsEngineVehicle(aracid)) return 0;
		return 1;
	}

	stock Float:AracHizKontrol(playerid)
	{
		if(IsPlayerInAnyVehicle(playerid)) {
			static Float:fSpeed, Float:fVelocity[3];
			GetVehicleVelocity(GetPlayerVehicleID(playerid), fVelocity[0], fVelocity[1], fVelocity[2]);
			fSpeed = floatmul(floatsqroot((fVelocity[0] * fVelocity[0]) + (fVelocity[1] * fVelocity[1]) + (fVelocity[2] * fVelocity[2])), 100.0);
			return fSpeed;
		}
		return 0.0;
	}

	stock ProxDetector(Float:radi, playerid, string[], color, bubble = 1, soundID = 0) {
		new Float:PosX,
		Float:PosY,
		Float:PosZ,
		vw = GetPlayerVirtualWorld(playerid),
		interior = GetPlayerInterior(playerid);

		GetPlayerPos(playerid, PosX, PosY, PosZ);
		if(color == RENK_PEMBE && bubble == 1) {
	    //SetPlayerChatBubble(playerid, string, color, 12.0, 10000);
		}

		foreach(new i : Player) {
			if(GetPlayerVirtualWorld(i) == vw && GetPlayerInterior(i) == interior) {
				if(IsPlayerInRangeOfPoint(i, radi, PosX, PosY, PosZ)) {
					if(soundID != 0) {
						PlayerPlaySound(i, soundID, PosX, PosY, PosZ);
					}

					SendClientMessage(i, color, string);
				}
			}
		}
	}

	stock ProxDetectorSplitted(Float:radi, playerid, string[], string2[], color, bubble = 1, soundID = 0) {
		new Float:PosX,
		Float:PosY,
		Float:PosZ,
		vw = GetPlayerVirtualWorld(playerid),
		interior = GetPlayerInterior(playerid);

		GetPlayerPos(playerid, PosX, PosY, PosZ);
		if(color == RENK_PEMBE && bubble == 1) {
	    //SetPlayerChatBubble(playerid, string, color, 12.0, 10000);
		}

		foreach(new i : Player) {
			if(GetPlayerVirtualWorld(i) == vw && GetPlayerInterior(i) == interior) {
				if(IsPlayerInRangeOfPoint(i, radi, PosX, PosY, PosZ)) {
					if(soundID != 0) {
						PlayerPlaySound(i, soundID, PosX, PosY, PosZ);
					}

					SendClientMessage(i, color, string);
					SendClientMessage(i, color, string2);
				}
			}
		}
	}

	stock GetPosBehindVehicle(vehicleid, &Float:x, &Float:y, &Float:z, Float:offset=0.5)
	{
		new Float:vehicleSize[3], Float:vehiclePos[3];
		GetVehiclePos(vehicleid, vehiclePos[0], vehiclePos[1], vehiclePos[2]);
		GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, vehicleSize[0], vehicleSize[1], vehicleSize[2]);
		GetXYBehindVehicle(vehicleid, vehiclePos[0], vehiclePos[1], (vehicleSize[1]/2)+offset);
		x = vehiclePos[0];
		y = vehiclePos[1];
		z = vehiclePos[2];
		return 1;
	}

	stock GetXYBehindVehicle(vehicleid, &Float:q, &Float:w, Float:distance)
	{
		new Float:a;
		GetVehiclePos(vehicleid, q, w, a);
		GetVehicleZAngle(vehicleid, a);
		q += (distance * -floatsin(-a, degrees));
		w += (distance * -floatcos(-a, degrees));
	}

	stock EkstraDilCek(playerid)
	{
		new dil[24];
		format(dil, sizeof(dil), "%s", kokendilleri[oyuncuData[playerid][oEkstraDil]][kokendili]);
		return dil;
	}

	stock UcuncuDilCek(playerid)
	{
		new dil[24];
		format(dil, sizeof(dil), "%s", kokendilleri[oyuncuData[playerid][oUcuncuDil]][kokendili]);
		return dil;
	}

	stock RandomEx(min, max)
	{
		return random(max-min+1)+min;
	}

	stock VurusRenk(Float:hp)
	{
		new renk;
		if(hp > 0.0 && hp < 5.1) return renk = RENK_YESIL;
		else if(hp > 5.1 && hp < 12.1) return renk = RENK_SARI;
		else if(hp > 12.1) return renk = RENK_TURUNCU;
		return renk;
	}
	stock FirmaAlani(numara)
	{
		new firmaalan[120];
		switch(numara)
		{
			case 0:{firmaalan="Hastane";}
			case 1:{firmaalan="Medya/Basýn";}
			case 2:{firmaalan="Lojistik";}
			case 3:{firmaalan="Rent A Car & Galeri";}
			case 4:{firmaalan="Tamirhane";}
			case 5:{firmaalan="Hukuk";}
		}
		return firmaalan;
	}

	stock TezgahTuru(numara)
	{
		new firmaalan[120];
		switch(numara)
		{
			case 0:{firmaalan="Þekerleme";}
			case 1:{firmaalan="Balýk/Noodle";}
			case 2:{firmaalan="Fast Food";}
			case 3:{firmaalan="Lottery";}
			case 4:{firmaalan="Ýçecek";}
		}
		return firmaalan;
	}

	stock SeviyeYem(seviye)
	{
		new sayi;
		switch(seviye)
		{
			case 0: sayi = MAX_YEM;
			case 1: sayi = MAX_YEM + 5;
			case 2: sayi = MAX_YEM + 15;
			case 3: sayi = MAX_YEM + 25;
			case 4: sayi = MAX_YEM + 35;
			case 5: sayi = MAX_YEM + 50;
		}
		return sayi;
	}

	stock VipTekneBalik(numara)
	{
		new baliksinir;
		switch(numara)
		{
			case 1: baliksinir = MAX_TEKNE_BALIK + 30;
			default: baliksinir = MAX_TEKNE_BALIK;
		}
		return baliksinir;
	}

	stock VipBalik(playerid, numara)
	{
		new firmaalan, artis = 0;
		switch(oyuncuData[playerid][balikseviye])
		{
			case 0: artis = 5;
			case 1: artis = 7;
			case 2: artis = 10;
			case 3: artis = 13;
			case 4: artis = 16;
			case 5: artis = 20;
			default: artis = 5;
		}
		switch(numara)
		{
			case 0:{firmaalan= MAX_BALIK + artis;}
			case 1:{firmaalan=25 + artis;}
			default:{firmaalan = MAX_BALIK;}
		}
		return firmaalan;
	}

	stock ItemTur(numara)
	{
		new item[120];
		switch(numara)
		{
			case 0:{item="Tüketilebilir";}
			case 1:{item="Yiyecek";}
			case 2:{item="Gereçler";}
			case 3:{item="Craft";}
			case 4:{item="Elektronik";}
			case 5:{item="Uyuþturucu Yapýmý";}
		}
		return item;
	}

	stock AntiCheatName(ac)
	{
		new acname[128];
		switch(ac)
		{
			case 0 .. 1:{acname="AirBreak Hilesi";}
			case 2,3,6:{acname="Iþýnlanma Hilesi";}
			case 4,5:{acname="Crash Hilesi";}
			case 7 .. 8:{acname="Uçma Hilesi";}
			case 9 .. 10:{acname="Hýz Hilesi";}
			case 11 .. 12:{acname="Can Hilesi";}
			case 13:{acname="Zýrh Hilesi";}
			case 14:{acname="Para Hilesi";}
			case 15:{acname="Silah Hilesi";}
			case 16:{acname="Mermi Hilesi";}
			case 17:{acname="Sýnýrsýz Mermi Hilesi";}
			case 18:{acname="Special Action Hilesi";}
			case 19 .. 20:{acname="Ölümsüzlük Hilesi";}
			case 21:{acname="Anti-Invisible hack";}
			case 22:{acname="Anti-lagcomp-spoof";}
			case 23:{acname="Anti-Tuning hack";}
			case 24:{acname="Anti-Parkour mod";}
			case 25:{acname="Anti-Quick turn";}
			case 26:{acname="Anti-Rapid fire";}
			case 27:{acname="Anti-FakeSpawn";}
			case 28:{acname="Anti-FakeKill";}
			case 29:{acname="Anti-Pro Aim";}
			case 30:{acname="Anti-CJ run";}
			case 31:{acname="Anti-CarShot";}
			case 32:{acname="Anti-CarJack";}
			case 33:{acname="Anti-UnFreeze";}
			case 34:{acname="Anti-AFK Ghost";}
			case 35:{acname="Anti-Full Aiming";}
			case 36:{acname="Anti-Fake NPC";}
			case 37:{acname="Anti-Reconnect";}
			case 38:{acname="Yüksek Ping";}
			case 39:{acname="Anti-Dialog hack";}
			case 40:{acname="Protection from the sandbox";}
			case 41:{acname="Protection against an invalid version";}
			case 42:{acname="Anti-Rcon hack";}
			case 43:{acname="Anti-Tuning crasher";}
			case 44:{acname="Anti-Invalid seat crasher";}
			case 45:{acname="Anti-Dialog crasher";}
			case 46:{acname="Anti-Attached object crasher";}
			case 47:{acname="Anti-Weapon Crasher";}
			case 48:{acname="Flood protection connects to one slot";}
			case 49:{acname="Anti-flood callback functions";}
			case 50:{acname="Anti-flood change seat";}
			case 51:{acname="Anti-Ddos";}
			case 52:{acname="Anti-NOP's";}
		}
		return acname;
	}

	Dialog:arac_park(playerid, response, listitem, inputtext[])
	{
		if(!response) return 1;
		if(!IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Herhangi bir aracýn içerisinde deðilsin.");
		if(oyuncuData[playerid][oGiris] == false) return hataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oDonduruldu] > 0) return hataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oHapisSure][0] > 0 || oyuncuData[playerid][oHapisSure][1] > 0) return hataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
		
		static aracidsi;
		aracidsi = GetPlayerVehicleID(playerid);
		new aracid;
		if((aracid = Arac_IDBul(aracidsi)) != -1 && (Arac_SahipKontrol(playerid, aracid) || (OyuncuBirlikTuru(playerid) == BIRLIK_POLIS && oyuncuData[playerid][oIsbasi] == true && (IsPlayerInRangeOfPoint(playerid, 55.0, 277.1996,-1637.2484,17.8593) || IsPlayerInRangeOfPoint(playerid, 85.0, 2290.6926,2457.3486,3.5313)) && AracBilgi[aracid][aracMeslek] < 1 && aracbirlikturbul(aracid) != BIRLIK_POLIS)))
		{
			if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
				return hataMesaji(playerid, "Sürücü koltuðunda deðilsin.");

			if(BisikletKontrol(GetPlayerVehicleID(playerid)) == 0)
			{
				if(GetEngineStatus(GetPlayerVehicleID(playerid)) != 0)
					return hataMesaji(playerid, "Park etmek için aracýnýn motorunu kapatmalýsýn.");
			}
			GetPlayerPos(playerid, AracBilgi[aracid][aracPos][0], AracBilgi[aracid][aracPos][1], AracBilgi[aracid][aracPos][2]);
			AracBilgi[aracid][aracWorld] = GetVehicleVirtualWorld(aracid);
			new Float:araccani, aracsqlid = AracBilgi[aracid][aracID];
			GetVehicleHealth(AracBilgi[aracid][aracYarat], araccani);
			GetVehicleZAngle(AracBilgi[aracid][aracYarat], AracBilgi[aracid][aracPos][3]);
			SunucuMesaji(playerid, "%s model aracý park ettin.", AracModel(AracBilgi[aracid][aracModel]));
			Arac_Kaydet(aracid); ModifiyeKaydet(playerid, aracid);

			ParaEkle(playerid, -300);

			new aracgg = AracBilgi[aracid][aracYarat];

			Iter_Remove(Araclar, aracgg);
			DestroyVehicle(aracgg);
			AracVeriSifirla(aracgg);

			static spawnid;
			spawnid = AracSpawnla(aracsqlid);
			if(spawnid >= 2000) return hataMesaji(playerid, "Sunucu max araç limitine ulaþtýðý için araç spawnlanamadý, daha sonra tekrar deneyin.");
			SetVehicleHealth(spawnid, araccani);
			PutPlayerInVehicle(playerid, spawnid, 0);
		}
		else hataMesaji(playerid, "Bu araç sana ait deðil.");
		return 1;
	}	

	Dialog:ciftlik_isciler(playerid, response, listitem, inputtext[])
	{
		if(!response) return 1;
		if(!IsPlayerInAnyDynamicArea(playerid) || oyuncuData[playerid][oCiftlik] == -1) return hataMesaji(playerid, "Bu komutu yanlýzca tarladayken kullanabilirsiniz.");
		new cid = oyuncuData[playerid][oCiftlik], query[130];

		mysql_format(g_SQL, query, sizeof(query), "DELETE FROM `tarimiscileri` WHERE `ciftlikid` = '%d' AND `oisim` = '%e'", cid, inputtext);
 		mysql_query(g_SQL, query);
		SunucuMesaji(playerid, "%s adlý kiþiyi iþçiler arasýndan çýkardýnýz.",inputtext);
		return 1;
	}	

	Dialog:ciftlik_ayar(playerid, response, listitem, inputtext[])
	{
		if(!response) return 1;
		if(!IsPlayerInAnyDynamicArea(playerid) || oyuncuData[playerid][oCiftlik] == -1) return hataMesaji(playerid, "Bu komutu yanlýzca tarladayken kullanabilirsiniz.");
		new cid = oyuncuData[playerid][oCiftlik];
		switch(listitem)
		{
			case 0: {
				Dialog_Show(playerid, ciftlik_isim, DIALOG_STYLE_INPUT, "Çiftlik Ýsmi Düzenleme", "Lütfen çiftliðinizin yeni adýný girin (Max: 50 Karakter):", "Tamam", "Iptal");
			}
			case 1: {
			new query[90], Cache:VeriCek, rows, subString[250];
			mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `tarimiscileri` WHERE `ciftlikid` = '%d'", cid);
			VeriCek = mysql_query(g_SQL, query);
			rows = cache_num_rows();
			if(rows)
			{
			for (new i = 0; i < rows; i++)
 			{
 			format(subString, sizeof(subString), "%s%s\n", subString, vericek_varchar(i, "oisim"));
 			}
			Dialog_Show(playerid, ciftlik_isciler, DIALOG_STYLE_LIST, "Çiftlik Ýþçileri", subString, "Seç", "Iptal");
			SunucuMesaji(playerid, "Ýþçi atmak için atmak istediðiniz kiþinin isminin üzerine týklayýn.");
			}
			else hataMesaji(playerid, "Çiftliðinizde herhangi bir iþçi bulunmuyor");
			cache_delete(VeriCek);
			}
			case 2: {
				Dialog_Show(playerid, ciftlik_isci, DIALOG_STYLE_INPUT, "Çiftlik Ýþçi Alýmý", "Lütfen çiftliðinize almak istediðiniz kiþinin oyuncu ID'sini girin:", "Tamam", "Iptal");
			}
			case 3: {
			new string[450];
			format(string, sizeof(string), "Iþlevler\t#\nÇiftlik ID:\t{C9C936}%d\nÇiftlik Adý:\t{C9C936}%s\nÇiftlik Ücreti:\t{C9C936}%s\nEkili Ürün:\t{C9C936}%s\nKalan saat:\t{C9C936}%d",cid, CiftlikInfo[cid][cIsim],NumaraFormati(CiftlikInfo[cid][cPara]),ekinlerveri[CiftlikInfo[cid][cUrun]][ekinisim],CiftlikInfo[cid][cOlgunlasma]);	
			ShowPlayerDialog(playerid, BOS_MESAJ, DIALOG_STYLE_TABLIST_HEADERS, "Çiftlik Bilgileri", string, "Tamam", "Iptal");
			}
			case 4: {
			new String[72];
			if(oyuncuData[playerid][oEkonomiPaketi] < 1)
			{
			format(String, sizeof(String), "%d$ karþýlýðýnda çiftliðinizi sisteme satmak istiyor musunuz?", YuzdeHesapla(CiftlikInfo[cid][cPara], SERVER_YUZDE));
			}
			else
			{
			format(String, sizeof(String), "%d$ karþýlýðýnda çiftliðinizi sisteme satmak istiyor musunuz?", YuzdeHesapla(CiftlikInfo[cid][cPara], VIP_YUZDE));
			}
			Dialog_Show(playerid, ciftlik_sat, DIALOG_STYLE_MSGBOX, "Çiftlik Satýmý", String, "Tamam", "Iptal");
			}
			case 5: {
			SunucuMesaji(playerid, "Bu iþlem '/ciftliksat' komutu üzerinden yapýlmaktadýr.");
			}
		}
		return 1;
	}

	Dialog:ciftlik_sat(playerid, response, listitem, inputtext[])
	{
		if(!response) return 1;
		if(!IsPlayerInAnyDynamicArea(playerid) || oyuncuData[playerid][oCiftlik] == -1) return hataMesaji(playerid, "Bu komutu yanlýzca tarladayken kullanabilirsiniz.");
		new cid = oyuncuData[playerid][oCiftlik];
		format(CiftlikInfo[cid][cSahip], 64, "Vice Komisyon");
		CiftlikInfo[cid][cSahipID] = 0;
		if(oyuncuData[playerid][oEkonomiPaketi] < 1)
		{
		ParaEkle(playerid, YuzdeHesapla(CiftlikInfo[cid][cPara], SERVER_YUZDE));
		}
		else
		{
		ParaEkle(playerid, YuzdeHesapla(CiftlikInfo[cid][cPara], VIP_YUZDE));
		}
		Ciftlik_Kaydet(cid);
		SunucuMesaji(playerid, "Çiftliði baþarýyla sisteme sattýnýz.");
		return 1;
	}	

	Dialog:ciftlik_isci(playerid, response, listitem, inputtext[])
	{
		if(!response) return 1;
		if(!IsPlayerInAnyDynamicArea(playerid) || oyuncuData[playerid][oCiftlik] == -1) return hataMesaji(playerid, "Bu komutu yanlýzca tarladayken kullanabilirsiniz.");
		new oid = strval(inputtext), cid = oyuncuData[playerid][oCiftlik], sonuc = 0;
		if(oid == INVALID_PLAYER_ID) return hataMesaji(playerid, "Hatalý oyuncu ID'si girdiniz.");
		if(!IsPlayerConnected(oid)) return hataMesaji(playerid, "ID'sini girdiðiniz kiþi oyunda deðil.");
		if(oid == playerid) return hataMesaji(playerid, "Kendinizi iþçi olarak ekleyemezsiniz.");
		if(YakinlikKontrol(playerid, oid, 2.0))
		{
		new query[110],Cache:VeriCek, rows;
		mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `tarimiscileri` WHERE `oisim` = '%e' AND `ciftlikid` = '%d'", oyuncuData[oid][oIsim], cid);
		VeriCek = mysql_query(g_SQL, query);	
		rows = cache_num_rows();
		if(rows)
		{
			sonuc = 1;
			hataMesaji(playerid, "Bu kiþi zaten iþçileriniz arasýnda.");
		}
		cache_delete(VeriCek);
		if(sonuc == 0)
		{
		mysql_format(g_SQL, query, sizeof(query), "INSERT INTO `tarimiscileri` (`ciftlikid`, `oisim`) VALUES ('%d', '%e')", cid, oyuncuData[oid][oIsim]);
		mysql_query(g_SQL, query);	
		SunucuMesaji(playerid, "%s adlý kiþiyi tarlanýza iþçi olarak aldýnýz.", OyuncuIsim(oid));
		}
		}
		else hataMesaji(playerid, "ID'sini girdiðiniz kiþi sizin tarlanýzda ve size yakýn olmalýdýr.");
		return 1;
	}	

	Dialog:ciftlik_isim(playerid, response, listitem, inputtext[])
	{
		if(!response) return 1;
		if(!IsPlayerInAnyDynamicArea(playerid) || oyuncuData[playerid][oCiftlik] == -1) return hataMesaji(playerid, "Bu komutu yanlýzca tarladayken kullanabilirsiniz.");
		if(strlen(inputtext) < 1 || strlen(inputtext) > 50) return hataMesaji(playerid, "Çiftlik ismi 1 karakterden az ve 50 karakterden fazla olamaz.");
		new cid = oyuncuData[playerid][oCiftlik];
		format(CiftlikInfo[cid][cIsim], 50, inputtext);
		Ciftlik_Kaydet(cid);
		SunucuMesaji(playerid, "Baþarýyla çiftliðinizin ismini '%s' olarak deðiþtirdiniz.", CiftlikInfo[cid][cIsim]);
		return 1;
	}

	Dialog:DIALOG_EKIN_GPS(playerid, response, listitem, inputtext[])
	{
		if(response)
		{
			SetPlayerCheckpoint(playerid, piyasaveri[listitem][piyasax], piyasaveri[listitem][piyasay], piyasaveri[listitem][piyasaz], 3.0);
			SunucuMesaji(playerid, "%s adlý yer GPS üzerinde iþaretlendi.", piyasaveri[listitem][piyasaisim]);
		}
		return 1;
	}

	Dialog:bolge_renk(playerid, response, listitem, inputtext[])
	{
		if(response)
		{
		//if(strfind(inputtext, "0x", true) != -1) return Dialog_Show(playerid, bolge_renk, DIALOG_STYLE_INPUT, "Bölge Renkleri", "Lütfen bölgenin rengi için 'geçerli' bir HEX kodu girin: (Örnek: 0x00810488)", "Tamam", "Iptal");
		//if(strlen(inputtext) != 10) return Dialog_Show(playerid, bolge_renk, DIALOG_STYLE_INPUT, "Bölge Renkleri", "Lütfen bölgenin rengi için 'geçerli' bir HEX kodu girin: (Örnek: 0x00810488)", "Tamam", "Iptal");
		  if( !strlen( inputtext ) || inputtext[ 0 ] != '0' || inputtext[ 1 ] != 'x' || strlen( inputtext ) > 10 )
                    return Dialog_Show(playerid, bolge_renk, DIALOG_STYLE_INPUT, "Bölge Renkleri", "Lütfen bölgenin rengi için 'geçerli' bir HEX kodu girin: (Örnek: 0x00810488)", "Tamam", "Iptal");
		SetPVarInt(playerid, "bolgerenk", HexToInt(inputtext));
		SetPVarInt(playerid, "bolgerenkayarlandi", 1);
		SunucuMesaji(playerid, "Bölgenin rengini baþarýyla belirlediniz lütfen þimdi '/abolge yarat' komutunu kullanýn.");
		}
		return 1;
	}	

	Dialog:bolge_yarat(playerid, response, listitem, inputtext[])
	{
		if(response)
		{
		if(strval(inputtext) < 0 || !IsNumeric(inputtext)) return Dialog_Show(playerid, bolge_yarat, DIALOG_STYLE_INPUT, "Bölge Yaratma", "Lütfen geçerli bir ID girin (0'dan büyük ve numerik deðer):", "Yarat", "Iptal");
		if(strval(inputtext)  < 0 || strval(inputtext) >= MAKSIMUM_BIRLIK) return hataMesaji(playerid, "Geçersiz birlik.");
		new i = GetBolgeID(),Float:minpos[2],Float:maxpos[3],query[300];
		if(i == MAX_BOLGE) return hataMesaji(playerid, "Bölge yaratma limiti doldu, developere baþvurun.");
				
		minpos[0] = GetPVarFloat(playerid, "bolgeminX");
		minpos[1] = GetPVarFloat(playerid, "bolgeminY");
		maxpos[0] = GetPVarFloat(playerid, "bolgemaxX");
		maxpos[1] = GetPVarFloat(playerid, "bolgemaxY");	
		BolgeInfo[i][bID] = i;
		BolgeInfo[i][bBolge] = CreateDynamicRectangle(minpos[0], minpos[1], maxpos[0], maxpos[1], -1, -1, -1);
		BolgeInfo[i][bminX] = minpos[0];
		BolgeInfo[i][bminY] = minpos[1];
		BolgeInfo[i][bmaxX] = maxpos[0];
		BolgeInfo[i][bmaxY] = maxpos[1];
		BolgeInfo[i][bBirlik] = strval(inputtext);
		BolgeInfo[i][bRenk] = GetPVarInt (playerid, "bolgerenk");	
		BolgeInfo[i][bAktif] = 1;
		BolgeInfo[i][bZone] = GangZoneCreate(minpos[0], minpos[1], maxpos[0], maxpos[1]);
		GangZoneShowForAll(BolgeInfo[i][bZone], GetPVarInt (playerid, "bolgerenk"));
		YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s adlý yönetici yeni bir bölge yarattý. (Benzersiz ID: %d, Bölge ID: %d)",oyuncuData[playerid][oAdminNick], BolgeInfo[i][bID], BolgeInfo[i][bBolge]);
        mysql_format(g_SQL, query, sizeof(query), "INSERT INTO `bolgeler` (`id`, `minx`, `miny`, `maxx`, `maxy`, `birlik`, `renk`) VALUES('%d', '%f', '%f', '%f', '%f', '%d', '%d')", BolgeInfo[i][bID], BolgeInfo[i][bminX], BolgeInfo[i][bminY], BolgeInfo[i][bmaxX], BolgeInfo[i][bmaxY], strval(inputtext), BolgeInfo[i][bRenk]);
		mysql_query(g_SQL, query);
		DeletePVar(playerid, "cbolgeayarladi");
		DeletePVar(playerid, "bolgerenk");
		DeletePVar(playerid, "bolgerenkayarlandi");
		DeletePVar(playerid, "cbolgedestayarladi");
		}
		else 
		{
		DeletePVar(playerid, "cbolgeayarladi");
		DeletePVar(playerid, "bolgerenk");
		DeletePVar(playerid, "bolgerenkayarlandi");
		DeletePVar(playerid, "cbolgedestayarladi");
		}
		return 1;
	}


	Dialog:arsa_yarat(playerid, response, listitem, inputtext[])
	{
		if(response)
		{
		if(strval(inputtext) < 1 || !IsNumeric(inputtext)) return Dialog_Show(playerid, arsa_yarat, DIALOG_STYLE_INPUT, "Arsa Yaratma", "Lütfen geçerli bir ücret girin (0'dan büyük ve numerik deðer):", "Yarat", "Iptal");
		new i = GetArsaID(),Float:minpos[2],Float:maxpos[3],query[300];
		if(i == MAX_CIFTLIK) return hataMesaji(playerid, "Çiftlik yaratma limiti doldu, developere baþvurun.");
				
		minpos[0] = GetPVarFloat(playerid, "ciftlikminX");
		minpos[1] = GetPVarFloat(playerid, "ciftlikminY");
		maxpos[0] = GetPVarFloat(playerid, "ciftlikmaxX");
		maxpos[1] = GetPVarFloat(playerid, "ciftlikmaxY");
				
		CiftlikInfo[i][cID] = i;
		CiftlikInfo[i][cArsa] = CreateDynamicRectangle(minpos[0], minpos[1], maxpos[0], maxpos[1], -1, -1, -1);
		CiftlikInfo[i][cminX] = minpos[0];
		CiftlikInfo[i][cminY] = minpos[1];
		CiftlikInfo[i][cmaxX] = maxpos[0];
		CiftlikInfo[i][cmaxY] = maxpos[1];
		CiftlikInfo[i][cAktif] = 1;
		CiftlikInfo[i][cIslem] = false;
		CiftlikInfo[i][cKasa] = 0;
		CiftlikInfo[i][cUrun] = 0;
		CiftlikInfo[i][cOlgunlasma] = 0;
		format(CiftlikInfo[i][cIsim], 50, "Florida Eyalet Çiftlikleri");
		format(CiftlikInfo[i][cSahip], MAX_PLAYER_NAME, "Vice Komisyon");
		CiftlikInfo[i][cSahipID] = 0;
		CiftlikInfo[i][cZone] = GangZoneCreate(minpos[0], minpos[1], maxpos[0], maxpos[1]);
		GangZoneShowForAll(CiftlikInfo[i][cZone], 0x00812EAA);
		YoneticiMesaji(RENK_ACIKKIRMIZI, "[SUNUCU ÝÞLEM]: {FFFFFF}%s adlý yönetici yeni bir arsa yarattý. (Benzersiz ID: %d, Arsa ID: %d)",oyuncuData[playerid][oAdminNick], CiftlikInfo[i][cID], CiftlikInfo[i][cArsa]);
        mysql_format(g_SQL, query, sizeof(query), "INSERT INTO `arsalar` (`id`, `minx`, `miny`, `maxx`, `maxy`, `sahip`, `isim`, `para`, `SahipID`) VALUES('%d', '%f', '%f', '%f', '%f', '%e', '%e', '%d', '%d')", CiftlikInfo[i][cID], CiftlikInfo[i][cminX], CiftlikInfo[i][cminY], CiftlikInfo[i][cmaxX], CiftlikInfo[i][cmaxY], CiftlikInfo[i][cSahip], CiftlikInfo[i][cIsim], CiftlikInfo[i][cPara], CiftlikInfo[i][cSahipID]);
		mysql_query(g_SQL, query);
		ArsaIkiNoktaArasiUzaklik(CiftlikInfo[i][cDonum], CiftlikInfo[i][cminX], CiftlikInfo[i][cminY], CiftlikInfo[i][cmaxX], CiftlikInfo[i][cmaxY]);
		CiftlikInfo[i][cPara] = strval(inputtext) * floatround(floatdiv(CiftlikInfo[i][cDonum], 5.0), floatround_ceil);
		DeletePVar(playerid, "ctelportayarladi");
		DeletePVar(playerid, "cteleportdestayarladi");
		}
		else 
		{
		DeletePVar(playerid, "ctelportayarladi");
		DeletePVar(playerid, "cteleportdestayarladi");
		}
		return 1;
	}

// mobilya sistemi

	Dialog:dekor_menu(playerid, response, listitem, inputtext[])
	{
		new ev, isletme;
		if(response && (ev = Oyuncu_Evde(playerid)) != -1 && Ev_SahipKontrol(playerid, ev) || (isletme = Oyuncu_Isyerinde(playerid)) != -1 && Isyeri_SahipKontrol(playerid, isletme) || EvBilgi[ev][evAnahtar] == oyuncuData[playerid][oID] || EvBilgi[ev][evKiraci] == oyuncuData[playerid][oID] || IsyeriBilgi[isletme][isyeriOrtak] == oyuncuData[playerid][oID])
		{
			if(!strcmp(inputtext, "Eþyalarý Listele", true))
			{
				oyuncuData[playerid][dialogSayfa] = 0;
				new query[150], player_vw = GetPlayerVirtualWorld(playerid);

				if(ev != -1)
				{
					mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM furniture_data WHERE furniture_vw  = '%d' AND furniture_houseid = '%d' LIMIT 0, 10", player_vw, EvBilgi[ev][evID]);
					mysql_tquery(g_SQL, query, "MobilyaListele", "d", playerid);
				}

				else if(isletme != -1)
				{
					mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM furniture_data WHERE furniture_vw  = '%d' AND furniture_bizid = '%d' LIMIT 0, 10", player_vw, IsyeriBilgi[isletme][isyeriID]);
					mysql_tquery(g_SQL, query, "MobilyaListele", "d", playerid);
				}
			}

			else if(!strcmp(inputtext, "Yeni eþya al"))
			{
				new DB_Query[300];
				new mobilyasayi;
				new bool:flag;
				if(ev != -1)
				{
					mysql_format(g_SQL, DB_Query, sizeof(DB_Query), "SELECT * FROM `furniture_data` WHERE `furniture_houseid` = %d", EvBilgi[ev][evID]);
					new Cache:veri = mysql_query(g_SQL, DB_Query, true);
					new rows = cache_num_rows();
					if(rows < mobilyaLimit(playerid))
					{
						flag = true;
					}
					else
					{
						mobilyasayi = rows;
						flag = false;
					}
					cache_delete(veri);
				}
				else if(isletme != -1)
				{
					mysql_format(g_SQL, DB_Query, sizeof(DB_Query), "SELECT * FROM `furniture_data` WHERE `furniture_bizid` = %d", IsyeriBilgi[isletme][isyeriID]);
					new Cache:veri = mysql_query(g_SQL, DB_Query, true);
					new rows = cache_num_rows();
					if(rows < mobilyaLimit(playerid))
					{
						flag = true;
					}
					else
					{
						mobilyasayi = rows;
						flag = false;
					}
					cache_delete(veri);
				}

				if(flag)
				{
					DekorMenuGoster(playerid);
				}
				else
				{
					SunucuMesaji(playerid, "Bu bölge daha fazla eþya alamaz. (%d/%d)", mobilyasayi, mobilyaLimit(playerid));
				}
			}
		}
		return 1;
	}

	stock DekorMenuGoster(playerid){
		new string[256];
		strcat(string, "Duvarlar\n");
		strcat(string, "Mobilyalar\n");
		strcat(string, "Ev Eþyalarý\n");
		strcat(string, "Dekoratif\n");
		strcat(string, "Dekoratif 2\n");
		strcat(string, "Bar Nesneleri\n");
		strcat(string, "Kapý ve Pencere\n");
		strcat(string, "Kýyafetler\n");
		strcat(string, "Dükkan Eþyalarý\n");
		strcat(string, "Casino Nesneleri\n");
		strcat(string, "Masa ve Sandalyeler\n");
		strcat(string, "Varil ve Koliler\n");
		strcat(string, "Araç Parçalarý\n");
		strcat(string, "Özel Nesneler\n");
		strcat(string, "Yiyecek ve Ýçecekler\n");
		strcat(string, "Aydýnlatmalar\n");
		if(oyuncuData[playerid][oVIP] > 0)
		{
		strcat(string, "VIP\n");
		}
		Dialog_Show(playerid, DIALOG_FURNITURE, DIALOG_STYLE_LIST, "Nitro Roleplay - Dekorasyon Sistemi", string, "Seç", "Çýk");
		return 1;
	}

	Dialog:DIALOG_SATINAL_ONAY(playerid, response, listitem, inputtext[])
	{
		new ev, isletme, modelid = GetPVarInt(playerid, "PVar_MobilyaModel"), fiyat = GetPVarInt(playerid, "PVar_MobilyaFiyat");
		if(response && (ev = Oyuncu_Evde(playerid)) != -1 && Ev_SahipKontrol(playerid, ev) || (isletme = Oyuncu_Isyerinde(playerid)) != -1 && Isyeri_SahipKontrol(playerid, isletme) || EvBilgi[ev][evAnahtar] == oyuncuData[playerid][oID] || EvBilgi[ev][evKiraci] == oyuncuData[playerid][oID] || IsyeriBilgi[isletme][isyeriOrtak] == oyuncuData[playerid][oID])
		{
			if(ev != -1)
			{
				EvEsyaYarat(playerid, modelid, fiyat);
			}
			else if(isletme != -1)
			{
				IsyeriEsyaYarat(playerid, modelid, fiyat);
			}
			DeletePVar(playerid, "PVar_MobilyaModel");
			DeletePVar(playerid, "PVar_MobilyaFiyat");
		}
		return 1;
	}

	forward MobilyaListele(playerid);
	public MobilyaListele(playerid)
	{
		new rows;

		cache_get_row_count(rows);

		if(!rows)
			return hataMesaji(playerid, "Listelenebilecek dekorasyon bulunamadý.");

		new str[2048], objeid, modelid;
		new mobilyaisim[40], sayi;

		str = "Obje ID\tModel\tMobilya Adý\n";
		for (new i = 0; i < rows; i ++) {
			cache_get_value_name_int(i, "furniture_objectid", objeid);
			cache_get_value_name_int(i, "furniture_modelid", modelid);

			for (new z = 0; z < sizeof(mobilyaveri); z++)
			{
				if (mobilyaveri[z][mobilyaModel] == modelid) {
					format (mobilyaisim, sizeof(mobilyaisim), "%s", mobilyaveri[z][mobilyaIsim]);
				}
			}

			format(str, sizeof(str), "%s%d\t%d\t%s\n", str, objeid, modelid, mobilyaisim);
			if(i == 9)
			{
				format(str, sizeof(str), "%sSonraki Sayfa\n", str);
			}
			sayi++;
		}
 	//ndialog_pages_ShowPlayerDialog(playerid, DIALOG_MOBILYA_LISTELE, DIALOG_STYLE_TABLIST_HEADERS, "> Dekor, liste", str, "Seç", "Geri", 10, ">>", "<<");
		Dialog_Show(playerid, dekor_liste, DIALOG_STYLE_TABLIST_HEADERS, "> Dekor, liste", str, "Seç", "Geri");
		return 1;
	}

	Dialog:dekor_liste(playerid, response, listitem, inputtext[])
	{
		if(!response)
			return 	Dialog_Show(playerid, dekor_menu, DIALOG_STYLE_LIST, "> Dekor", "Eþyalarý listele\nYeni eþya al\n", "Seç", "Kapat");



		new ev = -1, isletme = -1;
		if(response && (ev = Oyuncu_Evde(playerid)) != -1 && Ev_SahipKontrol(playerid, ev) || (isletme = Oyuncu_Isyerinde(playerid)) != -1 && Isyeri_SahipKontrol(playerid, isletme) || EvBilgi[ev][evAnahtar] == oyuncuData[playerid][oID] || EvBilgi[ev][evKiraci] == oyuncuData[playerid][oID] || IsyeriBilgi[isletme][isyeriOrtak] == oyuncuData[playerid][oID])
		{
			new dekorid = strval(inputtext);

			if(!strcmp(inputtext, "Sonraki Sayfa", true))
			{
				oyuncuData[playerid][dialogSayfa] += 10;
				new query[150], player_vw = GetPlayerVirtualWorld(playerid);
				new page = oyuncuData[playerid][dialogSayfa];

				if(ev != -1)
				{
					mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM furniture_data WHERE furniture_vw  = '%d' AND furniture_houseid = '%d' LIMIT %d, 10", player_vw, EvBilgi[ev][evID], page);
					mysql_tquery(g_SQL, query, "MobilyaListele", "d", playerid);
				}

				else if(isletme != -1)
				{
					mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM furniture_data WHERE furniture_vw  = '%d' AND furniture_bizid = '%d' LIMIT %d, 10", player_vw, IsyeriBilgi[isletme][isyeriID], page);
					mysql_tquery(g_SQL, query, "MobilyaListele", "d", playerid);
				}
			}
			else
			{
				oyuncuData[playerid][duzenlenenMobilya] = dekorid;
				SetPVarInt(playerid, "islem_dekor", dekorid), SetPVarInt(playerid, "isletme", isletme), SetPVarInt(playerid, "ev", ev);
				Dialog_Show(playerid, dekor_islem, DIALOG_STYLE_LIST, "> Dekor, liste, iþlem", "> Hareket ettir\n> Pozisyon\n> Texture\n> Kopyala\n> Kaldýr", "Seç", "Geri");
			}
		}
		return 1;
	}

	Dialog:dekor_islem(playerid, response, listitem, inputtext[])
	{
		if(!response)
			return 	Dialog_Show(playerid, dekor_menu, DIALOG_STYLE_TABLIST_HEADERS, "> Dekor", "Eþyalarý listele\nYeni eþya al", "Seç", "Kapat");

		new ev = -1, isletme = -1;
		if(response && (ev = Oyuncu_Evde(playerid)) != -1 && Ev_SahipKontrol(playerid, ev) || (isletme = Oyuncu_Isyerinde(playerid)) != -1 && Isyeri_SahipKontrol(playerid, isletme) || EvBilgi[ev][evAnahtar] == oyuncuData[playerid][oID] || EvBilgi[ev][evKiraci] == oyuncuData[playerid][oID] || IsyeriBilgi[isletme][isyeriOrtak] == oyuncuData[playerid][oID])
		{
			new dekorid = GetPVarInt(playerid, "islem_dekor");

			new query[95];
			mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `furniture_data` WHERE furniture_objectid = '%d'", dekorid);
			mysql_tquery(g_SQL, query, "DekorIslemYap", "ds", playerid, inputtext);
		}
		return 1;
	}

	forward DekorIslemYap(playerid, inputtext[]);
	public DekorIslemYap(playerid, inputtext[])
	{
		new rows;
		cache_get_row_count(rows);
		new dekorid = GetPVarInt(playerid, "islem_dekor");

		new id, vw, int, modelid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, fiyat;
		for(new i = 0; i < rows; i++)
		{
			cache_get_value_name_int(i, "furniture_id", id);
			cache_get_value_name_float(i, "furniture_posx", x);
			cache_get_value_name_float(i, "furniture_posy", y);
			cache_get_value_name_float(i, "furniture_posz", z);
			cache_get_value_name_float(i, "furniture_posrx", rx);
			cache_get_value_name_float(i, "furniture_posry", ry);
			cache_get_value_name_float(i, "furniture_posrz", rz);
			cache_get_value_name_int(i, "furniture_vw", vw);
			cache_get_value_name_int(i, "furniture_interior", int);
			cache_get_value_name_int(i, "furniture_modelid", modelid);
			cache_get_value_name_int(i, "furniture_price", fiyat);
		}

		oyuncuData[playerid][goruntulenenMobilyaSQL] = id;
		oyuncuData[playerid][mobilyaDuzenleniyor] = dekorid;

		if(!strcmp(inputtext, "> Hareket ettir", true))
			return EditDynamicObject(playerid, dekorid);

		else if(!strcmp(inputtext, "> Pozisyon", true))
		{
			new str[1024];
			format(str, sizeof(str), "#\tAçýklama\n> Pozisyon X\t[%f]\n> Pozisyon Y\t[%f]\n> Pozisyon Z\t[%f]\n> Rot X\t[%f]\n> Rot Y\t[%f]\n> Rot Z\t[%f]", x, y, z, rx, ry, rz);
			Dialog_Show(playerid, dekor_pozisyon, DIALOG_STYLE_TABLIST_HEADERS, "> Dekor, liste, iþlem, pozisyon", str, "Seç", "Geri");
		}

		else if(!strcmp(inputtext, "> Texture", true))
		{
			Dialog_Show(playerid, TextureIndex, DIALOG_STYLE_LIST, "> Dekor, liste, iþlem, texture", "Ýndex 1\nÝndex 2\nÝndex 3\nÝndex 4\nÝndex 5\nÝndex 6\nÝndex 7\nÝndex 8\nÝndex 9\nÝndex 10\nÝndex 11\nÝndex 12", "Tamam", "Ýptal");
			SetPVarInt(playerid, "TexturelancakObjeID", dekorid);
		}

		else if(!strcmp(inputtext, "> Kopyala", true))
		{

			new ev, isletme, DB_Query[250], mobilyasayi, bool:flag;
			SetPVarInt(playerid, "TexturelancakObjeID", dekorid);
			if((ev = Oyuncu_Evde(playerid)) != -1 && Ev_SahipKontrol(playerid, ev) || (isletme = Oyuncu_Isyerinde(playerid)) != -1 && Isyeri_SahipKontrol(playerid, isletme) || EvBilgi[ev][evAnahtar] == oyuncuData[playerid][oID] || EvBilgi[ev][evKiraci] == oyuncuData[playerid][oID] || IsyeriBilgi[isletme][isyeriOrtak] == oyuncuData[playerid][oID])
			if(ev != -1)
			{
				mysql_format(g_SQL, DB_Query, sizeof(DB_Query), "SELECT * FROM `furniture_data` WHERE `furniture_houseid` = %d", EvBilgi[ev][evID]);
				new Cache:veri = mysql_query(g_SQL, DB_Query, true);
				new mrows = cache_num_rows();
				if(mrows < mobilyaLimit(playerid))
				{
					flag = true;
				}
				else
				{
					mobilyasayi = mrows;
					flag = false;
				}
				cache_delete(veri);
				if(flag)
				{
				EvEsyaKopyala(playerid, modelid, fiyat, x, y, z, rx, ry, rz, int, vw);
				}
				else
				{
				SunucuMesaji(playerid, "Bu bölge daha fazla eþya alamaz. (%d/%d)", mobilyasayi, mobilyaLimit(playerid));
				}
			}
			else if(isletme != -1)
			{
				mysql_format(g_SQL, DB_Query, sizeof(DB_Query), "SELECT * FROM `furniture_data` WHERE `furniture_bizid` = %d", IsyeriBilgi[isletme][isyeriID]);
				new Cache:veri = mysql_query(g_SQL, DB_Query, true);
				new mrows = cache_num_rows();
				if(mrows < mobilyaLimit(playerid))
				{
					flag = true;
				}
				else
				{
					mobilyasayi = mrows;
					flag = false;
				}
				cache_delete(veri);
				if(flag)
				{
				IsyeriEsyaKopyala(playerid, modelid, fiyat, x, y, z, rx, ry, rz, int, vw);
				}
				else
				{
				SunucuMesaji(playerid, "Bu bölge daha fazla eþya alamaz. (%d/%d)", mobilyasayi, mobilyaLimit(playerid));
				}
			}
			SunucuMesaji(playerid, "Bir mobilyayý kopyaladýn.");
		}
		else if(!strcmp(inputtext, "> Kaldýr", true))
		{
			DestroyDynamicObject(dekorid);
			new string[80];
			format(string, sizeof(string), "DELETE FROM `furniture_data` WHERE `furniture_id` = '%d'", id);
			mysql_tquery(g_SQL, string);
		}
		return 1;
	}

	Dialog:DIALOG_FURNITURE(playerid, response, listitem, inputtext[])
	{
		new ev, isletme;
		if(response && ( ( ( (ev = Oyuncu_Evde(playerid) ) != -1 && Ev_SahipKontrol(playerid, ev) ) || ( (isletme = Oyuncu_Isyerinde(playerid) ) != -1 && Isyeri_SahipKontrol(playerid, isletme) ) ) || ( (ev = Oyuncu_Evde(playerid) ) != -1 && (EvBilgi[ev][evAnahtar] == oyuncuData[playerid][oID] || EvBilgi[ev][evKiraci] == oyuncuData[playerid][oID])  ) || (isletme = Oyuncu_Isyerinde(playerid) ) != -1 && IsyeriBilgi[isletme][isyeriOrtak] == oyuncuData[playerid][oID] ) )
		{
			new subString[5396], item_name[36], baslik[30], itemobjesi;
			format(baslik, sizeof(baslik), "Mobilya Sistemi");

			SetPVarInt(playerid, "PVar_MobilyaKategori", listitem);
			for (new i = 0; i < sizeof(mobilyaveri); i++)
			{
				if (mobilyaveri[i][mobilyaTur] == listitem) {
					format (item_name, sizeof(item_name), "%s", mobilyaveri[i][mobilyaIsim]);
				    for (new a, l = strlen(item_name); a != l; a++)
					{
						switch(item_name[a])
						{
							case 'ý': item_name[a] = 'i';
							case 'ð': item_name[a] = 'g';
							case 'ü': item_name[a] = 'u';
							case 'þ': item_name[a] = 's';
							case 'ö': item_name[a] = 'o';
							case 'ç': item_name[a] = 'c';
							case 'Ð': item_name[a] = 'G';
							case 'Ü': item_name[a] = 'U';
							case 'Þ': item_name[a] = 'S';
							case 'Ý': item_name[a] = 'I';
							case 'Ö': item_name[a] = 'O';
							case 'Ç': item_name[a] = 'C';
						}
					}
					itemobjesi = mobilyaveri[i][mobilyaModel];
					format(subString, sizeof(subString), "%s%d\n%s\n", subString, itemobjesi, item_name);
				}
			}
			ShowPlayerDialog(playerid, DIALOG_MOBILYA_SATINAL, DIALOG_STYLE_PREVMODEL, baslik, subString, "Sec", "Iptal");
		}
		return 1;
	}

	EvEsyaYarat(playerid, modelid, fiyat)
	{
		new ev;
		if((ev = Oyuncu_Evde(playerid)) != -1 && Ev_SahipKontrol(playerid, ev) || EvBilgi[ev][evAnahtar] == oyuncuData[playerid][oID] || EvBilgi[ev][evKiraci] == oyuncuData[playerid][oID])
		{
			if(oyuncuData[playerid][oPara] < fiyat) return hataMesaji(playerid, "Yeterli miktarda paranýz yok.");
			new objectid, Float:x, Float:y, Float:z, Float:rx = 0.0, Float:ry = 0.0, Float:rz = 0.0, int, vw;
			GetPlayerPos(playerid, x, y, z);
			int = GetPlayerInterior(playerid);
			vw = GetPlayerVirtualWorld(playerid);

			objectid = CreateDynamicObject(modelid, x+2, y, z, rx, ry, rz, vw, int);

			new query[600];
			mysql_format(g_SQL, query, sizeof(query), "INSERT INTO `furniture_data` (`furniture_objectid`, `furniture_modelid`, `furniture_posx`, `furniture_posy`, `furniture_posz`, `furniture_posrx`, `furniture_posry`, `furniture_posrz`, `furniture_vw`, `furniture_interior`, `furniture_houseid`, `furniture_price`) VALUES ('%d', '%d', '%.4f', '%.4f', '%.4f', '%.4f', '%.4f', '%.4f', '%d', '%d', '%d', '%d')", objectid, modelid, x+2, y, z, rx, ry, rz, vw, int, EvBilgi[ev][evID], fiyat);
			mysql_tquery(g_SQL, query);
			ParaEkle(playerid, -fiyat);
			EditDynamicObject(playerid, objectid);
			oyuncuData[playerid][mobilyaDuzenleniyor] = 1;
		}
		return 1;
	}

	EvEsyaKopyala(playerid, modelid, fiyat, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, int, vw)
	{
		new ev;
		if((ev = Oyuncu_Evde(playerid)) != -1 && Ev_SahipKontrol(playerid, ev) || EvBilgi[ev][evAnahtar] == oyuncuData[playerid][oID] || EvBilgi[ev][evKiraci] == oyuncuData[playerid][oID])
		{
			if(oyuncuData[playerid][oPara] < fiyat) return hataMesaji(playerid, "Yeterli miktarda paranýz yok.");
			new objectid;
			objectid = CreateDynamicObject(modelid, x, y, z, rx, ry, rz, vw, int);
			new query[600], Cache:getcache;
			mysql_format(g_SQL, query, sizeof(query), "INSERT INTO `furniture_data` (`furniture_objectid`, `furniture_modelid`, `furniture_posx`, `furniture_posy`, `furniture_posz`, `furniture_posrx`, `furniture_posry`, `furniture_posrz`, `furniture_vw`, `furniture_interior`, `furniture_houseid`, `furniture_price`) VALUES ('%d', '%d', '%.4f', '%.4f', '%.4f', '%.4f', '%.4f', '%.4f', '%d', '%d', '%d', '%d')", objectid, modelid, x, y, z, rx, ry, rz, vw, int, EvBilgi[ev][evID], fiyat);
			getcache = mysql_query(g_SQL, query);
			new osqlid = cache_insert_id();
			cache_delete(getcache);
			new DB_Query[300], textureindex, texturemodel, txdisim[100], textureisim[100];
			mysql_format(g_SQL, DB_Query, sizeof(DB_Query), "SELECT * FROM `textureler` WHERE `ObjeSQL` = %d", oyuncuData[playerid][goruntulenenMobilyaSQL]);
			new Cache:veri = mysql_query(g_SQL, DB_Query, true);
			new rows = cache_num_rows();
			if(rows)
			{
				cache_get_value_name_int(0, "TextureIndex", textureindex);
				cache_get_value_name_int(0, "TextureModel", texturemodel);
				cache_get_value_name(0, "TxdIsim", txdisim);
				cache_get_value_name(0, "TextureIsim", textureisim);
			}
			mysql_query(g_SQL, DB_Query, false);
			SetDynamicObjectMaterial(objectid, textureindex, texturemodel, txdisim, textureisim, 0);
			mysql_format(g_SQL, DB_Query, sizeof(DB_Query), "INSERT INTO `textureler` (`TextureModel`, `TextureIndex`, `TxdIsim`, `TextureIsim`, `ObjeSQL`) VALUES (%d, %d, '%e', '%e', %d)", texturemodel, textureindex, txdisim, textureisim, osqlid);
			mysql_query(g_SQL, DB_Query);
			DeletePVar(playerid, "TexturelancakObjeID");
			DeletePVar(playerid, "TexturelancakObjeIndex");
			cache_delete(veri);
			ParaEkle(playerid, -fiyat);
			EditDynamicObject(playerid, objectid);
			oyuncuData[playerid][mobilyaDuzenleniyor] = 1;
		}
		return 1;
	}

	IsyeriEsyaYarat(playerid, modelid, fiyat)
	{
		new isletme;
		if((isletme = Oyuncu_Isyerinde(playerid)) != -1 && Isyeri_SahipKontrol(playerid, isletme) || IsyeriBilgi[isletme][isyeriOrtak] == oyuncuData[playerid][oID])
		{
			if(oyuncuData[playerid][oPara] < fiyat) return hataMesaji(playerid, "Yeterli miktarda paranýz yok.");
			new objectid, Float:x, Float:y, Float:z, Float:rx = 0.0, Float:ry = 0.0, Float:rz = 0.0, int, vw;
			GetPlayerPos(playerid, x, y, z);
			int = GetPlayerInterior(playerid);
			vw = GetPlayerVirtualWorld(playerid);

			objectid = CreateDynamicObject(modelid, x+2, y, z, rx, ry, rz, vw, int);

			new query[600];
			mysql_format(g_SQL, query, sizeof(query), "INSERT INTO `furniture_data` (`furniture_objectid`, `furniture_modelid`, `furniture_posx`, `furniture_posy`, `furniture_posz`, `furniture_posrx`, `furniture_posry`, `furniture_posrz`, `furniture_vw`, `furniture_interior`, `furniture_bizid`, `furniture_price`) VALUES ('%d', '%d', '%.4f', '%.4f', '%.4f', '%.4f', '%.4f', '%.4f', '%d', '%d', '%d', '%d')", objectid, modelid, x+2, y, z, rx, ry, rz, vw, int, IsyeriBilgi[isletme][isyeriID], fiyat);
			mysql_tquery(g_SQL, query);
			ParaEkle(playerid, -fiyat);
			EditDynamicObject(playerid, objectid);
			oyuncuData[playerid][mobilyaDuzenleniyor] = 1;
		}
		return 1;
	}

	IsyeriEsyaKopyala(playerid, modelid, fiyat, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, int, vw)
	{
		new isletme;
		if((isletme = Oyuncu_Isyerinde(playerid)) != -1 && Isyeri_SahipKontrol(playerid, isletme) || IsyeriBilgi[isletme][isyeriOrtak] == oyuncuData[playerid][oID])
		{
			if(oyuncuData[playerid][oPara] < fiyat) return hataMesaji(playerid, "Yeterli miktarda paranýz yok.");
			new objectid;
			objectid = CreateDynamicObject(modelid, x, y, z, rx, ry, rz, vw, int);
			new query[600], Cache:getcache;
			mysql_format(g_SQL, query, sizeof(query), "INSERT INTO `furniture_data` (`furniture_objectid`, `furniture_modelid`, `furniture_posx`, `furniture_posy`, `furniture_posz`, `furniture_posrx`, `furniture_posry`, `furniture_posrz`, `furniture_vw`, `furniture_interior`, `furniture_bizid`, `furniture_price`) VALUES ('%d', '%d', '%.4f', '%.4f', '%.4f', '%.4f', '%.4f', '%.4f', '%d', '%d', '%d', '%d')", objectid, modelid, x, y, z, rx, ry, rz, vw, int, IsyeriBilgi[isletme][isyeriID], fiyat);
			getcache = mysql_query(g_SQL, query);
			new osqlid = cache_insert_id();
			cache_delete(getcache);
			new DB_Query[300], textureindex, texturemodel, txdisim[100], textureisim[100];
			mysql_format(g_SQL, DB_Query, sizeof(DB_Query), "SELECT * FROM `textureler` WHERE `ObjeSQL` = %d", oyuncuData[playerid][goruntulenenMobilyaSQL]);
			new Cache:veri = mysql_query(g_SQL, DB_Query, true);
			new rows = cache_num_rows();
			if(rows)
			{
				cache_get_value_name_int(0, "TextureIndex", textureindex);
				cache_get_value_name_int(0, "TextureModel", texturemodel);
				cache_get_value_name(0, "TxdIsim", txdisim);
				cache_get_value_name(0, "TextureIsim", textureisim);
			}
			mysql_query(g_SQL, DB_Query, false);
			SetDynamicObjectMaterial(objectid, textureindex, texturemodel, txdisim, textureisim, 0);
			mysql_format(g_SQL, DB_Query, sizeof(DB_Query), "INSERT INTO `textureler` (`TextureModel`, `TextureIndex`, `TxdIsim`, `TextureIsim`, `ObjeSQL`) VALUES (%d, %d, '%e', '%e', %d)", texturemodel, textureindex, txdisim, textureisim, osqlid);
			mysql_query(g_SQL, DB_Query);
			DeletePVar(playerid, "TexturelancakObjeID");
			DeletePVar(playerid, "TexturelancakObjeIndex");
			cache_delete(veri);
			ParaEkle(playerid, -fiyat);
			EditDynamicObject(playerid, objectid);
			oyuncuData[playerid][mobilyaDuzenleniyor] = 1;
		}
		return 1;
	}

	forward Dekorasyon_Yukle();
	public Dekorasyon_Yukle()
	{
		new rows;
		cache_get_row_count(rows);

		new id, objectid, vw, int, modelid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, query[140];
		for(new i = 0; i < rows; i++)
		{
			cache_get_value_name_int(i, "furniture_id", id);
			cache_get_value_name_float(i, "furniture_posx", x);
			cache_get_value_name_float(i, "furniture_posy", y);
			cache_get_value_name_float(i, "furniture_posz", z);
			cache_get_value_name_float(i, "furniture_posrx", rx);
			cache_get_value_name_float(i, "furniture_posry", ry);
			cache_get_value_name_float(i, "furniture_posrz", rz);
			cache_get_value_name_int(i, "furniture_vw", vw);
			cache_get_value_name_int(i, "furniture_interior", int);
			cache_get_value_name_int(i, "furniture_modelid", modelid);

			objectid = CreateDynamicObject(modelid, x, y, z, rx, ry, rz, vw, int);
			mysql_format(g_SQL, query, sizeof(query), "UPDATE furniture_data SET furniture_objectid = '%d' WHERE furniture_id = '%d'", objectid, id);
			mysql_tquery(g_SQL, query);

			mysql_format(g_SQL, query, sizeof(query), "select * from textureler where ObjeSQL = '%d'", id);
			mysql_tquery(g_SQL, query, "Texture_Yukle", "d", objectid);
		}

		printf("Toplam %d adet dekorasyon yüklendi.", rows);
		return 1;
	}

	forward Silah_Yukle();
	public Silah_Yukle()
	{
		new rows;
		cache_get_row_count(rows);

		new id, objectid, Float:x, Float:y, Float:z, query[120], weapon_gameid, vw, int;
		for(new i = 0; i < rows; i++)
		{
			cache_get_value_name_int(i, "weapon_id", id);
			cache_get_value_name_float(i, "weapon_x", x);
			cache_get_value_name_float(i, "weapon_y", y);
			cache_get_value_name_float(i, "weapon_z", z);
			cache_get_value_name_int(i, "weapon_gameid", weapon_gameid);
			cache_get_value_name_int(i, "weapon_int", int);
			cache_get_value_name_int(i, "weapon_vw", vw);

			objectid = CreateDynamicObject(SilahObjeModelleri(weapon_gameid), x, y, z - 1, 93.7, 120.0, 120.0, vw, int);
			mysql_format(g_SQL, query, sizeof(query), "UPDATE player_weapons SET weapon_objectid = '%d' WHERE weapon_id = '%d'", objectid, id);
			mysql_tquery(g_SQL, query);
		}

		printf("Toplam %d adet silah yüklendi.", rows);
		return 1;
	}

		forward Ekin_Yukle();
	public Ekin_Yukle()
	{
		new rows;
		cache_get_row_count(rows);

		new id, objectid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, query[120];
		for(new i = 0; i < rows; i++)
		{
			cache_get_value_name_int(i, "objeid", id);
			cache_get_value_name_float(i, "x", x);
			cache_get_value_name_float(i, "y", y);
			cache_get_value_name_float(i, "z", z);
			cache_get_value_name_float(i, "rx", rx);
			cache_get_value_name_float(i, "ry", ry);
			cache_get_value_name_float(i, "rz", rz);

			objectid = CreateDynamicObject(3409, x, y, z, rx, ry, rz, 0,0);
			mysql_format(g_SQL, query, sizeof(query), "UPDATE ekinler SET objeid = '%d' WHERE objeid = '%d'", objectid, id);
			mysql_tquery(g_SQL, query);
		}

		printf("Toplam %d adet ekin yüklendi.", rows);
		return 1;
	}

	forward Tarimurun_Yukle();
	public Tarimurun_Yukle()
	{
		new rows;
		cache_get_row_count(rows);

		new id, objectid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, query[120];
		for(new i = 0; i < rows; i++)
		{
			cache_get_value_name_int(i, "objeid", id);
			cache_get_value_name_float(i, "x", x);
			cache_get_value_name_float(i, "y", y);
			cache_get_value_name_float(i, "z", z);
			cache_get_value_name_float(i, "rx", rx);
			cache_get_value_name_float(i, "ry", ry);
			cache_get_value_name_float(i, "rz", rz);

			objectid = CreateDynamicObject(-3004, x, y, z, rx, ry, rz, 0,0);
			mysql_format(g_SQL, query, sizeof(query), "UPDATE tarimurunleri SET objeid = '%d' WHERE objeid = '%d'", objectid, id);
			mysql_tquery(g_SQL, query);
		}

		printf("Toplam %d adet tarim urunu yüklendi.", rows);
		return 1;
	}
	
	forward Arsa_Yukle();
	public Arsa_Yukle()
	{
		new rows;
		cache_get_row_count(rows);

		new id,query[100];
		for(new i = 0; i < rows; i++)
		{
			new idx = GetArsaID();
			cache_get_value_name_int(i, "id", id);
			cache_get_value_name_float(i, "minx", CiftlikInfo[idx][cminX]);
			cache_get_value_name_float(i, "miny", CiftlikInfo[idx][cminY]);
			cache_get_value_name_float(i, "maxx", CiftlikInfo[idx][cmaxX]);
			cache_get_value_name_float(i, "maxy", CiftlikInfo[idx][cmaxY]);
			cache_get_value_name_int(i, "para", CiftlikInfo[idx][cPara]);
			cache_get_value_name_int(i, "kasa", CiftlikInfo[idx][cKasa]);
			cache_get_value_name_int(i, "urun", CiftlikInfo[idx][cUrun]);
			cache_get_value_name_int(i, "olgunlasma", CiftlikInfo[idx][cOlgunlasma]);
			format(CiftlikInfo[idx][cSahip], MAX_PLAYER_NAME, "%s", vericek_varchar(i, "sahip"));
			cache_get_value_name_int(i, "SahipID", CiftlikInfo[idx][cSahipID]);
			format(CiftlikInfo[idx][cIsim], 50, "%s", vericek_varchar(i, "isim"));
			CiftlikInfo[idx][cAktif] = 1;
			CiftlikInfo[idx][cIslem] = false;
			CiftlikInfo[idx][cID] = idx;
			
			CiftlikInfo[idx][cArsa] = CreateDynamicRectangle(CiftlikInfo[idx][cminX], CiftlikInfo[idx][cminY], CiftlikInfo[idx][cmaxX], CiftlikInfo[idx][cmaxY], -1, -1, -1);
			CiftlikInfo[idx][cZone] = GangZoneCreate(CiftlikInfo[idx][cminX], CiftlikInfo[idx][cminY], CiftlikInfo[idx][cmaxX], CiftlikInfo[idx][cmaxY]);
			
			if(!strcmp(CiftlikInfo[i][cSahip], "Vice Komisyon", true))
			{
			GangZoneShowForAll(CiftlikInfo[idx][cZone], 0x00812EAA);
			}
			else
			{
			GangZoneShowForAll(CiftlikInfo[idx][cZone], 0x812600AA);
			}
			
			mysql_format(g_SQL, query, sizeof(query), "UPDATE arsalar SET id = '%d' WHERE id = '%d'", idx, id);
			mysql_tquery(g_SQL, query);
			ArsaIkiNoktaArasiUzaklik(CiftlikInfo[idx][cDonum], CiftlikInfo[idx][cminX], CiftlikInfo[idx][cminY], CiftlikInfo[idx][cmaxX], CiftlikInfo[idx][cmaxY]);
		}

		printf("Toplam %d adet arsa yüklendi.", rows);
		return 1;
	}

	forward Bolge_Yukle();
	public Bolge_Yukle()
	{
		new rows;
		cache_get_row_count(rows);

		new id,query[100];
		for(new i = 0; i < rows; i++)
		{
			new idx = GetBolgeID();
			cache_get_value_name_int(i, "id", id);
			cache_get_value_name_float(i, "minx", BolgeInfo[idx][bminX]);
			cache_get_value_name_float(i, "miny", BolgeInfo[idx][bminY]);
			cache_get_value_name_float(i, "maxx", BolgeInfo[idx][bmaxX]);
			cache_get_value_name_float(i, "maxy", BolgeInfo[idx][bmaxY]);
			cache_get_value_name_int(i, "birlik", BolgeInfo[idx][bBirlik]);
			cache_get_value_name_int(i, "renk", BolgeInfo[idx][bRenk]);
			BolgeInfo[idx][bAktif] = 1;
			BolgeInfo[idx][bID] = idx;
			
			BolgeInfo[idx][bBolge] = CreateDynamicRectangle(BolgeInfo[idx][bminX], BolgeInfo[idx][bminY], BolgeInfo[idx][bmaxX], BolgeInfo[idx][bmaxY], -1, -1, -1);
			BolgeInfo[idx][bZone] = GangZoneCreate(BolgeInfo[idx][bminX], BolgeInfo[idx][bminY], BolgeInfo[idx][bmaxX], BolgeInfo[idx][bmaxY]);
			GangZoneShowForAll(BolgeInfo[idx][bZone], BolgeInfo[idx][bRenk]);
		
			mysql_format(g_SQL, query, sizeof(query), "UPDATE bolgeler SET id = '%d' WHERE id = '%d'", idx, id);
			mysql_tquery(g_SQL, query);
		}

		printf("Toplam %d adet bolge yüklendi.", rows);
		return 1;
	}


	forward Texture_Yukle(objeid);
	public Texture_Yukle(objeid)
	{
		new rows;
		cache_get_row_count(rows);

		new textureindex, texturemodel, txdisim[100], textureisim[100]; 
		for(new i = 0; i < rows; i++)
		{
			cache_get_value_name_int(i, "TextureIndex", textureindex);
			cache_get_value_name_int(i, "TextureModel", texturemodel);
			cache_get_value_name(i, "TxdIsim", txdisim);
			cache_get_value_name(i, "TextureIsim", textureisim);

			SetDynamicObjectMaterial(objeid, textureindex, texturemodel, txdisim, textureisim);
		}
		return 1;
	}

	Dialog:TextureIndex(playerid, response, listitem, inputtext[]) {
		if(response) {
			SetPVarInt(playerid, "TexturelancakObjeIndex", listitem);
			new liste[2048];
			for(new i; i < sizeof(MateryalIDleri); i++) {
				format(liste, sizeof liste, "%s\n%s", liste, MateryalIDleri[i][Isim]);
			}
			Dialog_Show(playerid, TextureDialog, DIALOG_STYLE_LIST, "Texture Sistemi", liste, "Tamam", "Ýptal");
		}
		return 1;
	}

	Dialog:TextureDialog(playerid, response, listitem, inputtext[]) {
		if(response) {
			SetDynamicObjectMaterial(oyuncuData[playerid][duzenlenenMobilya], GetPVarInt(playerid, "TexturelancakObjeIndex"), MateryalIDleri[listitem][modelID], MateryalIDleri[listitem][TxdIsim], MateryalIDleri[listitem][TextureIsim], 0);

			if(listitem != 0) {
				new DB_Query[300];
				mysql_format(g_SQL, DB_Query, sizeof(DB_Query), "SELECT * FROM `textureler` WHERE `TextureIndex` = %d AND `ObjeSQL` = %d", GetPVarInt(playerid,"TexturelancakObjeIndex"), oyuncuData[playerid][goruntulenenMobilyaSQL]);
				new Cache:veri = mysql_query(g_SQL, DB_Query, true);
				new rows = cache_num_rows();
				if(rows)
					mysql_format(g_SQL, DB_Query, sizeof(DB_Query), "UPDATE `textureler` SET `TextureModel` = %d, `TextureIsim` = '%e', `TxdIsim` = '%e' WHERE `TextureIndex` = %d AND `ObjeSQL` = %d", MateryalIDleri[listitem][modelID], MateryalIDleri[listitem][TextureIsim], MateryalIDleri[listitem][TxdIsim], GetPVarInt(playerid, "TexturelancakObjeIndex"), oyuncuData[playerid][goruntulenenMobilyaSQL]);
				else
					mysql_format(g_SQL, DB_Query, sizeof(DB_Query), "INSERT INTO `textureler` (`TextureModel`, `TextureIndex`, `TxdIsim`, `TextureIsim`, `ObjeSQL`) VALUES (%d, %d, '%e', '%e', %d)", MateryalIDleri[listitem][modelID], GetPVarInt(playerid, "TexturelancakObjeIndex"), MateryalIDleri[listitem][TxdIsim], MateryalIDleri[listitem][TextureIsim], oyuncuData[playerid][goruntulenenMobilyaSQL]);
				mysql_query(g_SQL, DB_Query, false);
				DeletePVar(playerid, "TexturelancakObjeID");
				DeletePVar(playerid, "TexturelancakObjeIndex");
				cache_delete(veri);
			}
		}
		return 1;
	}

	CMD:dekorsec(playerid, params[])
	{
		if(Oyuncu_Evde(playerid) != -1)
		{
			if(Ev_SahipKontrol(playerid, Oyuncu_Evde(playerid)))
			{
				SelectObject(playerid);
			}
		}

		if(Oyuncu_Isyerinde(playerid) != -1)
		{
			if(Isyeri_SahipKontrol(playerid, Oyuncu_Isyerinde(playerid)) || IsyeriBilgi[Oyuncu_Isyerinde(playerid)][isyeriOrtak] == oyuncuData[playerid][oID])
			{
				SelectObject(playerid);
			}
		}
		return 1;
	}

	CMD:dekorasyon(playerid, params[])
	{
		if(Oyuncu_Evde(playerid) != -1)
		{
			if(Ev_SahipKontrol(playerid, Oyuncu_Evde(playerid)) || EvBilgi[Oyuncu_Evde(playerid)][evAnahtar] == oyuncuData[playerid][oID] || EvBilgi[Oyuncu_Evde(playerid)][evKiraci] == oyuncuData[playerid][oID])
			{
				Dialog_Show(playerid, dekor_menu, DIALOG_STYLE_LIST, "> Dekorasyon", "Eþyalarý listele\nYeni eþya al\n", "Seç", "Kapat");
			}
			else hataMesaji(playerid, "Bu evi düzenleme yetkin bulunmuyor.");
		}

		if(Oyuncu_Isyerinde(playerid) != -1)
		{
			if(Isyeri_SahipKontrol(playerid, Oyuncu_Isyerinde(playerid)) || IsyeriBilgi[Oyuncu_Isyerinde(playerid)][isyeriOrtak] == oyuncuData[playerid][oID])
			{
				Dialog_Show(playerid, dekor_menu, DIALOG_STYLE_LIST, "> Dekorasyon", "Eþyalarý listele\nYeni eþya al\n", "Seç", "Kapat");
			} else hataMesaji(playerid, "Bu iþyerini düzenleme yetkin bulunmuyor.");
		}
		return 1;
	}

	forward MobilyaObjeSec(playerid, objectid);
	public MobilyaObjeSec(playerid, objectid)
	{
		new rows;
		cache_get_row_count(rows);
		if(rows)
		{
			oyuncuData[playerid][duzenlenenMobilya] = objectid;
			SetPVarInt(playerid, "islem_dekor", objectid), SetPVarInt(playerid, "isletme", Oyuncu_Isyerinde(playerid)), SetPVarInt(playerid, "ev", Oyuncu_Evde(playerid));
			Dialog_Show(playerid, dekor_islem, DIALOG_STYLE_LIST, "> Dekor, liste, iþlem", "> Hareket ettir\n> Pozisyon\n> Texture\n> Kopyala\n> Kaldýr", "Seç", "Geri");
		}
		else SunucuMesaji(playerid, "Bu eþya size ait deðil.");

		CancelEdit(playerid);
		return 1;
	}

	mobilyaLimit(playerid)
	{
		new limit;
		switch(oyuncuData[playerid][oVIP])
		{
			case 1: limit = 450;
			default: limit = 325;
		}
		if(oyuncuData[playerid][oMobilyaPaketi] > 0){
			limit = 500;
		}

		return limit;
	}

// dekorasyon sistemi sonu


	CMD:snakecam(playerid, params[])
	{
		if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS && oyuncuData[playerid][oIsbasi] != true)
			return hataMesaji(playerid, "Bu sistemden faydalanamazsýnýz.");

		new id = -1;
		if((id = Ev_Yakin(playerid)) != -1)
		{
			if(SnakeCamDurum[playerid] == -1)
			{
				SnakeCamDurum[playerid] = id;
				SetPlayerInterior(playerid, EvBilgi[id][evInterior]);
				SetPlayerVirtualWorld(playerid, EvBilgi[id][evVW]);
				SetPlayerPos(playerid, EvBilgi[id][evIcPos][0], EvBilgi[id][evIcPos][1], EvBilgi[id][evIcPos][2]);

				TogglePlayerSpectating(playerid, true);
  			//SetPlayerCameraPos(playerid, EvBilgi[id][evIcPos][0], EvBilgi[id][evIcPos][1], EvBilgi[id][evIcPos][2]);
  			//SetPlayerCameraLookAt(playerid, EvBilgi[id][evIcPos][0], EvBilgi[id][evIcPos][1], EvBilgi[id][evIcPos][2], CAMERA_MOVE);

			//InterpolateCameraPos(playerid, EvBilgi[id][evIcPos][0], EvBilgi[id][evIcPos][1], EvBilgi[id][evIcPos][2], EvBilgi[id][evIcPos][0], EvBilgi[id][evIcPos][1], EvBilgi[id][evIcPos][2], 1000, CAMERA_CUT);
			//InterpolateCameraLookAt(playerid, EvBilgi[id][evIcPos][0], EvBilgi[id][evIcPos][1], EvBilgi[id][evIcPos][2], EvBilgi[id][evIcPos][0], EvBilgi[id][evIcPos][1], EvBilgi[id][evIcPos][2], 1000, CAMERA_CUT);

				oyuncuData[playerid][snakeCamObje] = CreatePlayerObject(playerid, 19300, EvBilgi[id][evIcPos][0], EvBilgi[id][evIcPos][1], EvBilgi[id][evIcPos][2], 0.0, 0.0, 0.0);
				AttachCameraToPlayerObject(playerid, oyuncuData[playerid][snakeCamObje]);

				SunucuMesaji(playerid, "Baþarýyla evin içini izlemeye baþladýnýz.");
			}
			else
			{
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				TogglePlayerSpectating(playerid, 0);
				SnakeCamDurum[playerid] = -1;
				DestroyDynamicObject(oyuncuData[playerid][snakeCamObje]);
				SunucuMesaji(playerid, "Evin içini izlemeyi býraktýnýz.");
			}
		}
		else
		{
			if(SnakeCamDurum[playerid] != -1)
			{
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				TogglePlayerSpectating(playerid, false);
				SetPlayerPos(playerid, EvBilgi[SnakeCamDurum[playerid]][evPos][0], EvBilgi[SnakeCamDurum[playerid]][evPos][1], EvBilgi[SnakeCamDurum[playerid]][evPos][2]);
				SnakeCamDurum[playerid] = -1;
				SetCameraBehindPlayer(playerid);
				SunucuMesaji(playerid, "Evin içini izlemeyi býraktýnýz.");
			}
			else
				hataMesaji(playerid, "Bir eve yakýn deðilsin.");
		}
		return 1;
	}

	CMD:tackle(playerid, params[])
	{
		if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS && oyuncuData[playerid][oIsbasi] != true)
			return hataMesaji(playerid, "Bu sistemden faydalanamazsýnýz.");
		
		
		if(tackleDurum[playerid] == 0)
		{
			tackleDurum[playerid] = 1;
			SunucuMesaji(playerid, "Tackle modu aktif edildi.");
		}
		else
		{
			tackleDurum[playerid] = 0;
			SunucuMesaji(playerid, "Tackle modu kapatýldý.");
		}
		return 1;
	}

	forward OnPlayerCheckHouseInventory(playerid, houseid);
	public OnPlayerCheckHouseInventory(playerid, houseid)
	{
		new rows;
		cache_get_row_count(rows);

		if(!rows)
		{
			Dialog_Show(playerid, house_inventory, DIALOG_STYLE_LIST, "> Silah Envanter", "Yeni Eþya Ekle", "Seç", "Kapat");
		}
		else
		{
			new str[300], weaponid, id, ammo, sayi;

			str = "Eþya ID\tEþya Adý\tMermi\n";
			for (new i = 0; i < rows; i ++) {
				cache_get_value_name_int(i, "inventory_id", id);
				cache_get_value_name_int(i, "inventory_weaponid", weaponid);
				cache_get_value_name_int(i, "inventory_ammo", ammo);

				format(str, sizeof(str), "%s%d\t%s\t%d\n", str, id, SilahIsim(weaponid), ammo);
				sayi++;
			}
			if(sayi < 5)
				format(str, sizeof(str), "%sYeni Eþya Ekle", str);

			Dialog_Show(playerid, house_inventory, DIALOG_STYLE_TABLIST_HEADERS, "> Silah Envanter", str, "Seç", "Geri");
		}
		return 1;
	}

	Dialog:house_inventory(playerid, response, listitem, inputtext[])
	{
		new ev;
		if(response && (ev = Oyuncu_Evde(playerid)) != -1 && Ev_SahipKontrol(playerid, ev) || EvBilgi[ev][evAnahtar] == oyuncuData[playerid][oID])
		{
			if(!strcmp(inputtext, "Yeni Eþya Ekle"))
			{
				if(OyuncuBirlikTuru(playerid) == BIRLIK_POLIS) return hataMesaji(playerid, "Polisler bu sistemden yararlanamaz.");
				new silahid = GetPlayerWeapon(playerid), mermi = GetPlayerAmmo(playerid);

				if(silahid == 0)
					return hataMesaji(playerid, "Elinde silah bulunamadý.");

				new query[250], Cache:kontrol, rows;
				mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM player_weapons WHERE weapon_userid = %d AND weapon_gameid = %d AND weapon_statusid = %d", oyuncuData[playerid][oID], silahid, SILAH_OYUNCU_USTUNDE);
				kontrol = mysql_query(g_SQL, query);
				cache_get_row_count(rows);
				if(!rows) return hataMesaji(playerid, "Elindeki silahýn kayýtlarýna ulaþýlamadý, envantere býrakamazsýn."), cache_delete(kontrol);
				cache_delete(kontrol);

				mysql_format(g_SQL, query, sizeof(query), "INSERT INTO `house_inventory` (`inventory_weaponid`, `inventory_ammo`, `inventory_house`) VALUES ('%d', '%d', '%d')", silahid, mermi, EvBilgi[ev][evID]);
				mysql_tquery(g_SQL, query);

				SilahSil(playerid, silahid);
				SunucuMesaji(playerid, "%s isimli silahý evinin deposuna koydun.", SilahIsim(silahid));
			}
			else
			{
				new
		    		query[250];

		    	new Cache:kontrol;
		    	mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM player_weapons WHERE weapon_userid = '%d' AND `weapon_statusid` = '%d'", oyuncuData[playerid][oID], SILAH_OYUNCU_USTUNDE);
		    	kontrol = mysql_query(g_SQL, query);
		    	new rows = cache_num_rows();

		    	if(rows < 2)
		    	{
						new id = strval(inputtext);
						mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM house_inventory WHERE inventory_id = '%d'", id);
						mysql_tquery(g_SQL, query, "OnPlayerGetHouseItem", "d", playerid);
				}
				else
				{
					hataMesaji(playerid, "Üstünde maksimum iki adet silah taþýyabilirsin.");
				}
				cache_delete(kontrol);
			}
		}
		return 1;
	}

	forward OnPlayerGetHouseItem(playerid);
	public OnPlayerGetHouseItem(playerid)
	{
		new rows;
		cache_get_row_count(rows);

		if(rows)
		{
			new weapon_id, ammo, id;
			for(new i = 0; i < rows; i++)
			{
				cache_get_value_name_int(i, "inventory_id", id);
				cache_get_value_name_int(i, "inventory_weaponid", weapon_id);
				cache_get_value_name_int(i, "inventory_ammo", ammo);

				new Cache:silahVericek, query[280];
				mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM player_weapons WHERE weapon_userid = %d AND weapon_statusid = %d AND weapon_gameid = %d", oyuncuData[playerid][oID], SILAH_OYUNCU_USTUNDE, weapon_id);
				silahVericek = mysql_query(g_SQL, query);
				new rowsx = cache_num_rows();
				cache_delete(silahVericek);
				if(rowsx) return hataMesaji(playerid, "Bu silah zaten üstünde bulunuyor.");

				mysql_format(g_SQL, query, sizeof(query), "DELETE FROM `house_inventory` WHERE `inventory_id` = '%d'", id);
				mysql_tquery(g_SQL, query);
				VeritabaniSilahVer(playerid, weapon_id, ammo);
				SunucuMesaji(playerid, "%s isimli silahý evinin deposundan aldýn.", SilahIsim(weapon_id));	
				Log_Kaydet("loglar/silahbugkontrol.txt", "[%s] %s ev deposundan silah aldi. Silah: %d - Mermi: %d", Tarih(), OyuncuIsim(playerid), weapon_id, ammo);		
				new str[175];
				format(str, sizeof(str), "```[%s] %s ev deposundan silah aldi. Silah: %d - Mermi: %d```", Tarih(), OyuncuIsim(playerid), weapon_id, ammo);
				DCC_SendChannelMessage(silahlog, str);
			}
		}
		else
			return hataMesaji(playerid, "Bu eþya evde bulunamadý.");

		return 1;
	}

	stock PlayerHasWeapon(playerid, weaponid)
	{
		return 1;
	}

	CMD:silahtut(playerid, params[])
	{
		new query[320], Float:posx, Float:posy, Float:posz, interior, vw;

		GetPlayerPos(playerid, posx, posy, posz);
		vw = GetPlayerVirtualWorld(playerid);
		interior = GetPlayerInterior(playerid);

		mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM player_weapons WHERE weapon_int = '%d' AND weapon_vw = '%d' AND weapon_statusid = '1'", interior, vw);
		mysql_tquery(g_SQL, query, "OnPlayerTakeWeapon", "d", playerid);
		return 1;
	}

	forward OnPlayerTakeWeapon(playerid);
	public OnPlayerTakeWeapon(playerid)
	{
		new rows;
		cache_get_row_count(rows);

		new weapon_gameid, weapon_ammo, weapon_userid, weapon_int, weapon_id, Float:weapon_x, Float:weapon_y, Float:weapon_z, buldu, weapon_objectid;

		if(rows)
		{
			for(new i; i < rows; i++)
			{
				cache_get_value_name_float(i, "weapon_x", weapon_x);
				cache_get_value_name_float(i, "weapon_y", weapon_y);
				cache_get_value_name_float(i, "weapon_z", weapon_z);

				if(IsPlayerInRangeOfPoint(playerid, 3.0, weapon_x, weapon_y, weapon_z))
				{
					cache_get_value_name_int(i, "weapon_gameid", weapon_gameid);
					cache_get_value_name_int(i, "weapon_ammo", weapon_ammo);
					cache_get_value_name_int(i, "weapon_userid", weapon_userid);
					cache_get_value_name_int(i, "weapon_int", weapon_int);
					cache_get_value_name_int(i, "weapon_id", weapon_id);
					cache_get_value_name_int(i, "weapon_objectid", weapon_objectid);
					buldu++;
				}
			}

			if(buldu == 1)
			{
				if(OyuncuBirlikTuru(playerid) == BIRLIK_POLIS)
				{
					new query[250], birlikid = oyuncuData[playerid][oBirlik], weapon_name[50];
					GetWeaponName(weapon_gameid, weapon_name, sizeof(weapon_name));
					BirlikMesaji(birlikid, RENK_TAN, "** %s isimli polis memuru %s isimli silaha el koydu.", OyuncuIsim(playerid, 0), weapon_name);
					mysql_format(g_SQL, query, sizeof(query), "UPDATE `player_weapons` SET `weapon_statusid` = '%d' WHERE `weapon_id` = '%d'", SILAH_POLIS_ZIMMETI, weapon_id);
					mysql_tquery(g_SQL, query);
					DestroyDynamicObject(weapon_objectid);

					new me[49+MAX_PLAYER_NAME];
					format(me, sizeof(me), "%s marka silahý yerden alýr ve delil torbasýnýn içine koyar.", weapon_name);
					cmd(playerid, 1, me);
				}
				else
				{
					new query[250], weapon_name[50];
					GetWeaponName(weapon_gameid, weapon_name, sizeof(weapon_name));

					if(weapon_userid != oyuncuData[playerid][oID] && weapon_int > 0)
						return hataMesaji(playerid, "Bu bölgede sadece silah sahipleri silahlarýný alabilir.");

					new Cache:silahVericek;
					mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM player_weapons WHERE weapon_userid = %d AND weapon_statusid = %d AND weapon_gameid = %d", oyuncuData[playerid][oID], SILAH_OYUNCU_USTUNDE, weapon_gameid);
					silahVericek = mysql_query(g_SQL, query);
					new rowsx = cache_num_rows();

					if(rowsx)
					{
						hataMesaji(playerid, "Bu silah zaten üstünde bulunuyor.");
					}
					else
					{
						if(weapon_userid == oyuncuData[playerid][oID])
						{
							mysql_format(g_SQL, query, sizeof(query), "UPDATE `player_weapons` SET `weapon_statusid` = '%d' WHERE `weapon_id` = '%d'", SILAH_OYUNCU_USTUNDE, weapon_id);
							mysql_tquery(g_SQL, query);
							GivePlayerWeapon(playerid, weapon_gameid, weapon_ammo);
						}
						else
						{
							mysql_format(g_SQL, query, sizeof(query), "UPDATE `player_weapons` SET `weapon_statusid` = '%d', `weapon_userid` = '%d' WHERE `weapon_id` = '%d'", SILAH_OYUNCU_USTUNDE, oyuncuData[playerid][oID], weapon_id);
							mysql_tquery(g_SQL, query);
							GivePlayerWeapon(playerid, weapon_gameid, weapon_ammo);
						}
						DestroyDynamicObject(weapon_objectid);

						new me[49+MAX_PLAYER_NAME];
						format(me, sizeof(me), "%s marka silahý yerden alýr.", weapon_name);
						cmd(playerid, 1, me);
						Log_Kaydet("loglar/silahbugkontrol.txt", "[%s] %s /silahtut kullandi. Silah: %d - Mermi: %d", Tarih(), OyuncuIsim(playerid), weapon_gameid, weapon_ammo);
						new str[175];
						format(str, sizeof(str), "```[%s] %s /silahtut kullandi. Silah: %d - Mermi: %d```", Tarih(), OyuncuIsim(playerid), weapon_gameid, weapon_ammo);
						DCC_SendChannelMessage(silahlog, str);
					}
					cache_delete(silahVericek);
				}
			}
			if(buldu == 0)
			{
				hataMesaji(playerid, "Çevrende herhangi bir silah bulunmuyor.");
			}
			if(buldu > 1)
			{
				hataMesaji(playerid, "Üst üste silah koyulmuþ ticket yoluyla bu durumu bildirmelisin.");
			}
		}
		else
		{
			hataMesaji(playerid, "Bölgede herhangi bir silah bulunamadý.");
		}
		return 1;
	}


	CMD:silahbirak(playerid, params[])
	{
		if(OyuncuBirlikTuru(playerid) == BIRLIK_POLIS) return hataMesaji(playerid, "Polisler bu sistemden yararlanamaz.");
		new player_weaponid = GetPlayerWeapon(playerid);
		new query[250], Cache:kontrol, rows, yrows;
		mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM player_weapons WHERE weapon_userid = %d AND weapon_gameid = %d AND weapon_statusid = %d", oyuncuData[playerid][oID], player_weaponid, SILAH_OYUNCU_USTUNDE);
		kontrol = mysql_query(g_SQL, query);
		cache_get_row_count(rows);
		if(!rows) return hataMesaji(playerid, "Elindeki silahýn kayýtlarýna ulaþýlamadý, yere býrakamazsýn."), cache_delete(kontrol);
		cache_delete(kontrol);
		new Cache:yakincek, Float:weapon_x, Float:weapon_y, Float:weapon_z, buldu = 0;
		mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM player_weapons WHERE weapon_int = '%d' AND weapon_vw = '%d' AND weapon_statusid = '1'", GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
		yakincek = mysql_query(g_SQL, query);
		cache_get_row_count(yrows);

		if(yrows)
		{
			for(new i; i < yrows; i++)
			{
				cache_get_value_name_float(i, "weapon_x", weapon_x);
				cache_get_value_name_float(i, "weapon_y", weapon_y);
				cache_get_value_name_float(i, "weapon_z", weapon_z);

				if(IsPlayerInRangeOfPoint(playerid, 3.5, weapon_x, weapon_y, weapon_z))
				{
					buldu++; break;
				}
			}
		}
		cache_delete(yakincek);
		if(buldu > 0) return hataMesaji(playerid, "Yakýnlarda baþka bir silah var. Silahý buraya býrakamazsýnýz.");
		new silahid, mermi;
		for (new i = 0; i < 13; i ++)
		{
			GetPlayerWeaponData(playerid, i, silahid, mermi);
			if(silahid > 0)
			{
				mysql_format(g_SQL, query, sizeof(query), "UPDATE `player_weapons` SET `weapon_ammo` = '%d' WHERE `weapon_userid` = '%d' AND `weapon_gameid` = '%d' AND `weapon_statusid` = '%d'", mermi, oyuncuData[playerid][oID], silahid, SILAH_OYUNCU_USTUNDE);
				mysql_tquery(g_SQL, query);
			}
		}
		if(player_weaponid == WEAPON_COLT45 || player_weaponid == WEAPON_DEAGLE || player_weaponid == WEAPON_UZI || player_weaponid == WEAPON_SHOTGUN || player_weaponid == WEAPON_AK47)
		{
			mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM player_weapons WHERE weapon_gameid = '%d' AND weapon_userid = '%d' AND weapon_statusid = '%d'", player_weaponid, oyuncuData[playerid][oID], SILAH_OYUNCU_USTUNDE);
			mysql_tquery(g_SQL, query, "OnPlayerDropWeapon", "d", playerid);
		}
		else
		{
			hataMesaji(playerid, "Elinde yere býrakabileceðin türde bir silah yok.");
		}
		return 1;
	}

	forward OnPlayerDropWeapon(playerid);
	public OnPlayerDropWeapon(playerid)
	{
		new rows, weapon_id, weapon_gameid, weapon_objectid, Float:posx, Float:posy, Float:posz, vw, int, query[600], weapon_name[50];
		cache_get_row_count(rows);

		GetPlayerPos(playerid, posx, posy, posz);
		vw = GetPlayerVirtualWorld(playerid);
		int = GetPlayerInterior(playerid);

		if(rows)
		{
			for(new i; i < rows; i++)
			{
				cache_get_value_name_int(i, "weapon_id", weapon_id);
				cache_get_value_name_int(i, "weapon_gameid", weapon_gameid);
			}
			weapon_objectid = CreateDynamicObject(SilahObjeModelleri(weapon_gameid), posx, posy, posz - 1, 93.7, 120.0, 120.0, vw, int);
			mysql_format(g_SQL, query, sizeof(query), "UPDATE player_weapons SET weapon_statusid = '%d', weapon_x = '%f', weapon_y = '%f', weapon_z = '%f', weapon_vw = '%d', weapon_int = '%d', weapon_objectid = '%d' WHERE weapon_id = '%d'", SILAH_YERDE, posx, posy, posz, vw, int, weapon_objectid, weapon_id);
			mysql_tquery(g_SQL, query);

			mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `player_weapons` WHERE `weapon_userid` = '%d' AND `weapon_statusid` = '%d'", oyuncuData[playerid][oID], SILAH_OYUNCU_USTUNDE);
			mysql_tquery(g_SQL, query, "OnPlayerGetWeapons", "d", playerid);

			GetWeaponName(weapon_gameid, weapon_name, sizeof(weapon_name));

			new me[49+MAX_PLAYER_NAME];
			format(me, sizeof(me), "%s marka silahý yere býrakýr.", weapon_name);
			cmd(playerid, 1, me);
			Log_Kaydet("loglar/silahbugkontrol.txt", "[%s] %s yere silah birakti. Silah: %s", Tarih(), OyuncuIsim(playerid), weapon_name);
			new str[175];
			format(str, sizeof(str), "```[%s] %s yere silah birakti. Silah: %s```", Tarih(), OyuncuIsim(playerid), weapon_name);
			DCC_SendChannelMessage(silahlog, str);
		}
		return 1;
	}

	CMD:silahliste(playerid, params[])
	{
		new query[250];
		mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM `player_weapons` WHERE `weapon_userid` = '%d'", oyuncuData[playerid][oID]);
		mysql_tquery(g_SQL, query, "OnPlayerCheckWeapons", "d", playerid);
		return 1;
	}

	forward OnPlayerCheckWeapons(playerid);
	public OnPlayerCheckWeapons(playerid)
	{
		new rows, weapon_id, weapon_gameid, weapon_statusid, weapon_ammo, weapon_name[50];

		cache_get_row_count(rows);
		new i;
		for(i = 0; i < rows; i++)
		{
			cache_get_value_name_int(i, "weapon_id", weapon_id);
			cache_get_value_name_int(i, "weapon_gameid", weapon_gameid);
			cache_get_value_name_int(i, "weapon_statusid", weapon_statusid);
			cache_get_value_name_int(i, "weapon_ammo", weapon_ammo);
			GetWeaponName(weapon_gameid, weapon_name, sizeof(weapon_name));

			SCM_Ex(playerid, 0xC8C8C800, "Silah: %s(#%d) - Mermi: %d - Durum: %s", weapon_name, weapon_id, weapon_ammo, GetWeaponStatus(weapon_statusid));
		}
		SunucuMesaji(playerid, "%d adet silah listelendi.", i);
		return 1;
	}

	GetWeaponStatus(statuse)
	{
		new status[50];
		switch(statuse)
		{
			case 0:
			{
				format(status, sizeof(status), "Üstünde");
			}

			case 1:
			{
				format(status, sizeof(status), "Yerde");
			}

			case 2:
			{
				format(status, sizeof(status), "Aracta");
			}

			case 3:
			{
				format(status, sizeof(status), "Evde");
			}

			case 4:
			{
				format(status, sizeof(status), "Polis Zimmeti");
			}
		}
		return status;
	}

	CMD:silahyardim(playerid, params[])
	{
		SunucuMesaji(playerid, "/silahbirak, /silahtut, /silahliste");
		return 1;
	}

	mevduatLimit(playerid)
	{
		new limit;
		switch(oyuncuData[playerid][oVIP])
		{
			case 1: limit = 400000;
			default: limit = 200000;
		}

		return limit;
	}

	forward OnWeaponsLoaded(playerid);
	public OnWeaponsLoaded(playerid)
	{
	    new rows, weaponid, index;
	   
	    cache_get_row_count(rows);
	   
	    for (new i; i < rows; i++)
	    {
	        cache_get_value_name_int(i, "WeaponID", weaponid);
	        index = weaponid - 22;
	       
	        cache_get_value_name_float(i, "PosX", WeaponSettings[playerid][index][Position][0]);
	        cache_get_value_name_float(i, "PosY", WeaponSettings[playerid][index][Position][1]);
	        cache_get_value_name_float(i, "PosZ", WeaponSettings[playerid][index][Position][2]);
	       
	        cache_get_value_name_float(i, "RotX", WeaponSettings[playerid][index][Position][3]);
	        cache_get_value_name_float(i, "RotY", WeaponSettings[playerid][index][Position][4]);
	        cache_get_value_name_float(i, "RotZ", WeaponSettings[playerid][index][Position][5]);
	       
	        cache_get_value_name_int(i, "Bone", WeaponSettings[playerid][index][Bone]);
	        cache_get_value_name_int(i, "Hidden", WeaponSettings[playerid][index][Hidden]);
	    }
	}

    CMD:yarisolustur(playerid, params[])
	{
		new checking = 0;
		if(oyuncuData[playerid][oBirlik] != -1 && BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikAmaci] == 5) checking++;
		if(oyuncuData[playerid][oAdmin] < 1 && oyuncuData[playerid][oVIP] < 1 && checking == 0) return YetkinizYok(playerid);
		if(oyuncuData[playerid][oYarisID] != -1) return hataMesaji(playerid, "Zaten þu anda bir yarýþýn içindesin.");
		if(oyuncuData[playerid][oPara] < 500) return hataMesaji(playerid, "Yarýþ oluþturmak için $500'a ihtiyacýn var.");
		new query[250], Cache:GetCache, yarissayisi;
		mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM oyuncular WHERE ID = '%d'", oyuncuData[playerid][oID]);
		GetCache = mysql_query(g_SQL, query);	
		cache_get_value_name_int(0, "DuzenlenenYaris", yarissayisi);
		cache_delete(GetCache);
		yarissayisi++;
		mysql_format(g_SQL, query, sizeof(query), "UPDATE oyuncular SET DuzenlenenYaris = '%d' WHERE ID = '%d'", yarissayisi, oyuncuData[playerid][oID]);
		mysql_query(g_SQL, query);
		mysql_format(g_SQL, query, sizeof query, "INSERT INTO races (race_owner) VALUES ('%d')", oyuncuData[playerid][oID]);
		mysql_tquery(g_SQL, query, "RaceCreated", "d", playerid);
		ParaEkle(playerid, -500);
		return 1;
	}

	function RaceCreated(playerid)
	{

		oyuncuData[playerid][oYarisID] = cache_insert_id();
		SunucuMesaji(playerid, "%d ID'li yarýþý oluþturdunuz. Davet etmek için '/yarisdavet [id/isim]' kullanmalýsýnýz.", oyuncuData[playerid][oYarisID]);
	}

	CMD:yarisdavet(playerid, params[])
	{
		new checking = 0;
		if(oyuncuData[playerid][oBirlik] != -1 && BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikAmaci] == 5) checking++;
		if(oyuncuData[playerid][oAdmin] < 1 && oyuncuData[playerid][oVIP] < 1 && checking == 0) return YetkinizYok(playerid);
		if(oyuncuData[playerid][oYarisID] == -1) return hataMesaji(playerid, "Bir yarýþ yönetmiyorsunuz.");
		new oyuncuid;
		if(sscanf(params, "u", oyuncuid)) return kullanimMesaji(playerid, "/yarisdavet [id/isim]");
		if(oyuncuData[oyuncuid][oYarisID] != -1 || oyuncuData[oyuncuid][oYarisDavet] != -1) return hataMesaji(playerid, "Bu kiþi zaten bir yarýþta veya bir yarýþa davet edilmiþ.");
		new string[128];
		oyuncuData[oyuncuid][oYarisDavet] = playerid;
		SunucuMesaji(playerid, "%s adlý kiþiyi %d ID'li yarýþa davet ettiniz.", OyuncuIsim(oyuncuid), oyuncuData[playerid][oYarisID]);
		format(string, sizeof string, "%s adlý kiþi sizi yarýþa davet etti.\nYarýþ ID: %d\nKatýlmak istiyor musunuz?", OyuncuIsim(playerid), oyuncuData[playerid][oYarisID]);
		Dialog_Show(oyuncuid, yarisdaveti, DIALOG_STYLE_MSGBOX, "Yarýþ Daveti", string, "Onayla", "Reddet");
		return 1;
	}

	Dialog:yarisdaveti(playerid, response, listitem, inputtext[])
	{
		if(response)
		{
			SunucuMesaji(oyuncuData[playerid][oYarisDavet], "%s adlý kiþi yarýþ davetini kabul etti.", OyuncuIsim(playerid));
			SunucuMesaji(playerid, "Yarýþ davetini kabul ettiniz. Yarýþýn baþlatýlmasýný bekleyin.");
			oyuncuData[playerid][oYarisID] = oyuncuData[oyuncuData[playerid][oYarisDavet]][oYarisID];
			oyuncuData[playerid][oYarisDavet] = -1;
		}
		else
		{
			SunucuMesaji(playerid, "Yarýþ davetini reddettiniz.");
			SunucuMesaji(oyuncuData[playerid][oYarisDavet], "%s adlý kiþi yarýþ davetini reddetti.", OyuncuIsim(playerid));
			oyuncuData[playerid][oYarisDavet] = -1;
		}
		return 1;	
	}

	CMD:yarisiptal(playerid, params[])
	{
		if(oyuncuData[playerid][oYarisID] == -1) return hataMesaji(playerid, "Bir yarýþ yönetmiyorsunuz.");
		new query[140], Cache:GetCache, rows;
		mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM races WHERE race_id = '%d' AND race_owner = '%d'", oyuncuData[playerid][oYarisID], oyuncuData[playerid][oID]);
		GetCache = mysql_query(g_SQL, query);
		cache_get_row_count(rows);
		if(rows)
		{
			new dquery[100];
			mysql_format(g_SQL, dquery, sizeof(dquery), "DELETE FROM races WHERE race_id = '%d'", oyuncuData[playerid][oYarisID]);
			mysql_query(g_SQL, dquery);
			mysql_format(g_SQL, dquery, sizeof(dquery), "DELETE FROM race_cp WHERE race_id = '%d'", oyuncuData[playerid][oYarisID]);
			mysql_query(g_SQL, dquery);
			foreach(new i : Player)
			{
				if(oyuncuData[i][oYarisID] == oyuncuData[playerid][oYarisID] && oyuncuData[i][oYarisID] != -1)
				{
					oyuncuData[i][oYarisID] = -1;
					oyuncuData[i][oYarisKatilimci] = 0;
					PlayerTextDrawHide(i, yaristd_0[i]);
					PlayerTextDrawHide(i, yaristd_1[i]);
					PlayerTextDrawHide(i, yaristd_2[i]);
					PlayerTextDrawHide(i, yaristd_3[i]);
					PlayerTextDrawHide(i, yaristd_5[i]);
					PlayerTextDrawHide(i, yaristd_6[i]);
					PlayerTextDrawHide(i, yaristd_7[i]);
					oyuncuData[i][oYarisDavet] = -1;
					oyuncuData[i][oYarisKalanSure] = -1;
					oyuncuData[i][oYarisCP] = -1;
					oyuncuData[i][oYarisSiralama] = -1;
					SetPVarInt(i, "BirYarista", 0);
					KillTimer(oyuncuData[i][oYarisTimer]);
					SunucuMesaji(i, "Yarýþ iptal edildi.");
				}
			}
		}
		else if(!rows)
		{
		hataMesaji(playerid, "Bir yarýþ yönetmiyorsunuz.");
		}
		cache_delete(GetCache);
		return 1;
	}

	CMD:yariscpekle(playerid, params[])
	{
		new checking = 0;
		if(oyuncuData[playerid][oBirlik] != -1 && BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikAmaci] == 5) checking++;
		if(oyuncuData[playerid][oAdmin] < 1 && oyuncuData[playerid][oVIP] < 1 && checking == 0) return YetkinizYok(playerid);
		if(oyuncuData[playerid][oYarisID] == -1) return hataMesaji(playerid, "Bir yarýþ yönetmiyorsun.");
		new query[250], Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		mysql_format(g_SQL, query, sizeof query, "INSERT INTO race_cp (race_id, cp_x, cp_y, cp_z) VALUES (%d, %.4f, %.4f, %.4f)", oyuncuData[playerid][oYarisID], x, y, z);
		mysql_tquery(g_SQL, query);
		SunucuMesaji(playerid, "%.4f, %.4f, %.4f koordinatlý bir checkpoint eklediniz.", x, y, z);
		return 1;
	}

	CMD:yarisbaslat(playerid, params[])
	{
		new checking = 0;
		if(oyuncuData[playerid][oBirlik] != -1 && BirlikBilgi[oyuncuData[playerid][oBirlik]][birlikAmaci] == 5) checking++;
		if(oyuncuData[playerid][oAdmin] < 1 && oyuncuData[playerid][oVIP] < 1 && checking == 0) return YetkinizYok(playerid);
		if(oyuncuData[playerid][oYarisID] == -1) return hataMesaji(playerid, "Bir yarýþ yönetmiyorsun.");
		foreach(new i : Player)
		{
			if(oyuncuData[i][oYarisID] == oyuncuData[playerid][oYarisID] && oyuncuData[playerid][oYarisID] != -1)
			{
				SunucuMesaji(i, "Yarýþ sahibi tarafýndan yarýþ baþlatýldý. 30 saniye içinde baþlayacak.");
				SunucuMesaji(i, "15 saniye kalana kadar yerlerinize geçin, dondurulacaksýnýz.");
			}
		}
		oyuncuData[playerid][oYarisKalanSure] = 30;
		oyuncuData[playerid][oYarisTimer] = SetTimerEx("RaceStarting", 1000, true, "d", playerid);
		return 1;
	}

	function RaceStarting(playerid)
	{
		oyuncuData[playerid][oYarisKalanSure]--;
		new raceinfostring[64];
		if(oyuncuData[playerid][oYarisKalanSure] == 0)
		{
			format(raceinfostring, sizeof raceinfostring, "BASLA!");
		}
		else
		{
			format(raceinfostring, sizeof raceinfostring, "%d sn", oyuncuData[playerid][oYarisKalanSure]);
		}
		foreach(new i : Player)
		{
			if(oyuncuData[i][oYarisID] == oyuncuData[playerid][oYarisID] && oyuncuData[playerid][oYarisID] != -1)
			{
				GameTextForPlayer(i, raceinfostring, 1000, 3);
			}
		}
		if(oyuncuData[playerid][oYarisKalanSure] == 15)
		{
			foreach(new i : Player)
			{
				if(oyuncuData[i][oYarisID] == oyuncuData[playerid][oYarisID] && oyuncuData[playerid][oYarisID] != -1)
				{
					TogglePlayerControllable(i, false);
				}
			}	
		}
		if(oyuncuData[playerid][oYarisKalanSure] == 0)
		{
			foreach(new i : Player)
			{
				if(oyuncuData[i][oYarisID] == oyuncuData[playerid][oYarisID] && oyuncuData[playerid][oYarisID] != -1)
				{
					TogglePlayerControllable(i, true);
				}
			}	
			new query[200];
			mysql_format(g_SQL, query, sizeof query, "SELECT * FROM race_cp WHERE race_id = '%d' order by cp_id asc LIMIT 1", oyuncuData[playerid][oYarisID]);
			mysql_tquery(g_SQL, query, "CarRaceStarted", "d", playerid); 
			KillTimer(oyuncuData[playerid][oYarisTimer]);
		}
	}

	function CarRaceStarted(playerid)
	{
		new Float:cpx, Float:cpy, Float:cpz, cpid;
		cache_get_value_name_int(0, "cp_id", cpid);
		cache_get_value_name_float(0, "cp_x", cpx);
		cache_get_value_name_float(0, "cp_y", cpy);
		cache_get_value_name_float(0, "cp_z", cpz);
		new joiner = 0;
		foreach(new i : Player)
		{
			if(oyuncuData[i][oYarisID] == oyuncuData[playerid][oYarisID] && oyuncuData[i][oYarisID] != -1)
			{
				SetPVarInt(i, "BirYarista", 1);
				SetPlayerCheckpoint(i, cpx, cpy, cpz, 13.0);
				new query[200];
				mysql_format(g_SQL, query, sizeof(query), "DELETE FROM race_cp WHERE cp_id = '%d'", cpid);
				mysql_tquery(g_SQL, query);
				oyuncuData[i][oYarisCP] = cpid;
				joiner++;
				SunucuMesaji(i, "Yarýþ baþladý, checkpointleri takip et!");
				oyuncuData[i][oYarisSiralama] = 1;
				PlayerTextDrawShow(i, yaristd_0[i]);
			}
		}
		foreach(new i : Player)
		{
			if(oyuncuData[i][oYarisID] == oyuncuData[playerid][oYarisID])
			{
				oyuncuData[i][oYarisKatilimci] = joiner;
			}
		}
	}

	CMD:pdaraccek(playerid, params[])
	{
		if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS) return hataMesaji(playerid, "Polis memuru deðilsin.");
		if(oyuncuData[playerid][oDonduruldu] > 0) return hataMesaji(playerid, "Bu komut þu anda kullanýlamaz.");
		if(oyuncuData[playerid][oKelepceli] == 1) return hataMesaji(playerid, "Kelepçeliyken bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oHapisSure][0] > 0) return hataMesaji(playerid, "Hapisteyken bu komutu kullanamazsýn.");
		if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
		if(!IsPlayerInRangeOfPoint(playerid, 6.0, 1607.0167,-1619.2963,13.9421)) return hataMesaji(playerid, "Araç çekim bölgesine yakýn deðilsin.");
		new aracid, Float:vpos[3];
		if(sscanf(params, "d", aracid)) return kullanimMesaji(playerid, "/pdaraccek [araç id]");
		if(aracbirlikturbul(aracid) == BIRLIK_POLIS || aracbirlikturbul(aracid) == BIRLIK_MEDIKAL) return hataMesaji(playerid, "Devlet araçlarý çekilemez.");
		GetVehiclePos(aracid, vpos[0], vpos[1], vpos[2]);
		if(!IsPlayerInRangeOfPoint(playerid, 8.0, vpos[0], vpos[1], vpos[2])) return hataMesaji(playerid, "Araca yakýn deðilsin."); 
		new query[200];
		mysql_format(g_SQL, query, sizeof(query), "INSERT INTO impounded_cars (car_sqlid) VALUES ('%d')", AracBilgi[aracid][aracID]);
		mysql_tquery(g_SQL, query, "OnVehicleImpounded", "dd", playerid, aracid);
		return 1;
	}

	function OnVehicleImpounded(playerid, aracid)
	{
			new model = GetVehicleModel(aracid);
			SunucuMesaji(playerid, "%s plakalý %s model araç çekim garajýna gönderildi.(%s)", AracBilgi[aracid][aracPlaka], AracModel(model), Tarih());
			Log_Kaydet("loglar/arac_cekim.txt", "[%s] %s adli polis memuru (%d|sql:%d)%s model %s plakali araci cekti.", Tarih(), OyuncuIsim(playerid), aracid, AracBilgi[aracid][aracID], AracModel(AracBilgi[aracid][aracModel]), AracBilgi[aracid][aracPlaka]);
			ASpawn(aracid);
			SetVehicleVirtualWorld(aracid, 23);
	}

	CMD:araccikar(playerid, params[])
	{
		new aracid;
		if(sscanf(params, "d", aracid)) return kullanimMesaji(playerid, "/araccikar [araç id]");
		if(!Arac_SahipKontrol(playerid, aracid)) return hataMesaji(playerid, "Aracýn sahibi deðilsin.");
		new query[200], rows, Cache:GetCache;
		mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM impounded_cars WHERE car_sqlid = '%d'", AracBilgi[aracid][aracID]);
		GetCache = mysql_query(g_SQL, query);
		cache_get_row_count(rows);
		if(!rows)
		{
			hataMesaji(playerid, "Bu araç çekilmiþ durumda deðil.");
		}
		else if(rows)
		{
			if(oyuncuData[playerid][oPara] >= 1000)
			{
				ParaEkle(playerid, -1000);
				if(IsValidVehicle(aracid))
				{
					SetVehicleVirtualWorld(aracid, 0);
				}
				new queryy[200];
				mysql_format(g_SQL, queryy, sizeof(queryy), "DELETE FROM impounded_cars WHERE car_sqlid = '%d'", AracBilgi[aracid][aracID]);
				mysql_tquery(g_SQL, queryy);
				SunucuMesaji(playerid, "Aracýnýzý çýkarttýnýz. Artýk araç fonksiyonlarýna eriþebilirsiniz.");
			}
			else
			{
				hataMesaji(playerid, "Aracý çýkartmak için yeterli paranýz yok.");
			}
		}
		cache_delete(GetCache);
		return 1;
	}

	CMD:ucuslisansi(playerid, params[])
	{
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1957.2371,-2183.6677,13.5469))
			return hataMesaji(playerid, "Uçuþ lisansý alma noktasýnda deðilsin.");

		if(oyuncuData[playerid][oUcusLisansi] == 1)
			return hataMesaji(playerid, "Zaten uçuþ lisansýna sahipsin.");
		if(oyuncuData[playerid][oVIP] > 0)
		{
		if(oyuncuData[playerid][oPara] < 30000 || oyuncuData[playerid][oSurusYetenek] < 6) return hataMesaji(playerid, "Uçuþ lisansý almak için %s'a ve 6 seviye sürüþ yeteneðine ihtiyacýn var.", NumaraFormati(30000));
		Dialog_Show(playerid, ucuslisansial, DIALOG_STYLE_MSGBOX, "Uçuþ Lisansý", "Uçuþ lisansý size $30.000'a mal olacaktýr.(VIP yarý fiyat)\nAlmak istediðinize emin misiniz?", "Onayla", "Ýptal");
		}
		else
		{
		if(oyuncuData[playerid][oPara] < 60000 || oyuncuData[playerid][oSurusYetenek] < 6) return hataMesaji(playerid, "Uçuþ lisansý almak için %s'a ve 6 seviye sürüþ yeteneðine ihtiyacýn var.", NumaraFormati(60000));
		Dialog_Show(playerid, ucuslisansial, DIALOG_STYLE_MSGBOX, "Uçuþ Lisansý", "Uçuþ lisansý size $60.000'a mal olacaktýr.\nAlmak istediðinize emin misiniz?", "Onayla", "Ýptal");
		}
		return 1;
	}

	Dialog:ucuslisansial(playerid, response, listitem, inputtext[])
	{
		if(response)
		{
			if(oyuncuData[playerid][oPara] < 60000 || oyuncuData[playerid][oSurusYetenek] < 6) return hataMesaji(playerid, "Uçuþ lisansý almak için %s'a ve 6 seviye sürüþ yeteneðine ihtiyacýn var.", NumaraFormati(60000));		
			if(oyuncuData[playerid][oUcusLisansi] == 1) return hataMesaji(playerid, "Zaten uçuþ lisansýna sahipsin.");
			oyuncuData[playerid][oUcusLisansi] = 1;
			ParaEkle(playerid, -60000); 
			OyuncuKaydet(playerid);
			SunucuMesaji(playerid, "%s karþýlýðýnda uçuþ lisansýný aldýnýz.", NumaraFormati(60000));
		}
		return 1;
	}

	CMD:ucakal(playerid, params[])
	{
		if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Araçtayken bu komutu kullanamazsýnýz.");
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, 1893.2236,-2244.0984,13.5469)) return hataMesaji(playerid, "Uçak satýn alma noktasýnda(havaalaný) deðilsiniz.");
		UcakGaleriGoster(playerid);
		return 1;
	}

	Dialog:ucaksatinal(playerid, response, listitem, inputtext[])
	{
		if(response)
		{
			new icerik[250];
			format(icerik, sizeof(icerik), "{FFFFFF}Uçak Modeli: {F5E600}%s{FFFFFF}\nFiyat: {23BD00}%s{FFFFFF}\nBu uçaðý satýn almak istiyor musunuz?{FFFFFF}", AracModel(ucakveri[listitem][0]), NumaraFormati(ucakveri[listitem][1]));
			Dialog_Show(playerid, ucakalonay, DIALOG_STYLE_MSGBOX, "{F5E600}Uçak Satýn Alma", icerik, "Evet","Hayýr");
			SetPVarInt(playerid, "UcakListItem", listitem);
		}
		return 1;
	}

	Dialog:ucakalonay(playerid, response, listitem, inputtext[])
	{
		if(response)
		{
			new ucaklist = GetPVarInt(playerid, "UcakListitem"),
			renk1 = random(125),
			renk2 = random(125),
			galeriarac = ucakveri[ucaklist][0],
			galeriaracfiyat = ucakveri[ucaklist][1];
			if(oyuncuData[playerid][oPara] < galeriaracfiyat) return hataMesaji(playerid, "Bu uçaðý alabilmek için yeterli miktarda paranýz bulunmuyor.");
			Arac_Yarat(oyuncuData[playerid][oID], galeriarac, 1923.4004,-2261.8364,13.5584,179.4807, renk1, renk2, galeriaracfiyat);

			ParaEkle(playerid, -galeriaracfiyat);
			SunucuMesaji(playerid, "%s model uçaðý %s fiyatýna satýn aldýn, uçaðýný havaalanýnda bulabilirsin.", AracModel(galeriarac), NumaraFormati(galeriaracfiyat));
			Log_Kaydet("loglar/satinalma.txt", "[%s] %s, %s model araci satin aldi. Odedigi Para: %s", Tarih(), OyuncuIsim(playerid), AracModel(galeriarac), NumaraFormati(galeriaracfiyat));
			new str[150];
			format(str, sizeof(str), "```[%s] %s, %s model araci satin aldi. Odedigi Para: %s```", Tarih(), OyuncuIsim(playerid), AracModel(galeriarac), NumaraFormati(galeriaracfiyat));
			DCC_SendChannelMessage(araclog, str);
			DeletePVar(playerid,"UcakListitem");
		}
		return 1;
	}

	CMD:ucaksistemesat(playerid, params[])
	{
		if(oyuncuData[playerid][oSatisYapiyor] == true) return hataMesaji(playerid, "Þu anda bir satýþ iþlemi gerçekleþtiriyorsunuz.");
		if(!IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu komutu kullanmak için uçakta olmalýsýn.");
		new aracid = GetPlayerVehicleID(playerid), devamet = 0, ucakindex;
		for(new i; i < sizeof(ucakveri); i++)
		{
			if(GetVehicleModel(aracid) == ucakveri[i][0])
			{
				devamet = 1;
				ucakindex = i;
			}
		}
		if(devamet == 0) return hataMesaji(playerid, "Burada yalnýzca uçak satabilirsiniz.");
		if(!Arac_SahipKontrol(playerid, aracid)) return hataMesaji(playerid, "Bu uçaðýn sahibi deðilsin.");
		if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1921.3539,-2245.3557,13.5469)) return hataMesaji(playerid, "Uçak satýþ noktasýnda deðilsin.");

		new string[210];
		new aracmodeli = GetVehicleModel(aracid);
		if(oyuncuData[playerid][oEkonomiPaketi] < 1)
		{
		format(string, sizeof string, "%s model uçaðýný %d dolar karþýlýðýnda sisteme satmak istiyor musun?", AracModel(aracmodeli), YuzdeHesapla(ucakveri[ucakindex][1], SERVER_YUZDE));
		}
		else
		{
		format(string, sizeof string, "%s model uçaðýný %d dolar karþýlýðýnda sisteme satmak istiyor musun?", AracModel(aracmodeli), YuzdeHesapla(ucakveri[ucakindex][1], VIP_YUZDE));
		}
		Dialog_Show(playerid, ucaksistemesat, DIALOG_STYLE_MSGBOX, "> Uçaðý Sisteme Sat", string, "Evet", "Ýptal");
		return 1;
	}	

	Dialog:ucaksistemesat(playerid, response, listitem, inputtext[])
	{
		if(response)
		{
			if(oyuncuData[playerid][oSatisYapiyor] == true) return hataMesaji(playerid, "Þu anda bir satýþ iþlemi gerçekleþtiriyorsunuz.");
			if(!IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bir uçakta deðilsin.");
			new aracid = GetPlayerVehicleID(playerid), devamet = 0, alacagipara, aracmodeli = GetVehicleModel(aracid);
			for(new i; i < sizeof(ucakveri); i++)
			{
				if(GetVehicleModel(aracid) == ucakveri[i][0])
				{
					devamet = 1;
					if(oyuncuData[playerid][oEkonomiPaketi] < 1)
					{
					alacagipara = YuzdeHesapla(ucakveri[i][1], SERVER_YUZDE);
					}
					else
					{
					alacagipara = YuzdeHesapla(ucakveri[i][1], VIP_YUZDE);
					}
				}
			}
			if(devamet == 0) return hataMesaji(playerid, "Burada yalnýzca uçak satabilirsiniz.");
			if(!Arac_SahipKontrol(playerid, aracid)) return hataMesaji(playerid, "Bu uçaðýn sahibi deðilsin.");
			Arac_Sil(Arac_IDBul(aracid));
			ParaEkle(playerid, alacagipara);
			SunucuMesaji(playerid, "%s model uçaðýný %s karþýlýðýnda sisteme sattýn.", AracModel(aracmodeli), NumaraFormati(alacagipara));
		}
		return 1;
	}

	CMD:teknesistemesat(playerid, params[])
	{
		if(oyuncuData[playerid][oSatisYapiyor] == true) return hataMesaji(playerid, "Þu anda bir satýþ iþlemi gerçekleþtiriyorsunuz.");
		if(!IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu komutu kullanmak için teknede olmalýsýn.");
		new aracid = GetPlayerVehicleID(playerid), devamet = 0, tekneindex;
		for(new i; i < sizeof(tekneveri); i++)
		{
			if(GetVehicleModel(aracid) == tekneveri[i][0])
			{
				devamet = 1;
				tekneindex = i;
			}
		}
		if(devamet == 0) return hataMesaji(playerid, "Burada yalnýzca tekne satabilirsiniz.");
		if(!Arac_SahipKontrol(playerid, aracid)) return hataMesaji(playerid, "Bu teknenin sahibi deðilsin.");
		if(!IsPlayerInRangeOfPoint(playerid, 7.0, 198.6781,-2058.0906,1.4524)) return hataMesaji(playerid, "Tekne satýþ noktasýnda deðilsin.");

		new string[210];
		new aracmodeli = GetVehicleModel(aracid);
		if(oyuncuData[playerid][oEkonomiPaketi] < 1)
		{
		format(string, sizeof string, "%s model tekneyi %d dolar karþýlýðýnda sisteme satmak istiyor musun?", AracModel(aracmodeli), YuzdeHesapla(tekneveri[tekneindex][1], SERVER_YUZDE));
		}
		else
		{
		format(string, sizeof string, "%s model tekneyi %d dolar karþýlýðýnda sisteme satmak istiyor musun?", AracModel(aracmodeli), YuzdeHesapla(tekneveri[tekneindex][1], VIP_YUZDE));	
		}
		Dialog_Show(playerid, teknesistemesat, DIALOG_STYLE_MSGBOX, "> Tekneyi Sisteme Sat", string, "Evet", "Ýptal");
		return 1;
	}	

	Dialog:teknesistemesat(playerid, response, listitem, inputtext[])
	{
		if(response)
		{
			if(oyuncuData[playerid][oSatisYapiyor] == true) return hataMesaji(playerid, "Þu anda bir satýþ iþlemi gerçekleþtiriyorsunuz.");
			if(!IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bir teknede deðilsin.");
			new aracid = GetPlayerVehicleID(playerid), devamet = 0, alacagipara, aracmodeli = GetVehicleModel(aracid);
			for(new i; i < sizeof(tekneveri); i++)
			{
				if(GetVehicleModel(aracid) == tekneveri[i][0])
				{
					devamet = 1;
					if(oyuncuData[playerid][oEkonomiPaketi] < 1)
					{
					alacagipara = YuzdeHesapla(tekneveri[i][1], SERVER_YUZDE);
					}
					else
					{
					alacagipara = YuzdeHesapla(tekneveri[i][1], VIP_YUZDE);
					}
				}
			}
			if(devamet == 0) return hataMesaji(playerid, "Burada yalnýzca tekne satabilirsiniz.");
			if(!Arac_SahipKontrol(playerid, aracid)) return hataMesaji(playerid, "Bu teknenin sahibi deðilsin.");
			Arac_Sil(Arac_IDBul(aracid));
			ParaEkle(playerid, alacagipara);
			SunucuMesaji(playerid, "%s model tekneyi %s karþýlýðýnda sisteme sattýn.", AracModel(aracmodeli), NumaraFormati(alacagipara));
			SetPlayerPos(playerid, 227.6558,-2069.0732,2.1850);
		}
		return 1;
	}

forward HorseStartTimer();

public HorseStartTimer()
{
	if (HorseCD > 0)
	{
	new string[128];
	format(string, sizeof(string), "%d",HorseCD);
	if (Horsemsg == 1)
	{
	Horsemsg = 0;
	}
	TextDrawColor(CDTextDraw,0xff0000ff);
	TextDrawSetString(CDTextDraw, string);
	HorseCD -= 1;
	SetTimer("HorseStartTimer", 2000, 0);
	foreach(new i : Player)
	{
		PlayerPlaySound(i, 3200, 822.3584,4.0746,1004.1797);
	}
	}
	else
	{
	TextDrawColor(CDTextDraw,0x00ff00ff);
	TextDrawSetString(CDTextDraw, "BASLA!");
	Horsemsg = 1;
	foreach(new i : Player)
	{
		PlayerPlaySound(i, 3201, 822.3584,4.0746,1004.1797);
	}
	SetTimer("HorseAnimTimer", 100, 0);
	}
	foreach(new i : Player)
	{
		if(IsPlayerInRangeOfPoint(i, 15.0, 822.3584,4.0746,1004.1797))
		{
			TextDrawShowForPlayer(i, CDTextDraw);
		}
	}
	SetTimer("HorseStartHideTimer", 1000, 0);
	return 1;
}

CMD:atyarisiayril(playerid, params[])
{
	if (Watching[playerid] == 1)
	{
 		TogglePlayerControllable(playerid, 1);
	    TextDrawHideForPlayer(playerid,BG2);
	    TextDrawHideForPlayer(playerid,BG1);
	    TextDrawHideForPlayer(playerid,Start2);
	    TextDrawHideForPlayer(playerid,Finish2);
		TextDrawHideForPlayer(playerid, Horse1);
	    TextDrawHideForPlayer(playerid,Horse2);
	    TextDrawHideForPlayer(playerid,Horse3);
	    TextDrawHideForPlayer(playerid,Horse4);
	    TextDrawHideForPlayer(playerid,HorseNum1);
	    TextDrawHideForPlayer(playerid,HorseNum2);
	    TextDrawHideForPlayer(playerid,HorseNum3);
	    TextDrawHideForPlayer(playerid,HorseNum4);
	    TextDrawHideForPlayer(playerid,Start);
	    TextDrawHideForPlayer(playerid,Finish);
		Watching[playerid] = 0;
	    SunucuMesaji(playerid, "At yarýþýný izlemeyi býraktýnýz.");
	}
	else return hataMesaji(playerid, "At yarýþýný izlemiyorsunuz.");
	return 1;
}

CMD:atyarisiizle(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 15.0, 822.3584,4.0746,1004.1797)) return hataMesaji(playerid, "At yarýþýný izlemek için ganyan bayide olmalýsýnýz.");
	if (Prepared == 1 || RaceStarted == 1)
	{
	    TogglePlayerControllable(playerid, 0);
	    TextDrawShowForPlayer(playerid,BG2);
	    TextDrawShowForPlayer(playerid,BG1);
	    TextDrawShowForPlayer(playerid,Start2);
	    TextDrawShowForPlayer(playerid,Finish2);
		TextDrawShowForPlayer(playerid, Horse1);
	    TextDrawShowForPlayer(playerid,Horse2);
	    TextDrawShowForPlayer(playerid,Horse3);
	    TextDrawShowForPlayer(playerid,Horse4);
	    TextDrawShowForPlayer(playerid,HorseNum1);
	    TextDrawShowForPlayer(playerid,HorseNum2);
	    TextDrawShowForPlayer(playerid,HorseNum3);
	    TextDrawShowForPlayer(playerid,HorseNum4);
	    TextDrawShowForPlayer(playerid,Start);
	    TextDrawShowForPlayer(playerid,Finish);
	    Watching[playerid] = 1;
	    SunucuMesaji(playerid, "At yarýþýný izliyorsunuz!");
  	}
  	else
  	{
	  SunucuMesaji(playerid, "At yarýþý henüz baþlamadý. /atyarisibahis komutuyla bahis oynayabilirsiniz.");
  	}
	return 1;
}

CMD:bahislerim(playerid, params[])
{
	if (MoneyBet[playerid] > 0 && BetOnHorse[playerid] > 0)
	{
		SunucuMesaji(playerid, "$%d miktarýnda bahsi %d numaralý ata oynamýþsýnýz.",MoneyBet[playerid],BetOnHorse[playerid]);
	}
	return 1;
}

CMD:atyarisibahis(playerid, params[])
{
		if(!IsPlayerInRangeOfPoint(playerid, 15.0, 822.3584,4.0746,1004.1797)) return hataMesaji(playerid, "Bahis oynamak için ganyan bayiliðinde olmalýsýn.");
        new horse, cash;        
        if(oyuncuData[playerid][oVIP] < 1)
        {
            if(!sscanf(params,"ii",horse, cash) && horse < 5 && horse > 0 && cash <= CashHigherBounds && cash >= CashLowerBounds)
            {
	                if (oyuncuData[playerid][oPara] >= cash)
	                {
	                    if (RaceStarted == 1)
	                    {
	                    	hataMesaji(playerid, "Yarýþ zaten baþlamýþ. Yarýþ sona erene kadar bahis oynayamazsýn.");
	                    }
		                    else
		                    {
							if (MoneyBet[playerid] > 0)
							{
								hataMesaji(playerid, "Zaten bahis oynamýþsýn. /bahislerim komutuyla bahislerini görebilirsin.");
							}
							else
							{
								MoneyBet[playerid] = cash;
								ParaEkle(playerid, -cash);
								BetOnHorse[playerid] = horse;
								SunucuMesaji(playerid, "$%d miktarýnda %d numaralý ata bahis oynadýn. Yarýþýn bitmesini bekle.",MoneyBet[playerid],BetOnHorse[playerid]);
							}
						}
					}
					else
					{
					    hataMesaji(playerid, "Bu kadar paranýz yok.");
					    new Float:X, Float:Y, Float:Z;
					    GetPlayerPos(playerid, X, Y, Z);
					    PlayerPlaySound(playerid, 5405, X, Y, Z);
					}
     		}
       		else
			{
				SunucuMesaji(playerid, "Kullaným: /atyarisibahis [at numarasý(1-4)] [miktar(%d-%d]",CashLowerBounds,CashHigherBounds);
			}
		}
		else
		{
			if(!sscanf(params,"ii",horse, cash) && horse < 5 && horse > 0 && cash <= CashHigherBounds + 1500 && cash >= CashLowerBounds)
            {
	                if (oyuncuData[playerid][oPara] >= cash)
	                {
	                    if (RaceStarted == 1)
	                    {
	                    	hataMesaji(playerid, "Yarýþ zaten baþlamýþ. Yarýþ sona erene kadar bahis oynayamazsýn.");
	                    }
		                    else
		                    {
							if (MoneyBet[playerid] > 0)
							{
								hataMesaji(playerid, "Zaten bahis oynamýþsýn. /bahislerim komutuyla bahislerini görebilirsin.");
							}
							else
							{
								MoneyBet[playerid] = cash;
								ParaEkle(playerid, -cash);
								BetOnHorse[playerid] = horse;
								SunucuMesaji(playerid, "$%d miktarýnda %d numaralý ata bahis oynadýn. Yarýþýn bitmesini bekle.",MoneyBet[playerid],BetOnHorse[playerid]);
							}
						}
					}
					else
					{
					    hataMesaji(playerid, "Bu kadar paranýz yok.");
					    new Float:X, Float:Y, Float:Z;
					    GetPlayerPos(playerid, X, Y, Z);
					    PlayerPlaySound(playerid, 5405, X, Y, Z);
					}
     		}
       		else
			{
				SunucuMesaji(playerid, "Kullaným: /atyarisibahis [at numarasý(1-4)] [miktar(%d-%d]",CashLowerBounds,CashHigherBounds+1500);
			}
		}
		return 1;
}

forward HorseAnimTimer();

public HorseAnimTimer()
{
	new string[12], HorseWon;
 	format(string, sizeof(string), "LD_OTB:hrs%i", HorseAnimCount);
 	HorseAnimCount++;
 	if (HorseAnimCount == 9) HorseAnimCount = 1;

  	HorsePosX1 = HorsePosX1 + (random(600) / 100);
  	HorsePosX2 = HorsePosX2 + (random(600) / 100);
  	HorsePosX3 = HorsePosX3 + (random(600) / 100);
  	HorsePosX4 = HorsePosX4 + (random(600) / 100);

  	TextDrawDestroy(Horse1);
  	TextDrawDestroy(Horse2);
  	TextDrawDestroy(Horse3);
  	TextDrawDestroy(Horse4);
  	TextDrawDestroy(HorseNum1);
  	TextDrawDestroy(HorseNum2);
  	TextDrawDestroy(HorseNum3);
  	TextDrawDestroy(HorseNum4);


    Horse1 = TextDrawCreate(HorsePosX1, 200, string); 
    HorseInfo(Horse1);
    Horse2 = TextDrawCreate(HorsePosX2, 250, string); 
    HorseInfo(Horse2);
    Horse3 = TextDrawCreate(HorsePosX3, 300, string); 
    HorseInfo(Horse3);
    Horse4 = TextDrawCreate(HorsePosX4, 350, string); 
    HorseInfo(Horse4);
    HorseNum1 = TextDrawCreate(HorsePosX1 + 15, 204, "LD_OTB2:Ric1"); 
    HorseNumInfo(HorseNum1);
    HorseNum2 = TextDrawCreate(HorsePosX2 + 15, 254, "LD_OTB2:Ric2"); 
    HorseNumInfo(HorseNum2);
    HorseNum3 = TextDrawCreate(HorsePosX3 + 15, 304, "LD_OTB2:Ric3"); 
    HorseNumInfo(HorseNum3);
    HorseNum4 = TextDrawCreate(HorsePosX4 + 15, 354, "LD_OTB2:Ric4"); 
    HorseNumInfo(HorseNum4);

	for(new i = 0; i < MAX_PLAYERS; i++)
	    {
	        if (Watching[i] == 1 && IsPlayerInRangeOfPoint(i, 15.0, 822.3584,4.0746,1004.1797))
	        {
	          	TextDrawShowForPlayer(i,Horse1);
			  	TextDrawShowForPlayer(i,Horse2);
			  	TextDrawShowForPlayer(i,Horse3);
			  	TextDrawShowForPlayer(i,Horse4);
			  	TextDrawShowForPlayer(i,HorseNum1);
			  	TextDrawShowForPlayer(i,HorseNum2);
			  	TextDrawShowForPlayer(i,HorseNum3);
			  	TextDrawShowForPlayer(i,HorseNum4);
	        }
	    }

	if (HorsePosX1 >= 560)
	{
	SendClientMessageToAll(RENK_SMS, "1 numaralý at kazandý!");
	HorseStop = 1;
	HorseWon = 1;
	}
	else if (HorsePosX2 >= 560)
	{
	SendClientMessageToAll(RENK_SMS, "2 numaralý at kazandý!");
	HorseStop = 1;
	HorseWon = 2;
	}
	else if (HorsePosX3 >= 560)
	{
	SendClientMessageToAll(RENK_SMS, "3 numaralý at kazandý!");
	HorseStop = 1;
	HorseWon = 3;
	}
	else if (HorsePosX4 >= 560)
	{
	SendClientMessageToAll(RENK_SMS, "4 numaralý at kazandý!");
	HorseStop = 1;
	HorseWon = 4;
	}
	if (HorseStop == 0)
	{
	SetTimer("HorseAnimTimer", 100, 0);
	}
	else
	{
	HorseStop = 1;
	RaceStarted = 0;
    TextDrawDestroy(BG2);
    TextDrawDestroy(BG1);
    TextDrawDestroy(Start2);
    TextDrawDestroy(Finish2);
    TextDrawDestroy(Horse1);
    TextDrawDestroy(Horse2);
    TextDrawDestroy(Horse3);
    TextDrawDestroy(Horse4);
    TextDrawDestroy(HorseNum1);
    TextDrawDestroy(HorseNum2);
    TextDrawDestroy(HorseNum3);
    TextDrawDestroy(HorseNum4);
    TextDrawDestroy(Start);
    TextDrawDestroy(Finish);
	for(new i = 0; i < MAX_PLAYERS; i++)
 	{
  		if (BetOnHorse[i] == HorseWon)
  		{
	        SCM_Ex(i, RENK_SMS, "Atýnýz yarýþý kazandý! Bahsinizin iki katýný kazandýnýz.");
			ParaEkle(i, MoneyBet[i] * 2);
		}
		else if (MoneyBet[i] != 0 && BetOnHorse[i] != HorseWon)
		{
  			SCM_Ex(i, RENK_KIRMIZI, "Üzgünüm, bu seferlik at yarýþýný tutturamadýn.");
		}
		if (Watching[i] == 1)
		{
			TogglePlayerControllable(i, 1);
			Watching[i] = 0;
		}
		MoneyBet[i] = 0;
		BetOnHorse[i] = 0;
	}
}
}

forward HorseStartHideTimer();

public HorseStartHideTimer()
{
	TextDrawHideForAll(CDTextDraw);
}

CMD:firmaaracsat(playerid, params[])
{
	if(oyuncuData[playerid][oGiris] == false) return hataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oDonduruldu] > 0) return hataMesaji(playerid, "Þu anda bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oHapisSure][0] > 0 || oyuncuData[playerid][oHapisSure][1] > 0) return hataMesaji(playerid, "Hapiste bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oYarali] == true) return hataMesaji(playerid, "Yaralýyken bu komutu kullanamazsýn.");
	if(oyuncuData[playerid][oFirma] == -1) return hataMesaji(playerid, "Herhangi bir firma bünyesinde çalýþmýyorsunuz.");
	if(FirmaInfo[oyuncuData[playerid][oFirma]][fAlan] != 3) return hataMesaji(playerid, "Firma türünüz Rent A Car firmasý deðil.");
	if(oyuncuData[playerid][oFirmarutbe] < 6) return hataMesaji(playerid, "Firma rütbeniz bu iþ için yeterli deðil.");
	static oyuncuid, ileti[128], bilgi[256];
	if(sscanf(params, "uS()[128]", oyuncuid, ileti))
	{
		kullanimMesaji(playerid, "/firmaaracsat [oyuncu id] [fiyat]");
		return 1;
	}
	if(!IsPlayerConnected(oyuncuid))
		return hataMesaji(playerid, "Girilen kiþi oyunda deðil.");

	if(!YakinlikKontrol(playerid, oyuncuid, 5.0))
		return hataMesaji(playerid, "Girilen oyuncuya yakýn deðilsin.");

	if(oyuncuid == playerid)
		return hataMesaji(playerid, "Kendine satamazsýn.");

	static fiyat, aracid = -1;

	if(!IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Bu komut sadece araçta kullanýlabilir.");

	//new aracsatilmadurumu = Arac_PlakaCeza(AracBilgi[GetPlayerVehicleID(playerid)][aracPlaka]);
	//if(aracsatilmadurumu != 0) return satilmaHatasi(playerid, aracsatilmadurumu);

	if(sscanf(ileti, "d", fiyat))
		return kullanimMesaji(playerid, "/firmaaracsat [oyuncu id] [fiyat]");

	if(fiyat < 1)
		return hataMesaji(playerid, "Fiyat en az $1 olmalýdýr.");

	new aracsiniri, aracsayisi = 0;
	switch(oyuncuData[oyuncuid][oVIP])
	{
		case 0: aracsiniri = 3;
		case 1: aracsiniri = 10;
	}
	for(new i = 0; i < MAKSIMUM_ARAC; i++) if(Arac_SahipKontrol(oyuncuid, i))
	{
		aracsayisi++;
	}
	if(aracsayisi >= aracsiniri) return hataMesaji(playerid, "Bu kiþi alabileceði araç sýnýrýna ulaþmýþ.");

	if(GetPVarInt(oyuncuid, "dialog") != -1)
		return hataMesaji(playerid, "Girilen oyuncuya þu anda satýþ önerisi verilemez, diyalogu kapatmasýný bekleyin.");

	if(IsPlayerInAnyVehicle(oyuncuid))
		return hataMesaji(playerid, "Aracý satabilmen için oyuncunun araçta olmamasý gerekiyor.");

	aracid = Arac_IDBul(GetPlayerVehicleID(playerid));

	if(AracBilgi[aracid][aracFirma] == oyuncuData[playerid][oFirma])
	{
		SetPVarInt(oyuncuid, "aracsatan", playerid);
		SetPVarInt(oyuncuid, "satilanarac", aracid);
		SetPVarInt(oyuncuid, "aracfiyat", fiyat);
		oyuncuData[playerid][oSatisYapiyor] = true;
		SunucuMesaji(playerid, "%s adlý kiþiye %s model aracý %s fiyatýna satma önerisinde bulundunuz.", OyuncuIsim(oyuncuid), AracModel(AracBilgi[aracid][aracModel]), NumaraFormati(fiyat));
		format(bilgi, sizeof(bilgi), "%s adlý oyuncu sana %s model aracý %s fiyatýna satmak istiyor.", OyuncuIsim(playerid), AracModel(AracBilgi[aracid][aracModel]), NumaraFormati(fiyat));
		DialogGoster(oyuncuid, DIALOG_FIRMAARACSAT, DIALOG_STYLE_MSGBOX, "> Araç Satýþý", bilgi, "Onayla", "Reddet");
	}
	else
	{
		return hataMesaji(playerid, "Bu araç sizin firmanýza ait deðil.");
	}
	return 1;
}

stock BubbleSort(a[], size)
{
	new tmp=0, bool:swapped;
	do
	{
		swapped = false;
		for(new i=1; i < size; i++) {
			if(a[i-1] > a[i]) {
				tmp = a[i];
				a[i] = a[i-1];
				a[i-1] = tmp;
				swapped = true;
			}
		}
	} while(swapped);
}

forward split(const strsrc[], strdest[][], delimiter);
public split(const strsrc[], strdest[][], delimiter)
{
	new i, li;
	new aNum;
	new len;
	while(i <= strlen(strsrc)){
	    if(strsrc[i]==delimiter || i==strlen(strsrc)){
	        len = strmid(strdest[aNum], strsrc, li, i, 128);
	        strdest[aNum][len] = 0;
	        li = i+1;
	        aNum++;
		}
		i++;
	}
	return 1;
}

CMD:meslekler(playerid, params[])
{
	Dialog_Show(playerid, mesleklergps, DIALOG_STYLE_LIST, "Meslek Noktalarý", "Trucker\nTaksicilik\nBalýkçýlýk", "Seç", "Ýptal");
}

Dialog:mesleklergps(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				SetPlayerCheckpoint(playerid, 2493.4778,-2470.6365,17.8828, 4.0);
				SunucuMesaji(playerid, "Trucker'ý iþaretledin.");
			}
			case 1:
			{
				SetPlayerCheckpoint(playerid, 1285.2260,-1542.1401,13.5124, 4.0);
				SunucuMesaji(playerid, "Vice Taxi'yi iþaretledin.");
			}
			case 2:
			{
				SetPlayerCheckpoint(playerid, 134.9573,-1947.9813,5.3269, 4.0);
				SunucuMesaji(playerid, "Balýkçý sahilini iþaretledin.");
			}
		}
	}
	return 1;
}

CMD:oyuncuyagonder(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 1) return YetkinizYok(playerid);
	new oyuncu, hedefid;
	if(sscanf(params, "dd", oyuncu, hedefid)) return kullanimMesaji(playerid, "/oyuncuyagonder [id] [hedef id]");

	if(!oyuncuData[oyuncu][oGiris])
		return hataMesaji(playerid, "Oyuncu giriþ yapmamýþ, komut üzerinde kullanýlamaz.");

	if(!oyuncuData[hedefid][oGiris])
		return hataMesaji(playerid, "Hedef giriþ yapmamýþ, gönderemezsiniz.");

	if(oyuncu == hedefid)
		return hataMesaji(playerid, "Oyuncuyu kendisine ýþýnlayamazsýn.");

	OyuncuyuOyuncuyaGonder(oyuncu, hedefid);
	SunucuMesaji(playerid, "%s adlý kiþiyi %s adlý kiþiye ýþýnladýn.", OyuncuIsim(oyuncu), OyuncuIsim(hedefid));
	SunucuMesaji(oyuncu, "%s adlý yetkili sizi %s'e ýþýnladý.", oyuncuData[playerid][oAdminNick], OyuncuIsim(hedefid));
	return 1;
}

forward StopChatting(playerid);
public StopChatting(playerid)
{
    ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
}

Dialog:smsekransecim(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				DialogGoster(playerid, DIALOG_MESAJ, DIALOG_STYLE_INPUT, "> SMS", "Mesaj yollamak numarayý aþaðýdaki alana girin;", "Ara", "Kapat");
			}
			case 1:
			{
				new string[1024], query[180], rows, Cache:GetSMS, gonderennumara, rehberdekiisim[32], mesaj[128];
				string[0] = 0;
				mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM smskayit WHERE gonderenoID = '%d' order by smsID desc LIMIT 10", oyuncuData[playerid][oID]);
				GetSMS = mysql_query(g_SQL, query);
				cache_get_row_count(rows);
				if(rows)
				{
					if(rows >= 10)
					{
						for(new i; i < 10; i++)
						{
							cache_get_value_name_int(i, "numara", gonderennumara);
							cache_get_value_name(i, "rehbergonderenad", rehberdekiisim);
							cache_get_value_name(i, "mesaj", mesaj);
							format(string, sizeof(string), "%sGönderdiðiniz: %s(%d) - SMS: %s\n", string, rehberdekiisim, gonderennumara, mesaj); 
						}
					}
					else
					{
						for(new i; i < rows; i++)
						{
							cache_get_value_name_int(i, "numara", gonderennumara);
							cache_get_value_name(i, "rehbergonderenad", rehberdekiisim);
							cache_get_value_name(i, "mesaj", mesaj);
							format(string, sizeof(string), "%sGönderdiðiniz: %s(%d) - SMS: %s\n", string, rehberdekiisim, gonderennumara, mesaj); 
						}
					}
					Dialog_Show(playerid, smsgecmisi, DIALOG_STYLE_MSGBOX, "> SMS Geçmiþi", string, "Çýkýþ", "");
				}
				else
				{
					hataMesaji(playerid, "SMS geçmiþiniz tamamen boþ.");
				}
				cache_delete(GetSMS);
			}
			case 2: 
			{
				new string[1024], query[180], rows, Cache:GetSMS, gonderennumara, rehberdekiisim[32], numaraint, mesaj[128];
				string[0] = 0;
				mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM smskayit WHERE alanoID = '%d' order by smsID desc", oyuncuData[playerid][oID]);
				GetSMS = mysql_query(g_SQL, query);
				cache_get_row_count(rows);
				if(rows)
				{
					if(rows >= 10)
					{
						for(new i; i < 10; i++)
						{
							cache_get_value_name_int(i, "gonderennumara", numaraint);
							cache_get_value_name_int(i, "numara", gonderennumara);
							cache_get_value_name(i, "rehberad", rehberdekiisim);
							cache_get_value_name(i, "mesaj", mesaj);
							format(string, sizeof(string), "%sGönderen: %s(%d) - SMS: %s\n", string, rehberdekiisim, numaraint, mesaj); 
						}
					}
					else
					{
						for(new i; i < rows; i++)
						{
							cache_get_value_name_int(i, "gonderennumara", numaraint);
							cache_get_value_name_int(i, "numara", gonderennumara);
							cache_get_value_name(i, "rehberad", rehberdekiisim);
							cache_get_value_name(i, "mesaj", mesaj);
							format(string, sizeof(string), "%sGönderen: %s(%d) - SMS: %s\n", string, rehberdekiisim, numaraint, mesaj); 
						}
					}
					Dialog_Show(playerid, smsgecmisi, DIALOG_STYLE_MSGBOX, "> SMS Geçmiþi", string, "Çýkýþ", "");
				}
				else
				{
					hataMesaji(playerid, "SMS geçmiþiniz tamamen boþ.");
				}
				cache_delete(GetSMS);
			}
		}
	}
	return 1;
}

Dialog:rehbersecim(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{	
				static num[144];
				format(num, sizeof(num), "ara %d", RehberBilgi[playerid][GetPVarInt(playerid, "rehbersecimi") + 1][rehbernumara]);
				cmd(playerid, 0, num);
			}
			case 1:
			{
				Dialog_Show(playerid, rehbersmsgonder, DIALOG_STYLE_INPUT, "> Mesaj", "Lütfen mesaj metnini girin;", "Gönder", "Kapat");
			}
		}
	}
	else if(!response)
	{
		DeletePVar(playerid, "rehbersecimi");
	}
	return 1;
}

Dialog:rehbersmsgonder(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		static num[180];
		format(num, sizeof(num), "sms %d %s", RehberBilgi[playerid][GetPVarInt(playerid, "rehbersecimi") + 1][rehbernumara], inputtext);
		cmd(playerid, 0, num);
	}
	else if(!response)
	{
		DeletePVar(playerid, "rehbersecimi");
	}
	return 1;
}

Dialog:evsistemesatonay(playerid, response, listitem, inputtext[])
{
	new id = Ev_Yakin(playerid);
	if(response)
	{
		if(oyuncuData[playerid][oSatisYapiyor] == true) return hataMesaji(playerid, "Þu anda bir satýþ iþlemi gerçekleþtiriyorsunuz.");
		if(Ev_SahipKontrol(playerid, id)) {
			if(oyuncuData[playerid][oEkonomiPaketi] < 1)
			{
			ParaEkle(playerid, YuzdeHesapla(EvBilgi[id][evFiyat], SERVER_YUZDE));
			SunucuMesaji(playerid, "Evini sisteme baþarýyla sattýn. (%s)", NumaraFormati(YuzdeHesapla(EvBilgi[id][evFiyat], SERVER_YUZDE)));
			}
			else
			{
			ParaEkle(playerid, YuzdeHesapla(EvBilgi[id][evFiyat], VIP_YUZDE));
			SunucuMesaji(playerid, "Evini sisteme baþarýyla sattýn. (%s)", NumaraFormati(YuzdeHesapla(EvBilgi[id][evFiyat], VIP_YUZDE)));	
			}
			EvBilgi[id][evSahip] = 0;
			EvBilgi[id][evDurum] = 1;
			EvBilgi[id][evSahipIsim][0] = 0;
			EvBilgi[id][evKiralik] = 0;
			EvBilgi[id][evKiraci] = 0;
			EvBilgi[id][evKiraUcret] = 1;

			new DB_Query[300];
			mysql_format(g_SQL, DB_Query, sizeof(DB_Query), "SELECT * FROM `furniture_data` WHERE `furniture_houseid` = '%d'", EvBilgi[id][evID]);
			mysql_tquery(g_SQL, DB_Query, "MobilyaTemizleEv", "d", id);
			EvEnvanterBosalt(id);
			Ev_Yenile(id);
			Ev_Kaydet(id);
			if(oyuncuData[playerid][oEkonomiPaketi] < 1)
			{
			Log_Kaydet("loglar/satmalog.txt", "[%s] %s adli kisi %d ID'li evini sisteme satti. Aldigi Para: %s", Tarih(), OyuncuIsim(playerid), id, NumaraFormati(YuzdeHesapla(EvBilgi[id][evFiyat], SERVER_YUZDE)));
			new str[150];
			format(str, sizeof(str), "```[%s] %s, %s model araci satin aldi. Odedigi Para: %s```", Tarih(), OyuncuIsim(playerid), id, NumaraFormati(YuzdeHesapla(EvBilgi[id][evFiyat], SERVER_YUZDE)));
			DCC_SendChannelMessage(araclog, str);
			}
			else
			{
			Log_Kaydet("loglar/satmalog.txt", "[%s] %s adli kisi %d ID'li evini sisteme satti. Aldigi Para: %s", Tarih(), OyuncuIsim(playerid), id, NumaraFormati(YuzdeHesapla(EvBilgi[id][evFiyat], VIP_YUZDE)));
			new str[150];
			format(str, sizeof(str), "```[%s] %s, %s model araci satin aldi. Odedigi Para: %s```", Tarih(), OyuncuIsim(playerid), id, NumaraFormati(YuzdeHesapla(EvBilgi[id][evFiyat], VIP_YUZDE)));
			DCC_SendChannelMessage(araclog, str);
			}
		}
		else return hataMesaji(playerid, "Bu evin sahibi deðilsin.");
	}
	else if(!response)
	{
		UyariMesaji(playerid, "Evinizi sisteme satmaktan vazgeçtiniz.");
	}
	return 1;
}

stock EvEnvanterBosalt(evid)
{
	for (new e = 0; e < MAX_ITEM; e ++) {
		EvEnvanterData[evid][i_tip][e] = 0;
		EvEnvanterData[evid][i_var][e] = 0;
		EvEnvanterData[evid][i_aktif][e] = false;
	}
	new query[144];
	mysql_format(g_SQL, query, sizeof(query), "DELETE FROM ev_envanter WHERE EvId = '%d'", EvBilgi[evid][evID]);
	mysql_query(g_SQL, query);
	return 1;
}

function MobilyaTemizleEv(evid){
	new rows, DB_Query[256];
	cache_get_row_count(rows);
	if(rows)
	{
		new objid, objeid;
		for(new i; i < rows; i++)
		{
			cache_get_value_name_int(i, "furniture_id", objid);
			cache_get_value_name_int(i, "furniture_objectid", objeid);

			DestroyDynamicObject(objeid);

			//mysql_format(g_SQL, DB_Query, sizeof(DB_Query), "DELETE FROM `textureler` WHERE `ObjeSQL` = '%d'", objid);
			//mysql_query(g_SQL, DB_Query);			
		}
		mysql_format(g_SQL, DB_Query, sizeof(DB_Query), "DELETE FROM `furniture_data` WHERE `furniture_houseid` = '%d'", EvBilgi[evid][evID]);
		mysql_query(g_SQL, DB_Query);
	}
	return 1;
}

function MobilyaTemizleIsyeri(isyeriid){
	new rows, DB_Query[256];
	cache_get_row_count(rows);
	if(rows)
	{
		new objid, objeid;
		for(new i; i < rows; i++)
		{
			cache_get_value_name_int(i, "furniture_id", objid);

			cache_get_value_name_int(i, "furniture_objectid", objeid);

			DestroyDynamicObject(objeid);

			//mysql_format(g_SQL, DB_Query, sizeof(DB_Query), "DELETE FROM `textureler` WHERE `ObjeSQL` = '%d'", objid);
			//mysql_query(g_SQL, DB_Query);
		}
		mysql_format(g_SQL, DB_Query, sizeof(DB_Query), "DELETE FROM `furniture_data` WHERE `furniture_bizid` = '%d'", IsyeriBilgi[isyeriid][isyeriID]);
		mysql_query(g_SQL, DB_Query);
	}
	return 1;
}

Dialog:aksesuarsatinalonay(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		oyuncakData[playerid][secilenslot[playerid]][ptModelID] = GetPVarInt(playerid, "secilenaksesuar");
		new model = oyuncakData[playerid][secilenslot[playerid]][ptModelID];
		if((model >= 19006 && model <= 19035) || (model >= 19138 && model <= 19140))
		{
			oyuncakData[playerid][secilenslot[playerid]][ptBone] = 2;
			oyuncakData[playerid][secilenslot[playerid]][ptPosX] = 0.9;
			oyuncakData[playerid][secilenslot[playerid]][ptPosY] = 0.0;
			oyuncakData[playerid][secilenslot[playerid]][ptPosZ] = 0.35;
			oyuncakData[playerid][secilenslot[playerid]][ptRotX] = 90.0;
			oyuncakData[playerid][secilenslot[playerid]][ptRotY] = 90.0;
			oyuncakData[playerid][secilenslot[playerid]][ptRotZ] = 0.0;
		}
		else if(model >= 18891 && model <= 18910)
		{
			oyuncakData[playerid][secilenslot[playerid]][ptBone] = 2;
			oyuncakData[playerid][secilenslot[playerid]][ptPosX] = 0.15;
			oyuncakData[playerid][secilenslot[playerid]][ptPosY] = 0.0;
			oyuncakData[playerid][secilenslot[playerid]][ptPosZ] = 0.0;
			oyuncakData[playerid][secilenslot[playerid]][ptRotX] = 90.0;
			oyuncakData[playerid][secilenslot[playerid]][ptRotY] = 180.0;
			oyuncakData[playerid][secilenslot[playerid]][ptRotZ] = 90.0;
		}
		else if(model >= 18926 && model <= 18935)
		{
			oyuncakData[playerid][secilenslot[playerid]][ptBone] = 2;
			oyuncakData[playerid][secilenslot[playerid]][ptPosX] = 0.1;
			oyuncakData[playerid][secilenslot[playerid]][ptPosY] = 0.0;
			oyuncakData[playerid][secilenslot[playerid]][ptPosZ] = 0.0;
			oyuncakData[playerid][secilenslot[playerid]][ptRotX] = 0.0;
			oyuncakData[playerid][secilenslot[playerid]][ptRotY] = 0.0;
			oyuncakData[playerid][secilenslot[playerid]][ptRotZ] = 0.0;
		}
		else if(model >= 18911 && model <= 18920)
		{
			oyuncakData[playerid][secilenslot[playerid]][ptBone] = 2;
			oyuncakData[playerid][secilenslot[playerid]][ptPosX] = 0.1;
			oyuncakData[playerid][secilenslot[playerid]][ptPosY] = 0.035;
			oyuncakData[playerid][secilenslot[playerid]][ptPosZ] = 0.0;
			oyuncakData[playerid][secilenslot[playerid]][ptRotX] = 90.0;
			oyuncakData[playerid][secilenslot[playerid]][ptRotY] = 180.0;
			oyuncakData[playerid][secilenslot[playerid]][ptRotZ] = 90.0;
		}
		else if(model == 19078 || model == 19078)
		{
			oyuncakData[playerid][secilenslot[playerid]][ptBone] = 16;
			oyuncakData[playerid][secilenslot[playerid]][ptPosX] = 0;
			oyuncakData[playerid][secilenslot[playerid]][ptPosY] = 0;
			oyuncakData[playerid][secilenslot[playerid]][ptPosZ] = 0;
			oyuncakData[playerid][secilenslot[playerid]][ptRotX] = 180.0;
			oyuncakData[playerid][secilenslot[playerid]][ptRotY] = 180.0;
			oyuncakData[playerid][secilenslot[playerid]][ptRotZ] = 0.0;
		}
		else if((model >= 18641 && model <= 18644) || (model >= 19080 && model <= 19084) || model == 18890)
		{
			oyuncakData[playerid][secilenslot[playerid]][ptBone] = 6;
			oyuncakData[playerid][secilenslot[playerid]][ptPosX] = 0.0;
			oyuncakData[playerid][secilenslot[playerid]][ptPosY] = 0.0;
			oyuncakData[playerid][secilenslot[playerid]][ptPosZ] = 0.0;
			oyuncakData[playerid][secilenslot[playerid]][ptRotX] = 0.0;
			oyuncakData[playerid][secilenslot[playerid]][ptRotY] = 0.0;
			oyuncakData[playerid][secilenslot[playerid]][ptRotZ] = 0.0;
		}
		else
		{
			oyuncakData[playerid][secilenslot[playerid]][ptBone] = 2;
			oyuncakData[playerid][secilenslot[playerid]][ptPosX] = 0.0;
			oyuncakData[playerid][secilenslot[playerid]][ptPosY] = 0.0;
			oyuncakData[playerid][secilenslot[playerid]][ptPosZ] = 0.0;
			oyuncakData[playerid][secilenslot[playerid]][ptRotX] = 0.0;
			oyuncakData[playerid][secilenslot[playerid]][ptRotY] = 0.0;
			oyuncakData[playerid][secilenslot[playerid]][ptRotZ] = 0.0;
		}
		if(model == 18656)
		{
			oyuncakData[playerid][secilenslot[playerid]][ptBone] = 6;

			oyuncakData[playerid][secilenslot[playerid]][ptPosX] = 0.429000;
			oyuncakData[playerid][secilenslot[playerid]][ptPosY] = -0.020999;
			oyuncakData[playerid][secilenslot[playerid]][ptPosZ] = 0.106999;

			oyuncakData[playerid][secilenslot[playerid]][ptRotX] = 99.399993;
			oyuncakData[playerid][secilenslot[playerid]][ptRotY] = 177.000030;
			oyuncakData[playerid][secilenslot[playerid]][ptRotZ] = 83.399963;

			oyuncakData[playerid][secilenslot[playerid]][ptScaleX] = 0.029999;
			oyuncakData[playerid][secilenslot[playerid]][ptScaleY] = 0.100000;
			oyuncakData[playerid][secilenslot[playerid]][ptScaleZ] = 0.029999;
		}
		else
		{
			oyuncakData[playerid][secilenslot[playerid]][ptScaleX] = 1.0;
			oyuncakData[playerid][secilenslot[playerid]][ptScaleY] = 1.0;
			oyuncakData[playerid][secilenslot[playerid]][ptScaleZ] = 1.0;
		}
		new szQuery[512];
		format(szQuery, sizeof(szQuery),"INSERT INTO `aksesuarlar` (Sahip) VALUES (%d)", oyuncuData[playerid][oID]);
		mysql_tquery(g_SQL, szQuery, "OyuncakIDCek", "d", playerid);
		BilgiText(playerid, "~b~~h~~h~~h~Aksesuar satin alindi", 2500);
		ParaEkle(playerid, -100);
		DeletePVar(playerid, "secilenaksesuar");
		AksesuarTimer[playerid] = SetTimerEx("AksesuarKaydet", 2000, false, "d", playerid);
	}
	else if(!response)
	{
		DeletePVar(playerid, "secilenaksesuar");
		UyariMesaji(playerid, "Aksesuar satýn almaktan vazgeçtiniz.");
	}
	return 1;
}

CMD:yaslariayarla(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 8) return YetkinizYok(playerid);
	new query[160], Cache:GetCache, rows, oidsi, dogumtarihi[12];
	mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM oyuncular WHERE oyuncuban = '0'");
	GetCache = mysql_query(g_SQL, query);
	cache_get_row_count(rows);
	for(new i; i < rows; i++)
	{
		cache_get_value_name(i, "dogumtarihi", dogumtarihi);
		cache_get_value_name_int(i, "ID", oidsi);
		strdel(dogumtarihi, 0, strlen(dogumtarihi)-4);
		mysql_format(g_SQL, query, sizeof(query), "UPDATE oyuncular SET karakteryas = '%d' WHERE ID = '%d'", 2020-strval(dogumtarihi), oidsi);
		mysql_tquery(g_SQL, query);
	}
	cache_delete(GetCache);
	return 1;
}

CMD:dovustarzi(playerid, params[])
{
	if(oyuncuData[playerid][oVIP] < 1) return hataMesaji(playerid, "Bu sistemden yalnýzca VIP oyuncular yararlanabilir.");
	new tarz;
	if(sscanf(params, "d", tarz)) return kullanimMesaji(playerid, "/dovustarzi [numara] - 1 > Boks | 2 > KungFu | 3 > Elbow");
	if(tarz < 1 || tarz > 3) return kullanimMesaji(playerid, "/dovustarzi [numara] - 1 > Boks | 2 > KungFu | 3 > Elbow");
	switch(tarz)
	{
		case 1:
		{
			SetPlayerFightingStyle (playerid, FIGHT_STYLE_BOXING);
			SunucuMesaji(playerid, "Dövüþ tarzýný boks olarak ayarladýn.");
		}
		case 2:
		{
			SetPlayerFightingStyle (playerid, FIGHT_STYLE_KUNGFU);
			SunucuMesaji(playerid, "Kungfu tarzýný boks olarak ayarladýn.");
		}
		case 3:
		{
			SetPlayerFightingStyle (playerid, FIGHT_STYLE_ELBOW);
			SunucuMesaji(playerid, "Elbow tarzýný boks olarak ayarladýn.");
		}
	}
	return 1;
}

CMD:malvarligicek(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 8) return YetkinizYok(playerid);

	new query[160], vquery[160], Cache:GetCache, rows, oid;
	mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM oyuncular WHERE oyuncuban = '0'");
	GetCache = mysql_query(g_SQL, query);
	cache_get_row_count(rows);
	for(new i; i < rows; i++)
	{
		cache_get_value_name_int(i, "ID", oid);
		mysql_format(g_SQL, vquery, sizeof(vquery), "SELECT * FROM araclar WHERE aracSahip = '%d'", oid);
		mysql_tquery(g_SQL, vquery, "MalVarlikCek1", "d", oid);
	}
	cache_delete(GetCache);
	return 1;
}

function MalVarlikCek1(oid)
{
	new query[160], rows, model, aracpara = 0, evfiyati, evpara = 0, isyerifiyati, isyeripara = 0, oyuncupara, oyuncubankapara, malvarlik;
	cache_get_row_count(rows);
	for(new i; i < rows; i++)
	{
		cache_get_value_name_int(i, "aracModel", model);
		for(new a = 0; a < sizeof(SatilikAraclar); a++)
		{
			if(model == SatilikAraclar[a][0]) aracpara += SatilikAraclar[a][1];
		}
	}
	new Cache:GetCache, drows;
	mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM evler WHERE evSahip = '%d'", oid);
	GetCache = mysql_query(g_SQL, query);
	cache_get_row_count(drows);
	for(new i; i < drows; i++)
	{
		cache_get_value_name_int(i, "evFiyat", evfiyati);
		evpara += evfiyati;
	}
	cache_delete(GetCache);
	new Cache:xGetCache, xrows;
	mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM isyerleri WHERE isyeriSahip = '%d'", oid);
	xGetCache = mysql_query(g_SQL, query);
	cache_get_row_count(xrows);
	for(new i; i < xrows; i++)
	{
		cache_get_value_name_int(i, "isyeriFiyat", isyerifiyati);
		isyeripara += isyerifiyati;
	}
	cache_delete(xGetCache);
	new Cache:yGetCache;
	mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM oyuncular WHERE ID = '%d'", oid);
	yGetCache = mysql_query(g_SQL, query);
	cache_get_value_name_int(0, "Para", oyuncupara);
	cache_get_value_name_int(0, "BankaPara", oyuncubankapara);
	cache_delete(yGetCache);
	malvarlik = aracpara+evpara+isyeripara+oyuncupara+oyuncubankapara;
	mysql_format(g_SQL, query, sizeof(query), "UPDATE oyuncular SET toplamvarlik = '%d' WHERE ID = '%d'", malvarlik, oid);
	mysql_query(g_SQL, query);
}

Dialog:bankahesapnodegisim(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(isnull(inputtext)) return Dialog_Show(playerid, bankahesapnodegisim, DIALOG_STYLE_INPUT, "Banka Hesap Numarasý", "Yeni banka hesap numaranýzý girin:", "Onayla", "Ýptal");
		if(strval(inputtext) < 100000 || strval(inputtext) > 999999) return Dialog_Show(playerid, bankahesapnodegisim, DIALOG_STYLE_INPUT, "Banka Hesap Numarasý", "6 haneli bir hesap numarasý girin.\nYeni banka hesap numaranýzý girin:", "Onayla", "Ýptal");
		SetPVarInt(playerid, "yenihesapno", strval(inputtext));
		new string[128];
		format(string, sizeof(string), "Þu anki hesap numaranýz: %d\nYeni hesap numaranýz %d olacak, onaylýyor musunuz?", oyuncuData[playerid][oHesapNumarasi], strval(inputtext));
		Dialog_Show(playerid, bankahesapnodegisimonay, DIALOG_STYLE_MSGBOX, "Hesap No Deðiþim Onay Kutucuðu", string, "Onayla", "Ýptal");
	}
	return 1;
}

Dialog:bankahesapnodegisimonay(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new query[256], Cache:GetCache, rows;
		mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM oyuncular WHERE HesapNumarasi = '%d'", GetPVarInt(playerid, "yenihesapno"));
		GetCache = mysql_query(g_SQL, query);
		cache_get_row_count(rows);
		if(rows)
		{
			hataMesaji(playerid, "Bu hesap numarasý zaten kullanýmda.");
			DeletePVar(playerid, "yenihesapno");
		}
		else if(!rows)
		{
			oyuncuData[playerid][oHesapNumarasi] = GetPVarInt(playerid, "yenihesapno");
			SunucuMesaji(playerid, "Banka hesap numaranýz %d olarak güncellendi.", GetPVarInt(playerid, "yenihesapno"));
			oyuncuData[playerid][oBankaHesapDegisimHakki]--;
			HesapKaydet(playerid);
			Log_Kaydet("loglar/vicemarket.txt", "[%s] %s banka hesap numarasý deðiþim hakký kullandý. Yeni no: %d", Tarih(), OyuncuIsim(playerid), GetPVarInt(playerid, "yenihesapno"));
		}
		cache_delete(GetCache);
		DeletePVar(playerid, "yenihesapno");
	}
	else if(!response)
	{
		DeletePVar(playerid, "yenihesapno");
	}
	return 1;
}

CMD:unluyap(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 8) return YetkinizYok(playerid);
	new oyuncuid;
	if(sscanf(params, "u", oyuncuid)) return kullanimMesaji(playerid, "/unluyap [id/isim]");
	new query[120];
	mysql_format(g_SQL, query, sizeof(query), "UPDATE oyuncular SET ikon = '%e' WHERE ID = '%d'", SQLTarih(), oyuncuData[oyuncuid][oID]);
	mysql_query(g_SQL, query);
	SunucuMesaji(playerid, "%s adlý kiþiyi ikon haline getirdin.", OyuncuIsim(oyuncuid));
	return 1;
}

CMD:evlendir(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 8) return YetkinizYok(playerid);
	new oyuncubir, oyuncuiki;
	if(sscanf(params, "uu", oyuncubir, oyuncuiki)) return kullanimMesaji(playerid, "/evlendir [ilk id] [ikinci id]");
	new query[140];
	mysql_format(g_SQL, query, sizeof(query), "UPDATE oyuncular SET vicedamutluluk = '%e' WHERE ID = '%d' OR ID = '%d'", SQLTarih(), oyuncuData[oyuncubir][oID], oyuncuData[oyuncuiki][oID]);
	mysql_query(g_SQL, query);
	SunucuMesaji(playerid, "%s ve %s isimli kiþileri evli hale getirdin.", OyuncuIsim(oyuncubir), OyuncuIsim(oyuncuiki));
	SunucuMesaji(oyuncubir, "%s ile evlendin.", OyuncuIsim(oyuncuiki));
	SunucuMesaji(oyuncuiki, "%s ile evlendin.", OyuncuIsim(oyuncubir));
	return 1;
}

CMD:cadirkur(playerid, params[])
{
	if(oyuncuData[playerid][oVIP] < 1) return hataMesaji(playerid, "Bu komuttan sadece VIP üyelikler yararlanabilir.");
	new obje = -3047;
	if(IsValidDynamicObject(CadirObjem[playerid])) return hataMesaji(playerid, "Zaten bir çadýr kurmuþsunuz, daha fazla kuramazsýnýz. (/cadirkaldir).");
	GetPlayerPos(playerid, oyuncuData[playerid][oPos][0], oyuncuData[playerid][oPos][1], oyuncuData[playerid][oPos][2]);
	CadirObjem[playerid] = CreateDynamicObject(obje, oyuncuData[playerid][oPos][0], oyuncuData[playerid][oPos][1], oyuncuData[playerid][oPos][2] - 1.0, 0.0, 0.0, 0.0 - 1.5);
	SunucuMesaji(playerid, "Bulunduðunuz bölgeye çadýr kurdunuz, kaldýrmak için (/cadirkaldir).");
	return 1;
}

CMD:cadirkaldir(playerid, params[])
{
	if(oyuncuData[playerid][oVIP] < 1) return hataMesaji(playerid, "Bu komuttan sadece VIP üyelikler yararlanabilir.");
	if(!IsValidDynamicObject(CadirObjem[playerid])) return hataMesaji(playerid, "Kurmuþ olduðunuz çadýr bulunamadý. Kurmak için (/cadirkur).");
	DestroyDynamicObject(CadirObjem[playerid]);
	SunucuMesaji(playerid, "Kurduðunuz çadýr kaldýrýldý, tekrar kurmak için (/cadirkur).");
	return 1;
}

CMD:vipuyeayarla(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 8) return YetkinizYok(playerid);
	new oyuncuid;
	if(sscanf(params, "u", oyuncuid)) return kullanimMesaji(playerid, "/vipuyeayarla [id]");
	if(oyuncuData[oyuncuid][oVIP] < 1)
	{
		oyuncuData[oyuncuid][oVIP] = 1;
		SunucuMesaji(playerid, "%s adlý kiþiyi VIP üye olarak ayarladýnýz.", OyuncuIsim(oyuncuid));
		UstYoneticiMesaji(RENK_SERVER, " %s(%s) adlý yetkili %s adlý kiþiye VIP verdi.", OyuncuIsim(playerid), oyuncuData[playerid][oAdminNick], OyuncuIsim(oyuncuid));
	}
	else
	{
		oyuncuData[oyuncuid][oVIP] = 0;
		SunucuMesaji(playerid, "%s adlý kiþinin VIP üyeliðini aldýnýz.", OyuncuIsim(oyuncuid));
		UstYoneticiMesaji(RENK_SERVER, "ÜST YÖNETÝCÝ >>{FFFFFF} %s(%s) adlý yetkili %s adlý kiþinin VIP üyelðini geri aldý.", OyuncuIsim(playerid), oyuncuData[playerid][oAdminNick], OyuncuIsim(oyuncuid));
	}
	HesapKaydet(oyuncuid);
	return 1;
}

Dialog:ucuncudilsecimi(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		oyuncuData[playerid][oUcuncuDil] = listitem;
		oyuncuData[playerid][oUcuncuDilHakki]--;
		OyuncuKaydet(playerid);
		HesapKaydet(playerid);
		SunucuMesaji(playerid, "Üçüncü dilini %s olarak seçtin.", inputtext);
		Log_Kaydet("loglar/vicemarket.txt", "[%s] %s üçüncü dil seçim hakkýný kullandý. Yeni dil: %s", Tarih(), OyuncuIsim(playerid), inputtext);
	}
	return 1;
}

CMD:aciftliksahipduzenle(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 9) return YetkinizYok(playerid);
	new oyuncuid, ciftlikid;
	if(sscanf(params, "dd", ciftlikid, oyuncuid)) return kullanimMesaji(playerid, "/aciftliksahipduzenle [çiftlik id] [oyuncu id]");
	CiftlikInfo[ciftlikid][cSahipID] = oyuncuData[oyuncuid][oID];
	format(CiftlikInfo[ciftlikid][cSahip], 64, "%s", oyuncuData[oyuncuid][oIsim]);
	Ciftlik_Kaydet(ciftlikid);
	SunucuMesaji(playerid, "%d ID'li çiftliðin sahibini %s yaptýnýz.(SQL: %d)", ciftlikid, OyuncuIsim(oyuncuid), CiftlikInfo[ciftlikid][cSahipID]);
	return 1;
}

Dialog:tamirkitikullan(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new sayfa = GetPVarInt(playerid, "sayfa");
		switch(listitem)
		{
			case 0:
			{
				new aracid = Arac_Yakin(playerid);
				if(IsPlayerInAnyVehicle(playerid)) return hataMesaji(playerid, "Aracýn yanýnda olmalýsýnýz.");
				if(GetEngineStatus(aracid) != 0) return hataMesaji(playerid, "Tamir edeceðiniz aracýn motoru kapalý olmalý.");
				if(GetPVarInt(playerid, "TamirKitiKullaniyor") == 1) return hataMesaji(playerid, "Þu anda kit kullanýyorsunuz.");
				TogglePlayerControllable(playerid, 0);
				tamirkititimer[playerid] = SetTimerEx("TamirKitiTimeri", 15 * 1000, false, "dd", playerid, aracid);
				SetPVarInt(playerid, "TamirKitiKullaniyor", 1);
				cmd(playerid, 1, "tamir kitini kullanarak aracýný tamir etmeye baþlar.");
				ItemSil(playerid, sayfa);
			}
			case 1:
			{
				ItemSil(playerid, sayfa);
				SunucuMesaji(playerid, "Tamir kiti baþarýyla yok edildi.");
			}
		}
	}
	return 1;
}

function TamirKitiTimeri(playerid, aracid)
{
	AracTamirEt(aracid);
	TogglePlayerControllable(playerid, 1);
	SunucuMesaji(playerid, "Araç baþarýyla tamir edildi.");
	SetPVarInt(playerid, "TamirKitiKullaniyor", 0);
	KillTimer(tamirkititimer[playerid]);
	return 1;	
}

CMD:traphouse(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 2189.7007,-1255.6732,1529.1060)) return hataMesaji(playerid, "Traphouse noktasýnda deðilsiniz.");
	ShowPlayerDialog(playerid, DIALOG_TRAPHOUSE, DIALOG_STYLE_LIST, "Uyusturucu","Marijuana Tohumu (300$)\nKokain Tohumu (350$)\nEritici Soda (200$)\nUyuþturucu Paketi (100$)" ,"Seç", "Iptal");
	return 1;
}

CMD:thoparlor(playerid, params[])
{
	if(oyuncuData[playerid][oTelefon] != 1 || oyuncuData[playerid][oTelefonNumarasi] == 0) return hataMesaji(playerid, "Telefonunuz yok.");
	if(oyuncuData[playerid][oTelefonHoparlor] == 1)
	{
		oyuncuData[playerid][oTelefonHoparlor] = 0;
		SunucuMesaji(playerid, "Telefon hoparlörü kapatýldý.");
	}
	else
	{
		oyuncuData[playerid][oTelefonHoparlor] = 1;
		SunucuMesaji(playerid, "Telefon hoparlörü aktif edildi.");
	}
	return 1;
}

CMD:sonreklamlar(playerid, params[])
{
	new Cache:Veri, query[160], rows, reklammetni[160], reklamsahibi[64];
	mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM reklamkayit order by reklamID desc");
	Veri = mysql_query(g_SQL, query);
	cache_get_row_count(rows);
	if(rows)
	{
		if(rows > 10)
		{
			for(new i; i < 10; i++)
			{
				cache_get_value_name(i, "reklammetin", reklammetni);
				cache_get_value_name(i, "reklamsahip", reklamsahibi);
				SCM_Ex(playerid, RENK_GRI, "%s", reklammetni);
				SCM_Ex(playerid, RENK_GRI, "Reklam Sahibi: %s", reklamsahibi);
				SendClientMessage(playerid, RENK_BEYAZ, "------------------------------------------------------------------------");
			}
		}
		else
		{
			for(new i; i < rows; i++)
			{
				cache_get_value_name(i, "reklammetin", reklammetni);
				cache_get_value_name(i, "reklamsahip", reklamsahibi);
				SCM_Ex(playerid, RENK_GRI, "%s", reklammetni);
				SCM_Ex(playerid, RENK_GRI, "Reklam Sahibi: %s", reklamsahibi);
				SendClientMessage(playerid, RENK_BEYAZ, "------------------------------------------------------------------------");
			}
		}
	}
	else hataMesaji(playerid, "Son zamanlarda verilmiþ reklam bulunamadý.");
	cache_delete(Veri);
	return 1;
}

function InfoTimer(playerid) {
	TextDrawHideForPlayer(playerid, TD_AD_HeadBox);
    TextDrawHideForPlayer(playerid, TD_AD_BoxThree);
    TextDrawHideForPlayer(playerid, TD_AD_Seller);
	PlayerTextDrawHide(playerid, TD_AD_Price[playerid]);
	PlayerTextDrawHide(playerid, TD_AD_CityZip[playerid]);
	PlayerTextDrawHide(playerid, TD_AD_Headline[playerid]);
	PlayerTextDrawHide(playerid, TD_AD_PriceValue[playerid]);
	PlayerTextDrawHide(playerid, TD_AD_TaxesValue[playerid]);
	PlayerTextDrawHide(playerid, TD_AD_Taxes[playerid]);
	PlayerTextDrawHide(playerid, TD_AD_SellerValue[playerid]);
	PlayerTextDrawHide(playerid, TD_AD_HousenumberStreet[playerid]);
	PlayerTextDrawHide(playerid, TD_Mid_Info[playerid]);
	SetPVarInt(playerid, "CurrentPickup", 0);
	return 1;
}

CMD:cptvicedurum(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 8) return YetkinizYok(playerid);
	if(CPTViceVIPOnay == false)
	{
		CPTViceVIPOnay = true;
		SunucuMesaji(playerid, "CPT.Vice VIP üyelerin eriþimine açýk hale getirildi.");
		YoneticiMesaji(RENK_ACIKKIRMIZI, "%s(%s), CPT.Vice aktörünü VIP üyelerin eriþimine açýk hale getirdi.", OyuncuIsim(playerid), oyuncuData[playerid][oAdminNick]);
	}
	else
	{
		CPTViceVIPOnay = false;
		SunucuMesaji(playerid, "CPT.Vice tüm oyuncularýn eriþimine açýk hale getirildi.");
		YoneticiMesaji(RENK_ACIKKIRMIZI, "%s(%s), CPT.Vice aktörünü tüm oyuncularýn eriþimine açýk hale getirdi.", OyuncuIsim(playerid), oyuncuData[playerid][oAdminNick]);
	}
	return 1;
}

CMD:iponaydurum(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 9) return YetkinizYok(playerid);
	if(IpOnayDurumu == true)
	{
		IpOnayDurumu = false;
		SunucuMesaji(playerid, "IP doðrulama onayý iptal edildi.");
		YoneticiMesaji(RENK_ACIKKIRMIZI, "%s(%s), IP doðrulama onayýný kapattý.", OyuncuIsim(playerid), oyuncuData[playerid][oAdminNick]);
	}
	else
	{
		IpOnayDurumu = true;
		SunucuMesaji(playerid, "IP doðrulama onayý aktif edildi.");
		YoneticiMesaji(RENK_ACIKKIRMIZI, "%s(%s), IP doðrulama onayýný aktif etti.", OyuncuIsim(playerid), oyuncuData[playerid][oAdminNick]);
	}
	return 1;
}

CMD:googleonaydurum(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 9) return YetkinizYok(playerid);
	if(GoogleOnayDurumu == true)
	{
		GoogleOnayDurumu = false;
		SunucuMesaji(playerid, "Google Authenticaton onayý iptal edildi.");
		YoneticiMesaji(RENK_ACIKKIRMIZI, "%s(%s), Google Authenticaton onayýný kapattý.", OyuncuIsim(playerid), oyuncuData[playerid][oAdminNick]);
	}
	else
	{
		GoogleOnayDurumu = true;
		SunucuMesaji(playerid, "Google Authenticaton onayý aktif edildi.");
		YoneticiMesaji(RENK_ACIKKIRMIZI, "%s(%s), Google Authenticaton onayýný aktif etti.", OyuncuIsim(playerid), oyuncuData[playerid][oAdminNick]);
	}
	return 1;
}

CMD:sunshinesatisdurum(playerid, params[])
{
	if(oyuncuData[playerid][oAdmin] < 9) return YetkinizYok(playerid);

	if(SunshineSatisDurumu == true)
	{
		SunshineSatisDurumu = false;
		SunucuMesaji(playerid, "Sunshine araç satýþlarý kapatýldý.");
		YoneticiMesaji(RENK_ACIKKIRMIZI, "%s(%s), Sunshine araç satýþlarýný kapattý.", OyuncuIsim(playerid), oyuncuData[playerid][oAdminNick]);
	}
	else
	{
		SunshineSatisDurumu = true;
		SunucuMesaji(playerid, "Sunshine araç satýþlarý aktif edildi.");
		YoneticiMesaji(RENK_ACIKKIRMIZI, "%s(%s), Sunshine araç satýþlarý aktif etti.", OyuncuIsim(playerid), oyuncuData[playerid][oAdminNick]);
	}
	return 1;
}

CMD:vergitest(playerid)
{
	if(oyuncuData[playerid][oAdmin] < 9) return YetkinizYok(playerid);
	new aracfiyati;
	foreach(new i : Araclar)
	{
		if(AracBilgi[i][aracMeslek] < 1 && AracBilgi[i][aracTur] != 1)
		{
			for(new a = 0; a < sizeof(SatilikAraclar); a++)
			{
				if(GetVehicleModel(i) == SatilikAraclar[a][0]) aracfiyati = SatilikAraclar[a][1];
			}
			new deger = aracfiyati / VERGI_BOLU;
			if(AracBilgi[i][aracVergi] < deger)
			{
				new vergi = VergiAlgoritma(i, "saatlik");
				AracBilgi[i][aracVergi] += vergi;
            //SCM_ExAll(RENK_ACIKKIRMIZI, "%d: %s (Toplam: %s)", i, NumaraFormati(vergi), NumaraFormati(AracBilgi[i][aracVergi]));
			}
		}
		if(AracBilgi[i][araccalintisure] > 0)
		{
			AracBilgi[i][araccalintisure]--;
		}
	}
	for(new i = 0; i < MAKSIMUM_EV; i++) if(EvBilgi[i][evSahip] > 0 && EvBilgi[i][evDurum] != 4)
	{
		if((EvBilgi[i][evFiyat] / EV_VERGI_BOLU) < 1)
		{ 
			EvBilgi[i][evVergi] += 1;
		}
		else
		{
			EvBilgi[i][evVergi] += EvBilgi[i][evFiyat] / EV_VERGI_BOLU; 
		}
		if(EvBilgi[i][evVergi] >= 10000)
		{
			EvBilgi[i][evDurum] = 4;
			Ev_Yenile(i);
		}
	}
	return 1;
}

CMD:vcoinver(playerid, params[]){
	if(oyuncuData[playerid][oAdmin] < 9) return YetkinizYok(playerid);
	new isim[34], miktar;
	if(sscanf(params, "s[34]d", isim, miktar)) return kullanimMesaji(playerid, "/vcoinver [isim] [miktar]");
	new oyuncuid = AktiflikKontrol(isim);
	if(IsPlayerConnected(oyuncuid))
	{
		oyuncuData[oyuncuid][oViceCoin] += miktar;
		HesapKaydet(oyuncuid);
		SunucuMesaji(playerid, "%s adlý kiþiye %d vCoin verdiniz.", isim, miktar);
	}
	else{
		new query[144], Cache:cache_Get, rows, forumidsi, cViceCoin;
		mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM oyuncular WHERE isim = '%e'", isim);
		cache_Get = mysql_query(g_SQL, query);
		cache_get_row_count(rows);
		if(!rows) return hataMesaji(playerid, "Oyuncu bulunamadý."), cache_delete(cache_Get);
		cache_get_value_name_int(0, "forumid", forumidsi);
		cache_delete(cache_Get);
		mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM hesaplar WHERE forumid = '%d'", forumidsi);
		cache_Get = mysql_query(g_SQL, query);
		cache_get_value_name_int(0, "ViceCoin", cViceCoin);
		cache_delete(cache_Get);
		new yenideger = cViceCoin + miktar;
		mysql_format(g_SQL, query, sizeof(query), "UPDATE hesaplar SET ViceCoin = '%d' WHERE forumid = '%d'", yenideger, forumidsi);
		mysql_query(g_SQL, query);
		SunucuMesaji(playerid, "%s adlý kiþiye %d vCoin verdiniz.", isim, miktar);
	}
	return 1;
}

CMD:bugkurtar(playerid, params[])
{
	if(GetPlayerVirtualWorld(playerid) == 0) return hataMesaji(playerid, "Ev/iþyeri/binada deðilsiniz. Komut kullanýlamaz.");
	if(oyuncuData[playerid][oHapisSure][1] > 0) return hataMesaji(playerid, "Hapiste bu komutu kullanamazsýnýz.");
	new id, gecerlilik = 0;
	if((id = Oyuncu_Isyerinde(playerid)) != -1)
	{
		SetPlayerPos(playerid, IsyeriBilgi[id][isyeriIcPos][0], IsyeriBilgi[id][isyeriIcPos][1], IsyeriBilgi[id][isyeriIcPos][2]); 
		SunucuMesaji(playerid, "Ýþyeri giriþine ýþýnlandýnýz. Kayýt tutuldu, suistimal durumunda ceza alabilirsiniz.");
		gecerlilik++;
	}
	else if((id = Oyuncu_Evde(playerid)) != -1)
	{
		SetPlayerPos(playerid, EvBilgi[id][evIcPos][0], EvBilgi[id][evIcPos][1], EvBilgi[id][evIcPos][2]); 
		SunucuMesaji(playerid, "Ev giriþine ýþýnlandýnýz. Kayýt tutuldu, suistimal durumunda ceza alabilirsiniz.");
		gecerlilik++;
	}
	else if((id = Oyuncu_Binada(playerid)) != -1) 
	{
		if(BinaBilgi[id][binaTur] == 3) return hataMesaji(playerid, "Polis binasýnda bu komut kullanýlamaz.");
		SetPlayerPos(playerid, BinaBilgi[id][bIPos][0], BinaBilgi[id][bIPos][1], BinaBilgi[id][bIPos][2]); 
		SunucuMesaji(playerid, "Bina giriþine ýþýnlandýnýz. Kayýt tutuldu, suistimal durumunda ceza alabilirsiniz.");
		gecerlilik++;
	}
	else hataMesaji(playerid, "Ev/iþyeri/binada deðilsiniz. Komut kullanýlamaz.");
	if(gecerlilik > 0) Log_Kaydet("loglar/bugkurtar.txt", "[%s] %s adli oyuncu /bugkurtar komutunu kullandi. Mekan gecerli ID: %d", Tarih(), OyuncuIsim(playerid), id);
	return 1;
}

CMD:mikrofonekle(playerid, params[]){
	if(oyuncuData[playerid][oAdmin] < 5) return YetkinizYok(playerid);
	new query[192], Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	mysql_format(g_SQL, query, sizeof(query), "INSERT INTO mikrofonlar (micX, micY, micZ, micVw, micInt) VALUES ('%.4f', '%.4f', '%.4f', '%d', '%d')", x, y, z, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
	mysql_tquery(g_SQL, query);
	SunucuMesaji(playerid, "Bulunduðunuz konuma mikrofon yerleþtirildi. /mikrofon ile kullanýlabilir. World: %d | Interior: %d", GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
	return 1;
}

CMD:mikrofonsil(playerid, params[]){
	if(oyuncuData[playerid][oAdmin] < 5) return YetkinizYok(playerid);
	new id;
	if(sscanf(params, "d", id)) return kullanimMesaji(playerid, "/mikrofonsil [id]");
	new query[128];
	mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM mikrofonlar WHERE micId = '%d'", id);
	mysql_tquery(g_SQL, query, "MikrofonSil", "dd", playerid, id);
	return 1;
}

function MikrofonSil(playerid, id){
	new rows;
	cache_get_row_count(rows);
	if(rows){
		new query[128];
		mysql_format(g_SQL, query, sizeof(query), "DELETE FROM mikrofonlar WHERE micId = '%d'", id);
		mysql_query(g_SQL, query);
		SunucuMesaji(playerid, "Mikrofon silindi. ID: %d", id);
	}
	else hataMesaji(playerid, "Mikrofon bulunamadý.");
	return 1;
}

function MikrofonGit(playerid, id){
	new rows;
	cache_get_row_count(rows);
	if(rows){
		new Float:micX, Float:micY, Float:micZ, micVw, micInt;
		cache_get_value_name_float(0, "micX", micX);
		cache_get_value_name_float(0, "micY", micY);
		cache_get_value_name_float(0, "micZ", micZ);
		cache_get_value_name_int(0, "micVw", micVw);
		cache_get_value_name_int(0, "micInt", micInt);
		SetPlayerPos(playerid, micX, micY, micZ);
		SetPlayerVirtualWorld(playerid, micVw);
		SetPlayerInterior(playerid, micInt);
		SunucuMesaji(playerid, "%d ID'li mikrofona ýþýnlandýn.", id);
	}
	else hataMesaji(playerid, "Mikrofon bulunamadý.");
	return 1;
}

CMD:mikrofon(playerid, params[]){
	new mesaj[128];
	if(sscanf(params, "s[128]", mesaj)) return kullanimMesaji(playerid, "/mikrofon [mesaj]");
	new query[192], interior, vw;
	vw = GetPlayerVirtualWorld(playerid);
	interior = GetPlayerInterior(playerid);
	mysql_format(g_SQL, query, sizeof(query), "SELECT * FROM mikrofonlar WHERE micInt = '%d' AND micVw = '%d'", interior, vw);
	mysql_tquery(g_SQL, query, "OnPlayerUseMicrophone", "ds", playerid, mesaj);
	return 1;
}

function OnPlayerUseMicrophone(playerid, mesaj[]){
	new rows;
	cache_get_row_count(rows);
	if(rows){
		new Float:micX, Float:micY, Float:micZ, available = 0;
		for(new i; i < rows; i++){
				cache_get_value_name_float(i, "micX", micX);
				cache_get_value_name_float(i, "micY", micY);
				cache_get_value_name_float(i, "micZ", micZ);
			if(IsPlayerInRangeOfPoint(playerid, 3.0, micX, micY, micZ)){
				available++;
				break;
			}
		}
		if(available > 0){
			OzelYakinMesaj(playerid, 30.0, RENK_PM, "[MÝKROFON] %s: %s", OyuncuIsim(playerid), mesaj);
		}
		else{
			hataMesaji(playerid , "Çevrenizde mikrofon bulunmuyor.");
		}
	}
	else{
		hataMesaji(playerid , "Çevrenizde mikrofon bulunmuyor.");
	}
	return 1;
}

CMD:kogusyarat(playerid, params[]){
	if(oyuncuData[playerid][oAdmin] < 6) return YetkinizYok(playerid);
	new model;
	if(sscanf(params, "d", model)) return kullanimMesaji(playerid, "/kogusyarat [model]");
	new id = Iter_Free(Koguslar);
	if(id < 0) return hataMesaji(playerid, "Koðuþ sýnýrýna ulaþýldý.");
	KogusYarat(playerid, id, model);
	return 1;
}

CMD:kogussil(playerid, params[]){	
	if(oyuncuData[playerid][oAdmin] < 6) return YetkinizYok(playerid);
	new id;
	if(sscanf(params, "d", id)) return kullanimMesaji(playerid, "/kogussil [id]");
	if(!Iter_Contains(Koguslar, id)) return hataMesaji(playerid, "Koðuþ bulunamadý.");
	KogusSil(id);
	SunucuMesaji(playerid, "Koðuþ %d, baþarýyla silindi.", id);
	return 1;
}

CMD:kogus(playerid){
	new id = KogusBul(playerid);
	if(id < 0) return hataMesaji(playerid, "Bir koðuþa yakýn deðilsin.");
	if(kogusData[id][kogusDurum] == true)
	{
		MoveDynamicObject(kogusData[id][kogusObje], kogusData[id][kogusKapaliPos][0], kogusData[id][kogusKapaliPos][1], kogusData[id][kogusKapaliPos][2], 5.0, kogusData[id][kogusKapaliPos][3], kogusData[id][kogusKapaliPos][4], kogusData[id][kogusKapaliPos][5]);
		kogusData[id][kogusDurum] = false;
	}
	else
	{
		MoveDynamicObject(kogusData[id][kogusObje], kogusData[id][kogusAcikPos][0], kogusData[id][kogusAcikPos][1], kogusData[id][kogusAcikPos][2], 5.0, kogusData[id][kogusAcikPos][3], kogusData[id][kogusAcikPos][4], kogusData[id][kogusAcikPos][5]);
		kogusData[id][kogusDurum] = true;
	}
	return 1;
}

CMD:koguslar(playerid, params[]){
	if(OyuncuBirlikTuru(playerid) != BIRLIK_POLIS && oyuncuData[playerid][oAdmin] < 1) return hataMesaji(playerid, "Yalnýzca polisler bu sistemden yararlanabilir.");
	new islem[16];
	if(sscanf(params, "s[16]", islem)) return kullanimMesaji(playerid, "/koguslar [ac/kapat]");
	if(strcmp(islem, "ac", true) == 0)
	{
		for(new id; id < MAX_KOGUS; id++){
			if(!Iter_Contains(Koguslar, id)) continue;
			if(kogusData[id][kogusDurum] == false)
			{
				MoveDynamicObject(kogusData[id][kogusObje], kogusData[id][kogusAcikPos][0], kogusData[id][kogusAcikPos][1], kogusData[id][kogusAcikPos][2], 5.0, kogusData[id][kogusAcikPos][3], kogusData[id][kogusAcikPos][4], kogusData[id][kogusAcikPos][5]);
				kogusData[id][kogusDurum] = true;
			}
		}
		BirlikMesaji(oyuncuData[playerid][oBirlik], RENK_APOLET, "%s tarafýndan tüm koðuþ kapýlarý açýldý.", OyuncuIsim(playerid));
	}
	else if(strcmp(islem, "kapat", true) == 0){
		for(new id; id < MAX_KOGUS; id++){
			if(!Iter_Contains(Koguslar, id)) continue;
			if(kogusData[id][kogusDurum] == true)
			{
				MoveDynamicObject(kogusData[id][kogusObje], kogusData[id][kogusKapaliPos][0], kogusData[id][kogusKapaliPos][1], kogusData[id][kogusKapaliPos][2], 5.0, kogusData[id][kogusKapaliPos][3], kogusData[id][kogusKapaliPos][4], kogusData[id][kogusKapaliPos][5]);
				kogusData[id][kogusDurum] = false;
			}
		}
		BirlikMesaji(oyuncuData[playerid][oBirlik], RENK_APOLET, "%s tarafýndan tüm koðuþ kapýlarý kapatýldý.", OyuncuIsim(playerid));
	}
	else hataMesaji(playerid, "Hatalý iþlem parametresi girdiniz.");
	return 1;
}

CMD:kogusduzenle(playerid, params[]){
	if(oyuncuData[playerid][oAdmin] < 6) return YetkinizYok(playerid);
	new islem[16], id;
	if(sscanf(params, "ds[16]", id, islem)) return kullanimMesaji(playerid, "/kogusduzenle [id] [acik/kapali]");
	if(!Iter_Contains(Koguslar, id)) return hataMesaji(playerid, "Geçersiz koðuþ ID.");
	if(strcmp(islem, "acik", true) == 0){
		KogusDuzenliyorum[playerid] = 1;
		SetPVarInt(playerid, "KogusID", id);
		EditDynamicObject(playerid, kogusData[id][kogusObje]);
	}
	else if(strcmp(islem, "kapali", true) == 0){
		KogusDuzenliyorum[playerid] = 2;
		SetPVarInt(playerid, "KogusID", id);
		EditDynamicObject(playerid, kogusData[id][kogusObje]);
	}
	else hataMesaji(playerid, "Hatalý iþlem parametresi girdiniz.");
	return 1;
}

stock KogusYarat(playerid, id, model){
	new query[256];
	kogusData[id][kogusDurum] = false;
 	kogusData[id][kogusUzaklik] = 3.0;
 	kogusData[id][kogusObjeModel] = model;
 	kogusData[id][kogusVw] = GetPlayerVirtualWorld(playerid); 
 	kogusData[id][kogusInt] = GetPlayerInterior(playerid);
 	GetPlayerPos(playerid, kogusData[id][kogusAcikPos][0], kogusData[id][kogusAcikPos][1], kogusData[id][kogusAcikPos][2]);
 	GetPlayerFacingAngle(playerid, kogusData[id][kogusAcikPos][5]); 
 	kogusData[id][kogusAcikPos][3]=0.0;
 	kogusData[id][kogusAcikPos][4]=0.0;
 	GetXYInFrontOfPlayer(playerid, kogusData[id][kogusAcikPos][0], kogusData[id][kogusAcikPos][1], 3.0);
 	for(new i;i<6;i++){kogusData[id][kogusKapaliPos][i] = kogusData[id][kogusAcikPos][i];}
 	kogusData[id][kogusObje] = CreateDynamicObject(kogusData[id][kogusObjeModel], kogusData[id][kogusKapaliPos][0],\
 		kogusData[id][kogusKapaliPos][1], kogusData[id][kogusKapaliPos][2], kogusData[id][kogusKapaliPos][3],\
 		kogusData[id][kogusKapaliPos][4], kogusData[id][kogusKapaliPos][5], kogusData[id][kogusVw], kogusData[id][kogusInt]);
 	mysql_format(g_SQL, query, sizeof(query),"INSERT INTO `koguslar` (`id`) VALUES ('%d')", id);
 	mysql_tquery(g_SQL, query); 
 	Iter_Add(Koguslar, id);
 	KogusKaydet(id);
 	SunucuMesaji(playerid, "Koðuþ yaratýldý. Koðuþ ID: %d", id);
	return 1;
}

stock KogusKaydet(id)
{
	new query[256], acpos[256], kapos[256];
	format(acpos, sizeof(acpos), "%.4f|%.4f|%.4f|%.4f|%.4f|%.4f", kogusData[id][kogusAcikPos][0], kogusData[id][kogusAcikPos][1], kogusData[id][kogusAcikPos][2], kogusData[id][kogusAcikPos][3], kogusData[id][kogusAcikPos][4], kogusData[id][kogusAcikPos][5]);
	format(kapos, sizeof(kapos), "%.4f|%.4f|%.4f|%.4f|%.4f|%.4f", kogusData[id][kogusKapaliPos][0], kogusData[id][kogusKapaliPos][1], kogusData[id][kogusKapaliPos][2], kogusData[id][kogusKapaliPos][3], kogusData[id][kogusKapaliPos][4], kogusData[id][kogusKapaliPos][5]);
	mysql_format(g_SQL, query, sizeof(query), "UPDATE `koguslar` SET `obje` = '%d' WHERE `id` = '%d' LIMIT 1", kogusData[id][kogusObjeModel], id);
	mysql_tquery(g_SQL, query);
	mysql_format(g_SQL, query, sizeof(query), "UPDATE `koguslar` SET `interior` = '%d',`vw` = '%d' WHERE `id` = '%d' LIMIT 1", kogusData[id][kogusInt], kogusData[id][kogusVw], id);
	mysql_tquery(g_SQL, query);
	mysql_format(g_SQL, query, sizeof(query), "UPDATE `koguslar` SET `acikpos` = '%s' WHERE `id` = '%d' LIMIT 1", acpos, id);
	mysql_tquery(g_SQL, query);
	mysql_format(g_SQL, query, sizeof(query), "UPDATE `koguslar` SET `kapalipos` = '%s' WHERE `id` = '%d' LIMIT 1", kapos, id);
	mysql_tquery(g_SQL, query);
	mysql_format(g_SQL, query, sizeof(query), "UPDATE `koguslar` SET `uzaklik` = '%.1f' WHERE `id` = '%d' LIMIT 1", kogusData[id][kogusUzaklik], id);
	mysql_tquery(g_SQL, query);
	return 1;
}

stock KogusSil(id)
{
	if(IsValidDynamicObject(kogusData[id][kogusObje])) DestroyDynamicObject(kogusData[id][kogusObje]); 
	kogusData[id][kogusObjeModel] = 0; 
	kogusData[id][kogusVw] = 0;
	kogusData[id][kogusObje] = INVALID_OBJECT_ID;
	kogusData[id][kogusUzaklik] = 0.0; 
	kogusData[id][kogusDurum] = false; 
	kogusData[id][kogusInt] = 0;
	for(new xd ; xd < 6 ; xd ++)
	{
		kogusData[id][kogusAcikPos][xd] = 0.0;
		kogusData[id][kogusKapaliPos][xd] = 0.0;
	}
	new query[128];
	mysql_format(g_SQL, query, sizeof(query), "DELETE FROM koguslar WHERE id = '%d'", id);
	mysql_query(g_SQL, query);
	Iter_Remove(Koguslar, id);
	return 1;
}

function KogusYukle()
{
	new rows;
	cache_get_row_count(rows);
	if(rows)
	{
		new id, cekilen, string[512];
		while(cekilen < rows)
		{
			cache_get_value_name_int(cekilen, "id", id);
			cache_get_value_name_int(cekilen, "obje", kogusData[id][kogusObjeModel]);
			cache_get_value_name_int(cekilen, "interior", kogusData[id][kogusInt]);
			cache_get_value_name_int(cekilen, "vw", kogusData[id][kogusVw]);
			cache_get_value_name_float(cekilen, "uzaklik", kogusData[id][kogusUzaklik]);
			cache_get_value_name(cekilen, "acikpos", string, sizeof(string));
			sscanf(string, "p<|>ffffff", kogusData[id][kogusAcikPos][0], kogusData[id][kogusAcikPos][1], kogusData[id][kogusAcikPos][2], kogusData[id][kogusAcikPos][3], kogusData[id][kogusAcikPos][4], kogusData[id][kogusAcikPos][5]);
			cache_get_value_name(cekilen, "kapalipos", string, sizeof(string));
			sscanf(string, "p<|>ffffff", kogusData[id][kogusKapaliPos][0], kogusData[id][kogusKapaliPos][1], kogusData[id][kogusKapaliPos][2], kogusData[id][kogusKapaliPos][3], kogusData[id][kogusKapaliPos][4], kogusData[id][kogusKapaliPos][5]);
			kogusData[id][kogusObje] = CreateDynamicObject(kogusData[id][kogusObjeModel], kogusData[id][kogusKapaliPos][0], kogusData[id][kogusKapaliPos][1], kogusData[id][kogusKapaliPos][2], kogusData[id][kogusKapaliPos][3], kogusData[id][kogusKapaliPos][4], kogusData[id][kogusKapaliPos][5], kogusData[id][kogusVw], kogusData[id][kogusInt]);
			kogusData[id][kogusDurum] = false;
			Iter_Add(Koguslar, id);
			cekilen++;
		}
	}
	new mesaj[256];
	if(rows < 1) format(mesaj, sizeof(mesaj), "[SUNUCU] Veritabanýnda sunucuya entegre edilecek koðuþ bulunamadý!");
	else if(rows > 0) format(mesaj, sizeof(mesaj), "[SUNUCU] %d adet koðuþ yüklendi.", rows);
	printf(mesaj);
	return 1;
}

stock KogusBul(playerid, bool:deger = false, Float:Yakinlik = 3.0)
{
	switch(deger)
	{
		case false:
		{
			foreach(new g: Koguslar)
			{
				if(IsPlayerInRangeOfPoint(playerid, kogusData[g][kogusUzaklik], kogusData[g][kogusAcikPos][0], kogusData[g][kogusAcikPos][1], kogusData[g][kogusAcikPos][2]) && GetPlayerVirtualWorld(playerid) == kogusData[g][kogusVw]) return g;
			}
		}
		case true:
		{
			foreach(new g: Koguslar)
			{
				if(IsPlayerInRangeOfPoint(playerid, Yakinlik, kogusData[g][kogusAcikPos][0], kogusData[g][kogusAcikPos][1], kogusData[g][kogusAcikPos][2]) && GetPlayerVirtualWorld(playerid) == kogusData[g][kogusVw]) return g;
			}
		}
	}
	return -1;
}

function EvEnvanterKontrol(playerid, evid){
	new rows;
	cache_get_row_count(rows);

	if(rows){
		new subString[3000], item_name[24], baslik[80], itemobjesi;
		for (new i = 0; i < MAX_ITEM; i++)
		{
			if (EvEnvanterData[evid][i_aktif][i]) {
				format (item_name, sizeof(item_name), "%s", ItemArray[EvEnvanterData[evid][i_tip][i] - 1][iisim]);
				itemobjesi = ItemArray[EvEnvanterData[evid][i_tip][i] - 1][iobje];
				format(subString, sizeof(subString), "%s%d\n%s(%d)\n", subString, itemobjesi, item_name, i);
			}
			else if(!EvEnvanterData[evid][i_aktif][i]) {
				format(subString, sizeof(subString), "%s%d\nBos Slot(%d)\n",subString, 18631, i);
			}
		}
		SetPVarInt(playerid, "EnvanterEvId", evid);
		Dialog_Show(playerid, ev_envanter_goster, DIALOG_STYLE_PREVMODEL, baslik, subString, "Sec", "Iptal");
	}
	else hataMesaji(playerid, "Ev envanteriniz tamamen boþ. Eþya alamazsýnýz.");
	return 1;
}

Dialog:ev_envanter_goster(playerid, response, listitem, inputtext[])
{
	if(response){
		new evid = GetPVarInt(playerid, "EnvanterEvId");
		if(!EvEnvanterData[evid][i_aktif][listitem]) return hataMesaji(playerid, "Bu slotta eþya bulunmuyor.");
		new item_isim[85];
		format(item_isim, sizeof(item_isim), "{90C3D4}%s", ItemArray[EvEnvanterData[evid][i_tip][listitem] - 1][iisim]);
		//SunucuMesaji(playerid, "Eþya Ýsim: %s - Eþya Slot: %d", ItemArray[EvEnvanterData[evid][i_tip][listitem] - 1][iisim], listitem);
		new basaridurum = ItemEkle(playerid, EvEnvanterData[evid][i_tip][listitem], EvEnvanterData[evid][i_var][listitem]);
		if(basaridurum == 1){
			SunucuMesaji(playerid, "%d slotundaki %s isimli eþyayý ev envanterinden aldýn.", listitem, ItemArray[EvEnvanterData[evid][i_tip][listitem] - 1][iisim]);
			EvEnvanterData[evid][i_tip][listitem] = 0;
				EvEnvanterData[evid][i_var][listitem] = 0;
				EvEnvanterData[evid][i_aktif][listitem] = false;
				new query[192];
				mysql_format(g_SQL, query, sizeof(query), "DELETE FROM ev_envanter WHERE ItemSlot = '%d'", listitem);
				mysql_query(g_SQL, query);
		}
		else hataMesaji(playerid, "Eþyayý alamadýn. Envanterinde yer açmayý denemelisin.");
	}
	return 1;
}

stock EvGetBosSlot(evid)
	{
		for (new i = 0; i < MAX_ITEM; i++)
		{
			if (!EvEnvanterData[evid][i_aktif][i]) return i;
		}
		return MAX_ITEM;
	}

stock EvEnvanterEsyaEkle(playerid, evid, slot)
{	
	if(EvGetBosSlot(evid) < MAX_ITEM) {
		new evslot = EvGetBosSlot(evid);
	new query[250], tip, var;
	tip = ItemArray[ EnvanterData[playerid][i_tip][slot] - 1 ][iid];
	var = EnvanterData[playerid][i_var][slot];
	mysql_format(g_SQL, query, sizeof(query), "INSERT INTO ev_envanter (EvId, ItemSlot, ItemTip, ItemMiktar) VALUES('%d', '%d', '%d', '%d')", EvBilgi[evid][evID], evslot, tip, var);
	mysql_query(g_SQL, query);
	EvEnvanterData[evid][i_tip][evslot] = tip;
	EvEnvanterData[evid][i_var][evslot] = var;
	EvEnvanterData[evid][i_aktif][evslot] = true;
	ItemSil(playerid, slot);
	SunucuMesaji(playerid, "Eve bir eþya býraktýnýz.");
	}
	else hataMesaji(playerid, "Evde boþ slot bulunmuyor.");
	return 1;
}

stock EvEsyaBirak(playerid, sayfa)
{
	if(Oyuncu_Evde(playerid) != -1)
	{
		new id = Oyuncu_Evde(playerid);
		if(Ev_SahipKontrol(playerid, id))
		{
			EvEnvanterEsyaEkle(playerid, id, sayfa);
		}
		else hataMesaji(playerid, "Sahibi olduðun bir evde deðilsin.");
	}
	else hataMesaji(playerid, "Sahibi olduðun bir evde deðilsin.");
	return 1;
}

stock KomutUygunlukKontrol(playerid){
	new uygunluk = 1;
	if(oyuncuData[playerid][oGiris] == false) uygunluk = 0;
	if(oyuncuData[playerid][oDonduruldu] > 0) uygunluk = 0;
	if(oyuncuData[playerid][oHapisSure][0] > 0 || oyuncuData[playerid][oHapisSure][1] > 0) uygunluk = 0;
	if(oyuncuData[playerid][oGozalti] > 0) uygunluk = 0;
	if(oyuncuData[playerid][oYarali] == true) uygunluk = 0;
	
	return uygunluk;
}

CMD:kiyafet(playerid, params[]){
	if(KomutUygunlukKontrol(playerid) == 0) return UygunDegilMesaj(playerid);
	if(GetPlayerVirtualWorld(playerid) > 0)
	{
		new dialogString[256];
		for(new i = 0; i < 3; i++){
			switch(oyuncuData[playerid][oKiyafetDolabi][i])
			{
				case 0: format(dialogString, sizeof(dialogString), "%s%d\nBos Slot(%d)\n",dialogString, 18631, i + 1);
				default: format(dialogString, sizeof(dialogString), "%s%d\nKullanilan Slot(%d)\n", dialogString, oyuncuData[playerid][oKiyafetDolabi][i], i + 1);
			}
		}
		for(new i = 0; i < 3; i++){
			switch(oyuncuData[playerid][oPremiumSkin][i])
			{
				case 0: format(dialogString, sizeof(dialogString), "%s%d\nBos Premium(%d)\n",dialogString, 18631, i + 1);
				default: format(dialogString, sizeof(dialogString), "%s%d\nKullanilan Premium\n", dialogString, oyuncuData[playerid][oPremiumSkin][i]);
			}
		}
		Dialog_Show(playerid, kiyafet_secim_dialog, DIALOG_STYLE_PREVMODEL, "Kiyafet Dolabi", dialogString, "Sec", "Iptal");
	}
	else hataMesaji(playerid, "Bir evde/iþyerinde/binada deðilsen bu komutu kullanamazsýn.");
	return 1;
}

Dialog:kiyafet_secim_dialog(playerid, response, listitem, inputtext[]){
	if(response){
		switch(listitem){
			case 0, 1, 2:{
				if(oyuncuData[playerid][oKiyafetDolabi][listitem] == 0) return hataMesaji(playerid, "Bu slotta kýyafet bulunmuyor.");
				if(listitem == 0) ShowPlayerDialog(playerid, DIALOG_KIYAFET_SLOT_BIR, DIALOG_STYLE_LIST, "> Kýyafet", "Giy\nÇöpe At\nPoþete Koy", "Seç", "Ýptal");
				if(listitem == 1) ShowPlayerDialog(playerid, DIALOG_KIYAFET_SLOT_IKI, DIALOG_STYLE_LIST, "> Kýyafet", "Giy\nÇöpe At\nPoþete Koy", "Seç", "Ýptal");
				if(listitem == 2) ShowPlayerDialog(playerid, DIALOG_KIYAFET_SLOT_UC, DIALOG_STYLE_LIST, "> Kýyafet", "Giy\nÇöpe At\nPoþete Koy", "Seç", "Ýptal");
			}
			case 3, 4, 5:{
				if(oyuncuData[playerid][oPremiumSkin][listitem - 3] == 0) return hataMesaji(playerid, "Bu slotta kýyafetin bulunmuyor.");
				cmd(playerid, 1, "askýlýktan kýyafetlerini alýp giyinir.");
				switch(oyuncuData[playerid][oGeciciKiyafet])
				{
					case 0: {
						oyuncuData[playerid][oKiyafet] = oyuncuData[playerid][oPremiumSkin][listitem - 3];
						SetPlayerSkin(playerid, oyuncuData[playerid][oPremiumSkin][listitem - 3]);
					}
					default:
					{
						oyuncuData[playerid][oGeciciKiyafet] = oyuncuData[playerid][oPremiumSkin][listitem - 3];
						SetPlayerSkin(playerid, oyuncuData[playerid][oPremiumSkin][listitem - 3]);
					}
				}
			}
		}
	}
	return 1;
}
